Search.setIndex({"docnames": ["compiler/compiler", "compiler/setting_up", "compiler/transpiler", "docs/data_classes/data_classes/FactorizedTensor/ivy.data_classes.FactorizedTensor.base", "docs/data_classes/data_classes/FactorizedTensor/ivy.data_classes.FactorizedTensor.cp_tensor", "docs/data_classes/data_classes/FactorizedTensor/ivy.data_classes.FactorizedTensor.tucker_tensor", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type", "docs/data_classes/data_classes/array/ivy.data_classes.array.device", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental", "docs/data_classes/data_classes/array/ivy.data_classes.array.general", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients", "docs/data_classes/data_classes/array/ivy.data_classes.array.image", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms", "docs/data_classes/data_classes/array/ivy.data_classes.array.random", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching", "docs/data_classes/data_classes/array/ivy.data_classes.array.set", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations", "docs/data_classes/data_classes/container/ivy.data_classes.container.base", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type", "docs/data_classes/data_classes/container/ivy.data_classes.container.device", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental", "docs/data_classes/data_classes/container/ivy.data_classes.container.general", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients", "docs/data_classes/data_classes/container/ivy.data_classes.container.image", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms", "docs/data_classes/data_classes/container/ivy.data_classes.container.random", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching", "docs/data_classes/data_classes/container/ivy.data_classes.container.set", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping", "docs/data_classes/data_classes/ivy.data_classes.FactorizedTensor", "docs/data_classes/data_classes/ivy.data_classes.array", "docs/data_classes/data_classes/ivy.data_classes.container", "docs/data_classes/data_classes/ivy.data_classes.nested_array", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise", "docs/data_classes/ivy.data_classes", "docs/functional/ivy.functional.ivy", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cast_bool", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_handle_nestable", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_device", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_dtype", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_inputs_to_native_shapes", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_to_native_arrays_and_back", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.dev", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.sequence_length", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanquantile", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str", "docs/functional/ivy/general/ivy.functional.ivy.general.default", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat", "docs/functional/ivy/general/ivy.functional.ivy.general.exists", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.gather", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array", "docs/functional/ivy/general/ivy.functional.ivy.general.isin", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.shape", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow", "docs/functional/ivy/general/ivy.functional.ivy.general.strides", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad", "docs/functional/ivy/ivy.functional.ivy.activations", "docs/functional/ivy/ivy.functional.ivy.constants", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops", "docs/functional/ivy/ivy.functional.ivy.creation", "docs/functional/ivy/ivy.functional.ivy.data_type", "docs/functional/ivy/ivy.functional.ivy.device", "docs/functional/ivy/ivy.functional.ivy.elementwise", "docs/functional/ivy/ivy.functional.ivy.experimental", "docs/functional/ivy/ivy.functional.ivy.general", "docs/functional/ivy/ivy.functional.ivy.gradients", "docs/functional/ivy/ivy.functional.ivy.layers", "docs/functional/ivy/ivy.functional.ivy.linear_algebra", "docs/functional/ivy/ivy.functional.ivy.losses", "docs/functional/ivy/ivy.functional.ivy.manipulation", "docs/functional/ivy/ivy.functional.ivy.meta", "docs/functional/ivy/ivy.functional.ivy.nest", "docs/functional/ivy/ivy.functional.ivy.norms", "docs/functional/ivy/ivy.functional.ivy.random", "docs/functional/ivy/ivy.functional.ivy.searching", "docs/functional/ivy/ivy.functional.ivy.set", "docs/functional/ivy/ivy.functional.ivy.sorting", "docs/functional/ivy/ivy.functional.ivy.statistical", "docs/functional/ivy/ivy.functional.ivy.utility", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial", "docs/functional/ivy/random/ivy.functional.ivy.random.randint", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform", "docs/functional/ivy/random/ivy.functional.ivy.random.seed", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save", "docs/helpers/ivy_tests.test_ivy.helpers.assertions", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing", "docs/helpers/ivy_tests.test_ivy.helpers.globals", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.pipeline_helper", "docs/helpers/ivy_tests.test_ivy.helpers.structs", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers", "docs/ivy.stateful", "docs/ivy.utils", "docs/ivy_tests.test_ivy.helpers", "docs/stateful/ivy.stateful.activations", "docs/stateful/ivy.stateful.converters", "docs/stateful/ivy.stateful.helpers", "docs/stateful/ivy.stateful.initializers", "docs/stateful/ivy.stateful.layers", "docs/stateful/ivy.stateful.losses", "docs/stateful/ivy.stateful.module", "docs/stateful/ivy.stateful.norms", "docs/stateful/ivy.stateful.optimizers", "docs/stateful/ivy.stateful.sequential", "docs/utils/ivy.utils.assertions", "docs/utils/ivy.utils.backend", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler", "docs/utils/ivy.utils.dynamic_import", "docs/utils/ivy.utils.einsum_parser", "docs/utils/ivy.utils.exceptions", "docs/utils/ivy.utils.inspection", "docs/utils/ivy.utils.logging", "docs/utils/ivy.utils.profiler", "docs/utils/ivy.utils.verbosity", "index", "overview/background", "overview/background/ml_explosion", "overview/background/standardization", "overview/background/why_unify", "overview/contributing", "overview/contributing/applied_libraries", "overview/contributing/building_the_docs", "overview/contributing/helpful_resources", "overview/contributing/open_tasks", "overview/contributing/setting_up", "overview/contributing/the_basics", "overview/deep_dive", "overview/deep_dive/array_api_tests", "overview/deep_dive/arrays", "overview/deep_dive/backend_setting", "overview/deep_dive/building_the_docs_pipline", "overview/deep_dive/containers", "overview/deep_dive/continuous_integration", "overview/deep_dive/data_types", "overview/deep_dive/devices", "overview/deep_dive/docstring_examples", "overview/deep_dive/docstrings", "overview/deep_dive/exception_handling", "overview/deep_dive/formatting", "overview/deep_dive/function_arguments", "overview/deep_dive/function_types", "overview/deep_dive/function_wrapping", "overview/deep_dive/gradients", "overview/deep_dive/inplace_updates", "overview/deep_dive/ivy_frontends", "overview/deep_dive/ivy_frontends_tests", "overview/deep_dive/ivy_tests", "overview/deep_dive/navigating_the_code", "overview/deep_dive/operating_modes", "overview/deep_dive/superset_behaviour", "overview/design", "overview/design/building_blocks", "overview/design/ivy_as_a_framework", "overview/design/ivy_as_a_framework/ivy_array", "overview/design/ivy_as_a_framework/ivy_container", "overview/design/ivy_as_a_framework/ivy_stateful_api", "overview/design/ivy_as_a_transpiler", "overview/extensions", "overview/extensions/applied_libraries", "overview/faq", "overview/get_started", "overview/glossary", "overview/related_work", "overview/related_work/api_standards", "overview/related_work/compiler_infrastructure", "overview/related_work/exchange_formats", "overview/related_work/frameworks", "overview/related_work/graph_tracers", "overview/related_work/ml_unifying_companies", "overview/related_work/multi_vendor_compiler_frameworks", "overview/related_work/vendor_specific_apis", "overview/related_work/vendor_specific_compilers", "overview/related_work/what_does_ivy_add", "overview/related_work/wrapper_frameworks"], "filenames": ["compiler/compiler.rst", "compiler/setting_up.rst", "compiler/transpiler.rst", "docs/data_classes/data_classes/FactorizedTensor/ivy.data_classes.FactorizedTensor.base.rst", "docs/data_classes/data_classes/FactorizedTensor/ivy.data_classes.FactorizedTensor.cp_tensor.rst", "docs/data_classes/data_classes/FactorizedTensor/ivy.data_classes.FactorizedTensor.tucker_tensor.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.device.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.general.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.image.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.random.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.set.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.base.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.device.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.general.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.image.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.random.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.set.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping.rst", "docs/data_classes/data_classes/ivy.data_classes.FactorizedTensor.rst", "docs/data_classes/data_classes/ivy.data_classes.array.rst", "docs/data_classes/data_classes/ivy.data_classes.container.rst", "docs/data_classes/data_classes/ivy.data_classes.nested_array.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise.rst", "docs/data_classes/ivy.data_classes.rst", "docs/functional/ivy.functional.ivy.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cast_bool.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_handle_nestable.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_device.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_dtype.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_inputs_to_native_shapes.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_to_native_arrays_and_back.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.sequence_length.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta.rst", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson.rst", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanquantile.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.default.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.exists.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isin.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.strides.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad.rst", "docs/functional/ivy/ivy.functional.ivy.activations.rst", "docs/functional/ivy/ivy.functional.ivy.constants.rst", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops.rst", "docs/functional/ivy/ivy.functional.ivy.creation.rst", "docs/functional/ivy/ivy.functional.ivy.data_type.rst", "docs/functional/ivy/ivy.functional.ivy.device.rst", "docs/functional/ivy/ivy.functional.ivy.elementwise.rst", "docs/functional/ivy/ivy.functional.ivy.experimental.rst", "docs/functional/ivy/ivy.functional.ivy.general.rst", "docs/functional/ivy/ivy.functional.ivy.gradients.rst", "docs/functional/ivy/ivy.functional.ivy.layers.rst", "docs/functional/ivy/ivy.functional.ivy.linear_algebra.rst", "docs/functional/ivy/ivy.functional.ivy.losses.rst", "docs/functional/ivy/ivy.functional.ivy.manipulation.rst", "docs/functional/ivy/ivy.functional.ivy.meta.rst", "docs/functional/ivy/ivy.functional.ivy.nest.rst", "docs/functional/ivy/ivy.functional.ivy.norms.rst", "docs/functional/ivy/ivy.functional.ivy.random.rst", "docs/functional/ivy/ivy.functional.ivy.searching.rst", "docs/functional/ivy/ivy.functional.ivy.set.rst", "docs/functional/ivy/ivy.functional.ivy.sorting.rst", "docs/functional/ivy/ivy.functional.ivy.statistical.rst", "docs/functional/ivy/ivy.functional.ivy.utility.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices.rst", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.randint.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.seed.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save.rst", "docs/helpers/ivy_tests.test_ivy.helpers.assertions.rst", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks.rst", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing.rst", "docs/helpers/ivy_tests.test_ivy.helpers.globals.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.pipeline_helper.rst", "docs/helpers/ivy_tests.test_ivy.helpers.structs.rst", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags.rst", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers.rst", "docs/ivy.stateful.rst", "docs/ivy.utils.rst", "docs/ivy_tests.test_ivy.helpers.rst", "docs/stateful/ivy.stateful.activations.rst", "docs/stateful/ivy.stateful.converters.rst", "docs/stateful/ivy.stateful.helpers.rst", "docs/stateful/ivy.stateful.initializers.rst", "docs/stateful/ivy.stateful.layers.rst", "docs/stateful/ivy.stateful.losses.rst", "docs/stateful/ivy.stateful.module.rst", "docs/stateful/ivy.stateful.norms.rst", "docs/stateful/ivy.stateful.optimizers.rst", "docs/stateful/ivy.stateful.sequential.rst", "docs/utils/ivy.utils.assertions.rst", "docs/utils/ivy.utils.backend.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler.rst", "docs/utils/ivy.utils.dynamic_import.rst", "docs/utils/ivy.utils.einsum_parser.rst", "docs/utils/ivy.utils.exceptions.rst", "docs/utils/ivy.utils.inspection.rst", "docs/utils/ivy.utils.logging.rst", "docs/utils/ivy.utils.profiler.rst", "docs/utils/ivy.utils.verbosity.rst", "index.rst", "overview/background.rst", "overview/background/ml_explosion.rst", "overview/background/standardization.rst", "overview/background/why_unify.rst", "overview/contributing.rst", "overview/contributing/applied_libraries.rst", "overview/contributing/building_the_docs.rst", "overview/contributing/helpful_resources.rst", "overview/contributing/open_tasks.rst", "overview/contributing/setting_up.rst", "overview/contributing/the_basics.rst", "overview/deep_dive.rst", "overview/deep_dive/array_api_tests.rst", "overview/deep_dive/arrays.rst", "overview/deep_dive/backend_setting.rst", "overview/deep_dive/building_the_docs_pipline.rst", "overview/deep_dive/containers.rst", "overview/deep_dive/continuous_integration.rst", "overview/deep_dive/data_types.rst", "overview/deep_dive/devices.rst", "overview/deep_dive/docstring_examples.rst", "overview/deep_dive/docstrings.rst", "overview/deep_dive/exception_handling.rst", "overview/deep_dive/formatting.rst", "overview/deep_dive/function_arguments.rst", "overview/deep_dive/function_types.rst", "overview/deep_dive/function_wrapping.rst", "overview/deep_dive/gradients.rst", "overview/deep_dive/inplace_updates.rst", "overview/deep_dive/ivy_frontends.rst", "overview/deep_dive/ivy_frontends_tests.rst", "overview/deep_dive/ivy_tests.rst", "overview/deep_dive/navigating_the_code.rst", "overview/deep_dive/operating_modes.rst", "overview/deep_dive/superset_behaviour.rst", "overview/design.rst", "overview/design/building_blocks.rst", "overview/design/ivy_as_a_framework.rst", "overview/design/ivy_as_a_framework/ivy_array.rst", "overview/design/ivy_as_a_framework/ivy_container.rst", "overview/design/ivy_as_a_framework/ivy_stateful_api.rst", "overview/design/ivy_as_a_transpiler.rst", "overview/extensions.rst", "overview/extensions/applied_libraries.rst", "overview/faq.rst", "overview/get_started.rst", "overview/glossary.rst", "overview/related_work.rst", "overview/related_work/api_standards.rst", "overview/related_work/compiler_infrastructure.rst", "overview/related_work/exchange_formats.rst", "overview/related_work/frameworks.rst", "overview/related_work/graph_tracers.rst", "overview/related_work/ml_unifying_companies.rst", "overview/related_work/multi_vendor_compiler_frameworks.rst", "overview/related_work/vendor_specific_apis.rst", "overview/related_work/vendor_specific_compilers.rst", "overview/related_work/what_does_ivy_add.rst", "overview/related_work/wrapper_frameworks.rst"], "titles": ["Graph Compiler", "Setting Up", "Transpiler", "Base", "Cp tensor", "Tucker tensor", "Activations", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Activations", "Base", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Factorizedtensor", "Array", "Container", "Nested array", "Base", "Elementwise", "Data classes", "Functions", "gelu", "hardswish", "leaky_relu", "log_softmax", "mish", "relu", "sigmoid", "softmax", "softplus", "cast_bool", "cmp_is", "cmp_isnot", "for_loop", "if_else", "try_except", "while_loop", "arange", "array", "asarray", "asarray_handle_nestable", "asarray_infer_device", "asarray_infer_dtype", "asarray_inputs_to_native_shapes", "asarray_to_native_arrays_and_back", "copy_array", "empty", "empty_like", "eye", "from_dlpack", "frombuffer", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "one_hot", "ones", "ones_like", "tril", "triu", "triu_indices", "zeros", "zeros_like", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "check_float", "closest_valid_dtype", "default_complex_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "default_uint_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "infer_default_dtype", "invalid_dtype", "is_bool_dtype", "is_complex_dtype", "is_float_dtype", "is_hashable_dtype", "is_int_dtype", "is_native_dtype", "is_uint_dtype", "promote_types", "promote_types_of_inputs", "result_type", "set_default_complex_dtype", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "set_default_uint_dtype", "type_promote_arrays", "unset_default_complex_dtype", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "unset_default_uint_dtype", "valid_dtype", "as_ivy_dev", "as_native_dev", "clear_cached_mem_on_dev", "default_device", "dev", "dev_util", "function_supported_devices", "function_unsupported_devices", "get_all_ivy_arrays_on_dev", "gpu_is_available", "handle_soft_device_variable", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_soft_device_mode", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "unset_soft_device_mode", "used_mem_on_dev", "abs", "acos", "acosh", "add", "angle", "asin", "asinh", "atan", "atan2", "atanh", "bitwise_and", "bitwise_invert", "bitwise_left_shift", "bitwise_or", "bitwise_right_shift", "bitwise_xor", "ceil", "cos", "cosh", "deg2rad", "divide", "equal", "erf", "exp", "exp2", "expm1", "floor", "floor_divide", "fmin", "fmod", "gcd", "greater", "greater_equal", "imag", "isfinite", "isinf", "isnan", "isreal", "lcm", "less", "less_equal", "log", "log10", "log1p", "log2", "logaddexp", "logaddexp2", "logical_and", "logical_not", "logical_or", "logical_xor", "maximum", "minimum", "multiply", "nan_to_num", "negative", "not_equal", "positive", "pow", "rad2deg", "real", "reciprocal", "remainder", "round", "sign", "sin", "sinh", "sqrt", "square", "subtract", "tan", "tanh", "trapz", "trunc", "trunc_divide", "elu", "logit", "logsigmoid", "prelu", "relu6", "selu", "sequence_length", "silu", "thresholded_relu", "blackman_window", "eye_like", "hamming_window", "hann_window", "indices", "kaiser_bessel_derived_window", "kaiser_window", "ndenumerate", "ndindex", "random_cp", "random_tucker", "tril_indices", "trilu", "unsorted_segment_min", "unsorted_segment_sum", "vorbis_window", "allclose", "binarizer", "conj", "copysign", "count_nonzero", "diff", "digamma", "fix", "float_power", "fmax", "frexp", "gradient", "hypot", "isclose", "ldexp", "lerp", "lgamma", "modf", "nansum", "nextafter", "signbit", "sinc", "xlogy", "zeta", "reduce", "bind_custom_gradient_function", "Activations", "Constants", "Creation", "Data type", "Device", "Elementwise", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Sparse array", "Statistical", "Utility", "adaptive_avg_pool1d", "adaptive_avg_pool2d", "adaptive_max_pool2d", "area_interpolate", "avg_pool1d", "avg_pool2d", "avg_pool3d", "dct", "dft", "dropout1d", "dropout2d", "dropout3d", "embedding", "fft", "fft2", "generate_einsum_equation", "get_interpolate_kernel", "idct", "ifft", "ifftn", "interp", "interpolate", "max_pool1d", "max_pool2d", "max_pool3d", "max_unpool1d", "nearest_interpolate", "pool", "reduce_window", "rfftn", "adjoint", "cond", "diagflat", "dot", "eig", "eigh_tridiagonal", "eigvals", "initialize_tucker", "khatri_rao", "kron", "kronecker", "make_svd_non_negative", "matrix_exp", "mode_dot", "multi_dot", "multi_mode_dot", "partial_tucker", "svd_flip", "truncated_svd", "tucker", "log_poisson_loss", "as_strided", "associative_scan", "atleast_1d", "atleast_2d", "atleast_3d", "broadcast_shapes", "concat_from_sequence", "dsplit", "dstack", "expand", "fill_diagonal", "flatten", "fliplr", "flipud", "fold", "heaviside", "hsplit", "hstack", "i0", "matricize", "moveaxis", "pad", "partial_fold", "partial_tensor_to_vec", "partial_unfold", "partial_vec_to_tensor", "put_along_axis", "rot90", "soft_thresholding", "take_along_axis", "top_k", "unfold", "unique_consecutive", "vsplit", "vstack", "batch_norm", "group_norm", "instance_norm", "l1_normalize", "l2_normalize", "lp_normalize", "bernoulli", "beta", "dirichlet", "gamma", "poisson", "unravel_index", "invert_permutation", "lexsort", "is_ivy_sparse_array", "is_native_sparse_array", "native_sparse_array", "native_sparse_array_to_indices_values_and_shape", "bincount", "corrcoef", "cov", "cummax", "cummin", "histogram", "igamma", "median", "nanmean", "nanmedian", "nanquantile", "quantile", "all_equal", "arg_info", "arg_names", "array_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "fourier_encode", "function_supported_devices_and_dtypes", "function_unsupported_devices_and_dtypes", "gather", "gather_nd", "get_all_arrays_in_memory", "get_item", "get_num_dims", "get_referrers_recursive", "has_nans", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_ivy_nested_array", "is_native_array", "isin", "isscalar", "itemsize", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "print_all_arrays_in_memory", "scatter_flat", "scatter_nd", "set_array_mode", "set_exception_trace_mode", "set_item", "set_min_base", "set_min_denominator", "set_nestable_mode", "set_precise_mode", "set_queue_timeout", "set_shape_array_mode", "set_show_func_wrapper_trace_mode", "set_tmp_dir", "shape", "stable_divide", "stable_pow", "strides", "supports_inplace_updates", "to_ivy_shape", "to_list", "to_native_shape", "to_numpy", "to_scalar", "try_else_none", "unset_array_mode", "unset_exception_trace_mode", "unset_min_base", "unset_min_denominator", "unset_nestable_mode", "unset_precise_mode", "unset_queue_timeout", "unset_shape_array_mode", "unset_show_func_wrapper_trace_mode", "unset_tmp_dir", "value_is_nan", "vmap", "adam_step", "adam_update", "execute_with_gradients", "grad", "gradient_descent_update", "jac", "lamb_update", "lars_update", "optimizer_update", "stop_gradient", "value_and_grad", "Activations", "Constants", "Control flow ops", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "conv", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "conv_general_dilated", "conv_general_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "cholesky", "cross", "det", "diag", "diagonal", "eig", "eigh", "eigvalsh", "inner", "inv", "lu_factor", "matmul", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "tensorsolve", "trace", "vander", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "binary_cross_entropy", "cross_entropy", "sparse_cross_entropy", "clip", "concat", "constant_pad", "expand_dims", "flip", "permute_dims", "repeat", "reshape", "roll", "split", "squeeze", "stack", "swapaxes", "tile", "unstack", "zero_pad", "fomaml_step", "maml_step", "reptile_step", "all_nested_indices", "copy_nest", "duplicate_array_index_chains", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_argwhere", "nested_map", "nested_multi_map", "prune_empty", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "layer_norm", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "argmax", "argmin", "argwhere", "nonzero", "where", "unique_all", "unique_counts", "unique_inverse", "unique_values", "argsort", "msort", "searchsorted", "sort", "cumprod", "cumsum", "einsum", "max", "mean", "min", "prod", "std", "sum", "var", "all", "any", "save", "Assertions", "Available frameworks", "Function testing", "Globals", "Hypothesis helpers", "Array helpers", "Dtype helpers", "General helpers", "Number helpers", "Pipeline helper", "Structs", "Test parameter flags", "Testing helpers", "Framework classes", "Utils", "Testing", "Activations", "Converters", "Helpers", "Initializers", "Layers", "Losses", "Module", "Norms", "Optimizers", "Sequential", "Assertions", "Backend", "Ast helpers", "Handler", "Sub backend handler", "Dynamic import", "Einsum parser", "Exceptions", "Inspection", "Logging", "Profiler", "Verbosity", "Home", "Background", "ML Explosion", "Standardization", "Why Unify?", "Contributing", "Applied Libraries", "Building the Docs", "Helpful Resources", "Open Tasks", "Setting Up", "The Basics", "Deep Dive", "Array API Tests", "Arrays", "Backend Setting", "Building the Docs Pipeline", "Containers", "Continuous Integration", "Data Types", "Devices", "Docstring Examples", "Docstrings", "Exception Handling", "Formatting", "Function Arguments", "Function Types", "Function Wrapping", "Gradients", "Inplace Updates", "Ivy Frontends", "Ivy Frontend Tests", "Ivy Tests", "Navigating the Code", "Operating Modes", "Superset Behaviour", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Extensions", "Applied Libraries", "FAQ", "Get Started", "Glossary", "Related Work", "API Standards", "Compiler Infrastructure", "Exchange Formats", "Frameworks", "Graph Tracers", "ML-Unifying Companies", "Multi-Vendor Compiler Frameworks", "Vendor-Specific APIs", "Vendor-Specific Compilers", "What does Ivy Add?", "Wrapper Frameworks"], "terms": {"warn": [0, 2, 703, 717, 740], "The": [0, 2, 4, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 74, 75, 87, 88, 90, 92, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 115, 117, 119, 120, 121, 123, 125, 126, 127, 130, 131, 133, 134, 136, 137, 138, 139, 145, 146, 147, 148, 149, 151, 152, 153, 154, 159, 160, 161, 162, 164, 165, 166, 167, 168, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 301, 304, 305, 307, 308, 309, 310, 313, 314, 315, 319, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 342, 343, 344, 345, 346, 348, 349, 350, 352, 353, 354, 355, 356, 358, 368, 371, 372, 373, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 389, 392, 393, 398, 399, 401, 402, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 418, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 459, 461, 463, 464, 465, 467, 468, 469, 470, 471, 474, 476, 479, 480, 484, 485, 488, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 513, 515, 516, 519, 521, 522, 523, 524, 526, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 673, 675, 676, 680, 685, 686, 687, 688, 689, 690, 691, 692, 697, 700, 706, 707, 708, 710, 711, 712, 713, 715, 716, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 737, 738, 739, 741, 742, 743, 746, 747, 748, 750, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765], "transpil": [0, 1, 715, 729, 736, 742, 743, 744, 752, 753, 758, 764, 765], "ar": [0, 1, 2, 4, 7, 8, 11, 12, 13, 16, 17, 19, 21, 22, 23, 29, 31, 34, 35, 36, 39, 40, 42, 44, 45, 46, 52, 53, 75, 90, 92, 95, 100, 154, 159, 161, 166, 190, 192, 193, 196, 200, 221, 222, 226, 231, 232, 236, 238, 243, 244, 245, 268, 270, 271, 273, 274, 276, 277, 278, 280, 281, 286, 291, 294, 297, 300, 301, 302, 303, 304, 305, 307, 308, 310, 311, 312, 313, 314, 316, 319, 320, 322, 323, 329, 330, 331, 332, 335, 340, 342, 350, 355, 356, 358, 366, 367, 368, 370, 374, 375, 376, 383, 384, 385, 387, 393, 396, 398, 400, 407, 409, 413, 414, 415, 416, 417, 427, 432, 433, 434, 436, 437, 440, 441, 442, 457, 462, 466, 477, 478, 486, 496, 507, 517, 529, 531, 532, 534, 535, 536, 537, 539, 541, 543, 544, 545, 559, 560, 562, 563, 565, 569, 570, 571, 575, 576, 578, 581, 585, 586, 590, 591, 592, 597, 598, 601, 605, 607, 617, 622, 627, 628, 629, 637, 638, 639, 642, 643, 644, 645, 647, 649, 668, 670, 673, 674, 675, 676, 680, 686, 687, 690, 693, 694, 700, 703, 704, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765], "publicli": [0, 2], "avail": [0, 2, 13, 36, 149, 155, 157, 158, 169, 310, 398, 449, 531, 534, 674, 706, 708, 716, 717, 723, 724, 725, 726, 728, 729, 736, 738, 741, 751, 752, 763, 764], "yet": [0, 2, 300, 302, 303, 311, 312, 316, 320, 715, 716, 751], "so": [0, 1, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 77, 83, 85, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 102, 106, 107, 108, 121, 125, 126, 133, 150, 167, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 262, 263, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 304, 317, 319, 325, 326, 327, 328, 330, 331, 332, 334, 338, 339, 340, 343, 344, 345, 349, 351, 352, 353, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 440, 441, 443, 444, 447, 448, 449, 450, 451, 452, 455, 456, 459, 461, 463, 464, 465, 467, 468, 469, 471, 472, 474, 479, 480, 493, 494, 495, 496, 498, 500, 501, 513, 515, 516, 519, 521, 522, 523, 524, 536, 541, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 575, 576, 581, 582, 583, 585, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 627, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 706, 708, 709, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 751, 758, 759, 760, 762], "certain": [0, 1, 2, 29, 75, 91, 92, 529, 716, 717, 719, 725, 732, 738, 741, 751, 762], "part": [0, 2, 8, 11, 12, 34, 35, 40, 52, 61, 64, 98, 99, 100, 206, 210, 233, 268, 269, 290, 301, 304, 308, 310, 319, 356, 393, 436, 526, 529, 532, 537, 570, 571, 670, 689, 690, 706, 712, 715, 717, 719, 722, 725, 730, 732, 735, 736, 738, 739, 741, 743, 744, 748, 750, 751, 756, 758, 763, 764, 765], "thi": [0, 1, 2, 4, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 75, 76, 77, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 108, 118, 121, 124, 125, 126, 128, 132, 133, 147, 150, 160, 166, 167, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 262, 263, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 316, 319, 320, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 338, 339, 340, 343, 344, 345, 346, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 440, 441, 443, 444, 447, 448, 449, 450, 451, 452, 455, 456, 459, 461, 463, 464, 465, 467, 468, 469, 471, 472, 474, 479, 480, 488, 493, 494, 495, 496, 498, 500, 501, 513, 514, 515, 516, 517, 519, 521, 522, 523, 524, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 618, 622, 623, 628, 629, 633, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 671, 673, 674, 676, 684, 685, 687, 688, 690, 691, 692, 693, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765], "doc": [0, 2, 35, 100, 268, 301, 429, 529, 706, 711, 714, 715, 718, 727, 728, 730, 731, 738, 743, 746, 747], "won": [0, 2, 709, 710, 716, 717, 723, 725, 748, 752], "t": [0, 1, 2, 4, 12, 16, 27, 35, 39, 50, 52, 284, 298, 304, 306, 308, 356, 465, 496, 517, 534, 535, 536, 541, 560, 561, 624, 688, 706, 709, 710, 712, 713, 715, 716, 717, 718, 720, 721, 723, 724, 725, 726, 727, 730, 732, 733, 734, 735, 738, 739, 741, 743, 745, 746, 747, 748, 751, 752, 756, 758, 760], "work": [0, 1, 2, 4, 12, 35, 319, 436, 541, 623, 624, 628, 633, 634, 706, 710, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 735, 736, 737, 738, 739, 742, 743, 745, 747, 748, 752, 756, 758, 760, 762, 765], "expect": [0, 2, 12, 17, 18, 35, 41, 132, 200, 244, 307, 329, 350, 439, 530, 532, 534, 538, 580, 594, 686, 687, 688, 690, 706, 710, 716, 717, 719, 725, 726, 729, 730, 733, 735, 737, 738, 741, 751, 752], "now": [0, 2, 688, 689, 690, 706, 710, 716, 719, 720, 721, 722, 723, 724, 725, 726, 731, 733, 736, 737, 738, 739, 741, 745, 746, 748, 750, 751, 758], "when": [0, 1, 2, 7, 8, 9, 11, 12, 17, 18, 21, 22, 25, 29, 31, 32, 34, 35, 40, 41, 44, 45, 48, 53, 95, 105, 176, 193, 198, 200, 216, 226, 231, 244, 245, 249, 299, 307, 308, 310, 313, 314, 319, 329, 342, 356, 358, 367, 370, 398, 407, 409, 414, 434, 436, 465, 481, 488, 494, 529, 530, 532, 534, 536, 537, 538, 539, 541, 543, 544, 547, 549, 562, 578, 583, 594, 595, 596, 604, 616, 617, 626, 627, 628, 637, 638, 639, 642, 643, 645, 646, 658, 660, 662, 664, 673, 676, 686, 687, 688, 689, 690, 691, 697, 708, 709, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 743, 745, 746, 748, 751, 756, 758, 761, 762, 763, 764], "we": [0, 1, 2, 4, 12, 17, 18, 27, 35, 40, 41, 50, 298, 306, 310, 402, 448, 496, 517, 518, 520, 525, 534, 535, 537, 538, 578, 594, 686, 690, 697, 706, 707, 708, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 741, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 758, 759, 763, 764], "call": [0, 2, 4, 12, 27, 29, 32, 35, 50, 53, 71, 125, 126, 166, 308, 319, 365, 434, 488, 502, 517, 518, 520, 528, 531, 534, 535, 537, 541, 583, 616, 622, 626, 627, 670, 686, 688, 689, 690, 692, 697, 706, 709, 715, 717, 720, 721, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 735, 736, 737, 738, 739, 741, 743, 745, 746, 747, 748, 751, 758, 759, 762], "an": [0, 1, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 75, 76, 77, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 118, 121, 124, 128, 132, 133, 163, 167, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 252, 253, 255, 256, 258, 259, 261, 262, 263, 264, 265, 268, 269, 270, 271, 272, 275, 278, 280, 285, 289, 294, 299, 301, 304, 307, 308, 309, 310, 313, 314, 317, 319, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 338, 340, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 355, 356, 357, 371, 373, 374, 375, 376, 378, 379, 381, 388, 392, 393, 398, 399, 404, 405, 407, 408, 409, 413, 414, 416, 419, 420, 425, 426, 427, 428, 429, 430, 431, 434, 441, 443, 444, 452, 455, 459, 461, 463, 464, 465, 467, 468, 469, 470, 471, 474, 480, 483, 492, 496, 500, 501, 502, 514, 517, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 622, 635, 637, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 673, 675, 676, 677, 680, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 706, 709, 710, 712, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 743, 745, 746, 747, 748, 750, 751, 753, 754, 756, 757, 758, 759, 761, 762, 764, 765], "ivi": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 680, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 709, 710, 711, 713, 714, 716, 718, 719, 721, 723, 725, 726, 728, 730, 731, 732, 733, 735, 741, 742, 749, 751, 752, 753, 754, 765], "function": [0, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 74, 75, 76, 77, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 108, 118, 119, 120, 121, 124, 125, 126, 128, 132, 133, 150, 152, 153, 166, 167, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 262, 263, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 319, 320, 325, 326, 327, 328, 330, 331, 332, 334, 338, 339, 340, 343, 344, 345, 346, 349, 351, 352, 353, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 461, 463, 464, 465, 467, 468, 469, 471, 472, 474, 475, 478, 479, 480, 483, 486, 488, 490, 493, 494, 495, 496, 498, 500, 501, 502, 507, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 622, 623, 624, 626, 627, 628, 629, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 671, 673, 674, 675, 676, 680, 684, 687, 690, 697, 702, 706, 708, 716, 717, 718, 719, 720, 721, 722, 724, 727, 728, 735, 742, 744, 745, 746, 747, 749, 750, 753, 755, 756, 757, 758, 759, 764, 765], "i": [0, 2, 4, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 74, 75, 76, 77, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 133, 145, 147, 149, 150, 152, 153, 155, 157, 160, 165, 166, 167, 168, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 260, 261, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 299, 301, 304, 305, 307, 308, 309, 310, 313, 314, 317, 319, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 335, 338, 340, 342, 343, 344, 345, 346, 349, 350, 353, 354, 355, 356, 358, 359, 361, 364, 365, 366, 367, 368, 370, 371, 374, 375, 376, 378, 379, 383, 386, 387, 388, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 425, 426, 427, 428, 429, 430, 432, 433, 434, 436, 437, 440, 441, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 461, 463, 464, 465, 467, 468, 469, 470, 471, 472, 475, 476, 479, 480, 481, 488, 492, 493, 494, 496, 498, 500, 501, 502, 513, 514, 516, 517, 518, 519, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 629, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 671, 673, 674, 675, 676, 680, 685, 686, 687, 688, 689, 690, 691, 692, 694, 697, 700, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765], "alwai": [0, 8, 9, 12, 13, 19, 31, 32, 35, 42, 77, 105, 176, 226, 281, 304, 308, 310, 368, 374, 375, 376, 379, 381, 383, 384, 385, 388, 392, 399, 405, 458, 465, 530, 532, 534, 539, 600, 601, 602, 604, 606, 607, 609, 611, 675, 706, 715, 716, 717, 720, 721, 723, 725, 728, 730, 731, 732, 735, 736, 737, 738, 739, 741, 743, 751], "small": [0, 2, 11, 12, 17, 20, 34, 35, 40, 43, 193, 200, 226, 227, 273, 286, 304, 308, 313, 362, 407, 408, 409, 532, 537, 542, 578, 581, 583, 635, 687, 691, 706, 716, 724, 727, 732, 737, 741, 743, 747, 751, 759], "perform": [0, 2, 8, 12, 16, 17, 25, 26, 31, 35, 36, 39, 40, 48, 49, 62, 66, 91, 92, 163, 171, 193, 226, 247, 278, 297, 304, 305, 307, 308, 310, 317, 319, 329, 330, 331, 332, 334, 335, 339, 340, 348, 367, 373, 420, 428, 429, 448, 449, 450, 463, 464, 465, 481, 490, 526, 529, 531, 532, 534, 536, 537, 540, 541, 547, 548, 559, 561, 585, 587, 592, 613, 614, 615, 623, 624, 655, 656, 665, 666, 668, 688, 710, 719, 720, 721, 723, 725, 726, 727, 731, 732, 733, 735, 736, 737, 738, 739, 741, 743, 746, 751, 755, 758, 759, 760, 761, 762, 763, 765], "hit": [0, 738, 743], "due": [0, 2, 226, 236, 532, 709, 712, 716, 719, 724, 729, 735, 736, 758], "ad": [0, 12, 19, 35, 42, 50, 193, 226, 273, 286, 304, 313, 407, 408, 409, 493, 494, 532, 534, 537, 539, 570, 571, 600, 688, 693, 706, 709, 714, 715, 716, 717, 719, 720, 722, 723, 724, 725, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 743, 747, 751, 757, 758], "python": [0, 12, 21, 35, 44, 75, 160, 172, 200, 235, 314, 413, 414, 415, 416, 417, 514, 529, 531, 532, 534, 543, 636, 637, 638, 639, 641, 697, 700, 707, 708, 709, 714, 716, 717, 719, 722, 723, 724, 725, 729, 736, 738, 743, 745, 746, 751, 753, 755, 758, 759, 760, 764, 765], "wrap": [0, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 77, 83, 85, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 102, 106, 107, 108, 121, 125, 126, 133, 150, 167, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 262, 263, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 310, 319, 325, 326, 327, 328, 330, 331, 332, 334, 338, 339, 340, 343, 344, 345, 349, 351, 352, 353, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 455, 456, 459, 461, 463, 464, 465, 467, 468, 469, 471, 472, 474, 479, 480, 490, 493, 494, 495, 496, 498, 500, 501, 511, 513, 515, 516, 519, 521, 522, 523, 524, 534, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 575, 576, 581, 582, 583, 585, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 670, 706, 718, 719, 720, 721, 723, 724, 725, 726, 728, 729, 731, 732, 735, 736, 738, 743, 745, 748, 751, 753, 754, 758, 759, 764, 765], "overhead": [0, 751, 761], "becom": [0, 4, 12, 35, 281, 304, 310, 376, 539, 597, 697, 708, 710, 717, 723, 727, 729, 735, 751], "increasingli": [0, 727], "notic": [0, 715, 720, 724, 730, 738, 741], "larg": [0, 11, 12, 34, 35, 176, 193, 200, 226, 227, 319, 427, 532, 537, 583, 716, 717, 724, 746, 758], "model": [0, 2, 193, 226, 532, 706, 746, 747, 753, 756, 757, 758, 759, 760, 761, 762, 764, 765], "multipl": [0, 11, 12, 17, 20, 25, 26, 29, 34, 35, 36, 37, 40, 42, 43, 48, 49, 88, 187, 211, 218, 224, 225, 226, 228, 307, 308, 310, 317, 328, 335, 338, 340, 365, 379, 388, 405, 420, 437, 475, 515, 516, 519, 521, 523, 524, 529, 532, 534, 535, 536, 537, 539, 542, 544, 547, 548, 551, 552, 553, 554, 564, 573, 575, 576, 597, 600, 605, 606, 635, 642, 643, 658, 659, 660, 661, 662, 663, 664, 665, 666, 688, 706, 710, 715, 717, 720, 721, 723, 727, 729, 730, 732, 735, 736, 737, 738, 741, 743, 751, 756, 757, 758, 765], "improv": [0, 710, 717, 725, 731, 732, 741, 743, 753, 756, 758, 760, 761], "remov": [0, 2, 17, 29, 40, 537, 539, 540, 541, 568, 575, 589, 607, 613, 614, 630, 703, 706, 715, 721, 722, 724, 725, 728, 732, 738, 741, 748, 758], "extra": [0, 2, 29, 53, 71, 514, 528, 534, 720, 725, 727, 733, 735, 736, 737, 741, 743, 755, 760], "around": [0, 29, 53, 310, 393, 398, 717, 719, 720, 722, 726, 731, 732, 736, 739, 745, 751, 753, 756, 758, 765], "each": [0, 2, 4, 6, 8, 9, 11, 12, 13, 14, 16, 17, 19, 22, 23, 25, 29, 32, 34, 35, 36, 37, 39, 40, 42, 45, 46, 48, 52, 53, 60, 61, 63, 64, 65, 67, 71, 93, 106, 118, 121, 166, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 198, 199, 200, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 252, 253, 255, 256, 261, 267, 270, 271, 275, 281, 285, 289, 294, 296, 299, 301, 304, 307, 308, 310, 314, 317, 319, 325, 326, 327, 330, 331, 332, 335, 343, 344, 345, 346, 349, 350, 355, 356, 359, 366, 367, 369, 370, 374, 375, 376, 378, 379, 384, 385, 387, 388, 390, 392, 393, 396, 404, 405, 413, 420, 425, 426, 427, 428, 429, 430, 437, 440, 448, 455, 456, 472, 495, 514, 516, 517, 519, 521, 522, 523, 526, 528, 529, 530, 531, 532, 534, 535, 536, 537, 539, 541, 543, 544, 545, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 562, 564, 565, 566, 569, 570, 571, 575, 577, 578, 579, 581, 583, 584, 585, 590, 599, 603, 605, 606, 608, 610, 612, 622, 629, 636, 645, 647, 648, 650, 656, 657, 664, 673, 675, 688, 691, 692, 693, 708, 709, 710, 712, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 743, 745, 746, 748, 750, 751, 754, 755, 759, 761, 764], "take": [0, 2, 4, 12, 17, 19, 25, 35, 42, 71, 72, 74, 95, 188, 233, 240, 251, 299, 307, 310, 326, 334, 339, 344, 383, 401, 428, 429, 528, 529, 532, 536, 537, 539, 540, 562, 575, 579, 604, 615, 655, 673, 680, 687, 688, 700, 706, 710, 711, 715, 716, 717, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 735, 736, 737, 738, 741, 743, 745, 747, 748, 751, 752, 755, 756, 764], "ani": [0, 1, 2, 4, 7, 8, 10, 11, 12, 13, 17, 26, 27, 31, 33, 34, 35, 36, 49, 50, 52, 53, 71, 72, 74, 75, 76, 77, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 108, 109, 124, 128, 132, 167, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 196, 198, 199, 200, 204, 205, 206, 207, 208, 209, 213, 215, 216, 217, 218, 220, 221, 222, 223, 226, 228, 229, 230, 231, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 254, 258, 268, 269, 275, 278, 299, 301, 304, 307, 308, 310, 313, 319, 325, 326, 327, 328, 330, 331, 332, 338, 343, 344, 345, 346, 350, 356, 359, 382, 393, 407, 408, 409, 427, 430, 433, 434, 437, 447, 448, 449, 450, 451, 455, 459, 461, 463, 467, 469, 470, 487, 494, 501, 502, 508, 514, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 591, 592, 593, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 619, 622, 623, 625, 626, 633, 635, 639, 642, 643, 645, 646, 647, 648, 649, 650, 651, 654, 658, 659, 660, 661, 662, 663, 664, 665, 668, 671, 675, 684, 685, 687, 688, 690, 691, 692, 693, 697, 700, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 756, 757, 758, 759, 761, 764, 765], "framework": [0, 2, 7, 13, 123, 145, 155, 158, 169, 446, 462, 466, 496, 499, 530, 531, 534, 541, 618, 668, 670, 674, 680, 685, 692, 697, 708, 709, 710, 715, 716, 718, 719, 720, 721, 722, 724, 725, 726, 727, 729, 731, 732, 733, 735, 736, 738, 739, 741, 742, 743, 745, 748, 750, 751, 752, 753, 754, 755, 756, 757, 759, 762], "specif": [0, 2, 10, 12, 13, 33, 35, 36, 133, 164, 167, 200, 221, 222, 231, 314, 417, 448, 449, 450, 476, 530, 531, 532, 534, 537, 539, 540, 543, 546, 547, 570, 571, 587, 608, 613, 614, 615, 636, 653, 658, 659, 660, 662, 670, 689, 690, 697, 702, 706, 708, 715, 716, 717, 719, 720, 721, 722, 723, 725, 726, 729, 730, 731, 732, 735, 736, 737, 738, 739, 741, 743, 744, 745, 747, 748, 750, 751, 752, 753, 754, 756, 757, 759, 760, 761, 765], "backend": [0, 2, 7, 8, 12, 13, 17, 29, 35, 36, 40, 52, 83, 119, 120, 123, 145, 152, 153, 155, 158, 169, 308, 354, 356, 434, 441, 453, 454, 462, 465, 466, 476, 496, 499, 529, 530, 531, 534, 537, 585, 668, 670, 671, 674, 675, 677, 679, 685, 690, 692, 696, 697, 708, 714, 716, 717, 718, 719, 720, 724, 726, 727, 728, 729, 731, 732, 733, 735, 736, 737, 738, 740, 741, 742, 744, 745, 748, 753, 758, 761, 764, 765], "composit": [0, 119, 120, 152, 153, 245, 308, 360, 453, 454, 530, 531, 532, 534, 674, 676, 715, 718, 720, 721, 723, 725, 726, 733, 735, 736, 737, 738, 741, 743, 747, 748, 751, 753, 759], "both": [0, 2, 8, 11, 12, 13, 16, 17, 31, 34, 35, 36, 39, 40, 75, 76, 77, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 108, 124, 128, 131, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 196, 198, 199, 200, 204, 205, 206, 207, 208, 209, 213, 215, 216, 217, 218, 220, 221, 222, 223, 226, 228, 229, 230, 231, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 258, 269, 275, 276, 278, 281, 286, 301, 304, 307, 308, 310, 314, 319, 325, 326, 327, 328, 330, 331, 332, 338, 343, 344, 345, 346, 356, 387, 393, 413, 427, 430, 455, 459, 461, 463, 472, 501, 524, 525, 529, 530, 532, 534, 535, 536, 537, 539, 541, 542, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 591, 592, 593, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 635, 642, 643, 645, 646, 647, 648, 649, 650, 651, 654, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 688, 706, 715, 717, 721, 723, 724, 725, 726, 727, 728, 729, 731, 732, 735, 736, 738, 741, 743, 745, 746, 747, 748, 750, 751, 758, 761, 763, 764, 765], "produc": [0, 12, 13, 16, 35, 39, 251, 254, 257, 260, 299, 301, 536, 563, 673, 715, 725, 730, 735, 737, 738, 739, 759, 761], "simplifi": [0, 700, 709, 729, 736, 743, 744, 747, 754, 756, 757, 758, 761, 764, 765], "execut": [0, 72, 74, 502, 528, 531, 534, 716, 717, 722, 723, 724, 725, 726, 727, 729, 732, 733, 735, 738, 741, 743, 745, 748, 751, 753, 754, 758, 759, 760, 761, 762, 764], "comput": [0, 2, 4, 6, 11, 12, 13, 14, 16, 17, 18, 23, 25, 28, 29, 34, 35, 36, 37, 39, 40, 41, 48, 62, 66, 166, 176, 183, 186, 188, 193, 194, 195, 200, 201, 202, 204, 205, 211, 212, 213, 220, 221, 222, 223, 225, 226, 229, 234, 235, 249, 259, 262, 263, 270, 271, 275, 279, 282, 284, 285, 289, 291, 295, 296, 297, 298, 299, 301, 304, 305, 306, 307, 308, 309, 310, 313, 317, 319, 325, 326, 327, 328, 329, 334, 335, 338, 339, 340, 343, 344, 345, 346, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 363, 365, 367, 369, 370, 371, 387, 390, 402, 407, 409, 419, 427, 428, 429, 430, 431, 432, 433, 434, 436, 442, 443, 444, 487, 508, 515, 517, 518, 520, 524, 525, 531, 532, 534, 535, 536, 537, 538, 539, 541, 545, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 564, 565, 569, 570, 571, 574, 575, 576, 578, 580, 582, 584, 585, 587, 589, 591, 592, 594, 595, 596, 600, 622, 647, 648, 649, 650, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 670, 675, 688, 691, 706, 709, 710, 716, 723, 724, 725, 732, 734, 736, 738, 740, 741, 743, 746, 751, 753, 754, 756, 758, 759, 761, 762, 764], "compos": [0, 12, 35, 307, 321, 322, 323, 686, 716, 723, 736, 738, 751, 758, 765], "from": [0, 1, 2, 4, 7, 8, 9, 11, 12, 13, 14, 16, 17, 19, 21, 22, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 42, 44, 45, 48, 49, 50, 53, 75, 77, 85, 87, 88, 89, 90, 93, 94, 97, 100, 102, 108, 126, 132, 133, 149, 154, 159, 165, 166, 192, 200, 201, 228, 232, 233, 240, 244, 257, 258, 268, 270, 271, 276, 279, 281, 282, 284, 285, 296, 301, 304, 307, 308, 310, 314, 319, 330, 331, 332, 346, 350, 362, 368, 379, 388, 393, 399, 401, 404, 405, 413, 414, 415, 416, 417, 428, 429, 447, 455, 456, 458, 478, 488, 498, 514, 516, 517, 521, 529, 530, 531, 532, 534, 535, 536, 537, 539, 540, 541, 543, 544, 545, 547, 548, 550, 558, 559, 565, 568, 585, 589, 590, 591, 598, 601, 604, 607, 613, 614, 615, 617, 628, 629, 630, 636, 637, 638, 639, 643, 646, 647, 649, 655, 656, 661, 662, 663, 664, 665, 666, 668, 670, 673, 674, 675, 676, 680, 685, 686, 687, 688, 690, 692, 697, 708, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 741, 743, 744, 745, 746, 747, 748, 750, 751, 753, 754, 756, 757, 758, 759, 760, 762, 763, 764, 765], "onli": [0, 2, 4, 8, 11, 12, 17, 19, 21, 29, 31, 34, 35, 40, 42, 44, 52, 92, 131, 132, 161, 221, 222, 227, 233, 257, 279, 284, 301, 304, 307, 308, 310, 314, 319, 329, 342, 356, 359, 369, 370, 374, 375, 376, 383, 413, 414, 430, 442, 529, 530, 531, 532, 534, 536, 537, 539, 541, 543, 544, 546, 547, 562, 575, 582, 585, 601, 604, 616, 617, 623, 624, 626, 627, 628, 633, 634, 637, 638, 639, 642, 643, 653, 659, 662, 671, 673, 674, 676, 688, 690, 692, 700, 706, 708, 711, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 743, 745, 746, 747, 748, 749, 751, 757, 758, 759, 764, 765], "which": [0, 2, 4, 6, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 75, 76, 77, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 108, 110, 116, 118, 121, 123, 126, 133, 145, 150, 154, 159, 161, 164, 165, 166, 167, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 252, 253, 255, 256, 257, 258, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 283, 285, 286, 287, 288, 290, 291, 292, 294, 295, 296, 297, 298, 299, 301, 304, 305, 306, 307, 308, 309, 310, 313, 314, 317, 319, 329, 330, 331, 332, 334, 335, 339, 340, 349, 350, 353, 356, 364, 367, 368, 369, 370, 371, 374, 375, 376, 378, 398, 399, 400, 401, 402, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 427, 428, 429, 430, 432, 433, 434, 436, 437, 438, 440, 441, 443, 444, 447, 448, 449, 450, 452, 455, 456, 457, 458, 459, 461, 463, 464, 465, 467, 468, 471, 472, 477, 478, 479, 480, 493, 494, 496, 498, 500, 501, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 541, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 559, 560, 562, 563, 564, 565, 567, 568, 570, 571, 572, 573, 575, 576, 578, 579, 580, 582, 583, 584, 585, 589, 591, 592, 594, 595, 596, 597, 598, 600, 601, 603, 604, 605, 606, 607, 608, 611, 612, 621, 622, 623, 624, 629, 631, 632, 633, 634, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 673, 674, 675, 685, 686, 687, 688, 689, 690, 691, 692, 693, 697, 702, 706, 708, 709, 710, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 763, 764, 765], "result": [0, 2, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 74, 75, 76, 77, 83, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 99, 101, 102, 105, 107, 132, 133, 167, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 301, 304, 305, 307, 308, 309, 310, 313, 314, 315, 317, 319, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 359, 360, 362, 363, 364, 365, 366, 371, 373, 378, 381, 383, 384, 385, 386, 387, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 425, 427, 428, 429, 430, 431, 432, 433, 434, 436, 443, 444, 448, 449, 450, 455, 456, 465, 472, 479, 480, 515, 516, 517, 519, 521, 522, 523, 524, 526, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 612, 616, 619, 622, 623, 625, 629, 633, 635, 636, 637, 638, 639, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 675, 680, 694, 704, 706, 715, 717, 719, 720, 722, 723, 724, 725, 727, 728, 731, 732, 734, 735, 736, 737, 738, 739, 743, 746, 751, 759, 761], "code": [0, 2, 10, 11, 29, 33, 34, 53, 167, 213, 319, 434, 441, 449, 450, 465, 479, 496, 531, 534, 536, 537, 539, 558, 577, 578, 579, 608, 704, 706, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 731, 732, 733, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 753, 754, 756, 757, 758, 759, 761, 762, 763, 764, 765], "all": [0, 2, 4, 7, 8, 12, 13, 16, 17, 19, 21, 26, 27, 29, 30, 31, 34, 35, 36, 39, 40, 42, 44, 49, 50, 75, 88, 95, 98, 99, 100, 154, 161, 193, 197, 225, 226, 268, 269, 278, 301, 304, 307, 308, 310, 319, 340, 349, 350, 356, 359, 367, 370, 393, 404, 433, 437, 440, 457, 477, 478, 493, 500, 501, 514, 517, 529, 531, 532, 534, 535, 536, 537, 539, 540, 541, 543, 544, 548, 559, 561, 562, 565, 578, 583, 584, 587, 592, 601, 605, 607, 613, 614, 615, 616, 617, 618, 627, 628, 629, 630, 636, 639, 644, 668, 670, 673, 674, 675, 676, 686, 687, 688, 694, 697, 702, 706, 708, 709, 710, 711, 712, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 764, 765], "don": [0, 27, 50, 706, 710, 715, 716, 717, 724, 725, 730, 734, 738, 741, 747, 751], "contribut": [0, 12, 35, 319, 430, 712, 714, 715, 716, 717, 722, 730, 736, 743, 752, 762], "output": [0, 2, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 75, 76, 77, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 105, 107, 132, 166, 167, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 255, 256, 257, 258, 259, 260, 262, 263, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 304, 306, 307, 308, 309, 310, 313, 314, 315, 317, 319, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 342, 343, 344, 345, 346, 348, 350, 351, 352, 353, 354, 356, 359, 360, 363, 364, 365, 366, 368, 371, 372, 378, 381, 383, 384, 385, 386, 387, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 425, 427, 428, 429, 430, 431, 432, 433, 434, 436, 442, 443, 444, 448, 449, 450, 452, 456, 465, 472, 479, 480, 481, 503, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 612, 616, 629, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 687, 688, 700, 706, 713, 716, 717, 718, 719, 720, 722, 723, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 745, 747, 748, 751, 753, 759], "print": [0, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 59, 61, 62, 63, 64, 65, 66, 67, 71, 72, 74, 75, 83, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 105, 106, 107, 108, 110, 116, 117, 118, 119, 120, 123, 125, 126, 128, 133, 145, 146, 150, 152, 153, 154, 155, 157, 158, 159, 160, 161, 164, 165, 167, 168, 169, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 258, 264, 265, 268, 273, 275, 288, 289, 294, 297, 299, 301, 304, 307, 308, 309, 310, 313, 319, 325, 326, 327, 328, 330, 331, 333, 335, 338, 340, 343, 344, 345, 346, 348, 350, 354, 356, 365, 371, 377, 378, 389, 393, 398, 399, 401, 402, 406, 410, 411, 412, 427, 428, 429, 430, 436, 437, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 455, 456, 458, 459, 461, 463, 464, 465, 467, 468, 469, 471, 475, 478, 479, 480, 483, 484, 485, 488, 491, 492, 493, 494, 496, 498, 500, 501, 502, 505, 506, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 558, 559, 560, 563, 564, 565, 566, 568, 570, 571, 572, 573, 575, 576, 578, 579, 580, 581, 583, 585, 586, 587, 589, 592, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 619, 622, 623, 624, 625, 627, 628, 633, 634, 635, 636, 637, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 686, 697, 700, 704, 706, 716, 717, 723, 727, 737, 738, 740, 743, 745, 746, 747], "statement": [0, 2, 724, 735, 738, 741, 751], "logger": 0, "etc": [0, 8, 12, 21, 23, 27, 31, 35, 44, 50, 83, 91, 92, 95, 307, 314, 335, 340, 350, 413, 414, 416, 417, 529, 543, 545, 636, 637, 638, 639, 647, 648, 649, 650, 673, 676, 687, 688, 689, 690, 691, 692, 693, 710, 715, 716, 717, 719, 720, 721, 722, 723, 725, 727, 729, 731, 736, 737, 738, 739, 743, 745, 746, 751, 753, 756, 758, 764], "ha": [0, 1, 4, 8, 12, 17, 19, 23, 25, 29, 32, 35, 36, 40, 42, 46, 48, 93, 149, 173, 193, 196, 198, 200, 210, 226, 228, 231, 233, 236, 238, 239, 243, 270, 271, 301, 307, 309, 310, 319, 342, 371, 400, 401, 404, 426, 428, 429, 431, 461, 529, 531, 532, 536, 537, 539, 544, 545, 547, 562, 575, 576, 584, 585, 587, 589, 592, 600, 607, 645, 648, 649, 650, 655, 656, 659, 661, 662, 663, 664, 673, 676, 686, 697, 708, 709, 710, 715, 717, 719, 721, 722, 723, 724, 725, 726, 727, 728, 732, 733, 734, 735, 736, 737, 738, 739, 741, 743, 744, 745, 747, 748, 750, 751, 754, 757, 758, 760, 761, 764], "": [0, 1, 2, 8, 12, 13, 14, 17, 25, 35, 37, 40, 48, 71, 93, 98, 99, 119, 120, 149, 152, 153, 165, 200, 235, 269, 273, 275, 284, 286, 292, 295, 297, 301, 304, 305, 307, 308, 309, 310, 313, 314, 319, 322, 323, 329, 335, 340, 350, 354, 362, 369, 371, 384, 385, 393, 407, 408, 409, 417, 427, 436, 453, 454, 474, 495, 496, 516, 518, 519, 520, 521, 523, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 541, 547, 551, 553, 555, 557, 567, 578, 585, 586, 592, 628, 662, 664, 674, 686, 687, 688, 689, 690, 691, 692, 693, 697, 706, 709, 710, 711, 712, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 745, 746, 747, 748, 750, 751, 752, 753, 754, 757, 758, 759, 761, 762, 763, 764], "likewis": [0, 2, 706, 717, 723, 725, 728, 731, 732, 736, 741, 746, 764], "redund": [0, 706, 725, 729, 736], "oper": [0, 8, 9, 11, 12, 13, 16, 29, 31, 32, 34, 35, 36, 39, 53, 91, 92, 133, 163, 171, 176, 178, 187, 190, 193, 200, 215, 217, 226, 227, 231, 235, 238, 243, 251, 270, 271, 298, 299, 301, 306, 307, 310, 321, 322, 323, 325, 326, 327, 333, 334, 335, 339, 343, 344, 345, 346, 348, 349, 350, 400, 441, 448, 449, 450, 496, 529, 530, 531, 532, 534, 536, 537, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 587, 589, 661, 663, 673, 676, 688, 706, 708, 715, 716, 718, 719, 720, 723, 725, 726, 727, 728, 729, 732, 735, 736, 738, 741, 743, 746, 747, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765], "origin": [0, 2, 4, 12, 17, 19, 25, 29, 35, 40, 42, 48, 52, 53, 181, 206, 233, 308, 310, 319, 367, 386, 392, 394, 397, 428, 429, 433, 434, 436, 532, 537, 539, 547, 576, 604, 605, 656, 670, 675, 697, 706, 710, 715, 716, 717, 721, 722, 724, 725, 733, 735, 736, 737, 743, 758, 759], "also": [0, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 75, 76, 77, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 108, 121, 124, 125, 126, 128, 133, 150, 167, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 262, 263, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 301, 304, 307, 308, 310, 317, 319, 325, 326, 327, 328, 330, 331, 332, 334, 338, 339, 340, 343, 344, 345, 346, 349, 350, 351, 352, 353, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 440, 441, 443, 444, 447, 448, 449, 450, 451, 452, 455, 456, 459, 461, 463, 464, 465, 467, 468, 469, 471, 472, 474, 479, 480, 493, 494, 495, 496, 498, 500, 501, 513, 515, 516, 519, 521, 522, 523, 524, 529, 530, 532, 534, 535, 536, 537, 539, 540, 541, 542, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 626, 627, 628, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 673, 687, 688, 697, 706, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 741, 743, 746, 747, 748, 750, 751, 752, 754, 755, 756, 757, 758, 759, 761, 763, 764, 765], "increas": [0, 12, 17, 19, 35, 40, 42, 310, 319, 393, 430, 537, 539, 541, 590, 599, 612, 628, 675, 708, 725, 729, 736, 739, 741, 758], "its": [0, 7, 9, 12, 19, 29, 32, 35, 36, 42, 61, 64, 72, 106, 111, 112, 113, 114, 115, 166, 193, 226, 245, 251, 299, 307, 310, 319, 346, 404, 430, 452, 499, 526, 528, 530, 531, 532, 534, 537, 539, 541, 575, 600, 604, 605, 609, 622, 670, 686, 706, 715, 716, 720, 724, 725, 728, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 748, 751, 753, 757, 758, 764], "overal": [0, 536, 559, 723, 725, 726, 728, 748, 754, 756, 757, 758], "obj": [0, 2, 76, 77, 529], "none": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 75, 76, 77, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 118, 121, 123, 124, 125, 126, 128, 130, 133, 143, 145, 148, 149, 161, 162, 163, 164, 165, 166, 167, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 266, 267, 268, 269, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 301, 304, 307, 308, 309, 310, 313, 314, 315, 317, 318, 319, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 443, 444, 447, 448, 449, 450, 451, 452, 455, 456, 458, 459, 460, 461, 463, 464, 465, 467, 468, 471, 476, 479, 480, 481, 482, 484, 485, 486, 487, 489, 490, 491, 493, 494, 496, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 521, 522, 523, 524, 526, 527, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 620, 621, 622, 623, 626, 627, 628, 629, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 673, 674, 675, 676, 680, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 697, 699, 706, 719, 720, 721, 723, 724, 725, 726, 727, 729, 731, 732, 735, 736, 737, 738, 739, 741, 743, 745, 747, 748], "arg_stateful_idx": [0, 689, 690], "kwarg_stateful_idx": [0, 689, 690], "include_gener": 0, "true": [0, 2, 4, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 74, 77, 83, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 105, 106, 107, 108, 109, 116, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 133, 145, 149, 150, 152, 153, 157, 160, 161, 162, 163, 167, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 266, 267, 268, 269, 272, 273, 274, 275, 277, 279, 285, 286, 291, 292, 293, 294, 295, 296, 297, 299, 301, 304, 305, 307, 308, 309, 310, 313, 319, 321, 322, 323, 325, 326, 327, 329, 330, 331, 332, 333, 334, 342, 343, 344, 345, 349, 351, 352, 353, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 375, 376, 378, 379, 380, 381, 383, 384, 385, 388, 389, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 419, 420, 426, 427, 428, 429, 430, 432, 433, 434, 436, 437, 440, 441, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 461, 463, 464, 465, 467, 468, 469, 471, 472, 479, 480, 481, 483, 486, 487, 489, 490, 492, 493, 494, 496, 498, 500, 501, 503, 507, 508, 510, 511, 513, 516, 517, 519, 521, 522, 523, 524, 526, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 622, 623, 624, 626, 627, 628, 629, 633, 634, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 673, 674, 675, 676, 686, 688, 689, 690, 691, 692, 694, 697, 700, 704, 706, 716, 721, 723, 724, 725, 726, 727, 729, 731, 732, 733, 735, 736, 737, 738, 740, 741, 743, 746, 747, 748], "array_cach": 0, "return_backend_compiled_fn": 0, "fals": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 77, 83, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 149, 150, 155, 157, 160, 161, 163, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 266, 267, 268, 269, 272, 273, 274, 275, 277, 279, 285, 286, 291, 292, 293, 294, 295, 296, 297, 299, 301, 304, 305, 307, 308, 309, 310, 313, 319, 321, 322, 323, 325, 326, 327, 329, 330, 331, 332, 333, 334, 342, 343, 344, 345, 348, 349, 352, 353, 355, 356, 357, 358, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 388, 389, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 419, 420, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 440, 441, 443, 444, 447, 448, 449, 450, 451, 452, 455, 456, 458, 459, 461, 463, 464, 465, 467, 468, 469, 471, 472, 475, 479, 480, 481, 483, 486, 487, 489, 490, 492, 493, 494, 496, 498, 500, 501, 503, 507, 508, 510, 511, 513, 516, 517, 519, 523, 524, 526, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 622, 626, 627, 628, 629, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 671, 673, 674, 675, 676, 680, 684, 685, 686, 688, 689, 690, 692, 694, 697, 700, 701, 704, 706, 716, 719, 721, 724, 725, 726, 727, 729, 735, 736, 737, 738, 740, 741, 743, 746, 747, 748], "static_argnum": [0, 743], "static_argnam": [0, 743], "arg": [0, 2, 3, 7, 29, 55, 71, 156, 166, 502, 528, 529, 531, 534, 668, 670, 684, 685, 688, 690, 694, 697, 700, 704, 706, 720, 725, 726, 729, 734, 735, 736, 741, 743, 747], "kwarg": [0, 2, 3, 7, 12, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 55, 156, 310, 393, 475, 502, 529, 531, 534, 668, 670, 684, 685, 688, 690, 697, 704, 706, 720, 725, 726, 729, 732, 735, 736, 741, 743, 747], "callabl": [0, 2, 12, 13, 27, 29, 35, 36, 39, 50, 71, 72, 74, 78, 79, 80, 81, 82, 119, 120, 152, 153, 166, 297, 305, 307, 310, 349, 373, 393, 438, 442, 447, 449, 453, 454, 475, 502, 514, 518, 520, 525, 528, 529, 530, 531, 534, 535, 540, 541, 613, 614, 615, 622, 623, 624, 626, 627, 628, 629, 668, 671, 680, 692, 701, 723, 729, 734, 736, 743], "set": [0, 2, 7, 12, 13, 16, 17, 22, 24, 25, 29, 35, 36, 39, 40, 45, 47, 48, 64, 74, 98, 100, 134, 135, 136, 137, 138, 149, 162, 163, 164, 165, 166, 181, 268, 277, 291, 293, 297, 301, 304, 305, 307, 308, 310, 319, 329, 353, 357, 358, 383, 393, 396, 402, 427, 432, 433, 434, 436, 437, 441, 448, 465, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 496, 504, 526, 528, 529, 530, 531, 532, 534, 536, 537, 541, 543, 544, 546, 547, 559, 563, 565, 576, 578, 581, 584, 585, 616, 623, 626, 627, 628, 633, 634, 640, 642, 643, 647, 649, 650, 651, 654, 662, 664, 670, 673, 674, 675, 676, 680, 686, 687, 688, 690, 692, 697, 703, 708, 711, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 729, 730, 732, 733, 735, 736, 737, 738, 739, 741, 743, 745, 746, 752, 756, 757, 758, 759, 760, 762, 765], "them": [0, 2, 442, 478, 534, 673, 688, 706, 707, 708, 709, 710, 713, 715, 717, 719, 720, 721, 722, 723, 724, 725, 729, 730, 733, 735, 736, 737, 738, 740, 743, 745, 746, 747, 751, 753, 755, 756, 758, 760, 764], "If": [0, 1, 2, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 75, 76, 77, 84, 85, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 133, 149, 165, 167, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 268, 269, 270, 273, 274, 275, 277, 278, 279, 281, 285, 286, 291, 292, 294, 295, 296, 297, 301, 304, 305, 307, 308, 309, 310, 313, 314, 319, 325, 326, 327, 328, 329, 330, 331, 332, 335, 338, 340, 342, 343, 344, 345, 350, 354, 356, 358, 359, 364, 366, 368, 369, 371, 374, 375, 376, 378, 379, 381, 383, 384, 385, 388, 392, 398, 399, 400, 401, 402, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 426, 427, 428, 429, 430, 432, 433, 434, 436, 437, 440, 441, 443, 444, 448, 449, 450, 452, 455, 456, 458, 459, 461, 463, 464, 465, 467, 468, 471, 472, 479, 480, 483, 493, 494, 496, 498, 500, 501, 513, 514, 517, 519, 524, 526, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 559, 560, 562, 563, 564, 565, 567, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 589, 590, 591, 592, 594, 595, 596, 597, 598, 600, 601, 602, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 628, 629, 636, 637, 638, 639, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 673, 674, 675, 686, 687, 688, 690, 691, 697, 706, 708, 711, 712, 713, 715, 716, 717, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 745, 746, 748, 751, 752], "specifi": [0, 2, 4, 6, 8, 9, 12, 13, 16, 17, 18, 19, 21, 22, 23, 25, 26, 28, 29, 32, 35, 36, 39, 40, 41, 42, 44, 45, 48, 49, 59, 61, 64, 75, 84, 89, 91, 96, 98, 99, 101, 105, 107, 154, 159, 161, 165, 166, 167, 235, 269, 273, 286, 291, 301, 304, 307, 308, 309, 310, 314, 319, 325, 326, 327, 329, 335, 340, 350, 356, 364, 366, 369, 371, 372, 383, 386, 395, 396, 398, 399, 414, 425, 427, 428, 429, 432, 433, 436, 438, 455, 456, 458, 461, 474, 483, 514, 526, 529, 530, 531, 532, 534, 536, 537, 538, 539, 541, 543, 544, 545, 546, 547, 548, 562, 563, 565, 567, 568, 570, 571, 576, 587, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 605, 607, 608, 611, 612, 621, 623, 624, 631, 632, 633, 634, 637, 638, 639, 641, 642, 643, 645, 648, 649, 650, 651, 655, 656, 657, 661, 663, 665, 666, 676, 684, 686, 688, 716, 718, 722, 725, 726, 731, 732, 733, 735, 736, 737, 738, 743, 746, 747, 764], "eagerli": [0, 2, 706], "otherwis": [0, 1, 2, 4, 7, 8, 9, 11, 12, 13, 16, 17, 19, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 75, 77, 83, 88, 90, 91, 92, 95, 97, 102, 105, 106, 108, 109, 111, 112, 113, 114, 115, 124, 128, 132, 133, 149, 167, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 252, 253, 255, 256, 258, 266, 267, 273, 274, 275, 277, 278, 279, 285, 286, 292, 294, 295, 296, 297, 299, 301, 304, 307, 308, 310, 313, 325, 326, 327, 330, 331, 332, 368, 369, 374, 375, 376, 378, 379, 381, 383, 384, 385, 388, 392, 399, 401, 402, 405, 407, 409, 410, 411, 412, 414, 426, 427, 428, 429, 430, 437, 440, 441, 443, 444, 448, 449, 450, 452, 455, 456, 458, 459, 461, 463, 464, 465, 467, 468, 471, 472, 479, 480, 493, 494, 496, 498, 500, 501, 502, 513, 517, 519, 524, 528, 529, 530, 531, 532, 534, 535, 536, 537, 539, 540, 541, 544, 545, 546, 547, 548, 550, 551, 552, 553, 559, 560, 562, 563, 564, 565, 566, 570, 571, 572, 573, 575, 576, 578, 580, 582, 583, 585, 589, 591, 592, 594, 595, 596, 597, 600, 601, 602, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 629, 636, 637, 638, 639, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 653, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 673, 674, 688, 690, 691, 697, 706, 717, 720, 723, 725, 726, 727, 732, 733, 735, 738, 743], "happen": [0, 2, 245, 532, 706, 710, 716, 717, 726, 735, 738, 746], "lazili": [0, 2, 706], "paramet": [0, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 74, 75, 76, 77, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 157, 159, 160, 161, 162, 164, 165, 166, 167, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 317, 319, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 463, 464, 465, 467, 468, 469, 470, 471, 472, 474, 475, 476, 479, 480, 483, 484, 485, 488, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 673, 674, 675, 676, 680, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 697, 700, 702, 706, 715, 720, 728, 729, 731, 736, 737, 738, 739, 743, 745, 746, 750, 759], "creat": [0, 1, 2, 8, 11, 12, 21, 29, 31, 34, 35, 40, 44, 75, 76, 77, 84, 85, 86, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 102, 227, 257, 258, 266, 267, 268, 301, 307, 308, 310, 314, 325, 326, 327, 348, 358, 367, 370, 372, 393, 398, 413, 414, 415, 416, 417, 498, 514, 525, 529, 532, 534, 535, 543, 580, 636, 637, 638, 639, 641, 670, 680, 685, 687, 688, 689, 690, 691, 692, 693, 709, 711, 712, 716, 717, 720, 721, 722, 724, 725, 726, 729, 732, 733, 735, 736, 737, 738, 741, 743, 744, 747, 749, 750, 753, 758, 759, 764], "option": [0, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 75, 76, 77, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 121, 123, 133, 145, 149, 161, 164, 165, 166, 167, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 255, 256, 257, 258, 259, 260, 262, 263, 266, 267, 268, 269, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 301, 304, 307, 308, 309, 310, 313, 314, 315, 317, 319, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 342, 343, 344, 345, 346, 348, 350, 351, 352, 353, 354, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 375, 376, 378, 379, 381, 383, 384, 385, 386, 387, 388, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 440, 441, 443, 444, 446, 448, 449, 450, 452, 455, 456, 458, 459, 461, 463, 464, 465, 467, 468, 471, 474, 476, 479, 480, 483, 493, 494, 495, 496, 498, 500, 501, 502, 513, 515, 516, 517, 519, 521, 522, 523, 524, 526, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 622, 623, 626, 627, 628, 633, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 674, 680, 685, 687, 690, 692, 693, 700, 704, 715, 716, 717, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 735, 736, 737, 738, 739, 741, 743, 748, 751, 758, 764], "list": [0, 4, 7, 8, 9, 11, 12, 13, 16, 19, 20, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 75, 76, 77, 88, 90, 93, 94, 95, 97, 102, 106, 108, 121, 125, 126, 133, 149, 166, 167, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 251, 252, 253, 255, 256, 258, 273, 274, 275, 277, 278, 279, 280, 281, 284, 285, 286, 292, 293, 294, 295, 296, 297, 304, 307, 308, 310, 317, 325, 326, 327, 329, 330, 331, 332, 343, 344, 345, 346, 356, 358, 361, 366, 367, 370, 374, 375, 376, 377, 378, 379, 388, 399, 401, 402, 405, 407, 409, 410, 411, 412, 414, 419, 427, 428, 429, 430, 437, 439, 440, 441, 443, 444, 448, 449, 450, 452, 455, 456, 457, 459, 461, 463, 464, 465, 467, 468, 471, 475, 479, 480, 493, 494, 496, 498, 499, 500, 501, 502, 513, 514, 519, 524, 529, 530, 531, 532, 534, 536, 537, 539, 541, 542, 545, 546, 550, 551, 552, 553, 554, 555, 558, 559, 560, 562, 563, 564, 565, 570, 571, 572, 573, 575, 576, 578, 580, 582, 583, 587, 589, 594, 595, 596, 597, 598, 601, 604, 605, 606, 607, 608, 611, 612, 616, 617, 618, 619, 622, 623, 624, 625, 627, 628, 633, 634, 635, 636, 637, 638, 639, 641, 644, 647, 648, 649, 650, 651, 652, 653, 655, 656, 659, 661, 662, 664, 665, 666, 668, 670, 673, 674, 675, 676, 680, 685, 686, 688, 694, 700, 714, 715, 716, 719, 720, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 735, 736, 737, 738, 739, 743, 746, 747, 748, 751, 758, 759, 764], "instanc": [0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 75, 76, 77, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 118, 121, 124, 125, 126, 128, 133, 150, 162, 167, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 262, 263, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 301, 304, 307, 308, 310, 313, 319, 325, 326, 327, 328, 330, 331, 332, 334, 338, 339, 343, 344, 345, 346, 349, 351, 352, 353, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 440, 441, 443, 444, 447, 448, 449, 450, 451, 452, 455, 456, 459, 461, 463, 464, 465, 467, 468, 469, 471, 472, 474, 479, 480, 489, 493, 494, 495, 496, 498, 500, 501, 513, 515, 516, 519, 521, 522, 523, 524, 529, 530, 531, 532, 534, 535, 536, 538, 539, 541, 542, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 680, 685, 712, 715, 716, 717, 719, 720, 721, 725, 727, 728, 729, 731, 732, 733, 734, 735, 738, 746, 747, 748, 753, 759], "consid": [0, 12, 17, 23, 35, 40, 100, 221, 222, 268, 273, 276, 286, 301, 304, 308, 319, 356, 358, 367, 427, 529, 532, 537, 545, 567, 578, 647, 648, 649, 650, 675, 687, 708, 709, 720, 721, 724, 725, 732, 734, 739, 741, 744, 745, 746, 755, 759, 763, 765], "dure": [0, 10, 14, 25, 29, 33, 37, 48, 167, 307, 330, 331, 332, 502, 515, 516, 521, 531, 534, 535, 536, 537, 540, 547, 559, 575, 613, 614, 615, 662, 664, 686, 689, 690, 691, 692, 716, 723, 725, 726, 729, 732, 733, 735, 736, 737, 738, 741, 751, 758, 759, 764], "posit": [0, 4, 7, 11, 12, 13, 17, 18, 19, 34, 35, 36, 40, 41, 42, 86, 88, 100, 118, 173, 174, 175, 179, 182, 193, 200, 207, 208, 214, 216, 226, 227, 234, 235, 239, 240, 244, 258, 268, 273, 276, 286, 301, 304, 308, 310, 353, 368, 392, 442, 452, 514, 527, 529, 530, 532, 534, 537, 538, 539, 543, 544, 548, 564, 567, 589, 594, 600, 605, 640, 645, 665, 666, 670, 673, 680, 685, 706, 715, 717, 719, 723, 736, 738, 739, 746, 750, 760], "argument": [0, 2, 4, 7, 8, 11, 12, 13, 17, 29, 30, 34, 35, 36, 53, 75, 76, 77, 84, 85, 86, 87, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 108, 124, 128, 133, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 196, 198, 199, 200, 204, 205, 206, 207, 208, 209, 213, 215, 216, 217, 218, 220, 221, 222, 223, 226, 228, 229, 230, 231, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 258, 268, 269, 275, 278, 301, 304, 307, 308, 310, 319, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 338, 339, 340, 343, 344, 345, 346, 356, 393, 427, 430, 434, 438, 439, 441, 442, 447, 449, 450, 455, 459, 461, 463, 465, 475, 479, 480, 496, 501, 502, 514, 524, 529, 530, 532, 534, 535, 536, 537, 539, 540, 541, 542, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 591, 592, 593, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 622, 635, 642, 643, 645, 646, 647, 648, 649, 650, 651, 654, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 673, 674, 680, 685, 688, 689, 690, 697, 700, 702, 706, 708, 715, 718, 719, 720, 721, 722, 723, 727, 728, 730, 732, 737, 738, 739, 741, 743, 745, 746, 753, 758], "keyword": [0, 2, 7, 8, 12, 29, 35, 53, 93, 227, 310, 319, 393, 427, 439, 442, 475, 502, 529, 532, 534, 541, 547, 622, 663, 668, 670, 674, 689, 690, 700, 715, 720, 723, 725, 726, 735, 736, 737, 738, 739, 741, 746], "str": [0, 2, 7, 8, 12, 13, 16, 17, 18, 19, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 59, 60, 61, 62, 63, 64, 65, 66, 67, 88, 90, 93, 95, 97, 102, 103, 106, 108, 110, 111, 112, 113, 117, 118, 121, 122, 123, 124, 125, 126, 128, 130, 133, 134, 135, 136, 137, 138, 145, 146, 166, 167, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 251, 252, 253, 255, 256, 258, 273, 274, 275, 277, 279, 285, 286, 292, 294, 295, 296, 297, 307, 308, 309, 310, 313, 319, 325, 326, 327, 329, 330, 331, 332, 334, 335, 339, 340, 343, 344, 345, 346, 348, 349, 350, 352, 356, 367, 370, 371, 374, 375, 376, 378, 383, 399, 401, 402, 407, 408, 409, 410, 411, 412, 414, 416, 427, 428, 429, 430, 436, 437, 438, 440, 441, 443, 444, 446, 448, 449, 450, 452, 455, 456, 459, 461, 463, 464, 465, 467, 468, 471, 476, 479, 480, 482, 491, 493, 494, 496, 498, 500, 501, 513, 517, 524, 529, 530, 531, 534, 535, 536, 537, 538, 539, 540, 541, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 563, 564, 565, 570, 571, 572, 573, 575, 576, 578, 580, 582, 583, 589, 594, 595, 596, 597, 601, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 622, 623, 633, 636, 637, 638, 639, 641, 644, 647, 648, 649, 651, 655, 656, 657, 659, 661, 662, 664, 665, 666, 670, 671, 673, 674, 678, 680, 688, 690, 691, 700, 725, 726, 729, 732, 735, 736, 739, 743, 748], "current": [0, 13, 29, 53, 71, 119, 120, 123, 140, 141, 142, 143, 144, 145, 151, 152, 153, 154, 159, 161, 308, 310, 354, 355, 393, 453, 454, 457, 462, 466, 477, 478, 496, 528, 530, 531, 534, 537, 541, 569, 616, 626, 627, 670, 674, 686, 690, 697, 703, 706, 710, 713, 715, 716, 717, 719, 721, 723, 724, 725, 726, 729, 730, 732, 735, 736, 737, 738, 741, 743, 748, 750, 751, 758, 764, 765], "bool": [0, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 76, 77, 83, 88, 89, 90, 91, 92, 93, 95, 97, 102, 105, 106, 108, 109, 111, 112, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 141, 145, 149, 150, 152, 153, 155, 157, 160, 161, 166, 167, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 266, 267, 269, 273, 274, 275, 277, 279, 285, 286, 291, 292, 294, 295, 296, 297, 299, 301, 304, 305, 307, 308, 309, 310, 313, 319, 325, 326, 327, 329, 330, 331, 332, 342, 343, 344, 345, 348, 356, 358, 361, 364, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 378, 379, 381, 382, 383, 384, 385, 388, 392, 396, 399, 401, 402, 405, 407, 409, 410, 411, 412, 414, 426, 427, 428, 429, 430, 432, 433, 434, 436, 437, 440, 441, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 479, 480, 483, 492, 493, 494, 496, 498, 500, 501, 513, 516, 517, 519, 521, 522, 523, 524, 526, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 559, 560, 562, 563, 564, 565, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 582, 583, 585, 589, 590, 592, 594, 595, 596, 597, 600, 601, 602, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 622, 623, 624, 626, 627, 628, 633, 634, 636, 637, 638, 639, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 671, 673, 674, 675, 688, 691, 692, 700, 704, 725, 727, 729, 735, 736, 738, 739, 741, 743, 748], "includ": [0, 2, 8, 11, 12, 13, 17, 22, 25, 26, 29, 31, 34, 35, 36, 40, 45, 48, 49, 75, 76, 77, 91, 92, 94, 100, 173, 197, 201, 202, 203, 206, 208, 211, 219, 227, 240, 245, 259, 262, 263, 268, 270, 272, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 295, 296, 301, 307, 310, 319, 325, 326, 327, 352, 355, 357, 384, 385, 387, 390, 392, 394, 397, 415, 417, 418, 426, 430, 432, 433, 436, 461, 513, 529, 532, 534, 537, 541, 543, 544, 547, 548, 569, 590, 592, 616, 639, 643, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 673, 674, 676, 687, 688, 691, 702, 706, 709, 715, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 735, 736, 737, 738, 739, 741, 743, 750, 751, 755, 756, 758, 760, 763, 764, 765], "creation": [0, 12, 29, 35, 53, 722, 725, 726, 731, 733, 736, 737, 738, 739, 743, 758, 760, 764], "constant": [0, 4, 12, 19, 20, 35, 42, 43, 309, 310, 371, 393, 539, 541, 542, 599, 622, 635, 687, 689, 690, 691, 706, 732, 737, 739, 747, 748, 751], "appear": [0, 310, 384, 385, 514, 534, 716, 717, 719, 736, 741], "whether": [0, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 21, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 74, 76, 77, 88, 90, 95, 97, 102, 105, 106, 108, 111, 112, 113, 114, 115, 116, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 133, 145, 149, 150, 152, 153, 155, 157, 160, 161, 163, 166, 167, 169, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 258, 269, 273, 274, 275, 277, 279, 285, 286, 292, 294, 295, 296, 297, 301, 304, 307, 308, 309, 310, 319, 325, 326, 327, 329, 330, 331, 332, 348, 362, 370, 371, 373, 374, 375, 376, 378, 379, 381, 383, 384, 385, 388, 392, 399, 401, 402, 405, 407, 409, 410, 411, 412, 414, 427, 428, 429, 430, 437, 440, 441, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 475, 479, 480, 481, 482, 483, 486, 487, 489, 490, 492, 493, 494, 496, 498, 500, 501, 507, 508, 511, 513, 516, 517, 519, 521, 522, 523, 524, 526, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 543, 547, 548, 550, 551, 552, 553, 559, 560, 563, 564, 565, 570, 571, 572, 573, 574, 575, 576, 578, 580, 582, 583, 589, 594, 595, 596, 597, 600, 601, 602, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 622, 623, 624, 626, 627, 628, 629, 633, 634, 636, 637, 638, 639, 641, 644, 647, 648, 649, 650, 651, 655, 656, 659, 661, 662, 664, 665, 666, 668, 670, 685, 688, 689, 690, 691, 692, 700, 706, 711, 715, 716, 720, 723, 725, 727, 731, 735, 736, 738, 740, 741], "appli": [0, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 77, 83, 85, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 102, 106, 107, 108, 121, 125, 126, 133, 150, 167, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 262, 263, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 304, 305, 307, 308, 309, 310, 313, 319, 321, 322, 323, 325, 326, 327, 328, 330, 331, 332, 334, 338, 339, 340, 342, 343, 344, 345, 349, 351, 352, 353, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 440, 441, 443, 444, 447, 448, 449, 450, 451, 452, 455, 456, 459, 461, 463, 464, 465, 467, 468, 469, 471, 472, 474, 479, 480, 493, 494, 495, 496, 498, 500, 501, 513, 515, 516, 519, 521, 522, 523, 524, 526, 530, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 575, 576, 578, 580, 581, 582, 583, 585, 589, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 622, 625, 628, 629, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 675, 676, 684, 688, 691, 706, 711, 713, 715, 716, 717, 720, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 738, 739, 741, 745, 746, 747, 748, 749, 751, 753, 759], "nativ": [0, 2, 7, 8, 10, 13, 30, 33, 36, 52, 55, 94, 103, 104, 110, 111, 112, 113, 114, 115, 129, 132, 147, 148, 149, 150, 160, 168, 172, 465, 467, 471, 478, 499, 529, 530, 531, 534, 670, 680, 685, 697, 706, 715, 721, 725, 729, 732, 733, 735, 736, 737, 738, 743, 745, 746, 753, 756, 765], "e": [0, 4, 8, 12, 17, 21, 23, 24, 25, 27, 34, 35, 40, 44, 47, 48, 50, 52, 83, 92, 93, 96, 97, 100, 104, 133, 146, 173, 174, 175, 179, 181, 182, 185, 187, 189, 193, 194, 196, 199, 200, 206, 207, 214, 215, 216, 217, 224, 225, 226, 227, 229, 231, 233, 235, 236, 239, 240, 244, 250, 268, 301, 307, 308, 314, 319, 325, 326, 329, 343, 344, 345, 346, 359, 365, 413, 414, 415, 416, 417, 428, 429, 527, 529, 530, 531, 532, 536, 537, 539, 541, 543, 545, 546, 547, 562, 565, 570, 571, 575, 576, 578, 581, 584, 585, 586, 589, 592, 600, 608, 619, 623, 624, 625, 628, 633, 634, 637, 638, 639, 647, 648, 649, 650, 651, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 688, 700, 706, 709, 710, 711, 712, 715, 716, 717, 718, 719, 721, 723, 725, 729, 734, 736, 738, 743, 746, 751, 752, 753, 754], "tf": [0, 2, 706, 720, 721, 725, 726, 731, 735, 736, 738, 739, 741, 743, 748, 751, 753, 758], "after": [0, 2, 12, 13, 14, 16, 20, 29, 35, 36, 37, 39, 43, 139, 240, 292, 304, 307, 308, 310, 329, 330, 331, 332, 349, 365, 382, 393, 465, 516, 519, 521, 522, 523, 530, 532, 534, 535, 536, 541, 542, 549, 550, 551, 552, 554, 556, 558, 559, 627, 635, 692, 697, 706, 712, 715, 716, 717, 719, 721, 722, 724, 725, 727, 729, 731, 734, 738, 742, 752, 758], "union": [0, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 74, 75, 76, 77, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 159, 160, 161, 162, 164, 165, 166, 167, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 301, 304, 305, 307, 308, 309, 310, 313, 314, 315, 317, 319, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 342, 343, 344, 345, 346, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 440, 441, 443, 444, 448, 449, 450, 452, 455, 456, 457, 458, 459, 461, 463, 464, 465, 467, 468, 471, 472, 474, 475, 479, 480, 483, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 526, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 623, 624, 625, 626, 627, 628, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 673, 687, 692, 693, 720, 723, 725, 726, 727, 729, 731, 732, 735, 739, 741, 743, 748], "int": [0, 4, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 55, 62, 66, 67, 76, 77, 86, 88, 89, 90, 91, 92, 95, 98, 99, 100, 107, 114, 117, 118, 121, 128, 143, 157, 158, 159, 166, 167, 176, 183, 184, 185, 186, 187, 188, 200, 203, 227, 236, 242, 245, 249, 256, 257, 258, 259, 260, 261, 262, 263, 266, 267, 268, 269, 270, 271, 277, 278, 280, 284, 291, 293, 297, 299, 301, 304, 305, 307, 308, 309, 310, 313, 314, 315, 317, 319, 321, 322, 323, 325, 326, 327, 328, 329, 333, 334, 335, 338, 339, 340, 342, 343, 344, 345, 346, 348, 349, 350, 352, 356, 358, 359, 361, 364, 366, 367, 369, 370, 371, 372, 373, 377, 378, 379, 382, 383, 386, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 425, 427, 428, 429, 430, 432, 433, 434, 436, 438, 448, 449, 450, 452, 455, 456, 459, 474, 477, 479, 493, 494, 495, 499, 514, 515, 516, 517, 518, 521, 526, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 562, 565, 567, 568, 576, 577, 587, 589, 590, 591, 592, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 622, 623, 625, 627, 628, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 647, 651, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 673, 674, 675, 676, 687, 688, 700, 723, 725, 726, 727, 729, 731, 732, 735, 737, 738, 739, 741, 743, 748], "iter": [0, 7, 12, 13, 19, 27, 29, 35, 36, 42, 50, 53, 71, 72, 74, 166, 264, 265, 301, 308, 310, 358, 367, 370, 393, 437, 475, 528, 531, 534, 539, 541, 599, 603, 610, 612, 617, 618, 619, 621, 622, 624, 625, 626, 627, 628, 631, 632, 634, 700, 710, 719, 721, 723, 743, 746], "For": [0, 1, 8, 12, 17, 23, 35, 40, 75, 93, 173, 174, 175, 176, 178, 179, 180, 181, 182, 189, 190, 191, 193, 194, 196, 198, 199, 200, 207, 208, 209, 214, 215, 216, 217, 218, 221, 226, 228, 229, 231, 235, 236, 237, 238, 239, 240, 243, 244, 246, 270, 271, 275, 294, 301, 304, 308, 310, 364, 366, 376, 393, 396, 529, 532, 537, 539, 545, 547, 583, 585, 589, 597, 608, 647, 648, 649, 650, 658, 660, 661, 663, 674, 685, 708, 709, 710, 712, 715, 716, 717, 718, 720, 721, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 735, 736, 737, 738, 739, 741, 743, 745, 746, 747, 748, 750, 751, 755, 756, 759, 764, 765], "jax": [0, 2, 6, 12, 13, 23, 28, 36, 59, 61, 64, 284, 304, 319, 436, 465, 496, 514, 526, 534, 545, 647, 648, 649, 650, 684, 697, 706, 709, 710, 714, 715, 716, 717, 719, 721, 725, 726, 729, 731, 734, 735, 736, 737, 738, 739, 741, 743, 745, 748, 751, 759, 761, 764, 765], "jit": [0, 743, 751, 758], "tupl": [0, 2, 7, 8, 9, 11, 12, 13, 16, 17, 19, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 76, 77, 88, 90, 94, 95, 97, 100, 102, 106, 107, 108, 119, 120, 121, 125, 126, 132, 133, 139, 149, 152, 153, 167, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 258, 261, 265, 268, 273, 274, 275, 277, 278, 279, 280, 281, 283, 284, 285, 286, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 304, 306, 307, 308, 310, 313, 314, 315, 317, 319, 325, 326, 327, 329, 330, 331, 332, 334, 339, 340, 343, 344, 345, 346, 348, 349, 350, 355, 356, 358, 362, 367, 368, 369, 370, 374, 375, 376, 377, 378, 388, 393, 399, 401, 402, 404, 407, 409, 410, 411, 412, 414, 415, 417, 418, 419, 427, 428, 429, 430, 432, 433, 434, 437, 440, 441, 443, 444, 448, 449, 450, 452, 453, 454, 455, 456, 458, 459, 461, 463, 464, 465, 467, 468, 471, 479, 480, 483, 493, 494, 495, 496, 498, 499, 500, 501, 513, 514, 515, 516, 517, 519, 521, 524, 528, 529, 530, 531, 532, 534, 535, 536, 537, 539, 540, 541, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 569, 570, 571, 572, 573, 574, 575, 576, 578, 580, 581, 582, 583, 585, 587, 588, 589, 592, 594, 595, 596, 597, 598, 599, 601, 602, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 617, 619, 621, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 636, 637, 638, 639, 641, 644, 645, 647, 648, 649, 650, 651, 652, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 673, 674, 675, 687, 688, 690, 700, 720, 725, 731, 732, 735, 737, 738, 743, 746, 747, 751], "dict": [0, 2, 7, 13, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 88, 90, 95, 97, 102, 106, 108, 119, 120, 121, 125, 126, 133, 149, 152, 153, 167, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 251, 252, 253, 255, 256, 258, 273, 274, 275, 277, 279, 285, 286, 292, 294, 295, 296, 297, 310, 329, 330, 331, 332, 374, 375, 376, 378, 393, 399, 401, 402, 407, 409, 410, 411, 412, 414, 427, 428, 429, 430, 437, 438, 440, 441, 443, 444, 448, 449, 450, 452, 453, 454, 455, 456, 459, 461, 463, 464, 465, 467, 468, 471, 475, 479, 480, 493, 494, 496, 498, 500, 501, 513, 524, 530, 531, 534, 541, 550, 551, 552, 553, 559, 560, 563, 564, 565, 570, 571, 572, 573, 575, 576, 578, 580, 582, 583, 589, 594, 595, 596, 597, 601, 604, 605, 606, 607, 608, 611, 612, 616, 617, 619, 622, 623, 624, 625, 627, 628, 629, 633, 634, 636, 637, 638, 639, 641, 644, 647, 648, 649, 650, 651, 655, 656, 659, 661, 662, 664, 665, 666, 670, 671, 685, 688, 690, 697, 720, 723, 746, 747, 753], "return": [0, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 139, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 317, 319, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 483, 484, 485, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 673, 674, 675, 676, 679, 680, 685, 686, 687, 688, 690, 692, 697, 700, 701, 702, 703, 706, 716, 717, 720, 723, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 745, 746, 747, 748, 751, 759], "type": [0, 2, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 301, 304, 305, 307, 308, 309, 310, 313, 314, 315, 317, 319, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 479, 480, 483, 484, 485, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 673, 674, 675, 676, 679, 680, 687, 688, 690, 694, 697, 700, 701, 704, 706, 712, 715, 716, 717, 718, 719, 720, 723, 726, 727, 728, 729, 731, 733, 735, 737, 738, 739, 741, 743, 745, 746, 758, 759, 762], "lazygraph": [0, 2], "modul": [0, 27, 29, 50, 53, 300, 302, 303, 311, 312, 316, 320, 476, 534, 670, 684, 685, 686, 688, 689, 691, 693, 696, 697, 706, 710, 713, 716, 720, 721, 722, 729, 732, 735, 736, 738, 743, 744, 746, 748, 750, 751, 758, 759, 761], "moduletyp": [0, 2], "A": [0, 1, 2, 4, 8, 9, 12, 13, 19, 21, 25, 26, 29, 32, 34, 35, 36, 39, 40, 42, 44, 46, 49, 53, 71, 72, 74, 86, 94, 100, 106, 147, 166, 228, 230, 234, 258, 268, 270, 271, 273, 283, 286, 290, 291, 301, 304, 307, 308, 310, 313, 314, 319, 335, 349, 356, 365, 378, 381, 399, 402, 407, 408, 409, 410, 413, 414, 415, 416, 417, 425, 434, 436, 440, 442, 463, 464, 493, 494, 495, 498, 525, 528, 529, 530, 531, 532, 534, 535, 536, 537, 539, 541, 543, 547, 548, 559, 568, 570, 573, 574, 579, 580, 584, 585, 597, 600, 602, 606, 608, 616, 619, 621, 623, 624, 625, 626, 627, 631, 632, 633, 634, 636, 637, 638, 639, 641, 647, 657, 665, 666, 668, 670, 671, 673, 674, 675, 676, 680, 686, 687, 704, 707, 708, 709, 710, 714, 715, 716, 718, 723, 725, 726, 729, 731, 732, 736, 737, 738, 743, 746, 751, 753, 758, 759], "non": [0, 2, 9, 11, 12, 17, 21, 22, 25, 26, 32, 34, 35, 40, 44, 45, 48, 49, 88, 105, 123, 132, 201, 221, 222, 227, 277, 282, 304, 308, 310, 319, 356, 358, 362, 375, 376, 430, 433, 529, 530, 532, 537, 541, 543, 544, 547, 548, 565, 566, 576, 578, 585, 587, 591, 592, 629, 638, 642, 643, 644, 645, 658, 659, 660, 661, 662, 664, 665, 666, 687, 689, 690, 692, 720, 723, 725, 727, 743, 758], "initi": [0, 2, 12, 16, 29, 35, 39, 53, 308, 358, 367, 370, 536, 561, 685, 686, 688, 689, 690, 692, 693, 706, 709, 717, 721, 725, 726, 737, 738, 743, 758, 764, 765], "object": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 55, 56, 83, 87, 88, 109, 118, 121, 129, 132, 167, 225, 414, 517, 529, 530, 531, 535, 541, 543, 619, 621, 623, 624, 625, 631, 632, 633, 634, 641, 670, 671, 677, 678, 679, 685, 688, 689, 690, 697, 700, 706, 720, 721, 723, 724, 732, 733, 736, 737, 738, 741, 745, 748, 758, 764], "forward": [0, 12, 35, 307, 329, 334, 335, 339, 340, 350, 685, 687, 689, 690, 692, 706, 716, 721, 728, 734, 738, 739, 741, 748, 750, 751, 758, 759], "pass": [0, 2, 11, 12, 27, 29, 34, 35, 50, 53, 71, 72, 74, 110, 132, 147, 166, 181, 227, 310, 313, 314, 319, 383, 407, 409, 413, 433, 434, 465, 528, 530, 531, 532, 534, 540, 613, 614, 668, 670, 674, 680, 685, 689, 690, 692, 693, 697, 700, 704, 706, 715, 717, 719, 720, 721, 723, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 741, 751, 756], "same": [0, 2, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 19, 21, 23, 24, 25, 29, 31, 32, 34, 35, 36, 37, 39, 40, 42, 44, 46, 48, 52, 65, 75, 85, 90, 92, 93, 95, 97, 98, 99, 100, 102, 105, 106, 107, 118, 121, 166, 173, 174, 175, 176, 178, 180, 184, 186, 189, 193, 199, 200, 206, 226, 228, 230, 233, 235, 236, 237, 246, 250, 258, 267, 268, 269, 270, 271, 275, 281, 296, 299, 301, 304, 307, 308, 310, 313, 315, 317, 319, 325, 326, 327, 343, 344, 345, 346, 348, 349, 350, 355, 358, 359, 367, 368, 369, 370, 378, 393, 401, 407, 409, 418, 420, 425, 426, 427, 428, 429, 430, 431, 436, 472, 524, 529, 530, 531, 532, 534, 535, 536, 537, 539, 540, 541, 543, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 562, 563, 564, 565, 566, 568, 569, 570, 571, 573, 575, 577, 579, 580, 581, 582, 583, 584, 585, 586, 589, 591, 598, 601, 602, 604, 605, 607, 608, 613, 614, 629, 639, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 668, 673, 674, 675, 688, 700, 706, 708, 710, 712, 716, 717, 720, 721, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 743, 745, 747, 748, 751, 755, 757, 764, 765], "copi": [0, 2, 4, 5, 8, 9, 10, 11, 12, 13, 19, 29, 31, 32, 33, 34, 35, 36, 42, 76, 77, 83, 87, 105, 167, 227, 310, 372, 374, 375, 376, 379, 381, 383, 384, 385, 388, 392, 399, 405, 458, 483, 493, 500, 501, 529, 530, 531, 532, 534, 539, 541, 546, 600, 601, 602, 604, 606, 607, 609, 611, 617, 652, 654, 716, 717, 719, 721, 724, 725, 728, 736, 737, 743, 750, 751], "everi": [0, 2, 8, 12, 13, 35, 36, 89, 90, 250, 284, 299, 304, 307, 310, 343, 344, 345, 404, 437, 529, 534, 712, 715, 717, 719, 721, 722, 724, 725, 727, 730, 731, 732, 733, 735, 736, 737, 738, 743, 745, 747, 758], "method": [0, 2, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 77, 83, 85, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 102, 105, 106, 107, 108, 118, 121, 125, 126, 133, 150, 167, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 262, 263, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 304, 308, 319, 325, 326, 327, 328, 330, 331, 332, 334, 338, 339, 340, 343, 344, 345, 349, 351, 352, 353, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 440, 441, 443, 444, 445, 447, 448, 449, 450, 451, 452, 455, 456, 459, 461, 463, 464, 465, 467, 468, 469, 471, 472, 474, 479, 480, 493, 494, 495, 496, 498, 500, 501, 513, 515, 516, 519, 521, 522, 523, 524, 529, 530, 532, 534, 535, 538, 541, 544, 547, 548, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 575, 576, 578, 579, 580, 581, 582, 583, 585, 589, 590, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 627, 628, 629, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 670, 680, 686, 687, 688, 689, 690, 715, 717, 719, 720, 721, 724, 725, 726, 727, 728, 731, 738, 739, 743, 744, 747, 748, 751, 759, 765], "To": [0, 1, 2, 200, 309, 371, 488, 532, 534, 687, 712, 715, 716, 719, 720, 721, 722, 725, 727, 729, 730, 732, 733, 736, 737, 738, 739, 746, 747, 748], "you": [0, 1, 2, 4, 12, 13, 35, 36, 52, 53, 310, 319, 381, 434, 455, 456, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 562, 684, 685, 687, 688, 690, 691, 692, 693, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 758], "need": [0, 1, 2, 12, 13, 19, 35, 36, 42, 307, 308, 319, 329, 334, 335, 339, 355, 434, 443, 444, 465, 534, 536, 537, 539, 541, 562, 569, 597, 600, 627, 674, 706, 710, 712, 713, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 739, 741, 743, 745, 746, 750, 751, 754, 758, 759, 760, 764], "correspond": [0, 2, 4, 9, 11, 12, 13, 16, 19, 22, 23, 25, 29, 32, 34, 35, 39, 42, 48, 53, 106, 118, 121, 181, 231, 245, 270, 280, 281, 301, 304, 307, 308, 310, 313, 319, 329, 335, 346, 350, 352, 355, 356, 357, 384, 385, 398, 407, 408, 409, 428, 429, 493, 514, 530, 532, 534, 536, 537, 539, 543, 544, 545, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 562, 565, 569, 570, 576, 583, 584, 604, 605, 636, 642, 643, 647, 648, 649, 650, 655, 656, 661, 662, 663, 664, 670, 673, 675, 700, 706, 715, 717, 720, 721, 723, 724, 725, 727, 728, 729, 731, 732, 734, 736, 738, 741, 743, 758], "input": [0, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 74, 75, 76, 77, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 121, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 147, 149, 150, 163, 166, 167, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 317, 319, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 342, 343, 344, 345, 346, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 363, 365, 366, 367, 368, 370, 371, 372, 374, 375, 376, 378, 379, 381, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 440, 441, 443, 444, 447, 448, 449, 450, 451, 452, 455, 456, 458, 459, 461, 463, 464, 465, 467, 468, 469, 470, 471, 472, 474, 479, 480, 481, 486, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 507, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 622, 623, 624, 625, 627, 628, 629, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 674, 680, 684, 687, 688, 690, 691, 700, 719, 720, 721, 723, 725, 726, 727, 728, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 745, 746, 747, 748, 751, 759, 762], "let": [0, 2, 13, 25, 36, 173, 174, 175, 176, 179, 182, 191, 194, 196, 198, 207, 208, 209, 214, 216, 229, 237, 239, 240, 244, 455, 456, 532, 534, 537, 547, 589, 659, 661, 662, 663, 664, 706, 710, 712, 715, 720, 722, 723, 725, 726, 727, 728, 729, 736, 737, 738, 739, 740, 741, 743, 745, 746, 747, 748, 765], "start": [0, 1, 2, 8, 12, 29, 31, 35, 39, 75, 88, 91, 92, 288, 297, 304, 305, 307, 310, 349, 383, 386, 394, 396, 403, 529, 675, 686, 700, 706, 711, 712, 715, 716, 717, 718, 724, 725, 727, 728, 730, 731, 736, 738, 741, 742, 743, 745, 746, 747, 750, 751, 758, 764], "simpl": [0, 2, 12, 35, 319, 427, 675, 688, 706, 708, 715, 716, 717, 720, 722, 723, 725, 726, 727, 728, 732, 735, 736, 738, 739, 741, 745, 747, 748, 751, 753, 757, 758, 759, 760], "import": [0, 1, 2, 12, 23, 27, 31, 35, 50, 147, 148, 152, 162, 164, 319, 427, 531, 540, 545, 615, 650, 680, 697, 706, 709, 712, 714, 715, 716, 717, 719, 720, 721, 722, 723, 725, 726, 727, 728, 730, 733, 734, 735, 736, 737, 738, 739, 743, 745, 746, 748, 751, 754, 756, 758, 761, 762, 764], "set_backend": [0, 2, 11, 13, 27, 34, 36, 120, 129, 147, 148, 162, 164, 177, 441, 465, 530, 531, 534, 540, 615, 697, 706, 719, 721, 725, 726, 732, 733, 734, 743, 745, 748], "torch": [0, 2, 8, 13, 17, 27, 36, 40, 83, 120, 147, 148, 162, 164, 236, 441, 465, 496, 529, 530, 531, 532, 534, 537, 540, 585, 615, 670, 685, 697, 706, 716, 717, 719, 720, 721, 722, 724, 725, 726, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 743, 745, 746, 748, 751, 753, 764], "def": [0, 2, 11, 34, 71, 177, 442, 528, 534, 540, 541, 615, 622, 700, 706, 715, 716, 719, 720, 723, 725, 726, 727, 729, 731, 732, 734, 735, 736, 737, 738, 739, 741, 743, 745, 746, 747, 748], "fn": [0, 12, 29, 32, 35, 55, 78, 79, 80, 81, 82, 119, 120, 152, 153, 156, 310, 373, 438, 453, 454, 502, 529, 530, 531, 534, 541, 622, 623, 624, 626, 627, 628, 668, 670, 694, 697, 701, 702, 704, 726, 729, 735, 736, 743], "x": [0, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 75, 76, 77, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 125, 126, 128, 133, 149, 150, 154, 159, 160, 161, 165, 167, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 227, 228, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 268, 269, 272, 274, 275, 277, 278, 279, 280, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 301, 304, 305, 307, 308, 309, 310, 313, 317, 318, 319, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 377, 378, 380, 381, 383, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 455, 456, 457, 458, 459, 461, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 483, 484, 485, 488, 491, 492, 493, 494, 495, 496, 498, 500, 501, 502, 513, 514, 516, 517, 518, 520, 524, 525, 526, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 589, 590, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 619, 622, 623, 624, 625, 626, 627, 628, 633, 634, 635, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 673, 674, 675, 688, 691, 694, 697, 700, 704, 706, 715, 720, 721, 723, 725, 726, 727, 728, 729, 731, 732, 734, 735, 736, 737, 738, 739, 741, 743, 745, 746, 747, 748], "y": [0, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 52, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 83, 86, 88, 90, 91, 92, 93, 94, 95, 96, 97, 102, 105, 106, 107, 116, 118, 121, 133, 146, 150, 154, 159, 160, 161, 165, 167, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 204, 205, 207, 209, 210, 212, 213, 214, 215, 216, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 252, 253, 254, 255, 256, 258, 273, 279, 285, 286, 287, 288, 289, 294, 295, 297, 299, 301, 304, 307, 308, 309, 310, 313, 319, 326, 328, 330, 331, 335, 338, 340, 344, 352, 356, 360, 365, 371, 378, 380, 389, 393, 401, 402, 406, 410, 411, 412, 420, 426, 427, 428, 429, 430, 433, 436, 437, 440, 443, 444, 447, 448, 450, 451, 452, 455, 456, 457, 461, 463, 464, 465, 467, 468, 471, 472, 477, 483, 484, 485, 488, 491, 492, 493, 494, 496, 498, 500, 501, 502, 505, 506, 509, 512, 513, 514, 524, 526, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 551, 553, 555, 558, 559, 560, 564, 565, 566, 570, 571, 572, 573, 575, 576, 578, 579, 580, 581, 583, 585, 586, 587, 589, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 619, 622, 623, 625, 633, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 704, 706, 721, 723, 726, 727, 734, 736, 737, 738, 739, 741, 743, 745], "z": [0, 8, 11, 12, 13, 17, 18, 21, 23, 25, 31, 34, 35, 36, 40, 41, 42, 44, 48, 52, 53, 91, 92, 94, 95, 154, 176, 177, 181, 183, 186, 188, 193, 204, 205, 208, 209, 210, 212, 213, 218, 220, 222, 223, 224, 225, 233, 242, 249, 250, 275, 299, 304, 309, 319, 371, 377, 378, 389, 426, 427, 430, 436, 440, 452, 455, 456, 463, 464, 480, 492, 493, 494, 502, 514, 529, 531, 532, 534, 537, 538, 539, 541, 543, 544, 545, 547, 565, 575, 580, 581, 585, 592, 594, 595, 596, 597, 619, 623, 625, 633, 637, 638, 639, 642, 647, 657, 658, 660, 661, 662, 687, 706, 721, 723, 726, 727, 743, 745], "k": [0, 4, 8, 12, 16, 17, 21, 31, 34, 35, 39, 40, 44, 71, 86, 98, 99, 100, 220, 258, 268, 269, 301, 308, 310, 314, 317, 319, 353, 364, 399, 402, 413, 414, 415, 416, 417, 420, 430, 440, 528, 529, 534, 536, 537, 541, 543, 544, 563, 567, 575, 576, 582, 584, 585, 586, 589, 624, 637, 638, 639, 645, 706, 718, 719, 736, 737, 743, 754, 758], "j": [0, 4, 8, 11, 12, 17, 25, 31, 34, 35, 40, 74, 95, 174, 175, 176, 177, 179, 182, 191, 193, 196, 198, 206, 214, 216, 220, 226, 237, 239, 240, 243, 244, 275, 304, 307, 308, 319, 334, 335, 339, 350, 351, 355, 357, 364, 436, 440, 528, 529, 532, 534, 537, 547, 569, 589, 657, 717, 718, 722, 754], "concat": [0, 13, 19, 29, 42, 166, 452, 531, 534, 539, 612, 737, 741, 743], "sum_j": 0, "sum": [0, 2, 4, 11, 12, 13, 16, 17, 18, 25, 29, 34, 35, 36, 39, 40, 41, 48, 52, 53, 166, 176, 218, 242, 271, 291, 301, 304, 308, 309, 319, 349, 354, 371, 433, 434, 449, 479, 480, 531, 532, 534, 536, 537, 538, 547, 559, 563, 576, 585, 589, 592, 594, 595, 596, 656, 657, 687, 689, 700, 706, 723, 725, 732, 734, 735, 736, 743], "1": [0, 2, 4, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 59, 61, 62, 63, 64, 65, 66, 67, 71, 72, 74, 75, 76, 77, 83, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 102, 105, 106, 107, 108, 112, 116, 117, 118, 121, 126, 128, 133, 149, 150, 154, 158, 159, 161, 167, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 268, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 301, 304, 305, 307, 308, 309, 310, 313, 314, 315, 317, 319, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 367, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 440, 441, 443, 444, 447, 448, 449, 450, 451, 452, 455, 456, 457, 458, 459, 461, 463, 464, 465, 467, 468, 469, 471, 472, 474, 475, 477, 479, 480, 483, 492, 493, 494, 495, 496, 498, 500, 501, 502, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 619, 622, 623, 624, 625, 627, 628, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 673, 674, 675, 676, 677, 680, 684, 686, 687, 688, 689, 690, 691, 692, 693, 697, 700, 706, 709, 710, 716, 717, 719, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 734, 735, 736, 737, 738, 741, 742, 743, 745, 746, 747, 748, 751], "2": [0, 2, 4, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 59, 61, 62, 63, 64, 65, 66, 67, 72, 74, 75, 76, 77, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 102, 105, 106, 107, 108, 112, 116, 118, 126, 128, 133, 149, 150, 151, 154, 157, 159, 161, 164, 167, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 261, 264, 265, 268, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 301, 304, 305, 307, 308, 310, 313, 314, 317, 319, 322, 323, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 360, 363, 365, 372, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 387, 388, 389, 390, 392, 393, 398, 399, 400, 401, 402, 404, 405, 406, 410, 411, 412, 415, 417, 418, 419, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 455, 456, 457, 458, 459, 461, 463, 464, 465, 467, 468, 469, 471, 472, 474, 475, 477, 479, 480, 483, 492, 493, 494, 495, 496, 498, 502, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 619, 622, 623, 624, 625, 627, 628, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 673, 675, 676, 684, 687, 688, 697, 700, 706, 716, 717, 719, 721, 722, 723, 724, 725, 727, 729, 731, 732, 734, 735, 736, 737, 738, 742, 743, 745, 746, 747, 748, 751, 764, 765], "3": [0, 2, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 21, 22, 23, 25, 26, 28, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 74, 75, 76, 77, 86, 88, 90, 91, 93, 94, 95, 96, 97, 100, 101, 102, 105, 106, 107, 108, 112, 116, 118, 126, 128, 133, 147, 149, 150, 161, 164, 167, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 268, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 301, 304, 305, 307, 308, 310, 313, 314, 315, 317, 319, 325, 326, 327, 328, 330, 333, 334, 335, 338, 339, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 360, 365, 370, 372, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 387, 388, 389, 390, 392, 393, 398, 399, 400, 401, 402, 404, 405, 406, 410, 411, 412, 415, 417, 418, 419, 420, 425, 426, 427, 428, 429, 430, 432, 433, 434, 436, 437, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 455, 456, 459, 461, 463, 464, 465, 467, 468, 469, 471, 472, 474, 475, 479, 480, 492, 493, 494, 498, 501, 502, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 583, 585, 586, 587, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 617, 619, 622, 623, 624, 625, 627, 628, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 673, 676, 688, 700, 706, 715, 716, 719, 720, 721, 723, 724, 725, 727, 729, 732, 734, 737, 738, 743, 745, 746, 747, 748, 765], "4": [0, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 21, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 59, 60, 61, 62, 63, 64, 66, 67, 74, 75, 76, 77, 83, 86, 88, 90, 91, 92, 93, 94, 95, 97, 100, 102, 106, 107, 108, 116, 118, 121, 126, 128, 133, 150, 151, 159, 164, 167, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 252, 253, 254, 255, 256, 257, 258, 260, 264, 265, 268, 275, 277, 278, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 294, 297, 299, 301, 304, 305, 307, 308, 310, 313, 314, 315, 317, 319, 325, 326, 327, 328, 330, 331, 333, 334, 335, 338, 339, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 360, 362, 372, 374, 375, 376, 378, 379, 380, 383, 384, 385, 388, 389, 390, 392, 393, 398, 399, 400, 401, 402, 404, 405, 406, 410, 411, 412, 415, 417, 418, 420, 425, 426, 427, 428, 429, 430, 432, 433, 434, 436, 443, 444, 447, 448, 449, 450, 452, 455, 456, 458, 461, 463, 464, 465, 472, 479, 480, 493, 494, 495, 496, 498, 502, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 583, 585, 586, 587, 589, 590, 592, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 619, 622, 623, 624, 625, 627, 628, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 673, 674, 676, 687, 688, 692, 700, 706, 710, 715, 716, 721, 722, 723, 724, 725, 727, 734, 737, 738, 741, 743, 745, 746, 747, 748, 758, 764, 765], "compiled_fn": 0, "In": [0, 2, 4, 10, 13, 19, 33, 36, 42, 160, 167, 168, 172, 176, 193, 194, 200, 208, 209, 226, 229, 235, 237, 307, 310, 313, 330, 331, 332, 386, 407, 409, 438, 465, 531, 532, 534, 537, 539, 543, 583, 604, 639, 706, 708, 710, 712, 715, 716, 717, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 745, 746, 747, 748, 750, 751, 754, 756, 758, 759, 761, 764], "case": [0, 2, 4, 7, 8, 12, 13, 19, 25, 29, 31, 35, 36, 42, 53, 77, 93, 119, 120, 147, 152, 153, 160, 168, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 188, 189, 190, 191, 193, 194, 196, 198, 199, 200, 201, 207, 208, 209, 214, 215, 216, 217, 218, 221, 226, 229, 231, 235, 236, 237, 238, 239, 240, 243, 244, 246, 282, 284, 294, 304, 307, 310, 313, 314, 330, 331, 332, 374, 375, 376, 379, 381, 383, 384, 385, 388, 392, 399, 405, 407, 409, 415, 458, 465, 479, 480, 481, 529, 530, 531, 532, 534, 537, 539, 541, 547, 583, 589, 600, 601, 602, 604, 606, 607, 609, 611, 619, 625, 658, 659, 660, 661, 662, 663, 664, 673, 689, 690, 692, 706, 709, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 741, 743, 745, 747, 748, 751, 757, 761], "would": [0, 1, 8, 10, 12, 19, 31, 33, 35, 42, 62, 66, 77, 167, 307, 310, 334, 339, 374, 375, 376, 379, 381, 383, 384, 385, 388, 392, 396, 399, 405, 458, 526, 531, 534, 539, 600, 601, 602, 604, 606, 607, 609, 611, 675, 706, 709, 711, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 727, 728, 731, 733, 735, 736, 737, 738, 739, 741, 742, 743, 745, 747, 748, 751, 758, 764], "can": [0, 1, 2, 4, 8, 9, 12, 13, 17, 19, 21, 23, 31, 32, 35, 36, 40, 42, 44, 46, 61, 64, 76, 77, 92, 94, 108, 147, 164, 165, 166, 251, 254, 299, 307, 308, 313, 314, 317, 319, 329, 342, 359, 364, 366, 369, 378, 407, 414, 415, 420, 427, 472, 514, 517, 526, 529, 530, 531, 534, 535, 536, 537, 539, 543, 562, 568, 575, 585, 589, 604, 608, 637, 638, 639, 647, 670, 673, 674, 675, 676, 680, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 755, 756, 757, 758, 759, 761, 762, 764, 765], "observ": [0, 12, 35, 319, 426, 427, 717, 729, 743, 760], "As": [0, 2, 23, 27, 50, 545, 647, 648, 649, 650, 706, 708, 715, 716, 717, 720, 722, 723, 724, 725, 726, 729, 730, 731, 732, 735, 736, 737, 738, 741, 745, 746, 747, 751, 758, 763], "variabl": [0, 1, 12, 13, 14, 20, 29, 35, 36, 37, 43, 71, 72, 74, 308, 314, 319, 368, 415, 426, 427, 441, 465, 466, 467, 468, 471, 496, 516, 517, 519, 521, 522, 523, 528, 534, 535, 537, 540, 542, 584, 613, 614, 615, 635, 670, 680, 685, 686, 687, 688, 689, 690, 691, 692, 693, 717, 721, 725, 728, 731, 734, 735, 738, 739, 743, 746, 747, 748, 751, 759], "calcul": [0, 11, 12, 13, 18, 25, 29, 34, 35, 36, 40, 41, 48, 53, 173, 174, 175, 176, 177, 178, 179, 180, 181, 190, 191, 193, 196, 197, 198, 214, 215, 216, 217, 218, 219, 224, 225, 226, 231, 238, 239, 240, 242, 243, 244, 284, 294, 304, 307, 308, 310, 313, 319, 325, 326, 327, 356, 393, 407, 409, 434, 472, 532, 534, 537, 538, 547, 571, 580, 583, 594, 595, 596, 658, 659, 660, 661, 662, 663, 664, 673, 675, 687, 688, 691, 709, 715, 728, 743], "valu": [0, 8, 9, 11, 12, 13, 14, 16, 17, 19, 20, 21, 22, 23, 24, 25, 28, 29, 31, 32, 34, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 67, 71, 72, 74, 75, 86, 89, 90, 91, 92, 95, 100, 105, 122, 126, 132, 165, 166, 173, 174, 175, 176, 178, 180, 181, 182, 189, 193, 194, 195, 196, 198, 199, 200, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 247, 251, 256, 258, 264, 268, 270, 271, 273, 274, 275, 277, 278, 279, 280, 283, 284, 286, 287, 289, 292, 294, 295, 296, 297, 299, 301, 304, 305, 307, 308, 310, 313, 314, 318, 319, 329, 342, 349, 353, 356, 358, 362, 367, 368, 369, 370, 382, 387, 393, 398, 400, 401, 402, 404, 407, 409, 413, 414, 416, 417, 423, 425, 428, 429, 430, 433, 434, 436, 441, 443, 444, 445, 447, 452, 455, 456, 458, 460, 463, 464, 465, 472, 479, 480, 483, 484, 485, 488, 496, 501, 505, 506, 509, 512, 513, 514, 515, 516, 517, 521, 526, 528, 529, 530, 531, 532, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 567, 570, 571, 576, 577, 578, 581, 582, 583, 584, 585, 586, 589, 592, 597, 598, 599, 603, 604, 612, 613, 614, 618, 620, 621, 622, 623, 624, 629, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 668, 670, 673, 674, 675, 676, 677, 679, 686, 687, 688, 689, 690, 691, 692, 716, 717, 719, 722, 723, 725, 726, 727, 728, 729, 731, 732, 735, 736, 738, 740, 741, 743, 745, 751, 758, 759], "wa": [0, 2, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 59, 60, 61, 62, 63, 64, 65, 66, 67, 88, 90, 95, 97, 102, 106, 108, 133, 167, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 257, 258, 273, 274, 275, 277, 279, 285, 286, 292, 293, 294, 295, 296, 297, 301, 304, 330, 331, 332, 374, 375, 376, 378, 399, 401, 402, 407, 409, 410, 411, 412, 414, 427, 428, 429, 430, 437, 440, 441, 443, 444, 448, 449, 450, 452, 455, 456, 459, 461, 463, 464, 465, 467, 468, 471, 479, 480, 493, 494, 496, 498, 500, 501, 502, 513, 519, 524, 532, 534, 541, 547, 548, 550, 551, 552, 553, 559, 560, 563, 564, 565, 570, 571, 572, 573, 575, 576, 578, 580, 582, 583, 589, 594, 595, 596, 597, 601, 604, 605, 606, 607, 608, 611, 612, 629, 636, 637, 638, 639, 641, 644, 647, 648, 649, 650, 651, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 697, 706, 709, 717, 719, 724, 727, 732, 734, 736, 743, 745, 757, 758, 760], "like": [0, 2, 8, 11, 12, 19, 31, 34, 35, 39, 42, 47, 92, 109, 132, 177, 197, 203, 206, 219, 237, 278, 281, 293, 304, 307, 308, 310, 317, 319, 349, 350, 355, 375, 376, 383, 419, 420, 436, 529, 530, 532, 537, 539, 543, 546, 569, 604, 639, 652, 706, 709, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 745, 746, 747, 748, 750, 751, 758, 763], "were": [0, 29, 32, 121, 125, 126, 200, 532, 717, 725, 729, 730, 734, 735, 737, 738, 739, 741, 743, 758, 759, 764], "exclud": [0, 25, 35, 48, 75, 100, 268, 301, 428, 429, 529, 543, 639, 655, 673, 676, 697, 727, 743], "process": [0, 160, 172, 531, 709, 710, 711, 716, 717, 722, 723, 724, 730, 732, 734, 736, 737, 738, 741, 743, 748, 756, 757, 758, 761, 762, 764, 765], "tensor": [0, 2, 3, 8, 11, 12, 13, 16, 18, 19, 21, 29, 31, 34, 35, 36, 39, 40, 41, 42, 44, 83, 91, 92, 95, 100, 116, 132, 224, 225, 251, 254, 266, 267, 268, 274, 299, 301, 304, 307, 308, 310, 319, 325, 326, 329, 333, 342, 343, 344, 345, 358, 359, 362, 364, 366, 367, 370, 383, 386, 391, 394, 395, 396, 397, 400, 403, 433, 479, 480, 529, 530, 532, 534, 536, 537, 538, 539, 543, 559, 561, 562, 574, 587, 594, 604, 606, 636, 688, 697, 706, 708, 720, 721, 725, 726, 731, 732, 735, 736, 737, 738, 739, 741, 743, 745, 746, 748, 751, 753, 755, 756, 759, 761, 762, 765], "shape": [0, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 75, 76, 77, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 161, 167, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 261, 262, 263, 265, 266, 267, 268, 269, 274, 275, 276, 278, 281, 283, 285, 287, 288, 289, 290, 294, 296, 299, 301, 304, 307, 308, 309, 310, 313, 314, 315, 317, 319, 321, 322, 323, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 339, 340, 342, 343, 344, 345, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 370, 371, 372, 376, 377, 378, 381, 386, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 425, 426, 427, 428, 429, 430, 443, 444, 448, 449, 450, 452, 455, 456, 459, 465, 472, 479, 480, 489, 497, 499, 510, 514, 515, 516, 519, 521, 522, 523, 524, 526, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 616, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 651, 652, 654, 655, 656, 657, 659, 661, 662, 664, 665, 666, 670, 673, 675, 687, 688, 691, 700, 706, 717, 723, 725, 726, 727, 728, 729, 731, 735, 736, 737, 738, 739, 740, 743, 745, 746, 747, 748], "indic": [0, 4, 8, 12, 13, 16, 17, 19, 20, 22, 23, 24, 29, 31, 32, 35, 36, 39, 40, 42, 43, 45, 46, 47, 76, 77, 95, 98, 100, 121, 125, 126, 237, 268, 269, 284, 301, 304, 307, 308, 310, 315, 317, 325, 326, 327, 329, 333, 334, 335, 339, 340, 343, 344, 345, 346, 350, 356, 370, 374, 375, 376, 379, 381, 383, 384, 385, 388, 392, 398, 399, 401, 402, 404, 405, 418, 419, 420, 440, 455, 456, 458, 479, 480, 483, 514, 517, 518, 529, 532, 534, 535, 536, 537, 539, 541, 542, 543, 544, 545, 546, 550, 552, 553, 554, 555, 558, 562, 578, 592, 600, 601, 602, 604, 605, 606, 607, 609, 611, 616, 619, 621, 623, 624, 625, 627, 631, 632, 633, 634, 635, 636, 642, 643, 644, 645, 647, 649, 651, 653, 654, 670, 671, 673, 675, 686, 688, 689, 690, 694, 700, 702, 724, 731, 734, 736, 748], "trace": [0, 2, 13, 17, 29, 36, 40, 467, 468, 471, 482, 490, 504, 511, 534, 537, 706, 719, 725, 740, 743, 751, 753, 759, 764], "doesn": [0, 465, 534, 688, 716, 721, 723, 724, 725, 726, 727, 730, 732, 734, 738, 741, 743, 751, 756], "impos": 0, "addit": [0, 10, 12, 13, 20, 33, 35, 36, 43, 72, 74, 167, 176, 236, 319, 426, 431, 448, 449, 450, 514, 528, 531, 532, 534, 540, 542, 615, 635, 688, 715, 716, 717, 721, 725, 727, 728, 730, 732, 734, 735, 736, 738, 739, 741, 745, 746, 748, 758, 759, 760, 764], "restrict": [0, 723, 724, 736, 743, 755], "datatyp": [0, 8, 29, 31, 77, 90, 94, 110, 131, 135, 529, 530, 668, 739], "out": [0, 2, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 75, 76, 77, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 105, 107, 116, 167, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 269, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 301, 304, 307, 308, 309, 310, 313, 314, 315, 317, 319, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 342, 343, 344, 345, 346, 348, 350, 351, 352, 353, 354, 355, 359, 360, 361, 363, 364, 365, 366, 371, 377, 378, 380, 381, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 439, 443, 444, 448, 449, 450, 452, 455, 456, 465, 475, 479, 480, 515, 516, 519, 521, 522, 523, 524, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 612, 616, 635, 636, 637, 638, 639, 641, 642, 643, 644, 646, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 673, 680, 684, 685, 687, 688, 690, 691, 692, 693, 706, 708, 709, 710, 711, 712, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 734, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 750, 752, 758, 765], "differ": [0, 1, 2, 11, 12, 13, 17, 25, 29, 35, 36, 48, 52, 53, 61, 64, 118, 176, 193, 200, 201, 226, 242, 273, 278, 281, 282, 286, 304, 307, 308, 310, 319, 340, 350, 367, 370, 384, 385, 399, 428, 429, 436, 455, 456, 526, 530, 532, 534, 536, 537, 539, 547, 559, 560, 572, 583, 598, 608, 655, 656, 661, 663, 664, 690, 706, 708, 709, 710, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 734, 735, 736, 737, 738, 739, 741, 743, 744, 745, 746, 747, 748, 751, 755, 756, 757, 758, 761, 764, 765], "b": [0, 4, 6, 11, 12, 13, 16, 17, 25, 28, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 59, 60, 61, 62, 63, 64, 65, 66, 76, 77, 83, 88, 89, 90, 92, 95, 97, 102, 105, 106, 107, 108, 116, 126, 128, 133, 150, 167, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 262, 263, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 299, 301, 304, 307, 308, 310, 314, 317, 319, 325, 326, 327, 328, 330, 331, 334, 338, 339, 340, 343, 344, 345, 349, 354, 356, 360, 365, 370, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 387, 388, 389, 390, 392, 393, 399, 401, 402, 405, 406, 411, 412, 414, 415, 417, 418, 420, 427, 428, 429, 430, 432, 434, 436, 437, 440, 441, 443, 444, 447, 448, 449, 450, 451, 452, 455, 456, 459, 461, 463, 464, 465, 467, 468, 471, 472, 479, 480, 493, 494, 496, 500, 501, 513, 515, 516, 517, 519, 521, 523, 524, 526, 529, 530, 532, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 563, 564, 565, 566, 568, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 583, 584, 585, 586, 587, 589, 590, 592, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 619, 622, 623, 624, 625, 627, 628, 633, 634, 635, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 700, 706, 707, 710, 711, 717, 718, 719, 721, 723, 724, 727, 732, 734, 737, 742, 743, 744, 746, 747, 748, 749, 754], "new": [0, 1, 12, 13, 14, 19, 20, 29, 31, 35, 36, 37, 40, 42, 43, 84, 87, 89, 90, 95, 96, 97, 101, 102, 139, 182, 228, 230, 234, 273, 276, 286, 291, 304, 310, 319, 372, 378, 392, 398, 434, 448, 449, 450, 452, 455, 456, 458, 479, 480, 484, 491, 493, 494, 500, 516, 519, 521, 522, 523, 529, 530, 532, 534, 535, 539, 541, 542, 572, 580, 600, 604, 608, 621, 633, 634, 635, 685, 688, 691, 692, 697, 706, 708, 709, 710, 711, 715, 716, 717, 718, 720, 721, 723, 724, 725, 727, 728, 730, 733, 735, 736, 737, 738, 739, 741, 742, 745, 748, 750, 753, 756, 760, 764, 765], "run": [0, 2, 12, 14, 35, 37, 313, 407, 409, 515, 516, 521, 535, 540, 613, 614, 615, 670, 671, 688, 689, 690, 691, 700, 706, 712, 713, 715, 716, 718, 720, 721, 724, 726, 727, 729, 730, 731, 733, 736, 737, 743, 744, 745, 746, 747, 748, 750, 751, 752, 756, 758, 759, 760, 761, 763, 764, 765], "under": [0, 2, 309, 371, 700, 706, 715, 716, 718, 719, 726, 727, 728, 730, 736, 737, 738, 741, 742, 743, 746, 748, 751, 758, 761, 765], "hood": [0, 2, 706, 718, 726, 727, 730, 736, 738, 741, 742, 743, 746, 748, 765], "track": [0, 541, 628, 686, 689, 690, 716, 717, 719, 734, 735, 758], "befor": [0, 2, 12, 16, 17, 19, 23, 25, 29, 35, 39, 40, 163, 166, 171, 307, 310, 319, 334, 339, 349, 384, 385, 386, 393, 428, 429, 531, 536, 537, 539, 540, 541, 545, 547, 549, 550, 551, 552, 554, 556, 558, 562, 563, 575, 592, 598, 613, 614, 628, 647, 648, 649, 650, 655, 656, 661, 663, 686, 697, 700, 715, 716, 717, 719, 720, 722, 725, 726, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 743, 746, 751, 758], "instead": [0, 2, 11, 12, 17, 34, 35, 40, 147, 235, 261, 301, 307, 319, 343, 344, 345, 427, 430, 531, 532, 537, 578, 673, 715, 716, 717, 719, 722, 724, 725, 727, 728, 729, 731, 732, 733, 735, 736, 737, 738, 741, 743, 745, 746, 751, 756, 758, 764, 765], "allow": [0, 2, 12, 35, 91, 231, 319, 430, 434, 475, 529, 532, 534, 546, 653, 673, 674, 675, 676, 686, 689, 690, 704, 706, 709, 712, 715, 717, 720, 721, 724, 725, 729, 730, 732, 733, 734, 735, 736, 737, 738, 741, 743, 745, 751, 753, 756, 758, 762, 763], "dynam": [0, 539, 604, 697, 718, 724, 725, 726, 735, 736, 740, 743, 758, 762], "done": [0, 2, 537, 571, 714, 715, 716, 717, 719, 722, 724, 726, 727, 730, 735, 736, 738, 746, 758], "first": [0, 1, 2, 4, 8, 11, 12, 17, 19, 21, 22, 23, 25, 31, 34, 35, 36, 40, 42, 44, 46, 48, 52, 53, 71, 72, 91, 92, 100, 131, 139, 149, 176, 181, 183, 185, 186, 187, 188, 194, 200, 201, 202, 203, 204, 205, 211, 212, 213, 218, 219, 220, 222, 223, 226, 229, 231, 242, 243, 251, 257, 258, 268, 270, 271, 273, 282, 284, 285, 286, 292, 295, 296, 299, 301, 304, 307, 308, 310, 317, 319, 329, 354, 355, 356, 360, 379, 383, 390, 393, 395, 396, 399, 404, 414, 416, 420, 428, 429, 430, 436, 440, 528, 529, 530, 531, 532, 534, 536, 537, 539, 540, 541, 544, 545, 546, 547, 562, 565, 568, 569, 570, 572, 575, 580, 582, 583, 585, 587, 591, 604, 605, 608, 609, 613, 614, 615, 616, 617, 626, 627, 629, 641, 642, 643, 647, 648, 649, 652, 653, 655, 656, 670, 687, 688, 689, 690, 692, 697, 706, 708, 709, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 727, 730, 731, 732, 733, 735, 736, 738, 741, 743, 745, 746, 748, 756, 758, 759, 763], "invok": [0, 2, 12, 307, 329, 706, 730], "onc": [0, 1, 17, 21, 40, 44, 166, 308, 355, 531, 537, 543, 569, 570, 571, 585, 636, 710, 715, 716, 717, 723, 724, 725, 726, 727, 730, 735, 736, 738, 741, 743, 746, 751], "been": [0, 1, 12, 13, 21, 35, 36, 44, 149, 236, 310, 400, 448, 449, 450, 531, 532, 534, 543, 636, 700, 715, 717, 719, 721, 723, 724, 725, 726, 728, 729, 731, 732, 735, 738, 743, 745, 750, 751, 753, 758, 765], "directli": [0, 1, 2, 308, 359, 541, 628, 706, 710, 717, 719, 720, 723, 724, 725, 726, 728, 730, 732, 733, 735, 736, 737, 739, 740, 743, 745, 747, 748, 750, 751, 762, 763, 764], "here": [0, 2, 236, 532, 706, 714, 715, 716, 717, 719, 721, 722, 723, 724, 725, 727, 730, 731, 733, 734, 735, 736, 737, 738, 739, 743, 744, 745, 746, 747, 748, 750, 751, 758, 759], "eager_graph": [0, 2, 706], "doe": [0, 4, 11, 12, 13, 19, 29, 34, 35, 42, 100, 188, 227, 229, 237, 268, 301, 308, 309, 319, 355, 371, 433, 434, 465, 529, 532, 534, 537, 539, 569, 606, 668, 709, 715, 717, 718, 721, 724, 725, 727, 728, 730, 731, 732, 735, 736, 737, 738, 741, 743, 745, 746, 751, 753, 754, 758, 759, 765], "lazy_graph": [0, 2, 706], "up": [0, 12, 13, 35, 36, 307, 310, 329, 342, 385, 472, 534, 536, 559, 686, 708, 709, 710, 711, 712, 715, 717, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 743, 744, 745, 746, 747, 748, 750, 751, 752, 759, 764, 765], "enabl": [0, 12, 17, 29, 40, 53, 307, 309, 329, 371, 537, 578, 706, 709, 716, 717, 720, 723, 725, 732, 733, 734, 735, 736, 738, 739, 742, 744, 746, 748, 751, 753, 756, 757, 758, 759, 760, 761, 764, 765], "delai": [0, 717], "until": [0, 709, 717, 735, 743, 751, 765], "have": [0, 1, 2, 4, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 75, 76, 77, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 105, 106, 107, 118, 167, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 257, 258, 269, 274, 275, 283, 285, 287, 288, 289, 290, 294, 296, 299, 301, 304, 307, 308, 309, 310, 313, 314, 315, 317, 319, 321, 322, 323, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 339, 340, 342, 343, 344, 345, 348, 350, 351, 352, 353, 355, 356, 359, 360, 363, 364, 365, 366, 369, 371, 375, 376, 378, 379, 381, 386, 394, 395, 396, 397, 399, 402, 403, 410, 411, 412, 413, 414, 416, 417, 418, 420, 427, 428, 429, 430, 434, 443, 444, 448, 449, 450, 455, 456, 465, 479, 480, 515, 516, 519, 521, 522, 523, 524, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 612, 616, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 673, 684, 685, 686, 687, 688, 690, 691, 692, 693, 700, 706, 707, 708, 709, 710, 712, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 764, 765], "necessari": [0, 2, 8, 12, 19, 31, 35, 42, 77, 193, 226, 310, 374, 375, 376, 379, 381, 383, 384, 385, 388, 392, 399, 405, 458, 487, 508, 532, 534, 539, 600, 601, 602, 604, 606, 607, 609, 611, 706, 716, 720, 721, 723, 727, 735, 736, 738, 740, 741], "particularli": [0, 717, 746, 751, 756], "librari": [0, 10, 23, 33, 167, 198, 200, 216, 221, 222, 244, 531, 532, 537, 545, 547, 570, 571, 647, 648, 649, 650, 658, 659, 660, 662, 706, 708, 709, 710, 711, 713, 715, 716, 719, 748, 749, 751, 753, 754, 755, 756, 758, 762, 765], "where": [0, 4, 8, 11, 12, 13, 17, 19, 21, 22, 25, 26, 29, 31, 34, 35, 36, 40, 42, 44, 45, 48, 49, 89, 90, 93, 95, 100, 181, 191, 193, 196, 198, 200, 201, 210, 215, 216, 217, 224, 225, 226, 231, 233, 237, 239, 243, 249, 251, 268, 270, 271, 282, 286, 293, 299, 301, 304, 307, 308, 310, 313, 314, 319, 321, 322, 323, 329, 334, 335, 339, 355, 356, 358, 359, 361, 367, 370, 374, 375, 376, 387, 393, 407, 408, 409, 413, 414, 416, 417, 427, 436, 465, 479, 514, 529, 532, 534, 536, 537, 539, 541, 543, 544, 547, 548, 562, 565, 569, 570, 574, 576, 578, 580, 581, 582, 585, 586, 589, 591, 597, 599, 600, 602, 608, 612, 627, 636, 637, 638, 639, 644, 645, 662, 664, 665, 666, 687, 691, 706, 708, 709, 710, 711, 716, 717, 719, 720, 721, 722, 723, 725, 726, 728, 729, 732, 733, 734, 735, 736, 737, 738, 739, 741, 743, 746, 747, 748, 751, 752, 756, 765], "feasibl": [0, 709, 715, 724], "provid": [0, 2, 8, 12, 13, 17, 19, 22, 25, 26, 29, 31, 35, 36, 40, 42, 45, 48, 49, 71, 93, 95, 111, 112, 113, 114, 115, 123, 133, 145, 149, 245, 308, 310, 313, 319, 354, 367, 370, 379, 388, 405, 407, 409, 436, 447, 479, 480, 528, 529, 530, 531, 532, 534, 536, 537, 539, 544, 547, 548, 562, 577, 580, 591, 600, 601, 608, 642, 662, 664, 665, 666, 674, 688, 692, 697, 706, 708, 715, 716, 717, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 741, 745, 747, 750, 751, 756, 757, 758, 759, 760, 761, 762, 765], "valid": [0, 4, 12, 16, 26, 35, 39, 49, 110, 307, 308, 325, 326, 327, 343, 344, 345, 346, 348, 349, 365, 370, 468, 530, 534, 536, 539, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 600, 608, 665, 666, 673, 674, 688, 700, 716, 721, 725, 727, 730, 734, 737, 738, 759], "look": [0, 706, 708, 712, 715, 716, 717, 721, 722, 723, 725, 726, 727, 729, 730, 731, 732, 736, 737, 738, 739, 740, 741, 743, 745, 747, 748, 752, 754, 758], "find": [0, 1, 17, 23, 29, 40, 537, 541, 545, 578, 618, 647, 648, 649, 650, 700, 706, 708, 711, 714, 715, 716, 717, 719, 722, 724, 734, 738, 741, 743, 746, 753], "abl": [0, 4, 29, 716, 717, 719, 725, 732, 735, 736, 739, 743, 748, 761, 764], "through": [0, 12, 35, 181, 319, 433, 434, 532, 541, 619, 625, 690, 700, 706, 711, 714, 715, 717, 718, 721, 722, 723, 724, 726, 727, 729, 730, 732, 733, 735, 736, 737, 738, 740, 741, 742, 743, 746, 747, 748, 750, 756, 758, 759, 760], "flag": [0, 2, 29, 149, 319, 427, 531, 536, 562, 670, 680, 691, 717, 725, 726, 735, 736, 737, 738], "reduc": [0, 12, 13, 17, 22, 25, 26, 29, 35, 36, 40, 45, 48, 49, 166, 291, 304, 305, 319, 432, 433, 434, 436, 449, 531, 534, 537, 544, 547, 548, 582, 642, 643, 658, 659, 660, 661, 662, 663, 664, 665, 666, 700, 724, 729, 736, 741, 743, 745, 756, 760, 761, 762], "time": [0, 1, 2, 4, 12, 14, 17, 23, 35, 37, 46, 88, 278, 304, 307, 308, 310, 319, 335, 340, 366, 370, 393, 399, 427, 516, 521, 529, 535, 536, 537, 539, 540, 544, 545, 559, 561, 575, 610, 613, 614, 615, 642, 643, 647, 648, 688, 689, 690, 708, 709, 710, 715, 716, 717, 721, 723, 724, 725, 727, 731, 732, 733, 735, 736, 738, 739, 743, 746, 748, 751, 756, 758, 759, 762, 763, 764], "comp_func": 0, "default": [0, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 75, 76, 77, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 119, 120, 121, 122, 125, 126, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 149, 150, 152, 153, 157, 160, 161, 162, 164, 165, 166, 167, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 266, 267, 268, 269, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 301, 304, 305, 307, 308, 309, 310, 313, 314, 315, 317, 319, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 440, 441, 443, 444, 448, 449, 450, 452, 453, 454, 455, 456, 458, 459, 460, 461, 463, 464, 465, 467, 468, 471, 472, 475, 476, 479, 480, 483, 488, 492, 493, 494, 496, 498, 500, 501, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 526, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 622, 623, 624, 626, 627, 628, 629, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 673, 674, 675, 676, 680, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 700, 715, 716, 717, 721, 722, 725, 726, 727, 728, 729, 731, 732, 736, 738, 741, 743, 747, 753, 758], "follow": [0, 12, 13, 14, 16, 17, 23, 29, 35, 36, 37, 39, 40, 88, 121, 166, 176, 193, 200, 226, 228, 235, 236, 307, 310, 313, 329, 342, 381, 393, 398, 407, 409, 463, 464, 465, 493, 494, 516, 519, 521, 522, 523, 529, 530, 531, 532, 534, 535, 536, 537, 541, 545, 562, 563, 576, 582, 592, 622, 628, 647, 648, 649, 650, 688, 692, 706, 708, 709, 713, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 751, 752, 755, 758, 761], "show": [0, 482, 490, 511, 534, 686, 706, 715, 716, 717, 722, 724, 727, 730, 735, 736, 738, 740, 750, 751, 758], "simpler": [0, 715, 717, 730, 759, 765], "obtain": [0, 307, 346, 536, 562, 675, 736], "howev": [0, 17, 40, 200, 243, 244, 313, 407, 409, 532, 537, 583, 585, 697, 709, 715, 716, 719, 720, 721, 723, 725, 726, 727, 728, 729, 730, 731, 732, 735, 736, 737, 738, 741, 743, 745, 746, 747, 748, 751, 757, 758, 764], "desir": [0, 4, 9, 10, 12, 22, 29, 32, 33, 35, 45, 105, 107, 108, 167, 310, 319, 391, 433, 436, 530, 531, 537, 544, 587, 644, 687, 688, 708, 717, 721, 724, 725, 736, 743, 758], "below": [0, 2, 8, 12, 17, 40, 48, 98, 99, 100, 200, 210, 233, 268, 269, 275, 301, 304, 529, 532, 537, 568, 589, 664, 706, 711, 715, 716, 718, 719, 723, 724, 725, 726, 727, 729, 732, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 754, 756, 761, 763], "ultim": 0, "trade": 0, "off": [0, 16, 17, 39, 40, 330, 331, 332, 536, 537, 559, 568, 589, 687, 688, 710, 716, 726, 742, 764], "between": [0, 2, 11, 12, 13, 16, 17, 18, 19, 23, 29, 34, 35, 39, 41, 42, 53, 75, 118, 181, 194, 229, 231, 245, 273, 286, 288, 304, 307, 308, 309, 310, 319, 330, 331, 332, 343, 344, 345, 354, 371, 393, 436, 529, 530, 532, 536, 538, 539, 541, 543, 545, 559, 580, 594, 595, 596, 600, 608, 622, 637, 648, 649, 650, 674, 692, 708, 720, 721, 727, 731, 732, 733, 735, 736, 737, 738, 741, 742, 744, 745, 746, 748, 750, 754, 755, 757, 758, 759, 764], "memori": [0, 8, 12, 19, 31, 35, 42, 77, 93, 148, 160, 166, 168, 172, 310, 319, 374, 375, 376, 379, 381, 383, 384, 385, 388, 392, 399, 405, 434, 458, 478, 529, 531, 534, 536, 539, 561, 600, 601, 602, 604, 606, 607, 609, 611, 706, 724, 725, 726, 735, 736, 741, 743, 749, 751, 758, 760, 761, 762], "store": [0, 9, 13, 17, 19, 29, 32, 36, 40, 42, 107, 307, 308, 350, 354, 452, 534, 537, 539, 589, 606, 670, 671, 688, 689, 690, 713, 717, 720, 721, 723, 728, 733, 735, 736, 737, 743, 745, 746, 747, 753], "thei": [0, 12, 17, 21, 23, 29, 40, 44, 46, 131, 245, 281, 304, 530, 532, 537, 540, 543, 545, 590, 613, 614, 636, 647, 668, 693, 706, 714, 715, 718, 719, 721, 722, 723, 724, 725, 726, 727, 729, 730, 732, 733, 735, 736, 738, 739, 741, 743, 745, 746, 747, 748, 751, 755, 758, 760, 761, 764, 765], "By": [0, 12, 18, 19, 25, 26, 35, 41, 42, 48, 49, 240, 272, 284, 291, 301, 304, 307, 309, 317, 319, 329, 371, 420, 427, 430, 532, 537, 538, 539, 547, 548, 565, 591, 594, 603, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 716, 721, 725, 727, 729, 732, 734, 735, 736, 743, 747, 748], "choos": [0, 10, 22, 23, 33, 167, 193, 200, 221, 222, 226, 531, 532, 544, 545, 547, 646, 647, 648, 649, 650, 658, 659, 660, 662, 715, 716, 717, 738, 744, 748], "node": [0, 2, 29, 36, 441, 496, 541, 626, 627, 687, 696, 709, 722, 723, 736, 759], "bake": 0, "randint": [0, 16, 21, 23, 39, 44, 543, 545, 558, 561, 647, 725], "0": [0, 2, 4, 5, 6, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 74, 75, 83, 86, 88, 89, 90, 91, 92, 95, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 116, 118, 121, 122, 126, 128, 133, 146, 149, 151, 154, 159, 160, 161, 162, 164, 165, 166, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 268, 269, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 301, 304, 305, 307, 308, 309, 310, 313, 314, 317, 319, 325, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 349, 350, 352, 353, 355, 356, 357, 358, 359, 361, 362, 363, 366, 367, 370, 371, 373, 378, 379, 380, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 440, 442, 443, 444, 447, 448, 449, 451, 452, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 467, 468, 469, 471, 472, 475, 477, 479, 480, 483, 488, 492, 493, 494, 496, 498, 500, 501, 509, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 573, 575, 576, 577, 578, 579, 581, 583, 585, 586, 587, 589, 590, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 619, 622, 623, 624, 625, 627, 628, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 673, 674, 675, 676, 677, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 697, 700, 706, 716, 717, 719, 721, 723, 724, 725, 726, 727, 728, 729, 734, 735, 736, 737, 738, 739, 743, 745, 746, 747, 748, 751], "100": [0, 8, 11, 12, 31, 34, 35, 36, 39, 92, 100, 187, 227, 240, 268, 286, 301, 304, 307, 308, 330, 331, 367, 370, 456, 464, 480, 529, 532, 534, 537, 541, 573, 622, 706, 709, 710, 724, 725, 738, 746, 747, 748, 751], "size": [0, 4, 12, 13, 16, 17, 19, 21, 22, 29, 35, 36, 39, 40, 42, 44, 45, 52, 53, 88, 91, 164, 165, 166, 257, 260, 270, 271, 272, 277, 291, 297, 301, 304, 305, 307, 308, 310, 313, 314, 317, 319, 321, 322, 323, 324, 325, 326, 342, 343, 344, 346, 347, 356, 367, 370, 379, 391, 402, 408, 409, 415, 420, 432, 433, 434, 436, 474, 479, 529, 531, 534, 536, 537, 539, 543, 544, 548, 563, 565, 568, 572, 576, 580, 582, 585, 591, 600, 605, 606, 607, 636, 642, 645, 665, 666, 673, 675, 676, 688, 706, 735, 737, 738, 741, 746], "rand": [0, 700, 706], "And": [0, 32, 706, 719, 722, 730, 732, 738], "final": [0, 2, 4, 8, 13, 35, 36, 74, 91, 92, 307, 350, 452, 528, 529, 534, 536, 562, 715, 717, 719, 720, 721, 722, 724, 725, 727, 728, 732, 734, 735, 736, 741, 742, 746, 754, 764], "__setattr__": [0, 723], "__getattr__": [0, 723], "arbitrari": [0, 2, 8, 9, 12, 29, 32, 93, 106, 133, 374, 375, 376, 517, 529, 530, 535, 731, 732, 734, 735, 736, 738, 747, 751, 759, 764], "class": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 88, 97, 102, 118, 121, 134, 136, 137, 196, 233, 275, 304, 318, 319, 326, 327, 355, 433, 434, 439, 448, 452, 465, 475, 496, 529, 530, 531, 532, 534, 536, 538, 541, 542, 561, 563, 569, 580, 585, 594, 610, 616, 617, 628, 635, 650, 661, 662, 670, 671, 677, 678, 679, 680, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 697, 700, 704, 706, 715, 721, 722, 723, 725, 726, 727, 728, 731, 733, 734, 737, 738, 741, 743, 744, 746, 747, 748, 749, 750, 751, 753, 756, 758, 759, 765], "cont": 0, "new_attribut": 0, "contain": [0, 6, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 75, 76, 77, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 116, 118, 119, 120, 121, 124, 125, 126, 128, 130, 133, 150, 152, 153, 154, 159, 167, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 304, 306, 307, 308, 309, 310, 313, 319, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 338, 339, 340, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 443, 444, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 461, 463, 464, 465, 467, 468, 469, 471, 472, 474, 479, 480, 483, 486, 488, 493, 494, 495, 496, 498, 500, 501, 507, 513, 514, 515, 516, 517, 519, 521, 522, 523, 524, 526, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 623, 624, 625, 628, 629, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 673, 679, 680, 686, 688, 689, 690, 692, 693, 697, 700, 706, 708, 712, 713, 715, 716, 718, 719, 720, 721, 722, 724, 725, 727, 728, 731, 732, 733, 734, 735, 738, 740, 741, 742, 743, 744, 747, 751, 752, 753, 758, 759, 764], "cont_deep_copi": [0, 29, 746], "some": [0, 2, 29, 37, 198, 200, 216, 307, 330, 331, 332, 515, 516, 519, 521, 522, 523, 531, 532, 535, 541, 627, 688, 706, 709, 710, 715, 716, 717, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 745, 746, 747, 750, 751, 752, 753, 754, 755, 757, 758, 759, 764, 765], "still": [0, 2, 17, 29, 40, 537, 585, 709, 715, 717, 720, 721, 725, 728, 729, 730, 732, 735, 736, 738, 741, 747, 751, 755, 758, 764], "develop": [0, 2, 706, 708, 709, 710, 711, 712, 714, 715, 716, 717, 719, 722, 724, 739, 750, 751, 753, 756, 757, 758, 759, 760, 763, 764, 765], "account": [0, 12, 19, 35, 42, 240, 310, 383, 532, 539, 604, 687, 700, 716, 724, 728, 736, 739], "point": [0, 9, 11, 12, 17, 21, 23, 25, 32, 34, 35, 40, 44, 48, 75, 76, 77, 84, 86, 89, 96, 97, 101, 105, 118, 122, 126, 133, 173, 174, 175, 176, 178, 179, 180, 181, 182, 188, 189, 190, 191, 193, 194, 196, 198, 199, 200, 206, 207, 208, 209, 214, 215, 216, 217, 218, 226, 228, 229, 231, 233, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 257, 258, 260, 288, 289, 292, 294, 301, 304, 307, 308, 314, 319, 330, 331, 332, 355, 369, 413, 414, 415, 416, 417, 427, 428, 429, 436, 527, 529, 530, 532, 537, 543, 544, 545, 546, 547, 564, 566, 569, 570, 571, 573, 576, 577, 578, 581, 582, 583, 584, 585, 586, 587, 589, 592, 638, 639, 645, 647, 648, 649, 650, 653, 655, 656, 658, 659, 660, 661, 662, 663, 664, 697, 710, 715, 716, 717, 719, 720, 721, 722, 724, 727, 728, 731, 735, 736, 738, 739, 741, 743, 745, 746, 750, 764], "wip": [0, 730], "ll": [0, 1, 2, 706, 710, 711, 715, 716, 717, 722, 727, 730, 734, 735, 746], "soon": [0, 715, 717, 724, 725, 749, 751], "control": [0, 12, 35, 100, 248, 268, 299, 301, 307, 310, 330, 331, 332, 401, 529, 537, 567, 686, 723, 725, 726, 734, 735, 736, 737, 741, 745, 746, 750, 753, 758, 764], "flow": [0, 723, 750, 758, 759], "built": [0, 75, 529, 688, 689, 690, 706, 716, 717, 722, 723, 738, 744, 752, 753, 757, 758, 762], "moment": [0, 2, 14, 37, 515, 516, 521, 535, 692, 715, 721, 751], "condit": [0, 22, 35, 45, 72, 308, 352, 528, 541, 544, 626, 627, 646, 675, 719, 725, 727, 729, 732, 733, 735, 738, 750], "branch": [0, 181, 193, 196, 198, 226, 238, 239, 240, 243, 532, 716, 717, 719, 724, 730, 751, 758], "loop": [0, 27, 50, 71, 74, 528, 540, 613, 614, 615, 706, 721, 726, 751], "regist": [0, 717], "correctli": [0, 2, 12, 17, 22, 35, 40, 45, 277, 304, 319, 433, 434, 436, 537, 544, 576, 642, 715, 716, 717, 720, 723, 725, 727, 729, 730, 731, 737, 738, 741, 747, 751], "while": [0, 1, 4, 12, 16, 29, 35, 39, 53, 74, 95, 132, 200, 201, 221, 222, 282, 304, 307, 308, 310, 350, 365, 395, 396, 426, 528, 529, 530, 532, 536, 545, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 647, 659, 662, 671, 708, 709, 715, 716, 717, 720, 721, 722, 724, 725, 726, 727, 730, 731, 732, 734, 735, 736, 737, 738, 739, 741, 745, 747, 748, 751, 758, 764, 765], "your": [0, 1, 2, 706, 709, 710, 711, 712, 714, 715, 716, 719, 721, 722, 724, 728, 730, 734, 736, 739, 741, 746, 747, 751, 752, 758], "depend": [0, 8, 9, 12, 13, 17, 23, 24, 32, 35, 40, 47, 48, 72, 83, 105, 173, 174, 175, 178, 179, 180, 181, 190, 191, 193, 196, 198, 214, 215, 216, 217, 226, 228, 231, 238, 239, 243, 244, 294, 304, 308, 355, 368, 496, 528, 529, 530, 532, 534, 537, 544, 546, 569, 570, 582, 583, 584, 585, 646, 651, 654, 664, 706, 709, 712, 713, 715, 716, 717, 722, 725, 728, 733, 735, 736, 737, 738, 741, 743, 751, 752, 756, 758, 759], "chang": [0, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 77, 83, 85, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 102, 106, 107, 108, 121, 125, 126, 133, 150, 167, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 262, 263, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 304, 310, 319, 325, 326, 327, 328, 330, 331, 332, 334, 338, 339, 340, 343, 344, 345, 349, 351, 352, 353, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 440, 441, 443, 444, 447, 448, 449, 450, 451, 452, 455, 456, 459, 461, 463, 464, 465, 467, 468, 469, 471, 472, 474, 479, 480, 493, 494, 495, 496, 498, 500, 501, 513, 515, 516, 519, 521, 522, 523, 524, 526, 532, 539, 541, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 575, 576, 581, 582, 583, 585, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 617, 628, 633, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 670, 706, 710, 712, 715, 716, 717, 719, 721, 722, 723, 724, 725, 726, 727, 728, 730, 736, 737, 738, 739, 740, 741, 743, 747, 751, 752, 761, 764], "number": [0, 4, 8, 9, 11, 12, 13, 16, 17, 18, 19, 21, 22, 23, 25, 26, 29, 31, 32, 34, 35, 36, 39, 40, 41, 42, 44, 45, 46, 48, 49, 52, 53, 55, 75, 86, 88, 90, 91, 92, 93, 94, 95, 96, 97, 100, 106, 111, 112, 113, 114, 115, 117, 118, 121, 124, 125, 126, 128, 130, 133, 157, 158, 159, 173, 174, 175, 176, 177, 179, 181, 182, 189, 191, 193, 194, 196, 198, 199, 200, 206, 207, 208, 210, 214, 216, 224, 225, 226, 227, 228, 229, 231, 233, 235, 236, 237, 239, 240, 244, 246, 254, 266, 267, 268, 270, 271, 273, 275, 276, 277, 278, 286, 291, 299, 301, 304, 307, 308, 310, 313, 319, 340, 350, 352, 355, 358, 359, 367, 369, 370, 374, 375, 376, 393, 394, 395, 396, 397, 399, 402, 404, 407, 408, 409, 425, 427, 428, 429, 430, 452, 459, 477, 493, 494, 501, 513, 514, 527, 529, 530, 531, 532, 534, 536, 537, 538, 539, 540, 543, 544, 545, 547, 548, 549, 556, 557, 559, 562, 565, 569, 570, 571, 578, 583, 585, 589, 590, 591, 594, 597, 599, 600, 602, 603, 605, 606, 608, 610, 612, 613, 614, 615, 636, 640, 645, 647, 648, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 673, 674, 675, 680, 686, 687, 688, 691, 706, 707, 708, 716, 717, 723, 724, 725, 726, 727, 734, 735, 738, 739, 740, 741, 743, 746], "underli": [0, 12, 19, 35, 42, 183, 186, 188, 223, 310, 383, 532, 537, 539, 583, 604, 723, 735, 741, 758], "piec": [0, 717, 720, 732, 733, 743, 754, 756], "insid": [0, 17, 40, 53, 310, 402, 537, 578, 671, 716, 717, 720, 723, 725, 726, 732, 733, 738, 739, 764], "said": [0, 675, 710, 739], "other": [0, 2, 4, 9, 11, 12, 13, 19, 25, 29, 32, 34, 35, 36, 42, 48, 52, 53, 75, 95, 106, 132, 193, 198, 200, 216, 225, 226, 274, 278, 304, 310, 378, 386, 398, 437, 438, 529, 530, 532, 534, 543, 547, 598, 608, 639, 662, 664, 706, 709, 712, 715, 716, 717, 719, 720, 723, 724, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 741, 743, 745, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 764, 765], "numpi": [0, 2, 11, 12, 13, 25, 34, 35, 36, 100, 129, 147, 177, 237, 268, 301, 319, 427, 434, 441, 465, 493, 496, 500, 529, 530, 531, 532, 534, 547, 657, 668, 670, 697, 700, 706, 708, 709, 714, 715, 716, 717, 719, 720, 721, 724, 725, 726, 729, 731, 735, 737, 738, 739, 741, 743, 745, 748, 752, 753, 760, 765], "len": [0, 8, 12, 17, 35, 40, 93, 261, 301, 307, 308, 319, 340, 350, 359, 367, 370, 436, 529, 537, 590, 706, 723, 724, 729, 735, 736, 738, 745, 748], "incorrectli": [0, 728], "There": [0, 4, 300, 302, 303, 311, 312, 316, 320, 675, 706, 708, 715, 716, 717, 719, 720, 721, 722, 723, 725, 726, 727, 729, 730, 732, 734, 736, 737, 740, 743, 746, 751, 759, 760, 764, 765], "succe": [0, 716], "hide": 0, "shouldn": [0, 739], "realli": [0, 716, 723, 751, 763, 764], "check": [0, 7, 9, 13, 17, 29, 32, 36, 40, 109, 110, 119, 120, 123, 125, 126, 127, 130, 145, 152, 153, 160, 172, 441, 451, 453, 454, 461, 467, 468, 469, 470, 471, 486, 496, 507, 513, 530, 531, 534, 537, 541, 570, 571, 578, 616, 617, 626, 627, 628, 668, 675, 686, 700, 706, 713, 714, 715, 716, 717, 719, 723, 724, 727, 729, 733, 735, 736, 737, 738, 739, 740, 742, 743, 745, 746, 747, 752], "recommend": [0, 221, 222, 235, 532, 547, 659, 662, 716, 721, 722, 730, 733, 734], "nois": [0, 2, 706], "anoth": [0, 2, 87, 106, 108, 529, 530, 706, 709, 715, 716, 717, 721, 723, 725, 726, 729, 730, 732, 735, 736, 738, 743, 745, 748, 753, 758, 764], "right": [0, 12, 17, 29, 35, 40, 53, 69, 70, 185, 187, 240, 285, 304, 307, 308, 310, 341, 362, 368, 369, 384, 448, 528, 532, 534, 537, 546, 585, 590, 653, 711, 715, 716, 717, 718, 719, 727, 741, 746], "feel": [0, 1, 52, 53, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 684, 685, 687, 688, 690, 691, 692, 693, 706, 712, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742], "free": [0, 1, 52, 53, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 684, 685, 687, 688, 690, 691, 692, 693, 706, 712, 714, 715, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 750, 759, 761], "open": [0, 1, 2, 13, 21, 44, 75, 529, 543, 637, 639, 706, 708, 709, 710, 711, 716, 717, 722, 725, 728, 736, 737, 741, 750, 756, 757, 758, 760, 761], "issu": [0, 687, 710, 711, 714, 716, 719, 721, 724, 725, 726, 727, 729, 736, 738, 739, 741, 743, 747, 751], "minim": [0, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 77, 83, 85, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 102, 106, 107, 108, 121, 125, 126, 133, 150, 167, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 262, 263, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 301, 319, 325, 326, 327, 328, 330, 331, 332, 334, 338, 339, 340, 343, 344, 345, 349, 351, 352, 353, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 440, 441, 443, 444, 447, 448, 449, 450, 451, 452, 455, 456, 459, 461, 463, 464, 465, 467, 468, 469, 471, 472, 474, 479, 480, 493, 494, 495, 496, 498, 500, 501, 513, 515, 516, 519, 521, 522, 523, 524, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 575, 576, 581, 582, 583, 585, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 728, 735, 737, 741, 743, 756, 764], "resnet50": 0, "hug": 0, "face": [0, 716, 719, 730, 734, 741, 743, 758, 764], "classifi": [0, 2, 706], "breed": 0, "cat": [0, 2, 737, 741, 743, 748], "transform": [0, 2, 12, 16, 35, 39, 307, 308, 328, 329, 334, 335, 338, 339, 340, 350, 362, 536, 560, 673, 676, 688, 706, 733, 738, 748, 750, 753, 756, 758, 759, 760], "autoimageprocessor": [0, 2], "resnetforimageclassif": [0, 2], "dataset": [0, 2, 29, 706, 746, 749], "load_dataset": [0, 2], "download": [0, 2, 716, 738], "imag": [0, 2, 11, 12, 16, 34, 35, 39, 52, 173, 174, 175, 176, 179, 182, 191, 194, 196, 198, 207, 208, 209, 214, 216, 229, 236, 237, 239, 240, 244, 307, 325, 326, 342, 343, 344, 346, 448, 532, 534, 536, 549, 550, 551, 552, 553, 556, 557, 558, 688, 706, 712, 716, 741, 743, 744, 746, 748, 750, 752, 758], "huggingfac": [0, 2], "test": [0, 2, 11, 13, 26, 34, 36, 49, 74, 124, 128, 207, 208, 209, 210, 233, 307, 330, 331, 332, 472, 528, 530, 532, 534, 548, 665, 666, 668, 671, 674, 706, 710, 714, 715, 718, 722, 725, 727, 729, 730, 733, 736, 739, 751, 752, 758], "image_processor": [0, 2], "from_pretrain": [0, 2], "microsoft": [0, 2, 709, 758, 763, 765], "resnet": [0, 2], "50": [0, 2, 12, 25, 34, 35, 36, 192, 232, 292, 304, 307, 308, 335, 354, 360, 450, 456, 463, 464, 480, 493, 532, 534, 537, 541, 544, 547, 573, 580, 617, 619, 645, 657, 673, 676, 734, 745], "preprocess": 0, "return_tensor": [0, 2], "pt": 0, "normal": [0, 4, 12, 20, 21, 35, 43, 44, 294, 304, 307, 313, 319, 328, 329, 334, 335, 338, 339, 340, 350, 407, 408, 409, 410, 411, 412, 427, 430, 539, 542, 543, 598, 608, 635, 636, 638, 687, 688, 691, 706, 715, 735, 736, 741, 746, 756], "feed": [0, 166, 531, 758, 759], "itself": [0, 4, 11, 227, 438, 502, 532, 534, 541, 628, 708, 716, 717, 719, 722, 723, 724, 725, 729, 730, 735, 736, 747, 750, 751, 757, 758, 759, 764], "without": [0, 23, 29, 488, 502, 534, 539, 541, 545, 604, 617, 647, 648, 649, 650, 673, 676, 700, 717, 720, 721, 723, 724, 725, 726, 727, 729, 731, 732, 736, 738, 739, 741, 745, 746, 747, 750, 751, 755, 758, 759, 760, 764], "pytorch": [0, 2, 236, 532, 692, 706, 709, 710, 714, 715, 720, 725, 726, 729, 731, 732, 735, 736, 737, 741, 743, 748, 751, 753, 759, 761, 762, 764, 765], "no_grad": 0, "logit": [0, 12, 18, 35, 41, 299, 314, 413, 416, 538, 594, 596, 684, 706], "With": [0, 6, 8, 9, 11, 12, 13, 14, 16, 17, 19, 22, 25, 31, 32, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 76, 77, 83, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 101, 102, 105, 106, 107, 108, 110, 116, 117, 118, 121, 128, 133, 134, 135, 136, 137, 147, 150, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 198, 199, 200, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 252, 253, 255, 256, 257, 258, 260, 275, 277, 283, 286, 287, 288, 290, 291, 294, 299, 301, 304, 307, 308, 310, 319, 328, 330, 331, 338, 352, 353, 354, 356, 357, 365, 383, 384, 385, 387, 390, 392, 393, 399, 402, 404, 418, 427, 428, 429, 430, 432, 433, 434, 436, 437, 441, 442, 443, 444, 447, 448, 449, 450, 451, 455, 456, 459, 461, 463, 464, 465, 479, 480, 493, 494, 496, 498, 500, 501, 513, 514, 515, 516, 517, 519, 520, 521, 523, 524, 525, 526, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 558, 559, 560, 563, 564, 565, 566, 567, 568, 570, 571, 573, 575, 576, 577, 578, 579, 583, 585, 586, 587, 589, 590, 594, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 619, 622, 623, 624, 625, 627, 628, 633, 634, 635, 636, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 709, 710, 716, 727, 736, 738, 741, 743, 758, 761], "compiled_graph": 0, "our": [0, 27, 50, 52, 53, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 675, 684, 685, 687, 688, 690, 691, 692, 693, 706, 708, 709, 711, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 727, 729, 730, 733, 736, 737, 738, 739, 741, 742, 743, 745, 746, 747, 748, 751, 763, 764], "predicted_label": 0, "argmax": [0, 22, 45, 544, 706, 736], "item": [0, 7, 13, 27, 29, 31, 34, 35, 36, 88, 112, 149, 203, 219, 227, 278, 280, 293, 445, 455, 456, 460, 493, 494, 529, 530, 531, 534, 541, 548, 621, 622, 623, 624, 628, 633, 634, 667, 689, 690, 706, 715, 723, 725, 743, 745, 746, 748], "config": [0, 29, 541, 629, 706, 712, 716, 719, 722, 724, 730, 737, 746, 759], "id2label": 0, "us": [1, 4, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 21, 22, 25, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 42, 44, 45, 50, 53, 59, 92, 95, 105, 117, 119, 120, 131, 132, 152, 153, 155, 160, 164, 165, 166, 167, 169, 172, 178, 186, 214, 215, 217, 218, 220, 221, 222, 224, 225, 227, 236, 240, 245, 257, 259, 260, 262, 263, 267, 284, 287, 288, 291, 301, 304, 307, 308, 310, 313, 314, 315, 317, 319, 325, 326, 327, 329, 330, 331, 332, 333, 335, 340, 342, 343, 344, 345, 348, 350, 354, 356, 358, 362, 364, 366, 367, 368, 369, 370, 383, 387, 391, 393, 407, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 427, 434, 436, 453, 454, 463, 464, 475, 484, 485, 487, 493, 494, 505, 506, 508, 515, 516, 521, 522, 527, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 543, 545, 547, 560, 562, 563, 568, 570, 578, 586, 592, 594, 603, 604, 605, 609, 613, 614, 615, 616, 618, 619, 625, 626, 627, 629, 636, 637, 638, 639, 641, 642, 643, 644, 647, 649, 657, 671, 673, 674, 675, 676, 680, 685, 686, 687, 688, 689, 690, 691, 692, 697, 700, 704, 710, 711, 712, 714, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 750, 751, 753, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765], "compil": [1, 2, 244, 532, 670, 680, 689, 690, 692, 706, 723, 736, 739, 741, 742, 744, 751, 752, 753, 754, 757, 758, 759, 762, 765], "grant": [1, 706], "pilot": [1, 706, 714], "access": [1, 2, 29, 706, 715, 716, 717, 724, 725, 730, 735, 736, 758, 760, 762], "user": [1, 227, 244, 310, 393, 532, 686, 688, 689, 690, 700, 706, 708, 709, 712, 716, 717, 718, 720, 721, 723, 724, 725, 726, 729, 733, 734, 735, 736, 738, 740, 741, 742, 743, 751, 752, 756, 758, 764, 765], "join": [1, 19, 29, 35, 42, 378, 539, 598, 608, 706], "waitlist": [1, 706], "want": [1, 2, 12, 27, 35, 50, 193, 226, 310, 381, 532, 686, 690, 706, 709, 711, 713, 715, 716, 717, 722, 724, 729, 730, 732, 733, 734, 735, 738, 741, 746, 747, 748, 751, 752], "get": [1, 2, 10, 17, 29, 33, 40, 52, 116, 117, 118, 121, 149, 150, 151, 154, 160, 165, 168, 172, 439, 457, 478, 495, 530, 531, 534, 537, 541, 592, 618, 686, 687, 688, 700, 706, 710, 711, 714, 715, 716, 718, 719, 724, 725, 726, 732, 733, 734, 735, 736, 737, 738, 743, 744, 745, 746, 747, 753, 758, 764], "one": [1, 2, 4, 8, 12, 13, 16, 17, 19, 22, 23, 25, 29, 31, 34, 35, 36, 37, 39, 40, 42, 43, 45, 46, 47, 48, 75, 83, 93, 95, 96, 97, 106, 108, 166, 187, 193, 200, 201, 218, 224, 225, 226, 245, 251, 257, 260, 261, 273, 277, 282, 283, 286, 287, 288, 290, 291, 297, 299, 301, 304, 305, 307, 308, 310, 313, 314, 319, 328, 330, 334, 335, 338, 339, 342, 351, 352, 359, 366, 374, 375, 376, 383, 384, 385, 390, 392, 397, 400, 407, 408, 409, 413, 418, 428, 429, 432, 433, 434, 436, 437, 475, 479, 480, 482, 498, 500, 501, 513, 515, 516, 519, 521, 523, 524, 529, 530, 531, 532, 534, 535, 536, 537, 539, 542, 544, 545, 547, 550, 551, 552, 553, 554, 555, 558, 572, 575, 576, 580, 582, 591, 592, 600, 601, 602, 605, 607, 611, 635, 642, 645, 647, 648, 649, 650, 655, 657, 673, 675, 691, 694, 697, 703, 706, 709, 710, 715, 716, 717, 719, 720, 721, 722, 723, 725, 726, 727, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 745, 746, 748, 751, 758, 759, 761, 764], "directori": [1, 491, 512, 531, 534, 712, 713, 715, 716, 717, 722, 724, 736, 738], "keep": [1, 2, 4, 12, 19, 29, 35, 42, 308, 370, 539, 611, 714, 715, 716, 717, 719, 721, 722, 723, 724, 729, 735, 736, 738, 739, 741, 746, 748, 752], "locat": [1, 95, 319, 428, 529, 543, 546, 636, 653, 715, 717, 721, 722, 726, 736, 737, 738, 739, 756], "ivy_root": 1, "environ": [1, 706, 711, 712, 717, 750, 752, 758, 760], "path": [1, 670, 680, 696, 716, 722, 735, 736, 737, 758], "either": [1, 2, 11, 12, 13, 16, 25, 29, 34, 35, 36, 39, 40, 61, 64, 72, 87, 88, 173, 174, 175, 176, 181, 191, 193, 194, 196, 198, 200, 207, 208, 214, 215, 216, 217, 218, 226, 235, 237, 238, 240, 243, 244, 274, 294, 304, 307, 319, 328, 338, 348, 349, 428, 429, 447, 467, 475, 476, 483, 502, 526, 528, 529, 532, 534, 536, 537, 540, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 575, 580, 583, 587, 613, 614, 615, 655, 656, 661, 663, 675, 686, 688, 689, 690, 697, 715, 716, 717, 721, 723, 725, 726, 727, 728, 729, 730, 732, 735, 736, 737, 738, 741, 743, 746, 751, 758], "manual": [1, 541, 616, 626, 627, 715, 716, 717, 725, 730, 738, 747], "automat": [1, 710, 715, 716, 717, 718, 721, 722, 724, 725, 726, 730, 732, 735, 738, 741, 742, 744, 747, 748, 753, 758, 761, 765], "past": [1, 717, 719, 737, 738, 758], "content": [1, 12, 29, 35, 319, 434, 715, 717, 722, 726, 735, 743, 746], "pem": 1, "file": [1, 13, 29, 491, 512, 534, 690, 715, 716, 717, 719, 720, 721, 722, 723, 724, 726, 728, 729, 730, 732, 736, 737, 738, 739, 743, 746, 754, 757, 758, 759], "refer": [1, 12, 19, 25, 26, 35, 37, 42, 48, 49, 86, 100, 198, 216, 258, 268, 293, 301, 304, 307, 308, 310, 335, 340, 350, 353, 370, 383, 515, 516, 529, 532, 535, 537, 539, 547, 548, 565, 567, 591, 604, 662, 664, 665, 666, 688, 706, 714, 715, 716, 717, 719, 720, 722, 724, 725, 731, 732, 733, 734, 735, 736, 737, 738, 751, 753, 758], "equival": [1, 2, 4, 17, 40, 75, 187, 200, 221, 222, 235, 236, 310, 404, 529, 532, 537, 578, 581, 584, 592, 697, 735, 736, 741, 746, 748], "echo": [1, 716, 724], "n": [1, 2, 4, 8, 11, 12, 16, 17, 19, 21, 22, 25, 26, 34, 35, 39, 40, 42, 44, 45, 48, 49, 52, 93, 98, 99, 100, 173, 243, 245, 268, 269, 278, 301, 304, 307, 308, 310, 313, 314, 317, 319, 321, 322, 323, 328, 329, 334, 335, 338, 339, 340, 348, 349, 350, 356, 357, 364, 366, 370, 376, 379, 382, 386, 388, 399, 405, 407, 408, 409, 413, 414, 415, 416, 417, 420, 427, 436, 529, 532, 536, 537, 539, 541, 543, 544, 547, 548, 549, 550, 551, 552, 554, 556, 558, 565, 568, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 585, 586, 589, 590, 591, 592, 599, 600, 602, 608, 612, 624, 637, 638, 639, 645, 659, 661, 662, 663, 664, 665, 666, 688, 691, 700, 706, 718, 722, 724, 738], "api_kei": 1, "bug": [1, 200, 532, 706, 715, 717, 722, 730, 736, 738], "pleas": [1, 52, 53, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 684, 685, 687, 688, 690, 691, 692, 693, 706, 708, 709, 710, 712, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 743, 744, 745, 746, 747, 748, 750], "rais": [1, 8, 12, 13, 19, 21, 23, 26, 29, 31, 35, 36, 42, 44, 46, 49, 77, 107, 196, 231, 281, 304, 307, 310, 314, 319, 340, 350, 374, 375, 376, 379, 381, 383, 384, 385, 388, 392, 398, 399, 405, 414, 433, 434, 441, 458, 465, 484, 494, 496, 502, 505, 530, 532, 534, 537, 539, 543, 544, 545, 547, 548, 575, 577, 591, 600, 601, 602, 604, 606, 607, 608, 609, 611, 637, 638, 639, 645, 650, 658, 660, 665, 666, 668, 675, 689, 690, 692, 706, 709, 717, 719, 721, 725, 726, 729, 735, 736, 739, 740, 743, 745], "github": [1, 706, 708, 712, 713, 714, 717, 719, 724, 725, 727, 728, 730, 738, 752], "add": [1, 11, 12, 20, 27, 29, 34, 35, 43, 50, 52, 53, 297, 305, 307, 349, 475, 502, 532, 534, 537, 542, 547, 589, 635, 663, 670, 680, 688, 691, 706, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 730, 731, 732, 733, 735, 736, 738, 739, 741, 743, 745, 751, 754, 756, 758], "label": [1, 18, 41, 309, 371, 538, 594, 595, 596, 706, 715, 719, 736, 742, 743, 744, 748, 758], "accordingli": [1, 17, 22, 23, 25, 26, 40, 45, 48, 49, 93, 193, 198, 200, 216, 226, 240, 529, 532, 537, 544, 545, 547, 548, 592, 643, 647, 648, 649, 650, 658, 659, 660, 661, 662, 663, 664, 665, 666, 736, 743], "member": [1, 709, 715, 717, 736], "team": [1, 706, 711, 715, 716, 717, 736, 760], "back": [1, 12, 19, 35, 42, 310, 383, 481, 503, 534, 536, 539, 562, 604, 687, 689, 690, 692, 709, 716, 720, 725, 726, 729, 733, 734, 740, 742, 751, 756, 760], "asap": 1, "haven": [1, 758], "found": [1, 17, 19, 23, 29, 35, 40, 42, 46, 53, 154, 319, 378, 428, 531, 541, 568, 575, 608, 627, 647, 686, 712, 715, 716, 717, 720, 721, 722, 723, 725, 726, 728, 730, 733, 735, 736, 760], "ask": [1, 706, 710, 715, 716, 727, 743, 745, 751], "suggest": [1, 715, 716, 717, 722, 725, 730, 734, 736, 738, 739, 740], "someth": [1, 706, 717, 721, 730, 739, 746, 747, 751, 764], "help": [1, 438, 534, 547, 663, 687, 706, 711, 712, 713, 715, 716, 720, 721, 722, 723, 724, 725, 727, 730, 732, 733, 735, 736, 738, 739, 745, 746, 747, 749, 753, 754, 758, 760, 764], "post": [1, 20, 43, 542, 635, 716, 734, 748], "forum": [1, 722], "discord": [1, 52, 53, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 684, 685, 687, 688, 690, 691, 692, 693, 706, 708, 709, 710, 712, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 743, 744, 745, 746, 747, 748, 750], "server": [1, 706, 716, 717, 722, 758], "convert": [2, 4, 7, 8, 11, 29, 30, 31, 34, 76, 77, 94, 103, 104, 146, 147, 148, 149, 160, 168, 172, 192, 232, 310, 315, 374, 375, 376, 418, 481, 497, 499, 500, 501, 503, 529, 530, 531, 532, 534, 537, 541, 593, 617, 628, 629, 670, 697, 700, 706, 710, 715, 720, 721, 733, 734, 736, 738, 740, 743, 751, 753, 756, 757, 764], "written": [2, 13, 706, 708, 716, 719, 720, 728, 730, 731, 735, 736, 739, 743, 745, 748, 751, 756, 758, 762, 764, 765], "choic": [2, 12, 25, 35, 48, 308, 368, 547, 662, 664, 706, 710, 716, 724, 735, 736, 746, 758, 765], "preserv": [2, 12, 13, 14, 29, 35, 36, 37, 53, 307, 308, 310, 319, 342, 367, 374, 375, 376, 384, 385, 434, 465, 524, 534, 535, 539, 601, 673, 738, 748, 751], "logic": [2, 26, 49, 157, 193, 194, 220, 221, 222, 226, 229, 531, 532, 548, 665, 666, 715, 720, 724, 725, 726, 729, 732, 733, 734, 735, 736, 738, 741, 745], "target": [2, 148, 309, 371, 531, 688, 690, 696, 706, 716, 718, 721, 730, 737, 742, 746, 747, 748, 754, 756, 757, 758, 761, 763, 764], "optim": [2, 14, 37, 257, 301, 309, 371, 439, 523, 534, 535, 540, 613, 614, 615, 687, 706, 710, 725, 735, 741, 744, 746, 748, 750, 756, 757, 758, 759, 760, 761, 762, 765], "tool": [2, 706, 707, 710, 716, 717, 727, 730, 744, 748, 750, 751, 756, 757, 758, 759, 761, 764, 765], "make": [2, 697, 706, 709, 710, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 743, 745, 746, 748, 752, 756, 758, 759, 760, 761, 764, 765], "ml": [2, 706, 707, 709, 710, 711, 714, 736, 742, 743, 744, 746, 747, 748, 750, 754, 755, 756, 757, 758, 761, 763, 765], "relat": [2, 200, 532, 706, 712, 714, 715, 716, 717, 729, 736, 738, 739, 740, 741, 750, 761], "project": [2, 536, 562, 688, 706, 708, 709, 710, 713, 715, 716, 717, 720, 721, 722, 738, 747, 750, 751, 754, 756, 758, 761, 765], "independ": [2, 12, 21, 35, 44, 176, 193, 226, 236, 314, 413, 532, 537, 543, 565, 584, 636, 706, 719, 725, 727, 733, 743, 748, 756], "research": [2, 706, 708, 750, 758, 765], "deploi": [2, 706, 724, 753, 756, 757, 758, 760, 764], "system": [2, 537, 584, 706, 716, 717, 721, 724, 725, 751, 756, 758, 761, 763, 765], "build": [2, 23, 29, 545, 647, 648, 649, 650, 688, 689, 690, 706, 709, 711, 712, 716, 718, 724, 725, 732, 734, 742, 744, 747, 748, 751, 753, 756, 758, 760, 763, 764, 765], "block": [2, 308, 360, 706, 717, 723, 725, 729, 732, 738, 742, 744, 748, 751, 753, 763, 765], "neural": [2, 536, 684, 688, 706, 750, 754, 756, 757, 758, 762, 764, 765], "network": [2, 536, 560, 684, 686, 687, 688, 689, 690, 706, 709, 723, 732, 743, 747, 750, 754, 756, 757, 758, 762, 764, 765], "layer": [2, 12, 20, 29, 35, 43, 542, 561, 562, 635, 685, 686, 687, 689, 690, 691, 692, 693, 706, 708, 728, 736, 739, 741, 743, 744, 747, 756, 758, 762, 765], "activ": [2, 12, 13, 16, 27, 35, 39, 50, 59, 60, 61, 62, 63, 64, 65, 66, 67, 248, 252, 253, 255, 256, 496, 536, 562, 563, 687, 706, 712, 716, 717, 725, 730, 739, 740, 747, 758, 761], "train": [2, 12, 14, 16, 35, 37, 39, 307, 313, 330, 331, 332, 407, 409, 515, 516, 521, 535, 536, 559, 562, 563, 687, 688, 691, 706, 710, 723, 726, 732, 746, 747, 748, 749, 750, 751, 753, 756, 757, 762, 764, 765], "pipelin": [2, 706, 708, 713, 718, 719, 720, 737, 739, 748, 753, 758, 759, 764], "publish": [2, 706, 710, 751], "ex": [2, 673, 674, 675, 676, 680, 724], "haiku": [2, 685, 706, 710, 748, 758], "latest": [2, 11, 34, 108, 196, 206, 207, 222, 319, 427, 530, 532, 537, 539, 547, 583, 612, 662, 688, 706, 715, 716, 717, 719, 721, 724, 728, 739, 751, 752, 763], "integr": [2, 9, 11, 12, 32, 34, 35, 105, 245, 290, 304, 319, 430, 530, 532, 706, 714, 716, 718, 733, 756, 758, 760, 761, 762], "kornia": [2, 706], "advantag": [2, 706, 716, 717, 735, 736, 752, 758], "featur": [2, 12, 35, 307, 321, 322, 323, 330, 331, 332, 687, 688, 706, 715, 716, 717, 720, 721, 724, 731, 739, 741, 746, 751, 758, 759, 760, 764], "tensorflow": [2, 11, 12, 13, 34, 35, 100, 147, 177, 268, 301, 308, 356, 496, 529, 531, 534, 668, 680, 697, 706, 709, 710, 714, 715, 716, 717, 719, 721, 724, 725, 726, 731, 735, 736, 737, 738, 739, 741, 743, 748, 751, 753, 756, 759, 761, 762, 764, 765], "deploy": [2, 716, 757, 760, 761, 764, 765], "definit": [2, 11, 17, 34, 40, 245, 532, 537, 564, 706, 717, 720, 725, 732, 745], "job": [2, 706, 722, 724], "graph": [2, 23, 545, 647, 648, 649, 650, 680, 689, 690, 706, 710, 723, 732, 736, 741, 744, 751, 753, 754, 758, 761], "leverag": [2, 706, 716, 735, 756, 758], "frontend": [2, 482, 534, 670, 671, 674, 677, 680, 706, 714, 717, 718, 724, 725, 729, 734, 738, 741, 742, 744, 753, 758], "link": [2, 706, 712, 715, 716, 717, 722, 724, 725, 730, 736, 754, 756], "swap": [2, 19, 42, 539, 609, 697], "replac": [2, 11, 13, 19, 21, 29, 34, 36, 42, 44, 86, 227, 258, 301, 479, 480, 483, 529, 532, 534, 539, 543, 597, 636, 673, 709, 717, 722, 723, 725, 726, 733, 736, 738, 745, 748, 751, 765], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 673, 675, 677, 678, 679, 680, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 708, 709, 710, 711, 712, 715, 716, 717, 719, 720, 722, 723, 724, 736, 757, 758, 759, 760, 761], "debug_mod": 2, "params_v": [2, 706], "must": [2, 4, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 75, 76, 77, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 105, 106, 107, 166, 167, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 251, 252, 253, 255, 256, 257, 258, 260, 269, 270, 271, 274, 275, 276, 278, 281, 283, 285, 287, 288, 289, 290, 294, 296, 299, 301, 304, 307, 308, 309, 310, 313, 314, 317, 319, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 342, 343, 344, 345, 348, 350, 351, 352, 353, 355, 359, 360, 363, 364, 365, 366, 369, 371, 374, 375, 376, 378, 379, 381, 383, 384, 385, 386, 388, 392, 394, 395, 396, 397, 399, 401, 402, 403, 405, 410, 411, 412, 413, 414, 416, 417, 420, 427, 428, 429, 430, 436, 443, 444, 448, 449, 450, 455, 456, 458, 465, 479, 480, 514, 515, 516, 519, 521, 522, 523, 524, 526, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 687, 688, 692, 694, 708, 710, 712, 714, 715, 716, 717, 719, 720, 724, 725, 726, 727, 728, 729, 731, 732, 733, 735, 736, 738, 739, 740, 741, 743, 747, 748, 759, 765], "unless": [2, 8, 12, 17, 31, 35, 95, 226, 273, 286, 291, 304, 529, 532, 537, 578, 721, 726, 735, 751], "explicitli": [2, 537, 570, 571, 587, 670, 688, 689, 690, 719, 720, 721, 723, 725, 728, 729, 732, 733, 734, 735, 737, 738, 743, 751, 758], "nn": [2, 93, 529, 706, 732, 737, 741, 748, 759], "kera": [2, 685, 706, 710, 764], "hk": [2, 706, 748], "trainabl": [2, 685, 689, 690, 693, 706, 728, 744, 746, 747], "transpile_kwarg": 2, "It": [2, 4, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 75, 76, 77, 83, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 99, 101, 102, 105, 107, 167, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 257, 258, 269, 274, 275, 283, 285, 287, 288, 289, 290, 294, 299, 301, 304, 307, 308, 309, 310, 313, 314, 319, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 339, 340, 342, 343, 344, 345, 348, 351, 352, 353, 359, 360, 363, 364, 365, 366, 371, 378, 381, 386, 394, 395, 396, 397, 399, 403, 407, 410, 411, 412, 413, 414, 416, 417, 427, 428, 429, 430, 443, 444, 448, 449, 450, 455, 456, 465, 479, 480, 481, 515, 516, 519, 521, 522, 523, 524, 526, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 575, 576, 578, 579, 580, 581, 584, 586, 587, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 612, 615, 616, 635, 636, 637, 638, 639, 641, 642, 643, 644, 646, 650, 651, 654, 655, 656, 659, 661, 662, 664, 665, 666, 687, 688, 706, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 733, 735, 736, 737, 738, 739, 740, 741, 743, 745, 746, 747, 756, 758, 759, 761, 762, 763, 764, 765], "alia": [2, 527, 715, 736], "similar": [2, 235, 532, 536, 562, 688, 708, 715, 716, 723, 724, 725, 726, 729, 730, 732, 733, 734, 736, 737, 738, 739, 746, 751, 754, 755, 756, 757, 764], "instantli": [2, 706], "proper": [2, 706, 715, 736], "arrai": [2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 74, 75, 77, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 118, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 139, 149, 150, 154, 159, 161, 163, 166, 167, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 301, 304, 305, 307, 308, 309, 310, 313, 314, 315, 317, 319, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440, 441, 443, 444, 447, 448, 449, 450, 451, 452, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 474, 475, 477, 478, 479, 480, 481, 483, 489, 490, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 622, 623, 624, 625, 628, 629, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 675, 680, 687, 688, 693, 697, 700, 702, 706, 715, 716, 717, 718, 721, 722, 723, 725, 726, 727, 728, 729, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 748, 751, 753, 756, 757, 758, 760, 764, 765], "snippet": [2, 738], "test_fn": [2, 74, 528, 671, 706], "x1": [2, 9, 11, 12, 13, 17, 22, 32, 34, 35, 36, 40, 45, 47, 52, 53, 56, 106, 116, 132, 139, 159, 176, 181, 183, 185, 186, 187, 188, 193, 194, 200, 201, 202, 203, 204, 205, 211, 212, 213, 218, 219, 220, 222, 223, 224, 225, 226, 229, 231, 235, 242, 247, 258, 273, 276, 281, 282, 283, 285, 287, 292, 295, 301, 304, 310, 319, 387, 427, 437, 440, 530, 531, 532, 534, 537, 544, 546, 565, 572, 575, 580, 584, 587, 588, 591, 646, 653, 670, 694, 706, 719, 725, 727, 729, 731, 735, 736], "effici": [2, 17, 40, 308, 309, 362, 371, 537, 578, 706, 716, 717, 723, 732, 733, 735, 738, 743, 746, 751, 758, 760, 761], "ret": [2, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 74, 75, 76, 77, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 165, 166, 167, 168, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 317, 319, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 357, 360, 363, 365, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 479, 480, 483, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 622, 623, 624, 625, 626, 627, 628, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 673, 674, 675, 676, 685, 686, 690, 692, 697, 702, 706, 725, 726, 728, 729, 734, 735, 736, 737, 739, 743, 748], "entir": [2, 12, 25, 26, 29, 35, 36, 48, 49, 166, 196, 198, 238, 239, 307, 310, 319, 330, 331, 332, 393, 430, 461, 531, 532, 547, 548, 658, 659, 660, 661, 662, 663, 664, 665, 666, 688, 709, 710, 715, 716, 717, 719, 720, 723, 725, 727, 729, 735, 736, 737, 738, 741, 743, 746, 747, 748, 751, 758, 764, 765], "just": [2, 4, 12, 17, 25, 40, 100, 268, 301, 308, 366, 529, 537, 547, 578, 657, 680, 688, 706, 709, 710, 716, 717, 719, 721, 724, 725, 726, 727, 728, 732, 733, 735, 736, 737, 738, 743, 745, 746, 751, 758, 759, 764], "line": [2, 243, 532, 706, 710, 716, 719, 720, 721, 724, 726, 727, 729, 736, 738, 741, 744, 745, 746, 747, 749, 761], "request": [2, 12, 157, 314, 417, 531, 706, 710, 711, 715, 727, 730, 739, 741], "jnp": [2, 706, 725, 726, 729, 731, 735, 739, 743, 748], "pil": [2, 706], "jax_kornia": [2, 706], "url": [2, 706], "http": [2, 11, 34, 37, 100, 108, 196, 206, 207, 222, 268, 301, 319, 427, 515, 516, 529, 530, 532, 535, 537, 539, 547, 583, 612, 662, 706, 712, 713, 716, 719, 722, 724, 725, 728, 752], "cocodataset": [2, 706], "org": [2, 11, 34, 37, 100, 108, 196, 206, 207, 222, 268, 301, 319, 427, 515, 516, 529, 530, 532, 535, 537, 539, 547, 583, 612, 662, 706, 728], "train2017": [2, 706], "000000000034": [2, 706], "jpg": [2, 706], "raw_img": [2, 706], "stream": [2, 10, 33, 167, 531, 706, 762], "raw": [2, 29, 706, 728, 759], "format": [2, 10, 13, 25, 28, 29, 30, 33, 67, 116, 150, 307, 318, 348, 423, 448, 526, 530, 531, 534, 536, 547, 548, 549, 550, 552, 553, 554, 556, 557, 657, 667, 668, 706, 718, 724, 725, 726, 727, 728, 729, 736, 739, 743, 745, 746, 754, 756, 758, 759], "img": [2, 706, 746], "transpos": [2, 12, 16, 17, 29, 35, 39, 40, 52, 308, 351, 364, 366, 426, 536, 537, 549, 551, 553, 555, 556, 557, 575, 579, 581, 587, 675, 688, 706, 735, 745, 748], "expand_dim": [2, 19, 42, 536, 539, 558, 706, 736, 743, 746], "255": [2, 16, 35, 39, 187, 532, 558, 706], "version": [2, 4, 6, 12, 35, 59, 244, 277, 279, 304, 319, 432, 436, 514, 532, 534, 537, 570, 571, 670, 697, 706, 708, 709, 710, 716, 717, 722, 724, 725, 728, 735, 737, 743, 764, 765], "enhanc": [2, 706], "5": [2, 4, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 22, 23, 24, 25, 28, 31, 32, 33, 34, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 52, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 75, 76, 77, 88, 90, 91, 92, 93, 94, 95, 96, 97, 101, 102, 106, 107, 108, 112, 116, 118, 126, 128, 133, 150, 159, 164, 167, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 210, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 252, 253, 254, 256, 257, 258, 259, 260, 262, 263, 272, 275, 277, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 299, 301, 304, 305, 307, 308, 310, 315, 317, 319, 325, 326, 327, 328, 330, 331, 333, 334, 335, 338, 339, 343, 344, 345, 346, 348, 349, 350, 354, 355, 357, 358, 367, 370, 372, 374, 375, 376, 377, 378, 379, 380, 383, 384, 387, 388, 389, 392, 393, 398, 399, 400, 401, 402, 405, 406, 411, 412, 415, 417, 418, 420, 425, 427, 428, 429, 430, 431, 432, 434, 436, 441, 442, 443, 444, 447, 448, 449, 450, 452, 455, 456, 458, 461, 463, 464, 465, 479, 480, 483, 493, 494, 495, 496, 498, 502, 514, 515, 516, 518, 519, 520, 521, 523, 524, 525, 526, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 575, 576, 577, 579, 580, 581, 583, 585, 586, 587, 589, 590, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 619, 622, 623, 624, 625, 627, 628, 633, 634, 635, 636, 637, 638, 639, 641, 643, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 673, 674, 675, 676, 688, 700, 706, 715, 716, 717, 719, 721, 723, 724, 727, 729, 731, 734, 737, 738, 745, 746, 747], "last": [2, 8, 12, 16, 17, 18, 19, 22, 24, 25, 26, 29, 31, 35, 39, 40, 41, 42, 47, 48, 49, 52, 91, 92, 95, 149, 258, 278, 301, 304, 307, 309, 310, 317, 319, 335, 340, 350, 371, 383, 393, 395, 420, 428, 429, 529, 531, 536, 537, 538, 539, 544, 546, 547, 548, 561, 562, 565, 568, 580, 589, 591, 595, 596, 598, 601, 604, 605, 606, 608, 642, 643, 651, 653, 654, 655, 656, 665, 666, 688, 697, 706, 710, 717, 719, 721, 722, 725, 727, 735, 737, 738, 741, 743, 751, 758], "least": [2, 11, 12, 17, 34, 35, 193, 211, 226, 307, 310, 319, 334, 339, 374, 375, 376, 382, 384, 427, 532, 537, 544, 575, 645, 706, 717, 720, 724, 725, 726, 727, 732, 735, 738], "support": [2, 10, 12, 13, 17, 33, 35, 36, 40, 100, 119, 123, 145, 152, 167, 176, 193, 200, 221, 222, 226, 236, 251, 268, 284, 299, 301, 304, 307, 308, 342, 355, 441, 453, 462, 465, 466, 496, 529, 530, 531, 532, 534, 536, 537, 560, 569, 570, 571, 574, 576, 585, 592, 668, 674, 692, 697, 700, 708, 709, 710, 712, 715, 716, 717, 719, 720, 726, 727, 728, 731, 732, 734, 735, 737, 738, 739, 741, 742, 743, 745, 746, 748, 752, 753, 755, 757, 758, 761, 763, 764, 765], "timm": [2, 706], "pretrain": [2, 706], "mlp_encod": [2, 706], "create_model": [2, 706], "mixer_b16_224": [2, 706], "num_class": [2, 706, 748], "randn": [2, 706], "224": [2, 706], "encod": [2, 13, 18, 36, 41, 452, 534, 538, 594, 706, 709, 746], "__init__": [2, 3, 4, 5, 29, 52, 53, 54, 55, 671, 677, 678, 679, 684, 687, 688, 689, 690, 691, 692, 693, 696, 697, 700, 701, 704, 706, 715, 720, 721, 725, 729, 736, 739, 743, 745, 746, 747, 748], "self": [2, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 77, 83, 85, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 105, 106, 107, 108, 116, 118, 121, 124, 125, 126, 128, 130, 133, 150, 167, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 262, 263, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 319, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 342, 343, 344, 345, 349, 350, 351, 352, 353, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 440, 441, 443, 444, 447, 448, 449, 450, 451, 452, 455, 456, 459, 461, 463, 464, 465, 467, 468, 469, 471, 472, 474, 479, 480, 493, 494, 495, 496, 498, 500, 501, 513, 515, 516, 519, 521, 522, 523, 524, 536, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 692, 700, 706, 717, 720, 723, 729, 736, 737, 743, 745, 746, 747, 748], "1000": [2, 8, 31, 92, 529, 706, 746], "super": [2, 12, 35, 308, 356, 706, 729, 743, 746, 747, 748], "fc": [2, 706, 747], "linear": [2, 12, 13, 16, 28, 35, 36, 39, 59, 61, 63, 64, 67, 252, 253, 255, 256, 288, 299, 304, 307, 310, 319, 342, 393, 435, 436, 452, 475, 526, 534, 536, 541, 562, 584, 623, 673, 675, 676, 687, 688, 706, 723, 728, 732, 733, 735, 736, 738, 741, 743, 746, 747, 748, 756, 757, 758, 761], "output_s": [2, 12, 35, 307, 321, 322, 323, 688, 706], "with_bia": [2, 688, 706, 747], "__call__": [2, 670, 688, 689, 690, 706], "_forward_classifi": [2, 706], "standard": [2, 11, 17, 20, 21, 25, 34, 43, 44, 48, 75, 76, 77, 84, 85, 86, 87, 89, 90, 91, 93, 96, 97, 98, 99, 101, 102, 108, 118, 121, 133, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 196, 198, 199, 200, 204, 205, 206, 207, 208, 209, 213, 215, 216, 217, 218, 220, 221, 222, 223, 226, 228, 229, 230, 231, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 275, 304, 308, 319, 369, 427, 514, 529, 530, 532, 534, 537, 539, 542, 543, 544, 545, 546, 547, 548, 564, 565, 566, 567, 568, 570, 571, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 591, 592, 598, 600, 601, 602, 604, 605, 607, 608, 612, 635, 638, 642, 643, 645, 646, 647, 648, 649, 650, 651, 654, 658, 659, 660, 661, 662, 663, 664, 665, 666, 675, 687, 691, 700, 706, 707, 718, 719, 720, 723, 725, 728, 731, 735, 738, 739, 751, 754, 756, 757, 760, 761, 763], "rng_kei": [2, 706], "random": [2, 12, 16, 29, 35, 39, 266, 267, 301, 308, 358, 367, 370, 413, 414, 415, 416, 417, 536, 559, 636, 637, 638, 639, 640, 641, 673, 675, 687, 700, 706, 715, 726, 737, 738, 739, 748, 750, 758], "prngkei": [2, 706, 748], "42": [2, 6, 21, 28, 37, 44, 67, 187, 307, 328, 338, 515, 519, 526, 532, 535, 537, 542, 543, 547, 576, 580, 635, 636, 637, 638, 639, 640, 655, 657, 706, 743, 748], "uniform": [2, 12, 21, 35, 44, 319, 430, 543, 636, 637, 639, 687, 706, 747, 765], "kei": [2, 7, 12, 16, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 88, 90, 95, 97, 102, 106, 108, 121, 125, 126, 133, 167, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 258, 273, 275, 277, 279, 285, 286, 292, 294, 295, 296, 297, 317, 330, 331, 332, 378, 399, 402, 407, 409, 410, 411, 412, 414, 420, 427, 428, 429, 430, 437, 438, 440, 441, 443, 444, 445, 448, 449, 450, 452, 455, 456, 459, 461, 463, 464, 465, 467, 468, 471, 479, 480, 493, 494, 496, 498, 500, 501, 513, 519, 524, 534, 536, 540, 541, 550, 551, 552, 553, 559, 560, 562, 563, 564, 565, 570, 571, 572, 573, 575, 576, 578, 580, 582, 583, 589, 594, 595, 596, 597, 601, 604, 605, 606, 607, 608, 611, 612, 613, 614, 619, 625, 629, 636, 637, 638, 639, 641, 644, 647, 648, 649, 650, 651, 655, 656, 659, 661, 662, 664, 665, 666, 673, 674, 679, 685, 686, 688, 692, 706, 722, 723, 724, 732, 735, 736, 737, 738, 746, 752, 758, 761, 765], "dtype": [2, 8, 9, 12, 13, 16, 17, 21, 22, 25, 31, 32, 34, 35, 36, 39, 40, 44, 45, 48, 52, 54, 55, 56, 75, 76, 77, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 161, 227, 257, 258, 259, 260, 261, 262, 263, 266, 267, 272, 275, 277, 291, 301, 304, 307, 314, 319, 328, 338, 350, 413, 414, 415, 416, 417, 427, 428, 429, 430, 433, 436, 452, 453, 454, 456, 465, 474, 500, 529, 530, 531, 534, 536, 537, 540, 541, 543, 544, 546, 547, 548, 552, 559, 576, 592, 615, 616, 637, 638, 639, 642, 643, 644, 653, 654, 655, 656, 661, 663, 665, 666, 668, 670, 673, 675, 676, 687, 688, 690, 691, 693, 694, 706, 719, 721, 725, 726, 727, 729, 732, 733, 735, 736, 737, 738, 739, 743, 745], "float32": [2, 8, 9, 13, 16, 31, 32, 36, 39, 48, 92, 95, 97, 102, 103, 104, 108, 112, 113, 116, 117, 118, 119, 122, 125, 126, 128, 133, 136, 142, 206, 233, 272, 281, 301, 304, 307, 319, 328, 338, 350, 430, 465, 500, 529, 530, 532, 534, 536, 537, 540, 552, 554, 555, 558, 583, 585, 586, 592, 615, 670, 673, 674, 706, 725, 727, 737, 738, 739], "forward_classifi": [2, 706], "param": [2, 29, 36, 53, 438, 455, 456, 534, 694, 706, 748], "init": [2, 12, 35, 308, 358, 367, 370, 687, 706, 719, 748], "rng": [2, 706, 748], "mention": [2, 709, 715, 716, 717, 720, 721, 727, 731, 732, 735, 736, 738, 741, 758], "abov": [2, 8, 11, 12, 17, 21, 28, 34, 35, 40, 44, 67, 75, 76, 77, 84, 85, 86, 87, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 108, 124, 128, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 196, 198, 199, 200, 204, 205, 206, 207, 208, 209, 210, 213, 215, 216, 217, 218, 220, 221, 222, 223, 226, 228, 229, 230, 231, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 256, 258, 268, 269, 275, 278, 299, 301, 304, 307, 308, 310, 319, 325, 326, 327, 328, 330, 331, 332, 338, 340, 343, 344, 345, 346, 350, 355, 356, 393, 427, 430, 455, 459, 461, 463, 465, 501, 524, 526, 529, 530, 532, 534, 535, 536, 537, 539, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 591, 592, 593, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 635, 637, 642, 643, 645, 646, 647, 648, 649, 650, 651, 654, 658, 659, 660, 661, 662, 663, 664, 665, 666, 706, 715, 716, 717, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 734, 735, 736, 737, 738, 741, 743, 745, 746, 747, 748, 758, 763], "exactli": [2, 243, 532, 708, 710, 723, 724, 725, 726, 727, 729, 738, 741], "wai": [2, 4, 706, 708, 709, 713, 714, 716, 719, 720, 721, 722, 724, 725, 726, 735, 736, 737, 738, 741, 745, 746, 747, 748, 751, 752, 760, 764, 765], "transpiled_func": 2, "unified_func": 2, "fashion": [2, 675, 738], "rough": 2, "edg": [2, 12, 19, 35, 42, 307, 310, 319, 342, 393, 430, 539, 597, 599, 612, 676, 719, 738, 758, 760, 764], "These": [2, 12, 35, 308, 310, 319, 355, 392, 427, 536, 537, 562, 569, 570, 706, 708, 709, 710, 712, 714, 715, 716, 717, 719, 723, 725, 727, 728, 731, 732, 735, 736, 738, 743, 744, 746, 747, 748, 751, 753, 758, 762, 764, 765], "subclass": [2, 733, 736, 741], "within": [2, 7, 12, 35, 75, 273, 286, 304, 307, 343, 344, 345, 374, 375, 376, 529, 543, 639, 690, 706, 715, 717, 720, 724, 725, 736, 737, 738, 747, 751, 754, 755, 759], "sequenti": [2, 706, 722, 723, 747], "more": [2, 12, 17, 19, 23, 35, 40, 42, 46, 59, 61, 64, 75, 106, 198, 200, 216, 231, 297, 305, 308, 309, 310, 351, 352, 362, 365, 371, 374, 375, 376, 378, 399, 526, 529, 530, 532, 537, 539, 545, 568, 574, 575, 578, 581, 583, 585, 592, 601, 608, 647, 648, 649, 650, 675, 706, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 756, 757, 758, 759, 760, 761, 764, 765], "complex": [2, 6, 11, 12, 17, 28, 32, 34, 35, 40, 59, 61, 64, 96, 97, 111, 125, 134, 140, 173, 174, 175, 176, 177, 178, 179, 182, 190, 191, 193, 194, 196, 198, 206, 207, 208, 209, 210, 214, 215, 216, 217, 226, 228, 231, 233, 236, 237, 238, 239, 240, 243, 244, 275, 304, 307, 308, 329, 340, 350, 351, 355, 356, 357, 364, 366, 493, 494, 526, 529, 530, 532, 534, 537, 544, 547, 569, 570, 571, 576, 583, 585, 587, 589, 592, 645, 661, 663, 674, 684, 712, 715, 722, 725, 727, 736, 738, 739, 741, 746, 747, 748, 751, 753, 754, 756, 758, 760, 764, 765], "should": [2, 4, 6, 8, 11, 12, 13, 14, 16, 17, 19, 21, 22, 23, 25, 28, 29, 31, 34, 35, 36, 37, 39, 40, 42, 44, 45, 47, 48, 50, 52, 53, 62, 66, 74, 93, 95, 98, 99, 107, 132, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 196, 198, 199, 200, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 226, 228, 229, 230, 231, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 251, 258, 269, 283, 287, 288, 289, 290, 294, 298, 299, 301, 304, 306, 307, 308, 310, 314, 319, 330, 331, 332, 334, 339, 358, 367, 370, 392, 393, 413, 414, 427, 428, 429, 442, 465, 514, 516, 519, 521, 522, 523, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 556, 557, 562, 563, 564, 565, 566, 568, 570, 571, 572, 573, 575, 576, 577, 578, 580, 581, 582, 583, 584, 585, 587, 589, 591, 592, 604, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 655, 656, 657, 658, 659, 660, 661, 663, 664, 670, 671, 675, 684, 685, 686, 687, 688, 690, 691, 692, 693, 700, 707, 709, 712, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 745, 746, 747, 754, 755, 758, 760, 765], "util": [2, 12, 35, 151, 308, 368, 531, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 712, 716, 722, 726, 729, 732, 735, 738, 739, 743, 756, 764, 765], "requir": [2, 11, 12, 29, 34, 35, 227, 240, 244, 308, 310, 355, 356, 393, 532, 537, 539, 569, 570, 571, 608, 673, 680, 685, 712, 713, 715, 716, 720, 722, 724, 725, 726, 727, 728, 729, 730, 731, 733, 736, 737, 738, 739, 741, 743, 745, 751, 758, 764], "state": [2, 16, 39, 140, 141, 142, 143, 144, 226, 503, 507, 509, 510, 530, 532, 534, 536, 561, 671, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 706, 709, 716, 722, 725, 726, 728, 729, 730, 731, 736, 738, 742, 743, 744, 746, 750, 764, 765], "mean": [2, 4, 12, 13, 16, 18, 19, 21, 25, 27, 29, 31, 35, 36, 39, 41, 42, 44, 48, 50, 88, 166, 277, 304, 307, 308, 309, 310, 313, 314, 319, 335, 340, 353, 362, 371, 378, 383, 393, 407, 409, 414, 433, 434, 449, 517, 518, 520, 525, 529, 531, 534, 535, 536, 537, 538, 539, 540, 541, 543, 547, 551, 553, 554, 555, 558, 559, 567, 594, 604, 613, 614, 615, 622, 637, 638, 673, 675, 676, 687, 688, 691, 706, 716, 717, 718, 719, 721, 723, 725, 726, 727, 732, 734, 735, 736, 738, 739, 741, 743, 745, 746, 747, 748, 750, 751, 753, 755, 758], "transformed_with_st": 2, "map": [2, 3, 12, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 88, 90, 95, 97, 102, 106, 108, 121, 125, 126, 133, 167, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 258, 273, 274, 275, 277, 279, 285, 286, 292, 294, 295, 296, 297, 304, 307, 330, 331, 332, 374, 375, 376, 378, 399, 401, 402, 407, 409, 410, 411, 412, 414, 427, 428, 429, 430, 437, 440, 441, 443, 444, 448, 449, 450, 452, 455, 456, 459, 461, 463, 464, 465, 467, 468, 471, 479, 480, 493, 494, 496, 498, 500, 501, 513, 514, 519, 524, 534, 541, 550, 551, 552, 553, 559, 560, 563, 564, 565, 570, 571, 572, 573, 575, 576, 578, 580, 582, 583, 589, 594, 595, 596, 597, 601, 604, 605, 606, 607, 608, 611, 612, 623, 624, 628, 629, 636, 637, 638, 639, 641, 644, 647, 648, 649, 650, 651, 655, 656, 659, 661, 662, 664, 665, 666, 720, 723, 725, 731, 732, 736, 738, 739, 746, 750, 751, 753, 759], "convolut": [2, 12, 16, 35, 39, 307, 327, 345, 536, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 675, 688, 756, 758], "c": [2, 4, 8, 12, 13, 14, 16, 19, 25, 31, 32, 34, 35, 36, 37, 39, 40, 42, 46, 48, 65, 76, 77, 92, 95, 118, 121, 176, 187, 193, 194, 214, 215, 226, 229, 237, 244, 307, 308, 310, 313, 319, 321, 322, 323, 334, 339, 351, 352, 354, 355, 357, 365, 374, 375, 376, 383, 407, 408, 409, 429, 440, 448, 449, 450, 459, 463, 464, 501, 515, 516, 519, 521, 522, 523, 526, 529, 530, 532, 534, 535, 536, 537, 539, 541, 544, 545, 547, 550, 551, 552, 553, 554, 555, 569, 571, 573, 604, 608, 616, 619, 623, 624, 625, 627, 628, 633, 634, 645, 650, 656, 657, 662, 664, 691, 700, 707, 709, 710, 711, 716, 718, 721, 722, 723, 727, 732, 734, 742, 743, 744, 746, 751, 753, 754, 758, 762, 763, 765], "h": [2, 12, 13, 16, 35, 36, 39, 307, 326, 327, 344, 345, 448, 450, 534, 536, 541, 549, 552, 553, 554, 555, 556, 557, 558, 619, 623, 625, 628, 633, 718, 722, 723, 724, 754], "w": [2, 4, 12, 13, 14, 16, 29, 34, 35, 36, 37, 39, 220, 284, 298, 304, 306, 307, 308, 325, 326, 327, 329, 343, 344, 345, 346, 357, 370, 426, 448, 450, 493, 515, 516, 517, 519, 521, 522, 523, 534, 535, 536, 541, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 622, 706, 718, 734, 743, 746, 747], "bigger": 2, "permut": [2, 19, 42, 52, 317, 419, 539, 602, 609], "infer": [2, 8, 12, 13, 16, 19, 31, 35, 36, 39, 42, 75, 77, 85, 89, 90, 94, 97, 102, 111, 112, 113, 114, 115, 257, 258, 314, 415, 459, 492, 529, 530, 534, 536, 539, 559, 604, 697, 718, 721, 725, 726, 738, 743, 748, 756, 757, 760, 762], "correct": [2, 25, 48, 139, 308, 368, 530, 539, 547, 597, 662, 664, 670, 706, 715, 717, 718, 723, 724, 725, 726, 729, 731, 732, 735, 737, 738], "mind": [2, 715, 720, 721, 723, 738, 752], "well": [2, 36, 309, 371, 461, 534, 537, 584, 675, 706, 713, 715, 717, 722, 724, 725, 729, 735, 736, 737, 738, 747, 748, 750, 757, 758, 759, 763], "hf": 2, "tf_model": 2, "tf_input": 2, "data_class": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 326, 327, 448, 452, 585, 610], "factorizedtensor": [3, 4, 5], "factor": [3, 4, 12, 14, 16, 17, 35, 37, 39, 40, 164, 165, 166, 307, 308, 340, 350, 358, 359, 367, 370, 515, 516, 521, 522, 531, 535, 536, 537, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 564, 673, 675, 676, 687, 688, 692, 709, 729], "form": [3, 4, 7, 8, 12, 17, 29, 31, 40, 76, 77, 94, 98, 99, 257, 260, 269, 275, 301, 304, 308, 310, 355, 362, 380, 389, 393, 406, 438, 497, 499, 529, 534, 536, 537, 541, 564, 566, 568, 569, 570, 571, 573, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 589, 617, 628, 673, 687, 709, 711, 715, 732, 738, 741, 747, 748, 758, 759, 764], "_abc_impl": [3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 56], "_abc_data": [3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 56], "mode_dot": [3, 4, 5, 12, 35, 308], "matrix_or_tensor": 3, "mode": [3, 4, 5, 12, 17, 29, 35, 40, 163, 166, 171, 176, 193, 226, 267, 301, 307, 308, 310, 337, 342, 350, 358, 364, 366, 367, 370, 386, 391, 393, 394, 396, 398, 401, 403, 481, 482, 486, 487, 489, 490, 503, 504, 507, 508, 510, 511, 531, 532, 534, 537, 582, 688, 703, 712, 716, 717, 718, 723, 726, 727, 741, 751, 758, 761], "norm": [3, 4, 12, 13, 17, 35, 36, 40, 307, 308, 328, 329, 333, 334, 335, 338, 339, 340, 350, 352, 356, 410, 411, 412, 443, 444, 465, 534, 537, 576, 592, 635, 688, 692, 739], "l2": [3, 4, 12, 17, 40, 313, 411, 412, 537, 592, 688, 723], "to_tensor": [3, 4, 5], "to_unfold": [3, 4, 5], "to_vec": [3, 4, 5], "cp_tensor": 4, "cptensor": [4, 266, 301], "base": [4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 56, 92, 100, 132, 196, 197, 214, 215, 216, 217, 231, 268, 274, 277, 281, 288, 301, 304, 307, 308, 317, 349, 368, 419, 484, 494, 505, 529, 530, 532, 534, 537, 539, 545, 547, 576, 600, 647, 648, 649, 650, 657, 671, 674, 677, 678, 679, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 697, 701, 704, 706, 716, 717, 719, 723, 724, 725, 729, 731, 733, 734, 735, 737, 738, 739, 740, 741, 743, 750, 758, 763, 765], "cp_copi": 4, "static": [4, 5, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 55, 56, 83, 327, 340, 345, 367, 370, 399, 408, 496, 529, 580, 685, 690, 736, 740, 751, 757, 758, 759], "cp_flip_sign": 4, "func": [4, 29, 166, 298, 306, 442, 514, 517, 518, 520, 525, 531, 534, 535, 541, 629, 670, 715, 719, 720, 727, 729, 734, 735], "flip": [4, 12, 19, 35, 42, 184, 308, 310, 368, 384, 385, 532, 539, 735, 745, 746, 748], "sign": [4, 11, 12, 17, 23, 25, 34, 35, 40, 75, 173, 174, 175, 176, 179, 181, 182, 187, 191, 193, 196, 198, 200, 226, 228, 235, 239, 240, 244, 276, 304, 308, 310, 319, 368, 400, 428, 429, 529, 532, 537, 545, 547, 583, 647, 648, 649, 650, 655, 656, 661, 663, 709, 716, 743, 748], "given": [4, 12, 13, 18, 19, 21, 29, 35, 36, 37, 41, 42, 44, 52, 53, 75, 84, 91, 92, 111, 112, 113, 114, 115, 127, 132, 151, 160, 162, 164, 165, 166, 168, 172, 245, 270, 273, 277, 278, 284, 285, 286, 288, 291, 301, 304, 307, 308, 309, 310, 313, 314, 319, 325, 326, 327, 328, 333, 334, 335, 338, 339, 340, 342, 343, 344, 345, 346, 350, 356, 359, 371, 372, 373, 380, 381, 382, 389, 391, 402, 406, 410, 411, 412, 413, 414, 415, 416, 417, 427, 428, 429, 430, 456, 479, 480, 489, 515, 516, 519, 521, 522, 523, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 593, 594, 595, 596, 597, 600, 601, 602, 603, 605, 606, 610, 611, 623, 624, 633, 634, 637, 638, 639, 641, 653, 654, 655, 656, 668, 673, 674, 675, 676, 680, 684, 685, 687, 688, 690, 691, 692, 693, 694, 700, 709, 710, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 744, 745, 747, 750, 755, 760, 761, 764, 765], "column": [4, 12, 17, 35, 40, 86, 100, 268, 301, 308, 310, 317, 319, 355, 359, 368, 382, 384, 385, 389, 391, 420, 426, 427, 529, 537, 569, 570, 576, 582, 584, 585, 590, 687], "determin": [4, 11, 12, 17, 19, 23, 26, 29, 34, 35, 36, 40, 47, 49, 52, 53, 86, 108, 110, 117, 123, 124, 125, 126, 128, 129, 130, 145, 155, 157, 158, 169, 174, 175, 176, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 190, 191, 193, 196, 198, 200, 206, 207, 208, 209, 210, 214, 215, 216, 217, 218, 223, 226, 231, 235, 238, 239, 240, 241, 242, 243, 244, 247, 289, 294, 304, 307, 308, 319, 342, 356, 427, 437, 440, 461, 462, 466, 467, 468, 469, 470, 471, 496, 513, 529, 530, 531, 532, 534, 537, 539, 540, 545, 548, 564, 565, 566, 568, 572, 573, 575, 577, 578, 580, 581, 583, 584, 589, 591, 592, 598, 613, 614, 615, 647, 648, 649, 650, 651, 665, 666, 675, 680, 687, 691, 708, 723, 725, 726, 728, 732, 736, 738, 740, 741], "neg": [4, 6, 11, 12, 17, 19, 21, 26, 28, 34, 35, 40, 42, 44, 49, 61, 64, 75, 86, 88, 100, 193, 200, 207, 208, 226, 227, 231, 235, 240, 258, 268, 270, 301, 308, 314, 353, 358, 362, 417, 526, 529, 532, 537, 539, 543, 548, 565, 567, 585, 589, 591, 592, 598, 600, 601, 605, 638, 665, 666, 673, 675, 684, 723, 735], "assign": [4, 12, 35, 319, 427, 715, 717, 721, 725, 735, 745], "weight": [4, 12, 14, 16, 18, 35, 37, 39, 41, 260, 288, 301, 304, 307, 308, 319, 333, 359, 425, 427, 430, 515, 516, 519, 521, 522, 523, 535, 536, 538, 540, 560, 561, 562, 563, 594, 615, 675, 687, 688, 690, 692, 706, 723, 732, 738, 743, 747, 748, 757], "matric": [4, 8, 12, 17, 35, 40, 52, 93, 98, 99, 269, 301, 308, 310, 355, 358, 359, 361, 365, 366, 369, 382, 529, 536, 537, 560, 564, 566, 568, 569, 570, 571, 572, 573, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 589, 590, 675, 750, 758], "u": [4, 12, 17, 31, 35, 40, 92, 308, 362, 368, 369, 537, 541, 564, 571, 585, 624, 706, 709, 711, 716, 717, 718, 723, 724, 730, 733, 735, 736, 737, 738, 739, 741, 747, 751], "s_i": 4, "r": [4, 12, 17, 29, 35, 40, 284, 298, 304, 306, 517, 535, 537, 539, 582, 611, 716, 717, 718, 734, 737], "fix": [4, 12, 35, 304, 308, 370, 536, 562, 706, 716, 717, 719, 725, 730, 738, 739], "vari": [4, 12, 23, 244, 335, 448, 532, 534, 545, 648, 649, 650, 723, 727, 736, 738, 745], "receiv": [4, 439, 475, 534, 540, 613, 614, 615, 688, 717, 725, 726, 738, 741], "summar": [4, 738], "axi": [4, 6, 8, 11, 12, 13, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 31, 34, 35, 36, 40, 41, 42, 44, 45, 46, 47, 48, 49, 62, 66, 91, 92, 95, 166, 240, 245, 277, 278, 284, 291, 304, 307, 309, 310, 313, 317, 319, 328, 329, 335, 338, 340, 350, 371, 373, 378, 379, 380, 383, 384, 385, 388, 393, 398, 399, 401, 402, 404, 405, 410, 411, 412, 420, 425, 428, 429, 430, 432, 433, 434, 435, 436, 448, 455, 514, 526, 529, 531, 532, 534, 536, 537, 538, 539, 540, 543, 544, 545, 546, 547, 548, 558, 565, 568, 576, 591, 592, 594, 595, 596, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 641, 642, 643, 647, 651, 652, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 673, 675, 684, 688, 689, 694, 723, 725, 727, 729, 731, 732, 735, 736, 738, 741, 743, 745, 748, 750], "normalisation_weight": 4, "normalised_factor": 4, "cp_lstsq_grad": 4, "return_loss": 4, "mask": [4, 12, 16, 35, 39, 308, 310, 358, 359, 367, 370, 400, 458, 534, 536, 559, 562, 563, 741], "third": [4, 310, 380, 404, 537, 545, 585, 647, 722, 735, 751, 757, 758, 764], "order": [4, 8, 12, 13, 16, 17, 19, 23, 24, 29, 35, 39, 40, 42, 46, 47, 52, 53, 76, 77, 93, 100, 181, 200, 243, 268, 284, 301, 304, 308, 310, 313, 317, 352, 355, 356, 357, 361, 365, 367, 370, 383, 384, 385, 390, 391, 402, 407, 408, 409, 420, 529, 532, 536, 537, 539, 540, 544, 545, 546, 550, 551, 552, 553, 554, 555, 558, 569, 570, 576, 585, 586, 590, 592, 601, 604, 613, 614, 645, 647, 648, 649, 650, 651, 653, 654, 670, 686, 690, 691, 693, 706, 708, 715, 716, 717, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 736, 737, 738, 739, 740, 741, 746, 748, 751, 754, 757, 758, 759, 761, 764], "nabla": 4, "mathcal": 4, "mathbf": 4, "noqa": [4, 12, 173, 240, 307, 308, 343, 366, 532, 538, 594, 688, 697, 737], "decomposit": [4, 12, 17, 35, 40, 266, 267, 301, 308, 358, 367, 370, 537, 564, 570, 574, 582, 585, 715, 765], "note": [4, 12, 13, 17, 19, 23, 35, 40, 42, 88, 100, 132, 200, 235, 236, 243, 268, 269, 284, 301, 304, 307, 308, 310, 329, 355, 358, 366, 367, 370, 383, 530, 532, 536, 537, 539, 545, 547, 562, 569, 570, 583, 585, 604, 608, 648, 650, 659, 688, 712, 715, 716, 717, 720, 725, 727, 728, 730, 735, 736, 737, 738, 739, 741], "gradient": [4, 12, 35, 166, 298, 304, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 531, 540, 613, 614, 615, 670, 680, 692, 706, 718, 739, 746, 747, 750, 751, 758], "respect": [4, 8, 11, 12, 14, 17, 34, 35, 37, 40, 93, 173, 176, 181, 183, 185, 186, 187, 188, 193, 194, 200, 204, 205, 212, 213, 218, 220, 222, 223, 226, 229, 235, 239, 242, 243, 249, 284, 298, 299, 304, 306, 308, 310, 313, 369, 373, 407, 409, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 529, 532, 535, 536, 537, 540, 549, 556, 557, 565, 582, 585, 613, 614, 615, 670, 673, 687, 714, 715, 716, 717, 720, 721, 723, 724, 725, 726, 727, 731, 732, 734, 735, 736, 738, 739, 740, 754, 764], "even": [4, 12, 35, 193, 226, 231, 236, 310, 319, 393, 427, 532, 709, 710, 716, 717, 719, 724, 725, 726, 728, 731, 732, 735, 736, 737, 741, 745, 746, 747, 748, 751, 764], "matrix": [4, 8, 12, 13, 16, 17, 35, 36, 39, 40, 52, 93, 98, 99, 100, 268, 269, 301, 308, 310, 319, 352, 355, 356, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 370, 391, 427, 437, 443, 529, 534, 536, 537, 560, 564, 566, 568, 569, 570, 571, 573, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 589, 590, 593, 675, 687, 688, 715, 725, 736, 756, 758], "factor_matric": 4, "broadcast": [4, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 52, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 75, 76, 77, 83, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 99, 101, 102, 105, 106, 107, 167, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 251, 252, 253, 255, 256, 257, 258, 269, 274, 275, 276, 277, 281, 283, 285, 287, 288, 289, 290, 294, 299, 301, 304, 307, 308, 309, 310, 313, 314, 319, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 339, 340, 342, 343, 344, 345, 348, 351, 352, 353, 359, 360, 363, 364, 366, 371, 377, 378, 381, 386, 394, 395, 396, 397, 399, 402, 403, 407, 410, 411, 412, 413, 414, 416, 417, 427, 428, 429, 430, 433, 434, 436, 443, 444, 448, 449, 450, 455, 456, 465, 479, 480, 515, 516, 519, 521, 522, 523, 524, 526, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 575, 576, 578, 579, 580, 581, 582, 584, 586, 587, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 612, 616, 635, 636, 637, 638, 639, 641, 642, 643, 644, 646, 650, 651, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 673, 700, 723, 725, 727, 728, 729, 738, 739, 743], "scalar": [4, 8, 11, 12, 13, 17, 28, 31, 34, 35, 36, 40, 61, 90, 95, 176, 197, 242, 254, 275, 276, 278, 281, 284, 286, 288, 293, 299, 304, 308, 310, 356, 374, 375, 376, 387, 501, 513, 529, 532, 534, 537, 592, 725, 734, 736, 751, 758], "loss": [4, 12, 371, 487, 508, 534, 594, 595, 596, 706, 724, 725, 732, 736, 739, 740, 746, 747, 748, 758, 765], "along": [4, 6, 8, 11, 12, 13, 17, 18, 19, 21, 22, 24, 25, 26, 28, 29, 31, 34, 35, 36, 40, 41, 42, 44, 45, 47, 48, 49, 62, 66, 71, 91, 92, 166, 240, 243, 245, 270, 271, 277, 278, 291, 297, 301, 304, 305, 307, 308, 309, 310, 313, 319, 328, 334, 335, 338, 339, 340, 350, 367, 371, 378, 379, 380, 384, 385, 393, 398, 402, 410, 411, 412, 428, 429, 430, 432, 433, 434, 436, 448, 455, 528, 529, 531, 532, 534, 537, 538, 539, 540, 543, 544, 546, 547, 548, 565, 580, 589, 591, 592, 594, 595, 596, 598, 601, 602, 603, 605, 606, 608, 610, 611, 613, 614, 615, 641, 642, 643, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 688, 706, 715, 718, 727, 735, 739, 741, 743, 758], "cp_gradient": 4, "float": [4, 6, 8, 9, 11, 12, 13, 14, 16, 17, 18, 20, 21, 23, 25, 28, 31, 32, 34, 35, 36, 37, 39, 40, 41, 43, 44, 48, 52, 61, 67, 75, 76, 77, 84, 86, 88, 89, 90, 91, 92, 96, 97, 101, 105, 109, 113, 118, 122, 126, 132, 133, 136, 142, 151, 160, 164, 165, 168, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 188, 189, 190, 191, 193, 194, 196, 197, 198, 199, 200, 204, 205, 206, 207, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 254, 256, 257, 258, 259, 260, 262, 263, 273, 274, 280, 281, 286, 288, 289, 292, 293, 294, 296, 297, 299, 301, 304, 305, 307, 308, 310, 313, 314, 319, 330, 331, 332, 349, 352, 355, 356, 367, 369, 370, 382, 400, 407, 408, 409, 412, 413, 414, 415, 416, 417, 427, 428, 429, 430, 436, 442, 443, 444, 452, 461, 484, 485, 488, 493, 494, 513, 515, 516, 519, 521, 522, 523, 526, 527, 529, 530, 531, 532, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 547, 559, 562, 563, 564, 566, 569, 570, 571, 573, 576, 577, 578, 581, 582, 583, 584, 585, 586, 587, 589, 592, 594, 595, 596, 613, 614, 615, 622, 635, 638, 639, 645, 647, 648, 649, 650, 655, 656, 658, 659, 660, 661, 662, 663, 664, 670, 673, 674, 676, 684, 687, 688, 691, 692, 719, 723, 725, 728, 729, 731, 732, 734, 735, 737, 738, 739, 741, 743, 745, 747], "quantiti": 4, "cp_mode_dot": 4, "matrix_or_vector": [4, 5, 12, 35, 308, 364], "keep_dim": [4, 5], "product": [4, 11, 12, 16, 17, 25, 34, 35, 39, 40, 48, 226, 308, 319, 354, 359, 360, 361, 364, 365, 366, 428, 429, 532, 536, 537, 547, 562, 563, 565, 572, 575, 580, 587, 591, 655, 656, 657, 661, 662, 715, 743, 758, 760], "vector": [4, 8, 12, 13, 16, 17, 35, 36, 39, 40, 93, 307, 308, 310, 314, 319, 329, 355, 358, 364, 366, 369, 393, 395, 397, 415, 427, 444, 448, 465, 514, 529, 534, 536, 537, 560, 562, 565, 569, 570, 572, 575, 580, 585, 586, 590, 591, 592, 593, 688, 750, 758], "core": [4, 12, 35, 157, 308, 358, 367, 370, 531, 708, 716, 726, 738, 748, 756, 757, 758, 759, 763, 765], "1d": [4, 12, 35, 307, 308, 310, 319, 321, 328, 330, 332, 338, 364, 374, 398, 401, 427, 688], "2d": [4, 12, 35, 258, 301, 307, 308, 310, 319, 322, 323, 330, 331, 364, 369, 375, 382, 427, 688, 706, 736, 741], "i_k": [4, 12, 35, 308, 364], "multipli": [4, 11, 12, 16, 25, 34, 35, 39, 176, 242, 287, 307, 308, 342, 364, 365, 428, 429, 532, 536, 547, 559, 655, 661, 717, 720, 721, 723, 727], "i_1": [4, 12, 35, 308, 364], "i_": [4, 12, 35, 308, 319, 364, 430], "i_n": [4, 12, 35, 308, 364], "cp_multi_mode_dot": 4, "chain": [4, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 59, 60, 61, 62, 63, 64, 65, 66, 67, 88, 90, 95, 97, 102, 106, 108, 121, 125, 126, 133, 167, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 258, 273, 275, 277, 279, 285, 286, 292, 294, 295, 296, 297, 330, 331, 332, 378, 399, 402, 407, 409, 410, 411, 412, 414, 427, 428, 429, 430, 437, 440, 441, 443, 444, 448, 449, 450, 452, 455, 456, 459, 461, 463, 464, 465, 467, 468, 471, 479, 480, 493, 494, 496, 498, 500, 501, 513, 519, 524, 540, 541, 550, 551, 552, 553, 559, 560, 563, 564, 565, 570, 571, 572, 573, 575, 576, 578, 580, 582, 583, 589, 594, 595, 596, 597, 601, 604, 605, 606, 607, 608, 611, 612, 613, 614, 618, 629, 636, 637, 638, 639, 641, 644, 647, 648, 649, 650, 651, 655, 656, 659, 661, 662, 664, 665, 666, 686, 693, 720, 723, 734, 736, 747, 748, 751, 758], "sever": [4, 12, 35, 307, 308, 321, 322, 323, 366, 716, 717, 739, 751, 756, 762], "cp_n_param": 4, "tensor_shap": [4, 5], "rank": [4, 5, 8, 12, 17, 19, 26, 35, 40, 42, 49, 55, 93, 266, 267, 301, 308, 310, 319, 358, 359, 367, 370, 393, 436, 529, 537, 539, 544, 548, 565, 567, 576, 578, 582, 584, 589, 591, 592, 599, 600, 608, 611, 612, 645, 665, 666], "full": [4, 12, 17, 35, 39, 40, 118, 205, 213, 266, 267, 301, 308, 309, 310, 369, 371, 394, 397, 482, 490, 504, 511, 529, 530, 532, 534, 536, 537, 551, 553, 554, 555, 578, 582, 584, 585, 670, 674, 680, 706, 709, 710, 716, 717, 722, 725, 728, 729, 731, 732, 736, 738, 741, 743, 751, 756, 758, 764], "decompos": [4, 12, 35, 266, 267, 283, 290, 301, 304, 308, 362, 367, 370, 736], "approxim": [4, 6, 11, 12, 17, 28, 34, 35, 40, 59, 174, 175, 178, 179, 180, 181, 190, 191, 196, 198, 200, 214, 215, 216, 217, 231, 238, 239, 243, 244, 245, 284, 294, 304, 309, 371, 526, 532, 537, 578, 581, 684, 728, 736], "n_param": [4, 5], "cp_norm": 4, "cp_to_tensor": 4, "see": [4, 9, 11, 17, 22, 23, 25, 26, 34, 35, 40, 45, 48, 49, 52, 53, 59, 61, 64, 75, 87, 91, 100, 107, 126, 133, 176, 181, 183, 185, 186, 187, 188, 193, 194, 198, 200, 204, 205, 212, 213, 216, 218, 220, 222, 223, 226, 229, 231, 235, 242, 247, 268, 301, 308, 352, 526, 529, 530, 532, 537, 544, 545, 547, 548, 565, 578, 581, 584, 591, 592, 643, 647, 648, 649, 650, 658, 659, 660, 661, 662, 663, 664, 665, 666, 706, 708, 711, 715, 716, 717, 719, 720, 722, 723, 724, 725, 726, 727, 730, 731, 732, 736, 737, 738, 741, 743, 745, 746, 750, 751, 754], "fact": [4, 717, 719, 724, 736, 738, 743, 746], "khatria": 4, "rao": [4, 308, 359], "khatri": [4, 308, 359], "cp_normal": 4, "normalis": 4, "unit": [4, 12, 28, 35, 59, 61, 62, 63, 64, 65, 66, 67, 248, 252, 253, 255, 256, 299, 410, 411, 526, 706, 716, 719, 725, 736, 737, 738, 751, 759, 762], "length": [4, 8, 12, 18, 19, 29, 35, 41, 42, 53, 75, 88, 93, 254, 259, 262, 263, 272, 278, 299, 301, 304, 307, 308, 310, 314, 317, 329, 334, 335, 338, 339, 340, 350, 359, 366, 393, 401, 415, 420, 514, 529, 534, 536, 537, 538, 539, 545, 562, 585, 586, 594, 604, 647, 673, 686, 688, 738, 746], "turn": [4, 16, 39, 330, 331, 332, 536, 559, 688, 710, 716, 723, 726, 727, 736, 738], "u_1": 4, "u_n": 4, "v_1": 4, "v_n": 4, "v_k": 4, "euclidean": [4, 17, 40, 537, 592], "u_k": 4, "absorb": 4, "special": [4, 25, 40, 52, 53, 173, 174, 175, 176, 178, 179, 180, 181, 182, 188, 189, 190, 191, 193, 194, 196, 198, 199, 200, 207, 208, 209, 214, 215, 216, 217, 218, 221, 226, 229, 231, 235, 236, 237, 238, 239, 240, 243, 244, 246, 294, 304, 532, 537, 547, 583, 589, 658, 659, 660, 661, 662, 663, 664, 673, 674, 675, 676, 680, 687, 715, 719, 720, 722, 724, 727, 728, 729, 730, 731, 735, 737, 738, 739, 741, 758, 759, 760], "symmetr": [4, 12, 17, 35, 40, 257, 259, 260, 262, 263, 301, 308, 310, 355, 393, 537, 564, 569, 570, 571, 593, 723], "hold": [4, 12, 13, 17, 25, 35, 40, 48, 273, 286, 291, 304, 319, 379, 405, 428, 429, 434, 479, 480, 534, 537, 547, 576, 656, 671, 706, 746, 759], "eigenvalu": [4, 12, 17, 35, 40, 308, 355, 356, 357, 537, 569, 570, 571, 578], "unfold": [4, 12, 35, 308, 310, 358, 386, 394, 396], "refold": [4, 310, 386, 397], "possibl": [4, 8, 12, 19, 31, 35, 42, 77, 200, 243, 257, 301, 307, 310, 329, 374, 375, 376, 379, 381, 383, 384, 385, 388, 392, 399, 405, 458, 475, 532, 534, 536, 539, 547, 559, 600, 601, 602, 604, 606, 607, 609, 611, 658, 660, 703, 706, 709, 711, 715, 716, 717, 719, 722, 723, 725, 727, 728, 730, 732, 734, 735, 736, 737, 738, 741, 743, 746, 750, 751, 756, 758, 764], "altern": [4, 12, 35, 273, 279, 283, 285, 286, 287, 288, 290, 291, 292, 295, 296, 304, 706, 715, 716, 722, 735, 746, 761], "implement": [4, 9, 10, 12, 23, 24, 32, 33, 35, 40, 47, 105, 119, 120, 133, 152, 153, 167, 173, 174, 175, 178, 179, 180, 181, 190, 191, 193, 196, 198, 200, 214, 215, 216, 217, 226, 228, 231, 235, 238, 239, 243, 244, 294, 304, 308, 319, 354, 355, 433, 434, 453, 454, 530, 531, 532, 534, 536, 537, 545, 546, 547, 562, 569, 570, 571, 580, 589, 647, 648, 649, 650, 651, 654, 658, 659, 660, 661, 662, 663, 674, 676, 697, 706, 715, 718, 719, 720, 721, 723, 725, 726, 728, 729, 731, 732, 733, 735, 737, 738, 739, 741, 743, 745, 746, 747, 748, 750, 751, 753, 755, 756, 757, 758, 761, 764, 765], "g": [4, 12, 21, 23, 25, 27, 35, 44, 50, 104, 133, 146, 193, 206, 226, 233, 236, 307, 308, 314, 319, 343, 345, 370, 413, 414, 415, 416, 417, 428, 429, 530, 531, 532, 537, 541, 543, 545, 547, 570, 571, 576, 583, 585, 586, 592, 619, 623, 625, 628, 633, 637, 638, 639, 647, 648, 649, 650, 655, 656, 658, 660, 661, 663, 687, 710, 711, 715, 716, 718, 719, 721, 722, 723, 734, 736, 738, 743, 751, 753, 754], "over": [4, 12, 17, 25, 26, 27, 32, 35, 39, 40, 48, 49, 50, 71, 264, 265, 284, 291, 301, 304, 307, 308, 310, 317, 319, 321, 322, 323, 326, 335, 340, 344, 348, 349, 350, 366, 373, 383, 398, 401, 420, 430, 514, 528, 534, 537, 542, 543, 547, 548, 565, 576, 587, 589, 591, 592, 635, 639, 658, 659, 660, 661, 662, 663, 664, 665, 666, 688, 691, 697, 700, 706, 708, 710, 716, 717, 721, 727, 728, 734, 735, 737, 739, 743, 745, 751, 756, 758], "updat": [4, 7, 13, 14, 29, 36, 37, 465, 479, 480, 483, 515, 516, 519, 521, 522, 523, 534, 535, 536, 540, 541, 559, 561, 613, 614, 615, 623, 624, 628, 633, 634, 680, 685, 691, 692, 697, 706, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 727, 731, 733, 734, 736, 737, 738, 741, 743, 745, 746, 748, 751], "outer": [4, 17, 40, 537, 540, 613, 614, 615, 715], "cp_to_unfold": 4, "ie": 4, "s_u_i": 4, "write": [4, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 75, 76, 77, 83, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 99, 101, 102, 105, 107, 167, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 252, 253, 255, 256, 257, 258, 259, 260, 262, 263, 269, 272, 274, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 293, 294, 299, 301, 304, 307, 308, 309, 310, 313, 314, 315, 317, 319, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 342, 343, 344, 345, 346, 348, 350, 351, 352, 353, 359, 360, 363, 364, 365, 366, 371, 378, 381, 382, 383, 384, 385, 386, 387, 390, 391, 392, 394, 395, 396, 397, 399, 400, 401, 402, 403, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 427, 428, 429, 430, 431, 432, 433, 434, 436, 443, 444, 448, 449, 450, 455, 456, 465, 479, 480, 515, 516, 519, 521, 522, 523, 524, 526, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 584, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 612, 616, 635, 636, 637, 638, 639, 641, 643, 644, 646, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 671, 706, 710, 714, 715, 717, 718, 719, 721, 722, 724, 725, 727, 728, 729, 732, 735, 737, 739, 743, 745, 748, 758, 765], "exploit": [4, 761], "dot": [4, 16, 35, 39, 308, 365, 536, 537, 562, 563, 591, 706, 716, 724], "khatri_rao": [4, 308], "cp_to_vec": 4, "ravel": [4, 741], "vectoris": [4, 12, 35, 310, 395, 397], "properti": [4, 5, 29, 52, 55, 690, 692, 719, 723, 732, 737, 738, 745, 746, 747, 764], "inplac": [4, 7, 13, 29, 36, 439, 441, 462, 465, 466, 483, 534, 541, 623, 624, 628, 633, 634, 679, 680, 685, 692, 718, 720, 727, 731, 733, 736, 741, 745, 747], "modifi": [4, 12, 29, 35, 310, 319, 390, 393, 398, 434, 715, 716, 717, 719, 721, 722, 725, 726, 728, 730, 732, 735, 737, 738, 739, 743], "unfolding_dot_khatri_rao": 4, "mttkrp": 4, "validate_cp_rank": 4, "round": [4, 5, 11, 12, 34, 35, 176, 189, 193, 199, 200, 226, 240, 246, 247, 280, 304, 532, 708, 709, 710, 712, 715, 716, 717, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 743, 744, 745, 746, 747, 748, 750], "most": [4, 29, 31, 95, 308, 355, 487, 508, 529, 534, 537, 569, 570, 703, 706, 709, 714, 715, 716, 720, 723, 724, 725, 726, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 743, 745, 746, 747, 751, 758, 759, 761, 762, 764, 765], "percent": 4, "floor": [4, 11, 12, 34, 35, 187, 200, 307, 325, 326, 327, 329, 343, 344, 345, 348, 532, 688, 735], "ceil": [4, 11, 12, 34, 35, 75, 307, 325, 326, 327, 343, 344, 345, 348, 529, 532, 688, 735], "validate_cp_tensor": 4, "tucker_tensor": 5, "tuckertensor": [5, 12, 35, 267, 301, 308, 358, 367, 370], "tucker_copi": 5, "tucker_mode_dot": [5, 765], "tucker_n_param": 5, "tucker_norm": 5, "tucker_to_tensor": 5, "skip_factor": 5, "transpose_factor": 5, "tucker_to_unfold": 5, "tucker_to_vec": 5, "validate_tucker_rank": 5, "fixed_mod": 5, "validate_tucker_tensor": 5, "_arraywithactiv": [6, 52], "abc": [6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 55, 451, 534, 541, 634, 686, 687, 692, 700, 745], "gelu": [6, 28, 526, 684, 706], "variant": [6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 77, 83, 85, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 102, 106, 107, 108, 118, 121, 125, 126, 133, 150, 167, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 262, 263, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 319, 325, 326, 327, 328, 330, 331, 332, 334, 338, 339, 340, 343, 344, 345, 349, 351, 352, 353, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 440, 441, 443, 444, 447, 448, 449, 450, 451, 452, 455, 456, 459, 461, 463, 464, 465, 467, 468, 469, 471, 472, 474, 479, 480, 493, 494, 495, 496, 498, 500, 501, 513, 515, 516, 519, 521, 522, 523, 524, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 575, 576, 578, 581, 582, 583, 585, 589, 590, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 720, 727, 728, 741], "simpli": [6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 77, 83, 85, 87, 88, 90, 92, 93, 94, 95, 97, 98, 99, 102, 106, 107, 108, 121, 125, 126, 133, 150, 167, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 262, 263, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 319, 325, 326, 327, 328, 330, 331, 332, 334, 338, 339, 340, 343, 344, 345, 349, 351, 352, 353, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 440, 441, 443, 444, 447, 448, 449, 450, 451, 452, 455, 456, 459, 461, 463, 465, 467, 468, 469, 471, 472, 474, 479, 480, 493, 494, 495, 496, 498, 500, 501, 513, 515, 516, 519, 521, 522, 523, 524, 532, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 575, 576, 581, 582, 583, 585, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 706, 715, 716, 717, 720, 721, 722, 724, 725, 726, 727, 728, 731, 732, 735, 736, 737, 738, 741, 743, 747, 748, 751, 753, 759, 764], "docstr": [6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 75, 76, 77, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 106, 107, 108, 118, 121, 125, 126, 133, 150, 167, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 262, 263, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 304, 319, 325, 326, 327, 328, 330, 331, 332, 334, 338, 339, 340, 343, 344, 345, 349, 351, 352, 353, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 440, 441, 443, 444, 447, 448, 449, 450, 451, 452, 455, 456, 459, 461, 463, 464, 465, 467, 468, 469, 471, 472, 474, 479, 480, 493, 494, 495, 496, 498, 500, 501, 513, 514, 515, 516, 519, 521, 522, 523, 524, 529, 530, 532, 534, 537, 539, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 714, 715, 718, 722, 730, 731, 732, 736, 739], "element": [6, 8, 11, 12, 13, 16, 17, 19, 21, 22, 23, 25, 28, 29, 31, 32, 34, 35, 36, 39, 40, 42, 44, 45, 46, 48, 52, 53, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 75, 83, 89, 90, 98, 99, 100, 116, 118, 121, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 252, 253, 255, 256, 268, 269, 270, 271, 273, 274, 275, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 301, 304, 307, 308, 310, 319, 330, 331, 332, 335, 340, 343, 344, 345, 349, 350, 354, 355, 356, 374, 375, 376, 383, 384, 385, 387, 390, 400, 402, 404, 425, 426, 428, 429, 430, 431, 432, 433, 440, 443, 444, 455, 456, 472, 474, 493, 494, 496, 500, 501, 526, 529, 532, 534, 536, 537, 539, 541, 543, 544, 545, 546, 547, 548, 559, 565, 567, 569, 570, 575, 580, 582, 583, 585, 589, 597, 600, 601, 602, 603, 604, 605, 606, 607, 616, 619, 625, 636, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 673, 675, 688, 728, 737, 738, 741, 743, 762], "wise": [6, 11, 12, 17, 28, 34, 35, 40, 52, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 173, 174, 176, 177, 178, 180, 181, 183, 184, 185, 186, 187, 188, 192, 193, 194, 195, 197, 200, 201, 202, 203, 204, 205, 211, 212, 213, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 231, 232, 234, 235, 242, 247, 248, 250, 252, 253, 255, 256, 273, 274, 279, 280, 281, 282, 285, 286, 287, 288, 292, 293, 295, 296, 299, 304, 307, 308, 310, 330, 331, 332, 354, 359, 380, 387, 389, 390, 406, 526, 532, 539, 565, 597, 692, 741], "exampl": [6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 74, 75, 76, 77, 83, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 268, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 301, 304, 305, 307, 308, 309, 310, 313, 314, 315, 317, 319, 325, 326, 327, 328, 330, 331, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 360, 363, 365, 371, 372, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 387, 388, 389, 390, 392, 393, 398, 399, 400, 401, 402, 404, 405, 406, 410, 411, 412, 415, 417, 418, 419, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 455, 456, 457, 458, 459, 461, 463, 464, 465, 467, 468, 469, 471, 472, 474, 475, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 528, 529, 530, 531, 532, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 583, 585, 587, 589, 590, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 619, 622, 623, 624, 625, 627, 628, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 673, 674, 680, 697, 700, 704, 710, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 732, 733, 735, 736, 738, 739, 743, 745, 746, 747, 748, 750, 751, 755, 756, 759, 761, 764, 765], "6": [6, 8, 9, 11, 12, 13, 14, 16, 17, 19, 21, 22, 24, 25, 31, 32, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 59, 61, 66, 71, 76, 77, 89, 90, 93, 94, 97, 102, 106, 107, 108, 116, 118, 172, 173, 175, 176, 178, 179, 180, 181, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 216, 218, 219, 221, 223, 224, 225, 226, 228, 229, 230, 232, 233, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 247, 248, 250, 252, 253, 254, 255, 256, 257, 258, 275, 277, 284, 285, 287, 288, 289, 291, 297, 299, 301, 304, 305, 307, 308, 310, 315, 317, 319, 328, 330, 333, 334, 338, 339, 343, 346, 349, 350, 354, 357, 360, 372, 374, 375, 376, 379, 383, 384, 388, 389, 392, 393, 398, 399, 401, 405, 406, 415, 417, 418, 420, 425, 427, 428, 429, 430, 432, 434, 436, 441, 443, 444, 447, 448, 449, 455, 456, 463, 464, 465, 480, 493, 494, 495, 496, 498, 502, 515, 516, 517, 518, 519, 520, 521, 523, 525, 526, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 563, 565, 566, 567, 568, 570, 571, 572, 575, 576, 577, 580, 583, 585, 586, 587, 589, 590, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 616, 617, 627, 628, 634, 635, 636, 637, 638, 639, 641, 642, 643, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 673, 687, 706, 716, 719, 721, 723, 724, 727, 734, 738, 741, 743, 745, 746, 747], "138": [6, 59, 526], "165": [6, 59, 526, 536, 560], "hardswish": [6, 28, 526, 684], "leaky_relu": [6, 28, 526, 674], "alpha": [6, 11, 12, 28, 34, 35, 56, 61, 176, 242, 248, 259, 299, 301, 308, 314, 356, 414, 415, 416, 526, 532, 684, 731, 736, 737], "complex_mod": [6, 28, 59, 61, 64, 526, 684], "slope": [6, 12, 28, 35, 61, 248, 251, 299, 526, 684], "section": [6, 12, 23, 35, 61, 307, 310, 340, 350, 379, 388, 405, 545, 647, 648, 649, 650, 706, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 741, 742, 746, 747, 754, 761, 764], "liter": [6, 12, 17, 28, 35, 40, 59, 61, 64, 307, 308, 310, 328, 338, 342, 358, 362, 367, 370, 393, 526, 537, 546, 576, 592, 653, 684, 741], "split": [6, 12, 19, 28, 29, 35, 42, 59, 61, 64, 164, 165, 166, 283, 290, 310, 379, 388, 405, 448, 475, 526, 531, 534, 536, 539, 549, 556, 557, 609, 670, 684, 688, 706, 711, 717, 724, 742, 743, 751, 765], "magnitud": [6, 28, 59, 61, 64, 173, 176, 193, 200, 226, 526, 532, 537, 585, 586, 684], "how": [6, 12, 28, 35, 59, 61, 64, 193, 226, 310, 398, 401, 526, 532, 684, 686, 687, 688, 689, 690, 706, 708, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 739, 740, 741, 742, 744, 745, 746, 747, 748, 750, 751, 754, 758], "handl": [6, 10, 12, 28, 29, 33, 35, 53, 59, 61, 64, 146, 147, 148, 149, 150, 154, 159, 160, 168, 172, 178, 190, 215, 231, 237, 238, 243, 310, 398, 401, 526, 531, 532, 537, 547, 589, 661, 663, 684, 692, 718, 723, 724, 725, 730, 731, 732, 734, 735, 736, 737, 738, 740, 741, 747, 755, 765], "data": [6, 8, 11, 12, 13, 16, 17, 19, 21, 22, 23, 24, 25, 26, 28, 29, 31, 34, 35, 36, 39, 40, 42, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 59, 61, 64, 75, 76, 77, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 107, 108, 110, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 139, 145, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 196, 198, 199, 200, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 226, 228, 229, 230, 231, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 249, 251, 257, 258, 259, 260, 261, 262, 263, 269, 270, 271, 272, 274, 289, 294, 299, 301, 304, 307, 308, 310, 314, 318, 319, 330, 331, 332, 348, 353, 355, 369, 398, 401, 413, 414, 415, 416, 417, 423, 427, 428, 429, 433, 436, 452, 465, 467, 468, 471, 496, 526, 529, 531, 532, 534, 536, 537, 539, 543, 544, 546, 547, 548, 549, 550, 552, 553, 554, 556, 557, 559, 560, 564, 565, 566, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 591, 592, 598, 601, 602, 604, 605, 607, 608, 612, 637, 638, 639, 641, 642, 643, 645, 646, 651, 653, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 671, 673, 674, 675, 676, 680, 687, 688, 690, 694, 706, 707, 709, 716, 718, 719, 720, 721, 722, 723, 726, 728, 731, 732, 733, 735, 737, 739, 741, 743, 745, 753, 758, 759, 760, 762, 763, 764], "leaki": [6, 28, 61, 526, 684], "relu": [6, 12, 27, 28, 35, 61, 251, 252, 256, 299, 526, 684, 706, 737, 746, 747], "39": [6, 11, 12, 17, 21, 28, 34, 35, 37, 40, 44, 61, 179, 214, 216, 218, 248, 299, 307, 319, 326, 328, 345, 348, 428, 515, 526, 532, 535, 537, 547, 572, 580, 638, 657], "85": [6, 12, 21, 28, 34, 35, 37, 39, 44, 53, 61, 178, 187, 188, 232, 248, 254, 299, 319, 428, 493, 519, 526, 532, 534, 535, 536, 543, 560, 637, 638, 639], "17": [6, 12, 17, 28, 34, 35, 36, 37, 39, 40, 44, 53, 61, 62, 92, 176, 193, 218, 226, 257, 297, 301, 307, 310, 325, 326, 334, 335, 338, 339, 343, 344, 346, 349, 383, 449, 464, 515, 517, 526, 529, 532, 534, 535, 536, 537, 541, 543, 550, 559, 560, 568, 572, 624, 637, 638, 639, 641, 723], "log_softmax": [6, 28, 526], "ax": [6, 12, 17, 19, 22, 25, 26, 28, 35, 40, 42, 45, 48, 49, 52, 55, 62, 66, 166, 277, 278, 291, 297, 304, 305, 307, 310, 313, 319, 335, 340, 350, 392, 393, 399, 410, 432, 433, 434, 436, 448, 514, 531, 534, 537, 539, 544, 547, 548, 565, 576, 584, 587, 588, 592, 599, 601, 602, 605, 607, 609, 612, 642, 643, 658, 659, 660, 661, 662, 663, 664, 665, 666, 673, 675, 688, 725, 727, 738, 739, 743, 745], "98": [6, 14, 21, 28, 34, 37, 44, 62, 188, 191, 239, 519, 526, 532, 535, 537, 541, 544, 547, 580, 617, 628, 637, 639, 646, 657], "37": [6, 11, 12, 28, 34, 35, 39, 52, 62, 179, 187, 236, 239, 243, 315, 349, 418, 532, 536, 537, 541, 543, 560, 577, 624, 638, 724], "35": [6, 16, 17, 28, 34, 35, 39, 40, 44, 62, 181, 240, 307, 328, 338, 532, 536, 537, 544, 547, 560, 565, 572, 638, 646, 657], "0719": [6, 28, 62], "62": [6, 28, 34, 44, 62, 211, 239, 532, 542, 543, 635, 637, 639], "221": [6, 62], "7": [6, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 25, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 61, 62, 63, 64, 75, 76, 77, 91, 94, 95, 112, 118, 121, 151, 173, 176, 179, 183, 184, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 199, 200, 203, 204, 205, 210, 211, 212, 213, 214, 215, 216, 218, 221, 223, 224, 225, 226, 228, 229, 230, 232, 233, 236, 237, 238, 240, 243, 244, 246, 247, 248, 250, 252, 253, 255, 256, 257, 258, 260, 263, 273, 275, 277, 278, 284, 285, 286, 288, 290, 291, 297, 299, 301, 304, 305, 307, 308, 309, 310, 315, 319, 325, 326, 327, 328, 333, 334, 338, 339, 343, 346, 348, 349, 350, 354, 363, 371, 374, 375, 376, 379, 383, 388, 389, 392, 393, 398, 399, 401, 405, 406, 415, 417, 418, 425, 428, 429, 431, 432, 436, 441, 443, 444, 448, 449, 452, 463, 464, 465, 472, 479, 480, 493, 496, 515, 516, 518, 519, 520, 521, 523, 526, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 550, 551, 553, 555, 558, 559, 560, 563, 565, 566, 567, 568, 571, 572, 575, 577, 580, 583, 585, 586, 587, 589, 590, 594, 595, 596, 597, 600, 601, 606, 608, 609, 611, 616, 617, 624, 628, 635, 636, 637, 638, 639, 641, 646, 647, 649, 651, 652, 654, 655, 656, 657, 659, 661, 663, 664, 673, 716, 717, 721, 723, 724, 727, 732, 735, 738], "82": [6, 11, 37, 44, 62, 179, 319, 428, 515, 535, 638, 639], "mish": [6, 28, 526, 684], "30340147": [6, 63, 526], "86509842": [6, 28, 63, 526], "sigmoid": [6, 12, 28, 35, 250, 299, 314, 413, 526, 684, 743, 746, 747], "269": [6, 65], "731": [6, 65], "881": [6, 11, 34, 65, 179, 192, 232, 532], "softmax": [6, 16, 27, 28, 39, 526, 536, 562, 563, 684, 706], "422": [6, 66, 526], "155": [6, 39, 66, 526, 536, 560], "softplu": [6, 28, 526, 684, 741], "beta": [6, 12, 20, 28, 35, 43, 67, 259, 262, 263, 301, 308, 314, 356, 415, 416, 526, 542, 635, 684, 741], "threshold": [6, 11, 12, 28, 34, 35, 67, 224, 225, 256, 274, 299, 304, 310, 400, 526, 532, 684, 741], "3461": [6, 28, 67, 526], "6491": [6, 28, 67, 526], "535": [6, 28, 67, 526, 729], "22": [6, 11, 12, 13, 21, 25, 28, 35, 36, 39, 44, 62, 67, 188, 196, 307, 308, 315, 319, 325, 326, 328, 343, 344, 345, 346, 349, 354, 418, 428, 449, 480, 513, 526, 532, 536, 537, 541, 544, 547, 559, 560, 568, 573, 580, 624, 634, 637, 638, 639, 646, 656, 657, 716, 723, 729], "09": [6, 11, 37, 44, 67, 231, 241, 515, 526, 532, 535, 638], "31": [6, 11, 12, 34, 35, 36, 39, 44, 62, 67, 92, 187, 218, 226, 307, 319, 327, 328, 428, 443, 526, 529, 532, 534, 638, 639, 746], "55": [6, 35, 44, 67, 187, 246, 319, 428, 463, 532, 534, 537, 543, 547, 573, 580, 638, 639, 657, 719], "13": [6, 11, 12, 16, 17, 21, 25, 34, 35, 36, 37, 39, 42, 44, 48, 52, 67, 121, 151, 176, 188, 191, 200, 211, 231, 240, 284, 291, 297, 304, 307, 310, 327, 328, 338, 343, 349, 379, 383, 388, 405, 417, 428, 429, 443, 444, 448, 449, 464, 485, 493, 515, 526, 530, 531, 532, 534, 535, 536, 537, 539, 540, 541, 544, 545, 547, 550, 551, 559, 560, 568, 572, 580, 586, 611, 615, 628, 637, 638, 639, 646, 647, 655, 656, 657, 723, 727, 736], "collect": [7, 29, 30, 526, 531, 534, 535, 536, 538, 541, 542, 543, 629, 684, 688, 689, 691, 692, 716, 724, 729, 733, 734, 737, 738, 750, 756, 758, 761], "accept": [7, 8, 11, 12, 17, 30, 34, 35, 75, 76, 77, 84, 85, 86, 87, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 108, 124, 128, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 196, 198, 199, 200, 204, 205, 206, 207, 208, 209, 210, 213, 215, 216, 217, 218, 220, 221, 222, 223, 226, 228, 229, 230, 231, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 258, 268, 269, 275, 278, 279, 298, 301, 304, 306, 307, 308, 310, 319, 325, 326, 327, 328, 330, 331, 332, 338, 343, 344, 345, 346, 356, 393, 427, 430, 434, 441, 449, 450, 455, 459, 461, 463, 465, 479, 496, 501, 524, 529, 530, 532, 534, 535, 536, 537, 539, 541, 542, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 591, 592, 593, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 635, 642, 643, 645, 646, 647, 648, 649, 650, 651, 654, 658, 659, 660, 661, 662, 663, 664, 665, 666, 706, 715, 716, 717, 720, 723, 726, 727, 728, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 745, 753, 756], "_to_ivi": 7, "_to_n": 7, "to_ignor": [7, 27, 50, 541, 627, 628], "args_to_ivi": 7, "include_deriv": [7, 30, 541, 617, 628, 670], "nest": [7, 29, 30, 53, 55, 196, 470, 498, 514, 517, 532, 534, 535, 540, 613, 614, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 686, 689, 690, 692, 720, 722, 723, 732, 734, 739, 746, 747, 751, 753, 758], "unchang": [7, 11, 307, 310, 350, 383, 536, 559], "recurs": [7, 29, 30, 119, 120, 152, 153, 453, 454, 530, 531, 534, 541, 616, 617, 626, 627, 628, 716, 719, 722, 723, 732, 735, 747, 751], "deriv": [7, 8, 12, 14, 30, 31, 35, 37, 85, 90, 97, 102, 258, 262, 279, 301, 304, 515, 516, 519, 520, 521, 522, 523, 529, 535, 540, 541, 615, 617, 628, 690, 692, 693, 725, 726, 745, 747], "word": [7, 75, 310, 386, 529, 543, 639, 685, 688, 723, 735, 736, 753], "args_to_n": [7, 735], "cont_inplac": 7, "place": [7, 8, 11, 12, 13, 17, 19, 29, 31, 33, 34, 35, 36, 42, 75, 76, 77, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 108, 124, 128, 167, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 196, 198, 199, 200, 204, 205, 206, 207, 208, 209, 210, 213, 215, 216, 217, 218, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 257, 258, 261, 268, 269, 273, 275, 278, 279, 283, 285, 286, 287, 288, 290, 291, 292, 295, 296, 301, 304, 307, 308, 310, 319, 325, 326, 327, 328, 330, 331, 332, 338, 343, 344, 345, 346, 356, 383, 393, 398, 414, 427, 430, 434, 441, 449, 450, 455, 459, 461, 463, 464, 465, 479, 496, 501, 524, 529, 530, 531, 532, 534, 535, 536, 537, 539, 541, 542, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 591, 592, 593, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 635, 642, 643, 645, 646, 647, 648, 649, 650, 651, 654, 658, 659, 660, 661, 662, 663, 664, 665, 666, 690, 692, 706, 712, 714, 717, 718, 719, 722, 723, 724, 726, 727, 728, 731, 732, 736, 737, 738, 739, 741, 748, 753, 760], "ignor": [7, 8, 12, 29, 35, 93, 307, 308, 310, 330, 331, 332, 356, 395, 396, 400, 529, 536, 537, 541, 562, 574, 627, 628, 692, 722, 724, 727, 738, 751, 764], "decid": [7, 29, 541, 616, 617, 626, 627, 628, 706, 715, 716, 725, 741], "go": [7, 12, 39, 307, 349, 541, 616, 617, 626, 627, 628, 706, 711, 712, 715, 716, 717, 718, 721, 722, 724, 725, 727, 730, 736, 737, 738, 739, 742, 746, 751, 754, 758, 759, 763, 765], "deeper": [7, 541, 616, 617, 626, 627, 628, 708, 717, 718, 738, 742], "to_ivi": [7, 30, 541, 629, 735], "leaf": [7, 29, 48, 541, 626, 627, 629, 656, 723, 732, 746], "nativearrai": [7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 25, 28, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 74, 76, 77, 83, 85, 90, 91, 92, 93, 94, 95, 97, 98, 99, 102, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 118, 121, 124, 125, 126, 128, 130, 132, 133, 139, 149, 150, 166, 167, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 262, 263, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 301, 304, 305, 307, 308, 309, 310, 313, 314, 315, 317, 319, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 342, 343, 344, 345, 346, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 381, 382, 383, 384, 385, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 427, 428, 429, 430, 431, 437, 440, 441, 443, 444, 448, 449, 450, 452, 455, 456, 457, 458, 459, 461, 463, 464, 465, 468, 471, 472, 474, 479, 480, 481, 483, 492, 493, 494, 495, 496, 498, 500, 501, 503, 513, 515, 516, 517, 519, 521, 522, 523, 524, 526, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 617, 618, 619, 623, 624, 625, 628, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 693, 720, 723, 727, 729, 731, 732, 733, 735, 736, 739, 740, 743, 745, 753], "manner": [7, 30, 541, 628, 708, 716, 726, 728, 732, 736, 739, 746, 750, 751, 754, 756, 764, 765], "travers": [7, 30, 541, 628, 723, 725, 729, 743], "lowest": [7, 12, 21, 30, 35, 44, 319, 430, 541, 543, 628, 637, 732, 751, 753, 755, 759, 763], "leav": [7, 12, 30, 32, 34, 35, 36, 39, 40, 42, 48, 53, 118, 121, 193, 249, 250, 310, 378, 383, 395, 396, 397, 410, 411, 412, 428, 429, 434, 452, 498, 539, 541, 555, 563, 568, 585, 599, 603, 608, 610, 611, 616, 617, 626, 627, 628, 629, 655, 656, 700, 706, 715, 723, 724, 725, 727, 728, 731, 732, 735, 736, 738, 746, 747], "search": [7, 12, 30, 35, 642, 643, 680, 708, 714, 716, 723, 727, 738, 739], "to_n": [7, 30, 743], "mayb": [7, 706, 716, 724, 743, 745], "_arraywithcr": [8, 52], "asarrai": [8, 12, 13, 24, 31, 35, 36, 47, 76, 317, 419, 420, 448, 459, 463, 464, 493, 494, 529, 534, 536, 545, 546, 550, 648, 652, 729, 733, 736, 737], "devic": [8, 12, 21, 29, 31, 35, 44, 52, 54, 55, 56, 75, 76, 77, 84, 85, 86, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 146, 147, 148, 149, 150, 151, 152, 153, 154, 159, 160, 161, 162, 164, 165, 166, 167, 168, 170, 172, 257, 258, 268, 269, 301, 314, 381, 413, 414, 416, 417, 439, 453, 454, 529, 534, 543, 636, 637, 638, 639, 668, 670, 671, 685, 687, 688, 689, 690, 691, 692, 693, 694, 697, 706, 709, 717, 718, 721, 725, 729, 732, 733, 737, 738, 739, 741, 743, 748, 751, 752, 753, 757, 758, 760, 761, 762, 763], "ndarrai": [8, 12, 13, 31, 35, 76, 77, 94, 307, 308, 310, 319, 350, 367, 398, 433, 434, 500, 529, 534, 697, 700, 715, 720, 725, 726, 729, 731, 735, 736, 737, 739, 741, 743, 745, 748, 753], "boolean": [8, 9, 11, 12, 13, 19, 22, 25, 29, 31, 32, 34, 35, 36, 42, 45, 48, 52, 53, 72, 74, 76, 77, 83, 89, 105, 121, 123, 125, 126, 129, 145, 155, 163, 169, 183, 184, 185, 186, 187, 188, 220, 221, 222, 223, 286, 304, 308, 310, 358, 367, 370, 374, 375, 376, 379, 381, 383, 384, 385, 388, 392, 399, 405, 437, 440, 458, 461, 462, 466, 467, 468, 469, 470, 471, 472, 481, 483, 486, 487, 489, 490, 513, 528, 529, 530, 531, 532, 534, 539, 540, 541, 544, 547, 600, 601, 602, 604, 606, 607, 609, 611, 613, 614, 626, 644, 645, 646, 658, 660, 673, 674, 675, 676, 680, 691, 723, 725, 732, 736, 738, 741], "never": [8, 12, 19, 31, 35, 42, 77, 310, 374, 375, 376, 379, 381, 383, 384, 385, 388, 392, 399, 405, 458, 534, 539, 600, 601, 602, 604, 606, 607, 609, 611, 717, 725, 735, 736, 738], "valueerror": [8, 12, 19, 31, 35, 42, 46, 77, 307, 310, 340, 350, 374, 375, 376, 379, 381, 383, 384, 385, 388, 392, 398, 399, 405, 458, 534, 539, 600, 601, 602, 604, 606, 607, 609, 611, 650, 701, 729], "reus": [8, 12, 19, 31, 35, 42, 77, 310, 374, 375, 376, 379, 381, 383, 384, 385, 388, 392, 399, 405, 458, 534, 539, 600, 601, 602, 604, 606, 607, 609, 611, 729, 738, 763], "exist": [8, 12, 13, 19, 29, 31, 35, 42, 77, 310, 374, 375, 376, 378, 379, 381, 383, 384, 385, 388, 392, 399, 405, 447, 458, 534, 539, 598, 600, 601, 602, 604, 606, 607, 609, 611, 692, 694, 706, 708, 709, 715, 716, 719, 721, 727, 728, 732, 733, 735, 736, 738, 741, 743, 751, 753, 756, 758, 761, 764], "buffer": [8, 12, 19, 31, 35, 42, 77, 88, 310, 374, 375, 376, 379, 381, 383, 384, 385, 388, 392, 399, 405, 458, 529, 534, 539, 600, 601, 602, 604, 606, 607, 609, 611, 690, 735, 751], "nativedtyp": [8, 9, 12, 16, 17, 21, 22, 25, 31, 35, 40, 44, 45, 48, 75, 76, 77, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 101, 102, 104, 105, 110, 111, 112, 113, 114, 115, 116, 117, 122, 123, 127, 129, 131, 135, 145, 257, 258, 259, 260, 261, 262, 263, 272, 277, 291, 301, 304, 314, 319, 413, 414, 415, 416, 417, 427, 428, 429, 430, 433, 529, 530, 536, 537, 543, 544, 546, 547, 559, 592, 637, 638, 639, 642, 643, 653, 655, 656, 661, 663, 687, 725, 726, 731, 739, 743], "nativedevic": [8, 10, 12, 21, 31, 33, 35, 44, 75, 76, 77, 84, 85, 86, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 102, 147, 148, 149, 150, 151, 154, 159, 160, 161, 162, 164, 165, 166, 167, 168, 172, 257, 258, 268, 301, 314, 413, 414, 416, 417, 529, 531, 543, 636, 637, 638, 639, 687, 692, 693, 725, 726, 729, 731, 739], "interpret": [8, 12, 31, 35, 76, 77, 88, 94, 319, 427, 529, 724, 759], "9": [8, 9, 11, 12, 13, 14, 16, 17, 19, 21, 23, 24, 25, 28, 32, 34, 35, 36, 37, 39, 40, 42, 44, 46, 47, 48, 52, 53, 59, 75, 76, 77, 94, 111, 112, 113, 114, 115, 118, 121, 174, 176, 178, 179, 182, 183, 184, 187, 193, 194, 200, 207, 213, 214, 215, 221, 222, 224, 225, 226, 229, 231, 232, 236, 237, 240, 241, 242, 247, 249, 252, 253, 279, 280, 284, 290, 291, 297, 299, 304, 305, 307, 310, 317, 319, 325, 326, 327, 328, 333, 334, 338, 339, 343, 344, 346, 348, 349, 360, 374, 375, 376, 379, 383, 388, 398, 399, 400, 402, 405, 415, 417, 420, 429, 444, 448, 449, 450, 452, 455, 463, 464, 467, 468, 471, 479, 480, 493, 495, 515, 516, 517, 521, 526, 529, 530, 532, 534, 535, 536, 537, 539, 541, 543, 544, 545, 546, 547, 550, 551, 552, 555, 558, 559, 560, 565, 566, 568, 571, 572, 575, 576, 577, 580, 583, 585, 586, 587, 589, 590, 597, 601, 605, 606, 608, 609, 611, 616, 617, 622, 624, 627, 628, 636, 637, 638, 639, 641, 646, 647, 649, 651, 652, 654, 656, 657, 659, 661, 663, 664, 673, 692, 723, 727, 734, 738, 746, 747, 754], "39999998": [8, 76, 77, 529, 545, 648], "5999999": [8, 39, 76, 77, 529, 536, 559, 563], "0999999": [8, 25, 76, 77, 288, 304, 529, 659], "10000038": [8, 76, 77, 529], "np": [8, 11, 12, 34, 35, 36, 76, 77, 83, 94, 129, 206, 210, 307, 308, 334, 339, 351, 493, 529, 530, 532, 534, 541, 622, 670, 697, 700, 706, 715, 720, 725, 726, 729, 731, 735, 736, 737, 738, 739, 741, 743, 745, 746, 748, 753], "90786433e": [8, 76, 77, 529], "310": [8, 76, 77, 529], "copy_arrai": [8, 31, 529], "to_ivy_arrai": [8, 31, 83, 529], "empty_lik": [8, 31, 308, 354, 529], "deafult": [8, 22, 45, 85, 529, 544, 642], "uniniti": [8, 84, 85, 529, 730], "from_dlpack": [8, 31, 529], "full_lik": [8, 31, 529, 739], "fill_valu": [8, 12, 22, 31, 35, 45, 89, 90, 205, 213, 314, 417, 529, 532, 544, 645, 694, 725, 737, 739], "fill": [8, 11, 12, 21, 22, 29, 31, 34, 35, 44, 45, 84, 89, 90, 92, 95, 96, 97, 101, 102, 227, 258, 301, 308, 310, 314, 358, 362, 367, 370, 382, 401, 414, 416, 417, 529, 532, 543, 544, 637, 645, 687, 715, 737], "equal": [8, 9, 11, 12, 13, 17, 18, 19, 21, 23, 24, 25, 29, 32, 34, 35, 36, 40, 41, 42, 44, 47, 52, 53, 86, 88, 89, 90, 96, 97, 105, 185, 187, 191, 196, 198, 207, 208, 229, 231, 236, 239, 240, 244, 270, 271, 273, 286, 301, 304, 307, 310, 313, 319, 329, 379, 388, 405, 410, 411, 412, 430, 437, 440, 514, 529, 530, 532, 534, 537, 538, 539, 543, 544, 545, 546, 547, 568, 577, 578, 581, 583, 589, 594, 597, 599, 604, 606, 612, 639, 645, 647, 648, 649, 650, 651, 654, 659, 661, 662, 663, 664, 680, 687, 688, 722, 723, 725, 727, 729, 737, 738], "000123": [8, 90, 529], "ones": [8, 12, 14, 16, 21, 29, 31, 35, 39, 44, 86, 90, 95, 97, 102, 152, 153, 189, 258, 301, 515, 529, 531, 532, 535, 536, 554, 555, 637, 638, 639, 674, 706, 715, 720, 724, 727, 731, 732, 738, 745, 746, 758], "linspac": [8, 31, 75, 529, 706, 731, 741, 743, 765], "stop": [8, 12, 14, 31, 35, 37, 75, 91, 92, 166, 308, 367, 370, 481, 516, 519, 521, 522, 523, 524, 529, 531, 534, 535, 540, 541, 613, 614, 615, 627, 692, 731, 734, 741, 743, 751, 758], "num": [8, 31, 91, 92, 529, 673, 717, 731, 743], "endpoint": [8, 31, 91, 92, 529, 687, 731], "logspac": [8, 31, 529, 743], "10": [8, 11, 12, 13, 14, 16, 17, 21, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 75, 90, 91, 92, 175, 183, 184, 187, 191, 198, 203, 205, 211, 213, 215, 226, 232, 239, 240, 245, 250, 273, 276, 281, 283, 284, 286, 287, 288, 290, 291, 297, 304, 307, 310, 319, 325, 326, 327, 328, 338, 343, 344, 346, 348, 349, 350, 376, 379, 383, 388, 399, 405, 425, 428, 429, 432, 434, 436, 448, 449, 450, 452, 455, 456, 458, 463, 464, 472, 480, 483, 488, 493, 495, 506, 509, 521, 529, 532, 534, 535, 536, 537, 539, 541, 542, 543, 544, 545, 546, 547, 550, 551, 553, 559, 566, 568, 572, 573, 575, 576, 577, 580, 585, 586, 587, 601, 606, 607, 608, 609, 611, 622, 624, 627, 628, 635, 636, 637, 638, 639, 645, 647, 653, 655, 656, 657, 658, 660, 661, 663, 664, 673, 675, 692, 706, 709, 716, 719, 723, 724, 725, 727, 734, 737, 738, 743, 745, 746, 763], "rang": [8, 12, 25, 31, 35, 75, 91, 92, 240, 308, 310, 319, 356, 364, 386, 394, 396, 403, 428, 429, 430, 448, 514, 529, 532, 534, 545, 547, 647, 655, 656, 661, 663, 673, 675, 676, 687, 706, 725, 729, 732, 738, 743, 746, 747, 748, 758, 764], "log": [8, 11, 12, 17, 31, 34, 35, 40, 92, 216, 218, 231, 249, 250, 289, 295, 299, 304, 309, 314, 371, 413, 529, 532, 583, 673, 675, 676, 684, 717, 723, 724, 727, 732, 735, 736, 737, 738, 740, 741, 743, 746], "space": [8, 11, 12, 13, 31, 34, 35, 36, 75, 91, 92, 245, 284, 304, 448, 452, 529, 532, 534, 709, 741], "sequenc": [8, 12, 16, 17, 19, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 86, 88, 90, 92, 95, 97, 102, 106, 108, 121, 125, 126, 133, 167, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 252, 253, 254, 255, 256, 258, 261, 266, 267, 273, 274, 275, 277, 279, 285, 286, 292, 294, 295, 296, 297, 299, 301, 305, 307, 308, 310, 314, 319, 322, 323, 330, 331, 332, 334, 335, 339, 340, 342, 349, 350, 358, 359, 361, 365, 366, 367, 370, 372, 374, 375, 376, 378, 379, 380, 386, 388, 389, 391, 392, 394, 397, 399, 401, 402, 405, 406, 407, 409, 410, 411, 412, 414, 415, 427, 428, 429, 430, 436, 437, 440, 441, 443, 444, 448, 449, 450, 452, 455, 456, 459, 461, 463, 464, 465, 467, 468, 471, 475, 479, 480, 493, 494, 496, 498, 500, 501, 513, 514, 517, 518, 519, 524, 529, 532, 534, 535, 536, 537, 539, 541, 547, 548, 549, 550, 551, 552, 553, 554, 556, 558, 559, 560, 562, 563, 564, 565, 570, 571, 572, 573, 575, 576, 578, 580, 582, 583, 589, 592, 594, 595, 596, 597, 598, 600, 601, 603, 604, 605, 606, 607, 608, 611, 612, 616, 623, 633, 636, 637, 638, 639, 641, 644, 647, 648, 649, 650, 651, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 688, 691, 693, 717, 724, 725, 726, 727, 729, 738, 739, 741, 743, 748, 750, 761], "gener": [8, 11, 12, 16, 21, 27, 31, 34, 35, 39, 44, 50, 75, 91, 92, 100, 108, 193, 196, 206, 207, 222, 226, 235, 257, 260, 264, 265, 266, 267, 268, 301, 308, 314, 319, 368, 415, 427, 529, 530, 532, 536, 537, 539, 543, 547, 559, 583, 587, 590, 612, 636, 637, 639, 640, 662, 673, 676, 680, 692, 700, 715, 716, 717, 718, 719, 720, 722, 725, 726, 727, 728, 729, 731, 732, 735, 736, 737, 739, 742, 743, 745, 747, 748, 750, 751, 753, 756, 757, 758, 759, 760, 761, 762, 763, 764], "relev": [8, 31, 92, 529, 692, 706, 709, 715, 716, 717, 720, 723, 724, 725, 727, 733, 734, 737, 738, 746, 752, 756, 763, 764], "sampl": [8, 11, 12, 21, 25, 31, 34, 35, 44, 48, 91, 92, 245, 307, 310, 314, 330, 331, 332, 342, 396, 413, 414, 415, 416, 417, 529, 532, 543, 547, 636, 637, 638, 639, 662, 664, 688, 737, 738], "on_valu": [8, 31, 92, 95, 529], "off_valu": [8, 31, 92, 95, 529], "cuda": [8, 12, 21, 31, 35, 44, 91, 92, 95, 146, 147, 148, 162, 164, 314, 413, 414, 416, 417, 529, 531, 543, 636, 637, 638, 639, 687, 688, 689, 690, 691, 692, 693, 706, 743, 751, 753, 763], "cpu": [8, 10, 12, 21, 31, 33, 35, 44, 75, 86, 89, 91, 92, 95, 96, 97, 102, 146, 147, 149, 150, 151, 152, 157, 160, 162, 164, 167, 168, 170, 172, 314, 413, 414, 416, 417, 529, 531, 537, 543, 574, 636, 637, 638, 639, 670, 687, 688, 689, 690, 691, 692, 693, 706, 716, 717, 722, 726, 736, 738, 751, 756, 758, 761, 763], "evenli": [8, 11, 12, 16, 19, 29, 31, 34, 39, 42, 75, 91, 92, 245, 307, 349, 529, 532, 536, 539, 549, 550, 551, 552, 554, 556, 558, 606], "descript": [8, 11, 12, 17, 34, 35, 40, 75, 76, 77, 84, 85, 86, 87, 89, 90, 91, 92, 93, 96, 97, 98, 99, 101, 102, 108, 124, 128, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 196, 198, 199, 200, 204, 205, 206, 207, 208, 209, 210, 213, 215, 216, 217, 218, 220, 221, 222, 223, 226, 228, 229, 230, 231, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 258, 269, 275, 278, 301, 304, 307, 308, 310, 319, 325, 326, 327, 328, 330, 331, 332, 338, 343, 344, 345, 346, 356, 393, 427, 430, 455, 459, 461, 463, 501, 524, 529, 530, 532, 534, 535, 536, 537, 539, 541, 542, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 591, 592, 593, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 635, 642, 643, 645, 646, 647, 648, 649, 650, 651, 654, 658, 659, 660, 661, 662, 663, 664, 665, 666, 715, 717, 728, 734, 735], "hint": [8, 11, 12, 17, 34, 35, 75, 76, 77, 84, 85, 86, 87, 89, 90, 91, 92, 93, 96, 97, 98, 99, 101, 102, 108, 124, 128, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 196, 198, 199, 200, 204, 205, 206, 207, 208, 209, 210, 213, 215, 216, 217, 218, 220, 221, 222, 223, 226, 228, 229, 230, 231, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 258, 269, 275, 278, 301, 304, 307, 308, 310, 319, 325, 326, 327, 328, 330, 331, 332, 338, 343, 344, 345, 346, 356, 393, 427, 430, 455, 459, 461, 463, 501, 524, 529, 530, 532, 534, 535, 536, 537, 539, 541, 542, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 591, 592, 593, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 635, 642, 643, 645, 646, 647, 648, 649, 650, 651, 654, 658, 659, 660, 661, 662, 663, 664, 665, 666, 715, 720, 728, 731, 732, 735, 736, 739], "assum": [8, 11, 12, 13, 16, 17, 18, 29, 34, 35, 36, 39, 40, 41, 75, 76, 77, 84, 85, 86, 87, 89, 90, 91, 92, 93, 96, 97, 98, 99, 101, 102, 108, 124, 128, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 196, 198, 199, 200, 204, 205, 206, 207, 208, 209, 210, 213, 215, 216, 217, 218, 220, 221, 222, 223, 226, 228, 229, 230, 231, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 258, 269, 275, 278, 294, 301, 304, 307, 308, 310, 319, 325, 326, 327, 328, 330, 331, 332, 338, 343, 344, 345, 346, 356, 366, 393, 427, 430, 455, 459, 461, 463, 472, 501, 524, 529, 530, 532, 534, 535, 536, 537, 538, 539, 541, 542, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 591, 592, 593, 594, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 635, 642, 643, 645, 646, 647, 648, 649, 650, 651, 654, 658, 659, 660, 661, 662, 663, 664, 665, 666, 688, 700, 706, 716, 719, 721, 724, 725, 728, 737, 738, 741, 745, 746, 751], "simplic": [8, 11, 12, 17, 34, 35, 75, 76, 77, 84, 85, 86, 87, 89, 90, 91, 92, 93, 96, 97, 98, 99, 101, 102, 108, 124, 128, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 196, 198, 199, 200, 204, 205, 206, 207, 208, 209, 210, 213, 215, 216, 217, 218, 220, 221, 222, 223, 226, 228, 229, 230, 231, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 258, 269, 275, 278, 301, 304, 307, 308, 310, 319, 325, 326, 327, 328, 330, 331, 332, 338, 343, 344, 345, 346, 356, 393, 427, 430, 455, 459, 461, 463, 501, 524, 529, 530, 532, 534, 535, 536, 537, 539, 541, 542, 544, 545, 546, 547, 550, 551, 552, 553, 554, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 591, 592, 593, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 635, 642, 643, 645, 646, 647, 648, 649, 650, 651, 654, 658, 659, 660, 661, 662, 663, 664, 728, 741, 747, 750], "nestabl": [8, 11, 12, 17, 34, 35, 75, 76, 77, 84, 85, 86, 87, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 108, 124, 128, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 196, 198, 199, 200, 204, 205, 206, 207, 208, 209, 213, 215, 216, 217, 218, 220, 221, 222, 223, 226, 228, 229, 230, 231, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 258, 268, 269, 275, 278, 301, 304, 307, 308, 310, 319, 325, 326, 327, 328, 330, 331, 332, 338, 343, 344, 345, 346, 356, 393, 427, 430, 434, 441, 449, 450, 455, 459, 461, 463, 465, 479, 496, 501, 524, 529, 530, 532, 534, 535, 536, 537, 539, 541, 542, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 591, 592, 593, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 635, 642, 643, 645, 646, 647, 648, 649, 650, 651, 654, 658, 659, 660, 661, 662, 663, 664, 665, 666, 715, 718, 727, 728, 735, 738, 753], "therefor": [8, 11, 12, 17, 34, 35, 75, 76, 77, 84, 85, 86, 87, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 108, 124, 128, 132, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 196, 198, 199, 200, 204, 205, 206, 207, 208, 209, 213, 215, 216, 217, 218, 220, 221, 222, 223, 226, 228, 229, 230, 231, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 258, 268, 269, 275, 278, 301, 304, 307, 308, 310, 319, 325, 326, 327, 328, 330, 331, 332, 338, 343, 344, 345, 346, 356, 386, 393, 394, 396, 403, 427, 430, 434, 441, 449, 450, 455, 459, 461, 463, 465, 479, 496, 501, 524, 529, 530, 532, 534, 535, 536, 537, 539, 541, 542, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 591, 592, 593, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 635, 642, 643, 645, 646, 647, 648, 649, 650, 651, 654, 658, 659, 660, 661, 662, 663, 664, 665, 666, 706, 708, 712, 715, 717, 719, 720, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 735, 736, 737, 738, 739, 741, 743, 745, 747, 751, 755, 758, 764], "01": [8, 12, 13, 14, 35, 36, 37, 40, 44, 92, 218, 236, 237, 257, 263, 286, 301, 307, 328, 338, 339, 452, 493, 494, 515, 516, 521, 529, 532, 534, 535, 537, 540, 543, 571, 615, 638, 639, 673, 721, 748], "02": [8, 13, 14, 20, 21, 34, 37, 44, 92, 178, 179, 218, 307, 328, 338, 339, 493, 494, 515, 516, 521, 529, 532, 534, 535, 538, 542, 543, 594, 635, 638, 639, 737], "03": [8, 11, 13, 14, 34, 37, 44, 92, 191, 216, 493, 494, 516, 521, 529, 532, 534, 535, 537, 538, 573, 594, 638], "04": [8, 14, 28, 32, 37, 61, 62, 92, 118, 198, 484, 515, 516, 521, 526, 529, 530, 532, 534, 535, 673, 716, 738], "05": [8, 11, 12, 14, 20, 34, 35, 37, 43, 92, 218, 263, 273, 286, 301, 304, 313, 407, 408, 409, 463, 484, 505, 515, 516, 521, 529, 532, 534, 535, 537, 542, 576, 635, 668, 673, 687, 691, 737, 738], "464": [8, 11, 44, 92, 180, 181, 532], "15888336": [8, 92], "2154": [8, 92], "43469003": [8, 92], "10000": [8, 31, 92, 529], "meshgrid": [8, 31, 529], "spars": [8, 12, 18, 31, 35, 41, 93, 261, 301, 308, 358, 367, 370, 529, 538, 596], "index": [8, 12, 13, 19, 22, 23, 24, 29, 31, 35, 36, 42, 45, 46, 47, 86, 93, 162, 258, 264, 265, 270, 271, 301, 307, 308, 310, 315, 317, 319, 329, 335, 359, 361, 366, 383, 386, 394, 396, 398, 401, 403, 418, 419, 428, 436, 438, 456, 458, 479, 480, 483, 527, 529, 531, 534, 539, 541, 544, 545, 546, 604, 608, 618, 619, 620, 623, 624, 625, 631, 633, 642, 643, 645, 647, 648, 649, 651, 653, 674, 688, 702, 723, 724, 729, 732, 733, 734, 735, 737, 738, 745, 758], "xy": [8, 31, 93, 529], "dimension": [8, 11, 12, 17, 19, 22, 25, 26, 29, 31, 34, 35, 40, 42, 48, 49, 52, 75, 86, 88, 93, 100, 245, 268, 301, 307, 308, 310, 319, 334, 335, 339, 340, 350, 353, 374, 375, 376, 382, 383, 425, 436, 529, 532, 537, 539, 544, 547, 548, 565, 566, 572, 575, 578, 580, 581, 591, 592, 606, 642, 643, 645, 658, 659, 660, 661, 662, 663, 664, 665, 666, 732, 734, 738, 741, 743, 755, 758, 765], "repres": [8, 11, 12, 16, 17, 34, 35, 39, 40, 74, 93, 95, 117, 175, 176, 179, 182, 191, 193, 200, 226, 239, 243, 244, 261, 270, 271, 284, 301, 304, 307, 308, 310, 313, 314, 317, 349, 360, 393, 407, 408, 409, 413, 419, 426, 528, 529, 530, 532, 536, 537, 559, 560, 572, 580, 583, 584, 675, 687, 691, 720, 741, 745, 755, 756, 759], "grid": [8, 93, 261, 301, 529, 727, 738, 750], "coordin": [8, 11, 22, 34, 35, 45, 93, 100, 181, 243, 264, 265, 268, 284, 301, 315, 418, 529, 532, 544, 645], "numer": [8, 9, 11, 12, 13, 17, 21, 22, 25, 32, 34, 35, 36, 40, 44, 45, 47, 52, 53, 93, 105, 173, 176, 189, 193, 198, 199, 200, 207, 208, 209, 212, 221, 222, 226, 228, 229, 230, 231, 235, 236, 237, 241, 242, 246, 247, 314, 319, 414, 427, 484, 485, 493, 494, 505, 506, 529, 530, 532, 534, 537, 543, 544, 547, 565, 572, 575, 580, 583, 585, 587, 589, 591, 637, 638, 639, 641, 642, 643, 645, 646, 651, 658, 661, 663, 673, 674, 675, 676, 687, 725, 734, 736, 737, 738, 739, 740, 741, 743, 747, 755, 758, 764], "conserv": [8, 93, 529], "cartesian": [8, 93, 529], "ij": [8, 25, 93, 529, 547, 657], "zero": [8, 9, 11, 12, 14, 16, 17, 19, 22, 23, 25, 26, 31, 32, 34, 35, 37, 39, 40, 44, 45, 48, 49, 61, 63, 64, 65, 83, 84, 86, 88, 93, 95, 96, 97, 98, 99, 102, 105, 106, 174, 175, 176, 178, 179, 180, 181, 182, 185, 187, 188, 190, 191, 192, 193, 198, 199, 200, 207, 208, 209, 210, 216, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 238, 239, 240, 241, 243, 244, 246, 247, 248, 252, 253, 256, 258, 269, 276, 277, 278, 280, 288, 291, 293, 294, 295, 299, 301, 304, 307, 308, 310, 317, 319, 328, 329, 330, 331, 332, 334, 335, 338, 339, 340, 349, 350, 354, 356, 365, 387, 392, 393, 419, 428, 429, 444, 448, 455, 475, 515, 516, 521, 522, 523, 524, 526, 529, 530, 532, 534, 535, 536, 537, 539, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 558, 559, 560, 563, 564, 566, 571, 573, 574, 575, 576, 577, 578, 579, 581, 583, 591, 592, 599, 600, 601, 602, 604, 605, 612, 635, 637, 638, 639, 642, 643, 644, 645, 647, 648, 649, 650, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 673, 687, 688, 692, 710, 720, 723, 725, 726, 727, 731, 733, 734, 737, 743, 746, 747, 757], "effect": [8, 12, 14, 25, 35, 37, 48, 93, 307, 309, 342, 371, 515, 523, 529, 535, 536, 547, 562, 662, 664, 673, 676, 709, 715, 720, 723, 724, 728, 731, 735, 737, 741, 751], "ni": [8, 93, 529], "xi": [8, 93, 529], "native_arrai": [8, 9, 11, 31, 33, 34, 35, 36, 47, 59, 62, 90, 93, 95, 97, 102, 105, 106, 107, 108, 116, 121, 128, 150, 159, 167, 183, 187, 188, 192, 193, 194, 196, 200, 204, 205, 212, 213, 221, 226, 229, 232, 235, 240, 297, 310, 393, 399, 402, 437, 467, 468, 471, 500, 526, 529, 530, 531, 532, 534, 536, 537, 538, 539, 543, 544, 547, 548, 550, 551, 558, 563, 566, 571, 577, 578, 586, 587, 589, 592, 594, 596, 597, 604, 636, 645, 654, 660, 663, 665, 670, 679, 697, 737, 738], "one_hot": [8, 31, 529, 706, 748], "depth": [8, 12, 16, 31, 35, 39, 95, 307, 310, 342, 380, 448, 460, 529, 534, 536, 541, 554, 555, 628, 686, 690, 717, 724, 746, 747, 748, 750, 752], "scatter": [8, 13, 31, 36, 95, 479, 480, 529, 534, 722, 735, 741, 765], "defin": [8, 12, 13, 17, 31, 35, 36, 40, 65, 95, 98, 99, 100, 176, 193, 200, 226, 227, 235, 237, 240, 249, 259, 262, 263, 268, 269, 270, 271, 275, 299, 301, 304, 307, 308, 310, 319, 342, 354, 393, 399, 430, 463, 464, 483, 526, 529, 532, 534, 537, 547, 565, 570, 571, 584, 658, 659, 660, 662, 706, 715, 716, 720, 721, 724, 725, 728, 731, 734, 736, 737, 738, 739, 745, 747, 751, 753, 755, 756, 757, 758, 759, 762, 764, 765], "hot": [8, 31, 95, 529, 706], "dimens": [8, 12, 13, 16, 17, 18, 19, 21, 22, 23, 25, 26, 29, 31, 35, 36, 39, 40, 41, 42, 44, 45, 46, 48, 49, 52, 53, 55, 62, 66, 95, 98, 99, 261, 267, 269, 270, 271, 277, 278, 284, 291, 297, 301, 304, 305, 307, 308, 309, 310, 313, 314, 317, 319, 321, 322, 323, 325, 326, 327, 329, 334, 335, 339, 343, 344, 345, 346, 349, 351, 352, 355, 368, 371, 374, 375, 376, 383, 394, 395, 396, 397, 399, 407, 408, 409, 415, 417, 420, 430, 432, 433, 434, 436, 448, 449, 450, 452, 459, 492, 495, 514, 526, 529, 534, 536, 537, 538, 539, 540, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 564, 565, 566, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 591, 592, 595, 596, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 613, 614, 615, 641, 642, 643, 645, 647, 648, 649, 650, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 673, 675, 688, 691, 727, 729, 734, 736, 737, 738, 741, 743, 746], "overrid": [8, 12, 31, 35, 95, 319, 427, 529, 720, 722], "ones_lik": [8, 31, 529, 721, 748], "tril": [8, 31, 529], "m": [8, 12, 17, 21, 34, 35, 40, 44, 52, 93, 98, 99, 100, 220, 268, 269, 301, 307, 308, 310, 314, 329, 355, 358, 359, 361, 376, 384, 385, 399, 413, 414, 415, 416, 417, 529, 537, 541, 543, 564, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 624, 637, 638, 639, 706, 712, 716, 717, 718, 724, 743], "whose": [8, 11, 12, 13, 17, 19, 23, 25, 31, 34, 35, 36, 40, 42, 46, 48, 52, 90, 98, 99, 175, 179, 182, 190, 191, 192, 231, 232, 238, 239, 243, 244, 245, 269, 283, 287, 288, 290, 294, 301, 308, 310, 355, 392, 404, 442, 496, 529, 532, 534, 537, 539, 545, 547, 564, 566, 568, 569, 570, 571, 572, 573, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 592, 601, 605, 647, 648, 649, 656, 657, 675, 728, 738], "innermost": [8, 12, 17, 40, 98, 99, 269, 301, 308, 355, 529, 537, 564, 566, 568, 569, 570, 571, 573, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 589], "two": [8, 12, 17, 23, 35, 36, 40, 52, 53, 72, 75, 86, 93, 98, 99, 100, 131, 139, 187, 201, 202, 236, 268, 269, 273, 282, 283, 285, 286, 288, 290, 296, 301, 304, 307, 308, 310, 319, 335, 353, 354, 355, 365, 375, 393, 399, 402, 427, 436, 440, 528, 529, 530, 532, 534, 537, 539, 545, 564, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 591, 609, 647, 648, 649, 650, 673, 675, 688, 710, 715, 716, 719, 720, 725, 726, 727, 728, 732, 736, 737, 738, 741, 742, 746, 748, 755, 763], "mxn": [8, 12, 17, 40, 98, 99, 269, 301, 529, 537, 568, 576, 578, 579, 581, 582, 586, 589], "diagon": [8, 12, 17, 35, 40, 86, 98, 99, 100, 258, 268, 269, 301, 308, 310, 353, 356, 362, 382, 529, 537, 567, 589], "main": [8, 12, 17, 35, 40, 86, 98, 99, 100, 258, 268, 269, 301, 308, 310, 353, 382, 529, 537, 567, 568, 589, 715, 716, 717, 719, 722, 723, 733, 735, 756, 758, 759, 764], "lower": [8, 11, 12, 17, 21, 34, 35, 40, 44, 86, 98, 224, 258, 268, 269, 301, 319, 430, 431, 436, 529, 532, 537, 543, 564, 570, 571, 578, 639, 675, 686, 687, 706, 717, 725, 727, 736, 738, 743, 751, 753, 754, 755, 756, 758, 759, 764, 765], "triangular": [8, 12, 17, 40, 98, 99, 100, 268, 269, 301, 529, 537, 564, 570, 571, 578, 582], "alloc": [8, 9, 12, 32, 98, 99, 105, 269, 301, 529, 530, 715, 717, 751], "triu": [8, 31, 529], "upper": [8, 12, 17, 21, 35, 40, 44, 86, 99, 100, 258, 269, 301, 319, 430, 529, 537, 543, 564, 570, 571, 582, 639, 686, 735, 738], "zeros_lik": [8, 31, 105, 222, 515, 516, 519, 521, 523, 529, 530, 532, 535, 539, 597, 736, 741], "data_typ": [9, 12, 32, 35, 135, 530, 722, 725, 738, 739], "_arraywithdatatyp": [9, 52], "astyp": [9, 16, 32, 39, 530, 536, 552, 554, 555, 558, 706, 725, 735, 736, 741], "irrespect": [9, 17, 32, 40, 105, 530, 537, 585, 723, 735, 745, 765], "promot": [9, 11, 12, 17, 32, 34, 35, 40, 47, 52, 53, 105, 108, 131, 132, 133, 139, 174, 175, 176, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 190, 191, 193, 196, 198, 200, 214, 215, 216, 217, 218, 223, 226, 231, 235, 238, 239, 240, 241, 242, 243, 244, 247, 281, 289, 294, 304, 319, 427, 487, 508, 530, 532, 534, 537, 539, 547, 564, 565, 572, 573, 575, 576, 577, 578, 580, 581, 583, 584, 591, 592, 598, 608, 651, 659, 662, 673, 674, 719, 728, 729, 732, 740], "rule": [9, 11, 12, 17, 32, 34, 35, 40, 105, 108, 131, 132, 133, 182, 193, 226, 228, 235, 237, 245, 247, 310, 319, 381, 427, 530, 532, 537, 539, 564, 565, 572, 577, 580, 584, 598, 675, 700, 719, 720, 723, 724, 725, 727, 730, 731, 732, 734, 738, 741, 759], "cast": [9, 11, 12, 17, 25, 32, 34, 40, 105, 108, 133, 227, 319, 428, 429, 530, 532, 537, 547, 592, 655, 656, 661, 663, 674, 732, 737, 743], "nan": [9, 11, 12, 13, 23, 25, 32, 34, 35, 36, 105, 173, 174, 175, 176, 178, 179, 180, 181, 182, 189, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 207, 208, 209, 214, 215, 216, 217, 218, 221, 226, 227, 229, 231, 232, 235, 236, 237, 238, 239, 240, 243, 244, 246, 249, 273, 282, 286, 291, 294, 299, 304, 319, 425, 426, 433, 434, 461, 513, 527, 530, 532, 534, 545, 547, 548, 647, 648, 649, 650, 658, 659, 660, 662, 663, 664, 665, 666, 673, 676, 719, 725, 728, 734, 739, 740], "infin": [9, 11, 13, 17, 32, 34, 40, 105, 173, 174, 175, 176, 179, 180, 181, 182, 189, 190, 191, 193, 194, 196, 198, 199, 200, 207, 208, 214, 215, 216, 217, 218, 221, 226, 227, 229, 231, 235, 236, 238, 239, 240, 243, 244, 246, 294, 304, 461, 527, 530, 532, 534, 537, 547, 548, 583, 592, 658, 660, 665, 666, 719, 728], "match": [9, 12, 29, 32, 35, 105, 200, 235, 276, 278, 304, 307, 310, 350, 398, 401, 475, 530, 532, 534, 537, 570, 571, 576, 592, 668, 715, 720, 722, 723, 727, 737, 759, 764], "newli": [9, 32, 105, 442, 530, 534, 717, 721, 724, 735, 738], "float64": [9, 12, 21, 25, 31, 32, 34, 35, 36, 44, 48, 75, 88, 89, 105, 108, 112, 113, 118, 119, 122, 123, 128, 129, 133, 135, 136, 142, 145, 227, 281, 304, 319, 427, 474, 529, 530, 534, 537, 543, 570, 571, 576, 592, 638, 639, 656, 670, 673, 674, 725, 737, 738], "broadcast_arrai": [9, 32, 530], "against": [9, 12, 13, 17, 22, 32, 34, 35, 36, 40, 45, 106, 225, 244, 273, 274, 277, 286, 304, 319, 433, 434, 436, 472, 530, 532, 534, 537, 544, 575, 576, 578, 581, 642, 708, 738, 743, 751, 758], "x2": [9, 11, 12, 13, 17, 22, 32, 34, 35, 36, 40, 45, 52, 53, 56, 106, 132, 139, 159, 176, 181, 183, 185, 186, 187, 188, 193, 194, 200, 201, 202, 203, 204, 205, 211, 212, 213, 218, 219, 220, 222, 223, 224, 225, 226, 229, 231, 235, 242, 247, 273, 276, 281, 282, 283, 285, 287, 292, 295, 304, 310, 319, 387, 427, 437, 530, 531, 532, 534, 537, 544, 565, 572, 575, 580, 584, 587, 588, 591, 646, 670, 694, 719, 725, 727, 729, 731, 735, 736], "x3": [9, 13, 106, 437, 530, 534], "mix": [9, 11, 32, 34, 36, 41, 44, 52, 53, 106, 119, 120, 133, 152, 153, 183, 186, 187, 188, 193, 194, 200, 204, 205, 212, 213, 223, 226, 229, 235, 319, 434, 451, 453, 454, 455, 456, 465, 498, 501, 530, 531, 532, 534, 536, 537, 538, 539, 542, 547, 550, 552, 555, 558, 560, 563, 564, 587, 594, 596, 597, 635, 657, 659, 662, 674, 676, 715, 718, 725, 726, 727, 735, 741, 743, 753, 758, 762, 764], "broadcast_to": [9, 32, 530, 725], "can_cast": [9, 32, 530, 725, 732, 736], "occur": [9, 11, 23, 32, 34, 46, 108, 227, 243, 530, 532, 544, 545, 642, 643, 647, 648, 649, 650, 719, 724, 726, 729, 740], "accord": [9, 13, 19, 25, 32, 42, 48, 108, 118, 176, 187, 193, 200, 226, 237, 307, 310, 350, 393, 455, 458, 479, 480, 530, 532, 534, 537, 539, 547, 591, 599, 612, 662, 664, 675, 694, 700, 715, 716, 719, 725, 730, 732, 736, 738], "as_n": [9, 10, 29, 32, 33, 111, 112, 113, 114, 115, 116, 122, 149, 150, 162, 530, 531, 725], "int32": [9, 12, 13, 21, 22, 25, 32, 35, 36, 44, 45, 86, 91, 97, 102, 105, 108, 110, 112, 114, 116, 119, 121, 122, 126, 129, 133, 137, 141, 143, 161, 254, 299, 315, 319, 418, 428, 429, 430, 456, 465, 500, 529, 530, 531, 534, 543, 544, 547, 637, 638, 639, 643, 655, 656, 661, 663, 673, 674, 725, 736, 738, 743], "finfo": [9, 32, 530, 738], "inform": [9, 14, 32, 37, 118, 121, 438, 524, 530, 534, 535, 540, 615, 706, 714, 715, 716, 717, 719, 723, 724, 729, 732, 733, 735, 737, 738, 761], "about": [9, 32, 118, 121, 530, 706, 710, 713, 714, 715, 716, 717, 718, 719, 722, 724, 725, 726, 730, 731, 735, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 751, 759, 760, 763], "8": [9, 11, 12, 13, 16, 17, 18, 19, 21, 22, 23, 24, 25, 32, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 52, 53, 59, 89, 90, 94, 97, 102, 111, 113, 114, 115, 118, 151, 168, 176, 178, 179, 183, 184, 187, 189, 191, 197, 200, 204, 205, 211, 212, 213, 218, 221, 222, 224, 225, 226, 231, 232, 235, 236, 237, 240, 241, 244, 245, 246, 252, 253, 255, 257, 258, 273, 281, 284, 286, 287, 288, 291, 297, 299, 301, 304, 307, 308, 310, 319, 325, 326, 327, 328, 333, 334, 338, 339, 343, 344, 346, 348, 349, 354, 360, 372, 374, 375, 376, 379, 383, 388, 389, 398, 399, 401, 402, 405, 406, 415, 417, 429, 432, 433, 436, 441, 442, 444, 448, 449, 452, 455, 459, 463, 464, 465, 467, 468, 471, 474, 479, 480, 483, 493, 494, 495, 496, 515, 518, 520, 523, 525, 526, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 541, 543, 544, 545, 546, 547, 550, 554, 555, 558, 559, 560, 562, 566, 567, 568, 571, 572, 575, 576, 577, 580, 583, 585, 586, 587, 589, 590, 592, 594, 595, 596, 597, 601, 608, 609, 611, 617, 624, 628, 636, 637, 638, 639, 641, 646, 647, 649, 651, 652, 654, 656, 657, 659, 661, 663, 664, 673, 676, 688, 716, 723, 724, 727, 738, 742, 746], "14": [9, 11, 12, 16, 17, 21, 25, 32, 34, 35, 36, 39, 40, 42, 44, 105, 118, 121, 174, 179, 181, 188, 192, 218, 222, 226, 232, 239, 247, 280, 307, 308, 310, 319, 325, 326, 327, 328, 338, 345, 348, 349, 352, 379, 383, 388, 405, 428, 493, 515, 530, 532, 534, 535, 536, 537, 539, 541, 545, 547, 550, 551, 553, 555, 559, 568, 572, 580, 589, 611, 628, 637, 638, 639, 647, 656, 657, 723, 727, 738], "resolut": [9, 32, 118, 530, 717], "1e": [9, 12, 14, 17, 18, 20, 32, 35, 37, 40, 41, 43, 118, 273, 286, 304, 313, 407, 408, 409, 484, 485, 493, 505, 506, 515, 516, 521, 523, 530, 534, 535, 537, 538, 542, 585, 594, 595, 596, 635, 668, 670, 689, 691, 692, 706, 723, 732, 735, 737, 747, 748], "06": [9, 21, 34, 37, 59, 118, 175, 191, 307, 328, 338, 521, 526, 530, 535, 639, 668, 670, 738, 746], "min": [9, 12, 13, 17, 25, 32, 35, 36, 40, 48, 98, 100, 118, 121, 225, 268, 270, 301, 308, 356, 449, 479, 480, 493, 529, 530, 532, 534, 537, 547, 576, 582, 585, 586, 592, 706], "4028235e": [9, 118, 530], "38": [9, 12, 34, 35, 44, 118, 243, 292, 304, 307, 319, 326, 345, 348, 349, 428, 530, 532, 537, 577, 673, 727], "max": [9, 12, 13, 17, 25, 32, 35, 36, 40, 48, 118, 121, 224, 307, 308, 310, 325, 326, 327, 343, 344, 345, 346, 348, 356, 400, 443, 444, 449, 465, 479, 480, 530, 532, 534, 537, 547, 576, 578, 581, 673, 688, 692, 724, 736], "iinfo": [9, 32, 530], "integ": [9, 11, 12, 16, 17, 19, 21, 25, 26, 29, 34, 35, 36, 39, 40, 42, 44, 48, 49, 52, 53, 75, 89, 121, 122, 128, 132, 133, 137, 173, 183, 184, 185, 186, 187, 188, 189, 199, 200, 211, 223, 228, 231, 235, 236, 246, 247, 270, 271, 277, 280, 281, 301, 304, 307, 310, 314, 317, 319, 334, 339, 349, 379, 388, 393, 405, 413, 414, 415, 416, 417, 419, 420, 425, 427, 428, 429, 434, 436, 458, 474, 483, 514, 529, 530, 532, 534, 536, 537, 539, 543, 546, 547, 548, 549, 550, 551, 552, 554, 556, 558, 565, 567, 577, 591, 592, 606, 636, 637, 638, 639, 640, 641, 653, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 673, 674, 675, 676, 680, 688, 717, 723, 725, 734, 737, 738, 743, 745], "119": [9, 121], "122": [9, 121, 191, 532], "int8": [9, 21, 31, 32, 44, 88, 114, 119, 121, 122, 126, 254, 299, 529, 530, 637, 673, 674, 725, 738], "128": [9, 11, 16, 32, 34, 39, 53, 121, 197, 307, 328, 338, 448, 458, 530, 532, 534, 536, 537, 551, 553, 558, 580, 706], "127": [9, 12, 17, 32, 35, 121, 294, 304, 530, 537, 572], "12": [9, 11, 12, 13, 16, 17, 21, 25, 32, 34, 35, 36, 39, 40, 42, 43, 44, 48, 52, 53, 121, 176, 178, 183, 187, 188, 191, 193, 194, 195, 213, 226, 229, 236, 239, 246, 247, 262, 263, 284, 287, 288, 301, 304, 307, 310, 319, 325, 326, 327, 328, 330, 334, 335, 343, 344, 348, 349, 350, 379, 383, 388, 405, 417, 428, 434, 444, 448, 449, 480, 485, 493, 506, 532, 534, 536, 537, 539, 541, 542, 543, 544, 545, 547, 550, 554, 559, 560, 568, 572, 576, 580, 586, 587, 589, 601, 605, 607, 609, 611, 628, 635, 637, 638, 639, 646, 647, 655, 656, 657, 661, 663, 673, 716, 721, 723, 725, 727, 734], "54": [9, 11, 16, 34, 35, 39, 44, 121, 190, 191, 196, 211, 240, 246, 259, 301, 307, 319, 328, 338, 428, 532, 536, 537, 547, 560, 577, 580, 637, 638, 639, 657, 724, 727], "1220": [9, 121], "int16": [9, 12, 21, 25, 32, 44, 108, 112, 114, 119, 121, 128, 143, 254, 299, 319, 428, 429, 530, 547, 637, 655, 656, 661, 663, 673, 674, 725, 736, 738, 743], "32768": [9, 32, 121, 494, 534], "32767": [9, 32, 121], "is_bool_dtyp": [9, 32, 530], "is_float_dtyp": [9, 32, 530, 739], "is_int_dtyp": [9, 32, 530, 737, 739], "is_uint_dtyp": [9, 32, 530, 737, 739], "result_typ": [9, 32, 530, 725], "arrays_and_dtyp": [9, 32, 133, 530], "involv": [9, 32, 133, 176, 193, 200, 226, 231, 530, 532, 709, 711, 718, 724, 725, 727, 737, 741, 748, 758, 764], "_arraywithdevic": [10, 52], "dev": [10, 29, 33, 154, 161, 531, 716, 726, 732, 745, 747], "to_devic": [10, 33, 149, 531, 706], "move": [10, 12, 33, 35, 100, 163, 167, 171, 268, 301, 310, 392, 529, 531, 706, 717, 726, 739], "__dlpack__": [10, 33, 87, 167, 529, 531], "mai": [10, 11, 12, 17, 23, 24, 33, 34, 40, 47, 52, 53, 75, 87, 167, 193, 194, 200, 205, 213, 221, 222, 226, 227, 229, 244, 335, 447, 529, 531, 532, 534, 537, 545, 546, 547, 583, 592, 647, 648, 649, 650, 651, 654, 658, 659, 660, 662, 673, 710, 714, 715, 716, 717, 719, 723, 724, 725, 729, 732, 733, 734, 736, 737, 738, 741, 744, 745, 747, 765], "caveat": [10, 33, 167, 309, 371, 531], "portabl": [10, 33, 167, 531, 706, 756], "_arraywithelementwis": [11, 52], "ab": [11, 17, 27, 34, 50, 52, 53, 231, 273, 286, 304, 310, 400, 532, 537, 541, 576, 586, 592, 624, 627, 670, 700, 720, 725, 733, 736, 738], "absolut": [11, 12, 17, 27, 29, 34, 35, 40, 52, 173, 237, 273, 286, 289, 304, 308, 356, 368, 532, 537, 576, 577, 578, 583, 668, 670, 673, 675, 676, 711, 716], "aco": [11, 34, 532], "real": [11, 12, 25, 34, 35, 48, 52, 61, 64, 96, 97, 173, 174, 175, 176, 178, 179, 180, 181, 182, 191, 193, 194, 196, 198, 200, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 223, 226, 228, 229, 231, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 279, 289, 304, 307, 308, 329, 350, 355, 356, 526, 529, 532, 537, 544, 547, 569, 570, 571, 576, 583, 585, 586, 589, 592, 645, 658, 660, 661, 662, 663, 723, 760], "invers": [11, 12, 17, 34, 35, 40, 174, 175, 178, 179, 180, 181, 182, 307, 317, 329, 338, 340, 419, 532, 537, 573, 577, 581, 694, 725, 750], "cosin": [11, 34, 174, 175, 190, 191, 257, 260, 301, 307, 328, 338, 532, 688], "57": [11, 12, 34, 35, 151, 174, 175, 178, 179, 181, 188, 191, 192, 232, 248, 531, 532], "69": [11, 37, 44, 174, 216, 307, 328, 338, 519, 532, 535, 537, 576, 577, 638, 738, 746], "acosh": [11, 34, 119, 120, 530, 532], "area": [11, 12, 34, 35, 39, 175, 179, 182, 307, 342, 349, 532, 709, 735, 741, 749, 754], "hyperbol": [11, 34, 175, 179, 182, 191, 239, 243, 244, 532], "sector": [11, 34, 175, 179, 182, 532, 709], "32": [11, 12, 21, 34, 35, 39, 40, 44, 52, 53, 61, 117, 175, 187, 188, 197, 211, 233, 236, 237, 275, 304, 307, 308, 319, 326, 327, 328, 338, 348, 349, 354, 428, 448, 464, 526, 530, 532, 534, 536, 537, 543, 544, 547, 551, 553, 554, 555, 558, 560, 575, 580, 637, 638, 639, 646, 657, 673, 676, 706, 724, 734, 746, 763], "99": [11, 14, 32, 34, 44, 89, 175, 190, 493, 519, 529, 532, 534, 535, 541, 547, 628, 638, 657], "second": [11, 12, 14, 17, 19, 23, 34, 35, 36, 37, 40, 42, 46, 52, 53, 72, 100, 131, 139, 176, 181, 183, 185, 186, 187, 188, 194, 200, 201, 202, 203, 204, 205, 211, 212, 213, 218, 219, 220, 222, 223, 226, 229, 231, 242, 268, 273, 282, 284, 285, 286, 292, 295, 296, 301, 304, 308, 310, 317, 319, 354, 355, 356, 360, 399, 404, 414, 416, 420, 427, 430, 440, 488, 509, 515, 516, 521, 528, 529, 530, 532, 534, 535, 537, 539, 540, 541, 545, 565, 568, 569, 570, 572, 575, 580, 582, 583, 585, 587, 591, 608, 609, 614, 617, 647, 648, 649, 692, 710, 716, 719, 722, 725, 727, 730, 735, 736, 738, 740, 745, 763], "compat": [11, 17, 19, 22, 25, 26, 34, 40, 42, 45, 48, 49, 52, 53, 107, 176, 181, 183, 185, 186, 187, 188, 193, 194, 200, 204, 205, 212, 213, 218, 220, 222, 223, 226, 229, 231, 235, 242, 247, 530, 532, 537, 539, 544, 547, 548, 565, 578, 581, 584, 587, 591, 592, 604, 643, 658, 659, 660, 661, 662, 663, 664, 665, 666, 706, 709, 721, 731, 736, 737, 739, 743, 751], "15": [11, 12, 13, 17, 21, 25, 31, 32, 34, 35, 36, 39, 40, 42, 44, 48, 53, 90, 118, 176, 183, 187, 193, 204, 211, 212, 218, 226, 235, 236, 237, 284, 297, 304, 305, 307, 308, 310, 319, 325, 326, 343, 345, 348, 349, 354, 379, 383, 388, 405, 428, 444, 448, 449, 452, 463, 464, 488, 493, 509, 529, 530, 532, 534, 536, 537, 539, 541, 543, 544, 545, 547, 550, 560, 568, 571, 572, 573, 580, 586, 587, 605, 611, 616, 628, 637, 638, 645, 647, 655, 656, 657, 670, 716, 724, 727, 734, 761], "angl": [11, 34, 181, 191, 239, 244, 285, 304, 532, 750], "deg": [11, 34, 177, 532], "radian": [11, 12, 34, 35, 174, 177, 178, 180, 181, 190, 192, 232, 238, 243, 294, 304, 532, 728], "degre": [11, 12, 25, 34, 35, 48, 177, 192, 232, 310, 399, 532, 547, 662, 664, 757], "1j": [11, 34, 35, 177, 178, 190, 191, 196, 198, 210, 233, 238, 239, 243, 275, 493, 532, 534], "2j": [11, 12, 34, 35, 177, 206, 275, 307, 334, 339, 494, 532, 534], "3j": [11, 12, 34, 35, 177, 210, 233, 275, 304, 532], "35619449": [11, 177, 532], "78539816": [11, 177, 532], "135": [11, 177, 443, 532, 534], "45": [11, 12, 25, 34, 35, 37, 39, 44, 53, 177, 181, 193, 236, 237, 292, 304, 307, 319, 328, 338, 349, 428, 434, 515, 521, 532, 535, 537, 539, 547, 580, 606, 638, 639, 657, 673], "asin": [11, 34, 532], "sine": [11, 34, 178, 179, 238, 239, 532], "927": [11, 34, 178], "asinh": [11, 34, 178, 532], "atan": [11, 34, 532], "tangent": [11, 34, 180, 181, 182, 243, 244, 532, 728], "785": [11, 34, 180, 181, 532], "atan2": [11, 34, 532], "quotient": [11, 34, 181, 193, 200, 532], "245": [11, 39, 181, 536, 559, 560], "68": [11, 44, 62, 89, 181, 307, 328, 338, 526, 529, 532, 542, 635, 638, 639], "588": [11, 181, 532], "inf": [11, 12, 13, 17, 34, 35, 36, 40, 181, 198, 207, 208, 209, 210, 214, 215, 227, 249, 289, 299, 304, 308, 319, 352, 430, 461, 513, 527, 532, 534, 537, 576, 592, 673, 676, 725, 734], "36": [11, 12, 16, 25, 35, 36, 40, 181, 236, 237, 284, 304, 307, 319, 328, 338, 428, 448, 449, 494, 532, 534, 537, 541, 547, 560, 577, 580, 590, 627, 657], "75": [11, 12, 34, 35, 36, 39, 44, 91, 179, 181, 193, 206, 260, 283, 284, 301, 304, 349, 436, 450, 463, 493, 529, 532, 534, 537, 541, 543, 550, 573, 580, 624, 639], "52": [11, 34, 36, 37, 44, 181, 191, 193, 319, 428, 448, 449, 464, 515, 532, 534, 535, 536, 537, 547, 560, 580, 639, 657, 700], "719": [11, 181, 532], "197": [11, 181, 532], "atanh": [11, 34, 532], "549": [11, 34, 39, 182, 532, 536, 560], "47": [11, 12, 17, 21, 34, 35, 36, 37, 39, 44, 182, 240, 307, 319, 326, 344, 345, 428, 448, 449, 519, 532, 534, 535, 536, 537, 543, 560, 572, 638, 639], "bitwise_and": [11, 34, 532], "11": [11, 12, 13, 16, 17, 21, 25, 34, 35, 36, 39, 40, 42, 44, 48, 53, 176, 180, 183, 198, 235, 236, 242, 288, 304, 307, 308, 310, 325, 326, 338, 343, 344, 346, 348, 349, 357, 379, 383, 388, 390, 405, 428, 429, 442, 448, 449, 455, 464, 480, 532, 534, 536, 537, 538, 539, 541, 543, 544, 545, 547, 550, 551, 559, 560, 568, 571, 572, 573, 575, 576, 580, 585, 586, 594, 596, 601, 606, 607, 609, 611, 622, 624, 634, 637, 638, 639, 646, 647, 655, 656, 657, 664, 723, 724, 725, 727, 734], "bitwise_invert": [11, 34, 532], "bitiwse_invert": [11, 184], "bitwise_left_shift": [11, 34, 532], "bitwise_or": [11, 34, 532], "bitwise_right_shift": [11, 34, 52, 532], "64": [11, 12, 16, 34, 35, 36, 39, 40, 44, 48, 53, 117, 187, 197, 231, 240, 241, 281, 304, 307, 328, 338, 448, 449, 494, 521, 530, 532, 534, 535, 536, 537, 541, 547, 551, 553, 555, 558, 577, 580, 590, 624, 628, 638, 657, 661, 706, 716, 746, 747, 763], "16": [11, 12, 13, 16, 17, 21, 25, 32, 34, 35, 36, 39, 40, 42, 44, 52, 53, 121, 187, 216, 236, 243, 281, 284, 288, 304, 307, 310, 319, 325, 326, 328, 334, 338, 339, 343, 344, 346, 349, 383, 428, 434, 449, 452, 474, 493, 494, 525, 530, 532, 534, 535, 536, 537, 539, 541, 543, 544, 547, 558, 560, 564, 568, 571, 572, 580, 586, 611, 624, 628, 637, 638, 639, 646, 656, 657, 673, 676, 706, 717, 727, 746], "bitwise_xor": [11, 34, 52, 532], "89": [11, 21, 32, 34, 35, 44, 53, 121, 188, 530, 532, 537, 547, 587, 638, 639, 663], "51": [11, 12, 34, 35, 36, 44, 188, 226, 239, 308, 328, 370, 532, 639, 673], "18": [11, 12, 21, 34, 35, 39, 40, 44, 48, 62, 188, 193, 235, 239, 248, 284, 304, 307, 310, 328, 334, 338, 339, 343, 346, 349, 383, 526, 532, 537, 543, 547, 554, 568, 575, 580, 637, 638, 639, 656, 657, 661, 723, 727], "19": [11, 12, 21, 34, 35, 39, 40, 44, 179, 188, 216, 226, 243, 307, 308, 310, 319, 327, 328, 339, 343, 346, 349, 354, 383, 428, 532, 537, 541, 543, 546, 568, 576, 589, 627, 637, 638, 639, 654, 727], "26": [11, 12, 20, 21, 35, 36, 37, 44, 188, 193, 239, 307, 308, 328, 365, 463, 515, 532, 534, 535, 536, 537, 541, 542, 547, 558, 568, 580, 587, 617, 635, 637, 638, 657], "27": [11, 12, 17, 21, 34, 35, 39, 40, 44, 48, 187, 188, 191, 231, 239, 240, 281, 304, 307, 328, 338, 464, 532, 534, 537, 541, 547, 575, 580, 590, 617, 624, 638, 657, 661, 673], "23": [11, 12, 17, 21, 31, 34, 35, 36, 39, 44, 90, 188, 191, 208, 209, 210, 233, 235, 236, 237, 239, 246, 275, 276, 304, 307, 319, 325, 326, 328, 338, 343, 344, 345, 346, 349, 428, 434, 529, 532, 536, 537, 541, 544, 555, 568, 572, 576, 586, 617, 624, 628, 637, 638, 639, 646, 706, 724, 738, 743], "20": [11, 12, 16, 21, 25, 34, 35, 36, 39, 40, 44, 48, 188, 192, 196, 232, 236, 240, 284, 286, 288, 304, 307, 325, 327, 343, 346, 349, 448, 455, 456, 458, 480, 483, 493, 532, 534, 537, 543, 544, 547, 550, 551, 561, 568, 573, 576, 580, 587, 637, 645, 646, 655, 656, 657, 661, 663, 706, 724, 741, 745], "74": [11, 44, 188, 218, 532, 537, 577], "41": [11, 12, 17, 34, 35, 36, 39, 40, 62, 180, 188, 226, 240, 307, 308, 315, 319, 326, 344, 349, 362, 418, 428, 443, 444, 526, 532, 534, 537, 547, 564, 572, 663], "59": [11, 188, 319, 428], "24": [11, 12, 17, 25, 34, 35, 36, 39, 40, 44, 52, 188, 196, 211, 213, 226, 236, 237, 240, 284, 287, 304, 307, 319, 325, 327, 328, 338, 343, 344, 345, 346, 349, 428, 448, 449, 532, 534, 537, 541, 547, 550, 568, 576, 580, 617, 628, 637, 638, 639, 655, 657, 670, 729, 746], "co": [11, 13, 34, 191, 196, 198, 239, 452, 532, 534, 709, 714, 725, 743, 750], "express": [11, 12, 34, 35, 174, 178, 180, 181, 190, 192, 232, 238, 243, 294, 304, 532, 694, 728, 736, 743, 748, 758, 759], "416": [11, 190, 532], "540": [11, 190], "990": [11, 190], "cosh": [11, 34, 190, 532], "76": [11, 25, 32, 34, 35, 44, 121, 175, 191, 239, 338, 530, 532, 537, 541, 547, 587, 624, 638, 657], "81": [11, 17, 32, 34, 40, 44, 121, 191, 216, 241, 319, 428, 530, 532, 537, 541, 543, 547, 572, 577, 590, 624, 639, 657, 738], "deg2rad": [11, 34, 532], "convers": [11, 12, 35, 192, 232, 481, 490, 534, 710, 715, 721, 742, 744, 748, 750, 751, 753, 757, 764], "90": [11, 12, 34, 35, 188, 192, 232, 236, 310, 319, 399, 428, 532, 537, 547, 580, 657, 709], "180": [11, 34, 192, 232, 532], "270": [11, 34, 192, 232, 532], "360": [11, 34, 192, 232, 532, 724], "71": [11, 34, 39, 192, 232, 349, 532], "28": [11, 16, 20, 34, 35, 36, 39, 40, 44, 48, 192, 216, 232, 307, 308, 328, 338, 354, 434, 463, 515, 532, 534, 535, 536, 537, 542, 547, 551, 553, 555, 558, 560, 580, 635, 637, 638, 639, 657, 661, 706], "divid": [11, 12, 13, 19, 29, 34, 35, 42, 52, 53, 200, 313, 407, 408, 409, 493, 532, 534, 539, 606, 720, 723, 727, 730, 738], "dividend": [11, 34, 193, 200, 235, 247, 532], "divisor": [11, 12, 14, 25, 34, 35, 37, 48, 193, 200, 203, 204, 235, 247, 307, 310, 325, 326, 327, 379, 388, 405, 515, 516, 521, 532, 535, 547, 662, 664, 688, 692], "375": [11, 194, 229], "erf": [11, 34, 532], "exponenti": [11, 12, 34, 35, 195, 196, 198, 218, 231, 253, 299, 308, 363, 532], "gauss": [11, 34, 195, 532], "error": [11, 12, 16, 29, 34, 35, 39, 59, 195, 243, 308, 319, 367, 370, 434, 526, 532, 536, 537, 547, 563, 583, 586, 658, 660, 675, 689, 690, 692, 703, 710, 714, 716, 717, 719, 720, 721, 724, 725, 726, 727, 730, 731, 736, 738, 739, 740, 745, 751, 758], "328": [11, 195, 243, 532], "677": [11, 195, 532], "842": [11, 195, 243, 532], "exp": [11, 12, 34, 35, 65, 198, 218, 231, 250, 299, 307, 334, 339, 526, 532, 537, 583, 734, 736], "evalu": [11, 12, 29, 34, 35, 196, 198, 214, 215, 216, 217, 221, 228, 230, 237, 241, 289, 308, 310, 365, 390, 525, 532, 535, 541, 548, 626, 627, 665, 666, 717, 723, 725, 732, 733, 758], "71828198": [11, 34, 196], "38905573": [11, 34, 196], "08553696": [11, 34, 196, 532], "exp2": [11, 34, 532], "power": [11, 12, 13, 17, 34, 35, 36, 40, 52, 53, 187, 196, 197, 231, 272, 281, 301, 304, 484, 494, 505, 532, 534, 537, 541, 577, 590, 622, 687, 740, 745, 746, 747, 758, 760, 764], "expm1": [11, 34, 532, 725], "244": [11, 198, 706], "918": [11, 198], "48": [11, 12, 34, 35, 36, 37, 44, 61, 175, 198, 240, 307, 326, 327, 328, 338, 344, 345, 348, 463, 515, 519, 526, 532, 534, 535, 537, 541, 547, 580, 617, 638, 657], "_": [11, 29, 34, 37, 108, 196, 198, 206, 207, 222, 319, 370, 427, 448, 515, 516, 530, 532, 534, 535, 537, 539, 541, 547, 583, 586, 612, 623, 662, 712, 715, 728, 733, 735, 738, 746], "147": [11, 198, 532], "floor_divid": [11, 34, 532, 680], "fmin": [11, 34, 532], "minimum": [11, 12, 13, 19, 22, 25, 34, 35, 36, 42, 45, 48, 173, 201, 228, 270, 281, 301, 304, 310, 319, 393, 425, 429, 484, 485, 493, 494, 505, 506, 532, 534, 539, 544, 547, 597, 643, 658, 660, 673, 675, 676, 680, 740, 755, 761, 765], "gcd": [11, 34, 532], "greater": [11, 12, 16, 19, 21, 34, 35, 39, 44, 52, 53, 88, 174, 175, 178, 179, 181, 182, 185, 187, 193, 199, 200, 214, 216, 231, 235, 237, 239, 240, 244, 245, 246, 274, 304, 307, 329, 334, 339, 529, 532, 536, 537, 539, 543, 563, 565, 577, 607, 639, 675, 717, 737], "greater_equ": [11, 34, 52, 53, 218, 532], "imaginari": [11, 34, 52, 61, 64, 96, 97, 174, 175, 176, 191, 193, 194, 196, 198, 206, 226, 228, 229, 236, 239, 240, 244, 275, 304, 308, 356, 526, 529, 532, 544, 645, 727], "4j": [11, 34, 206, 494, 532, 534], "6j": [11, 12, 34, 206, 210, 275, 532], "isfinit": [11, 34, 532, 736], "out_i": [11, 34, 207, 208, 209, 210, 233, 532], "self_i": [11, 34, 207, 208, 209, 210, 233], "finit": [11, 34, 173, 174, 175, 176, 179, 181, 182, 191, 193, 194, 196, 198, 200, 207, 208, 214, 216, 226, 227, 229, 231, 235, 239, 240, 244, 532], "isinf": [11, 34, 532], "detect_posit": [11, 34, 208, 532], "detect_neg": [11, 34, 208, 532], "detect": [11, 29, 34, 208, 532, 541, 616, 627, 715, 716, 721, 723, 724, 730, 738, 746, 747], "isnan": [11, 34, 532], "isreal": [11, 34, 532], "5j": [11, 34, 35, 210, 233, 275, 304, 532], "lcm": [11, 34, 532, 725], "common": [11, 12, 29, 34, 132, 203, 211, 276, 281, 304, 530, 532, 708, 715, 716, 722, 725, 726, 727, 732, 733, 736, 739, 741, 751, 755, 758, 765], "21": [11, 12, 13, 21, 31, 34, 35, 39, 40, 44, 48, 52, 92, 121, 176, 179, 181, 187, 188, 211, 226, 291, 307, 308, 319, 325, 328, 338, 343, 346, 349, 350, 352, 428, 480, 529, 530, 532, 537, 538, 541, 547, 568, 580, 596, 622, 637, 638, 655, 656, 657, 729, 734], "60": [11, 25, 34, 36, 44, 48, 177, 211, 456, 464, 480, 493, 514, 532, 534, 537, 541, 547, 580, 619, 637, 655, 657, 661, 724], "less": [11, 12, 17, 21, 25, 34, 35, 40, 44, 52, 53, 174, 175, 178, 181, 182, 189, 193, 200, 214, 215, 216, 217, 231, 235, 237, 240, 293, 304, 307, 308, 319, 328, 329, 338, 367, 370, 427, 430, 532, 537, 543, 547, 576, 577, 578, 581, 592, 639, 662, 664, 688, 709, 716, 717, 723, 725, 727, 729, 731, 736, 738, 741, 742, 743, 758, 760], "less_equ": [11, 34, 52, 53, 532, 729], "61": [11, 12, 17, 34, 35, 37, 41, 44, 179, 214, 216, 241, 328, 515, 532, 535, 536, 537, 538, 558, 572, 594, 596, 639], "log10": [11, 34, 532], "logarithm": [11, 34, 196, 214, 215, 216, 217, 218, 279, 289, 304, 532, 537, 583], "602": [11, 215, 532], "699": [11, 215, 532], "log1p": [11, 34, 532, 734], "693": [11, 34, 66, 179, 216, 526, 532, 538, 596], "001": [11, 12, 20, 32, 35, 37, 118, 216, 233, 275, 286, 304, 516, 530, 532, 535, 542, 635, 673, 746, 747], "0953": [11, 34, 214, 216, 532], "log2": [11, 34, 219, 532], "logaddexp": [11, 34, 532], "logaddexp2": [11, 34, 532], "169925": [11, 34, 219, 532], "logical_and": [11, 34, 532, 736, 741, 765], "logical_not": [11, 34, 532, 725], "logical_or": [11, 34, 532, 765], "conform": [11, 17, 34, 75, 76, 77, 84, 85, 86, 87, 89, 90, 91, 93, 96, 97, 98, 99, 101, 102, 108, 118, 121, 133, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 196, 198, 199, 200, 204, 205, 206, 207, 208, 209, 213, 215, 216, 217, 218, 220, 221, 222, 223, 226, 228, 229, 230, 231, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 275, 304, 319, 427, 529, 530, 532, 537, 539, 544, 545, 546, 547, 548, 564, 565, 566, 567, 568, 570, 571, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 591, 592, 598, 600, 601, 602, 604, 605, 607, 608, 612, 642, 643, 645, 646, 647, 648, 649, 650, 651, 654, 658, 659, 660, 661, 662, 663, 664, 665, 666, 728, 730], "api": [11, 17, 34, 75, 76, 77, 84, 85, 86, 87, 89, 90, 91, 93, 96, 97, 98, 99, 101, 102, 108, 118, 121, 131, 133, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 196, 198, 199, 200, 204, 205, 206, 207, 208, 209, 213, 215, 216, 217, 218, 220, 221, 222, 223, 226, 228, 229, 230, 231, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 275, 304, 319, 427, 529, 530, 532, 537, 539, 544, 545, 546, 547, 548, 564, 565, 566, 567, 568, 570, 571, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 591, 592, 598, 600, 601, 602, 604, 605, 607, 608, 612, 642, 643, 645, 646, 647, 648, 649, 650, 651, 654, 658, 659, 660, 661, 662, 663, 664, 665, 666, 707, 708, 716, 717, 718, 720, 722, 725, 726, 727, 728, 729, 731, 733, 735, 736, 737, 738, 741, 742, 744, 746, 751, 752, 753, 754, 756, 758, 760, 763, 765], "extens": [11, 17, 34, 75, 76, 77, 84, 85, 86, 87, 89, 90, 91, 93, 96, 97, 98, 99, 101, 102, 108, 118, 121, 133, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 196, 198, 199, 200, 204, 205, 206, 207, 208, 209, 213, 215, 216, 217, 218, 220, 221, 222, 223, 226, 228, 229, 230, 231, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 275, 304, 319, 427, 529, 530, 532, 537, 539, 544, 545, 546, 547, 548, 564, 565, 566, 567, 568, 570, 571, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 591, 592, 598, 600, 601, 602, 604, 605, 607, 608, 612, 642, 643, 645, 646, 647, 648, 649, 650, 651, 654, 658, 659, 660, 661, 662, 663, 664, 665, 666, 706, 712, 714, 716, 717, 728, 730, 738, 755, 758, 765], "api_specif": [11, 34, 108, 196, 206, 207, 222, 530, 532, 539, 547, 612, 662, 728], "array_api": [11, 34, 108, 196, 206, 207, 222, 530, 532, 537, 539, 547, 583, 612, 662, 728], "html": [11, 34, 100, 108, 196, 206, 207, 222, 268, 301, 319, 427, 529, 530, 532, 537, 539, 547, 583, 612, 662, 709, 728], "logical_xor": [11, 34, 532], "maximum": [11, 12, 13, 14, 19, 22, 25, 29, 34, 35, 36, 37, 42, 45, 48, 53, 166, 282, 304, 307, 308, 310, 319, 323, 333, 367, 370, 393, 428, 430, 443, 444, 452, 521, 531, 532, 534, 535, 537, 539, 541, 544, 547, 576, 597, 628, 642, 658, 660, 673, 675, 676, 680, 717, 727, 735, 746, 765], "use_wher": [11, 34, 224, 225, 532], "formula": [11, 12, 34, 193, 215, 217, 224, 225, 226, 288, 304, 313, 407, 409, 532], "clip": [11, 12, 19, 34, 35, 36, 42, 224, 225, 310, 398, 401, 443, 444, 532, 534, 539, 723, 732, 734, 735, 746, 748], "than": [11, 12, 13, 16, 17, 19, 21, 22, 23, 25, 29, 34, 35, 36, 39, 40, 42, 44, 45, 46, 48, 52, 53, 75, 88, 118, 166, 174, 175, 178, 179, 181, 182, 185, 187, 189, 193, 199, 200, 214, 215, 216, 217, 224, 226, 231, 235, 237, 239, 240, 244, 245, 246, 251, 257, 273, 274, 286, 293, 301, 304, 307, 308, 310, 319, 328, 329, 334, 335, 338, 339, 340, 350, 351, 352, 367, 370, 384, 385, 428, 429, 430, 467, 468, 471, 487, 508, 529, 530, 531, 532, 534, 536, 537, 539, 543, 544, 545, 547, 563, 565, 575, 576, 577, 578, 581, 592, 597, 601, 607, 639, 645, 648, 649, 650, 655, 656, 661, 662, 663, 664, 688, 709, 712, 717, 719, 723, 724, 725, 727, 729, 735, 736, 737, 738, 739, 740, 741, 743, 746, 747, 748, 751, 752, 755, 756, 757, 758, 764, 765], "exce": [11, 12, 35, 225, 310, 402, 532], "30": [11, 12, 35, 36, 44, 48, 53, 226, 284, 292, 304, 307, 328, 338, 349, 418, 448, 450, 455, 456, 463, 464, 480, 488, 493, 532, 534, 537, 541, 547, 573, 580, 625, 637, 638, 656, 657, 661, 675, 687, 724], "56": [11, 12, 16, 21, 34, 35, 39, 92, 226, 240, 243, 246, 307, 328, 338, 515, 529, 532, 535, 536, 537, 541, 547, 551, 553, 555, 560, 580, 616, 638, 657, 727], "nan_to_num": [11, 34, 532], "posinf": [11, 34, 227, 532], "neginf": [11, 34, 227, 532], "veri": [11, 34, 227, 273, 286, 304, 532, 537, 583, 675, 708, 709, 714, 715, 716, 717, 722, 723, 725, 726, 727, 729, 731, 732, 735, 736, 737, 738, 739, 741, 744, 746, 747, 748, 751, 754, 755, 756, 758, 759, 760, 763, 764, 765], "5e": [11, 14, 34, 35, 227, 292, 521, 532, 535], "not_equ": [11, 34, 52, 53, 532], "pow": [11, 34, 52, 53, 532, 719], "expon": [11, 12, 13, 35, 36, 231, 281, 283, 287, 304, 494, 532, 534, 537, 577], "25": [11, 13, 17, 18, 21, 25, 28, 34, 35, 36, 39, 40, 43, 44, 48, 52, 53, 67, 91, 176, 177, 187, 193, 195, 206, 211, 226, 231, 234, 236, 239, 240, 241, 246, 260, 301, 309, 319, 349, 371, 428, 436, 463, 464, 480, 493, 529, 532, 534, 537, 538, 541, 542, 547, 550, 564, 568, 573, 590, 595, 617, 624, 628, 635, 637, 638, 639, 656, 657, 659, 664, 723, 734], "rad2deg": [11, 34, 532], "286": [11, 35, 232], "458": [11, 232], "573": [11, 232, 532], "hand": [11, 706, 719, 725, 726, 730, 732, 738, 751], "reciproc": [11, 34, 532], "333": [11, 34, 193, 234, 444, 532, 534], "remaind": [11, 12, 19, 29, 34, 35, 42, 202, 532, 539, 606, 719, 735], "modulu": [11, 34, 235, 532, 735], "x2_i": [11, 34, 176, 181, 183, 185, 186, 187, 188, 193, 194, 200, 204, 205, 212, 213, 218, 220, 222, 223, 226, 229, 231, 235, 242, 532, 719], "decim": [11, 34, 236, 532, 740], "94": [11, 14, 21, 34, 35, 37, 44, 160, 236, 237, 338, 519, 531, 535, 639], "256": [11, 36, 236, 237, 494, 536, 551, 553, 555, 673], "0001": [11, 12, 35, 236, 237, 308, 367, 370, 673, 676, 692], "67": [11, 13, 17, 34, 36, 39, 44, 52, 188, 191, 196, 236, 237, 239, 246, 319, 349, 428, 448, 449, 493, 518, 520, 532, 534, 535, 537, 572, 639], "678": [11, 236, 237], "33": [11, 21, 25, 34, 36, 37, 39, 179, 180, 187, 236, 307, 319, 326, 348, 349, 428, 444, 493, 519, 532, 534, 535, 536, 537, 541, 547, 559, 560, 580, 634, 637, 657, 664, 673, 676], "np_variant": [11, 34, 237, 532], "sin": [11, 13, 34, 191, 196, 198, 239, 452, 532, 534, 720, 743], "841": [11, 28, 34, 59, 238, 526, 532], "909": [11, 34, 36, 238, 532], "141": [11, 34, 105, 238, 530, 532], "sinh": [11, 34, 238, 532], "63": [11, 28, 34, 39, 40, 67, 232, 239, 240, 307, 319, 328, 338, 349, 428, 532, 537, 541, 547, 564, 580, 617, 628, 657], "232": [11, 34, 239, 532], "sqrt": [11, 12, 34, 35, 307, 329, 334, 335, 339, 340, 532, 687, 706], "squar": [11, 12, 17, 34, 35, 40, 240, 308, 319, 355, 363, 427, 517, 518, 520, 525, 532, 535, 537, 541, 564, 566, 567, 569, 570, 571, 573, 577, 583, 584, 585, 590, 622, 706], "root": [11, 34, 240, 532, 686, 713, 716, 717, 722, 736, 746], "73": [11, 40, 240, 319, 428, 537, 543, 564, 638, 738], "44": [11, 12, 21, 34, 35, 44, 179, 226, 236, 240, 241, 276, 304, 307, 327, 328, 532, 536, 537, 541, 544, 547, 559, 580, 624, 637, 638, 646, 657], "subtract": [11, 34, 52, 53, 88, 310, 393, 529, 532, 720, 723, 727], "tan": [11, 34, 439, 532, 534, 728, 731, 732, 735, 736, 743], "tanh": [11, 34, 243, 532, 684, 743], "762": [11, 34, 244, 532], "964": [11, 34, 244, 532], "trapz": [11, 34, 532], "dx": [11, 34, 245, 532], "apart": [11, 34, 245, 532], "singl": [11, 21, 29, 34, 44, 245, 286, 304, 308, 314, 365, 414, 501, 513, 517, 532, 534, 535, 536, 543, 545, 562, 637, 638, 639, 647, 673, 688, 710, 715, 716, 717, 719, 724, 727, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 743, 746, 747, 748, 751], "trapezoid": [11, 34, 245, 532], "trunc": [11, 34, 532], "025": [11, 246, 532, 540, 615], "trunc_divid": [11, 34, 532], "_arraywithactivationsexperiment": [12, 52], "elu": [12, 35, 299, 684], "scaler": [12, 35, 248, 299, 673, 676, 738], "ep": [12, 17, 20, 35, 40, 43, 118, 249, 299, 308, 313, 356, 407, 408, 409, 530, 537, 542, 578, 581, 635, 684, 691], "outpu": [12, 35, 249, 299], "clamp": [12, 35, 249, 299, 748], "elementwis": [12, 20, 35, 43, 249, 251, 296, 299, 537, 542, 590, 635, 732, 739, 743], "19722438": [12, 35, 249, 299], "38629448": [12, 35, 249, 299], "38629436": [12, 35, 249, 299], "logsigmoid": [12, 35, 299, 684], "31326175": [12, 28, 250, 299], "126928": [12, 35, 250], "01814993": [12, 250], "00004578": [12, 250], "57888985": [12, 250], "31326169": [12, 35, 250, 299], "69314718": [12, 17, 28, 35, 40, 250, 289, 299, 304, 537, 583], "01104775": [12, 250], "prelu": [12, 35, 299, 684], "f": [12, 19, 35, 42, 251, 299, 310, 383, 539, 541, 604, 619, 623, 624, 625, 628, 633, 634, 706, 710, 711, 717, 718, 723, 724, 743, 746, 754], "unidirect": [12, 251, 299], "smaller": [12, 19, 25, 35, 42, 251, 273, 286, 299, 304, 307, 319, 335, 340, 350, 427, 428, 429, 448, 534, 539, 547, 597, 605, 655, 656, 661, 663, 706, 717, 729, 743], "relu6": [12, 35, 299, 684], "rectifi": [12, 28, 35, 61, 63, 64, 252, 255, 256, 299, 526], "selu": [12, 35, 299, 684], "scale": [12, 16, 20, 35, 37, 39, 43, 61, 164, 165, 253, 284, 299, 304, 307, 308, 313, 324, 330, 331, 332, 340, 350, 360, 407, 408, 409, 522, 526, 531, 535, 536, 542, 559, 562, 563, 635, 673, 675, 676, 687, 688, 692, 758, 760], "11133075": [12, 253, 299], "05070102": [12, 35, 253, 299], "10140204": [12, 253, 299], "15210295": [12, 253, 299], "20280409": [12, 253, 299], "25350523": [12, 253, 299], "30420589": [12, 253, 299], "35490704": [12, 253, 299], "silu": [12, 35, 299, 684], "26894143": [12, 255], "73105854": [12, 35, 255], "thresholded_relu": [12, 35, 299], "custom": [12, 35, 256, 298, 299, 306, 673, 700, 709, 713, 724, 729, 733, 737, 738, 741, 747, 758, 762, 763, 764], "_arraywithconversionsexperiment": [12, 52], "_arraywithcreationexperiment": [12, 52], "blackman_window": [12, 35, 301], "period": [12, 35, 239, 243, 257, 259, 260, 262, 263, 301, 307, 341, 532, 717], "window": [12, 16, 35, 39, 257, 259, 260, 262, 263, 272, 301, 307, 325, 326, 327, 329, 343, 344, 345, 346, 348, 349, 536, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 688, 712, 717, 763], "38777878e": [12, 35, 257, 301], "40000000e": [12, 257, 301], "00000000e": [12, 35, 36, 257, 301, 307, 328, 334, 338, 339], "00": [12, 13, 35, 36, 40, 198, 257, 301, 307, 328, 334, 338, 339, 452, 494, 532, 534, 537, 538, 571, 594, 673, 730, 738], "30000000e": [12, 35, 257, 301], "eye_lik": [12, 35, 301], "elsewher": [12, 35, 86, 258, 301, 529, 544, 646, 716], "trilu": [12, 35, 301], "retain": [12, 100, 268, 269, 301, 517, 529, 535, 734, 753], "unsorted_segment_min": [12, 35, 301], "segment_id": [12, 35, 270, 271, 301, 694], "num_seg": [12, 35, 270, 271, 301, 694], "segment": [12, 35, 270, 271, 301, 722, 727], "id": [12, 35, 149, 270, 271, 301, 531, 689, 690, 706, 712, 714, 716, 720, 722, 723, 730, 734, 738, 752], "drop": [12, 35, 270, 301, 309, 310, 371, 401, 687, 688, 716, 751], "gather": [12, 13, 35, 36, 270, 271, 301, 456, 458, 534, 765], "th": [12, 35, 270, 271, 278, 301, 304, 308, 319, 353, 358, 436], "identifi": [12, 35, 270, 271, 301, 719, 724, 738, 741], "total": [12, 25, 29, 35, 48, 53, 88, 168, 270, 271, 277, 301, 304, 529, 531, 544, 547, 645, 662, 664, 706, 710, 711, 717, 725, 726, 727, 738, 741, 746, 747, 751], "distinct": [12, 23, 35, 270, 271, 301, 545, 647, 648, 649, 650, 709, 716, 723, 728, 734, 735, 736, 742, 758], "unsorted_segment_sum": [12, 35, 301], "_arraywithdata_typeexperiment": [12, 52], "_arraywithdeviceexperiment": [12, 52], "_arraywithelementwiseexperiment": [12, 52], "allclos": [12, 35, 304], "rtol": [12, 17, 35, 40, 273, 286, 304, 537, 578, 581, 668, 670, 737], "atol": [12, 17, 35, 40, 273, 286, 304, 537, 578, 668, 670, 737], "08": [12, 25, 35, 44, 179, 273, 286, 304, 307, 328, 338, 532, 638, 639, 664, 668, 673, 730], "equal_nan": [12, 35, 273, 286, 304], "rel": [12, 14, 17, 19, 24, 31, 35, 37, 40, 42, 47, 52, 90, 273, 286, 304, 309, 319, 371, 427, 516, 519, 521, 522, 523, 535, 537, 539, 546, 568, 578, 581, 589, 601, 605, 651, 654, 668, 670, 717, 724, 737, 741, 758, 760], "toler": [12, 17, 35, 40, 273, 286, 304, 308, 356, 367, 370, 537, 578, 581, 668, 670, 719, 737, 758], "compar": [12, 13, 23, 24, 29, 35, 36, 47, 273, 286, 304, 437, 440, 534, 545, 546, 647, 648, 649, 650, 651, 654, 670, 706, 721, 727, 729, 737, 738, 741, 746, 754, 756, 758, 764, 765], "1e10": [12, 273, 286, 304], "00001e10": [12, 273, 286, 304], "00001e": [12, 273, 304], "005": [12, 273, 286, 304], "binar": [12, 35, 304], "outcom": [12, 35, 274, 284, 304], "comparison": [12, 35, 194, 229, 274, 304, 309, 371, 532, 537, 586, 729], "conj": [12, 35, 191, 196, 198, 239, 240, 244, 304, 532], "conjug": [12, 17, 35, 40, 275, 304, 307, 308, 314, 329, 351, 356, 364, 366, 415, 537, 575, 579, 587], "copysign": [12, 35, 304], "unsign": [12, 25, 35, 276, 304, 319, 428, 429, 547, 655, 656, 661, 663, 674, 725, 743], "count_nonzero": [12, 35, 304], "keepdim": [12, 17, 19, 22, 25, 26, 29, 35, 40, 42, 45, 48, 49, 277, 291, 297, 304, 305, 319, 432, 433, 434, 435, 436, 537, 539, 544, 547, 548, 576, 592, 611, 642, 643, 658, 659, 660, 661, 662, 663, 664, 665, 666, 729, 736, 743], "count": [12, 19, 23, 26, 31, 35, 42, 46, 49, 88, 159, 277, 304, 310, 319, 404, 425, 430, 529, 531, 537, 539, 545, 548, 565, 591, 598, 601, 647, 648, 665, 666, 722, 723, 727, 746], "flatten": [12, 13, 17, 19, 22, 23, 35, 36, 40, 42, 45, 46, 277, 291, 304, 308, 310, 319, 353, 392, 396, 401, 404, 425, 432, 433, 434, 436, 448, 452, 534, 537, 539, 544, 545, 572, 580, 592, 598, 603, 605, 642, 643, 647, 648, 649, 650, 668, 670, 686, 706, 735, 741], "left": [12, 17, 22, 24, 35, 40, 45, 47, 69, 70, 185, 200, 277, 291, 297, 304, 305, 307, 308, 310, 319, 341, 355, 358, 362, 368, 369, 384, 394, 432, 433, 434, 436, 448, 528, 532, 534, 537, 544, 546, 569, 570, 576, 585, 590, 642, 653, 716, 717, 719, 722, 724, 725, 727], "diff": [12, 29, 35, 304, 727, 735], "prepend": [12, 35, 278, 304, 537, 539, 575, 600, 716], "append": [12, 17, 29, 35, 185, 278, 304, 532, 537, 539, 568, 575, 600, 706, 724, 738, 743, 746], "differenc": [12, 35, 278, 304], "taken": [12, 17, 35, 40, 278, 304, 307, 350, 537, 568, 715, 724, 736, 739, 748, 759], "prior": [12, 35, 278, 304, 314, 415, 537, 587, 729, 739], "expand": [12, 13, 19, 35, 36, 278, 304, 310, 452, 534, 539, 600, 723], "direct": [12, 35, 278, 283, 287, 292, 295, 304, 307, 310, 340, 350, 384, 385, 399, 546, 654, 715, 720, 722, 736, 741, 747, 748, 750, 754, 758, 759, 762], "except": [12, 13, 19, 21, 26, 29, 35, 36, 40, 44, 49, 107, 278, 304, 314, 319, 414, 433, 434, 447, 465, 482, 496, 502, 530, 534, 537, 539, 543, 544, 548, 581, 598, 600, 608, 637, 638, 639, 645, 665, 666, 668, 671, 690, 706, 717, 718, 719, 720, 724, 725, 726, 728, 731, 735, 736, 739, 740, 741, 745, 751], "discret": [12, 35, 278, 304, 307, 328, 329, 334, 335, 338, 339, 340, 350, 538, 595, 688], "digamma": [12, 35, 304], "7549271": [12, 279, 304], "92278427": [12, 35, 279, 304], "9988394": [12, 279, 304], "nearest": [12, 35, 176, 193, 226, 236, 280, 304, 307, 319, 342, 436, 532, 741], "toward": [12, 19, 35, 42, 200, 247, 280, 292, 304, 310, 319, 399, 430, 532, 539, 605, 706, 712, 716, 743, 754, 758], "float_pow": [12, 35, 304], "125": [12, 17, 40, 187, 281, 304, 532, 537, 590], "fmax": [12, 35, 304], "fmod": [12, 35, 532], "divis": [12, 13, 14, 35, 36, 37, 187, 193, 200, 202, 235, 237, 247, 310, 379, 485, 493, 506, 515, 516, 521, 532, 534, 535, 536, 549, 556, 557, 692, 732, 740], "frexp": [12, 35, 304], "next": [12, 35, 118, 283, 287, 292, 295, 304, 530, 687, 689, 690, 692, 710, 712, 715, 716, 717, 721, 725, 727, 728, 730, 733, 744, 745, 746, 758, 760], "represent": [12, 13, 29, 35, 36, 53, 103, 104, 118, 121, 146, 147, 173, 176, 183, 186, 188, 193, 200, 223, 226, 228, 243, 261, 283, 287, 292, 295, 301, 304, 438, 498, 527, 530, 531, 532, 534, 673, 675, 676, 688, 750, 756, 757, 759, 763, 764], "edge_ord": [12, 35, 284, 304], "estim": [12, 35, 284, 304, 319, 427], "boundari": [12, 21, 35, 44, 284, 304, 307, 342, 543, 639, 758], "partial": [12, 29, 35, 119, 120, 152, 153, 284, 304, 308, 310, 319, 367, 394, 395, 396, 397, 434, 453, 454, 520, 530, 531, 534, 535, 537, 574, 674, 676, 689, 690, 717, 722, 741], "diment": [12, 284, 304], "40": [12, 13, 34, 35, 36, 44, 48, 53, 187, 191, 211, 240, 284, 304, 307, 326, 328, 338, 344, 448, 450, 455, 456, 480, 493, 514, 517, 532, 534, 535, 537, 541, 547, 573, 580, 625, 638, 657, 661, 706, 724], "80": [12, 35, 284, 304, 308, 319, 365, 428, 537, 541, 547, 580, 627, 657, 709], "72": [12, 21, 35, 37, 198, 284, 304, 307, 328, 338, 519, 532, 535, 537, 547, 580, 638, 657], "33333333": [12, 35, 234, 284, 304, 532], "hypot": [12, 35, 304], "hypotenus": [12, 285, 304], "4031": [12, 285, 304], "8102": [12, 285, 304], "isclos": [12, 35, 304, 719], "ldexp": [12, 35, 304], "lerp": [12, 35, 304], "end": [12, 35, 75, 181, 237, 288, 304, 310, 383, 393, 395, 396, 398, 529, 532, 686, 706, 716, 717, 721, 724, 735, 739, 741, 742, 750, 751, 756, 761], "interpol": [12, 35, 288, 304, 307, 319, 435, 436, 536, 562, 741, 758], "lgamma": [12, 304], "45373654": [12, 289, 304], "6477685": [12, 289, 304], "modf": [12, 35, 304], "fraction": [12, 35, 290, 304, 319, 436, 536, 559], "nansum": [12, 35, 304], "accumul": [12, 35, 291, 304], "nextaft": [12, 35, 304], "0e": [12, 14, 35, 37, 292, 304, 521, 535], "4013e": [12, 35, 292, 304], "4028e": [12, 35, 292, 304], "signbit": [12, 35, 304], "sinc": [12, 35, 304, 706, 709, 716, 717, 719, 720, 721, 723, 724, 725, 726, 729, 735, 736, 751, 758, 764], "637": [12, 35, 294, 304], "212": [12, 16, 35, 294, 304, 560], "0909": [12, 35, 294, 304], "xlogi": [12, 35, 304], "0986": [12, 35, 295, 304], "3863": [12, 35, 295, 304], "0000": [12, 35, 259, 260, 263, 295, 301, 304, 308, 310, 363, 387], "zeta": [12, 35, 304], "q": [12, 16, 17, 35, 39, 40, 296, 304, 308, 319, 355, 435, 436, 536, 537, 541, 563, 569, 570, 582, 624, 716, 717, 718, 737, 751], "0369": [12, 35, 296, 304], "2021": [12, 35, 296, 304, 706], "_arraywithgeneralexperiment": [12, 52], "init_valu": [12, 35, 39, 297, 305, 307, 349], "act": [12, 35, 297, 305, 717, 727, 740, 751, 765], "reduct": [12, 13, 18, 26, 29, 35, 36, 39, 41, 49, 297, 305, 307, 309, 349, 371, 449, 479, 480, 534, 538, 548, 594, 595, 596, 665, 666, 689, 725, 732, 735, 738, 745], "_arraywithgradientsexperiment": [12, 52], "_arraywithimageexperiment": [12, 52], "_arraywithlayersexperiment": [12, 52], "adaptive_avg_pool1d": [12, 35, 307], "adapt": [12, 35, 37, 307, 321, 322, 323, 522, 535, 688, 692, 709], "averag": [12, 14, 18, 35, 37, 41, 307, 309, 319, 321, 322, 325, 326, 327, 371, 427, 515, 516, 521, 535, 536, 538, 540, 562, 594, 613, 614, 687, 688], "pool": [12, 35, 39, 307, 321, 322, 323, 325, 326, 327, 343, 344, 345, 346, 349, 688, 716], "signal": [12, 35, 307, 321, 322, 323, 328, 329, 338, 688, 757, 758], "plane": [12, 35, 193, 196, 198, 226, 238, 239, 240, 243, 307, 310, 321, 322, 323, 399, 532], "l_in": [12, 35, 307, 321], "batch": [12, 13, 17, 29, 35, 36, 40, 164, 165, 307, 313, 321, 322, 323, 329, 342, 407, 408, 409, 452, 455, 456, 514, 531, 534, 536, 537, 540, 542, 560, 562, 574, 592, 613, 614, 615, 635, 688, 691, 706, 723, 732, 737, 746, 756], "spatial": [12, 16, 35, 39, 307, 313, 321, 322, 323, 342, 349, 407, 408, 409, 536, 549, 550, 551, 552, 554, 556, 558, 691, 750], "Will": [12, 35, 307, 321, 322, 323, 686, 697, 751], "l_out": [12, 35, 307, 321], "adaptive_avg_pool2d": [12, 35, 307], "h_in": [12, 35, 307, 322, 323], "w_in": [12, 35, 307, 322, 323], "s_0": [12, 35, 307, 322, 323], "s_1": [12, 35, 307, 322, 323], "adaptive_max_pool2d": [12, 35, 307], "avg_pool1d": [12, 35, 307], "kernel": [12, 16, 35, 39, 307, 325, 326, 327, 343, 344, 345, 346, 536, 561, 743, 751, 758, 761, 762], "stride": [12, 16, 35, 36, 39, 52, 307, 310, 325, 326, 327, 343, 344, 345, 346, 348, 349, 372, 534, 536, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 688, 735, 739, 758], "pad": [12, 16, 19, 35, 39, 42, 307, 310, 325, 326, 327, 328, 329, 334, 335, 338, 339, 340, 342, 343, 344, 345, 346, 348, 349, 350, 452, 534, 536, 539, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 599, 612, 675, 688, 706], "data_format": [12, 16, 35, 39, 307, 313, 325, 326, 327, 330, 331, 332, 343, 344, 345, 346, 348, 407, 408, 409, 536, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 673, 688, 691, 706], "nwc": [12, 16, 35, 39, 307, 325, 330, 343, 346, 536, 549, 550, 551, 556, 557, 688], "count_include_pad": [12, 35, 307, 325, 326, 327, 688], "ceil_mod": [12, 35, 307, 325, 326, 327, 343, 344, 345, 348, 688], "batch_siz": [12, 16, 21, 35, 39, 44, 307, 325, 326, 327, 343, 344, 345, 346, 536, 543, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 562, 636, 706, 746], "d_in": [12, 16, 35, 39, 307, 325, 326, 327, 329, 334, 335, 339, 343, 344, 345, 346, 536, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558], "slide": [12, 16, 35, 39, 307, 325, 326, 327, 343, 344, 345, 346, 349, 536, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 688], "algorithm": [12, 16, 28, 35, 39, 59, 307, 308, 325, 326, 327, 342, 343, 344, 345, 346, 367, 368, 370, 537, 550, 552, 553, 554, 555, 558, 583, 688, 725, 736, 741, 751, 758, 760, 762], "per": [12, 16, 35, 39, 307, 308, 310, 325, 326, 327, 343, 344, 345, 346, 366, 400, 536, 550, 552, 553, 554, 555, 558, 562, 688, 717, 724, 736, 746], "ncw": [12, 16, 35, 39, 307, 325, 330, 331, 343, 346, 536, 549, 550, 551, 556, 557, 688], "arang": [12, 17, 25, 35, 40, 91, 307, 308, 325, 326, 327, 334, 339, 343, 344, 345, 346, 348, 352, 365, 385, 475, 514, 529, 534, 537, 540, 547, 576, 592, 615, 657, 706, 725, 735, 765], "reshap": [12, 16, 17, 19, 29, 35, 39, 40, 42, 307, 308, 310, 325, 326, 327, 330, 343, 344, 345, 346, 348, 352, 365, 383, 514, 534, 536, 537, 539, 552, 554, 558, 576, 592, 706, 735, 736, 738, 741, 743, 745, 748], "avg_pool2d": [12, 35, 307], "nhwc": [12, 16, 35, 39, 307, 326, 331, 344, 348, 536, 549, 552, 553, 556, 557, 558, 688], "divisor_overrid": [12, 35, 307, 326, 327, 688], "nchw": [12, 16, 35, 39, 307, 326, 331, 344, 348, 536, 549, 552, 553, 556, 557, 558, 688, 706], "kernel_s": [12, 35, 307, 325, 326, 327, 688, 694], "max_pool2d": [12, 35, 307, 326], "46": [12, 21, 35, 39, 44, 92, 216, 237, 259, 301, 307, 326, 344, 345, 529, 532, 541, 617, 637, 638], "avg_pool3d": [12, 35, 307], "ndhwc": [12, 16, 35, 39, 307, 327, 332, 345, 536, 549, 554, 555, 556, 557, 688], "d": [12, 13, 16, 17, 19, 31, 35, 36, 39, 40, 42, 65, 92, 100, 133, 176, 193, 194, 226, 229, 268, 301, 307, 308, 310, 314, 317, 325, 326, 327, 334, 339, 343, 344, 345, 346, 348, 353, 365, 376, 379, 381, 384, 388, 401, 405, 413, 419, 440, 526, 529, 530, 532, 536, 537, 539, 541, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 567, 568, 572, 576, 580, 590, 606, 619, 623, 624, 625, 628, 633, 634, 706, 709, 710, 711, 716, 718, 721, 722, 723, 734, 738, 741, 746, 754], "volum": [12, 16, 35, 39, 307, 327, 329, 334, 335, 339, 345, 536, 554, 555, 712], "filter": [12, 16, 35, 39, 262, 263, 301, 307, 327, 345, 536, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 675, 688, 706, 721, 724], "ncdhw": [12, 16, 35, 39, 307, 327, 332, 345, 536, 549, 554, 555, 556, 557, 688], "43": [12, 44, 53, 187, 307, 308, 319, 327, 354, 428, 532, 543, 544, 638, 639, 646], "dct": [12, 35, 307, 688, 746], "lenght": [12, 35, 259, 262, 263, 272, 307, 328, 688], "truncat": [12, 35, 307, 308, 328, 334, 338, 339, 340, 350, 369, 482, 534, 686, 688, 729, 746], "larger": [12, 19, 25, 35, 42, 48, 118, 307, 328, 335, 338, 340, 350, 530, 539, 547, 597, 605, 662, 664, 688, 738, 741, 765], "ortho": [12, 35, 307, 328, 329, 334, 335, 338, 339, 340, 350, 688], "102": [12, 35, 44, 328, 637], "406": [12, 35, 328, 443, 534], "dft": [12, 35, 307], "onesid": [12, 35, 307, 329], "dft_length": [12, 35, 307, 329], "backward": [12, 26, 35, 49, 235, 307, 329, 334, 335, 339, 340, 350, 532, 537, 548, 565, 591, 665, 666, 688, 739, 751], "fourier": [12, 35, 307, 329, 334, 335, 339, 340, 350, 452, 534], "fft": [12, 35, 307, 329, 335, 350, 688, 715, 758], "n_fft": [12, 307, 329], "becaus": [12, 307, 329, 716, 717, 719, 720, 721, 722, 723, 725, 726, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 741, 743, 747, 748, 751, 758, 761, 764], "satisfi": [12, 307, 308, 329, 356, 727], "symmetri": [12, 307, 329], "fast": [12, 307, 329, 758], "rfft": [12, 35, 307, 329, 350], "batch_idx": [12, 307, 329], "signal_dim1": [12, 307, 329], "signal_dim2": [12, 307, 329], "signal_dimn": [12, 307, 329], "signal_dim": [12, 307, 329], "embed": [12, 35, 307, 536, 562, 675, 688, 758], "max_norm": [12, 13, 35, 36, 307, 333, 443, 444, 534, 688], "dim": [12, 29, 31, 35, 95, 258, 301, 307, 310, 324, 334, 335, 336, 339, 347, 383, 529, 536, 549, 556, 557, 675, 688, 706, 725, 736, 737, 741], "ifft": [12, 35, 307, 334, 340], "pi": [12, 35, 239, 243, 307, 334, 339, 527, 532], "44509285e": [12, 35, 307, 334], "14423775e": [12, 35, 307, 334], "17j": [12, 35, 307, 334, 339], "11483250e": [12, 35, 307, 334], "16j": [12, 35, 307, 334, 339], "33486982e": [12, 35, 307, 334], "22464680e": [12, 35, 307, 334], "95799250e": [12, 35, 307, 334], "66951701e": [12, 35, 307, 334], "fft2": [12, 307], "crop": [12, 35, 307, 335, 340, 350], "repeat": [12, 13, 19, 35, 36, 42, 307, 319, 335, 340, 427, 450, 534, 539, 540, 610, 615, 700, 712, 717, 720, 721, 727, 728, 735, 738], "20477401j": [12, 307, 335], "0614962j": [12, 307, 335], "idct": [12, 35, 307], "79": [12, 13, 35, 36, 39, 44, 52, 188, 193, 307, 328, 338, 349, 443, 444, 532, 534, 639], "49862671": [12, 35, 307, 328, 338], "70": [12, 35, 36, 307, 328, 338, 456, 480, 537, 547, 580, 657, 709], "37691498": [12, 35, 307, 328, 338], "00390816": [12, 35, 307, 328, 338], "58938599": [12, 35, 307, 328, 338], "92713165": [12, 35, 307, 328, 338], "078475": [12, 35, 307, 328, 338], "19664812": [12, 35, 307, 328, 338], "95411837": [12, 35, 307, 328, 338], "30636606e": [12, 35, 307, 339], "43029718e": [12, 35, 307, 339], "18j": [12, 35, 307, 334, 339], "53080850e": [12, 35, 307, 339], "58689626e": [12, 35, 307, 339], "24474906e": [12, 35, 307, 339], "91858728e": [12, 35, 307, 339], "01435406e": [12, 35, 307, 339], "ifftn": [12, 35, 307], "combin": [12, 29, 35, 53, 307, 319, 340, 350, 427, 453, 454, 534, 537, 565, 575, 717, 720, 723, 724, 725, 727, 729, 732, 738, 748, 758], "explain": [12, 35, 307, 340, 350, 706, 715, 716, 717, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 738, 739, 741, 743, 744, 745, 746, 747, 748, 754, 761, 764], "24730653": [12, 35, 307, 340], "90832391j": [12, 35, 307, 340], "49495562": [12, 35, 307, 340], "9039565j": [12, 35, 307, 340], "98193269": [12, 35, 307, 340], "49560517j": [12, 35, 307, 340], "93280757": [12, 35, 307, 340], "48075343j": [12, 35, 307, 340], "28526384": [12, 35, 307, 340], "3351205j": [12, 35, 307, 340], "2343787": [12, 35, 307, 340], "83528011j": [12, 35, 307, 340], "18791352": [12, 35, 307, 340], "30690572j": [12, 35, 307, 340], "82115787": [12, 35, 307, 340], "96195183j": [12, 35, 307, 340], "44719226": [12, 35, 307, 340], "72654048j": [12, 35, 307, 340], "51476765": [12, 307, 340], "66160417j": [12, 307, 340], "04319742": [12, 307, 340], "05411636j": [12, 307, 340], "015561": [12, 307, 340], "04216015j": [12, 307, 340], "06310689": [12, 307, 340], "05347854j": [12, 307, 340], "13392983": [12, 307, 340], "16052352j": [12, 307, 340], "08371392": [12, 307, 340], "17252843j": [12, 307, 340], "0031429": [12, 307, 340], "05421245j": [12, 307, 340], "10446617": [12, 307, 340], "17747098j": [12, 307, 340], "05344324": [12, 307, 340], "07972424j": [12, 307, 340], "8344667": [12, 35, 307, 340], "98222595j": [12, 35, 307, 340], "48472244": [12, 35, 307, 340], "30233797j": [12, 35, 307, 340], "scale_factor": [12, 35, 307, 342, 741], "recompute_scale_factor": [12, 35, 307, 342, 741], "align_corn": [12, 35, 307, 342, 741], "antialia": [12, 35, 307, 342, 741], "down": [12, 35, 307, 310, 342, 385, 686, 716, 738, 753, 758, 764], "channel": [12, 13, 16, 35, 36, 39, 52, 53, 307, 313, 330, 331, 332, 342, 407, 408, 409, 448, 452, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 558, 684, 685, 687, 688, 690, 691, 692, 693, 712, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741], "height": [12, 13, 16, 35, 36, 39, 307, 342, 448, 534, 536, 552, 553, 554, 555, 558, 686, 746], "width": [12, 13, 16, 35, 36, 39, 307, 308, 310, 319, 342, 356, 393, 430, 448, 534, 536, 550, 551, 552, 553, 554, 555, 558, 562], "bilinear": [12, 35, 307, 342, 741], "trilinear": [12, 35, 307, 342, 741], "nearest_exact": [12, 35, 307, 342, 741], "tf_area": [12, 35, 307, 342, 741], "bicub": [12, 35, 307, 342, 741], "mitchellcub": [12, 35, 307, 342, 741], "lanczos3": [12, 35, 307, 342, 741], "lanczos5": [12, 35, 307, 342, 741], "gaussian": [12, 35, 59, 307, 342, 526, 741], "overwrit": [12, 29, 35, 166, 307, 342, 531, 717, 735, 736, 743], "corner": [12, 35, 307, 342, 716, 717, 736], "pixel": [12, 35, 307, 342], "align": [12, 29, 35, 307, 308, 342, 353, 716, 724, 736, 743, 745, 753, 764], "thu": [12, 35, 187, 200, 231, 235, 243, 244, 307, 308, 342, 355, 532, 537, 569, 570, 712, 715, 724, 729, 733, 736, 739], "antialias": [12, 35, 307, 342], "downsampl": [12, 35, 307, 342], "resiz": [12, 35, 307, 342, 741], "max_pool1d": [12, 35, 307, 346], "dilat": [12, 16, 35, 39, 307, 310, 343, 344, 345, 348, 349, 393, 536, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 688], "dilaton": [12, 35, 307, 343, 344, 345], "ensur": [12, 13, 35, 36, 307, 308, 343, 344, 345, 368, 465, 534, 668, 706, 715, 716, 717, 720, 725, 727, 729, 730, 731, 733, 735, 736, 737, 738, 739, 752, 758], "cover": [12, 35, 307, 343, 344, 345, 706, 715, 719, 720, 722, 727, 728, 732, 733, 738, 741, 742], "max_pool3d": [12, 35, 307], "reduce_window": [12, 39, 307], "window_dimens": [12, 39, 307, 349], "window_strid": [12, 39, 307, 349], "base_dil": [12, 39, 307, 349], "window_dil": [12, 39, 307, 349], "string": [12, 13, 16, 29, 35, 39, 103, 104, 116, 123, 145, 146, 147, 148, 149, 151, 160, 167, 168, 172, 254, 299, 307, 308, 310, 349, 356, 393, 429, 446, 530, 531, 534, 536, 537, 549, 550, 551, 552, 554, 556, 558, 571, 670, 674, 686, 700, 721, 722, 724, 725, 726, 729, 736, 743, 746], "low": [12, 16, 21, 39, 44, 307, 349, 536, 543, 549, 550, 551, 552, 554, 556, 558, 637, 639, 675, 723, 729, 735, 736, 741, 743, 754, 756, 758, 759, 760, 762, 764], "high": [12, 16, 21, 39, 44, 307, 349, 487, 534, 536, 543, 549, 550, 551, 552, 554, 556, 558, 637, 639, 675, 710, 715, 729, 734, 736, 746, 753, 754, 755, 756, 757, 758, 762, 764, 765], "pair": [12, 16, 39, 181, 200, 264, 296, 301, 304, 307, 340, 349, 350, 532, 536, 537, 549, 550, 551, 552, 554, 556, 558, 563, 565], "give": [12, 16, 39, 132, 307, 349, 530, 536, 539, 549, 550, 551, 552, 554, 556, 558, 604, 686, 687, 706, 710, 712, 716, 717, 718, 721, 724, 725, 727, 728, 730, 731, 738, 758, 762], "rfftn": [12, 35, 307], "linear_algebra": [12, 17, 35, 40, 537, 739], "_arraywithlinearalgebraexperiment": [12, 52], "adjoint": [12, 17, 35, 40, 308, 537, 573, 584, 585, 673], "cond": [12, 35, 72, 308, 528, 751], "p": [12, 13, 17, 35, 36, 40, 93, 197, 308, 313, 352, 412, 443, 444, 529, 532, 534, 537, 541, 576, 592, 624, 688, 706, 716, 717, 718], "933034373659268": [12, 352], "diagflat": [12, 35, 308, 360, 363], "offset": [12, 17, 20, 31, 35, 40, 43, 88, 308, 313, 353, 407, 408, 409, 529, 537, 542, 568, 589, 635, 679], "padding_valu": [12, 35, 308, 353], "right_left": [12, 35, 308, 353], "num_row": [12, 35, 308, 353], "num_col": [12, 35, 308, 353], "eig": [12, 17, 35, 308, 537, 570, 571], "37228132": [12, 35, 308, 355, 357, 569], "82456484": [12, 355, 569], "41597356": [12, 355, 569], "56576746": [12, 355, 569], "90937671": [12, 355, 569], "eigh_tridiagon": [12, 35, 308], "eigvals_onli": [12, 35, 308, 356], "select": [12, 25, 35, 48, 308, 310, 319, 356, 365, 401, 428, 429, 547, 655, 656, 715, 716, 717, 724, 735, 738, 743, 745, 748, 751, 758, 761, 762], "select_rang": [12, 35, 308, 356], "tol": [12, 35, 308, 356, 367, 370], "eigenvector": [12, 35, 308, 355, 356, 537, 569, 570], "v": [12, 16, 24, 31, 35, 39, 47, 92, 191, 196, 198, 239, 308, 310, 356, 362, 368, 382, 532, 536, 540, 546, 563, 615, 653, 670, 686, 688, 689, 690, 691, 692, 693, 706, 712, 713, 716, 717, 718, 722, 743, 746, 747, 748], "interv": [12, 21, 26, 35, 44, 49, 75, 91, 92, 98, 308, 319, 356, 430, 529, 537, 539, 543, 548, 565, 591, 597, 600, 608, 637, 639, 665, 666], "togeth": [12, 29, 35, 273, 286, 304, 308, 356, 693, 706, 709, 720, 723, 725, 735, 736, 738, 739, 741, 747, 748, 751, 756, 758, 759, 764], "cluster": [12, 35, 308, 356, 751, 758], "converg": [12, 35, 308, 356, 710], "li": [12, 35, 308, 319, 356, 436, 708], "_2": [12, 35, 308, 356], "machin": [12, 17, 35, 40, 118, 121, 308, 356, 530, 537, 578, 581, 709, 716, 719, 732, 750, 753, 756, 758, 760, 761, 762, 763, 764], "precis": [12, 17, 35, 40, 118, 206, 226, 233, 240, 281, 304, 308, 319, 356, 427, 487, 508, 530, 532, 534, 537, 570, 571, 576, 583, 585, 586, 592, 724, 725, 736, 740, 741, 762], "eig_val": [12, 35, 308, 356], "decreas": [12, 35, 308, 356, 675], "eig_vector": [12, 35, 308, 356], "38196": [12, 356], "61803": [12, 356], "eigval": [12, 35, 308], "initialize_tuck": [12, 35, 308], "svd": [12, 17, 35, 40, 308, 358, 362, 367, 368, 369, 370, 537, 586], "seed": [12, 16, 21, 23, 29, 35, 39, 44, 266, 267, 301, 308, 314, 358, 367, 370, 413, 414, 415, 416, 417, 536, 543, 545, 559, 636, 637, 638, 639, 641, 647, 680, 685, 687, 733, 737, 738], "truncated_svd": [12, 35, 308, 358, 367, 370], "non_neg": [12, 35, 267, 301, 308, 358], "svd_mask_repeat": [12, 35, 308, 358, 367, 370], "compon": [12, 35, 96, 97, 174, 175, 176, 179, 182, 191, 193, 194, 196, 198, 226, 228, 229, 236, 239, 240, 243, 244, 266, 267, 275, 301, 304, 308, 358, 367, 529, 532, 544, 645, 706, 709, 743, 754, 759, 761], "distribut": [12, 18, 21, 35, 41, 44, 307, 308, 309, 314, 330, 331, 332, 358, 367, 370, 371, 413, 414, 415, 416, 417, 538, 543, 594, 595, 596, 636, 637, 638, 639, 641, 687, 688, 689, 690, 715, 716, 724, 726, 751, 758, 761], "scheme": [12, 35, 308, 358, 367, 719, 747, 758], "tucker": [12, 35, 267, 301, 308, 358, 367], "miss": [12, 35, 308, 310, 358, 367, 370, 400, 692, 715, 716, 720, 723, 724, 727, 736, 738, 741], "everywher": [12, 35, 308, 358, 367, 370], "els": [12, 13, 21, 34, 35, 44, 111, 112, 113, 114, 115, 127, 233, 237, 308, 314, 358, 367, 369, 370, 414, 447, 451, 530, 532, 534, 541, 543, 626, 629, 637, 638, 639, 668, 700, 706, 715, 716, 717, 719, 721, 725, 726, 729, 732, 735, 736, 737, 738, 739, 741, 743, 745, 747, 748, 751, 759], "imput": [12, 35, 308, 358, 367, 370], "kron": [12, 35, 308, 363, 765], "make_svd_non_neg": [12, 35, 308, 369], "nntype": [12, 35, 308, 362], "nndsvd": [12, 35, 308, 362], "being": [12, 29, 35, 50, 52, 55, 75, 308, 310, 362, 393, 488, 529, 534, 537, 571, 670, 676, 686, 687, 706, 709, 710, 716, 717, 719, 720, 721, 723, 725, 726, 727, 731, 733, 735, 736, 737, 738, 739, 741, 743, 746, 750, 751, 754, 756, 757, 758, 759, 764, 765], "singular": [12, 17, 35, 40, 308, 358, 362, 368, 369, 537, 576, 578, 581, 585, 586, 675, 725], "nndsvda": [12, 35, 308, 362], "boutsidi": [12, 35, 308, 362], "gallopoulo": [12, 35, 308, 362], "pattern": [12, 13, 35, 36, 308, 362, 448, 449, 450, 534, 710, 725, 728], "recognit": [12, 35, 308, 362], "1350": [12, 35, 308, 362], "1362": [12, 35, 308, 362], "2008": [12, 35, 308, 362, 758], "matrix_exp": [12, 35, 308], "7183": [12, 35, 308, 363], "3891": [12, 35, 308, 363], "multi_dot": [12, 35, 308], "49": [12, 21, 35, 39, 40, 240, 307, 308, 319, 328, 338, 349, 365, 428, 532, 547, 590, 638, 657], "148": [12, 34, 35, 196, 308, 365], "multi_mode_dot": [12, 35, 308], "mat_or_vec_list": [12, 35, 308, 366], "skip": [12, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 59, 60, 61, 62, 63, 64, 65, 66, 67, 88, 90, 95, 97, 102, 106, 108, 133, 167, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 258, 273, 274, 275, 277, 279, 285, 286, 292, 294, 295, 296, 297, 308, 310, 330, 331, 332, 359, 361, 366, 374, 375, 376, 378, 394, 397, 399, 401, 402, 407, 409, 410, 411, 412, 414, 427, 428, 429, 430, 437, 440, 441, 443, 444, 448, 449, 450, 452, 455, 456, 459, 461, 463, 464, 465, 467, 468, 471, 479, 480, 493, 494, 496, 498, 500, 501, 513, 519, 524, 541, 550, 551, 552, 553, 559, 560, 563, 564, 565, 570, 571, 572, 573, 575, 576, 578, 580, 582, 583, 589, 594, 595, 596, 597, 601, 604, 605, 606, 607, 608, 611, 612, 629, 636, 637, 638, 639, 641, 644, 647, 648, 649, 650, 651, 655, 656, 659, 661, 662, 664, 665, 666, 674, 700, 722, 732, 738], "ndim": [12, 17, 22, 35, 40, 45, 52, 55, 308, 310, 366, 367, 370, 374, 375, 376, 386, 394, 396, 403, 514, 534, 537, 544, 582, 585, 645, 723, 732, 738], "text": [12, 13, 308, 366, 715, 717, 722, 727, 728], "times_0": [12, 308, 366], "vec": [12, 308, 366], "times_1": [12, 308, 366], "cdot": [12, 226, 308, 366, 532], "times_n": [12, 308, 366], "partial_tuck": [12, 35, 308], "n_iter_max": [12, 35, 308, 367, 370], "verbos": [12, 35, 308, 367, 370, 738, 743], "return_error": [12, 35, 308, 367, 370], "variat": [12, 35, 308, 367, 370, 727, 736, 738], "reconstruct": [12, 17, 23, 35, 46, 308, 310, 367, 370, 404, 537, 545, 585, 647, 649, 737], "return_erro": [12, 308, 367, 370], "svd_flip": [12, 35, 308], "u_based_decis": [12, 35, 308, 368], "basi": [12, 35, 308, 368, 717, 719, 746], "row": [12, 35, 86, 100, 268, 301, 308, 310, 317, 319, 359, 368, 385, 391, 406, 420, 426, 427, 529, 537, 543, 544, 576, 584, 585, 590, 636, 645, 687], "decis": [12, 35, 308, 368, 719, 725, 741, 743, 745, 758], "u_adjust": [12, 35, 308, 368], "v_adjust": [12, 35, 308, 368], "compute_uv": [12, 17, 35, 40, 308, 369, 537, 585], "n_eigenvec": [12, 35, 308, 369], "returnedv": [12, 369], "vh": [12, 17, 35, 40, 308, 369, 537, 585], "significantli": [12, 17, 35, 40, 308, 369, 537, 585, 708, 724, 756], "faster": [12, 17, 35, 40, 308, 369, 537, 585, 714, 753, 760, 763], "eigen": [12, 35, 308, 369], "namedtupl": [12, 17, 23, 35, 40, 46, 308, 310, 355, 369, 404, 537, 545, 569, 570, 582, 583, 585, 647, 648, 649], "fixed_factor": [12, 35, 308, 370], "tl": [12, 35, 308, 370], "kolda": [12, 35, 308, 370], "bader": [12, 35, 308, 370], "applic": [12, 16, 35, 39, 308, 370, 536, 537, 541, 547, 562, 563, 589, 622, 623, 624, 628, 629, 661, 663, 706, 716, 724, 725, 726, 733, 747, 755, 756, 758, 760, 762, 764], "siam": [12, 35, 308, 370], "review": [12, 35, 308, 370, 715, 717, 724, 727, 736, 739], "vol": [12, 35, 308, 370], "pp": [12, 35, 308, 370], "455": [12, 35, 308, 370], "500": [12, 35, 36, 39, 307, 308, 330, 331, 370, 456, 534], "2009": [12, 35, 308, 370], "_arraywithlossesexperiment": [12, 52], "manipul": [12, 35, 708, 735, 736, 739, 741, 743, 748, 750, 758], "_arraywithmanipulationexperiment": [12, 52], "as_strid": [12, 35, 310], "nativeshap": [12, 16, 19, 21, 35, 42, 44, 76, 77, 84, 89, 96, 101, 310, 314, 372, 381, 386, 394, 397, 413, 414, 415, 416, 417, 480, 492, 497, 499, 529, 534, 536, 539, 543, 549, 551, 553, 555, 557, 604, 637, 638, 639, 731, 733], "byte": [12, 13, 31, 35, 36, 52, 88, 310, 372, 474, 529, 534, 763, 764], "associative_scan": [12, 35, 310], "revers": [12, 13, 17, 25, 35, 40, 48, 52, 53, 308, 310, 319, 361, 373, 384, 385, 428, 429, 447, 534, 537, 539, 547, 590, 601, 655, 656, 715, 723, 724, 725, 727, 728, 735, 736, 741, 748, 751], "associ": [12, 17, 35, 40, 176, 226, 310, 319, 373, 430, 532, 537, 578, 581, 593, 670, 717, 725, 732, 733, 736, 737, 738, 751], "scan": [12, 35, 310, 373, 751], "atleast_1d": [12, 35, 310], "ari": [12, 35, 310, 374, 375, 376, 379, 388, 405], "cannot": [12, 243, 374, 375, 376, 532, 717, 719, 721, 725, 736, 743, 748, 764], "made": [12, 19, 35, 308, 310, 360, 374, 375, 376, 608, 709, 712, 715, 717, 719, 720, 723, 724, 729, 730, 732, 734, 735, 736, 739, 741, 743, 745, 758], "a1": [12, 36, 374, 375, 376, 440], "a2": [12, 374, 375, 376], "atleast_2d": [12, 35, 310], "atleast_3d": [12, 35, 310], "view": [12, 19, 35, 52, 87, 310, 376, 392, 399, 529, 716, 717, 729, 758], "three": [12, 93, 257, 301, 310, 376, 529, 716, 717, 723, 724, 725, 727, 736, 738, 741, 742, 743, 759, 764], "concat_from_sequ": [12, 35, 310], "input_sequ": [12, 35, 310, 378], "new_axi": [12, 35, 310, 378, 748], "concaten": [12, 13, 19, 35, 40, 310, 378, 448, 452, 534, 536, 539, 562, 580, 598, 737, 741, 743, 746], "insert": [12, 22, 35, 45, 310, 378, 539, 541, 544, 546, 600, 621, 642, 653, 724, 730], "do": [12, 13, 29, 35, 36, 193, 226, 235, 310, 319, 378, 434, 436, 465, 532, 534, 541, 616, 623, 626, 627, 628, 633, 706, 710, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 739, 741, 743, 745, 746, 747, 748, 751, 753, 759, 764, 765], "stack": [12, 17, 19, 29, 35, 40, 42, 52, 98, 99, 269, 301, 308, 310, 355, 378, 380, 389, 406, 482, 490, 511, 529, 534, 537, 539, 541, 566, 568, 569, 570, 571, 573, 575, 577, 578, 579, 581, 582, 583, 585, 586, 589, 616, 626, 627, 688, 706, 714, 719, 721, 735, 743, 754, 756, 763, 764], "dsplit": [12, 35, 310], "indices_or_sect": [12, 35, 310, 379, 388, 405], "3rd": [12, 35, 310, 379], "dstack": [12, 35, 310], "fill_diagon": [12, 35, 310], "fill_diag": [12, 382], "start_dim": [12, 35, 310, 383, 706], "end_dim": [12, 35, 310, 383, 706], "read": [12, 19, 29, 31, 35, 42, 88, 310, 383, 529, 539, 604, 715, 716, 722, 724, 738, 740, 741, 758], "fastest": [12, 19, 35, 42, 308, 310, 365, 383, 539, 604], "slowest": [12, 19, 35, 42, 310, 383, 539, 604], "fortran": [12, 19, 35, 42, 310, 383, 539, 604, 758, 762], "layout": [12, 19, 35, 42, 310, 383, 539, 604, 721, 735, 736, 741], "fliplr": [12, 35, 310, 735], "diag": [12, 17, 35, 40, 310, 384, 385, 537, 570, 743], "flipud": [12, 35, 310, 735], "fold": [12, 35, 310, 394, 395, 724], "folded_tensor": [12, 310, 386], "heavisid": [12, 35, 310], "step": [12, 14, 31, 35, 37, 75, 91, 310, 387, 515, 516, 519, 521, 522, 523, 529, 535, 540, 613, 614, 615, 686, 692, 706, 710, 712, 715, 716, 717, 720, 721, 723, 724, 725, 726, 727, 734, 736, 738, 743, 746, 747, 748, 750, 758], "5000": [12, 310, 387, 537, 573], "hsplit": [12, 35, 310], "horizont": [12, 35, 310, 388, 448, 534], "hstack": [12, 35, 310], "vstack": [12, 35, 310, 389], "i0": [12, 35, 310, 319, 430], "bessel": [12, 25, 35, 48, 262, 301, 310, 390, 547, 662, 664], "kind": [12, 25, 35, 118, 121, 122, 231, 319, 390, 428, 429, 434, 530, 532, 547, 655, 656, 661, 663, 673, 674, 714, 736, 738, 741, 743, 751], "26606588": [12, 35, 310, 390], "2795853": [12, 35, 310, 390], "88079259": [12, 35, 310, 390], "row_mod": [12, 35, 310, 391], "column_mod": [12, 35, 310, 391], "ascend": [12, 24, 35, 47, 310, 317, 391, 420, 546, 651, 653], "prod": [12, 13, 25, 36, 48, 308, 310, 359, 361, 391, 449, 534, 547, 673, 725, 727, 743], "moveaxi": [12, 35, 310], "destin": [12, 35, 310, 392], "unstack": [12, 19, 29, 42, 392, 539, 723, 743, 746, 765], "reorder": [12, 19, 35, 42, 310, 392, 448, 534, 539, 601], "uniqu": [12, 13, 23, 35, 36, 46, 310, 392, 393, 404, 472, 534, 540, 541, 545, 613, 614, 615, 618, 622, 647, 648, 649, 650, 675, 706, 708, 719, 723, 732, 736, 737, 741, 751, 761], "pad_width": [12, 19, 35, 42, 310, 393, 539, 599, 612], "stat_length": [12, 35, 310, 393], "constant_valu": [12, 35, 310, 393], "end_valu": [12, 35, 310, 393], "reflect_typ": [12, 35, 310, 393], "partial_fold": [12, 35, 310], "skip_begin": [12, 35, 310, 394, 395, 396, 397], "untouch": [12, 35, 310, 394, 395, 396, 397], "begin": [12, 35, 237, 310, 393, 394, 395, 396, 397, 532, 541, 616, 627, 686, 716, 719, 724, 737], "re": [12, 13, 22, 35, 45, 166, 310, 394, 395, 448, 531, 534, 537, 539, 544, 587, 605, 644, 646, 707, 708, 709, 711, 715, 716, 717, 718, 719, 725, 734, 735, 736, 737, 739, 741, 745, 748, 751, 758], "partial_tensor_to_vec": [12, 35, 310], "skip_end": [12, 35, 310, 395, 396], "partial_unfold": [12, 35, 310], "ravel_tensor": [12, 35, 310, 396], "n_sampl": [12, 35, 310, 396], "n_1": [12, 35, 310, 396], "n_2": [12, 35, 310, 396], "n_i": [12, 35, 308, 310, 359, 396], "partial_vec_to_tensor": [12, 35, 310], "rot90": [12, 35, 310, 735], "rotat": [12, 35, 310, 399, 750], "soft_threshold": [12, 35, 310], "whole": [12, 35, 310, 313, 400, 410, 411, 412, 717, 722, 730], "take_along_axi": [12, 35, 310], "extract": [12, 35, 310, 401, 736, 739, 754, 758, 759, 764], "One": [12, 13, 19, 21, 35, 36, 42, 44, 310, 374, 375, 376, 393, 401, 449, 534, 539, 543, 604, 637, 720, 723, 725, 727, 732, 737, 738, 743, 745, 746], "bound": [12, 35, 310, 398, 401, 673, 729, 736, 738, 743, 764], "arr": [12, 13, 32, 35, 126, 310, 398, 401, 480, 530, 721, 725, 726], "top_k": [12, 35, 310], "largest": [12, 29, 35, 118, 121, 308, 310, 368, 402, 530, 537, 576, 585, 750], "sort": [12, 23, 29, 35, 46, 53, 245, 308, 310, 319, 355, 402, 420, 434, 532, 537, 545, 569, 570, 585, 586, 647, 651, 652, 653, 675, 706, 714, 724, 739], "top": [12, 19, 35, 310, 402, 448, 534, 598, 686, 706, 716, 717, 725, 736, 738, 741, 746, 747, 758, 762], "retun": [12, 35, 310, 402], "smallest": [12, 29, 35, 118, 121, 189, 310, 402, 530, 532, 537, 576, 673, 675, 676], "name": [12, 17, 23, 27, 40, 46, 50, 200, 308, 310, 355, 402, 404, 438, 439, 532, 534, 537, 545, 569, 570, 574, 582, 583, 585, 590, 647, 648, 649, 670, 674, 680, 690, 697, 699, 715, 716, 717, 721, 722, 723, 724, 727, 728, 729, 731, 736, 737, 738, 739, 740, 741, 743, 746, 748, 758], "unfolded_tensor": [12, 310, 403], "unique_consecut": [12, 35, 310], "vsplit": [12, 35, 310], "vertic": [12, 35, 310, 405, 406, 448, 534, 717], "_arraywithnormsexperiment": [12, 52], "batch_norm": [12, 35, 313], "varianc": [12, 25, 35, 48, 313, 407, 409, 547, 664, 687, 691], "momentum": [12, 35, 313, 407, 409, 691, 709], "nsc": [12, 35, 313, 407, 408, 409, 691], "braodcast": [12, 35, 313, 407], "present": [12, 29, 35, 275, 304, 313, 407, 408, 409, 708, 715, 717, 723, 725, 726, 731, 735, 743, 755, 756, 765], "avoid": [12, 35, 193, 198, 200, 216, 226, 310, 313, 376, 407, 408, 409, 442, 487, 508, 532, 534, 675, 676, 716, 717, 721, 722, 723, 724, 725, 729, 733, 736, 738, 739, 740, 741, 758], "running_mean": [12, 35, 313, 407, 409, 691], "running_var": [12, 35, 313, 407, 409, 691], "nc": [12, 35, 313, 407, 408, 409, 691], "group_norm": [12, 35, 313], "num_group": [12, 35, 313, 408], "group": [12, 35, 310, 313, 404, 408, 536, 541, 549, 556, 557, 618, 719, 723, 725, 732, 736, 737, 754, 757, 763], "separ": [12, 13, 35, 313, 408, 536, 562, 717, 720, 723, 724, 738, 743, 745, 746, 759, 763], "instance_norm": [12, 35, 313], "l1_normal": [12, 35, 313], "l1": [12, 17, 40, 313, 410, 537, 592, 723, 746], "33333334": [12, 313, 410, 412, 517, 535, 536, 537, 558, 592], "33333337": [12, 91, 313, 410, 517, 529, 535], "28571439": [12, 313, 410], "l2_normal": [12, 35, 313, 412], "44721359": [12, 35, 313, 411, 412], "89442718": [12, 35, 313, 411, 412], "60000002": [12, 48, 53, 313, 411, 412, 659], "80000001": [12, 313, 411, 412], "lp_normal": [12, 35, 313], "lp": [12, 313, 412], "_arraywithrandomexperiment": [12, 52], "bernoulli": [12, 35, 307, 314, 330, 331, 332], "probabl": [12, 16, 18, 21, 35, 39, 41, 44, 307, 314, 319, 330, 331, 332, 413, 427, 430, 434, 536, 538, 543, 559, 562, 563, 594, 636, 675, 687, 688, 706, 710, 738, 752], "event": [12, 35, 314, 413, 738], "entri": [12, 19, 29, 35, 42, 46, 91, 310, 314, 384, 385, 413, 529, 539, 541, 606, 629, 647, 716, 724, 738, 758], "parameter": [12, 21, 35, 44, 314, 413, 414, 416, 417, 543, 636, 638, 639], "prob": [12, 16, 35, 39, 44, 307, 314, 330, 331, 332, 413, 536, 543, 559, 636, 688, 706], "odd": [12, 35, 231, 310, 314, 393, 413, 532, 714, 719], "drawn": [12, 21, 35, 44, 314, 413, 414, 415, 416, 417, 543, 636, 637, 638, 639, 673, 674, 675, 687, 738], "dirichlet": [12, 35, 314], "shuffl": [12, 21, 29, 35, 44, 415, 543], "10598304": [12, 314, 415], "21537054": [12, 314, 415], "67864642": [12, 314, 415], "48006698": [12, 314, 415], "07472073": [12, 314, 415], "44521229": [12, 314, 415], "55479872": [12, 314, 415], "05426367": [12, 314, 415], "39093761": [12, 314, 415], "19531053": [12, 314, 415], "51675832": [12, 314, 415], "28793114": [12, 314, 415], "12315625": [12, 314, 415], "29823365": [12, 314, 415], "5786101": [12, 314, 415], "15564976": [12, 314, 415], "50542368": [12, 314, 415], "33892656": [12, 314, 415], "1325352": [12, 314, 415], "44439589": [12, 314, 415], "42306891": [12, 314, 415], "gamma": [12, 20, 35, 43, 279, 289, 304, 314, 319, 431, 542, 635], "poisson": [12, 35, 309, 314, 371], "rate": [12, 14, 35, 37, 307, 314, 348, 417, 516, 519, 521, 522, 523, 535, 540, 613, 614, 615, 692, 724], "paramt": [12, 417, 541, 623, 633], "lam": [12, 35, 314, 417], "_arraywithsearchingexperiment": [12, 52], "unravel_index": [12, 35, 315], "unravel": [12, 35, 315, 418], "_arraywithsetexperiment": [12, 52], "_arraywithsortingexperiment": [12, 52], "lexsort": [12, 35, 317], "indirectli": [12, 35, 317, 420], "statist": [12, 35, 50, 310, 393, 691, 704, 715, 725, 738, 739, 758], "_arraywithstatisticalexperiment": [12, 52], "bincount": [12, 35, 319], "minlength": [12, 35, 319, 425], "alreadi": [12, 17, 29, 35, 40, 189, 199, 226, 236, 246, 310, 319, 375, 376, 393, 425, 434, 532, 537, 572, 580, 700, 706, 715, 716, 717, 721, 723, 725, 726, 731, 735, 736, 741, 751, 752, 758, 760, 765], "bin": [12, 35, 319, 425, 430, 712, 716, 717, 719, 723], "corrcoef": [12, 35, 319], "rowvar": [12, 35, 319, 426, 427], "relationship": [12, 35, 426, 687], "cov": [12, 35, 319], "bia": [12, 16, 35, 39, 43, 319, 427, 475, 534, 536, 542, 549, 550, 551, 552, 553, 554, 555, 556, 557, 560, 561, 562, 635, 688, 732, 738, 743, 747], "ddof": [12, 35, 319, 427], "fweight": [12, 35, 319, 427], "aweight": [12, 35, 319, 427], "overridden": [12, 35, 319, 427, 692, 720], "unbias": [12, 25, 35, 48, 319, 427, 547, 664], "frequenc": [12, 13, 35, 36, 319, 427, 452, 534, 717], "typic": [12, 35, 273, 286, 304, 319, 427, 546, 653, 688, 719, 732, 757, 765], "covari": [12, 35, 319, 427], "cummax": [12, 35, 319], "exclus": [12, 13, 25, 29, 35, 36, 48, 75, 308, 319, 367, 428, 429, 467, 468, 471, 529, 534, 543, 547, 637, 655, 656, 723, 725, 732, 748, 762, 764], "cumul": [12, 25, 35, 48, 319, 428, 429, 547, 655, 656, 750], "int64": [12, 21, 22, 24, 25, 32, 44, 45, 47, 48, 96, 108, 114, 117, 119, 121, 125, 126, 130, 137, 254, 261, 299, 301, 317, 319, 420, 428, 429, 529, 530, 544, 546, 547, 637, 642, 643, 644, 653, 655, 656, 661, 663, 673, 674, 725, 736, 738, 743], "uint64": [12, 25, 115, 120, 122, 123, 133, 135, 138, 254, 299, 319, 428, 429, 530, 547, 655, 656, 661, 663, 673, 674, 725, 738, 743], "uint16": [12, 25, 110, 115, 120, 121, 130, 254, 299, 319, 428, 429, 530, 547, 655, 656, 661, 663, 673, 674, 725, 736, 738, 743], "bit": [12, 25, 117, 118, 121, 184, 185, 187, 319, 428, 429, 530, 532, 547, 655, 656, 661, 663, 714, 715, 716, 723, 724, 725, 727, 732, 743, 745, 764], "uint32": [12, 25, 115, 120, 121, 122, 144, 254, 299, 319, 428, 429, 530, 547, 655, 656, 661, 663, 673, 674, 725, 738, 743], "resolv": [12, 25, 200, 319, 428, 429, 532, 539, 547, 600, 655, 656, 661, 663, 717, 722, 725, 730, 743], "cummin": [12, 35, 319], "histogram": [12, 35, 319], "extend_lower_interv": [12, 35, 319, 430], "extend_upper_interv": [12, 35, 319, 430], "densiti": [12, 35, 319, 430], "monoton": [12, 35, 319, 430], "rightmost": [12, 35, 319, 430], "extend": [12, 35, 310, 319, 393, 430, 721, 722, 728, 729, 731, 736, 739, 751, 755, 758, 764], "c1": [12, 35, 319, 430, 723], "ff": [12, 35, 319, 430], "c_": [12, 35, 319, 430], "igamma": [12, 35, 319], "incomplet": [12, 35, 319, 431, 717], "3614": [12, 35, 319, 431], "2085": [12, 35, 319, 431], "median": [12, 35, 310, 319, 393, 434], "nanmean": [12, 35, 319], "anyth": [12, 35, 319, 433, 434, 717, 729, 738, 739, 758, 759], "sub": [12, 17, 19, 29, 30, 34, 35, 36, 40, 42, 53, 225, 308, 310, 319, 356, 379, 388, 405, 433, 434, 537, 539, 540, 568, 606, 613, 614, 615, 686, 715, 717, 718, 723, 729, 736, 737, 738, 745, 746, 747, 754], "6666666666666665": [12, 35, 319, 433], "nanmedian": [12, 35, 319], "overwrite_input": [12, 35, 319, 434], "save": [12, 29, 35, 319, 434, 491, 512, 531, 534, 548, 690, 710, 712, 716, 724, 730, 738, 751, 757], "treat": [12, 29, 35, 231, 291, 304, 310, 319, 401, 434, 532, 670, 734, 738, 744, 748], "undefin": [12, 35, 310, 319, 393, 434, 729, 734], "fulli": [12, 35, 319, 434, 688, 706, 710, 720, 725, 731, 734, 741, 743, 744, 745, 746, 747, 748, 751, 756, 757, 758, 764, 765], "quantil": [12, 35, 319], "inclus": [12, 35, 75, 319, 436, 529, 543, 637, 711, 721, 735, 741], "higher": [12, 35, 308, 310, 319, 367, 370, 374, 375, 376, 436, 687, 725, 735, 742, 743, 748, 751, 755, 758, 759, 762, 764, 765], "midpoint": [12, 35, 319, 436], "surround": [12, 35, 319, 436, 741], "whichev": [12, 35, 319, 436], "_arraywithutilityexperiment": [12, 52], "_arraywithgener": [13, 52], "all_equ": [13, 36, 534], "equality_matrix": [13, 36, 437, 534], "array_equ": [13, 36, 534], "assert_supports_inplac": [13, 36, 534], "ivybackendexcept": [13, 36, 441, 465, 534, 701, 720, 726, 729], "clip_matrix_norm": [13, 36, 534], "downscal": [13, 36, 443, 444, 465, 534], "894": [13, 36, 443, 444, 534, 542, 635], "clip_vector_norm": [13, 36, 534], "default_v": [13, 447, 534], "catch_except": [13, 447, 534], "rev": [13, 447, 534], "with_cal": [13, 447, 534], "catch": [13, 447, 534, 733, 738], "might": [13, 132, 447, 530, 534, 715, 716, 717, 724, 725, 727, 730, 733, 736, 738, 739, 741, 743, 745, 746, 753], "einops_rearrang": [13, 36, 534], "axes_length": [13, 36, 448, 449, 450, 534], "arrang": [13, 448, 534], "rearrang": [13, 36, 448, 450, 534], "einop": [13, 36, 448, 449, 450, 534, 709], "einops_reduc": [13, 36, 534], "einops_repeat": [13, 36, 534], "fourier_encod": [13, 36, 534], "max_freq": [13, 36, 452, 534], "num_band": [13, 36, 452, 534], "band": [13, 36, 452, 534], "linearli": [13, 36, 452, 534, 537, 584], "oppos": [13, 36, 452, 534, 725], "geometr": [13, 36, 452, 534, 537, 590], "seper": [13, 452, 534, 727, 737], "0000000e": [13, 36, 452, 534], "2246468e": [13, 36, 452, 534], "4492936e": [13, 452, 534], "6739404e": [13, 36, 452, 534], "batch_dim": [13, 36, 455, 456, 534, 694], "gather_nd": [13, 36, 534], "get_num_dim": [13, 36, 534], "as_arrai": [13, 36, 459, 492, 534, 694], "has_nan": [13, 36, 534], "include_inf": [13, 36, 461, 513, 534], "inplace_decr": [13, 36, 534], "val": [13, 29, 34, 36, 206, 463, 464, 465, 483, 484, 485, 532, 534, 725, 735, 745], "decrement": [13, 36, 463, 534], "inplace_incr": [13, 36, 534], "increment": [13, 36, 464, 534, 717, 758], "inplace_upd": [13, 36, 534, 685, 735], "ensure_in_backend": [13, 36, 465, 534, 735], "keep_input_dtyp": [13, 36, 465, 534, 735], "is_arrai": [13, 36, 534, 735, 736], "rather": [13, 29, 36, 75, 166, 467, 468, 471, 529, 531, 534, 709, 717, 719, 723, 725, 728, 736, 737, 738, 739, 748, 751, 754, 757, 758], "is_ivy_arrai": [13, 36, 534, 735, 745], "is_ivy_contain": [13, 534], "is_native_arrai": [13, 36, 129, 468, 530, 534, 745], "isin": [13, 36, 534], "test_el": [13, 36, 472, 534], "assume_uniqu": [13, 36, 472, 534], "invert": [13, 36, 184, 472, 532, 534, 537, 577], "speed": [13, 36, 472, 534, 708, 738, 761], "scatter_flat": [13, 36, 534], "occupi": [13, 118, 121, 479, 480, 530, 534], "scatter_nd": [13, 36, 534, 741, 745], "empti": [13, 29, 36, 75, 254, 299, 310, 393, 443, 480, 529, 534, 537, 541, 547, 548, 589, 592, 630, 661, 663, 665, 666, 715, 716, 720, 722, 725, 726, 735], "stable_divid": [13, 36, 534, 732], "denomin": [13, 20, 36, 43, 485, 493, 506, 534, 542, 635, 691, 732, 740, 751, 755], "min_denomin": [13, 36, 485, 493, 506, 534, 740], "global": [13, 29, 36, 53, 111, 112, 113, 114, 115, 164, 165, 166, 484, 485, 488, 493, 494, 505, 506, 509, 530, 531, 534, 680, 691, 697, 716, 720, 721, 724, 725, 726, 729, 732, 736, 743, 758], "_min_denomin": [13, 493, 534], "stable_pow": [13, 36, 534], "min_bas": [13, 36, 484, 494, 505, 534, 691, 740], "stabl": [13, 24, 36, 47, 100, 268, 301, 317, 420, 484, 485, 493, 494, 505, 506, 529, 534, 546, 651, 654, 675, 716, 721, 725, 736, 740, 743, 751], "00004": [13, 36, 494, 534], "00008": [13, 36, 494, 534], "00004000e": [13, 494], "56002560e": [13, 494], "60001200e": [13, 494], "09602048e": [13, 494], "supports_inplace_upd": [13, 36, 534], "to_fil": 13, "fid": 13, "sep": 13, "format_": 13, "binari": [13, 16, 18, 39, 41, 183, 186, 188, 223, 243, 309, 371, 532, 536, 538, 559, 594], "filenam": [13, 690, 696, 746], "txt": [13, 716, 719, 722], "recov": [13, 729, 736], "appropri": [13, 22, 27, 45, 50, 176, 193, 200, 226, 273, 286, 304, 532, 544, 642, 715, 716, 717, 729, 733, 738], "to_list": [13, 36, 534], "to_numpi": [13, 36, 534, 706, 737, 746], "address": [13, 500, 534, 710, 715, 717, 719, 720, 743, 754, 756, 758, 764], "to_scalar": [13, 36, 534], "value_is_nan": [13, 36, 534], "92": [13, 44, 513, 523, 535, 537, 566, 638, 639], "_arraywithgradi": [14, 52], "adam_step": [14, 37, 535], "mw": [14, 37, 515, 516, 535, 747], "vw": [14, 37, 515, 516, 535, 747], "beta1": [14, 37, 439, 515, 516, 521, 534, 535, 692, 747], "beta2": [14, 37, 439, 515, 516, 521, 534, 535, 692, 747], "999": [14, 34, 37, 244, 515, 516, 521, 523, 532, 535, 692, 747], "epsilon": [14, 17, 18, 37, 40, 41, 439, 515, 516, 521, 534, 535, 537, 538, 578, 581, 594, 595, 596, 689, 691, 692, 723, 732, 735, 747], "07": [14, 18, 34, 37, 41, 44, 181, 214, 218, 237, 307, 338, 505, 515, 516, 518, 519, 520, 521, 532, 534, 535, 538, 595, 596, 638, 689, 692, 747], "cost": [14, 37, 515, 516, 519, 521, 522, 523, 535, 540, 613, 614, 615, 741, 756], "dc": [14, 37, 515, 516, 519, 521, 522, 523, 535], "dw": [14, 37, 515, 516, 519, 521, 522, 523, 535], "forget": [14, 37, 515, 516, 521, 535, 692, 706, 725], "adam": [14, 37, 439, 515, 516, 521, 534, 535, 692, 706, 746, 747, 748, 758], "prevent": [14, 37, 515, 516, 521, 535, 536, 547, 559, 663, 687, 692, 715, 717, 724, 725, 729, 735, 736, 739], "delta": [14, 37, 515, 535], "dcdw": [14, 37, 515, 516, 519, 521, 522, 535], "adam_step_delta": [14, 37, 515, 535], "2020105": [14, 515, 535], "22187898": [14, 515, 535], "24144873": [14, 515, 535], "10000002": [14, 48, 248, 299, 515, 659], "20000005": [14, 248, 299, 515], "00300002": [14, 515], "00800002": [14, 515], "adam_upd": [14, 37, 535, 747], "lr": [14, 37, 439, 516, 519, 521, 522, 523, 534, 535, 692, 746, 747], "mw_tm1": [14, 37, 516, 521, 535], "vw_tm1": [14, 37, 516, 521, 535], "stop_gradi": [14, 37, 166, 439, 516, 519, 521, 522, 523, 531, 534, 535, 540, 613, 614, 615, 692, 747], "learn": [14, 37, 308, 368, 448, 516, 519, 521, 522, 523, 534, 535, 540, 613, 614, 615, 692, 706, 708, 709, 711, 714, 715, 716, 718, 719, 730, 732, 734, 742, 750, 753, 756, 760, 761, 762, 763, 764, 765], "previou": [14, 37, 140, 141, 142, 143, 144, 298, 306, 503, 505, 506, 507, 509, 510, 512, 516, 521, 530, 534, 535, 687, 703, 717, 719, 721, 724, 726, 731, 736, 738, 741, 748, 751, 761], "ws_new": [14, 37, 516, 521, 522, 523, 535], "updated_weight": [14, 37, 516, 535], "92558753": [14, 516], "92558873": [14, 516, 535], "92558718": [14, 516, 535], "00000063e": [14, 37, 516, 535], "00000016e": [14, 37, 516, 535], "00000086e": [14, 37, 516, 535], "gradient_descent_upd": [14, 37, 535, 540, 613, 614, 615], "descent": [14, 37, 519, 535, 692, 747, 758], "new_weight": [14, 37, 519, 521, 535, 746], "95": [14, 17, 21, 28, 37, 39, 44, 59, 349, 515, 519, 523, 526, 535, 537, 543, 572, 638, 639], "97": [14, 34, 37, 44, 179, 519, 532, 535, 638], "96": [14, 34, 35, 36, 44, 190, 211, 243, 307, 328, 448, 449, 519, 532, 534, 535, 537, 547, 580, 639, 657], "lamb_upd": [14, 37, 535], "max_trust_ratio": [14, 37, 521, 535, 692], "decay_lambda": [14, 37, 521, 522, 535, 692], "trust": [14, 37, 521, 535, 692], "ratio": [14, 37, 521, 535, 692], "decai": [14, 37, 521, 522, 535, 692], "lamb": [14, 37, 521, 535, 692, 747], "784": [14, 521, 535], "78": [14, 188, 237, 521, 532, 535, 537, 543, 547, 580, 638, 657], "lars_upd": [14, 37, 535], "lar": [14, 37, 522, 535, 692, 747], "optimizer_upd": [14, 37, 535], "effective_grad": [14, 37, 523, 535], "3e": [14, 37, 523, 535], "preserve_typ": [14, 37, 524, 535], "_arraywithimag": [15, 52], "_arraywithlay": [16, 52], "conv1d": [16, 39, 536, 688], "filter_format": [16, 39, 536, 549, 550, 552, 553, 554, 556], "channel_last": [16, 39, 536, 549, 550, 552, 553, 554, 556, 557, 673], "x_dilat": [16, 39, 536, 549, 550, 552, 553, 554, 556], "fw": [16, 39, 319, 427, 536, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 670, 716, 738], "d_out": [16, 39, 536, 549, 550, 551, 552, 553, 554, 555, 556, 557], "channel_first": [16, 39, 536, 549, 550, 552, 553, 554, 556, 557], "wio": [16, 536, 549, 550, 551, 556], "conv1d_transpos": [16, 39, 536], "output_shap": [16, 39, 536, 549, 551, 553, 555, 557, 688], "conv2d": [16, 39, 536, 553, 688, 706], "fh": [16, 39, 536, 541, 549, 552, 553, 554, 555, 556, 557, 558, 628], "hwio": [16, 536, 549, 550, 552, 556], "conv2d_transpos": [16, 39, 536], "random_norm": [16, 17, 21, 39, 40, 44, 448, 534, 536, 537, 543, 551, 553, 554, 555, 558, 561, 585, 706], "std": [16, 21, 25, 39, 44, 48, 314, 414, 536, 543, 547, 551, 553, 554, 555, 558, 637, 638, 706, 727], "conv3d": [16, 39, 536, 555, 688], "fd": [16, 39, 536, 549, 554, 555, 556, 557], "conv3d_transpos": [16, 39, 536], "depthwise_conv2d": [16, 39, 536], "dropout": [16, 39, 307, 330, 331, 332, 536, 562, 563, 688, 746], "noise_shap": [16, 39, 536, 559], "droput": [16, 559], "reproduc": [16, 39, 536, 559, 673, 674, 675, 676, 680, 719], "42857146": [16, 536, 559], "85714293": [16, 536, 559], "28571415": [16, 39, 536, 559], "71428585": [16, 39, 536, 559], "14285755": [16, 39, 536, 559], "5714283": [16, 536, 559], "4285717": [16, 39, 536, 559], "8571434": [16, 39, 536, 559], "2857151": [16, 536, 559], "dropout1d": [16, 39, 307], "droput1d": [16, 330, 331], "dropout2d": [16, 39, 307], "dropout3d": [16, 39, 307], "droput3d": [16, 332], "outer_batch_shap": [16, 39, 536, 560], "inner_batch_shap": [16, 39, 536, 560], "in_featur": [16, 39, 536, 560, 738], "out_featur": [16, 39, 536, 560, 738], "84": [16, 25, 34, 44, 121, 151, 216, 530, 531, 537, 542, 547, 560, 580, 635, 638, 639, 657], "133": [16, 444, 534, 560], "134": [16, 537, 560, 577], "lstm_updat": [16, 39, 536, 743], "init_h": [16, 39, 536, 561, 743], "init_c": [16, 39, 536, 561, 743], "recurrent_kernel": [16, 39, 536, 561, 743], "recurrent_bia": [16, 39, 536, 561, 743], "cell": [16, 39, 536, 561, 688, 724, 743], "batch_shap": [16, 21, 31, 39, 44, 86, 95, 529, 536, 537, 543, 561, 562, 563, 593, 636, 688, 741, 743, 745], "hidden": [16, 39, 536, 561, 688, 722, 729, 743, 747], "recurr": [16, 39, 536, 561, 743, 758, 762], "timestep": [16, 39, 536, 561, 562, 688, 743], "h_i": [16, 39, 561], "c_i": [16, 39, 561], "rc": [16, 39, 561], "multi_head_attent": [16, 39, 536, 735], "num_head": [16, 39, 536, 562, 688], "attention_mask": [16, 39, 536, 562], "in_proj_weight": [16, 39, 536, 562], "q_proj_weight": [16, 39, 536, 562], "k_proj_weight": [16, 39, 536, 562], "v_proj_weight": [16, 39, 536, 562], "out_proj_weight": [16, 39, 536, 562], "in_proj_bia": [16, 39, 536, 562], "out_proj_bia": [16, 39, 536, 562], "is_caus": [16, 39, 536, 562, 563], "return_attention_weight": [16, 39, 536, 562], "average_attention_weight": [16, 39, 536, 562], "key_chain": [16, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 59, 60, 61, 62, 63, 64, 65, 66, 67, 77, 83, 85, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 105, 106, 107, 108, 116, 118, 121, 124, 125, 126, 128, 130, 133, 167, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 255, 256, 258, 259, 262, 263, 268, 269, 272, 273, 274, 275, 277, 279, 285, 286, 292, 294, 295, 296, 297, 321, 322, 323, 325, 326, 327, 329, 330, 331, 332, 333, 334, 342, 343, 344, 345, 349, 351, 352, 353, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 374, 375, 376, 378, 380, 389, 391, 393, 394, 395, 397, 399, 400, 401, 402, 404, 406, 407, 408, 409, 410, 411, 412, 414, 419, 420, 427, 428, 429, 430, 436, 437, 440, 441, 443, 444, 448, 449, 450, 452, 455, 456, 459, 461, 463, 464, 465, 467, 468, 471, 479, 480, 493, 494, 496, 498, 500, 501, 513, 519, 524, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 636, 637, 638, 639, 641, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666], "to_appli": [16, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 59, 60, 61, 62, 63, 64, 65, 66, 67, 77, 83, 85, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 105, 106, 107, 108, 116, 118, 121, 124, 125, 126, 128, 130, 133, 167, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 255, 256, 258, 259, 262, 263, 268, 269, 272, 273, 274, 275, 277, 279, 285, 286, 292, 294, 295, 296, 297, 321, 322, 323, 325, 326, 327, 329, 330, 331, 332, 333, 334, 342, 343, 344, 345, 349, 351, 352, 353, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 374, 375, 376, 378, 380, 389, 391, 393, 394, 395, 397, 399, 400, 401, 402, 404, 406, 407, 408, 409, 410, 411, 412, 414, 419, 420, 427, 428, 429, 430, 436, 437, 440, 441, 443, 444, 448, 449, 450, 452, 455, 456, 459, 461, 463, 464, 465, 467, 468, 471, 479, 480, 493, 494, 496, 498, 500, 501, 513, 519, 524, 541, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 629, 636, 637, 638, 639, 641, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666], "prune_unappli": [16, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 59, 60, 61, 62, 63, 64, 65, 66, 67, 77, 83, 85, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 105, 106, 107, 108, 116, 118, 121, 124, 125, 126, 128, 130, 133, 167, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 255, 256, 258, 259, 262, 263, 268, 269, 272, 273, 274, 275, 277, 279, 285, 286, 292, 294, 295, 296, 297, 321, 322, 323, 325, 326, 327, 329, 330, 331, 332, 333, 334, 342, 343, 344, 345, 349, 352, 353, 355, 356, 357, 358, 360, 362, 364, 365, 366, 367, 368, 369, 370, 374, 375, 376, 378, 380, 389, 391, 393, 394, 395, 397, 399, 400, 401, 402, 404, 406, 407, 408, 409, 410, 411, 412, 414, 419, 420, 427, 428, 429, 430, 436, 437, 440, 441, 443, 444, 448, 449, 450, 452, 455, 456, 459, 461, 463, 464, 465, 467, 468, 471, 479, 480, 493, 494, 496, 498, 500, 501, 513, 519, 524, 541, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 629, 636, 637, 638, 639, 641, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666], "map_sequ": [16, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 59, 60, 61, 62, 63, 64, 65, 66, 67, 77, 83, 85, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 105, 106, 107, 108, 116, 118, 121, 124, 125, 126, 128, 130, 133, 167, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 255, 256, 258, 259, 262, 263, 268, 269, 272, 273, 274, 275, 277, 279, 285, 286, 292, 294, 295, 296, 297, 321, 322, 323, 325, 326, 327, 329, 330, 331, 332, 333, 334, 342, 343, 344, 345, 349, 352, 353, 355, 356, 357, 358, 360, 362, 364, 365, 366, 367, 368, 369, 370, 374, 375, 376, 378, 380, 389, 391, 393, 394, 395, 397, 399, 400, 401, 402, 404, 406, 407, 408, 409, 410, 411, 412, 414, 419, 420, 427, 428, 429, 430, 436, 437, 440, 441, 443, 444, 448, 449, 450, 452, 455, 456, 459, 461, 463, 464, 465, 467, 468, 471, 479, 480, 493, 494, 496, 498, 500, 501, 513, 519, 524, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 636, 637, 638, 639, 641, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666], "scaled_dot_product_attent": [16, 39, 536], "dropout_p": [16, 39, 536, 563], "queri": [16, 29, 39, 151, 165, 458, 483, 531, 534, 536, 562, 563, 688, 723, 725, 745, 758], "num_queri": [16, 39, 536, 562, 563], "feat_dim": [16, 39, 536, 563], "num_kei": [16, 39, 536, 562, 563], "causal": [16, 39, 536, 562, 563], "attent": [16, 39, 536, 562, 563, 688, 709, 717, 720], "score": [16, 39, 536, 563, 706], "40000001": [16, 28, 52, 53, 61, 64, 248, 299, 526, 536, 545, 563, 648], "29999995": [16, 248, 299, 536, 545, 563, 648], "19994521": [16, 536, 563], "09994531": [16, 536, 563], "30000019": [16, 536, 563], "_arraywithlinearalgebra": [17, 52], "choleski": [17, 40, 537, 735], "l": [17, 34, 40, 220, 308, 355, 537, 564, 569, 570, 571, 575, 589, 717, 718], "625": [17, 35, 283, 537, 564], "cross": [17, 18, 40, 41, 537, 538, 594, 595, 596, 706, 724, 725], "vif": [17, 40, 565], "det": [17, 40, 537, 583, 724], "axis1": [17, 19, 40, 42, 537, 539, 568, 589, 609], "axis2": [17, 40, 537, 568, 589], "eigh": [17, 40, 308, 355, 537, 569], "uplo": [17, 40, 537, 570, 571], "eigvalsh": [17, 40, 537], "inner": [17, 31, 40, 55, 95, 308, 355, 529, 537, 540, 569, 570, 575, 613, 614, 615, 715, 735], "array_lik": [17, 40, 307, 310, 350, 398, 537, 572, 580], "ident": [17, 29, 86, 154, 458, 483, 529, 531, 534, 537, 541, 572, 577, 629, 688, 708, 710, 723, 732, 733, 736, 737, 739, 741, 745, 746, 751, 753], "53": [17, 21, 34, 39, 112, 168, 198, 349, 518, 520, 530, 531, 535, 537, 542, 572, 635, 639], "83": [17, 39, 44, 240, 307, 319, 328, 338, 349, 428, 532, 536, 537, 560, 572, 638], "3d": [17, 35, 307, 330, 331, 376, 537, 572, 688, 741, 750], "29": [17, 34, 36, 37, 39, 44, 181, 319, 349, 428, 448, 449, 517, 521, 532, 534, 535, 537, 572, 637, 638, 639], "109": [17, 537, 572], "105": [17, 39, 536, 537, 538, 559, 560, 572, 580, 594], "149": [17, 537, 572], "171": [17, 537, 572, 673], "143": [17, 34, 53, 243, 532, 537, 572, 727], "173": [17, 537, 572], "203": [17, 34, 182, 537, 542, 572, 635], "233": [17, 537, 572], "inv": [17, 40, 537], "matmul": [17, 40, 514, 534, 537, 585, 721, 738, 739, 743], "transpose_a": [17, 40, 537, 575], "transpose_b": [17, 40, 537, 575], "adjoint_a": [17, 40, 537, 575], "adjoint_b": [17, 40, 537, 575], "detail": [17, 19, 23, 35, 40, 42, 46, 59, 61, 64, 87, 308, 352, 378, 526, 529, 545, 568, 575, 581, 585, 608, 647, 648, 649, 650, 706, 715, 717, 719, 721, 722, 723, 724, 730, 731, 732, 733, 736, 737, 738, 739, 740, 743, 745, 746, 747, 760, 764], "matrix_norm": [17, 40, 537], "ord": [17, 40, 537, 576, 592], "fro": [17, 40, 537, 576], "nuc": [17, 40, 537, 576], "matrix_pow": [17, 40, 537], "matrix_rank": [17, 40, 537], "hermitian": [17, 40, 308, 355, 356, 537, 569, 570, 571, 578, 585], "largest_singular_valu": [17, 40, 537, 578, 581], "defici": [17, 537, 578], "matrix_transpos": [17, 40, 537, 745], "pinv": [17, 40, 537], "pseudo": [17, 40, 537, 581, 734], "99999988": [17, 40, 537, 581], "qr": [17, 40, 537, 737], "orthonorm": [17, 40, 537, 582, 585], "lead": [17, 29, 40, 53, 200, 308, 362, 532, 537, 582, 585, 675, 709, 710, 724, 725, 727, 739, 751], "complet": [17, 29, 40, 537, 582, 674, 709, 715, 716, 717, 719, 720, 723, 724, 727, 729, 732, 736, 737, 738, 741, 745, 746, 756], "field": [17, 23, 40, 46, 308, 310, 355, 404, 537, 545, 569, 570, 582, 583, 585, 647, 648, 649, 706, 724, 750, 756, 764], "those": [17, 19, 29, 35, 40, 42, 75, 132, 193, 226, 401, 514, 529, 530, 532, 534, 537, 539, 541, 544, 582, 585, 597, 618, 645, 708, 715, 716, 717, 720, 723, 724, 725, 733, 735, 736, 737, 738, 741, 755], "slogdet": [17, 40, 537], "logabsdet": [17, 40, 537, 583], "natur": [17, 40, 196, 214, 215, 216, 217, 236, 289, 304, 532, 537, 583, 709, 720, 727, 729, 737, 750], "098611": [17, 537, 583], "solv": [17, 40, 308, 362, 537, 706, 716, 719, 736, 744, 750, 760], "full_matric": [17, 40, 537, 585], "svf": [17, 585], "close": [17, 198, 216, 236, 257, 301, 532, 537, 539, 585, 600, 715, 716, 717, 725, 728, 736, 741, 758], "reconstructed_x": [17, 537, 585], "svdval": [17, 40, 537], "tensordot": [17, 40, 537, 725], "tensorsolv": [17, 40, 537], "vander": [17, 40, 537], "vandermond": [17, 40, 537, 590], "vecdot": [17, 40, 537], "vector_norm": [17, 40, 537], "singleton": [17, 22, 25, 26, 40, 45, 48, 49, 537, 539, 544, 547, 548, 592, 600, 607, 643, 658, 659, 660, 661, 662, 663, 664, 665, 666, 743], "mathemat": [17, 40, 176, 181, 193, 198, 200, 216, 226, 527, 532, 537, 576, 592, 725, 736, 741, 758, 764], "manhattan": [17, 40, 537, 592], "7416575": [17, 40, 537, 592], "vector_to_skew_symmetric_matrix": [17, 40, 537], "_arraywithloss": [18, 52], "binary_cross_entropi": [18, 41, 538, 724], "pred": [18, 41, 309, 371, 538, 594, 595, 596, 706, 723, 732, 735], "from_logit": [18, 41, 538, 594, 689], "pos_weight": [18, 41, 538, 594], "predict": [18, 41, 309, 371, 538, 594, 595, 596, 706], "amount": [18, 41, 168, 531, 538, 594, 595, 596, 716, 724, 726, 737], "smooth": [18, 41, 538, 594, 595, 596, 734], "No": [18, 41, 309, 371, 538, 594, 717, 724, 725, 758], "crossentropi": [18, 41, 538, 594], "entropi": [18, 41, 538, 594, 595, 596, 706], "357": [18, 41, 538, 594, 596], "223": [18, 41, 538, 594, 596], "cross_entropi": [18, 41, 538, 596, 706, 723, 732, 735], "3862944": [18, 538, 595], "sparse_cross_entropi": [18, 41, 538], "_arraywithmanipul": [19, 52], "x_min": [19, 42, 539, 597, 748], "x_max": [19, 42, 539, 597, 748], "constant_pad": [19, 42, 539], "before_1": [19, 42, 310, 393, 539, 599, 612], "after_1": [19, 42, 310, 393, 539, 599, 612], "before_n": [19, 42, 310, 393, 539, 599, 612], "after_n": [19, 42, 310, 393, 539, 599, 612], "permute_dim": [19, 42, 539], "repetit": [19, 42, 539, 603, 610, 741], "fit": [19, 42, 539, 603, 715, 736, 743, 754, 755, 758], "flat": [19, 29, 42, 315, 418, 479, 534, 539, 603, 686], "allowzero": [19, 42, 539, 604], "remain": [19, 22, 35, 42, 45, 176, 193, 194, 200, 208, 209, 226, 229, 235, 237, 307, 330, 331, 332, 350, 532, 539, 541, 544, 604, 622, 645, 716, 717, 724, 727, 729, 732, 739, 741, 751], "roll": [19, 42, 539, 731], "shift": [19, 31, 42, 53, 90, 100, 185, 187, 268, 301, 529, 532, 539, 605, 716, 717, 726, 727, 731], "restor": [19, 42, 539, 605, 730], "num_or_size_split": [19, 29, 42, 539, 606, 743], "with_remaind": [19, 29, 42, 539, 606], "mani": [19, 29, 42, 100, 268, 301, 529, 539, 606, 686, 706, 708, 709, 710, 715, 716, 717, 720, 721, 723, 724, 725, 726, 727, 728, 731, 732, 733, 735, 736, 737, 738, 741, 743, 745, 746, 751, 754, 758, 761, 764, 765], "squeez": [19, 42, 539, 758], "squeezabl": [19, 539, 607], "document": [19, 200, 514, 532, 534, 608, 711, 713, 714, 717, 722, 724, 725, 727, 735, 736, 737, 738, 746, 748], "swapax": [19, 42, 539], "axis0": [19, 42, 539, 609], "swap_ax": [19, 609], "tile": [19, 36, 42, 450, 539], "unpack": [19, 42, 539, 611, 737, 738], "zero_pad": [19, 42, 539], "_arraywithnorm": [20, 52], "layer_norm": [20, 43, 542], "normalized_idx": [20, 43, 542, 635], "new_std": [20, 43, 542, 635, 691], "learnabl": [20, 43, 540, 542, 615, 635, 688, 691, 748], "deviat": [20, 21, 25, 43, 44, 48, 542, 543, 547, 635, 638, 662, 675, 687, 691, 710, 719], "0976": [20, 542, 635], "3452": [20, 542, 635], "2740": [20, 542, 635], "1047": [20, 542, 635], "5886": [20, 542, 635], "2732": [20, 542, 635], "7696": [20, 542, 635, 673], "7024": [20, 542, 635], "2518": [20, 542, 635], "826": [20, 542, 635], "178": [20, 542, 635], "981": [20, 542, 635], "831": [20, 542, 635], "421": [20, 542, 635], "_arraywithrandom": [21, 52], "multinomi": [21, 44, 314, 415, 543], "population_s": [21, 44, 543, 636], "num_sampl": [21, 44, 543, 636], "unnorm": [21, 44, 543, 636, 738], "popul": [21, 25, 29, 44, 48, 543, 547, 636, 662, 664, 725, 726, 735, 738, 743, 764], "draw": [21, 44, 314, 413, 415, 417, 543, 636, 638, 639, 673, 674, 675, 676, 680, 687, 715, 719, 737, 738], "ve": [21, 44, 543, 636, 715, 716, 717, 738, 741, 742, 745, 753], "highest": [21, 44, 543, 637, 725], "half": [21, 44, 75, 240, 529, 532, 543, 637, 639, 741], "235": [21, 638], "float16": [21, 32, 44, 88, 110, 112, 113, 118, 120, 254, 281, 299, 304, 529, 530, 537, 592, 638, 639, 673, 674, 725, 736, 738], "807": [21, 638], "random_uniform": [21, 44, 543, 726, 729, 738, 743, 747], "86": [21, 35, 44, 307, 319, 338, 428, 515, 535, 638, 639], "_arraywithsearch": [22, 52], "select_last_index": [22, 45, 544, 642, 643], "occurr": [22, 310, 319, 404, 425, 544, 545, 642, 643, 647], "argmin": [22, 45, 544], "output_dtyp": [22, 45, 544, 643], "across": [22, 29, 36, 45, 52, 164, 165, 193, 200, 226, 244, 313, 409, 440, 461, 495, 531, 532, 534, 536, 541, 544, 559, 562, 622, 642, 643, 688, 715, 719, 725, 727, 729, 731, 732, 734, 738, 741, 756, 758, 763], "argwher": [22, 45, 544], "nonzero": [22, 45, 174, 175, 176, 179, 182, 191, 193, 196, 198, 200, 226, 239, 244, 532, 544], "as_tupl": [22, 45, 544, 645], "fewer": [22, 45, 544, 645], "yield": [22, 264, 265, 301, 310, 393, 544, 646, 706, 724], "_arraywithset": [23, 52], "unique_al": [23, 46, 545], "by_valu": [23, 46, 545, 647], "inverse_indic": [23, 46, 310, 404, 545, 647, 649], "unique_count": [23, 46, 545], "unique_invers": [23, 46, 545], "unique_valu": [23, 46, 545], "admonit": [23, 650], "henc": [23, 176, 275, 304, 532, 539, 545, 600, 647, 648, 649, 650, 697, 716, 723, 724, 725, 735, 738], "dask": [23, 545, 647, 648, 649, 650, 709], "difficult": [23, 545, 647, 648, 649, 650, 717, 719, 725, 738, 751], "know": [23, 545, 647, 648, 649, 650, 710, 713, 715, 717, 733, 737, 738, 741, 759], "omit": [23, 236, 532, 545, 647, 648, 649, 650, 731, 735, 736], "x_i": [23, 25, 34, 173, 174, 175, 178, 179, 180, 182, 184, 189, 190, 191, 196, 198, 199, 206, 207, 208, 209, 210, 214, 215, 216, 217, 221, 228, 233, 236, 237, 238, 239, 240, 241, 243, 244, 246, 275, 294, 304, 532, 545, 547, 647, 648, 649, 650, 658, 659, 660, 662, 663, 664, 687, 728], "x_j": [23, 545, 647, 648, 649, 650], "impli": [23, 545, 647, 648, 649, 650, 738], "behavior": [23, 193, 200, 226, 231, 235, 532, 545, 647, 648, 649, 650, 715, 722, 723, 724, 725, 735, 736, 737, 738, 741, 743, 751, 755], "could": [23, 545, 647, 648, 649, 650, 709, 710, 715, 716, 717, 719, 724, 725, 727, 733, 735, 736, 737, 738, 743, 745, 746, 747, 758, 763, 764], "typeerror": [23, 46, 545, 650, 745], "_arraywithsort": [24, 52], "argsort": [24, 47, 546, 653, 736], "descend": [24, 47, 537, 546, 585, 586, 651, 654], "stabil": [24, 47, 493, 494, 534, 546, 651, 654, 725, 734, 739, 741], "maintain": [24, 47, 546, 651, 654, 708, 717, 719, 730, 735, 737, 738, 757], "msort": [24, 47, 546], "searchsort": [24, 47, 546, 674], "side": [24, 47, 285, 304, 546, 653, 688, 700, 716, 717, 722], "sorter": [24, 47, 546, 653], "ret_dtyp": [24, 47, 546, 653], "_arraywithstatist": [25, 52], "cumprod": [25, 48, 547, 736, 748], "120": [25, 48, 53, 537, 580, 655, 706], "cumsum": [25, 48, 547, 725], "einsum": [25, 48, 547], "equat": [25, 35, 48, 259, 301, 537, 547, 584, 657, 700, 724, 758], "operand": [25, 35, 39, 173, 174, 175, 176, 178, 179, 180, 181, 182, 188, 189, 190, 191, 193, 194, 196, 198, 199, 200, 207, 208, 209, 214, 215, 216, 217, 218, 226, 229, 231, 235, 236, 237, 238, 239, 240, 243, 244, 246, 294, 297, 304, 305, 307, 349, 532, 537, 547, 583, 589, 657, 658, 660, 661, 663, 700, 720, 723, 728, 736], "describ": [25, 35, 176, 193, 194, 226, 229, 231, 314, 317, 417, 420, 532, 536, 547, 562, 657, 661, 663, 713, 715, 716, 717, 722, 724, 735, 736, 738, 743, 748, 758], "contract": [25, 537, 547, 587, 657], "seq": [25, 547, 657, 673], "consist": [25, 29, 193, 200, 226, 308, 355, 532, 537, 547, 569, 570, 657, 689, 690, 708, 719, 720, 724, 725, 730, 735, 743, 759], "ii": [25, 48, 547, 657, 717], "jk": [25, 547, 657], "ik": [25, 547, 657], "66": [25, 35, 36, 37, 188, 307, 338, 448, 449, 519, 532, 534, 535, 537, 547, 580, 657], "104": [25, 537, 547, 580, 657], "126": [25, 59, 232, 526, 532, 537, 547, 577, 657], "510": [25, 547, 657], "arithmet": [25, 48, 187, 193, 226, 532, 547, 659, 736], "propag": [25, 187, 532, 547, 658, 659, 660, 662, 663, 664, 734], "04999995": [25, 659], "freedom": [25, 48, 547, 662, 664, 721], "adjust": [25, 48, 308, 368, 547, 662, 664, 697], "constitut": [25, 48, 547, 662, 664, 732, 743, 759], "commonli": [25, 48, 547, 662, 664, 729, 732, 734], "81649661": [25, 547, 662], "var": [25, 48, 50, 71, 72, 73, 74, 528, 540, 547, 613, 614, 694, 716, 727, 743], "6666665": [25, 664, 746], "667": [25, 36, 193, 444, 493, 532, 534, 664], "_arraywithutil": [26, 52], "AND": [26, 49, 183, 194, 220, 532, 548, 665], "invalid": [26, 49, 537, 539, 548, 591, 600, 665, 666, 673, 716, 725], "OR": [26, 49, 186, 222, 229, 532, 548, 666, 716, 717, 734], "_wrap_funct": [27, 50, 722, 732, 733], "function_nam": [27, 50, 715, 739], "new_funct": [27, 50, 722], "add_ivy_array_instance_method": 27, "cl": [27, 50], "shown": [27, 29, 50, 210, 233, 275, 304, 532, 715, 716, 717, 719, 722, 724, 725, 727, 729, 730, 731, 736, 737, 738, 739, 740, 743, 745, 751], "toi": [27, 50], "arrayexampl": 27, "hasattr": [27, 50], "_containerwithactiv": [28, 53], "dict_in": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53], "queue": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 488, 509, 534, 740, 746], "queue_load_s": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53], "container_combine_method": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53], "list_join": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53], "queue_timeout": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 488, 509, 534, 740], "print_limit": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53], "key_length_limit": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53], "print_ind": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53], "print_line_spac": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53], "ivyh": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53], "default_key_color": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53], "green": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 705, 715, 716, 717], "keyword_color_dict": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53], "rebuild_child_contain": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53], "types_to_iteratively_nest": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53], "alphabetical_kei": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53], "dynamic_backend": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 690, 721, 740], "containerbas": [28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 723], "_static_gelu": 28, "exact": [28, 29, 59, 307, 309, 342, 347, 371, 545, 647, 649, 675, 716, 717, 719, 727, 743], "formul": [28, 59], "prune": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 59, 60, 61, 62, 63, 64, 65, 66, 67, 88, 90, 95, 97, 102, 106, 108, 121, 125, 126, 133, 167, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 258, 273, 274, 275, 277, 279, 285, 286, 292, 294, 295, 296, 297, 330, 331, 332, 374, 375, 376, 378, 399, 401, 402, 407, 409, 410, 411, 412, 414, 427, 428, 429, 430, 437, 440, 441, 443, 444, 448, 449, 450, 452, 455, 456, 459, 461, 463, 464, 465, 467, 468, 471, 479, 480, 493, 494, 496, 498, 500, 501, 513, 519, 524, 541, 550, 551, 552, 553, 559, 560, 563, 564, 565, 570, 571, 572, 573, 575, 576, 578, 580, 582, 583, 589, 594, 595, 596, 597, 601, 604, 605, 606, 607, 608, 611, 612, 629, 630, 631, 632, 636, 637, 638, 639, 641, 644, 647, 648, 649, 650, 651, 655, 656, 659, 661, 662, 664, 665, 666, 671, 674, 724], "static_gelu": 28, "185": 28, "046": 28, "_static_hardswish": 28, "_static_leaky_relu": 28, "static_leaky_relu": 28, "38999999": [28, 35, 61, 248, 299], "_static_log_softmax": 28, "static_log_softmax": 28, "371": [28, 62], "_static_mish": 28, "static_mish": 28, "30883577": [28, 63, 526], "28903052": [28, 63, 526], "10714479": [28, 63, 526], "_static_relu": 28, "static_relu": 28, "_static_sigmoid": 28, "static_sigmoid": 28, "2689414": [28, 65, 66, 526], "7310586": [28, 65, 66, 526], "88079703": [28, 65, 526], "62245935": [28, 65], "4750208": [28, 65], "_static_softmax": 28, "static_softmax": 28, "72844321": [28, 66], "19852395": [28, 66], "07303288": [28, 66], "_static_softplu": 28, "revert": [28, 67, 526], "static_softplu": 28, "53499615": 28, "42036411": 28, "948": [28, 67], "166": [28, 59, 526], "159": [28, 59, 526, 536, 560], "__getitem__": [29, 723], "slice": [29, 36, 100, 268, 301, 310, 398, 401, 455, 456, 458, 483, 529, 534, 541, 625, 758], "dictionari": [29, 46, 53, 165, 517, 531, 535, 650, 670, 720, 724, 725, 732, 736, 746, 751], "multiprocess": [29, 53, 534, 746, 751], "asynchron": [29, 53, 758], "wait": [29, 53, 488, 534, 706, 715, 717, 724, 736], "arriv": [29, 53, 488, 534, 741], "cont_list_join": [29, 53], "timeout": [29, 53, 488, 509, 534, 740], "limit": [29, 53, 118, 121, 443, 444, 530, 534, 539, 597, 673, 675, 676, 687, 694, 706, 716, 717, 722, 724, 727, 729, 736, 738, 741, 746, 751, 757, 758, 759], "whitespac": [29, 53], "indent": [29, 53, 746], "newlin": [29, 53, 728], "color": [29, 53, 705], "termin": [29, 53, 716, 717, 723, 730, 743, 746], "termcolor": [29, 53], "rebuild": [29, 53, 712], "constructor": [29, 53, 439, 534, 670, 685, 693, 725, 726, 745], "kept": [29, 53, 540, 613, 614, 717, 735, 739], "structur": [29, 32, 53, 118, 121, 445, 534, 541, 629, 686, 706, 715, 717, 720, 723, 732, 737, 738, 739, 746, 747, 757, 758], "alphabet": [29, 53], "__setitem__": [29, 720, 723, 745], "_cont_at_key_chains_input_as_dict": 29, "current_chain": 29, "ignore_key_error": 29, "_cont_at_key_chains_input_as_seq": 29, "_cont_call_static_method_with_flexible_arg": 29, "static_method": 29, "kw": 29, "self_idx": 29, "_cont_concat_unifi": 29, "_cont_get_dev": 29, "_cont_get_shap": 29, "_cont_ivi": 29, "_cont_mean_unifi": 29, "_1": 29, "_cont_prune_key_chains_input_as_dict": 29, "return_cont": 29, "_cont_prune_key_chains_input_as_seq": 29, "_cont_slice_kei": 29, "key_slic": 29, "_cont_sum_unifi": 29, "_get_queue_item": 29, "cont_all_fals": 29, "assert_is_bool": 29, "assert": [29, 441, 534, 680, 718, 719, 732, 735, 736, 737, 738, 739, 745, 746], "cont_all_key_chain": 29, "include_empti": 29, "cont_all_tru": [29, 723, 746], "cont_as_bool": 29, "cont_assert_contains_sub_contain": 29, "sub_cont": 29, "screen": [29, 715, 716, 746], "cont_assert_contains_sub_structur": 29, "check_shap": [29, 694], "cont_assert_ident": 29, "check_typ": 29, "same_arrai": [29, 746], "arrays_equ": 29, "cont_assert_identical_structur": 29, "build_cal": 29, "assert_and_assign": 29, "further": [29, 675, 709, 710, 717, 719, 720, 724, 727, 729, 731, 732, 735, 736, 738, 742, 743, 746, 747, 763, 764], "strucutr": 29, "congruent": 29, "cont_at_key_chain": 29, "ignore_non": 29, "cont_at_kei": 29, "substr": 29, "try": [29, 502, 534, 687, 697, 706, 707, 709, 710, 715, 716, 717, 719, 720, 723, 724, 725, 729, 730, 735, 737, 743, 745, 751], "cont_combin": 29, "prioriti": [29, 697, 717, 735], "duplic": [29, 541, 618, 721, 728, 733, 734, 737, 747, 764], "configur": [29, 165, 531, 541, 629, 712, 716, 717, 722, 724, 725, 730], "container_rightmost": 29, "cont_common_key_chain": 29, "cont_config": 29, "cont_contains_sub_contain": 29, "cont_contains_sub_structur": 29, "cont_copi": [29, 746], "cont_create_if_abs": 29, "noth": [29, 741, 764], "cont_cutoff_at_depth": 29, "depth_cutoff": 29, "summari": [29, 122, 445, 460, 530, 534, 716, 717, 738], "cont_cutoff_at_height": 29, "height_cutoff": 29, "deep": [29, 448, 534, 706, 708, 711, 713, 714, 715, 717, 719, 722, 723, 725, 730, 734, 737, 742, 745, 746, 756, 758, 761, 762, 764, 765], "intern": [29, 54, 55, 56, 541, 616, 626, 627, 687, 688, 689, 690, 691, 693, 720, 723, 726, 728, 735, 737, 738, 740], "cont_dev": 29, "belong": [29, 715, 719, 747], "cont_dev_str": 29, "cont_diff": [29, 746], "diff_kei": 29, "detect_key_diff": 29, "detect_value_diff": 29, "detect_shape_diff": 29, "share": [29, 139, 530, 673, 674, 706, 709, 721, 723, 727, 732, 734, 736, 737, 738, 741, 743, 756, 757, 764], "among": [29, 710, 724, 738, 741, 758], "container0": 29, "cont_duplicate_array_keychain": 29, "cont_find_sub_contain": 29, "sub_cont_to_find": 29, "exsit": 29, "cont_find_sub_structur": 29, "sub_struc_to_find": 29, "cont_flatten_key_chain": [29, 746], "__": [29, 727, 746], "above_height": [29, 746], "below_depth": [29, 746], "cont_format_key_chain": 29, "format_fn": 29, "cont_from_disk_as_hdf5": [29, 746], "h5_obj_or_filepath": 29, "slice_obj": 29, "load": [29, 308, 368, 690, 706, 738, 751, 757, 764], "disk": [29, 690, 746, 757], "h5py": 29, "hdf5": [29, 690, 746], "filepath": [29, 548, 667, 717, 719], "h5": 29, "cont_from_disk_as_json": [29, 746], "json_filepath": 29, "json": [29, 712, 716, 746], "cont_from_disk_as_pickl": [29, 746], "pickle_filepath": 29, "pickl": [29, 690, 723, 746], "cont_from_flat_list": 29, "flat_list": 29, "hierarchi": [29, 715, 746, 754, 764], "cont_handle_inplac": 29, "prime": [29, 725], "overwritten": [29, 720, 721], "cont_has_kei": 29, "query_kei": 29, "somewher": [29, 724], "cont_has_key_chain": 29, "cont_ident": [29, 746], "cont_identical_array_shap": 29, "regardless": [29, 710, 711, 725, 729, 745, 748], "cont_identical_config": 29, "cont_identical_structur": 29, "cont_if_exist": 29, "cont_inplace_upd": 29, "cont_ivi": 29, "cont_key_chains_contain": 29, "sub_str": 29, "cont_list_stack": [29, 746], "cont_load": 29, "cont_map": [29, 723, 746], "cont_map_sub_cont": 29, "include_self": 29, "possibi": 29, "cont_max_depth": 29, "cont_multi_map": 29, "map_nest": 29, "assert_ident": 29, "leftmost": [29, 541, 629], "cont_multi_map_in_funct": 29, "cont_num_arrai": 29, "cont_overwrite_at_key_chain": 29, "target_dict": 29, "return_dict": 29, "cont_prune_empti": 29, "keep_non": 29, "cont_prune_key_chain": 29, "key1": [29, 706, 747], "key2": [29, 706], "key3": 29, "cont_prune_key_from_key_chain": 29, "cont_prune_kei": 29, "cont_prune_keys_from_key_chain": 29, "cont_reduc": 29, "cont_remove_key_length_limit": 29, "cont_remove_print_limit": 29, "cont_reshape_lik": 29, "leading_shap": 29, "cont_restructur": 29, "keep_orig": 29, "old": [29, 716, 721, 735], "cont_restructure_key_chain": 29, "keychain_map": 29, "cont_sav": 29, "cont_set_at_key_chain": 29, "cont_set_at_kei": 29, "cont_shap": [29, 536, 554], "attribut": [29, 118, 119, 120, 121, 152, 153, 161, 453, 454, 530, 531, 534, 671, 721, 722, 723, 725, 728, 729, 732, 733, 735, 736, 741, 744, 745, 746, 747], "cont_show": 29, "cont_show_sub_contain": 29, "sub_cont_or_keychain": 29, "cont_size_ordered_arrai": 29, "keychain": [29, 35, 274, 374, 375, 376, 401], "cont_slice_kei": 29, "all_depth": 29, "cont_slice_via_kei": 29, "slice_kei": 29, "cont_sort_by_kei": 29, "cont_structural_diff": 29, "cont_to_dict": 29, "cont_to_disk_as_hdf5": [29, 746], "starting_index": 29, "max_batch_s": 29, "later": [29, 442, 534, 715, 730, 735, 738, 739, 758], "cont_to_disk_as_json": [29, 746], "cont_to_disk_as_pickl": [29, 746], "cont_to_flat_list": 29, "cont_to_iter": [29, 723], "leaf_keys_onli": 29, "cont_to_iterator_kei": 29, "cont_to_iterator_valu": 29, "cont_to_json": 29, "cont_to_nested_list": 29, "cont_to_raw": 29, "cont_trim_kei": 29, "max_length": 29, "trim": 29, "cont_try_kc": 29, "cont_unifi": 29, "unifi": [29, 166, 531, 707, 709, 718, 719, 720, 725, 729, 733, 734, 736, 741, 743, 751, 754, 755, 756, 758, 762, 765], "concatten": [29, 166, 531], "cont_unstack_cont": 29, "dim_siz": 29, "cont_update_config": 29, "cont_with_default_key_color": 29, "cont_with_entries_as_list": 29, "cont_with_ivy_backend": 29, "ivy_backend": [29, 737], "cont_with_key_length_limit": [29, 746], "cont_with_print_ind": [29, 746], "cont_with_print_limit": [29, 746], "cont_with_print_line_spac": 29, "h5_file_s": 29, "shuffle_h5_fil": 29, "seed_valu": [29, 543, 640], "split_cont": 29, "constitu": [29, 748], "_is_json": 29, "_repr": 29, "_containerwithconvers": [30, 53], "_static_to_ivi": 30, "_static_to_n": 30, "_containerwithcr": [31, 53], "_static_arang": 31, "_static_asarrai": 31, "_static_copy_arrai": 31, "_static_empti": 31, "_static_empty_lik": 31, "_static_ey": 31, "n_row": [31, 35, 86, 100, 268, 301, 308, 361, 529], "n_col": [31, 35, 86, 100, 268, 301, 529], "_static_from_dlpack": 31, "_static_ful": 31, "_static_full_lik": 31, "static_full_lik": 31, "2324": [31, 90, 529], "234": [31, 34, 90, 112, 195, 246, 529, 530, 532, 536, 560, 673], "123": [31, 32, 90, 121, 451, 529, 534, 738], "_static_linspac": 31, "_static_logspac": 31, "static_logspac": 31, "15443469": [31, 92], "64158883": [31, 92], "_static_meshgrid": 31, "_static_native_arrai": 31, "_static_one_hot": 31, "static_one_hot": 31, "_static_on": 31, "_static_ones_lik": 31, "_static_tril": 31, "_static_triu": 31, "_static_zero": 31, "_static_zeros_lik": 31, "frombuff": [31, 529], "expos": [31, 88, 445, 529, 534, 706, 708, 724, 743, 747], "interfac": [31, 88, 529, 709, 745, 748, 751, 753, 754, 755, 756, 757, 758, 762, 765], "x00": [31, 88, 529], "xf0": [31, 88, 529], "x01": [31, 88, 529], "x02": [31, 88, 529], "x03": [31, 88, 529], "x04": [31, 88, 529], "x05": [31, 88], "5443469": [31, 92, 529], "static_frombuff": 31, "static_triu_indic": 31, "triu_indic": [31, 529], "_containerwithdatatyp": [32, 53], "_static_astyp": 32, "718": [32, 34, 105, 222, 530], "618": [32, 34, 105, 222, 530], "static_astyp": 32, "_static_broadcast_arrai": 32, "static_broadcast_arrai": 32, "_static_broadcast_to": 32, "static_broadcast_to": 32, "_static_can_cast": 32, "from_": [32, 108, 530], "static_can_cast": 32, "_static_default_complex_dtyp": 32, "complex_dtyp": [32, 111, 134, 530], "_static_default_float_dtyp": 32, "float_dtyp": [32, 113, 136, 530], "_static_dtyp": 32, "_static_finfo": 32, "inquir": [32, 118, 121], "static_finfo": 32, "55040e": [32, 118, 530], "7976931348623157e": [32, 118, 530], "308": [32, 118, 530, 673, 738], "_static_function_supported_dtyp": 32, "_static_function_unsupported_dtyp": 32, "_static_iinfo": 32, "1800": [32, 121, 530], "1084": 32, "40000": 32, "static_iinfo": 32, "2147483648": [32, 121, 530], "2147483647": [32, 121, 530], "_static_is_bool_dtyp": 32, "dtype_in": [32, 103, 104, 117, 123, 124, 125, 126, 127, 128, 129, 130, 145, 530], "_static_is_complex_dtyp": 32, "is_complex_dtyp": [32, 530, 739], "roughli": [32, 716, 719, 761], "static_is_complex_dtyp": 32, "complex64": [32, 111, 125, 134, 140, 206, 233, 254, 299, 530, 532, 537, 583, 585, 586, 674, 725], "_static_is_float_dtyp": 32, "static_is_float_dtyp": 32, "_static_is_int_dtyp": 32, "_static_is_uint_dtyp": 32, "_static_result_typ": 32, "static_result_typ": 32, "broadcats": [32, 106], "_containerwithdevic": [33, 53], "_static_dev": 33, "static_dev": 33, "_static_to_devic": 33, "static_to_devic": 33, "contaion": [33, 150], "_containerwithelementwis": [34, 53], "_static_ab": 34, "static_ab": 34, "_static_aco": 34, "static_aco": 34, "_static_acosh": 34, "static_acosh": 34, "_static_add": 34, "static_add": [34, 56], "_static_asin": 34, "static_asin": 34, "524": [34, 178, 532], "412": [34, 39, 178, 532], "201": [34, 35, 178, 328, 532], "_static_asinh": 34, "static_asinh": 34, "_static_atan": 34, "static_atan": 34, "_static_atan2": 34, "static_atan2": 34, "915": [34, 181, 532], "983": [34, 181, 532], "978": [34, 181, 532], "696": [34, 44, 181, 532, 638], "993": [34, 181, 532], "_static_atanh": 34, "static_atanh": 34, "_static_bitwise_and": 34, "static_bitwise_and": 34, "_static_bitwise_invert": 34, "static_bitwise_invert": 34, "_static_bitwise_left_shift": 34, "_static_bitwise_or": 34, "static_bitwise_or": 34, "_static_bitwise_right_shift": 34, "static_bitwise_right_shift": 34, "_static_bitwise_xor": 34, "static_bitwise_xor": 34, "_static_ceil": 34, "static_ceil": 34, "_static_co": 34, "static_co": 34, "_static_cosh": 34, "static_cosh": 34, "34": [34, 35, 36, 44, 121, 188, 191, 218, 239, 307, 319, 349, 434, 448, 449, 530, 532, 534, 536, 537, 543, 560, 577, 638, 639, 726], "_static_deg2rad": 34, "static_deg2rad": 34, "0262": [34, 192, 232, 532], "873": [34, 192, 232, 532], "_static_divid": 34, "static_divid": 34, "_static_equ": 34, "static_equ": 34, "_static_erf": 34, "static_erf": 34, "27632612": [34, 195], "934008": [34, 195], "99999928": [34, 195], "91903949": [34, 195], "_static_exp": 34, "static_exp": 34, "59814835": [34, 196, 532], "4131622": [34, 196], "_static_expm1": 34, "thefunct": [34, 195], "areal": 34, "static_expm1": 34, "71828175": [34, 196, 532], "38905621": [34, 196, 532], "59815216": 34, "_static_floor": 34, "static_floor": 34, "_static_floor_divid": 34, "static_floor_divid": 34, "_static_great": 34, "static_great": 34, "_static_greater_equ": 34, "static_greater_equ": 34, "_static_isfinit": 34, "999999999999": [34, 207, 532], "static_isfinit": 34, "_static_isinf": 34, "static_isinf": 34, "_static_isnan": 34, "static_isnan": 34, "_static_isr": 34, "0j": [34, 35, 96, 97, 174, 175, 176, 179, 182, 191, 196, 198, 210, 214, 216, 233, 237, 239, 240, 244, 275, 304, 529, 532, 537, 583], "23j": [34, 35], "9j": [34, 35], "static_isr": 34, "_static_lcm": 34, "1080": [34, 211], "1550": [34, 211], "130": [34, 211], "_static_less": 34, "static_less": 34, "_static_less_equ": 34, "static_less_equ": 34, "_static_log": 34, "static_log": 34, "_static_log10": 34, "static_log10": 34, "898": [34, 215, 532], "0414": [34, 215, 532], "_static_log1p": 34, "static_log1p": 34, "_static_log2": 34, "_static_logaddexp": 34, "static_logaddexp": 34, "_static_logical_and": 34, "static_logical_and": 34, "_static_logical_not": 34, "static_logical_not": 34, "_static_logical_or": 34, "static_logical_or": 34, "_static_logical_xor": 34, "static_logical_xor": 34, "_static_maximum": 34, "static_maximum": 34, "_static_minimum": 34, "static_minimum": 34, "_static_multipli": 34, "static_multipli": 34, "_static_neg": 34, "static_neg": 34, "_static_not_equ": 34, "static_not_equ": 34, "_static_posit": 34, "static_posit": 34, "_static_pow": 34, "static_pow": 34, "_static_rad2deg": 34, "static_rad2deg": 34, "5160": 34, "10300": [34, 232, 532], "15500": 34, "20600": 34, "2860": [34, 232], "_static_reciproc": 34, "recirpoc": [34, 234], "static_reciproc": 34, "_static_remaind": 34, "static_remaind": 34, "_static_round": 34, "thevfunct": 34, "300": [34, 36, 39, 236, 307, 330, 331, 456, 480, 532, 534, 537, 573, 738], "527": [34, 236, 532], "static_round": 34, "301": [34, 236, 532], "_static_sign": 34, "static_sign": 34, "_static_sin": 34, "static_sin": 34, "757": [34, 238, 532], "959": [34, 198, 238, 532], "279": [34, 238, 307, 328, 338, 443, 532, 534], "_static_sinh": 34, "static_sinh": 34, "835": [34, 239], "347": [34, 239], "721": [34, 239], "_static_sqrt": 34, "93": [34, 36, 44, 151, 240, 448, 449, 531, 534, 638, 639], "static_sqrt": 34, "_static_squar": 34, "static_squar": 34, "_static_subtract": 34, "static_subtract": 34, "_static_tan": 34, "static_tan": 34, "_static_tanh": 34, "static_tanh": 34, "995": [34, 244, 532], "9999": 34, "_static_trapz": 34, "static_trapz": 34, "_static_trunc": 34, "static_trunc": 34, "_static_trunc_divid": 34, "75j": [34, 177, 206], "01317055": [34, 177], "05634501": [34, 177], "115": [34, 177, 232, 532], "3461759": [34, 177], "524111": [34, 177], "644": [34, 178, 532, 747], "305": [34, 39, 178, 532], "351": [34, 192, 232], "00613": [34, 192], "0154": [34, 192], "403": [34, 196], "428772": [34, 196], "649": [34, 198], "220": [34, 198], "865": [34, 198], "metho": [34, 205, 217], "7j": [34, 35, 210, 233, 275, 304, 532], "956": [34, 216], "08746284": [34, 219], "32192809": [34, 219], "nuner": [34, 226], "65": [34, 37, 44, 187, 226, 463, 515, 532, 534, 535, 537, 547, 580, 638, 639, 657, 724], "000": [34, 227, 673, 724], "413": [34, 232], "took": [34, 233], "335": [34, 35, 233, 275], "345j": [34, 35, 233, 275], "static_angl": 34, "static_exp2": 34, "static_fmin": 34, "static_gcd": 34, "static_imag": 34, "static_logaddexp2": 34, "static_nan_to_num": 34, "static_r": 34, "_containerwithactivationexperiment": [35, 53], "_static_elu": 35, "static_elu": 35, "_static_silu": 35, "static_silu": 35, "27777028": [35, 255], "23947507": [35, 255], "0900332": [35, 255], "contan": [35, 249], "19722462": [35, 249], "84729779": [35, 249], "31326163": [35, 250], "46328258": [35, 250], "51301527": [35, 250], "79813886": [35, 250], "22856998": [35, 253], "42028043": [35, 253], "31868932": [35, 253], "static_logit": 35, "static_logsigmoid": 35, "34115386": 35, "64439666": 35, "24115384": 35, "55435526": 35, "07888974": 35, "00741899": 35, "26328245": 35, "00012302": 35, "static_prelu": 35, "static_relu6": 35, "static_selu": 35, "static_thresholded_relu": 35, "_containerwithconversionexperiment": [35, 53], "_containerwithcreationexperiment": [35, 53], "_static_trilu": 35, "blackman": [35, 257, 301], "00770143e": [35, 257], "49229857e": [35, 257], "hamming_window": [35, 301], "coeffici": [35, 259, 301, 537, 584], "ham": [35, 259, 301], "8000": [35, 259, 301], "2000": [35, 259, 301, 706], "4180": [35, 259], "8180": [35, 259], "hann_window": [35, 301], "hann": [35, 260, 301], "7500": [35, 260], "3455": [35, 260], "9045": [35, 260], "kaiser_bessel_derived_window": [35, 301], "suitabl": [35, 262, 263, 301, 546, 653, 675, 716, 717, 723, 739, 758], "spectral": [35, 262, 263, 301], "analysi": [35, 262, 263, 301, 758, 759], "design": [35, 200, 257, 262, 263, 301, 532, 706, 708, 709, 718, 722, 724, 725, 735, 736, 737, 741, 743, 745, 751, 754, 756, 758, 761, 762, 763], "kaiser": [35, 257, 262, 263, 301], "70710677": [35, 262, 411, 412], "18493208": [35, 262, 301], "9827513": [35, 262, 301], "kaiser_window": [35, 301], "static_kaiser_window": [35, 263], "2049": [35, 263], "8712": [35, 263], "0367": [35, 263, 301], "7753": [35, 263], "static_blackman_window": 35, "window_length": [35, 257, 259, 262, 263, 272, 301], "static_eye_lik": 35, "static_hamming_window": 35, "static_hann_window": 35, "static_hann": 35, "static_kaiser_bessel_derived_window": 35, "static_tril_indic": 35, "static_unsorted_segment_min": 35, "static_unsorted_segment_sum": 35, "static_vorbis_window": 35, "vorbis_window": [35, 301], "vorbi": [35, 272, 301], "38268343": [35, 272], "92387953": [35, 272], "14943586": [35, 272, 301], "51644717": [35, 272], "85631905": [35, 272], "98877142": [35, 272], "tril_indic": [35, 301], "_containerwithdata_typeexperiment": [35, 53], "_containerwithdeviceexperiment": [35, 53], "_containerwithelementwiseexperiment": [35, 53], "0003": [35, 273, 537, 573, 673, 676], "0006": [35, 273, 296], "2345j": [35, 275], "5772": [35, 279], "9635": [35, 279], "4228": [35, 279], "9228": [35, 279], "mantissa": [35, 283, 304], "frist": [35, 284, 304], "coord": [35, 284], "6055": [35, 285], "160": [35, 287], "10240": [35, 287], "60000038": [35, 288, 304], "0707": [35, 294, 304], "0579": [35, 294, 304], "static_allclos": 35, "static_binar": 35, "static_conj": 35, "static_copysign": 35, "static_count_nonzero": 35, "static_diff": 35, "static_digamma": 35, "57721537": 35, "96351004": 35, "static_fix": 35, "static_float_pow": 35, "static_fmax": 35, "static_fmod": 35, "static_frexp": 35, "static_gradi": 35, "static_hypot": 35, "static_isclos": 35, "static_ldexp": 35, "static_lerp": 35, "90000057": [35, 288, 304], "80000019": [35, 288, 304], "70000076": [35, 288, 304], "55000019": [35, 288, 304], "05000019": [35, 288, 304], "static_modf": 35, "static_nansum": 35, "static_nextaft": 35, "static_signbit": 35, "static_sinc": 35, "636": 35, "090": 35, "070": 35, "057": 35, "static_xlogi": 35, "static_zeta": 35, "0244": [35, 296], "_containerwithgeneralexperiment": [35, 53], "_static_reduc": 35, "static_reduc": 35, "_containerwithgradientsexperiment": [35, 53], "_containerwithimageexperiment": [35, 53], "_containerwithlayersexperiment": [35, 53], "_static_fft": 35, "static_fft": 35, "673": [35, 328], "0507": [35, 328], "79711437": [35, 307, 328, 338], "94867325": [35, 307, 328, 338], "74089146": [35, 307, 328, 338], "25980937": [35, 307, 328, 338], "64958102": [35, 307, 328, 338], "2442648": [35, 307, 328, 338], "247306": [35, 340], "908323j": [35, 340], "494955": [35, 340], "90395j": [35, 340], "static_adaptive_avg_pool1d": 35, "static_adaptive_avg_pool2d": 35, "static_adaptive_max_pool2d": 35, "static_avg_pool1d": 35, "static_avg_pool2d": 35, "static_avg_pool3d": 35, "static_dct": 35, "132": 35, "182": 35, "242": 35, "253": [35, 239, 532], "515": [35, 543, 638], "467": 35, "static_dft": 35, "static_embed": 35, "static_idct": 35, "93732834": [35, 307, 328], "75048852": [35, 307, 328], "29723358": [35, 307, 338], "6950531": 35, "93914509": 35, "88008738": 35, "18951225": 35, "06697273": [35, 307, 338], "57439804": 35, "68861485": [35, 307, 338], "41308832": [35, 307, 338], "0700836": 35, "2449036": 35, "285": 35, "6711426": 35, "514": 35, "501709": 35, "4924011": 35, "static_ifft": 35, "static_ifftn": 35, "static_interpol": 35, "static_max_pool1d": 35, "static_max_pool2d": 35, "max_pool2dd": 35, "static_max_pool3d": 35, "static_rfftn": 35, "_containerwithlinearalgebraexperiment": [35, 53], "933034": [35, 308, 352], "eigenvealu": [35, 355, 569], "xx": [35, 355, 357, 569], "37228107": [35, 355, 569], "3722816": [35, 355, 569], "8245648": [35, 355, 569], "41597357": [35, 355, 569], "56576747": [35, 355, 569], "9093767": [35, 355, 569], "56155": [35, 356], "82842": [35, 356], "450": [35, 360], "static_adjoint": 35, "static_cond": 35, "static_diagflat": 35, "static_eig": 35, "static_eigh_tridiagon": 35, "static_eigv": 35, "static_initialize_tuck": 35, "static_kron": 35, "kroneck": [35, 308, 359, 360], "static_make_svd_non_neg": 35, "static_matrix_exp": 35, "static_mode_dot": 35, "static_multi_dot": 35, "regular": [35, 308, 319, 365, 431, 537, 574, 716, 736, 758], "static_multi_mode_dot": 35, "static_partial_tuck": 35, "static_svd_flip": 35, "static_truncated_svd": 35, "static_tuck": 35, "_containerwithmanipulationexperiment": [35, 53], "_static_fill_diagon": 35, "_static_unique_consecut": 35, "atleast": [35, 310, 374, 375, 376, 726], "ary1": [35, 310, 374, 375, 376], "ary2": [35, 310, 374, 375, 376], "broadcast_shap": [35, 55, 310, 673], "static_concat_from_sequ": [35, 378], "30192195": [35, 390], "static_as_strid": 35, "static_atleast_1d": 35, "static_atleast_2d": 35, "static_atleast_3d": 35, "static_broadcast_shap": 35, "static_dsplit": 35, "static_dstack": 35, "static_expand": 35, "static_flatten": 35, "static_fliplr": 35, "static_flipud": 35, "static_fold": 35, "static_heavisid": 35, "static_hsplit": 35, "static_hstack": 35, "static_i0": 35, "static_matric": 35, "static_moveaxi": 35, "static_pad": 35, "static_partial_fold": 35, "static_partial_tensor_to_vec": 35, "static_partial_unfold": 35, "static_partial_vec_to_tensor": 35, "static_rot90": 35, "static_soft_threshold": 35, "static_take_along_axi": 35, "static_top_k": 35, "static_unfold": 35, "static_vsplit": 35, "static_vstack": 35, "_containerwithnormsexperiment": [35, 53], "16903085": [35, 411, 412], "50709254": [35, 411, 412], "84515423": [35, 411, 412], "44183609": [35, 411, 412], "56807494": [35, 411, 412], "69431382": [35, 411, 412], "static_batch_norm": 35, "static_group_norm": 35, "static_instance_norm": 35, "static_l1_norm": 35, "static_l2_norm": 35, "static_lp_norm": 35, "12500000": 35, "37500000": 35, "62500000": 35, "27500000": 35, "35000000": 35, "42500000": 35, "0000000": 35, "5000000": 35, "2500000": 35, "_containerwithrandomexperiment": [35, 53], "43643127": [35, 415], "32325703": [35, 415], "24031169": [35, 415], "34251311": [35, 415], "31692529": [35, 415], "3405616": [35, 415], "5319725": [35, 415], "22458365": [35, 415], "24344385": [35, 415], "26588406": [35, 415], "61075421": [35, 415], "12336174": [35, 415], "51142915": [35, 415], "25041268": [35, 415], "23815817": [35, 415], "64042903": [35, 415], "25763214": [35, 415], "10193883": [35, 415], "31624692": [35, 415], "46567987": [35, 415], "21807321": [35, 415], "37677699": [35, 415], "39914594": [35, 415], "22407707": [35, 415], "static_bernoulli": 35, "static_beta": 35, "static_dirichlet": 35, "static_gamma": 35, "static_poisson": 35, "_containerwithsearchingexperiment": [35, 53], "static_unravel_index": 35, "_containerwithsetexperiment": [35, 53], "_containerwithsortingexperiment": [35, 53], "invert_permut": [35, 317], "static_invert_permut": 35, "static_lexsort": [35, 47], "_containerwithstatisticalexperiment": [35, 53], "_static_cummax": 35, "static_cummax": 35, "_static_cummin": 35, "todo": [35, 429, 715, 725, 736], "static_cummin": 35, "func_nam": [35, 430, 715, 727, 728, 732, 736], "static_bincount": 35, "static_corrcoef": 35, "static_cov": [35, 319, 427], "static_histogram": 35, "static_igamma": 35, "static_median": 35, "static_nanmean": 35, "static_nanmedian": 35, "static_quantil": 35, "_containerwithutilityexperiment": [35, 53], "_containerwithgener": [36, 53], "_static_all_equ": 36, "static_all_equ": 36, "_static_array_equ": 36, "x0": [36, 440, 534, 727], "level": [36, 440, 686, 706, 710, 711, 715, 717, 723, 725, 729, 732, 734, 735, 736, 740, 741, 742, 743, 746, 747, 748, 751, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765], "a0": [36, 440], "static_array_equ": 36, "_static_assert_supports_inplac": 36, "_static_clip_matrix_norm": 36, "static_clip_matrix_norm": 36, "849": [36, 443, 444, 534], "_static_clip_vector_norm": 36, "static_clip_vector_norm": 36, "_static_einops_rearrang": 36, "static_einops_rearrang": 36, "_static_einops_reduc": 36, "static_einops_reduc": 36, "29333329": [36, 449, 534], "53000069": [36, 449, 534], "39666676": [36, 449, 534], "20666695": [36, 449, 534], "_static_einops_repeat": 36, "static_einops_repeat": 36, "_static_fourier_encod": 36, "static_fourier_encod": 36, "classivi": [36, 539, 545, 606, 648], "89858720e": 36, "79717439e": 36, "_static_gath": 36, "static_gath": 36, "_static_gather_nd": 36, "200": [36, 39, 187, 307, 330, 331, 456, 480, 532, 534, 700, 746], "400": [36, 39, 307, 330, 331, 456, 480, 534, 537, 573], "static_gather_nd": 36, "_static_get_num_dim": 36, "static_get_num_dim": 36, "_static_has_nan": 36, "leafwis": 36, "static_has_nan": 36, "_static_inplace_decr": 36, "_static_inplace_incr": 36, "_static_inplace_upd": 36, "_static_is_arrai": 36, "static_is_arrai": 36, "_static_is_ivy_arrai": 36, "static_is_ivy_arrai": 36, "_static_is_native_arrai": 36, "static_is_native_arrai": 36, "_static_scatter_flat": 36, "ref": [36, 40, 212, 226, 229, 235, 242, 532, 539, 608, 716, 735], "_static_scatter_nd": 36, "static_scatter_nd": 36, "_static_stable_divid": 36, "22222222": 36, "11111111": 36, "857": [36, 493, 534], "444": 36, "_static_stable_pow": 36, "00012": [36, 494, 534], "00016": [36, 37, 494, 521, 534, 535], "00001": [36, 494, 534, 673], "00032": [36, 494], "00256": [36, 494], "1679638": [36, 494], "395": [36, 494], "16777383": [36, 494], "77": [36, 188, 494, 532, 537, 547, 580, 657], "_static_supports_inplace_upd": 36, "_static_to_list": 36, "static_to_list": 36, "_static_to_numpi": 36, "static_to_numpi": 36, "_static_to_scalar": 36, "static_to_scalar": 36, "_static_value_is_nan": 36, "452": 36, "static_value_is_nan": 36, "833": [36, 444], "600": [36, 39, 307, 330, 331, 456, 724], "700": [36, 456], "items": [36, 52, 534], "static_isin": 36, "static_items": 36, "complex128": [36, 111, 112, 125, 134, 140, 254, 299, 474, 530, 534, 537, 570, 571, 576, 592, 673, 674, 725], "static_strid": 36, "425": [36, 513], "_containerwithgradi": [37, 53], "_static_stop_gradi": 37, "static_stop_gradi": 37, "87": [37, 39, 187, 216, 319, 349, 428, 515, 532, 535, 673], "976": [37, 244, 515, 532, 535], "49e": [37, 515, 535], "74e": [37, 515, 535], "95e": [37, 515, 535], "024": [37, 515, 535], "096": [37, 515, 535], "216": [37, 40, 515, 535, 590], "384": [37, 515, 535], "626": [37, 515, 535], "en": [37, 515, 516, 535, 724], "wikipedia": [37, 515, 516, 535], "wiki": [37, 515, 516, 535], "stochastic_gradient_desc": [37, 515, 516, 535], "01099": [37, 516], "01003": [37, 516, 535], "01015": [37, 516, 535], "99936122": [37, 516, 535], "99936116": [37, 516, 535], "99936128": [37, 516, 535], "99936104": [37, 516, 535], "w_new": [37, 519, 535], "88": [37, 44, 61, 188, 319, 428, 519, 526, 532, 535, 537, 543, 547, 580, 639, 657], "708": [37, 521, 535], "445": [37, 521, 535], "6e": [37, 521, 535], "00036": [37, 521, 535], "00049": [37, 521, 535], "layerwis": [37, 522, 535], "_containerwithimag": [38, 53], "_containerwithlay": [39, 53], "_static_conv1d": 39, "static_conv1d": 39, "_static_conv1d_transpos": 39, "static_conv1d_transpos": 39, "112": [39, 537, 547, 551, 580, 657], "_static_conv2d": 39, "ey": [39, 529, 536, 552, 558, 741, 748], "static_conv2d": 39, "_static_conv2d_transpos": 39, "static_conv2d_transpos": 39, "_static_conv3d": 39, "fdfh": [39, 554], "static_conv3d": 39, "_static_conv3d_transpos": 39, "static_conv3d_transpos": 39, "_static_depthwise_conv2d": 39, "inp": [39, 536, 558], "static_depthwise_conv2d": 39, "_static_dropout": 39, "static_dropout": 39, "_static_dropout1d": 39, "static_dropout1d": 39, "_static_dropout2d": 39, "_static_dropout3d": 39, "_static_linear": 39, "278": [39, 536, 559, 560], "static_linear": 39, "352": [39, 536, 560, 729], "195": 39, "_static_lstm_upd": 39, "_static_multi_head_attent": 39, "_static_reduce_window": 39, "_static_scaled_dot_product_attent": 39, "static_scaled_dot_product_attent": 39, "39999962": [39, 536, 559, 560], "19999695": [39, 560], "11600018": [39, 560], "88399887": [39, 560], "196": [39, 536, 560], "306": [39, 536, 560], "91": [39, 44, 188, 349, 532, 536, 537, 543, 547, 560, 580, 638, 657], "19999981": [39, 536, 559, 563], "59249449": [39, 536, 563], "68226194": [39, 536, 563], "4000001": [39, 536, 559, 563], "19603825": [39, 536, 563], "9960382": [39, 536, 563], "26894283": [39, 536, 563], "40236187": [39, 536, 563], "39999437": [39, 536, 563], "59999037": [39, 536, 563], "35046196": [39, 536, 563], "54282808": [39, 536, 563], "39989519": [39, 536, 563], "5998764": [39, 536, 563], "_containerwithlinearalgebra": [40, 53], "_static_choleski": 40, "static_choleski": 40, "577": [40, 537, 564], "707": [40, 537, 564], "static_rol": [40, 42], "_static_cross": 40, "static_cross": 40, "_static_det": 40, "_static_diag": 40, "_static_diagon": 40, "static_diagon": 40, "_static_eigh": 40, "_static_eigvalsh": 40, "static_eigvalsh": 40, "51572949": [40, 537, 571], "17091519": [40, 537, 571], "3448143": [40, 537, 571], "88178420e": [40, 537, 571], "35898387e": [40, 537, 571], "46410179e": [40, 537, 571], "_static_inn": 40, "static_inn": 40, "_static_inv": 40, "static_inv": 40, "_static_matmul": 40, "matul": 40, "static_matmul": 40, "_static_matrix_norm": 40, "deimens": 40, "static_matrix_norm": 40, "_static_matrix_pow": 40, "_static_matrix_rank": 40, "static_matrix_rank": 40, "_static_matrix_transpos": 40, "static_matrix_transpos": 40, "_static_out": 40, "n1": [40, 93, 529], "n2": [40, 93, 529], "static_out": [40, 580], "_static_pinv": 40, "static_pinv": 40, "0426": 40, "0964": 40, "0605": 40, "1368": 40, "_static_qr": 40, "_static_slogdet": 40, "static_slogdet": 40, "6931472": 40, "0986123": 40, "_static_solv": 40, "_static_svd": 40, "static_svd": 40, "au": 40, "aS": 40, "avh": 40, "bu": [40, 709], "bvh": 40, "_static_svdv": 40, "_static_tensordot": 40, "_static_tensorsolv": 40, "_static_trac": 40, "static_trac": 40, "_static_vand": 40, "static_vand": 40, "343": [40, 236, 532, 590], "512": [40, 536, 551, 590, 706], "729": [40, 590, 747], "_static_vecdot": 40, "_static_vector_norm": 40, "static_vector_norm": 40, "77359247": [40, 592], "_static_vector_to_skew_symmetric_matrix": 40, "09861231": [40, 537, 583], "3475602": [40, 585], "93765765": [40, 585], "58776021": [40, 585], "10416126": [40, 585], "80644298": [40, 585], "87024701": [40, 585], "48127627": [40, 585], "79101127": [40, 585], "98288572": [40, 585], "68917423": [40, 585], "_containerwithloss": [41, 53], "_static_binary_cross_entropi": 41, "static_binary_cross_entropi": 41, "511": [41, 538, 594, 596], "_static_cross_entropi": 41, "static_cross_entropi": 41, "20397282": 41, "83258148": 41, "60943794": [41, 537, 583], "_static_sparse_cross_entropi": 41, "static_sparse_cross_entropi": 41, "5108256": [41, 595], "609438": [41, 595], "_containerwithmanipul": [42, 53], "_static_clip": 42, "static_clip": 42, "_static_concat": 42, "_static_constant_pad": 42, "static_constant_pad": 42, "_static_expand_dim": 42, "static_expand_dim": 42, "container_axi": [42, 539, 600], "_static_flip": 42, "static_flip": 42, "_static_permute_dim": 42, "static_permute_dim": 42, "_static_repeat": 42, "static_repeat": 42, "_static_reshap": 42, "static_reshap": 42, "_static_rol": 42, "positivclip": 42, "_static_split": 42, "static_split": 42, "_static_squeez": 42, "static_squeez": 42, "_static_stack": 42, "leavv": 42, "static_stack": 42, "_static_swapax": 42, "_static_til": 42, "static_til": 42, "_static_unstack": 42, "static_unstack": 42, "_static_zero_pad": 42, "repreat": [42, 603], "_containerwithnorm": [43, 53], "34198591": [43, 542, 635], "04274819": [43, 542, 635], "29923761": [43, 542, 635], "24053511": [43, 542, 635], "62221265": [43, 635], "20277636": [43, 635], "41943574": [43, 635], "83710337": [43, 635], "_containerwithrandom": [44, 53], "_static_multinomi": 44, "_static_randint": 44, "static_randint": 44, "_static_random_norm": 44, "static_random_norm": 44, "651": 44, "_static_random_uniform": 44, "static_random_uniform": 44, "481": 44, "0999": 44, "_static_shuffl": 44, "static_shuffl": 44, "431": [44, 638], "274": [44, 638], "_containerwithsearch": [45, 53], "_static_argmax": 45, "static_argmax": 45, "_static_argmin": 45, "static_argmin": 45, "_static_argwher": 45, "static_argwher": 45, "_static_nonzero": 45, "_static_wher": 45, "static_wher": 45, "_containerwithset": [46, 53], "_static_unique_al": 46, "static_unique_al": 46, "_static_unique_count": 46, "static_unique_count": 46, "_static_unique_invers": 46, "static_unique_invers": 46, "_static_unique_valu": 46, "_containerwithsort": [47, 53], "_static_argsort": 47, "static_argsort": 47, "_static_searchsort": 47, "_static_sort": 47, "static_sort": 47, "static_msort": 47, "_containerwithstatist": [48, 53], "_static_cumprod": 48, "static_cumprod": 48, "_static_cumsum": 48, "static_cumsum": 48, "_static_prod": 48, "static_prod": 48, "11000001": [48, 661], "23100001": [48, 661], "30800003": [48, 547, 661], "_static_sum": 48, "_static_var": 48, "static_var": 48, "12666667": [48, 547, 664], "11555555": [48, 547, 664], "respectv": [48, 662], "81649649": [48, 662], "94280904": [48, 662], "509902": [48, 547, 662], "2472192": [48, 662], "44948983": [48, 662], "41421354": [48, 662], "contian": [48, 664], "6666667": [48, 664], "_containerwithutil": [49, 53], "_static_al": 49, "static_al": 49, "_static_ani": 49, "static_ani": 49, "add_ivy_container_instance_method": 50, "containerexampl": 50, "__abs__": [52, 53], "__add__": [52, 53, 720, 723, 727, 728, 731, 736, 737, 745], "__eq__": [52, 53], "__ge__": [52, 53], "__gt__": [52, 53, 741], "__le__": [52, 53], "__lt__": [52, 53], "__ne__": [52, 53], "__pow__": [52, 53, 745], "69678056": 52, "59876156": 52, "82660675": 52, "__radd__": [52, 53, 727, 728, 736], "__rrshift__": [52, 53], "__rshift__": [52, 53], "__rsub__": [52, 53], "__sub__": [52, 53, 720, 723, 727, 731, 745], "__truediv__": [52, 53, 720, 723, 727], "__xor__": [52, 53], "referenc": [52, 729, 735], "hardwar": [52, 55, 709, 716, 741, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764], "resid": [52, 55, 539, 600, 736, 743, 747], "mt": [52, 745], "hopefulli": [52, 53, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 684, 685, 687, 688, 690, 691, 692, 693, 708, 709, 710, 712, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 743, 744, 745, 746, 747, 748, 750], "overview": [52, 53, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 684, 685, 687, 688, 690, 691, 692, 693, 722, 724, 738, 742, 750], "submodul": [52, 53, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 684, 685, 686, 687, 688, 690, 691, 692, 693, 715, 716, 717, 719, 722, 724, 726, 732, 733, 738, 742, 743, 747, 753], "question": [52, 53, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 684, 685, 687, 688, 690, 691, 692, 693, 706, 708, 709, 710, 712, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 743, 744, 745, 746, 747, 748, 750, 751], "reach": [52, 53, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 628, 684, 685, 687, 688, 690, 691, 692, 693, 708, 709, 710, 712, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 743, 744, 745, 746, 747, 748, 750, 757, 758], "eq": 53, "ge": 53, "gt": [53, 737, 743], "le": 53, "lt": 53, "ne": 53, "75979435": 53, "52153397": 53, "13532257": 53, "rshift": 53, "truediv": 53, "66666669": [53, 313, 412, 517, 535], "nested_arrai": [54, 55, 56, 722], "nestedarrai": 54, "nested_rank": [54, 55, 56], "inner_shap": [54, 55, 56], "nestedarraybas": [54, 55, 56], "classmethod": [54, 55, 677], "from_row_length": 54, "row_length": 54, "from_row_split": 54, "row_split": 54, "ragged_map": 55, "ragged_multi_map": 55, "ragged_arrai": 55, "ragged_multi_map_in_funct": 55, "replace_ivy_arrai": 55, "unbind": 55, "nestedarrayelementwis": 56, "func_wrapp": [59, 61, 64, 526, 726, 736, 740], "handle_complex_input": [59, 61, 64, 526], "strictli": [61, 64, 200, 526, 532, 731, 735], "behaviour": [61, 64, 227, 526, 532, 714, 717, 718, 719, 720, 723, 725, 726, 728, 729, 731, 732, 735, 736, 738, 739, 745], "24000001": [61, 526], "703": [62, 526], "683": [62, 526], "408": [62, 526], "313": [62, 526], "437": [62, 526], "40337825": [63, 526], "56114835": [63, 526], "20788449": [63, 526], "0768": [66, 526], "231": [66, 526], "body_fn": [71, 72, 74, 528], "bodi": [71, 74, 528, 719, 738], "lst": [71, 528], "orelse_fn": [72, 528], "lambda": [72, 74, 447, 517, 518, 520, 525, 528, 534, 535, 537, 541, 570, 623, 624, 628, 706, 715, 732, 733, 734, 737, 741, 743, 746], "body1": [73, 528], "body2": [73, 528], "repeatedli": [74, 528, 541, 625, 724, 738], "continu": [74, 240, 528, 532, 706, 709, 710, 714, 715, 716, 718, 719, 735, 738, 751, 758], "chosen": [75, 181, 529, 532, 544, 646, 715, 724, 736], "ml_framework": [75, 529], "distanc": [75, 529], "adjac": [75, 529], "nestedsequ": [76, 77, 529], "typevar": [76, 77, 529], "supportsbufferprotocol": [76, 77, 529], "static_copy_arrai": [83, 529], "intdtyp": [86, 97, 102, 114, 125, 130, 137, 143, 254, 299, 529, 530], "interchang": [87, 529, 539, 609], "plu": [88, 529], "x00b": [88, 529], "x00d": [88, 529], "x00e": [88, 529], "66666663": [91, 529], "41588834": [92, 529], "7827941": [92, 529], "6227766": [92, 529], "23413252": [92, 529], "n3": [93, 529], "similarli": [93, 100, 176, 268, 301, 529, 532, 721, 725, 736, 741, 745, 764], "xv": [93, 529], "yv": [93, 529], "x_nativ": [94, 529, 735], "y_nativ": [94, 529], "z_nativ": [94, 529], "d_type": [96, 529], "col": [100, 268, 301, 529], "primari": [100, 119, 120, 152, 153, 268, 301, 317, 420, 453, 454, 529, 530, 531, 534, 674, 676, 715, 718, 721, 725, 733, 735, 736, 738, 741, 751, 753], "purpos": [100, 198, 216, 268, 301, 529, 532, 537, 583, 717, 718, 720, 723, 724, 727, 729, 731, 732, 733, 736, 738, 741, 742, 745, 753, 757, 759, 762, 763, 764], "upward": [100, 268, 301, 529], "downward": [100, 268, 301, 529], "2xn": [100, 268, 301, 529], "subarrai": [100, 268, 301, 529], "incompat": [107, 530], "uint8": [108, 115, 119, 130, 133, 138, 144, 254, 299, 530, 673, 674, 725, 738], "closest": [110, 189, 199, 200, 236, 246, 310, 398, 530, 532, 738, 741], "xtype": [110, 530], "ytype": [110, 530], "native_uint16": [110, 530], "complexdtyp": [111, 125, 134, 530], "set_default_complex_dtyp": [111, 140, 530], "4294": [111, 113, 530], "967346": [111, 113, 530], "set_default_dtyp": [112, 141, 530, 725, 732], "floatdtyp": [113, 136, 530], "set_default_float_dtyp": [113, 122, 134, 142, 530, 725], "int_dtyp": [114, 137, 530], "set_default_int_dtyp": [114, 122, 143, 530, 725], "4294967346": [114, 115, 530], "uint_dtyp": [115, 138, 530], "uint": [115, 130, 138, 144, 530, 725, 737], "uintdtyp": [115, 130, 138, 144, 530], "set_default_uint_dtyp": [115, 122, 144, 530], "native_bool": [117, 530], "followng": [118, 530], "ieee": [118, 176, 193, 198, 216, 226, 235, 240, 243, 527, 530, 532, 709], "754": [118, 176, 193, 198, 216, 226, 235, 240, 243, 527, 530, 532, 709], "smallest_norm": [118, 530], "bfloat16": [119, 530, 673, 674, 725, 736, 738, 739], "unsupport": [120, 153, 454, 530, 531, 534, 668, 671, 716, 736], "encapsul": [121, 530, 724], "314": [121, 233, 275, 304, 530, 532], "9223372036854775808": [121, 530], "9223372036854775807": [121, 530], "65535": [121, 530], "4294967295": [121, 530], "un": [123, 530, 725, 743], "native_uint8": [123, 530], "hashabl": [127, 530], "type1": [131, 530], "type2": [131, 530], "array_api_promot": [131, 132, 530, 673, 674], "unexpect": [132, 200, 530, 532, 725], "default_complex_dtyp": [134, 530], "default_dtype_stack": [135, 141, 530], "unset_default_dtyp": [135, 530], "native_uint64": [135, 530], "default_float_dtyp": [136, 530, 725], "default_int_dtyp": [137, 143, 530, 725], "default_uint_dtyp": [138, 144, 530], "ret1": [139, 530], "ret2": [139, 530], "reset": [140, 141, 142, 143, 144, 170, 171, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 530, 531, 534, 726], "default_complex_dtype_stack": [140, 530], "default_float_dtype_stack": [142, 530], "native_float16": [145, 530], "unmodifi": [147, 531, 721, 725], "tpu": [147, 153, 164, 169, 531, 726, 758, 761], "clear": [148, 531, 706, 708, 709, 710, 715, 717, 721, 725, 726, 727, 736, 741, 743, 745, 758], "cach": [148, 442, 531, 534, 697, 730, 732, 735, 738], "gpu": [149, 151, 152, 155, 158, 160, 162, 164, 165, 168, 170, 172, 531, 706, 716, 717, 724, 726, 745, 752, 756, 758, 761, 762, 763], "aliv": [154, 159, 161, 457, 477, 478, 531, 534, 726], "139740789224448": [154, 531], "physic": [157, 531], "default_devic": [159, 162, 163, 164, 170, 171, 531, 726, 729], "process_specif": [160, 172, 531], "percentag": [160, 531], "ram": [160, 168, 172, 531], "alon": [160, 172, 531, 706, 712, 730, 738], "036902561555": [160, 531], "7024003467681645": [160, 531], "as_native_dev": [160, 531], "7095597456708771": [160, 531], "attr_onli": [161, 531], "soft_device_mod": [163, 171, 531], "rtype": [163, 481, 482, 486, 487, 489, 490, 531, 534], "chunk": [164, 165, 166, 531], "codebas": [164, 165, 531, 710, 711, 718, 725, 730, 735, 736, 738, 739, 742], "split_factor": [164, 531, 729], "max_chunk_s": [166, 531], "chunk_siz": [166, 531], "input_ax": [166, 531], "output_ax": [166, 531], "usag": [166, 531, 709, 725, 732, 735, 738, 743, 751, 761], "fed": [166, 531, 747], "fist": [166, 531], "gb": [168, 172, 531, 716], "66700032": [168, 531], "589934592": [168, 531], "set_default_devic": [170, 531, 726], "set_soft_device_mod": [171, 531, 726], "219563008": [172, 531], "902400346": [172, 531], "525205504": [172, 531], "na": [173, 532, 738], "princip": [174, 178, 180, 294, 304, 532], "domain": [174, 175, 178, 179, 180, 181, 190, 191, 196, 198, 214, 215, 217, 238, 239, 240, 243, 244, 294, 304, 532, 728, 756, 758], "codomain": [174, 175, 178, 179, 180, 181, 190, 191, 196, 198, 214, 215, 217, 238, 239, 240, 243, 244, 294, 304, 532, 728], "\u03c0": [174, 178, 180, 181, 527, 532], "3\u03c0": [174, 181, 532], "unspecifi": [174, 175, 179, 182, 191, 196, 198, 200, 231, 235, 239, 240, 244, 308, 355, 532, 537, 539, 569, 570, 608, 735], "\u03c0j": [175, 179, 182, 214, 216, 532], "3\u03c0j": [175, 214, 216, 532], "x1_i": [176, 181, 183, 185, 186, 187, 188, 193, 194, 200, 204, 205, 212, 213, 218, 220, 222, 223, 226, 229, 231, 235, 242, 532, 719], "neither": [176, 193, 200, 226, 532, 537, 587, 724, 736, 741], "nor": [176, 193, 200, 226, 532, 724, 736, 762], "2019": [176, 193, 198, 216, 226, 532, 758, 761], "too": [176, 193, 200, 226, 532, 687, 715, 716, 717, 719, 725, 729, 739, 751], "overflow": [176, 193, 200, 532, 537, 547, 583, 663, 714, 725], "commut": [176, 532], "tabl": [176, 193, 226, 487, 508, 532, 534, 673, 674, 688, 725, 736, 740, 758], "dj": [176, 193, 226, 532], "bj": [176, 193, 226, 275, 304, 532], "invlov": [176, 532], "z1": [176, 532], "z2": [176, 532], "yj": [177, 532], "nanj": [179, 532], "809": [179, 532], "199": [179, 532], "569": [179, 532], "733": [179, 532], "notat": [181, 532, 547, 657, 724], "denot": [181, 532, 690], "quadrant": [181, 532], "rai": [181, 532, 709], "bitwis": [183, 186, 188, 223, 532], "170": [187, 532], "243": [187, 532], "225": [187, 532], "xor": [188, 223, 532], "654": [190, 532], "ci": [191, 196, 198, 239, 532, 719, 725, 730, 737, 738, 751], "368": [191, 532], "670": [191, 532], "202": [191, 532, 719], "548": [191, 532], "1490": [191, 532], "57079633": [192, 532], "14159265": [192, 532], "71238898": [192, 532], "28318531": [192, 532], "02617994": [192, 532], "87266463": [192, 532], "01919862": [192, 532], "03839725": [192, 532], "05759586": [192, 532], "07679449": [192, 532], "09599311": [192, 532], "11519173": [192, 532], "35081118": [192, 532], "88139129": [192, 532], "underflow": [193, 200, 532, 537, 583, 725], "textbook": [193, 226, 532], "frac": [193, 215, 217, 237, 239, 243, 307, 313, 334, 335, 339, 340, 407, 409, 532], "ac": [193, 226, 532, 700], "bd": [193, 226, 532], "bc": [193, 226, 532, 700], "versu": [193, 226, 231, 532], "riemann": [193, 226, 532], "sphere": [193, 226, 532], "c99": [193, 226, 532], "infinit": [193, 226, 240, 532], "usual": [193, 226, 532, 700, 716, 719, 725, 736, 738, 741], "interest": [193, 226, 532, 715, 717], "unlik": [193, 226, 532, 709, 719, 724, 727, 763, 765], "698": [193, 532], "truth": [194, 204, 205, 212, 213, 229, 532, 668, 670, 736, 738], "cut": [196, 198, 238, 239, 240, 243, 532, 708, 764], "08553692": [196, 532], "567": [196, 532], "00344786": [196, 532], "76297021": [196, 532], "197948": [196, 532], "53253174": [196, 532], "accur": [198, 216, 532, 537, 583, 733], "fdlibm": [198, 216, 532], "compliant": [198, 216, 221, 222, 532, 547, 658, 659, 660, 662], "potenti": [198, 216, 532, 706, 715, 716, 724, 725, 736, 742, 761], "632": [198, 532], "20e": [198, 532], "72e": [198, 532, 673], "greatest": [199, 200, 203, 532], "introduc": [200, 532, 539, 545, 605, 647, 708, 723, 724, 725, 737, 738, 741, 746], "via": [200, 308, 367, 370, 532, 541, 626, 627, 717, 719, 723, 725, 726, 735, 739, 741, 743, 745, 746, 750, 758], "pep": [200, 532, 731], "238": [200, 532], "goal": [200, 532, 706, 709, 715, 758, 764], "disambigu": [200, 532, 734], "former": [200, 532, 725, 728, 736], "latter": [200, 532, 719, 721, 725, 728, 736], "overload": [200, 532, 738], "led": [200, 532, 719, 760], "subtl": [200, 532, 725, 764], "ambigu": [200, 532], "semant": [200, 235, 532, 708, 743, 748, 759], "ill": [200, 532, 675], "diverg": [200, 532], "prefer": [200, 532, 706, 716, 723, 729, 733, 736, 752, 758], "surpris": [200, 532, 751], "arrau": [206, 532], "log_": [215, 217, 532], "742": [216, 532], "hanl": [217, 532], "NOT": [221, 532, 700, 715], "particular": [221, 532, 674, 716, 717, 719, 721, 724, 725, 727, 733, 735, 736, 738, 739, 754, 758, 764], "negat": [228, 275, 304, 532], "omplex": [229, 532], "carefulli": [231, 532, 687, 736, 756, 761], "52095687": [231, 532], "92457771": [231, 532], "49372482": [231, 532], "22738838": [231, 532], "156": [231, 532, 673], "5877228": [231, 532], "189": [232, 532], "252": [232, 532], "315": [232, 532], "378": [232, 532], "1150": [232, 532], "2890": [232, 532], "172": [232, 532], "229": [232, 532], "487": [232, 532, 536, 560], "344": [232, 532], "355j": [233, 275, 304, 532], "55j": [233, 275, 304, 532], "That": [235, 309, 371, 532, 700, 716, 717, 720, 738, 745, 746, 747, 759], "primarili": [235, 532, 715, 723, 758], "reason": [235, 244, 532, 709, 715, 717, 719, 720, 723, 724, 725, 726, 727, 732, 735, 736, 738, 739, 741, 743, 745, 764], "counterpart": [236, 532, 723, 733], "deliber": [236, 532, 741], "imprecis": [236, 532], "5654": [236, 532], "034": [236, 532], "433": [236, 518, 520, 532, 535], "known": [237, 532, 687, 719, 724, 725, 736, 738], "signum": [237, 532], "x_": [237, 532], "operatornam": [237, 239, 532, 537, 570], "textrm": [237, 532], "932": [238, 532], "746": [238, 532], "443": [238, 532], "657": [238, 444, 532, 534], "indistinguish": [240, 532], "convent": [240, 532, 537, 547, 575, 657, 708, 721, 731, 739, 750, 764], "infti": [240, 532], "32455532": [240, 532], "89897949": [240, 532], "169": [240, 532], "analyt": [243, 532, 758, 760, 764], "math": [243, 532, 735, 736, 737, 748, 756], "pole": [243, 532], "546": [243, 532, 536, 560], "916": [243, 532, 538, 594], "996": [243, 532], "histor": [244, 532], "stem": [244, 532, 735], "older": [244, 532], "patch": [244, 532, 725, 758], "advis": [244, 532, 736], "462": [244, 532], "604": [244, 532], "984": [244, 532], "997": [244, 532], "0375": [246, 532], "032": [246, 532], "57258511": [248, 299], "69999999": [248, 299, 525, 535], "90928203": [248, 299], "98772264": [248, 299], "99591321": [248, 299], "99863964": [248, 299], "69880581": [248, 299], "18126924": [248, 299], "20141329": [250, 299], "40318608": [250, 299], "48683619": [250, 299], "46328247": [250, 299], "59813893": [250, 299], "43748799": [250, 299], "parametr": [251, 299, 719, 738, 758], "6705687": [253, 299], "52016652": [253, 299], "40560818": [253, 299], "45630932": [253, 299], "doubl": [254, 299], "2689": [255, 299], "7310": [255, 299], "7615": [255, 299], "2784": [255, 299], "7168": [255, 299], "8708": [255, 299], "4374": [255, 299], "1379": [255, 299], "0089": [255, 299], "taper": [257, 260, 301], "term": [257, 301, 309, 371, 536, 561, 688, 706, 708, 717, 723, 743, 753, 758], "summat": [257, 301, 547, 657, 700], "leakag": [257, 301], "slightli": [257, 301, 712, 723, 736, 738, 743, 747], "wors": [257, 301, 709], "y1": [258, 301], "0800": [259, 301], "3979": [259, 301], "9121": [259, 301], "5400": [259, 301], "han": [260, 301], "dens": [261, 301, 688, 706], "ith": [261, 301], "00726415": [262, 301], "9999736": [262, 301], "2773e": [263, 301], "0172e": [263, 301], "9294e": [263, 301], "4149": [263, 301], "9138": [263, 301], "5529": [263, 301], "multidimension": [264, 265, 301, 758], "orthogon": [266, 267, 301, 308, 355, 367, 370, 537, 569, 570], "normalise_factor": [266, 301], "cp": [266, 301, 717], "complementari": [272, 301, 756, 764], "38268346": [272, 301], "38268352": [272, 301], "8563191": [272, 301], "14943568": [272, 301], "much": [273, 286, 304, 687, 709, 715, 716, 717, 720, 723, 725, 732, 735, 736, 737, 739, 740, 741, 743, 745, 746, 756, 758, 764, 765], "arrrai": [275, 304], "position": [281, 304], "inexact": [281, 304], "triangl": [285, 304], "999999e": [286, 304], "65999985": [288, 304], "52000046": [288, 304], "1500001": [288, 304, 449, 534], "11259177": [289, 304], "3574118": [289, 304], "20097363": [289, 304], "Not": [291, 304, 308, 357, 527, 721, 729, 737, 746, 747, 751], "suppli": [293, 304, 310, 393, 700, 720, 722, 738], "217234": [294, 304], "hurwitz": [296, 304], "custom_grad_func": [298, 306], "bind": [298, 306, 715, 734, 757, 758], "upstream": [298, 306, 716, 717, 719, 734], "sequence_length": 299, "ndenumer": 301, "ndindex": 301, "random_cp": 301, "random_tuck": 301, "bind_custom_gradient_funct": [306, 734], "area_interpol": 307, "division_overrid": [307, 325], "avg": [307, 325, 327, 348], "dimensio": [307, 326], "tranform": [307, 328, 338], "01823380e": [307, 328, 338], "15385818e": [307, 328, 338], "36371466e": [307, 328, 338], "38763905e": [307, 328, 338], "60722279e": [307, 328, 338], "80319249e": [307, 328, 338], "05617893e": [307, 328, 338], "21500000e": [307, 328, 338], "24000015e": [307, 328, 338], "90734863e": [307, 328, 338], "10000420e": [307, 328, 338], "15899994e": [307, 328, 338], "24000053e": [307, 328, 338], "81469727e": [307, 328, 338], "09999847e": [307, 328, 338], "4135742": [307, 328, 338], "6779785": [307, 328, 338], "3770599": [307, 328, 338], "114": [307, 328, 338], "8719864": [307, 328, 338], "72109985": [307, 328, 338], "52869415": [307, 328, 338], "79182434": [307, 328, 338], "72489166": [307, 328, 338], "container_n": [307, 328, 338], "container_typ": [307, 328, 338, 534], "container_norm": [307, 328, 338], "1580677": [307, 328], "89422607": [307, 328], "86190414": [307, 328], "00041008": [307, 328], "75149155": [307, 328], "97056389": [307, 328], "87819386": [307, 328], "89381361": [307, 328], "50000000e": [307, 328, 338, 673], "22044605e": [307, 328, 338], "randomli": [307, 330, 331, 332, 536, 559, 673, 674, 675, 676, 680, 688], "ed": [307, 330, 331, 332], "rest": [307, 310, 330, 331, 332, 379, 716, 722, 724, 726, 738, 748, 760], "4d": [307, 331, 332], "5d": [307, 332, 688], "emb": [307, 333], "51285338": [307, 333], "87183261": [307, 333], "2308116": [307, 333], "02733949e": [307, 334], "00j": [307, 334], "49660576e": [307, 334], "68178638e": [307, 334], "01j": [307, 334, 339], "98912367e": [307, 334], "21802426e": [307, 334, 339], "04549134e": [307, 334, 339], "82842712e": [307, 334, 339], "86902654e": [307, 334, 339], "25501143e": [307, 334, 339], "32978028e": [307, 334, 339], "52068201e": [307, 334, 339], "71158374e": [307, 334, 339], "generate_einsum_equ": 307, "get_interpolate_kernel": 307, "27279224e": [307, 338], "44232273e": [307, 338], "70464332e": [307, 338], "73454881e": [307, 338], "00902849e": [307, 338], "10039906e": [307, 338], "07022366e": [307, 338], "69506073": [307, 338], "93914604": [307, 338], "88008881": [307, 338], "18951607": [307, 338], "57439613": [307, 338], "15318303e": [307, 339], "15148591e": [307, 339], "19j": [307, 339], "25000000e": [307, 339], "35378602e": [307, 339], "02j": [307, 339], "65404249e": [307, 339], "17611649e": [307, 339], "24320230e": [307, 339], "79344813e": [307, 339], "22374531e": [307, 339], "45929364e": [307, 339], "14208718e": [307, 339], "07177031e": [307, 339], "what": [307, 340, 350, 675, 706, 709, 710, 712, 717, 718, 723, 724, 727, 728, 730, 731, 733, 734, 735, 736, 737, 738, 742, 743, 745, 746, 747, 748, 750, 751, 754, 759, 760, 763], "indexerror": [307, 340, 350, 539, 600, 701, 729], "interp": [307, 741], "xp": [307, 341, 719], "fp": [307, 341], "nd": [307, 342], "bicubic_tensorflow": [307, 342, 741], "max_unpool1d": 307, "unpool": [307, 346], "pool_result": [307, 346], "unpool_result": [307, 346], "nearest_interpol": 307, "input_shap": [307, 347, 706], "window_shap": [307, 348], "pool_typ": [307, 348], "99038106j": [307, 350], "33012702": [307, 350], "23205081j": [307, 350], "33012702j": [307, 350], "superdiagon": [308, 353, 537, 567], "subdiagon": [308, 353, 537, 567], "eigendecomposit": [308, 355, 537, 569, 570], "qlq\u1d40": [308, 355, 537, 569, 570], "behav": [308, 355, 537, 569, 719, 729, 733, 735, 736, 737, 745, 759], "tridiagon": [308, 356], "38196602": [308, 356], "61803389": [308, 356], "35048741": [308, 356], "56710052": [308, 356], "06693714": [308, 356], "74234426": [308, 356], "56155282": [308, 356], "56155276": [308, 356], "82842714": [308, 356], "82842731": [308, 356], "necessarili": [308, 357, 720, 723], "random_st": [308, 358], "skip_matrix": [308, 359, 361], "seen": [308, 314, 359, 415, 697, 708, 709, 724, 725, 727, 729, 736, 738, 743, 745, 746, 764], "khatri_rao_product": [308, 359], "kronecker_product": [308, 361], "n_column": [308, 361], "nnmf": [308, 362], "hoi": [308, 367, 370], "determinist": [308, 368], "borrow": [308, 368, 718], "scikit": [308, 368, 709], "extmath": [308, 368], "py": [308, 368, 697, 706, 715, 716, 717, 719, 721, 724, 725, 726, 728, 729, 730, 731, 732, 736, 737, 738, 739, 743, 745, 747, 748], "log_poisson_loss": 309, "compute_full_loss": [309, 371, 689], "likelihood": [309, 371], "assumpt": [309, 371], "minu": [309, 371], "plai": [309, 371, 706, 716, 720, 736, 738, 748, 758, 761], "factori": [309, 371], "stirl": [309, 371], "favor": [309, 371], "28402555": [309, 371], "03402555": [309, 371], "1573164": [309, 371], "whilst": [310, 374, 375, 376, 748, 753, 758], "ary3": [310, 376], "tall": [310, 382], "horizot": [310, 389], "shortcut": [310, 393, 716], "linear_ramp": [310, 393], "reflect": [310, 393, 712, 717, 720, 735, 738], "ramp": [310, 393], "mirror": [310, 393, 715, 758], "signatur": [310, 319, 393, 427, 709, 725, 726, 727, 728, 731, 735, 738, 739, 741, 755, 764], "padding_func": [310, 393], "iaxis_pad_width": [310, 393], "iaxi": [310, 393], "style": [310, 393, 544, 645, 717, 730, 758], "unalt": [310, 393], "put_along_axi": 310, "put": [310, 398, 706, 715, 738, 751, 764], "soft": [310, 400, 726], "basic": [310, 400, 711, 715, 727, 738], "shrinkag": [310, 400], "elimin": [310, 404, 716], "consecut": [310, 404], "batch_mean": [313, 407, 409], "batch_var": [313, 407, 409], "running_vari": [313, 407, 409], "42857143": [313, 412], "5714286": [313, 412], "distrubut": [314, 413], "paramter": [314, 413], "multivari": [314, 415], "bayesian": [314, 415], "supposedli": [317, 419], "indirect": [317, 420], "secondari": [317, 420], "is_ivy_sparse_arrai": 318, "is_native_sparse_arrai": 318, "native_sparse_arrai": 318, "coo_indic": [318, 423], "crow_indic": [318, 423], "col_indic": [318, 423], "ccol_indic": [318, 423], "row_indic": [318, 423], "dense_shap": [318, 423], "native_sparse_array_to_indices_values_and_shap": 318, "nativesparsearrai": 318, "sparsearrai": 318, "linalg": [319, 427, 537, 583, 715, 735, 737], "66666667": [319, 427], "aw": [319, 427, 709], "48447205": [319, 427], "c0": [319, 430], "ck": [319, 430], "i1": [319, 430], "c2": [319, 430], "nanquantil": 319, "nearest_jax": [319, 436], "idx": [438, 534, 706, 726, 745], "inspect": [438, 534], "retriev": [438, 534, 717, 736], "compile_on_next_step": [439, 534, 689, 690, 692, 747], "decor": [442, 534, 673, 675, 680, 719, 720, 723, 725, 726, 732, 735, 736, 737, 741], "recalcul": [442, 534], "my_sum": [442, 534], "val1": [442, 534], "val2": [442, 534], "cached_sum": [442, 534], "line_eq": [442, 534], "slp": [442, 534], "itc": [442, 534], "cached_line_eq": [442, 534], "0353": [443, 534], "424": [443, 534], "58": [443, 534], "176": [443, 534], "339": [443, 534], "271": [443, 534], "168": [443, 534], "391": [443, 534], "417": [444, 534], "583": [444, 534], "0667": [444, 534], "267": [444, 534], "131": [444, 534], "263": [444, 534], "394": [444, 534, 543, 641], "526": [444, 534], "788": [444, 534], "public": [445, 534, 724, 734, 745, 761], "default_str": [447, 534], "46999979": [448, 534], "66000009": [448, 534], "93000001": [448, 534], "29000092": [448, 534], "33999991": [448, 534], "6400001": [448, 534], "96000004": [448, 534], "36000013": [448, 534], "51999998": [448, 534], "67000008": [448, 534], "30000001": [448, 534, 545, 648], "suppos": [448, 534, 725, 738], "960": [448, 534], "1280": [448, 534, 706], "3600": [448, 534], "bottom": [448, 534, 715, 716, 724, 764], "h1": [448, 534], "w1": [448, 534], "40499985": [449, 534], "61000061": [449, 534], "incas": [453, 454, 534, 674], "max_depth": [460, 534, 541, 628], "seen_set": [460, 534], "local_set": [460, 534], "thrown": [465, 534, 720, 726, 729, 730, 751], "ivyexcept": [465, 496, 534, 701, 726, 729, 733, 735, 736, 739], "allow_dupl": [475, 534], "best": [475, 534, 706, 711, 714, 715, 716, 717, 718, 724, 725, 729, 738, 739, 752, 761, 762], "o": [475, 534, 706, 716, 718, 724, 743, 752], "context": [476, 534, 716, 717, 721, 725, 726, 727], "fork": [476, 534, 711, 719, 724], "forkserv": [476, 534], "spawn": [476, 534], "consol": [478, 534, 717, 730, 738, 745], "garbag": [478, 534], "collector": [478, 534], "get_all_arrays_in_memori": [478, 534], "array_mod": [481, 503, 534, 740], "exept": [482, 534], "exception_trace_mod": [482, 504, 534, 740], "infus": [483, 534], "nestable_mod": [486, 507, 534, 740], "effeci": [487, 508, 534, 740], "wider": [487, 508, 534, 740, 764], "promtion": [487, 534], "precise_mod": [487, 508, 534, 740], "shape_array_mod": [489, 510, 534, 740], "show_func_wrapper_trace_mod": [490, 511, 534, 740], "tmp_dr": [491, 534], "temporari": [491, 512, 534, 715, 725, 740], "tmp_dir": [491, 512, 534, 740], "tmp": [491, 512, 534], "my_tmp": [491, 534], "49999999999975": [493, 534], "5015015015010504": [493, 534], "000444502911705e": [493, 534], "9999999999995j": [493, 534], "00000262": [494, 534], "15605032": [494, 534], "01208451j": [494, 534], "00048": [494, 534], "1296": [494, 534], "00864": [494, 534], "2048": [494, 534], "isn": [496, 534, 717, 733, 735, 746, 751, 760], "possibli": [498, 534, 738, 751], "100000023841858": [498, 534], "200000047683716": [498, 534], "299999952316284": [498, 534], "400000095367432": [498, 534], "599999904632568": [498, 534], "dictionai": [502, 534], "__name__": [502, 534, 706, 729], "hemant": [502, 534], "set_array_mod": [503, 534, 740], "unset_shape_array_mod": [503, 534], "previous": [504, 534, 697, 716, 721, 732, 734, 738, 743], "set_exception_trace_mod": [504, 534, 729], "set_min_bas": [505, 534], "set_min_denomin": [506, 534], "set_nestable_mod": [507, 534], "set_precise_mod": [508, 534], "set_queue_timeout": [509, 534], "set_shape_array_mod": [510, 534], "set_show_func_wrapper_trace_mod": [511, 534, 729], "set_tmp_dir": [512, 534], "my_dir": [512, 534], "451": [513, 534], "in_ax": [514, 534], "out_ax": [514, 534], "thereof": [514, 534], "fun": [514, 534, 541, 627, 724], "summaris": [514, 534], "grad": [515, 535, 692, 706, 734, 746, 747, 748], "99999998": [515, 535], "09999998": [515, 535], "19999998": [515, 535], "00000001": [515, 535], "00300001": [515, 535], "00800001": [515, 535], "0125": [515, 535], "17294501": [515, 535], "15770318": [515, 535], "20863818": [515, 535], "90000075": [516, 535], "90000164": [516, 535], "9000032": [516, 535], "50000012e": [516, 535], "92558754": [516, 535], "92558694": [516, 535], "92558682": [516, 535], "92558861": [516, 535], "60000025e": [516, 535], "01024": [516, 535], "retain_grad": [517, 535], "xs_grad_idx": [517, 535, 670, 734], "ret_grad_idx": [517, 535, 670, 734], "func_ret": [517, 535, 734], "666666": [517, 535], "333332": [517, 535], "66666675": [517, 525, 535], "argnum": [518, 535], "grad_fn": [518, 525, 535, 746], "933": [518, 520, 535], "jacobian": [520, 535, 751, 758], "jac_fn": [520, 535], "639": [521, 535], "361": [521, 535], "value_grad": [525, 535], "42333412": [525, 535], "5333333": [525, 535], "93333334": [525, 535], "43333334": [525, 535], "0666666": [525, 535], "718281828459045": 527, "euler": [527, 750], "141592653589793": 527, "newaxi": 527, "cast_bool": 528, "cmp_i": 528, "cmp_isnot": 528, "for_loop": 528, "if_els": 528, "try_except": 528, "while_loop": 528, "asarray_handle_nest": 529, "asarray_infer_devic": 529, "asarray_infer_dtyp": 529, "asarray_inputs_to_native_shap": 529, "asarray_to_native_arrays_and_back": 529, "as_ivy_dtyp": [530, 736], "as_native_dtyp": 530, "check_float": 530, "closest_valid_dtyp": 530, "default_dtyp": [530, 725, 732], "dtype_bit": 530, "function_supported_dtyp": [530, 725, 738], "function_unsupported_dtyp": [530, 725], "infer_default_dtyp": 530, "invalid_dtyp": [530, 725], "is_hashable_dtyp": 530, "is_native_dtyp": 530, "promote_typ": [530, 725], "promote_types_of_input": [530, 725, 735], "type_promote_arrai": [530, 725], "unset_default_complex_dtyp": 530, "unset_default_float_dtyp": 530, "unset_default_int_dtyp": 530, "unset_default_uint_dtyp": 530, "valid_dtyp": 530, "defaultcomplexdtyp": 530, "defaultdtyp": 530, "defaultfloatdtyp": 530, "defaultintdtyp": 530, "defaultuintdtyp": 530, "as_ivy_dev": [531, 745], "clear_cached_mem_on_dev": 531, "dev_util": [531, 726], "function_supported_devic": 531, "function_unsupported_devic": 531, "get_all_ivy_arrays_on_dev": [531, 726], "gpu_is_avail": [531, 706], "handle_soft_device_vari": [531, 726], "num_cpu_cor": [531, 726], "num_gpu": [531, 726, 738], "num_ivy_arrays_on_dev": 531, "percent_used_mem_on_dev": 531, "print_all_ivy_arrays_on_dev": 531, "set_split_factor": [531, 729], "split_func_cal": 531, "total_mem_on_dev": [531, 726], "tpu_is_avail": 531, "unset_default_devic": [531, 726], "unset_soft_device_mod": [531, 726], "used_mem_on_dev": 531, "defaultdevic": [531, 726], "profil": 531, "save_dir": 531, "arg_info": 534, "arg_nam": 534, "cache_fn": [534, 732], "current_backend_str": [534, 738, 743, 745], "function_supported_devices_and_dtyp": 534, "function_unsupported_devices_and_dtyp": 534, "get_item": [534, 735], "get_referrers_recurs": 534, "inplace_arrays_support": 534, "inplace_variables_support": 534, "is_ivy_nested_arrai": 534, "isscalar": 534, "match_kwarg": 534, "num_arrays_in_memori": 534, "print_all_arrays_in_memori": 534, "set_item": 534, "to_ivy_shap": 534, "to_native_shap": 534, "try_else_non": 534, "unset_array_mod": [534, 740], "unset_exception_trace_mod": 534, "unset_min_bas": 534, "unset_min_denomin": 534, "unset_nestable_mod": 534, "unset_precise_mod": 534, "unset_queue_timeout": 534, "unset_show_func_wrapper_trace_mod": 534, "unset_tmp_dir": 534, "vmap": [534, 751, 758], "arraymod": 534, "manag": [534, 706, 710, 711, 721, 725, 726, 735, 751, 760, 762], "precisemod": 534, "execute_with_gradi": [535, 706, 746, 747, 748, 751], "jac": 535, "value_and_grad": [535, 734], "conv": [536, 688, 741], "feature_group_count": [536, 549, 556, 557], "oiw": [536, 549, 550, 556], "oihw": [536, 549, 552, 556], "oidhw": [536, 549, 553, 554, 556], "dhwio": [536, 549, 550, 553, 554, 556], "258": [536, 551, 553, 555], "conv_general_dil": [536, 736], "conv_general_transpos": 536, "depthwis": [536, 558, 675, 688], "overfit": [536, 559], "1428566": [536, 559], "49000001": [536, 559], "55599999": [536, 559], "21000004": [536, 559], "incom": [536, 560], "666": [536, 537, 560, 576], "4269": [536, 560], "911": [536, 560, 729], "157": [536, 560], "753": [536, 560], "101": [536, 537, 541, 560, 573, 622], "545": [536, 543, 560, 639], "547": [536, 560, 726], "124": [536, 560], "852": [536, 560], "963": [536, 560], "98495483": [536, 560], "0293808": [536, 560], "0159359": [536, 560], "74752808": [536, 560], "20942307": [536, 560], "108": [536, 547, 560, 657], "3205719": [536, 560], "long": [536, 561, 716, 717, 724, 725, 727, 729, 736, 743, 758], "short": [536, 561, 717, 725, 743, 747], "unrol": [536, 561, 743, 746], "lstm": [536, 561, 688, 743, 758], "multi": [536, 537, 562, 565, 675, 688, 727, 742, 751, 754, 756, 758, 762], "head": [536, 562, 688, 706, 714, 716, 724, 736], "paper": [536, 562, 706, 710], "vaswani": [536, 562], "et": [536, 537, 562, 585], "al": [536, 562], "2017": [536, 562], "attend": [536, 562], "num_attention_head": [536, 562], "key_dim": [536, 562, 688], "value_dim": [536, 562, 688], "Then": [536, 562, 713, 715, 716, 717, 721, 722, 724, 730, 733, 735, 738, 739, 751], "query_dim": [536, 562], "measur": [536, 562, 688], "new_": [536, 562], "attention_weight": [536, 562], "alongsid": [536, 562, 709], "attenion_weight": [536, 562], "out_feat_dim": [536, 562], "23333359": [536, 563], "03946018": [536, 563], "0280633": [536, 563], "29981947": [536, 563], "29981089": [536, 563], "06345534": [536, 563], "9634552": [536, 563], "19336844": [536, 563], "09336829": [536, 563], "axisa": [537, 565], "axisb": [537, 565], "axisc": [537, 565], "293": [537, 566], "46997": [537, 566], "futur": [537, 570, 571, 706, 708, 710, 716, 717, 724, 725, 738, 739, 741, 745, 751, 764], "45033181e": [537, 571], "02829754e": [537, 571], "54220343e": [537, 571], "12647155e": [537, 571], "38447177e": [537, 571], "56155300e": [537, 571], "26794919": [537, 571], "7320509": [537, 571], "0012": [537, 573], "00342": [537, 573], "000565": [537, 573], "0104": [537, 573], "000981": [537, 573], "00282": [537, 573], "000766": [537, 573], "0322": [537, 573], "00237": [537, 573], "000151": [537, 573], "00101": [537, 573], "00019": [537, 573], "0214": [537, 573], "00171": [537, 573], "0107": [537, 573], "0167": [537, 573], "0472": [537, 573], "0536": [537, 573], "0177": [537, 573], "000429": [537, 573], "00762": [537, 573], "lu_factor": 537, "pivot": [537, 574], "lu": [537, 574], "frobeniu": [537, 576], "nuclear": [537, 576], "induc": [537, 576], "ranl": [537, 576], "47722558": [537, 576], "776": [537, 576], "6000004": [537, 576], "118": [537, 577], "moor": [537, 581], "penros": [537, 581], "deteremin": [537, 583], "logsabsdet": [537, 583], "although": [537, 583, 720, 723, 736, 741, 756, 758], "again": [537, 583, 709, 710, 717, 720, 721, 722, 723, 727, 729, 730, 735, 736, 738, 739, 741, 746, 748, 751, 763, 764], "subject": [537, 583], "solut": [537, 584, 706, 716, 717, 723, 725, 737, 738, 741, 756, 760], "ordin": [537, 584, 750], "usvh": [537, 585], "cetera": [537, 585], "86217213": [537, 586], "31816804": [537, 586], "615": [537, 586], "ss": [537, 586], "25994301": [537, 586], "16403675": [537, 586], "61529762": [537, 586], "51231241": [537, 586], "39777088": [537, 586], "15413129": [537, 586], "1029852": [537, 586], "01383495": [537, 586], "86647356": [537, 586], "7786541": [537, 586], "55970621": [537, 586], "16857576": [537, 586], "86412698": [537, 586], "37566757": [537, 586], "88477993": [537, 586], "95925522": [537, 586], "6444726": [537, 586], "54687881": [537, 586], "16134834": [537, 586], "35037804": [537, 586], "31025076": [537, 586], "35769391": [537, 586], "transposit": [537, 587], "success": [537, 547, 589, 661, 663, 709, 724], "0x": [537, 590], "Such": [537, 590, 732, 738], "progress": [537, 590, 716, 717, 748], "alexandr": [537, 590], "theophil": [537, 590], "9000001": [537, 592], "64158917": [537, 592], "skew": [537, 593], "6666193": [538, 594], "67164493e": [538, 594], "05471958e": [538, 594], "32684899e": [538, 594], "30496836e": [538, 594], "e501": [538, 594, 688], "05393649": [538, 594], "49992943": [538, 594], "83330965": [538, 594], "35667497": [538, 595], "35667494": [538, 596], "79329094": [538, 596], "512926": [538, 596], "outsid": [539, 597, 608, 726, 732, 745, 763], "honor": [539, 604], "beyond": [539, 605, 728, 736, 764], "famili": [539, 608], "intxx": [539, 608], "floatxx": [539, 608], "construct": [539, 610, 688, 691, 692, 693, 743, 747, 748, 756, 758, 765], "rep": [539, 610], "fomaml_step": 540, "inner_cost_fn": [540, 613, 614, 615], "outer_cost_fn": [540, 613, 614], "inner_grad_step": [540, 613, 614, 615], "inner_learning_r": [540, 613, 614, 615], "inner_optimization_step": [540, 613, 614, 615], "inner_batch_fn": [540, 613, 614], "outer_batch_fn": [540, 613, 614], "average_across_step": [540, 613, 614], "inner_v": [540, 613, 614], "keep_inner_v": [540, 613, 614], "outer_v": [540, 613, 614], "keep_outer_v": [540, 613, 614], "return_inner_v": [540, 613, 614, 615], "num_task": [540, 613, 614, 615], "maml": [540, 613, 614], "task": [540, 613, 614, 615, 706, 711, 717, 736, 737, 750, 758, 764, 765], "0x7f181d487430": [540, 613, 614, 615], "maml_step": 540, "vanilla": [540, 614, 747, 758], "recev": [540, 614], "reptile_step": 540, "cost_fn": [540, 615], "reptil": [540, 615], "_variabl": [540, 615], "batch_in": [540, 615], "latent": [540, 615], "4485182": [540, 615], "139": [540, 615], "9569855": [540, 615], "9880483": [540, 615], "01766968": [540, 615], "02197957": [540, 615], "02197981": [540, 615], "all_nested_indic": 541, "include_nest": [541, 616], "_index": [541, 616, 627], "_base": [541, 616, 626, 627, 735], "extra_nest_typ": [541, 616, 617, 626, 627, 628], "themselv": [541, 616, 723, 725, 726, 728, 732, 736, 747, 755, 764], "far": [541, 616, 627, 726, 727, 744, 763, 764], "copy_nest": 541, "to_mut": [541, 617, 628], "deepli": [541, 617, 751, 758], "mutabl": [541, 617, 623, 624, 628, 633, 634, 721], "copied_nest": [541, 617], "1337": [541, 617, 628], "duplicate_array_index_chain": 541, "index_nest": [541, 732], "insert_into_nest_at_index": 541, "insert_into_nest_at_indic": 541, "onto": [541, 622, 628, 707, 708, 758], "special_squar": [541, 622], "6666666666666667": [541, 622], "special_pow": [541, 622], "linear_model": [541, 622], "map_nest_at_index": 541, "shallow": [541, 623, 624, 628, 633, 634], "_result": [541, 623, 633], "placehold": [541, 623, 628, 633, 688, 717, 720, 731, 753], "hh": [541, 623, 628], "map_nest_at_indic": 541, "ub": [541, 624], "tb": [541, 624], "multi_index_nest": 541, "nested_ani": 541, "check_nest": [541, 626, 627], "conditon": [541, 626, 627], "nested_argwher": 541, "stop_after_n_found": [541, 627], "nested_indic": [541, 627], "nested_map": [541, 732], "_depth": [541, 628], "_tuple_check_fn": [541, 628], "_list_check_fn": [541, 628], "_dict_check_fn": [541, 628], "wherebi": [541, 628, 715, 755], "ah": [541, 628], "bh": [541, 628], "ch": [541, 628], "dh": [541, 628, 719], "eh": [541, 628], "gh": [541, 628, 716], "ih": [541, 628], "1338": [541, 628], "nested_multi_map": 541, "index_chain": [541, 629], "nest0": [541, 629], "ivy_arrai": [541, 629, 720, 736], "unappli": [541, 629], "prune_empti": 541, "prune_nest_at_index": 541, "prune_nest_at_indic": 541, "set_nest_at_index": 541, "set_nest_at_indic": 541, "111": [541, 634], "xyz": [541, 634], "pqr": [541, 634], "mini": [542, 635, 688, 691], "uniformli": [543, 637, 639], "22346112": [543, 638], "0922": [543, 638], "49671414": [543, 638], "1382643": [543, 638], "64768857": [543, 638], "5230298": [543, 638], "23415337": [543, 638], "23413695": [543, 638], "9213753": [543, 638], "12818667": [543, 638], "799": [543, 638], "469": [543, 638], "287": [543, 638], "0366": [543, 638], "26431865": [543, 639], "475": [543, 639], "878": [543, 639], "861": [543, 639], "929": [543, 639], "789": [543, 639], "519": [543, 639], "0435": [543, 639], "381": [543, 639], "4608004": [543, 639], "8458502": [543, 639], "67270088": [543, 639], "31128597": [543, 639], "zeroel": [544, 645], "major": [544, 645, 709, 725, 726, 737, 738, 751, 755, 758], "guarante": [545, 647, 649, 710, 720, 725, 735, 751], "aggreg": [545, 647, 724], "fourth": [545, 647], "1141": [545, 647], "8101": [545, 647], "9298": [545, 647], "8460": [545, 647], "2119": [545, 647], "3519": [545, 647], "6252": [545, 647], "4033": [545, 647], "7443": [545, 647], "2577": [545, 647], "3707": [545, 647], "0545": [545, 647], "3238": [545, 647], "5944": [545, 647], "0775": [545, 647], "4327": [545, 647], "62519997": [545, 647], "40329999": [545, 647], "59439999": [545, 647], "74430001": [545, 647], "81010002": [545, 647], "84600002": [545, 647], "92979997": [545, 647], "einstein": [547, 657, 700], "117": [547, 657], "sentinel": [547, 658, 660], "90000004": [547, 659], "intend": [547, 663, 671, 687, 719, 731, 734, 756, 758, 762, 763], "07472222": [547, 664], "00666667": [547, 664], "08966666": [547, 664], "simplicit": [548, 665, 666], "meta": [613, 614, 615, 720, 739, 758], "ivy_test": [668, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 715, 716, 717, 719, 722, 724, 737], "test_ivi": [668, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 715, 716, 717, 722, 724, 737, 738], "helper": [668, 670, 671, 678, 679, 706, 722, 725, 729, 746, 753], "assert_all_clos": [668, 737], "ret_np": [668, 670, 737], "ret_from_gt_np": [668, 737], "ground_truth_backend": [668, 670, 671, 679, 680, 737], "ground": [668, 670, 708, 736, 738], "mark": [668, 715, 717, 719, 738, 743], "fail": [668, 715, 716, 717, 719, 724, 725, 727, 730, 733, 735, 736, 737], "assert_same_type_and_shap": 668, "this_key_chain": 668, "check_unsupported_devic": 668, "input_devic": 668, "all_as_kwargs_np": [668, 670], "presenc": [668, 723, 735], "check_unsupported_device_and_dtyp": 668, "input_dtyp": [668, 670, 679, 737, 738], "check_unsupported_dtyp": 668, "test_unsupported_funct": 668, "value_test": 668, "ret_np_flat": 668, "ret_np_from_gt_flat": 668, "ret_from_np_gt_flat": 668, "function_test": 670, "args_to_contain": 670, "array_arg": [670, 732], "args_to_frontend": 670, "frontend_array_fn": 670, "arrays_to_frontend": 670, "as_list": 670, "compiled_if_requir": 670, "test_compil": [670, 679, 680], "convtru": 670, "nativeclass": 670, "counter": [670, 747], "create_args_kwarg": 670, "args_np": 670, "arg_np_val": 670, "args_idx": 670, "kwargs_np": 670, "kwarg_np_val": 670, "kwargs_idx": 670, "test_flag": [670, 737, 738], "on_devic": [670, 679, 737], "flatten_and_to_np": 670, "flatten_frontend": 670, "flatten_frontend_to_np": 670, "get_frontend_ret": 670, "frontend_fn": 670, "as_ivy_arrai": 670, "get_ret_and_flattened_np_arrai": 670, "backend_to_test": [670, 737], "gradient_incompatible_funct": 670, "gradient_test": [670, 738], "rtol_": 670, "atol_": [670, 737], "gradient_unsupported_dtyp": 670, "kwargs_to_args_n_kwarg": 670, "num_positional_arg": [670, 679, 680, 737, 738], "port": [670, 710], "test_frontend_funct": [670, 737], "fn_tree": [670, 671, 680, 736, 737, 738], "test_valu": [670, 737, 738], "all_alias": [670, 737], "alias": [670, 680, 715, 736, 737], "namespac": [670, 715, 725, 733, 736, 737, 739, 743, 748], "test_frontend_method": [670, 737], "init_input_dtyp": [670, 737], "method_input_dtyp": [670, 737], "init_flag": [670, 737, 738], "method_flag": [670, 679, 737, 738], "init_all_as_kwargs_np": [670, 737], "method_all_as_kwargs_np": [670, 737], "frontend_method_data": [670, 737], "consum": [670, 723, 724, 731, 737, 738], "init_as_variable_flag": [670, 680], "dictat": [670, 720, 727, 731, 735], "init_num_positional_arg": [670, 680], "init_native_array_flag": 670, "with_v": 670, "ret_gt": 670, "test_funct": [670, 716, 717, 724, 737, 738], "fn_name": [670, 671, 680, 721, 737, 738], "return_flat_np_arrai": 670, "functiontestflag": [670, 679], "with_out": [670, 679, 737, 738], "instance_method": [670, 679, 738], "as_vari": [670, 679, 737, 738], "as_variable_flag": [670, 680, 738], "native_array_flag": [670, 680, 738], "container_flag": [670, 679, 680, 738], "test_method": 670, "class_nam": 670, "method_nam": [670, 678, 680, 737], "init_with_v": 670, "method_with_v": 670, "test_gradi": [670, 679, 680, 738], "method_as_variable_flag": [670, 680], "method_num_positional_arg": [670, 680], "method_native_array_flag": 670, "method_container_flag": [670, 680], "tthe": 670, "wrap_frontend_function_arg": 670, "holder": 671, "current_frontend_config": 671, "0x7f181235ded0": 671, "interruptedtest": 671, "test_interrup": 671, "baseexcept": 671, "tri": [671, 725], "testdata": 671, "supported_device_dtyp": 671, "is_method": 671, "setup_api_test": 671, "test_data": 671, "setup_frontend_test": 671, "teardown_api_test": 671, "teardown_frontend_test": 671, "hypothesis_help": [673, 674, 675, 676], "array_help": 673, "array_and_broadcastable_shap": 673, "searchstrategi": [673, 674, 675, 676, 679, 680, 738], "array_bool": [673, 738], "min_valu": [673, 674, 675, 676, 737, 738], "max_valu": [673, 674, 675, 676, 737, 738], "strategi": [673, 674, 675, 676, 680, 715, 737], "array_indices_axi": 673, "array_dtyp": [673, 674, 738], "indices_dtyp": 673, "get_dtyp": [673, 674, 737, 738], "disable_random_axi": 673, "axis_zero": 673, "allow_inf": [673, 676, 737, 738], "min_num_dim": [673, 675, 737, 738], "max_num_dim": [673, 675, 737, 738], "min_dim_s": [673, 675, 737, 738], "max_dim_s": [673, 675, 737], "first_dimension_onli": 673, "indices_same_dim": 673, "valid_bound": 673, "hypothesi": [673, 675, 680, 715, 717, 719, 724, 733], "65536": 673, "44758124e": [673, 738], "array_indices_put_along_axi": 673, "values_dtyp": 673, "array_valu": [673, 738], "abs_smallest_v": [673, 675, 676], "allow_nan": [673, 676, 738], "allow_subnorm": [673, 676, 738], "exclude_min": [673, 676, 738], "exclude_max": [673, 676], "large_abs_safety_factor": [673, 675, 676, 737, 738], "small_abs_safety_factor": [673, 675, 676, 737], "safety_factor_scal": [673, 675, 676, 737, 738], "subnorm": [673, 676], "safeti": [673, 675, 676, 758], "0002": [673, 676], "get_shap": [673, 675, 737, 738], "1806": 673, "36912": 673, "6955": 673, "59576": 673, "1025": 673, "arrays_and_ax": 673, "available_dtyp": [673, 674, 737, 738], "allow_non": [673, 675, 737, 738], "return_dtyp": 673, "force_int_axi": 673, "26e": 673, "10e": 673, "24322108": 673, "26446279e": 673, "96046448e": 673, "008": 673, "17549435e": 673, "038": 673, "06541027e": 673, "13725760e": 673, "07143888": 673, "arrays_for_pool": 673, "min_dim": 673, "max_dim": 673, "min_sid": 673, "max_sid": 673, "explicit_or_str_pad": 673, "only_explicit_pad": 673, "return_dil": 673, "mixed_fn_compo": [673, 674, 675, 676, 738], "return_data_format": 673, "cond_data_gen_help": 673, "create_nested_input": 673, "leaf_valu": 673, "dtype_and_valu": [673, 737, 738], "num_arrai": [673, 674, 737, 738], "shared_dtyp": [673, 674, 737], "ret_shap": 673, "array_api_dtyp": [673, 674], "shape_kei": 673, "37915": 673, "6322": 673, "26765": 673, "12413": 673, "26986": 673, "34665": 673, "000e": 673, "711e": 673, "100e": 673, "955e": [673, 738], "40817": 673, "56193": 673, "29200": 673, "5851": 673, "9746": 673, "9604645e": 673, "192": [673, 700], "103": 673, "41795": 673, "1170789994": 673, "44251": 673, "44209": 673, "433075925": 673, "24791": 673, "24691": 673, "24892": 673, "16711": 673, "972": 673, "15357": 673, "72057594037927936": 673, "dtype_array_queri": 673, "allow_mask": 673, "allow_neg_step": 673, "dtype_array_query_v": 673, "dtype_values_axi": [673, 738], "min_axi": 673, "max_axi": 673, "valid_axi": 673, "allow_neg_ax": 673, "min_axes_s": 673, "max_axes_s": 673, "force_tuple_axi": 673, "29788": 673, "62222885e": 673, "68281172e": 673, "257j": 673, "40129846e": 673, "90000000e": 673, "63426649e": 673, "91931887e": 673, "29488e": 673, "14361019e": 673, "12445": 673, "einsum_help": 673, "get_first_solve_matrix": 673, "get_second_solve_matrix": 673, "list_of_s": 673, "st": [673, 719, 737, 738], "sampled_from": [673, 737, 738], "min_siz": [673, 675, 680, 738], "max_siz": [673, 675, 680, 738], "size_bound": [673, 738], "999999999999999": 673, "9394938006792373": 673, "mutually_broadcastable_shap": 673, "num_shap": 673, "base_shap": 673, "dtype_help": 674, "univers": [674, 708, 736], "get_castable_dtyp": 674, "castabl": 674, "prune_funct": 674, "intersect": [674, 724, 738, 750], "signed_integ": 674, "real_and_complex": 674, "float_and_complex": 674, "general_help": 675, "apply_safety_factor": 675, "embedding_help": 675, "get_axi": [675, 738], "allow_neg": 675, "sort_valu": 675, "force_tupl": 675, "force_int": 675, "assertionerror": [675, 719, 729, 737, 738], "get_bound": [675, 738], "get_mean_std": 675, "matrix_is_st": 675, "cond_limit": 675, "instabl": [675, 725], "computation": [675, 716], "heavi": [675, 716, 736, 737, 741, 759], "prone": 675, "thumb": 675, "But": [675, 723, 724, 728, 730, 733, 741, 748], "perfectli": [675, 710], "gradual": 675, "strong": [675, 709, 751, 758], "collinear": 675, "reshape_shap": [675, 738], "subset": [675, 720, 724, 728, 731, 734, 736, 738, 743, 758], "x_and_filt": 675, "number_help": 676, "arbitrarili": [676, 746], "safety_factor": 676, "pipeline_help": 677, "backendhandl": 677, "update_backend": [677, 737], "backendhandlermod": 677, "enum": 677, "enumer": [677, 686, 706], "setbackend": 677, "withbackend": 677, "withbackendcontext": 677, "get_frontend_config": 677, "frontendmethoddata": 678, "ivy_init_modul": 678, "framework_init_modul": 678, "init_nam": 678, "test_parameter_flag": 679, "frontendfunctiontestflag": 679, "generate_frontend_arrai": [679, 680], "testflag": 679, "apply_flag": 679, "args_to_iter": 679, "frontendmethodtestflag": 679, "initmethodtestflag": 679, "methodtestflag": 679, "build_flag": 679, "frontend_function_flag": 679, "frontend_method_flag": 679, "function_flag": 679, "init_method_flag": 679, "testing_help": 680, "handle_frontend_method": [680, 737, 738], "class_tre": [680, 737], "init_tre": [680, 737], "init_native_arrai": 680, "_as_varaible_strategi": 680, "method_native_arrai": 680, "_given_kwarg": 680, "wrapper": [680, 720, 722, 723, 725, 729, 732, 735, 736, 745, 753, 754, 758], "handle_frontend_test": [680, 737, 738], "number_positional_arg": [680, 737], "test_with_out": [680, 737, 738], "test_inplac": [680, 738], "handle_method": [680, 738], "method_tre": [680, 737, 738], "_gradient_strategi": 680, "_compile_strategi": 680, "handle_test": [680, 738], "test_instance_method": [680, 738], "num_positional_args_method": 680, "geglu": 684, "leakyrelu": 684, "logsoftmax": 684, "moduleconvert": [685, 690], "from_flax_modul": 685, "native_modul": 685, "params_fx": 685, "rng_seed": 685, "constructor_arg": 685, "constructor_kwarg": 685, "instance_arg": 685, "instance_kwarg": 685, "flax": [685, 710, 748, 751, 758], "from_haiku_modul": 685, "params_hk": 685, "from_keras_modul": 685, "from_paddle_modul": 685, "paddl": [685, 697, 715, 716], "from_torch_modul": 685, "dedic": [685, 731, 741, 745, 747], "to_ivy_modul": [685, 748], "native_module_class": 685, "modulehelp": [686, 690], "check_submod_ret": 686, "expected_submod_ret": [686, 690], "get_mod_kei": 686, "top_mod": 686, "explicit": [686, 716, 723, 725, 734, 735, 736, 737, 743, 751, 758], "mod_depth": 686, "mod_height": 686, "mod_with_top_mod_key_chain": 686, "flatten_key_chain": 686, "iimedi": 686, "parent": [686, 715, 724, 745], "show_mod_in_top_mod": 686, "upper_depth": 686, "lower_depth": 686, "coverag": [686, 725, 738], "prompt": [686, 715, 717], "show_structur": 686, "this_repr": 686, "show_v_in_top_v": 686, "perspect": 686, "top_v": 686, "sub_mod": 686, "show_v": 686, "comopos": 686, "track_submod_call_ord": [686, 690], "track_submod_ret": [686, 690], "v_with_top_v_key_chain": 686, "create_vari": [687, 747], "var_shap": [687, 747], "fan_out": [687, 747], "fan_in": [687, 747], "rectangular": 687, "firstlayersiren": 687, "siren": 687, "distribt": 687, "glorotuniform": [687, 688, 747], "glorot": 687, "xavier": 687, "neuron": 687, "w_1x_1": 687, "w_2x_2": 687, "w_nx_n": 687, "w_i": 687, "vanish": 687, "explod": [687, 707, 708], "big": [687, 711, 751, 758], "pick": 687, "abstract": [687, 692, 708, 723, 725, 735, 736, 738, 741, 747, 751, 756, 758, 760, 761, 765], "kaimingnorm": 687, "fan_mod": [687, 747], "kaim": 687, "he": 687, "center": 687, "negative_slop": 687, "fan": 687, "propog": 687, "fan_sum": [687, 747], "proport": 687, "Ones": 687, "randomnorm": 687, "stddev": 687, "w0": 687, "gain": [687, 717, 719, 742, 747, 758], "wlim": 687, "predefin": 687, "initialz": 687, "fan_avg": 687, "adaptiveavgpool1d": 688, "adaptiveavgpool2d": 688, "avgpool1d": 688, "implicit": [688, 723, 728, 736, 738, 743, 758], "avgpool2d": 688, "avgpool3d": 688, "input_channel": [688, 706, 743, 747], "output_channel": [688, 706, 747], "filter_s": 688, "weight_initi": [688, 747], "bias_initi": [688, 747], "conv1dtranspos": 688, "filter_shap": 688, "conv2dtranspos": 688, "conv3dtranspos": 688, "depthwiseconv2d": 688, "num_channel": 688, "bernoul": 688, "num_embed": 688, "embedding_dim": 688, "padding_idx": 688, "lookup": 688, "num_embeddingss": 688, "whenev": [688, 717, 721, 724, 725, 729, 735, 738, 740, 746], "encount": [688, 715, 725, 729, 738], "renorm": 688, "insensit": 688, "num_lay": 688, "return_sequ": 688, "return_st": 688, "get_initial_st": 688, "connect": [688, 709, 716, 747, 748, 756], "maxpool1d": 688, "maxpool2d": [688, 706], "maxpool3d": 688, "multiheadattent": 688, "embed_dim": 688, "head_dim": 688, "dropout_r": 688, "use_proj_bia": 688, "attention_ax": 688, "build_mod": [688, 689, 690], "on_init": [688, 690], "parallel": [688, 722, 758, 762, 763], "binarycrossentropyloss": 689, "store_var": [689, 690], "fallback_to_non_compil": [689, 690, 692], "fall": [689, 690, 692, 715, 725, 742], "with_partial_v": [689, 690], "crossentropyloss": 689, "logpoissonloss": 689, "modulemeta": 690, "submod_depth": 690, "submods_to_track": 690, "varibl": 690, "temporarili": [690, 719], "from_cal": 690, "trigger": [690, 715, 730], "successfulli": [690, 716, 720], "built_": 690, "compile_kwarg": 690, "_unified_ivy_graph": 690, "_call": 690, "register_buff": 690, "var_nam": 690, "save_weight": 690, "weights_path": 690, "show_graph": 690, "randomness_factor": 690, "save_to_disk": 690, "notebook": 690, "with_edge_label": 690, "with_arg_label": 690, "with_output_label": 690, "output_connected_onli": 690, "highlight_subgraph": 690, "fname": [690, 746], "batchnorm2d": 691, "num_featur": 691, "affin": 691, "track_running_stat": 691, "trail": 691, "layernorm": 691, "normalized_shap": 691, "elementwise_affin": 691, "set_stat": [692, 747], "init_on_first_step": 692, "ignore_miss": 692, "privat": [692, 736, 738], "_step": [692, 747], "sgd": [692, 758], "stochast": [692, 758], "sub_modul": 693, "check_al": 694, "messag": [694, 701, 705, 709, 716, 717, 724, 727, 729, 730, 736, 743, 745], "check_all_or_any_fn": 694, "check_ani": 694, "check_dev_correct_format": 694, "check_dimens": 694, "check_elem_in_list": [694, 732, 735, 736], "elem": 694, "check_equ": [694, 736], "check_exist": 694, "check_fals": 694, "check_fill_value_and_dtype_are_compat": [694, 739], "check_gather_input_valid": 694, "check_gather_nd_input_valid": 694, "check_great": 694, "allow_equ": [694, 729], "check_inplace_sizes_valid": [694, 735], "check_isinst": 694, "allowed_typ": 694, "check_kernel_padding_s": 694, "padding_s": 694, "check_less": [694, 729], "check_one_way_broadcast": 694, "check_same_dtyp": 694, "check_shapes_broadcast": 694, "check_tru": 694, "check_unsorted_segment_min_valid_param": 694, "ast_help": 696, "importtransform": 696, "nodetransform": 696, "impersonate_import": 696, "tree": [696, 712, 725], "local_ivy_id": 696, "visit_import": 696, "visit_importfrom": 696, "ivyload": 696, "loader": [696, 706, 746, 751], "exec_modul": 696, "ivypathfind": 696, "metapathfind": 696, "find_spec": 696, "fullnam": 696, "contextmanag": 697, "choose_random_backend": 697, "convert_from_numpy_to_target_backend": 697, "variable_id": 697, "numpy_obj": 697, "convert_from_source_backend_to_numpi": 697, "current_backend": [697, 715, 729, 732, 737, 739, 743], "global_backend": 697, "fn_name_from_version_specific_fn_nam": 697, "prevent_access_loc": 697, "previous_backend": [697, 721], "unset": [697, 721, 743], "op": [697, 739, 743, 751], "eagertensor": [697, 737], "subsequ": [697, 716, 720, 724, 725, 727, 731, 732, 735, 738, 747, 759], "Or": [697, 706, 713, 735, 746], "jaxlib": [697, 716, 720, 725, 726, 731, 739, 743, 745], "xla_extens": [697, 720, 725, 726, 731, 739, 743, 745], "arrayimpl": 697, "set_backend_to_specific_vers": 697, "set_jax_backend": 697, "set_mxnet_backend": 697, "mxnet": [697, 709, 715, 716, 765], "mx": 697, "set_numpy_backend": 697, "set_paddle_backend": 697, "set_tensorflow_backend": 697, "set_torch_backend": 697, "unset_backend": [697, 721], "with_backend": 697, "sub_backend_handl": 698, "available_sub_backend": 698, "clear_sub_backend": 698, "find_available_sub_backend": 698, "sub_backends_loc": 698, "set_sub_backend": 698, "sub_backend_str": 698, "unset_sub_backend": 698, "dynamic_import": 699, "import_modul": [699, 743], "packag": [699, 706, 712, 716, 724, 736, 751, 752, 758, 760], "einsum_pars": 700, "convert_interleaved_input": 700, "interleav": 700, "convert_subscript": 700, "old_sub": 700, "symbol_map": 700, "subscript": 700, "oe": 700, "ellipsi": 700, "find_output_shap": 700, "find_output_str": 700, "canon": 700, "gen_unused_symbol": 700, "symbol": [700, 715, 716, 758, 759], "abd": 700, "get_symbol": 700, "letter": 700, "resort": 700, "unicod": 700, "charact": [700, 709, 736], "chr": 700, "surrog": 700, "\u0155": 700, "20000": 700, "\u4eac": 700, "has_valid_einsum_chars_onli": 700, "einsum_str": 700, "abaz": 700, "\u00f6ver": 700, "is_valid_einsum_char": 700, "\u01f5": 700, "legalise_einsum_expr": 700, "reproduct": 700, "pars": [700, 722, 727, 751], "intak": 700, "contract_path": 700, "parse_einsum_input": 700, "einsum_eqn": 700, "legalis": 700, "legalise_einsum_eqn": 700, "za": 700, "xza": 700, "xz": 700, "possibly_convert_to_numpi": 700, "thing": [700, 708, 709, 710, 714, 715, 716, 717, 721, 736, 738, 741, 745, 746, 758], "everyth": [700, 706, 710, 715, 716, 717, 718, 724, 727, 735, 736, 737, 738, 744, 751, 752], "myshap": 700, "__main__": 700, "0x10f850710": 700, "invalidbackendexcept": 701, "include_backend": [701, 729], "ivyattributeerror": [701, 729], "attributeerror": [701, 729, 745], "ivybroadcastshapeerror": [701, 729], "ivydeviceerror": 701, "ivydtypepromotionerror": [701, 729], "ivyerror": [701, 706, 729], "ivyindexerror": [701, 729], "ivynotimplementedexcept": [701, 729], "notimplementederror": 701, "ivyvalueerror": [701, 729], "handle_except": [701, 731, 733], "add_array_spec": 702, "fn_array_spec": 702, "set_logging_mod": 703, "debug": [703, 716, 717, 723, 724, 734, 738, 741, 746, 758], "info": [703, 706, 722, 728, 730], "unset_logging_mod": 703, "recent": [703, 708, 709, 716, 717, 738], "print_stat": 704, "viz": 704, "visual": [704, 706, 716, 736, 738, 751, 758, 760, 763], "snakeviz": 704, "bonu": 704, "cprofil": 704, "cprint": [705, 743], "straight": [706, 724, 736, 738, 745], "awai": [706, 756, 758], "dive": [706, 711, 713, 714, 715, 717, 719, 723, 725, 730, 737, 742, 745, 746, 751, 764], "grow": [706, 758], "guid": [706, 711, 715, 716, 717, 722, 730, 736, 764], "own": [706, 709, 710, 716, 719, 724, 725, 728, 729, 735, 736, 739, 743, 751, 753, 754, 757, 758, 763, 764], "variou": [706, 717, 719, 724, 725, 728, 729, 731, 733, 734, 736, 737, 738, 750, 752, 753, 754, 756, 757, 758, 761, 764], "perk": [706, 720, 723], "essenti": [706, 708, 709, 715, 721, 723, 726, 727, 732, 735, 736, 737, 764], "mainli": [706, 715, 718, 734, 736, 738, 744, 746, 753, 758], "handler": [706, 742, 744, 748, 753], "behind": [706, 718, 731, 738, 742, 744], "scene": [706, 707, 708, 718, 742, 744, 758], "facilit": 706, "agnost": [706, 720, 731, 743, 745, 748, 751, 764, 765], "mse_loss": 706, "jax_ms": 706, "tf_mse": 706, "np_mse": 706, "torch_ms": 706, "regressor": 706, "input_dim": 706, "output_dim": 706, "_build": 706, "linear0": [706, 746, 747], "linear1": [706, 746, 747], "_forward": [706, 728, 743, 746, 747], "easili": [706, 709, 716, 720, 724, 736, 741, 746, 747, 748, 751, 758, 764, 765], "favorit": 706, "n_training_exampl": 706, "loss_fn": [706, 746, 747, 748], "epoch": 706, "5f": 706, "finish": [706, 711, 715, 716, 718], "usabl": [706, 731, 739], "topic": [706, 733, 745, 758], "mechan": [706, 724, 749, 751], "vision": [706, 712, 749, 754, 764], "robot": [706, 749], "reinforc": [706, 750], "gym": 706, "builder": [706, 713, 749, 751, 753], "trainer": [706, 710, 749, 751, 765], "break": [706, 721, 725, 731, 739, 751], "highli": [706, 758], "flexibl": [706, 723, 725, 731, 734, 739, 741, 758], "everyon": [706, 710, 711, 715, 716, 717, 751], "plan": [706, 750, 752], "interoper": [706, 709, 755, 756, 758, 761], "easiest": [706, 713, 716, 752], "command": [706, 713, 716, 719, 722, 724, 730, 752], "python3": [706, 712, 716, 717], "pre": [706, 712, 715, 738, 748, 751, 752, 758], "pull": [706, 710, 711, 712, 715, 716, 719, 727, 730, 739, 741, 751, 752], "unifyai": [706, 712, 713, 716, 717, 722, 752], "sweat_smil": 706, "git": [706, 712, 713, 714, 716, 717, 719, 722, 724, 730, 738, 752], "clone": [706, 712, 713, 717, 752], "com": [706, 712, 713, 716, 719, 722, 724, 725, 752], "cd": [706, 712, 713, 716, 717, 752], "page": [706, 715, 716, 717, 722, 724, 744, 745, 748, 749, 752], "instruct": [706, 715, 716, 719, 729, 730, 737, 738, 752, 756, 759, 762, 764], "video": [706, 711, 716, 717, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 752, 756], "tutori": [706, 717, 736, 752], "quit": [706, 717, 720, 727, 728, 732, 733, 738, 741, 758, 764], "lot": [706, 709, 710, 724, 725, 733, 738, 751, 757], "jax_fn": 706, "jax_x": 706, "torch_x": 706, "torch_fn": 706, "focus": [706, 739, 750, 756, 757, 758, 764, 765], "architectur": [706, 716, 748, 751, 756, 757, 758, 761, 762, 763], "orient": [706, 750], "contributor": [706, 711, 715, 716, 717, 736, 742, 758], "nuanc": 706, "background": [706, 716, 722, 758, 760], "contextualis": 706, "problem": [706, 709, 717, 719, 720, 721, 726, 736, 745, 754, 760, 764], "explos": [706, 707, 709], "why": [706, 707, 709, 717, 735, 745], "adher": [706, 708, 709, 719, 725, 728, 731, 741, 743, 748, 754, 755, 764], "lastli": [706, 720], "paint": [706, 708, 743], "pictur": [706, 708, 715, 743], "role": [706, 717, 736, 744, 759, 761, 765], "wide": [706, 717, 738, 756, 758], "demo": [706, 712, 750], "showcas": [706, 750], "shorter": [706, 745], "ensp": 706, "eff_encod": 706, "efficientnet_v2": 706, "efficientnetv2b0": 706, "include_top": 706, "imagenet": 706, "torch_eff_encod": 706, "customiz": [706, 722], "script": [706, 712, 716, 717, 724, 727, 743, 751, 758], "deepmind_perceiver_io": 706, "perceiver_backbon": 706, "dummy_input": 706, "backbon": [706, 743, 746], "perceiverioclassifi": 706, "max_pool": 706, "1024": 706, "sm_framework": 706, "segmentation_model": 706, "sm": 706, "torch_sm": 706, "metric": [706, 751], "iou_scor": 706, "rax": 706, "torch_rax": 706, "poly1_softmax_loss": 706, "madmom": 706, "madmon": 706, "torch_madmom": 706, "freq": 706, "audio": 706, "hz2midi": 706, "reduce_mean": [706, 746, 747, 748], "torch_loss": 706, "output_dens": 706, "maxpooling1d": 706, "pool_siz": 706, "tf_kornia": 706, "sharp": 706, "tf_rax": 706, "tf_madmom": 706, "tf_loss": 706, "hk_eff_encod": 706, "dummy_x": 706, "jax_sm": 706, "jax_madmom": 706, "jax_loss": 706, "jax_enable_x64": 706, "np_kornia": 706, "np_sm": 706, "np_rax": 706, "np_loss": 706, "yourself": [706, 715, 717, 730, 738, 741, 750], "anyon": [706, 709, 711, 717, 724, 751, 764], "classif": [706, 758], "ivynet": 706, "h_w": 706, "extractor": 706, "image_height": 706, "image_width": 706, "favourit": [706, 716], "pure": [706, 728, 731, 736, 741, 745, 748, 751, 758, 764, 765], "generate_batch": 706, "dataset_s": 706, "y_train": 706, "num_correct": 706, "y_pred": 706, "hyperparam": 706, "num_epoch": 706, "model_nam": 706, "epoch_loss": 706, "running_loss": 706, "training_accuraci": 706, "train_loss": 706, "train_correct": 706, "train_loop": 706, "tqdm": 706, "xbatch": 706, "ybatch": 706, "ybatch_encod": 706, "loss_prob": 706, "batch_loss": 706, "set_descript": 706, "set_postfix": 706, "accuracy_percentag": 706, "naverag": 706, "6f": 706, "plot": [706, 758], "_train_summari": 706, "csv": 706, "writer": 706, "writerow": 706, "prepar": [706, 724], "folder": [706, 712, 716, 717, 719, 722, 724, 732, 736, 738, 739, 740], "believ": [706, 709, 717], "feedback": [706, 724], "welcom": [706, 711, 716, 717], "appreci": 706, "amaz": 706, "acceler": [706, 736, 756, 760, 761, 762, 763], "journei": [706, 711], "achiev": [706, 724, 725, 732, 733, 738, 741, 746, 748, 753], "ambiti": 706, "season": 706, "perfect": [706, 750], "idea": [706, 710, 712, 715, 739, 744, 750, 757], "fellow": 706, "twitter": 706, "sneak": 706, "peek": 706, "certainli": [706, 709, 764], "great": [706, 709, 710, 717, 738, 743, 745, 764], "stai": [706, 724], "credit": 706, "accompani": 706, "articl": [706, 730], "lenton2021ivi": 706, "titl": [706, 715, 717, 722], "templat": [706, 722, 728, 738], "inter": [706, 737], "author": [706, 715, 717, 756, 760], "lenton": 706, "daniel": 706, "pardo": 706, "fabio": 706, "falck": 706, "fabian": 706, "jame": 706, "stephen": 706, "clark": 706, "ronald": 706, "journal": 706, "arxiv": 706, "preprint": 706, "2102": 706, "02886": 706, "year": [706, 708, 710, 719, 751, 758], "huge": [707, 709, 724, 746, 758, 764], "collabor": [707, 708, 709], "consortium": [707, 709], "grown": 708, "consider": [708, 715, 727, 731, 741, 755, 756], "especi": [708, 716, 721, 758], "rapidli": 708, "repo": [708, 712, 714, 717, 719, 722, 724, 725, 737, 738], "wonder": [708, 710, 745], "evolv": [708, 758], "shareabl": 708, "hinder": [708, 731], "outdat": 708, "matter": [708, 727], "month": [708, 716], "rigor": [708, 738], "newest": 708, "softwar": [708, 709, 716, 717, 756, 761, 762, 763], "rapid": [708, 709, 716, 758], "prototyp": [708, 758], "vital": [708, 748], "signific": [708, 709, 740, 751, 758], "bottleneck": 708, "quickli": [708, 710, 716, 717, 724, 746, 747, 758, 765], "obsolet": [708, 710], "constantli": [708, 741], "invent": 708, "wheel": 708, "simultan": [708, 710], "modern": [708, 709, 734, 763], "scalabl": [708, 743, 763, 764], "languag": [708, 710, 736, 743, 753, 756, 759, 761, 762, 763, 764], "front": [708, 736, 742, 743, 746, 756, 758], "runner": 708, "littl": [708, 745, 760], "principl": [708, 756, 758, 761], "almost": [708, 714, 723, 737, 744, 746], "syntax": [708, 709, 725, 758], "unsurprisingli": [708, 727], "fundament": [708, 724, 736, 741, 743, 758], "2006": 708, "cloth": 708, "central": [709, 715, 730, 741, 764], "forgiven": 709, "eyebrow": 709, "somehow": 709, "industri": [709, 758, 760], "funni": 709, "comic": 709, "strip": 709, "easi": [709, 716, 717, 720, 721, 723, 732, 734, 737, 738, 741, 756, 758, 764, 765], "charger": 709, "instant": 709, "mandat": [709, 725, 735, 738, 739], "adopt": [709, 717, 720, 731, 741, 757, 758, 763], "despit": [709, 723, 725, 726, 737, 743, 755, 758], "bring": [709, 719, 738, 743, 744, 753], "benefit": [709, 710, 716, 720, 723, 735, 741, 745, 746, 751, 756, 760, 763], "unrel": [709, 717], "contrari": 709, "bumpi": 709, "road": 709, "allud": [709, 746], "technologi": [709, 756, 760], "thank": [709, 746], "bio": [709, 716], "pcie": 709, "motherboard": 709, "raid": 709, "storag": [709, 746], "virtual": [709, 712, 717, 736, 761, 762], "bluetooth": 709, "wireless": 709, "exchang": [709, 714, 754, 756], "btx": 709, "sata": 709, "host": [709, 713, 724, 751, 763], "websit": [709, 716, 719], "tcp": 709, "ip": 709, "commun": [709, 711, 715, 716, 717, 751, 757, 758, 760], "smtp": 709, "send": [709, 763], "gmail": [709, 724], "outlook": 709, "pop": [709, 716], "email": [709, 724], "live": [709, 710, 721, 722, 725, 754, 756], "did": [709, 715, 722, 748, 764], "aris": [709, 725, 730, 751], "substanti": [709, 717, 720, 725, 738, 758], "innov": 709, "growth": [709, 761], "necess": 709, "parti": [709, 722, 751, 757, 758, 764], "engag": [709, 711, 717], "regard": [709, 714, 723, 736, 737, 741], "2015": [709, 758], "frame": [709, 750, 758], "matur": [709, 751, 758], "preced": [709, 747], "aros": 709, "effort": [709, 711, 715, 751, 754, 758, 764], "stage": [709, 711, 717, 718, 719, 722, 738, 758], "mission": [709, 760], "At": [709, 715, 716, 719, 738, 739, 758], "ourselv": [709, 764], "quansight": [709, 764], "compani": [709, 754], "organ": [709, 720, 723, 732, 736, 739, 753], "panda": 709, "scipi": [709, 715, 760, 765], "conda": [709, 716, 760], "apach": [709, 760, 764], "onnx": [709, 756, 764], "jupyt": [709, 760], "cupi": [709, 758, 765], "net": [709, 710, 743, 748], "sympi": 709, "modin": 709, "spyder": 709, "googl": [709, 724], "octoml": [709, 764], "sponsor": 709, "lg": 709, "electron": 709, "shaw": 709, "intel": [709, 716, 756, 763], "promis": 709, "pursuit": 709, "unif": [709, 711, 745, 754, 764], "clearli": [709, 715, 717, 727, 737, 738, 762], "thought": [709, 716, 717, 731, 756], "care": [709, 717, 726, 736, 741, 748], "gone": [709, 742], "excit": [709, 711, 718], "complianc": 709, "hope": [709, 751, 764], "suit": [709, 716, 718, 719, 724, 738, 746, 750, 753, 758, 764], "motiv": [709, 745], "convinc": 709, "celebr": 709, "encourag": [709, 730, 750, 751], "foundat": [709, 761], "happi": [710, 716, 751], "abund": 710, "better": [710, 712, 715, 718, 736, 737, 739, 741, 742, 745, 746, 747, 761], "streamlin": [710, 761], "workflow": [710, 715, 717, 721, 725, 734, 736, 746, 749, 753, 757, 764, 765], "week": [710, 717], "sai": [710, 715, 716, 733, 745], "deepmind": 710, "releas": [710, 715, 716, 725, 739, 741, 751, 758, 764], "awesom": 710, "love": 710, "perceiverio": 710, "slew": 710, "rush": 710, "inevit": [710, 759], "often": [710, 714, 719, 729, 731, 732, 736, 738, 751, 759, 762, 765], "erron": 710, "poor": 710, "repositori": [710, 712, 713, 716, 717, 718, 719], "confus": [710, 725, 729, 735, 741, 753], "hour": [710, 724], "spent": 710, "spin": 710, "discuss": [710, 715, 717, 722, 725, 726, 735, 736, 738, 741, 744, 745, 746, 751, 754, 759], "sake": 710, "few": [710, 714, 715, 717, 723, 725, 726, 731, 732, 734, 735, 738, 741, 743, 744, 745, 746, 747, 749, 758, 760], "wouldn": 710, "nice": [710, 738, 758], "frantic": 710, "lucid": 710, "honk": 710, "understand": [710, 712, 714, 715, 716, 717, 718, 719, 722, 727, 728, 731, 737, 742, 754, 764], "hasn": 710, "spend": [710, 758], "torchvis": 710, "sonnet": 710, "statu": [710, 715, 724, 730], "quo": 710, "dopamin": 710, "ignit": 710, "catalyst": 710, "lightn": 710, "fastai": 710, "trax": [710, 748], "objax": [710, 748], "offer": [710, 736, 747, 758, 764, 765], "strongli": [711, 716, 736, 764, 765], "skill": [711, 760], "veteran": 711, "beginn": [711, 758], "aspect": [711, 734, 746, 758], "board": [711, 722], "local": [711, 712, 716, 719, 722, 732, 737, 738], "resourc": [711, 715, 716, 724], "setup": [712, 716, 717, 722, 724], "mech": [712, 713], "grasp": [712, 736], "dir": [712, 746], "mutual": [712, 723, 732], "venv": 712, "ivy_dev": [712, 716, 717], "bat": [712, 716, 717], "mac": [712, 716, 717], "linux": [712, 716, 717, 761, 763], "instal": [712, 713, 716, 717, 721, 722, 730, 750], "edit": [712, 715, 716, 717, 730], "pip": [712, 716, 722, 730, 750], "immedi": [712, 716], "ivy_robot": [712, 750], "docker": [712, 714], "desktop": [712, 716], "my": [712, 724], "mount": [712, 713, 717], "rm": [712, 713, 717], "pwd": [712, 713], "pycharm": [712, 738], "vscode": [712, 716], "devcontain": [712, 716], "remot": [712, 716, 719, 730], "codespac": 712, "good": [712, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 741, 743, 744, 747], "commit": [712, 715, 719, 727, 738], "make_doc": 713, "sh": [713, 716, 717, 719, 724], "ssh": [713, 724], "make_docs_without_dock": [713, 722], "sphinx": [713, 722], "resours": 714, "climb": 714, "steep": 714, "curv": 714, "realpython": 714, "pyn": 714, "platform": [714, 756, 760, 762], "stuck": [714, 715], "spell": 714, "though": [714, 715, 717, 725, 726, 728, 732, 735, 736, 741, 746, 751], "sound": [714, 724, 742], "peopl": [714, 716, 717, 718, 758, 760], "action": [714, 724, 727, 730, 738], "frequent": [715, 717, 721, 758], "outlin": [715, 716, 717, 718, 723, 725, 728, 732, 735, 736, 738], "broad": [715, 760], "individu": [715, 717, 719, 721, 725, 732, 736, 758, 761, 764, 765], "explan": [715, 716, 717, 723, 728, 731, 736, 739, 745], "focu": [715, 734, 756, 757, 760, 765], "pypi": [715, 716, 739, 751], "familiar": [715, 716], "sure": [715, 716, 717, 719, 724, 729, 736, 737, 738, 741, 752], "aforement": 715, "categori": [715, 719, 720, 723, 725, 729, 736, 739, 742], "arraywithelementwis": [715, 720, 745], "containerwithmanipul": 715, "thorough": [715, 728, 731, 738], "comment": [715, 716, 717, 719, 725, 730, 736, 741], "add_reformatting_checklist_": 715, "category_nam": [715, 725, 726, 728, 731, 732], "pr": [715, 717, 719, 730, 736, 737, 738], "autom": [715, 724, 730, 738, 753, 760], "bot": [715, 730], "markdown": [715, 722], "patient": [715, 716], "emoji": 715, "legend": 715, "checkbox": [715, 716], "proce": [715, 716], "elabor": 715, "struggl": 715, "assigne": 715, "status": 715, "refrain": 715, "mindspor": 715, "subsect": [715, 716, 717, 719, 724], "verifi": [715, 725, 726, 736, 738, 739], "assess": [715, 741], "merg": [715, 717, 719, 724, 736, 758], "composition": 715, "pend": 715, "helpfulli": [715, 741, 756], "problemat": [715, 716], "unimpl": 715, "issue_link": 715, "alias_nam": 715, "push": [715, 717, 719, 737, 738, 764], "liner": 715, "meanwhil": [715, 724], "reselect": 715, "placement": 715, "categoris": [715, 719, 736], "faithfulli": 715, "creation_routin": [715, 737], "indexing_routin": 715, "ma": 715, "manipulation_routin": 715, "mathematical_funct": [715, 736], "sorting_searching_count": 715, "ufunc": [715, 736], "matrix_and_vector_product": 715, "matrix_eigenvalu": 715, "norms_and_other_numb": 715, "solving_equations_and_inverting_matric": 715, "seem": [715, 716, 741, 747, 748, 751, 758], "gleam": 715, "uncom": 715, "test_numpy_inn": 715, "test_frontend": [715, 724, 737], "unsur": [715, 738], "explor": [715, 716, 717, 725, 741, 744, 748, 750, 758, 761], "confirm": 715, "worri": [715, 716, 730], "readi": [715, 716], "analyz": [715, 753], "relevant_submodul": 715, "invit": [715, 736, 741], "roadmap": [715, 724], "think": [715, 717, 724, 727, 741, 759], "deem": [715, 736], "subtask": 715, "funcion": 715, "defer": [715, 720, 725, 726, 732, 735, 736, 738, 764], "clearer": [715, 729, 737, 746], "backend_nam": [715, 721, 725, 726, 728, 731, 732, 733], "approach": [715, 716, 717, 720, 723, 725, 732, 736, 738, 739, 741, 745, 746, 751, 755, 762, 764], "implementaion": 715, "compost": 715, "sometim": [715, 716, 717, 719, 725, 732, 736, 738, 741], "standalon": [715, 720, 738, 753, 754, 759, 764, 765], "conveni": [715, 725, 726, 731, 737, 744, 746, 747, 753, 764], "rare": [715, 726, 751, 763], "come": [715, 716, 717, 720, 724, 736, 740, 741, 747, 749, 753, 758], "tab": [715, 716, 724, 746], "click": [715, 716, 717, 724, 728, 730, 744], "button": [715, 716, 717], "centr": 715, "predetermin": 715, "report": [715, 738], "superset": [715, 718, 732, 735, 751], "reserv": 715, "interact": [715, 757, 758, 763], "submit": [715, 730], "your_usernam": 716, "your_fold": 716, "enter": [716, 717, 720, 725, 726, 731, 733], "sync": [716, 719], "nutshel": [716, 731], "hook": [716, 730], "lint": 716, "attempt": [716, 740, 751], "properli": [716, 718, 729, 730, 736, 738], "cours": [716, 717, 719, 720, 727, 735, 736, 741, 746, 751, 763, 764], "whatev": [716, 723, 751], "elig": 716, "student": 716, "licenc": 716, "remind": 716, "licens": [716, 761], "expir": 716, "profession": 716, "trial": 716, "jetbrain": 716, "bui": [716, 764], "paid": 716, "pace": 716, "person": [716, 717], "experi": [716, 729, 738, 744, 746, 751], "abil": [716, 741, 744, 751, 758], "perhap": [716, 745, 746, 747, 751, 764], "icon": [716, 717], "panel": 716, "palett": 716, "ctrl": [716, 717], "On": [716, 725, 726, 730, 736, 738, 741, 744, 748], "m1": 716, "optional_m1_1": 716, "optional_m1_2": 716, "builtin": [716, 745, 747], "cmd": 716, "virtualenv": 716, "tick": [716, 717, 724], "paddlepaddl": 716, "wget": 716, "nz2": 716, "archiv": 716, "openssl": 716, "libssl1": 716, "1_1": 716, "1f": 716, "1ubuntu2": 716, "19_amd64": 716, "deb": 716, "sudo": 716, "dpkg": 716, "array_api_test": [716, 717, 719], "test_array_api": [716, 717, 719, 738], "mitig": [716, 764], "conflict": [716, 717, 724, 736, 746], "powershel": 716, "admin": 716, "visit": [716, 717, 724], "menu": 716, "tag": [716, 717], "introspect": 716, "usr": 716, "dialog": 716, "persist": 716, "opt": [716, 721, 725, 735, 738, 741], "caus": [716, 717, 719, 721, 723, 724, 725, 727, 735, 737, 738, 751], "earlier": [716, 717, 725, 739], "virtualis": 716, "dropdown": [716, 724], "dockerfil": 716, "navig": [716, 717, 718], "apt": 716, "ca": 716, "certif": 716, "curl": 716, "gnupg": 716, "lsb": 716, "mkdir": [716, 724], "keyr": 716, "fssl": 716, "gpg": 716, "dearmor": 716, "arch": 716, "lsb_releas": 716, "tee": 716, "null": 716, "ce": 716, "cli": 716, "containerd": 716, "io": [716, 724], "plugin": 716, "systemctl": 716, "permiss": [716, 724], "press": [716, 717, 746], "ok": 716, "successful": 716, "4a": 716, "socket": 716, "chmod": [716, 724], "rwx": 716, "sock": 716, "pid": 716, "coupl": [716, 720, 745, 747, 758], "test_ab": [716, 738], "editor": 716, "pytest": [716, 717, 719, 724, 733, 738], "keyboard": 716, "displai": [716, 722, 724, 729, 738, 746], "screenshot": 716, "test_elementwis": 716, "bar": 716, "shell": [716, 717], "run_tests_cli": [716, 719], "run_ivy_core_test": 716, "run_ivy_nn_test": 716, "run_ivy_stateful_test": 716, "run_test": [716, 724], "test_depend": 716, "test_ivy_cor": 716, "test_ivy_nn": 716, "test_ivy_st": 716, "unix": 716, "test_": [716, 737], "test_cor": [716, 717, 737], "bash": [716, 717, 719], "offici": [716, 725, 743], "wish": [716, 736], "ivy_cor": 716, "ivy_nn": 716, "ivy_st": 716, "simplest": [716, 727, 738, 741], "header": [716, 717], "advanc": [716, 757], "arrow": 716, "test_stat": 716, "test_submodule_nam": 716, "test_function_nam": 716, "debugg": 716, "studio": [716, 738], "afterward": [716, 746], "restart": 716, "overlap": [716, 724, 739, 741, 759], "test_file_path": 716, "test_fn_nam": 716, "engin": [716, 758, 760, 761], "comma": 716, "postcreatecommand": 716, "post_create_command": 716, "poststartcommand": 716, "safe": [716, 736], "containerworkspacefold": 716, "reopen": 716, "test_fle_path": 716, "slash": 716, "comfort": [716, 729], "isol": [716, 717, 759, 764], "fledg": [716, 743, 744], "container": 716, "intens": 716, "headach": 716, "arm": [716, 717], "vm": [716, 724], "azur": 716, "cloud": [716, 724, 750, 760], "longer": [716, 725, 735, 738, 758], "theme": [716, 722], "slow": 716, "ipad": 716, "browser": [716, 722], "quota": 716, "requisit": 716, "pane": [716, 717, 724], "six": [716, 741], "dockerfilegpu": 716, "ivv": 716, "multiv": 716, "multivers": [716, 739], "dockerfilemultivers": 716, "dockerhub": 716, "region": 716, "box": 716, "upto": [716, 717], "minut": [716, 724], "launch": 716, "kindli": 716, "guidelin": 716, "conatin": 716, "colour": 716, "chanc": 716, "troubleshoot": 716, "ever": [716, 735], "flask": 716, "toolbar": [716, 717], "_array_modul": [716, 719], "refresh": 716, "workspac": 716, "pytestarg": 716, "unittesten": 716, "pytesten": 716, "autotestdiscoveronsaveen": 716, "conftest": 716, "quick": [717, 718, 737, 747], "tendenc": 717, "land": 717, "world": [717, 760], "fly": [717, 758], "hard": [717, 745, 758], "respons": [717, 724, 725], "internship": 717, "serv": [717, 720, 723, 731, 732, 736, 737, 738, 741, 742, 753, 756], "suspect": 717, "iii": 717, "reformat": [717, 730], "experiment": [717, 725, 736, 739, 743, 758], "issue_numb": 717, "delet": [717, 724], "clean": [717, 739, 743, 744, 746], "rememb": 717, "respond": 717, "dai": [717, 730], "freed": 717, "situat": [717, 724, 748], "upon": [717, 727, 735, 738, 741, 751, 757, 758], "unabl": [717, 741], "obvious": [717, 724], "qualiti": 717, "hypothet": 717, "frustrat": 717, "busi": 717, "fine": [717, 725, 727, 736, 745, 748, 764], "inact": 717, "me": 717, "unfairli": 717, "investig": 717, "wherea": [717, 720, 721, 723, 725, 726, 727, 731, 732, 738, 748, 755], "practic": [717, 721, 724, 736, 761], "checkout": [717, 719, 738], "name_of_your_branch": 717, "date": [717, 719], "complic": [717, 737, 743], "merge_with_upstream": 717, "abort": 717, "tediou": [717, 727, 741], "stash": [717, 730], "reinstat": 717, "fetch": [717, 719, 724], "uncommit": 717, "unstag": [717, 730], "untrack": 717, "comprehens": [717, 719], "atlassian": 717, "wrote": 717, "blame": 717, "revis": 717, "eg": 717, "grep": 717, "commit_id": 717, "handi": 717, "histori": 717, "toggl": 717, "highlight": [717, 724, 727, 736], "approv": 717, "someon": [717, 751], "hash": [717, 746], "cancel": 717, "speedup": 717, "unavail": 717, "tickbox": 717, "span": [717, 756, 764], "intent": [717, 735], "discourag": 717, "philosophi": 717, "valuabl": 717, "infrequ": 717, "earli": [717, 758], "wast": [717, 724], "spot": [717, 727, 732], "mistak": 717, "propos": [717, 736, 741, 758], "mountain": 717, "advoc": [717, 751], "actual": [717, 718, 724, 732, 733, 735, 736, 737, 738, 741, 742, 747, 751, 759, 764], "aim": [717, 719, 733, 736, 738, 742, 756, 758, 761], "session": [717, 758], "beauti": 717, "concern": [717, 718, 723, 725, 727, 735, 741, 742, 764], "undo": 717, "stress": 717, "nifti": 717, "reassur": 717, "local_path_to_ivi": 717, "subfold": [717, 737, 738, 739], "dep": 717, "fresh": 717, "arsen": 717, "declar": 717, "exec": 717, "rf": 717, "ivy_contain": 717, "test_imag": 717, "test_random_crop": 717, "test_creation_funct": 717, "test_arang": 717, "cursor": 717, "alt": 717, "blog": 717, "breakpoint": 717, "gutter": 717, "caret": 717, "f8": 717, "f9": 717, "Into": 717, "f7": 717, "smart": 717, "fragment": [717, 754, 756, 760], "pychram": 717, "dummi": 717, "wherein": [717, 732, 738], "failur": [717, 724, 737, 738], "who": [718, 729, 742, 751, 758, 760], "weed": [718, 742], "tour": 718, "goe": [718, 721, 730, 735, 741], "runtim": [718, 732, 738, 741, 758], "conjunct": 719, "establish": [719, 760], "2020": [719, 758], "popular": [719, 758], "sens": [719, 727, 736, 745], "unconnect": 719, "initialis": [719, 736, 738], "everytim": [719, 725], "strang": [719, 745], "thoroughli": 719, "test_linalg": [719, 737], "test_set_funct": 719, "test_signatur": 719, "excess": [719, 721, 727], "array_modul": 719, "vv": 719, "test_manipulation_funct": 719, "test_concat": [719, 738], "nb": 719, "liber": 719, "fortun": 719, "falsifi": [719, 738], "______________________": 719, "test_remaind": 719, "_______________________": 719, "test_operators_and_elementwise_funct": 719, "1264": 719, "1277": 719, "binary_param_assert_against_refimpl": 719, "ctx": 719, "mod": 719, "620": 719, "binary_assert_against_refimpl": 719, "324": 719, "scalar_o": 719, "17304064": 719, "binaryparamcontext": 719, "reproduce_failur": [719, 733, 738], "axic42baaowcnp": 719, "rumwmabaear0": 719, "make_binary_param": 719, "numeric_dtyp": 719, "left_strat": 719, "left_sym": 719, "right_strat": 719, "right_sym": 719, "right_is_scalar": 719, "binary_param_assert_dtyp": 719, "binary_param_assert_shap": 719, "recreat": 719, "unexpectedli": 719, "discrep": [719, 737], "varieti": [719, 724, 725, 726, 738, 740, 754, 756, 760, 761, 764, 765], "test_asarray_arrai": 719, "test_floor_divid": 719, "health": 719, "test_iop": 719, "__imod__": 719, "isequ": 719, "test_matrix_norm": 719, "alter": 719, "tweak": 719, "array_api_methods_to_test": 719, "test_trac": 719, "test_special_cas": 719, "__ipow__": 719, "is_integ": 719, "easier": [719, 720, 721, 725, 737, 739, 753, 758, 760], "revisit": [719, 731], "devicearrai": [720, 736, 743, 745], "_data": [720, 735, 736, 745], "organiz": [720, 723, 736], "inherit": [720, 723, 729, 745, 751, 753], "bear": [720, 723, 725, 736], "underpin": [720, 723, 743], "programmat": [720, 723, 759], "backup": [720, 722, 723], "accident": [720, 723, 736], "readabl": [720, 723, 729, 730, 731, 738, 739, 745, 746], "absent": [720, 723], "auto": [720, 722, 723, 730, 746], "__mul__": [720, 723, 727, 731, 741, 745], "throw": [720, 725, 726, 729, 745, 758], "imposs": 720, "inputs_to_native_arrai": [720, 732, 733], "outputs_to_ivy_arrai": [720, 725, 726, 731, 732, 733], "firstli": [720, 725, 727, 728, 729, 732, 733, 735, 741, 746, 754, 764], "anywai": [720, 733, 736], "secondli": [720, 725], "permit": [720, 731, 736, 738, 741], "__ivy_array_function__": 720, "inspir": [720, 750], "__torch_function__": 720, "myarrai": 720, "handled_funct": 720, "notimpl": 720, "issubclass": 720, "four": [720, 725, 727, 731, 732, 738, 741, 746], "enough": [720, 724, 738, 745, 746, 747], "ivy_funct": 720, "my_ab": 720, "my_arrai": 720, "Of": [720, 735, 736, 746, 763, 764], "implicit_backend": [721, 743], "__dict__": [721, 735, 743], "ivy_original_dict": [721, 743], "get_backend": [721, 732], "fallback": 721, "challeng": [721, 764], "switch": [721, 729, 732, 733, 765], "scope": [721, 759, 763], "intermediari": 721, "illustr": [721, 743, 750], "set_dynamic_backend": 721, "unset_dynamic_backend": 721, "dynamic_backend_a": 721, "set_": 721, "unset_": 721, "technic": [721, 731, 735, 751, 758, 760], "setter": 721, "backend_handl": 721, "requires_grad": 721, "memory_format": 721, "preserve_format": 721, "weren": 721, "vast": [721, 725, 758], "minor": [721, 741, 751], "fn_name_v_1p12_and_abov": 721, "fn_name_v_1p01_to_1p1": 721, "heavili": [722, 733, 751], "characterist": 722, "conf": 722, "cleanup": 722, "disabl": 722, "procedur": [722, 724, 727, 737], "readm": [722, 751], "toctre": 722, "maxdepth": 722, "caption": 722, "related_work": 722, "deep_div": 722, "faq": 722, "glossari": 722, "autosummari": 722, "top_functional_toc": 722, "restructuredtext": 722, "render": [722, 728], "inlin": 722, "discov": [722, 725], "ivy_toctree_caption_map": 722, "stub": 722, "inturn": 722, "unfortun": [722, 730], "forc": [722, 724, 726], "linker": 722, "foo": 722, "discussion_channel_map": 722, "1000043690254946374": 722, "1000043749088436315": 722, "seri": [722, 736, 738, 758, 760], "discussion_paragraph": 722, "discord_link": 722, "channel_link": 722, "gg": 722, "zvqdvbznqj": 722, "799879767196958751": 722, "channel_id": 722, "paragraph": 722, "autoskippablemethod": 722, "skippable_method_attribut": 722, "__qualname__": 722, "autodoc": 722, "atribut": 722, "__doc__": 722, "autoivydata": 722, "containerwithelementwis": 723, "__repr__": 723, "__contains__": 723, "__getstate__": 723, "__setstate__": 723, "unpickl": 723, "num_dim": [723, 748], "__len__": 723, "enforc": [723, 745], "extern": [723, 731, 736, 738, 739], "lefthand": 723, "righthand": 723, "handle_nest": [723, 731, 732, 733, 743], "addition": [723, 735, 736, 764], "absenc": [723, 731, 758], "implicitli": [723, 734, 738, 743], "log_pr": [723, 732, 735], "intuit": [723, 738, 746, 747, 754], "chronolog": 723, "concurr": [723, 724, 732, 758], "had": [723, 724, 735, 739, 743, 758, 759], "implic": 723, "whatsoev": [723, 732, 753, 764], "eager": [723, 751, 758], "children": 723, "shallowest": 723, "deepest": 723, "regularli": 724, "rollback": 724, "incorpor": [724, 737, 746, 758], "techniqu": 724, "triplet": 724, "test_torch": [724, 737], "test_tensor": [724, 737], "test_torch_instance_arctan_": 724, "12500": 724, "daili": 724, "shoot": 724, "ideal": [724, 736, 741, 746], "impact": [724, 738, 747, 760], "_reduce_loss": [724, 732, 735], "test_nn": 724, "test_loss": 724, "test_binary_cross_entropy_with_logit": 724, "test_cross_entropi": 724, "test_binary_cross_entropi": 724, "test_sparse_cross_entropi": 724, "test_loss_funct": 724, "test_torch_binary_cross_entropi": 724, "test_torch_cross_entropi": 724, "binary_cross_entropy_with_logit": 724, "torch_binary_cross_entropi": 724, "torch_cross_entropi": 724, "underneath": [724, 756], "magic": 724, "readthedoc": 724, "affect": [724, 736], "pedagog": 724, "f_1": 724, "t_1": 724, "t_3": 724, "t_7": 724, "t_": 724, "f_m": 724, "cyclic": 724, "intellig": [724, 738, 760], "tests_fil": 724, "file_nam": [724, 738, 739], "del": 724, "tests_lin": 724, "elif": [724, 729, 735, 736, 737], "correspondingli": 724, "tests_to_run": 724, "determine_tests_lin": 724, "mongodb": 724, "databas": [724, 738], "secret": 724, "db": 724, "ssh_deploy_kei": 724, "suffic": [724, 733, 738], "massiv": 724, "constraint": [724, 725, 734], "mb": 724, "yml": 724, "felicit": 724, "clone_map": 724, "master": [724, 758], "home": 724, "deploy_kei": 724, "user_email": 724, "rashul": 724, "chutani": 724, "user_nam": 724, "target_branch": 724, "github_serv": 724, "deploy_key_fil": 724, "ssh_known_hosts_fil": 724, "known_host": 724, "keyscan": 724, "export": [724, 757, 764], "git_ssh_command": 724, "userknownhostsfil": 724, "methodologi": 724, "master1": 724, "restructur": 724, "_map": 724, "t_2": 724, "t_n": 724, "index_map": 724, "test_map": 724, "routin": [724, 735, 736, 741, 751, 758], "incorrect": 724, "snowbal": 724, "irrelev": [724, 725, 727], "recalibr": 724, "workflow_dispatch": 724, "schedul": [724, 751, 758, 765], "cron": 724, "saturdai": 724, "night": 724, "pm": 724, "gut": 724, "lesser": [724, 729], "lol": 724, "cater": 724, "master2": 724, "master32": 724, "synchron": 724, "runner2": 724, "corrupt": 724, "discard": 724, "decoupl": [724, 747], "150": 724, "cycl": [724, 738], "rashulchutani": 724, "yellow": 724, "queu": 724, "redirect": 724, "book": 724, "onrend": 724, "jo": 724, "ran": 724, "badg": 724, "clickabl": 724, "all_dtyp": 725, "all_numeric_dtyp": 725, "all_int_dtyp": 725, "all_float_dtyp": 725, "replic": [725, 734, 735, 736], "thirdli": 725, "native_float32": 725, "importantli": [725, 745, 748, 750], "arguabl": [725, 726, 736], "jaxarrai": [725, 726, 729, 731, 735, 739, 743], "_handle_0_dim_output": 725, "subtli": [725, 735], "promote_types_frontend_nam": 725, "promote_types_of_frontend_name_input": 725, "frontend_nam": 725, "demonstr": [725, 727, 729, 745], "accuraci": 725, "upcast": 725, "nearli": [725, 731, 733, 758], "downcast": 725, "footprint": 725, "concret": 725, "compound": 725, "infer_dtyp": [725, 726, 731, 733], "settabl": [725, 726], "handle_out_argu": [725, 726, 731, 732, 733, 735, 743], "infer_devic": [725, 726, 731, 733], "deleg": [725, 765], "shape_to_tupl": 725, "with_supported_dtyp": 725, "with_unsupported_dtyp": [725, 733, 736], "unment": 725, "backend_vers": 725, "_cast_for_unary_op": [725, 732, 735], "target_typ": 725, "unsupported_dtyp": 725, "supported_dtypes_and_devic": 725, "globals_getter_func": 725, "f1": 725, "f2": 725, "lack": [725, 735, 758, 765], "inconsist": [725, 729, 734], "84530": 725, "unwarr": 725, "risk": [725, 764], "needlessli": 725, "bloat": 725, "undergo": [725, 751], "supported_dtyp": 725, "unsupported_devic": 725, "supported_devic": 725, "slight": [725, 738, 747], "downsid": 725, "inflat": 725, "undesir": 725, "accomplish": 725, "upcast_data_typ": 725, "downcast_data_typ": 725, "crosscast_data_typ": 725, "cast_data_typ": 725, "downcast_data_dtyp": 725, "vice": 725, "versa": 725, "till": 725, "crosscast": 725, "exmp1": 725, "watch": [725, 736], "cate": 725, "understood": 725, "consumpt": [725, 762], "dual": 726, "categor": [726, 732, 736], "210": 726, "_handle_except": [726, 729], "1013": 726, "_handle_nest": [726, 729], "905": 726, "_handle_out_argu": [726, 729], "441": 726, "_inputs_to_native_arrai": [726, 729], "new_arg": [726, 729], "new_kwarg": [726, 729], "_outputs_to_ivy_arrai": [726, 729], "358": 726, "_handle_array_funct": [726, 729], "863": 726, "_handle_device_shift": 726, "handle_device_shift": 726, "__enter__": 726, "exit": 726, "__exit__": 726, "eight": [727, 742], "op_nam": 727, "__r": 727, "recap": [727, 747], "combinatori": 727, "unus": [727, 735], "okai": [727, 741, 743], "meant": [727, 735], "spec": [727, 728], "my_func": [727, 739], "some_flag": 727, "another_flag": 727, "jointli": 727, "5574077": 727, "1850398": 727, "5463025": 727, "8422884": 727, "91601413": 727, "9647598": 727, "3738229": 727, "1597457": 727, "0963247": 727, "9955841": 727, "3278579": 727, "asid": [727, 750], "14254655": 727, "1578213": 727, "380515": 727, "trivial": [727, 735], "exlud": 727, "failing_fn_nam": 727, "onlin": [727, 728], "minutest": 727, "suffici": [727, 736, 738], "fault": [727, 758], "contrast": [728, 731, 736, 764], "instanti": 728, "preview": 728, "needless": [728, 737], "renam": [728, 736], "judgment": 728, "operator_nam": 728, "succinct": 728, "contstructor": 728, "docst": 728, "native_error": 729, "isinst": [729, 736, 738, 739, 747, 748], "_combine_messag": 729, "truli": [729, 745], "wrong": [729, 730, 733, 736, 741], "198": 729, "392": 729, "_handle_array_like_without_promot": 729, "805": 729, "432": 729, "349": 729, "other_test": 729, "523": 729, "_handle_numpy_out": 729, "396": [729, 747], "_outputs_to_numpy_arrai": 729, "_inputs_to_ivy_arrays_np": 729, "ivy_arg": 729, "ivy_kwarg": 729, "453": 729, "_from_zero_dim_arrays_to_scalar": 729, "truth_value_test": 729, "217": 729, "visibl": 729, "unwieldi": 729, "awar": [729, 730], "squash": 729, "hid": 729, "cleaner": [729, 746], "caught": [729, 730], "functool": [729, 736, 745], "rethrow": 729, "_print_traceback_histori": 729, "error_stack": 729, "axiserror": 729, "got": 729, "polici": [729, 733, 738, 740, 750], "moreov": 729, "met": 729, "black": 730, "flake8": 730, "formatt": 730, "linter": 730, "autoflak": 730, "docformatt": 730, "pydocstyl": 730, "cfg": 730, "yaml": 730, "patch1687898304": 730, "8072": 730, "3516aed563": 730, "akshai": 730, "jain": 730, "gui": 730, "cryptic": 730, "garden": 730, "utc": 730, "didn": 730, "human": 730, "intervent": 730, "typo": 730, "ui": 730, "adress": 731, "handle_array_like_without_promot": [731, 733], "to_native_arrays_and_back": [731, 733, 743], "handle_array_funct": [731, 733], "handle_numpy_arrays_in_specific_backend": 731, "inputs_to_native_shap": [731, 733], "sole": [731, 739, 757, 758, 759], "rational": 731, "__div__": [731, 741], "dicat": 731, "484": 731, "annot": 731, "brittl": 731, "freeli": 731, "inde": [731, 741, 751, 756], "original_typ": 731, "cumbersom": 731, "venn": 732, "diagram": [732, 764], "light": [732, 739, 751, 753, 759, 764], "maximis": 732, "encompass": 732, "maxim": [732, 735, 743, 755, 756, 760, 761, 762], "partial_mixed_handl": [732, 733, 741], "handle_partial_mixed_funct": [732, 733, 741], "fn_decor": 732, "mixed_backend_wrapp": [732, 735], "to_add": 732, "to_skip": 732, "inputs_to_ivy_arrai": [732, 733], "deal": [732, 734, 736, 751], "modif": [732, 758], "briefli": [732, 738, 746], "get_all_arrays_on_dev": 732, "outputs_to_native_arrai": 733, "handle_view_index": [733, 735], "handle_view": [733, 735], "handle_nan": 733, "handle_mixed_funct": 733, "outputs_to_ivy_shap": 733, "to_native_shapes_and_back": 733, "crucial": 734, "scenario": 734, "inter_func": 734, "custom_grad_fn": 734, "args1": 734, "detach": 734, "eas": [734, 758], "captur": [734, 738, 748, 759], "program": [735, 755, 756, 758, 761, 762, 765], "ration": [735, 741], "speak": 735, "val_n": 735, "base_idx": 735, "_manipulation_stack": 735, "base_flat": 735, "_view_ref": 735, "_update_view": 735, "contigu": 735, "c_contigu": 735, "ascontiguousarrai": 735, "copyto": 735, "_is_vari": 735, "tensor_scatter_nd_upd": 735, "is_vari": 735, "_update_torch_view": 735, "predominantli": [735, 739, 750], "support_native_out": [735, 743], "_scalar_output_to_0d_arrai": 735, "_wrap_fn": 735, "dim0": 735, "dim1": 735, "res_floor": 735, "mul": [735, 745], "extent": [735, 736], "to_out_fn": 735, "add_wrapp": 735, "input_arrai": 735, "mostli": [735, 738], "metadata": 735, "paradigm": [735, 751, 758], "expans": 735, "brief": [735, 738], "weak": 735, "_torch_bas": 735, "_torch_view_ref": 735, "_torch_manipul": 735, "weakli": 735, "adequ": 735, "exhaust": [735, 738, 755, 764], "tf_frontend": 736, "lax": [736, 737, 741, 748, 751], "torch_frontend": [736, 737], "numpy_frontend": 736, "jax_frontend": 736, "to_ivy_arrays_and_back": [736, 737], "fidel": 736, "algebra": [736, 756, 757, 758, 761, 765], "xla": [736, 751, 753, 758], "dynamic": 736, "mimic": 736, "arithmetic_oper": 736, "handle_numpy_out": 736, "handle_numpy_dtyp": 736, "handle_numpy_cast": 736, "from_zero_dim_arrays_to_scalar": 736, "_add": 736, "same_kind": 736, "subok": [736, 737, 741], "promote_types_of_numpy_input": 736, "underscor": 736, "unhandl": 736, "trigonometric_funct": 736, "_tan": 736, "check_tensorflow_cast": 736, "raw_op": [736, 737], "tackl": 736, "map_raw_ops_alia": 736, "unnecessari": 736, "output_typ": 736, "kwargs_to_upd": 736, "implemnt": 736, "pointwise_op": 736, "slower": 736, "sensibl": 736, "ahead": [736, 739, 758], "reduce_logsumexp": 736, "input_tensor": 736, "logsumexp": 736, "trick": 736, "max_input_tensor": 736, "meet": 736, "preferred_element_typ": 736, "finer": 736, "margin": 736, "logicaland": 736, "np_frontend": 736, "_ivy_arrai": 736, "radd": 736, "_init_data": 736, "_process_str_data": 736, "_dtype": [736, 737, 745], "_shape": [736, 745], "govern": 736, "promote_types_of_": 736, "_input": 736, "promote_types_of_torch_input": [736, 737], "saniti": 736, "handle_numpy_casting_speci": 736, "new_fn": 736, "equiv": 736, "unsaf": 736, "array_type_test": 736, "_isfinit": 736, "organis": 736, "youtub": 736, "jump": 737, "knowledg": 737, "lift": [737, 759], "np_frontend_help": 737, "test_jax": 737, "test_lax": 737, "test_oper": 737, "dtype_and_x": [737, 738], "test_jax_tan": 737, "backend_fw": 737, "test_numpi": 737, "test_mathematical_funct": 737, "test_trigonometric_funct": 737, "dtypes_values_cast": 737, "dtypes_values_casting_dtyp": 737, "arr_func": 737, "get_num_positional_args_ufunc": 737, "test_numpy_tan": 737, "handle_where_and_array_bool": 737, "test_tensorflow": 737, "test_math": 737, "test_tensorflow_tan": 737, "test_pointwise_op": 737, "test_torch_tan": 737, "_fill_valu": 737, "test_glob": 737, "test_jax_ful": 737, "test_from_shape_or_valu": 737, "_input_fill_and_dtyp": 737, "dtype_and_input": 737, "dtype_to_cast": 737, "input_fill_dtyp": 737, "test_numpy_ful": 737, "test_raw_op": 737, "test_tensorflow_fil": 737, "test_creation_op": 737, "with_arrai": 737, "test_torch_ful": 737, "add_nois": 737, "all_clos": 737, "_get_dtype_and_matrix": 737, "test_torch_qr": 737, "frontend_ret": 737, "frontend_q": 737, "frontend_r": 737, "walkthrough": 737, "comparison_op": 737, "test_comparison_op": 737, "test_torch_great": 737, "test_ndarrai": 737, "test_numpy_instance_add__": 737, "test_tensorflow_instance_add": 737, "1e04": 737, "allow_infin": 737, "test_torch_instance_add": 737, "_arrays_idx_n_dtyp": 737, "test_manipul": [737, 738], "surprisingli": 737, "closest_relevant_group": 737, "strive": [737, 738, 741, 751, 760], "fixtur": 738, "eleg": [738, 758], "unexplor": 738, "upload": 738, "artifact": 738, "bespok": 738, "_array_or_typ": 738, "test_default_int_dtyp": 738, "clariti": [738, 741, 758], "print_hypothesis_exampl": 738, "custom_strategi": 738, "randomis": 738, "simplist": 738, "intricaci": 738, "glanc": 738, "capabl": [738, 741], "stratigi": 738, "one_of": 738, "datum": 738, "pipe": 738, "shorthand": 738, "array_or_scal": 738, "len_of_arrai": 738, "test_add": 738, "test_gpu_is_avail": 738, "pretest": 738, "thankfulli": 738, "seamlessli": 738, "criterion": 738, "valid_ax": 738, "craft": 738, "hoc": 738, "11228": 738, "456": 738, "268": 738, "wherev": 738, "9622": 738, "28136": 738, "6375": 738, "12720": 738, "21354": 738, "900e": 738, "57384": 738, "25687": 738, "248": 738, "test_devic": 738, "array_shap": 738, "common_shap": 738, "test_lay": 738, "stand": 738, "some_sequ": 738, "arrays_valu": 738, "36418": 738, "213": 738, "21716926": 738, "none_or_list_of_float": 738, "get_prob": 738, "103515625e": 738, "099609375": 738, "probabilist": 738, "number_positional_argu": 738, "unreproduc": 738, "x_and_linear": 738, "is_torch_backend": 738, "x_shape": [738, 743], "weight_shap": 738, "bias_shap": 738, "ivy_np": 738, "valid_float_dtyp": 738, "test_demo": 738, "failing_test": 738, "traceback": 738, "shrink": 738, "prescrib": 738, "scratch": 738, "therebi": 738, "test_gelu": 738, "test_fil": 738, "phase": [738, 751, 758], "notabl": [738, 758], "newer": 738, "max_exampl": 738, "deadlin": 738, "weird": 738, "systemat": 738, "safeguard": 738, "inabl": 738, "test_result_typ": 738, "9090909090909091": 738, "judgement": 739, "some_namespac": 739, "some_backend": 739, "another_backend": 739, "refactor": 739, "ongo": 739, "_assert_fill_value_and_dtype_are_compat": 739, "_to_devic": 739, "pin": 739, "conclud": 739, "unpinn": 739, "culmin": 739, "unsett": 740, "array_significant_figur": 740, "figur": 740, "array_decimal_valu": 740, "warning_level": 740, "nan_polici": 740, "stablest": 740, "answer": [741, 745, 751], "contradict": 741, "entail": 741, "sacrif": 741, "dimems": 741, "jacfwd": 741, "jacrev": 741, "banner": 741, "expens": 741, "incredibli": [741, 746, 751, 761], "price": 741, "pai": 741, "intrus": 741, "x_beta": 741, "equip": 741, "priorit": 741, "simplif": 741, "allevi": 741, "ineffici": [741, 751, 758], "fuse": 741, "hybrid": 741, "workaround": 741, "slip": 741, "radar": 741, "stumbl": 741, "fulfil": 742, "syntact": [743, 748], "power_seq": 743, "backend_stack": 743, "_determine_backend_from_arg": 743, "importlib": 743, "_backend_dict": 743, "x_flat": 743, "wi": 743, "wi_x": 743, "wii_x": 743, "wif_x": 743, "wig_x": 743, "wio_x": 743, "wh": 743, "ht": 743, "ct": 743, "hts_list": 743, "wii_xt": 743, "wif_xt": 743, "wig_xt": 743, "wio_xt": 743, "zip": 743, "htm1": 743, "ctm1": 743, "wh_htm1": 743, "whi_htm1": 743, "whf_htm1": 743, "whg_htm1": 743, "who_htm1": 743, "ft": 743, "ot": 743, "reliabl": 743, "sacrific": 743, "hear": 743, "virtu": [743, 755], "pure_ivi": 743, "compile_graph": [743, 748], "pure_torch": 743, "_layer": 743, "unclean": 743, "wx": 743, "temp": 743, "ivy_func": 743, "emphas": 743, "torchscript": [743, 753, 765], "example_input": 743, "primit": [744, 751, 756, 758], "upcom": 744, "hierarch": [744, 746, 747, 758], "arraywithactiv": 745, "arraywithcr": 745, "arraywithdatatyp": 745, "arraywithdevic": 745, "arraywithgener": 745, "arraywithgradi": 745, "arraywithimag": 745, "arraywithlay": 745, "arraywithlinearalgebra": 745, "arraywithloss": 745, "arraywithmanipul": 745, "arraywithnorm": 745, "arraywithrandom": 745, "arraywithsearch": 745, "arraywithset": 745, "arraywithsort": 745, "arraywithstatist": 745, "arraywithutil": 745, "_init": 745, "_size": 745, "_devic": 745, "_dev_str": 745, "_pre_repr": 745, "_post_repr": 745, "framework_str": 745, "noinspect": 745, "pypep8nam": 745, "immut": 745, "claim": 745, "_native_wrapp": 745, "genuin": 745, "some_method": 745, "rewritten": 745, "compartment": 745, "newshap": 745, "new_shap": 745, "tidi": 745, "crystal": 745, "ton": 746, "ado": [746, 747], "soup": 746, "walk": [746, 747], "cnt": 746, "combo": 746, "3333335": 746, "delimit": 746, "autocomplet": 746, "midwai": 746, "agent": 746, "total_spe": 746, "total_height": 746, "total_width": 746, "ag": 746, "tot": 746, "total_": 746, "total_h": 746, "cnt0": 746, "cnt1": 746, "diff_0": 746, "diff_1": 746, "config0": 746, "config1": 746, "decod": 746, "l0": 746, "decoder__l0": 746, "decoder__l1": 746, "encoder__l0": 746, "encoder__l1": 746, "l0__b": 746, "l0__w": 746, "l1__b": 746, "l1__w": 746, "printabl": 746, "obviou": [746, 758], "foresight": 746, "untidili": 746, "update_ag": 746, "normalize_img": 746, "img_max": 746, "reduce_max": 746, "img_min": 746, "reduce_min": 746, "img_rang": 746, "agent_posit": 746, "agent_veloc": 746, "agent_cam_front_rgb": 746, "agent_cam_front_depth": 746, "agent_cam_rear_rgb": 746, "agent_cam_rear_depth": 746, "agent_cam_lidar": 746, "camera": 746, "front_rgb": 746, "front_depth": 746, "rear_rgb": 746, "rear_depth": 746, "lidar": 746, "rgb": 746, "rear": 746, "veloc": 746, "cam": 746, "cam_max": 746, "cam_min": 746, "cam_rang": 746, "five": 746, "perman": 746, "thread": [746, 758], "pretti": [746, 764], "straightforward": 746, "dataload": [746, 749], "_cnt": 746, "img_": 746, "png": 746, "_dataset_s": 746, "_batch_siz": 746, "_count": [746, 747], "__next__": 746, "img_fnam": 746, "loaded_img": 746, "cv2": 746, "imread": 746, "from_numpi": 746, "batch_slic": 746, "mymodel": 746, "x_in": [746, 747, 748], "0145": 746, "addbackward0": 746, "_create_vari": 747, "_input_channel": 747, "_output_channel": 747, "_w_shape": 747, "_b_shape": 747, "_with_bia": 747, "764": 747, "872": 747, "211": 747, "439": 747, "nightmar": 747, "overcom": 747, "v0": 747, "v1": 747, "key0": 747, "linear3": 747, "v2": 747, "_w_init": 747, "_b_init": 747, "misnom": 747, "saw": 747, "_beta1": 747, "_beta2": 747, "_epsilon": 747, "_mw": 747, "_vw": 747, "_first_pass": 747, "_should_compil": 747, "new_v": 747, "_lr": 747, "_inplac": 747, "_stop_gradi": 747, "clip_by_valu": 748, "sparse_funct": 748, "_linear": 748, "jax_graph": 748, "to_backend": 748, "thinli": 748, "to_haiku_modul": 748, "loss_fn_t": 748, "without_apply_rng": 748, "update_rul": 748, "tree_multimap": 748, "differenti": [750, 758], "pose": 750, "quaternion": 750, "ivy_mech": 750, "target_facing_rotation_matrix": 750, "polar_to_cartesian_coord": 750, "warp": 750, "optic": 750, "voxel": 750, "ivy_vis": 750, "coords_to_voxel_grid": 750, "render_pixel_coord": 750, "radianc": 750, "nerf": 750, "trajectori": 750, "motion": 750, "mobil": [750, 758], "sample_spline_path": 750, "rigidmobil": 750, "sample_bodi": 750, "drone": 750, "sample_link": 750, "openai": 750, "swimmer": 750, "reward": 750, "supervis": 750, "door": [750, 751], "cartpol": 750, "mountain_car": 750, "pendulum": 750, "reacher": 750, "learnt": 750, "ture": 750, "ntm": 750, "egospher": 750, "esm": 750, "ivy_memori": 750, "egocentr": 750, "room": 750, "doubt": 751, "grate": 751, "probe": 751, "remark": 751, "lock": 751, "gold": 751, "dex": 751, "ye": 751, "tricki": [751, 753], "predictor": 751, "tight": 751, "driver": 751, "dispatch": [751, 758, 761], "ast": 751, "checkpoint": 751, "autodiff": 751, "shine": 751, "merci": 751, "autograd": 751, "compet": [751, 758], "parallelis": 751, "spmd": 751, "mixtur": 751, "expert": 751, "sophist": 751, "depart": 751, "hundr": 751, "thousand": 751, "broadli": [751, 764], "supplementari": 751, "reusabl": [751, 756, 758], "fanci": [751, 758], "fusion": [751, 762], "lose": 751, "pmap": 751, "eventu": 751, "supplement": 751, "backdoor": 751, "callback": 751, "record": [751, 759], "somewhat": [751, 758], "outsourc": 751, "nail": 753, "funtion": 753, "asset": 753, "scientist": 753, "correl": 753, "conceptu": [754, 759], "broken": [754, 758], "tracer": 754, "infrastructur": [754, 760, 761], "vendor": [754, 760], "complimentari": [754, 764], "acycl": [754, 759], "insert_numb": 755, "insert_t": 755, "scaffold": [756, 764], "heart": 756, "toolchain": [756, 761], "intermedi": [756, 757, 758, 759, 764], "ir": [756, 759, 764], "assembli": [756, 763, 764], "idl": 756, "middl": 756, "emit": 756, "gnu": [756, 761], "gcc": [756, 763], "broader": 756, "heterogen": 756, "aid": 756, "coprocessor": 756, "ai": [756, 760], "programm": [756, 763], "gate": 756, "onednn": 756, "sit": [756, 759, 764], "tandem": 756, "possess": 756, "khrono": [757, 763], "appl": 757, "coremltool": 757, "albeit": 757, "promin": 758, "abbrevi": 758, "laboratori": 758, "proprietari": [758, 762, 763], "mathwork": 758, "commerci": 758, "1984": 758, "toolbox": 758, "mupad": 758, "simulink": 758, "graphic": [758, 762, 763], "simul": 758, "million": [758, 761], "worldwid": 758, "scienc": [758, 760], "econom": 758, "2001": 758, "scientif": 758, "od": 758, "solver": 758, "cython": 758, "friendli": 758, "2002": 758, "lua": 758, "luajit": 758, "idiap": 758, "epfl": 758, "2005": 758, "numarrai": 758, "cpython": 758, "partli": 758, "2007": 758, "regress": [758, 765], "forest": 758, "boost": 758, "dbscan": 758, "inbuilt": 758, "esqu": 758, "aesara": 758, "datafram": 758, "critic": [758, 764], "2012": 758, "Its": 758, "polymorph": 758, "mpi": 758, "openmp": 758, "glue": 758, "jaot": 758, "nasa": 758, "cern": 758, "climat": 758, "allianc": 758, "influenti": 758, "2014": 758, "scala": 758, "ship": 758, "forgiv": 758, "decemb": 758, "announc": 758, "transit": 758, "mainten": 758, "v7": 758, "meaning": 758, "2016": 758, "imper": 758, "amazon": 758, "traction": 758, "cognit": [758, 765], "toolkit": [758, 759, 765], "grade": 758, "realiz": 758, "dnn": 758, "cnn": 758, "rnn": 758, "backpropag": 758, "succumb": 758, "came": 758, "monitor": 758, "practition": [758, 762, 763, 764], "hobbyist": 758, "tremend": 758, "ecosystem": 758, "gear": 758, "batteri": 758, "zygot": 758, "jl": 758, "workload": 758, "daggerflux": 758, "frontier": 758, "hessian": 758, "2018": 758, "lightweight": [758, 765], "shortcom": 758, "barrier": 758, "inexperienc": 758, "underdevelop": 758, "fanat": 758, "ounc": 758, "infanc": 758, "emerg": 758, "nich": 758, "introduct": 758, "lite": 758, "enterpris": 758, "reinvent": [758, 760], "inertia": 758, "creator": [758, 760], "paszk": 758, "hi": 758, "bulk": 758, "haskel": 758, "dataflow": 759, "distil": 759, "essenc": [759, 764], "enclos": 759, "trace_modul": 759, "scriptfunct": 759, "scriptmodul": 759, "fake": 759, "proxi": 759, "site": 759, "graphmodul": 759, "travi": 760, "oliph": 760, "leader": 760, "cornerston": 760, "numba": 760, "numfocu": 760, "pydata": 760, "confer": 760, "consult": 760, "servic": 760, "expertis": 760, "devop": 760, "mlop": 760, "dashboard": 760, "startup": 760, "mlir": [760, 761, 764], "Their": 760, "held": 760, "privileg": 760, "presum": 760, "llvm": [760, 763], "founder": 760, "tvm": [760, 764], "sustain": 760, "empow": 760, "har": 760, "burden": 760, "benchmark": 760, "convention": 761, "precompil": 761, "executor": 761, "julia": [761, 764], "fsf": 761, "gpl": 761, "biggest": [761, 764], "nvidia": [762, 763], "conduct": 762, "throughput": 762, "autotun": 762, "gpgpu": 762, "talk": 763, "classic": 763, "sycl": 763, "dpc": 763, "processor": 763, "maco": 763, "x86": 763, "oneapi": 763, "ia": 763, "aka": 763, "xeon": 763, "gen9": 763, "xe": 763, "card": 763, "arria": 763, "gx": 763, "fpga": 763, "tune": [763, 764], "lofti": 764, "ambit": 764, "realm": 764, "bedrock": 764, "flux": 764, "bite": 764, "chew": 764, "eagerpi": 764, "tensorli": 764, "thinc": 764, "neuropod": 764, "exhibit": 764, "emploi": 764, "fx": 764, "retrain": 764, "closer": 764, "greatli": 764, "modular": 764, "anywher": 764, "theano": 765, "plaidml": 765, "partial_svd": 765, "excel": 765, "subsystem": 765}, "objects": {"ivy.Array": [[173, 0, 1, "", "abs"], [174, 0, 1, "", "acos"], [175, 0, 1, "", "acosh"], [515, 0, 1, "", "adam_step"], [516, 0, 1, "", "adam_update"], [321, 0, 1, "", "adaptive_avg_pool1d"], [322, 0, 1, "", "adaptive_avg_pool2d"], [323, 0, 1, "", "adaptive_max_pool2d"], [176, 0, 1, "", "add"], [351, 0, 1, "", "adjoint"], [665, 0, 1, "", "all"], [437, 0, 1, "", "all_equal"], [273, 0, 1, "", "allclose"], [177, 0, 1, "", "angle"], [666, 0, 1, "", "any"], [642, 0, 1, "", "argmax"], [643, 0, 1, "", "argmin"], [651, 0, 1, "", "argsort"], [644, 0, 1, "", "argwhere"], [440, 0, 1, "", "array_equal"], [372, 0, 1, "", "as_strided"], [77, 0, 1, "", "asarray"], [178, 0, 1, "", "asin"], [179, 0, 1, "", "asinh"], [441, 0, 1, "", "assert_supports_inplace"], [373, 0, 1, "", "associative_scan"], [105, 0, 1, "", "astype"], [180, 0, 1, "", "atan"], [181, 0, 1, "", "atan2"], [182, 0, 1, "", "atanh"], [374, 0, 1, "", "atleast_1d"], [375, 0, 1, "", "atleast_2d"], [376, 0, 1, "", "atleast_3d"], [325, 0, 1, "", "avg_pool1d"], [326, 0, 1, "", "avg_pool2d"], [327, 0, 1, "", "avg_pool3d"], [407, 0, 1, "", "batch_norm"], [413, 0, 1, "", "bernoulli"], [414, 0, 1, "", "beta"], [274, 0, 1, "", "binarizer"], [594, 0, 1, "", "binary_cross_entropy"], [425, 0, 1, "", "bincount"], [183, 0, 1, "", "bitwise_and"], [184, 0, 1, "", "bitwise_invert"], [185, 0, 1, "", "bitwise_left_shift"], [186, 0, 1, "", "bitwise_or"], [187, 0, 1, "", "bitwise_right_shift"], [188, 0, 1, "", "bitwise_xor"], [257, 0, 1, "", "blackman_window"], [106, 0, 1, "", "broadcast_arrays"], [107, 0, 1, "", "broadcast_to"], [108, 0, 1, "", "can_cast"], [189, 0, 1, "", "ceil"], [564, 0, 1, "", "cholesky"], [597, 0, 1, "", "clip"], [443, 0, 1, "", "clip_matrix_norm"], [444, 0, 1, "", "clip_vector_norm"], [598, 0, 1, "", "concat"], [378, 0, 1, "", "concat_from_sequence"], [352, 0, 1, "", "cond"], [275, 0, 1, "", "conj"], [599, 0, 1, "", "constant_pad"], [550, 0, 1, "", "conv1d"], [551, 0, 1, "", "conv1d_transpose"], [552, 0, 1, "", "conv2d"], [553, 0, 1, "", "conv2d_transpose"], [554, 0, 1, "", "conv3d"], [555, 0, 1, "", "conv3d_transpose"], [83, 0, 1, "", "copy_array"], [276, 0, 1, "", "copysign"], [426, 0, 1, "", "corrcoef"], [190, 0, 1, "", "cos"], [191, 0, 1, "", "cosh"], [277, 0, 1, "", "count_nonzero"], [427, 0, 1, "", "cov"], [565, 0, 1, "", "cross"], [595, 0, 1, "", "cross_entropy"], [428, 0, 1, "", "cummax"], [429, 0, 1, "", "cummin"], [655, 0, 1, "", "cumprod"], [656, 0, 1, "", "cumsum"], [328, 0, 1, "", "dct"], [447, 0, 1, "", "default"], [192, 0, 1, "", "deg2rad"], [558, 0, 1, "", "depthwise_conv2d"], [566, 0, 1, "", "det"], [150, 0, 1, "", "dev"], [329, 0, 1, "", "dft"], [567, 0, 1, "", "diag"], [353, 0, 1, "", "diagflat"], [568, 0, 1, "", "diagonal"], [278, 0, 1, "", "diff"], [279, 0, 1, "", "digamma"], [415, 0, 1, "", "dirichlet"], [193, 0, 1, "", "divide"], [559, 0, 1, "", "dropout"], [330, 0, 1, "", "dropout1d"], [331, 0, 1, "", "dropout2d"], [332, 0, 1, "", "dropout3d"], [379, 0, 1, "", "dsplit"], [380, 0, 1, "", "dstack"], [116, 0, 1, "", "dtype"], [355, 0, 1, "", "eig"], [570, 0, 1, "", "eigh"], [356, 0, 1, "", "eigh_tridiagonal"], [357, 0, 1, "", "eigvals"], [571, 0, 1, "", "eigvalsh"], [448, 0, 1, "", "einops_rearrange"], [449, 0, 1, "", "einops_reduce"], [450, 0, 1, "", "einops_repeat"], [657, 0, 1, "", "einsum"], [248, 0, 1, "", "elu"], [333, 0, 1, "", "embedding"], [85, 0, 1, "", "empty_like"], [194, 0, 1, "", "equal"], [195, 0, 1, "", "erf"], [451, 0, 1, "", "exists"], [196, 0, 1, "", "exp"], [197, 0, 1, "", "exp2"], [381, 0, 1, "", "expand"], [600, 0, 1, "", "expand_dims"], [198, 0, 1, "", "expm1"], [258, 0, 1, "", "eye_like"], [334, 0, 1, "", "fft"], [335, 0, 1, "", "fft2"], [382, 0, 1, "", "fill_diagonal"], [118, 0, 1, "", "finfo"], [280, 0, 1, "", "fix"], [383, 0, 1, "", "flatten"], [601, 0, 1, "", "flip"], [384, 0, 1, "", "fliplr"], [385, 0, 1, "", "flipud"], [281, 0, 1, "", "float_power"], [199, 0, 1, "", "floor"], [200, 0, 1, "", "floor_divide"], [282, 0, 1, "", "fmax"], [201, 0, 1, "", "fmin"], [202, 0, 1, "", "fmod"], [386, 0, 1, "", "fold"], [452, 0, 1, "", "fourier_encode"], [283, 0, 1, "", "frexp"], [87, 0, 1, "", "from_dlpack"], [90, 0, 1, "", "full_like"], [416, 0, 1, "", "gamma"], [455, 0, 1, "", "gather"], [456, 0, 1, "", "gather_nd"], [203, 0, 1, "", "gcd"], [59, 0, 1, "", "gelu"], [459, 0, 1, "", "get_num_dims"], [284, 0, 1, "", "gradient"], [519, 0, 1, "", "gradient_descent_update"], [204, 0, 1, "", "greater"], [205, 0, 1, "", "greater_equal"], [408, 0, 1, "", "group_norm"], [60, 0, 1, "", "hardswish"], [461, 0, 1, "", "has_nans"], [387, 0, 1, "", "heaviside"], [430, 0, 1, "", "histogram"], [388, 0, 1, "", "hsplit"], [389, 0, 1, "", "hstack"], [285, 0, 1, "", "hypot"], [390, 0, 1, "", "i0"], [338, 0, 1, "", "idct"], [339, 0, 1, "", "ifft"], [340, 0, 1, "", "ifftn"], [431, 0, 1, "", "igamma"], [121, 0, 1, "", "iinfo"], [206, 0, 1, "", "imag"], [358, 0, 1, "", "initialize_tucker"], [572, 0, 1, "", "inner"], [463, 0, 1, "", "inplace_decrement"], [464, 0, 1, "", "inplace_increment"], [465, 0, 1, "", "inplace_update"], [409, 0, 1, "", "instance_norm"], [342, 0, 1, "", "interpolate"], [573, 0, 1, "", "inv"], [467, 0, 1, "", "is_array"], [124, 0, 1, "", "is_bool_dtype"], [126, 0, 1, "", "is_float_dtype"], [128, 0, 1, "", "is_int_dtype"], [468, 0, 1, "", "is_ivy_array"], [469, 0, 1, "", "is_ivy_container"], [471, 0, 1, "", "is_native_array"], [130, 0, 1, "", "is_uint_dtype"], [286, 0, 1, "", "isclose"], [207, 0, 1, "", "isfinite"], [472, 0, 1, "", "isin"], [208, 0, 1, "", "isinf"], [209, 0, 1, "", "isnan"], [210, 0, 1, "", "isreal"], [474, 0, 1, "", "itemsize"], [360, 0, 1, "", "kron"], [410, 0, 1, "", "l1_normalize"], [411, 0, 1, "", "l2_normalize"], [521, 0, 1, "", "lamb_update"], [522, 0, 1, "", "lars_update"], [635, 0, 1, "", "layer_norm"], [211, 0, 1, "", "lcm"], [287, 0, 1, "", "ldexp"], [61, 0, 1, "", "leaky_relu"], [288, 0, 1, "", "lerp"], [212, 0, 1, "", "less"], [213, 0, 1, "", "less_equal"], [420, 0, 1, "", "lexsort"], [289, 0, 1, "", "lgamma"], [560, 0, 1, "", "linear"], [91, 0, 1, "", "linspace"], [214, 0, 1, "", "log"], [215, 0, 1, "", "log10"], [216, 0, 1, "", "log1p"], [217, 0, 1, "", "log2"], [62, 0, 1, "", "log_softmax"], [218, 0, 1, "", "logaddexp"], [219, 0, 1, "", "logaddexp2"], [220, 0, 1, "", "logical_and"], [221, 0, 1, "", "logical_not"], [222, 0, 1, "", "logical_or"], [223, 0, 1, "", "logical_xor"], [249, 0, 1, "", "logit"], [250, 0, 1, "", "logsigmoid"], [92, 0, 1, "", "logspace"], [412, 0, 1, "", "lp_normalize"], [561, 0, 1, "", "lstm_update"], [362, 0, 1, "", "make_svd_non_negative"], [575, 0, 1, "", "matmul"], [391, 0, 1, "", "matricize"], [363, 0, 1, "", "matrix_exp"], [576, 0, 1, "", "matrix_norm"], [577, 0, 1, "", "matrix_power"], [578, 0, 1, "", "matrix_rank"], [579, 0, 1, "", "matrix_transpose"], [658, 0, 1, "", "max"], [343, 0, 1, "", "max_pool1d"], [344, 0, 1, "", "max_pool2d"], [345, 0, 1, "", "max_pool3d"], [224, 0, 1, "", "maximum"], [659, 0, 1, "", "mean"], [432, 0, 1, "", "median"], [93, 0, 1, "", "meshgrid"], [660, 0, 1, "", "min"], [225, 0, 1, "", "minimum"], [63, 0, 1, "", "mish"], [364, 0, 1, "", "mode_dot"], [290, 0, 1, "", "modf"], [392, 0, 1, "", "moveaxis"], [652, 0, 1, "", "msort"], [365, 0, 1, "", "multi_dot"], [562, 0, 1, "", "multi_head_attention"], [366, 0, 1, "", "multi_mode_dot"], [636, 0, 1, "", "multinomial"], [226, 0, 1, "", "multiply"], [227, 0, 1, "", "nan_to_num"], [433, 0, 1, "", "nanmean"], [434, 0, 1, "", "nanmedian"], [291, 0, 1, "", "nansum"], [94, 0, 1, "", "native_array"], [228, 0, 1, "", "negative"], [292, 0, 1, "", "nextafter"], [645, 0, 1, "", "nonzero"], [229, 0, 1, "", "not_equal"], [95, 0, 1, "", "one_hot"], [97, 0, 1, "", "ones_like"], [523, 0, 1, "", "optimizer_update"], [580, 0, 1, "", "outer"], [393, 0, 1, "", "pad"], [394, 0, 1, "", "partial_fold"], [395, 0, 1, "", "partial_tensor_to_vec"], [367, 0, 1, "", "partial_tucker"], [396, 0, 1, "", "partial_unfold"], [397, 0, 1, "", "partial_vec_to_tensor"], [602, 0, 1, "", "permute_dims"], [581, 0, 1, "", "pinv"], [417, 0, 1, "", "poisson"], [230, 0, 1, "", "positive"], [231, 0, 1, "", "pow"], [251, 0, 1, "", "prelu"], [661, 0, 1, "", "prod"], [582, 0, 1, "", "qr"], [436, 0, 1, "", "quantile"], [232, 0, 1, "", "rad2deg"], [637, 0, 1, "", "randint"], [638, 0, 1, "", "random_normal"], [639, 0, 1, "", "random_uniform"], [233, 0, 1, "", "real"], [234, 0, 1, "", "reciprocal"], [297, 0, 1, "", "reduce"], [349, 0, 1, "", "reduce_window"], [64, 0, 1, "", "relu"], [252, 0, 1, "", "relu6"], [235, 0, 1, "", "remainder"], [603, 0, 1, "", "repeat"], [604, 0, 1, "", "reshape"], [133, 0, 1, "", "result_type"], [350, 0, 1, "", "rfftn"], [605, 0, 1, "", "roll"], [399, 0, 1, "", "rot90"], [236, 0, 1, "", "round"], [563, 0, 1, "", "scaled_dot_product_attention"], [479, 0, 1, "", "scatter_flat"], [480, 0, 1, "", "scatter_nd"], [653, 0, 1, "", "searchsorted"], [253, 0, 1, "", "selu"], [492, 0, 1, "", "shape"], [641, 0, 1, "", "shuffle"], [65, 0, 1, "", "sigmoid"], [237, 0, 1, "", "sign"], [293, 0, 1, "", "signbit"], [255, 0, 1, "", "silu"], [238, 0, 1, "", "sin"], [294, 0, 1, "", "sinc"], [239, 0, 1, "", "sinh"], [583, 0, 1, "", "slogdet"], [400, 0, 1, "", "soft_thresholding"], [66, 0, 1, "", "softmax"], [67, 0, 1, "", "softplus"], [584, 0, 1, "", "solve"], [654, 0, 1, "", "sort"], [596, 0, 1, "", "sparse_cross_entropy"], [606, 0, 1, "", "split"], [240, 0, 1, "", "sqrt"], [241, 0, 1, "", "square"], [607, 0, 1, "", "squeeze"], [493, 0, 1, "", "stable_divide"], [494, 0, 1, "", "stable_pow"], [608, 0, 1, "", "stack"], [662, 0, 1, "", "std"], [524, 0, 1, "", "stop_gradient"], [495, 0, 1, "", "strides"], [242, 0, 1, "", "subtract"], [663, 0, 1, "", "sum"], [496, 0, 1, "", "supports_inplace_updates"], [585, 0, 1, "", "svd"], [368, 0, 1, "", "svd_flip"], [586, 0, 1, "", "svdvals"], [609, 0, 1, "", "swapaxes"], [401, 0, 1, "", "take_along_axis"], [243, 0, 1, "", "tan"], [244, 0, 1, "", "tanh"], [587, 0, 1, "", "tensordot"], [588, 0, 1, "", "tensorsolve"], [256, 0, 1, "", "thresholded_relu"], [610, 0, 1, "", "tile"], [167, 0, 1, "", "to_device"], [498, 0, 1, "", "to_list"], [500, 0, 1, "", "to_numpy"], [501, 0, 1, "", "to_scalar"], [402, 0, 1, "", "top_k"], [589, 0, 1, "", "trace"], [245, 0, 1, "", "trapz"], [98, 0, 1, "", "tril"], [269, 0, 1, "", "trilu"], [99, 0, 1, "", "triu"], [246, 0, 1, "", "trunc"], [247, 0, 1, "", "trunc_divide"], [369, 0, 1, "", "truncated_svd"], [370, 0, 1, "", "tucker"], [403, 0, 1, "", "unfold"], [647, 0, 1, "", "unique_all"], [404, 0, 1, "", "unique_consecutive"], [648, 0, 1, "", "unique_counts"], [649, 0, 1, "", "unique_inverse"], [650, 0, 1, "", "unique_values"], [418, 0, 1, "", "unravel_index"], [270, 0, 1, "", "unsorted_segment_min"], [271, 0, 1, "", "unsorted_segment_sum"], [611, 0, 1, "", "unstack"], [513, 0, 1, "", "value_is_nan"], [590, 0, 1, "", "vander"], [664, 0, 1, "", "var"], [591, 0, 1, "", "vecdot"], [592, 0, 1, "", "vector_norm"], [593, 0, 1, "", "vector_to_skew_symmetric_matrix"], [405, 0, 1, "", "vsplit"], [406, 0, 1, "", "vstack"], [646, 0, 1, "", "where"], [295, 0, 1, "", "xlogy"], [612, 0, 1, "", "zero_pad"], [102, 0, 1, "", "zeros_like"], [296, 0, 1, "", "zeta"]], "ivy": [[534, 1, 1, "", "ArrayMode"], [530, 1, 1, "", "DefaultComplexDtype"], [531, 1, 1, "", "DefaultDevice"], [530, 1, 1, "", "DefaultDtype"], [530, 1, 1, "", "DefaultFloatDtype"], [530, 1, 1, "", "DefaultIntDtype"], [530, 1, 1, "", "DefaultUintDtype"], [318, 1, 1, "", "NativeSparseArray"], [529, 1, 1, "", "NestedSequence"], [534, 1, 1, "", "PreciseMode"], [531, 1, 1, "", "Profiler"], [318, 1, 1, "", "SparseArray"], [173, 2, 1, "", "abs"], [174, 2, 1, "", "acos"], [175, 2, 1, "", "acosh"], [535, 2, 1, "", "adam_step"], [535, 2, 1, "", "adam_update"], [321, 2, 1, "", "adaptive_avg_pool1d"], [322, 2, 1, "", "adaptive_avg_pool2d"], [323, 2, 1, "", "adaptive_max_pool2d"], [176, 2, 1, "", "add"], [351, 2, 1, "", "adjoint"], [548, 2, 1, "", "all"], [437, 2, 1, "", "all_equal"], [541, 2, 1, "", "all_nested_indices"], [304, 2, 1, "", "allclose"], [177, 2, 1, "", "angle"], [548, 2, 1, "", "any"], [529, 2, 1, "", "arange"], [324, 2, 1, "", "area_interpolate"], [438, 2, 1, "", "arg_info"], [439, 2, 1, "", "arg_names"], [544, 2, 1, "", "argmax"], [544, 2, 1, "", "argmin"], [546, 2, 1, "", "argsort"], [544, 2, 1, "", "argwhere"], [529, 2, 1, "", "array"], [440, 2, 1, "", "array_equal"], [146, 2, 1, "", "as_ivy_dev"], [530, 2, 1, "", "as_ivy_dtype"], [147, 2, 1, "", "as_native_dev"], [530, 2, 1, "", "as_native_dtype"], [310, 2, 1, "", "as_strided"], [529, 2, 1, "", "asarray"], [529, 2, 1, "", "asarray_handle_nestable"], [529, 2, 1, "", "asarray_infer_device"], [529, 2, 1, "", "asarray_infer_dtype"], [529, 2, 1, "", "asarray_inputs_to_native_shapes"], [529, 2, 1, "", "asarray_to_native_arrays_and_back"], [178, 2, 1, "", "asin"], [179, 2, 1, "", "asinh"], [441, 2, 1, "", "assert_supports_inplace"], [310, 2, 1, "", "associative_scan"], [530, 2, 1, "", "astype"], [180, 2, 1, "", "atan"], [181, 2, 1, "", "atan2"], [182, 2, 1, "", "atanh"], [310, 2, 1, "", "atleast_1d"], [310, 2, 1, "", "atleast_2d"], [310, 2, 1, "", "atleast_3d"], [325, 2, 1, "", "avg_pool1d"], [326, 2, 1, "", "avg_pool2d"], [327, 2, 1, "", "avg_pool3d"], [313, 2, 1, "", "batch_norm"], [314, 2, 1, "", "bernoulli"], [314, 2, 1, "", "beta"], [304, 2, 1, "", "binarizer"], [538, 2, 1, "", "binary_cross_entropy"], [319, 2, 1, "", "bincount"], [298, 2, 1, "", "bind_custom_gradient_function"], [183, 2, 1, "", "bitwise_and"], [184, 2, 1, "", "bitwise_invert"], [185, 2, 1, "", "bitwise_left_shift"], [186, 2, 1, "", "bitwise_or"], [187, 2, 1, "", "bitwise_right_shift"], [188, 2, 1, "", "bitwise_xor"], [301, 2, 1, "", "blackman_window"], [530, 2, 1, "", "broadcast_arrays"], [310, 2, 1, "", "broadcast_shapes"], [530, 2, 1, "", "broadcast_to"], [442, 2, 1, "", "cache_fn"], [530, 2, 1, "", "can_cast"], [528, 2, 1, "", "cast_bool"], [189, 2, 1, "", "ceil"], [530, 2, 1, "", "check_float"], [537, 2, 1, "", "cholesky"], [148, 2, 1, "", "clear_cached_mem_on_dev"], [539, 2, 1, "", "clip"], [443, 2, 1, "", "clip_matrix_norm"], [444, 2, 1, "", "clip_vector_norm"], [530, 2, 1, "", "closest_valid_dtype"], [528, 2, 1, "", "cmp_is"], [528, 2, 1, "", "cmp_isnot"], [0, 2, 1, "", "compile"], [539, 2, 1, "", "concat"], [310, 2, 1, "", "concat_from_sequence"], [352, 2, 1, "", "cond"], [304, 2, 1, "", "conj"], [539, 2, 1, "", "constant_pad"], [445, 2, 1, "", "container_types"], [536, 2, 1, "", "conv"], [536, 2, 1, "", "conv1d"], [536, 2, 1, "", "conv1d_transpose"], [536, 2, 1, "", "conv2d"], [536, 2, 1, "", "conv2d_transpose"], [536, 2, 1, "", "conv3d"], [536, 2, 1, "", "conv3d_transpose"], [536, 2, 1, "", "conv_general_dilated"], [536, 2, 1, "", "conv_general_transpose"], [529, 2, 1, "", "copy_array"], [541, 2, 1, "", "copy_nest"], [304, 2, 1, "", "copysign"], [319, 2, 1, "", "corrcoef"], [190, 2, 1, "", "cos"], [191, 2, 1, "", "cosh"], [304, 2, 1, "", "count_nonzero"], [319, 2, 1, "", "cov"], [537, 2, 1, "", "cross"], [538, 2, 1, "", "cross_entropy"], [319, 2, 1, "", "cummax"], [319, 2, 1, "", "cummin"], [547, 2, 1, "", "cumprod"], [547, 2, 1, "", "cumsum"], [446, 2, 1, "", "current_backend_str"], [328, 2, 1, "", "dct"], [447, 2, 1, "", "default"], [530, 2, 1, "", "default_complex_dtype"], [149, 2, 1, "", "default_device"], [530, 2, 1, "", "default_dtype"], [530, 2, 1, "", "default_float_dtype"], [530, 2, 1, "", "default_int_dtype"], [530, 2, 1, "", "default_uint_dtype"], [192, 2, 1, "", "deg2rad"], [536, 2, 1, "", "depthwise_conv2d"], [537, 2, 1, "", "det"], [150, 2, 1, "", "dev"], [151, 2, 1, "", "dev_util"], [329, 2, 1, "", "dft"], [537, 2, 1, "", "diag"], [353, 2, 1, "", "diagflat"], [537, 2, 1, "", "diagonal"], [304, 2, 1, "", "diff"], [304, 2, 1, "", "digamma"], [314, 2, 1, "", "dirichlet"], [193, 2, 1, "", "divide"], [354, 2, 1, "", "dot"], [536, 2, 1, "", "dropout"], [330, 2, 1, "", "dropout1d"], [331, 2, 1, "", "dropout2d"], [332, 2, 1, "", "dropout3d"], [310, 2, 1, "", "dsplit"], [310, 2, 1, "", "dstack"], [530, 2, 1, "", "dtype"], [530, 2, 1, "", "dtype_bits"], [541, 2, 1, "", "duplicate_array_index_chains"], [527, 6, 1, "", "e"], [355, 2, 1, "", "eig"], [537, 2, 1, "", "eigh"], [356, 2, 1, "", "eigh_tridiagonal"], [357, 2, 1, "", "eigvals"], [537, 2, 1, "", "eigvalsh"], [448, 2, 1, "", "einops_rearrange"], [449, 2, 1, "", "einops_reduce"], [450, 2, 1, "", "einops_repeat"], [547, 2, 1, "", "einsum"], [299, 2, 1, "", "elu"], [333, 2, 1, "", "embedding"], [529, 2, 1, "", "empty"], [529, 2, 1, "", "empty_like"], [194, 2, 1, "", "equal"], [195, 2, 1, "", "erf"], [535, 2, 1, "", "execute_with_gradients"], [451, 2, 1, "", "exists"], [196, 2, 1, "", "exp"], [197, 2, 1, "", "exp2"], [310, 2, 1, "", "expand"], [539, 2, 1, "", "expand_dims"], [198, 2, 1, "", "expm1"], [529, 2, 1, "", "eye"], [301, 2, 1, "", "eye_like"], [334, 2, 1, "", "fft"], [335, 2, 1, "", "fft2"], [310, 2, 1, "", "fill_diagonal"], [530, 2, 1, "", "finfo"], [304, 2, 1, "", "fix"], [310, 2, 1, "", "flatten"], [539, 2, 1, "", "flip"], [310, 2, 1, "", "fliplr"], [310, 2, 1, "", "flipud"], [304, 2, 1, "", "float_power"], [199, 2, 1, "", "floor"], [200, 2, 1, "", "floor_divide"], [304, 2, 1, "", "fmax"], [201, 2, 1, "", "fmin"], [202, 2, 1, "", "fmod"], [310, 2, 1, "", "fold"], [540, 2, 1, "", "fomaml_step"], [528, 2, 1, "", "for_loop"], [452, 2, 1, "", "fourier_encode"], [304, 2, 1, "", "frexp"], [529, 2, 1, "", "from_dlpack"], [529, 2, 1, "", "frombuffer"], [529, 2, 1, "", "full"], [529, 2, 1, "", "full_like"], [152, 2, 1, "", "function_supported_devices"], [453, 2, 1, "", "function_supported_devices_and_dtypes"], [530, 2, 1, "", "function_supported_dtypes"], [153, 2, 1, "", "function_unsupported_devices"], [454, 2, 1, "", "function_unsupported_devices_and_dtypes"], [530, 2, 1, "", "function_unsupported_dtypes"], [314, 2, 1, "", "gamma"], [455, 2, 1, "", "gather"], [456, 2, 1, "", "gather_nd"], [203, 2, 1, "", "gcd"], [59, 2, 1, "", "gelu"], [336, 2, 1, "", "generate_einsum_equation"], [457, 2, 1, "", "get_all_arrays_in_memory"], [154, 2, 1, "", "get_all_ivy_arrays_on_dev"], [337, 2, 1, "", "get_interpolate_kernel"], [458, 2, 1, "", "get_item"], [459, 2, 1, "", "get_num_dims"], [460, 2, 1, "", "get_referrers_recursive"], [155, 2, 1, "", "gpu_is_available"], [535, 2, 1, "", "grad"], [304, 2, 1, "", "gradient"], [535, 2, 1, "", "gradient_descent_update"], [204, 2, 1, "", "greater"], [205, 2, 1, "", "greater_equal"], [313, 2, 1, "", "group_norm"], [301, 2, 1, "", "hamming_window"], [156, 2, 1, "", "handle_soft_device_variable"], [301, 2, 1, "", "hann_window"], [60, 2, 1, "", "hardswish"], [461, 2, 1, "", "has_nans"], [310, 2, 1, "", "heaviside"], [319, 2, 1, "", "histogram"], [310, 2, 1, "", "hsplit"], [310, 2, 1, "", "hstack"], [304, 2, 1, "", "hypot"], [310, 2, 1, "", "i0"], [338, 2, 1, "", "idct"], [528, 2, 1, "", "if_else"], [339, 2, 1, "", "ifft"], [340, 2, 1, "", "ifftn"], [319, 2, 1, "", "igamma"], [530, 2, 1, "", "iinfo"], [206, 2, 1, "", "imag"], [541, 2, 1, "", "index_nest"], [301, 2, 1, "", "indices"], [527, 6, 1, "", "inf"], [122, 2, 1, "", "infer_default_dtype"], [358, 2, 1, "", "initialize_tucker"], [537, 2, 1, "", "inner"], [462, 2, 1, "", "inplace_arrays_supported"], [463, 2, 1, "", "inplace_decrement"], [464, 2, 1, "", "inplace_increment"], [465, 2, 1, "", "inplace_update"], [466, 2, 1, "", "inplace_variables_supported"], [541, 2, 1, "", "insert_into_nest_at_index"], [541, 2, 1, "", "insert_into_nest_at_indices"], [313, 2, 1, "", "instance_norm"], [341, 2, 1, "", "interp"], [342, 2, 1, "", "interpolate"], [537, 2, 1, "", "inv"], [123, 2, 1, "", "invalid_dtype"], [317, 2, 1, "", "invert_permutation"], [467, 2, 1, "", "is_array"], [124, 2, 1, "", "is_bool_dtype"], [125, 2, 1, "", "is_complex_dtype"], [126, 2, 1, "", "is_float_dtype"], [127, 2, 1, "", "is_hashable_dtype"], [128, 2, 1, "", "is_int_dtype"], [468, 2, 1, "", "is_ivy_array"], [469, 2, 1, "", "is_ivy_container"], [470, 2, 1, "", "is_ivy_nested_array"], [318, 2, 1, "", "is_ivy_sparse_array"], [471, 2, 1, "", "is_native_array"], [129, 2, 1, "", "is_native_dtype"], [318, 2, 1, "", "is_native_sparse_array"], [130, 2, 1, "", "is_uint_dtype"], [304, 2, 1, "", "isclose"], [207, 2, 1, "", "isfinite"], [472, 2, 1, "", "isin"], [208, 2, 1, "", "isinf"], [209, 2, 1, "", "isnan"], [210, 2, 1, "", "isreal"], [473, 2, 1, "", "isscalar"], [474, 2, 1, "", "itemsize"], [535, 2, 1, "", "jac"], [301, 2, 1, "", "kaiser_bessel_derived_window"], [301, 2, 1, "", "kaiser_window"], [359, 2, 1, "", "khatri_rao"], [360, 2, 1, "", "kron"], [361, 2, 1, "", "kronecker"], [313, 2, 1, "", "l1_normalize"], [313, 2, 1, "", "l2_normalize"], [535, 2, 1, "", "lamb_update"], [535, 2, 1, "", "lars_update"], [542, 2, 1, "", "layer_norm"], [211, 2, 1, "", "lcm"], [304, 2, 1, "", "ldexp"], [526, 2, 1, "", "leaky_relu"], [304, 2, 1, "", "lerp"], [212, 2, 1, "", "less"], [213, 2, 1, "", "less_equal"], [317, 2, 1, "", "lexsort"], [304, 2, 1, "", "lgamma"], [536, 2, 1, "", "linear"], [529, 2, 1, "", "linspace"], [214, 2, 1, "", "log"], [215, 2, 1, "", "log10"], [216, 2, 1, "", "log1p"], [217, 2, 1, "", "log2"], [309, 2, 1, "", "log_poisson_loss"], [526, 2, 1, "", "log_softmax"], [218, 2, 1, "", "logaddexp"], [219, 2, 1, "", "logaddexp2"], [220, 2, 1, "", "logical_and"], [221, 2, 1, "", "logical_not"], [222, 2, 1, "", "logical_or"], [223, 2, 1, "", "logical_xor"], [299, 2, 1, "", "logit"], [299, 2, 1, "", "logsigmoid"], [529, 2, 1, "", "logspace"], [313, 2, 1, "", "lp_normalize"], [536, 2, 1, "", "lstm_update"], [537, 2, 1, "", "lu_factor"], [362, 2, 1, "", "make_svd_non_negative"], [540, 2, 1, "", "maml_step"], [541, 2, 1, "", "map"], [541, 2, 1, "", "map_nest_at_index"], [541, 2, 1, "", "map_nest_at_indices"], [475, 2, 1, "", "match_kwargs"], [537, 2, 1, "", "matmul"], [310, 2, 1, "", "matricize"], [363, 2, 1, "", "matrix_exp"], [537, 2, 1, "", "matrix_norm"], [537, 2, 1, "", "matrix_power"], [537, 2, 1, "", "matrix_rank"], [537, 2, 1, "", "matrix_transpose"], [547, 2, 1, "", "max"], [343, 2, 1, "", "max_pool1d"], [344, 2, 1, "", "max_pool2d"], [345, 2, 1, "", "max_pool3d"], [346, 2, 1, "", "max_unpool1d"], [224, 2, 1, "", "maximum"], [547, 2, 1, "", "mean"], [319, 2, 1, "", "median"], [529, 2, 1, "", "meshgrid"], [547, 2, 1, "", "min"], [225, 2, 1, "", "minimum"], [526, 2, 1, "", "mish"], [364, 2, 1, "", "mode_dot"], [304, 2, 1, "", "modf"], [310, 2, 1, "", "moveaxis"], [546, 2, 1, "", "msort"], [365, 2, 1, "", "multi_dot"], [536, 2, 1, "", "multi_head_attention"], [541, 2, 1, "", "multi_index_nest"], [308, 2, 1, "", "multi_mode_dot"], [543, 2, 1, "", "multinomial"], [226, 2, 1, "", "multiply"], [476, 2, 1, "", "multiprocessing"], [527, 6, 1, "", "nan"], [227, 2, 1, "", "nan_to_num"], [319, 2, 1, "", "nanmean"], [319, 2, 1, "", "nanmedian"], [319, 2, 1, "", "nanquantile"], [304, 2, 1, "", "nansum"], [529, 2, 1, "", "native_array"], [318, 2, 1, "", "native_sparse_array"], [318, 2, 1, "", "native_sparse_array_to_indices_values_and_shape"], [301, 2, 1, "", "ndenumerate"], [301, 2, 1, "", "ndindex"], [347, 2, 1, "", "nearest_interpolate"], [228, 2, 1, "", "negative"], [541, 2, 1, "", "nested_any"], [541, 2, 1, "", "nested_argwhere"], [541, 2, 1, "", "nested_map"], [541, 2, 1, "", "nested_multi_map"], [527, 6, 1, "", "newaxis"], [304, 2, 1, "", "nextafter"], [544, 2, 1, "", "nonzero"], [229, 2, 1, "", "not_equal"], [477, 2, 1, "", "num_arrays_in_memory"], [157, 2, 1, "", "num_cpu_cores"], [158, 2, 1, "", "num_gpus"], [159, 2, 1, "", "num_ivy_arrays_on_dev"], [529, 2, 1, "", "one_hot"], [529, 2, 1, "", "ones"], [529, 2, 1, "", "ones_like"], [535, 2, 1, "", "optimizer_update"], [537, 2, 1, "", "outer"], [310, 2, 1, "", "pad"], [310, 2, 1, "", "partial_fold"], [310, 2, 1, "", "partial_tensor_to_vec"], [308, 2, 1, "", "partial_tucker"], [310, 2, 1, "", "partial_unfold"], [310, 2, 1, "", "partial_vec_to_tensor"], [160, 2, 1, "", "percent_used_mem_on_dev"], [539, 2, 1, "", "permute_dims"], [527, 6, 1, "", "pi"], [537, 2, 1, "", "pinv"], [314, 2, 1, "", "poisson"], [348, 2, 1, "", "pool"], [230, 2, 1, "", "positive"], [231, 2, 1, "", "pow"], [299, 2, 1, "", "prelu"], [478, 2, 1, "", "print_all_arrays_in_memory"], [161, 2, 1, "", "print_all_ivy_arrays_on_dev"], [547, 2, 1, "", "prod"], [131, 2, 1, "", "promote_types"], [132, 2, 1, "", "promote_types_of_inputs"], [541, 2, 1, "", "prune_empty"], [541, 2, 1, "", "prune_nest_at_index"], [541, 2, 1, "", "prune_nest_at_indices"], [310, 2, 1, "", "put_along_axis"], [537, 2, 1, "", "qr"], [319, 2, 1, "", "quantile"], [232, 2, 1, "", "rad2deg"], [543, 2, 1, "", "randint"], [301, 2, 1, "", "random_cp"], [543, 2, 1, "", "random_normal"], [301, 2, 1, "", "random_tucker"], [543, 2, 1, "", "random_uniform"], [233, 2, 1, "", "real"], [234, 2, 1, "", "reciprocal"], [297, 2, 1, "", "reduce"], [349, 2, 1, "", "reduce_window"], [526, 2, 1, "", "relu"], [299, 2, 1, "", "relu6"], [235, 2, 1, "", "remainder"], [539, 2, 1, "", "repeat"], [540, 2, 1, "", "reptile_step"], [539, 2, 1, "", "reshape"], [133, 2, 1, "", "result_type"], [350, 2, 1, "", "rfftn"], [539, 2, 1, "", "roll"], [310, 2, 1, "", "rot90"], [236, 2, 1, "", "round"], [548, 2, 1, "", "save"], [536, 2, 1, "", "scaled_dot_product_attention"], [479, 2, 1, "", "scatter_flat"], [480, 2, 1, "", "scatter_nd"], [546, 2, 1, "", "searchsorted"], [543, 2, 1, "", "seed"], [299, 2, 1, "", "selu"], [299, 2, 1, "", "sequence_length"], [481, 2, 1, "", "set_array_mode"], [134, 2, 1, "", "set_default_complex_dtype"], [162, 2, 1, "", "set_default_device"], [135, 2, 1, "", "set_default_dtype"], [136, 2, 1, "", "set_default_float_dtype"], [137, 2, 1, "", "set_default_int_dtype"], [138, 2, 1, "", "set_default_uint_dtype"], [482, 2, 1, "", "set_exception_trace_mode"], [483, 2, 1, "", "set_item"], [484, 2, 1, "", "set_min_base"], [485, 2, 1, "", "set_min_denominator"], [541, 2, 1, "", "set_nest_at_index"], [541, 2, 1, "", "set_nest_at_indices"], [486, 2, 1, "", "set_nestable_mode"], [487, 2, 1, "", "set_precise_mode"], [534, 2, 1, "", "set_queue_timeout"], [534, 2, 1, "", "set_shape_array_mode"], [534, 2, 1, "", "set_show_func_wrapper_trace_mode"], [163, 2, 1, "", "set_soft_device_mode"], [164, 2, 1, "", "set_split_factor"], [534, 2, 1, "", "set_tmp_dir"], [534, 2, 1, "", "shape"], [543, 2, 1, "", "shuffle"], [526, 2, 1, "", "sigmoid"], [237, 2, 1, "", "sign"], [304, 2, 1, "", "signbit"], [299, 2, 1, "", "silu"], [238, 2, 1, "", "sin"], [304, 2, 1, "", "sinc"], [239, 2, 1, "", "sinh"], [537, 2, 1, "", "slogdet"], [310, 2, 1, "", "soft_thresholding"], [526, 2, 1, "", "softmax"], [526, 2, 1, "", "softplus"], [537, 2, 1, "", "solve"], [546, 2, 1, "", "sort"], [538, 2, 1, "", "sparse_cross_entropy"], [539, 2, 1, "", "split"], [165, 2, 1, "", "split_factor"], [166, 2, 1, "", "split_func_call"], [240, 2, 1, "", "sqrt"], [241, 2, 1, "", "square"], [539, 2, 1, "", "squeeze"], [534, 2, 1, "", "stable_divide"], [534, 2, 1, "", "stable_pow"], [539, 2, 1, "", "stack"], [547, 2, 1, "", "std"], [535, 2, 1, "", "stop_gradient"], [534, 2, 1, "", "strides"], [242, 2, 1, "", "subtract"], [547, 2, 1, "", "sum"], [534, 2, 1, "", "supports_inplace_updates"], [537, 2, 1, "", "svd"], [308, 2, 1, "", "svd_flip"], [537, 2, 1, "", "svdvals"], [539, 2, 1, "", "swapaxes"], [310, 2, 1, "", "take_along_axis"], [243, 2, 1, "", "tan"], [244, 2, 1, "", "tanh"], [537, 2, 1, "", "tensordot"], [537, 2, 1, "", "tensorsolve"], [299, 2, 1, "", "thresholded_relu"], [539, 2, 1, "", "tile"], [167, 2, 1, "", "to_device"], [534, 2, 1, "", "to_ivy_shape"], [534, 2, 1, "", "to_list"], [534, 2, 1, "", "to_native_shape"], [534, 2, 1, "", "to_numpy"], [534, 2, 1, "", "to_scalar"], [310, 2, 1, "", "top_k"], [168, 2, 1, "", "total_mem_on_dev"], [169, 2, 1, "", "tpu_is_available"], [537, 2, 1, "", "trace"], [2, 2, 1, "", "transpile"], [245, 2, 1, "", "trapz"], [529, 2, 1, "", "tril"], [301, 2, 1, "", "tril_indices"], [301, 2, 1, "", "trilu"], [529, 2, 1, "", "triu"], [529, 2, 1, "", "triu_indices"], [246, 2, 1, "", "trunc"], [247, 2, 1, "", "trunc_divide"], [308, 2, 1, "", "truncated_svd"], [534, 2, 1, "", "try_else_none"], [528, 2, 1, "", "try_except"], [308, 2, 1, "", "tucker"], [139, 2, 1, "", "type_promote_arrays"], [310, 2, 1, "", "unfold"], [2, 2, 1, "", "unify"], [545, 2, 1, "", "unique_all"], [310, 2, 1, "", "unique_consecutive"], [545, 2, 1, "", "unique_counts"], [545, 2, 1, "", "unique_inverse"], [545, 2, 1, "", "unique_values"], [315, 2, 1, "", "unravel_index"], [534, 2, 1, "", "unset_array_mode"], [140, 2, 1, "", "unset_default_complex_dtype"], [170, 2, 1, "", "unset_default_device"], [141, 2, 1, "", "unset_default_dtype"], [142, 2, 1, "", "unset_default_float_dtype"], [143, 2, 1, "", "unset_default_int_dtype"], [144, 2, 1, "", "unset_default_uint_dtype"], [534, 2, 1, "", "unset_exception_trace_mode"], [534, 2, 1, "", "unset_min_base"], [534, 2, 1, "", "unset_min_denominator"], [534, 2, 1, "", "unset_nestable_mode"], [534, 2, 1, "", "unset_precise_mode"], [534, 2, 1, "", "unset_queue_timeout"], [534, 2, 1, "", "unset_shape_array_mode"], [534, 2, 1, "", "unset_show_func_wrapper_trace_mode"], [171, 2, 1, "", "unset_soft_device_mode"], [534, 2, 1, "", "unset_tmp_dir"], [301, 2, 1, "", "unsorted_segment_min"], [301, 2, 1, "", "unsorted_segment_sum"], [539, 2, 1, "", "unstack"], [172, 2, 1, "", "used_mem_on_dev"], [145, 2, 1, "", "valid_dtype"], [535, 2, 1, "", "value_and_grad"], [534, 2, 1, "", "value_is_nan"], [537, 2, 1, "", "vander"], [547, 2, 1, "", "var"], [537, 2, 1, "", "vecdot"], [537, 2, 1, "", "vector_norm"], [537, 2, 1, "", "vector_to_skew_symmetric_matrix"], [534, 2, 1, "", "vmap"], [301, 2, 1, "", "vorbis_window"], [310, 2, 1, "", "vsplit"], [310, 2, 1, "", "vstack"], [544, 2, 1, "", "where"], [528, 2, 1, "", "while_loop"], [304, 2, 1, "", "xlogy"], [539, 2, 1, "", "zero_pad"], [529, 2, 1, "", "zeros"], [529, 2, 1, "", "zeros_like"], [304, 2, 1, "", "zeta"]], "ivy.Container": [[173, 0, 1, "", "abs"], [174, 0, 1, "", "acos"], [175, 0, 1, "", "acosh"], [515, 0, 1, "", "adam_step"], [516, 0, 1, "", "adam_update"], [321, 0, 1, "", "adaptive_avg_pool1d"], [322, 0, 1, "", "adaptive_avg_pool2d"], [323, 0, 1, "", "adaptive_max_pool2d"], [176, 0, 1, "", "add"], [351, 0, 1, "", "adjoint"], [665, 0, 1, "", "all"], [437, 0, 1, "", "all_equal"], [273, 0, 1, "", "allclose"], [177, 0, 1, "", "angle"], [666, 0, 1, "", "any"], [642, 0, 1, "", "argmax"], [643, 0, 1, "", "argmin"], [651, 0, 1, "", "argsort"], [644, 0, 1, "", "argwhere"], [440, 0, 1, "", "array_equal"], [372, 0, 1, "", "as_strided"], [77, 0, 1, "", "asarray"], [178, 0, 1, "", "asin"], [179, 0, 1, "", "asinh"], [441, 0, 1, "", "assert_supports_inplace"], [373, 0, 1, "", "associative_scan"], [105, 0, 1, "", "astype"], [180, 0, 1, "", "atan"], [181, 0, 1, "", "atan2"], [182, 0, 1, "", "atanh"], [374, 0, 1, "", "atleast_1d"], [375, 0, 1, "", "atleast_2d"], [376, 0, 1, "", "atleast_3d"], [325, 0, 1, "", "avg_pool1d"], [326, 0, 1, "", "avg_pool2d"], [327, 0, 1, "", "avg_pool3d"], [407, 0, 1, "", "batch_norm"], [413, 0, 1, "", "bernoulli"], [414, 0, 1, "", "beta"], [274, 0, 1, "", "binarizer"], [594, 0, 1, "", "binary_cross_entropy"], [425, 0, 1, "", "bincount"], [183, 0, 1, "", "bitwise_and"], [184, 0, 1, "", "bitwise_invert"], [185, 0, 1, "", "bitwise_left_shift"], [186, 0, 1, "", "bitwise_or"], [187, 0, 1, "", "bitwise_right_shift"], [188, 0, 1, "", "bitwise_xor"], [257, 0, 1, "", "blackman_window"], [106, 0, 1, "", "broadcast_arrays"], [377, 0, 1, "", "broadcast_shapes"], [107, 0, 1, "", "broadcast_to"], [108, 0, 1, "", "can_cast"], [189, 0, 1, "", "ceil"], [564, 0, 1, "", "cholesky"], [597, 0, 1, "", "clip"], [443, 0, 1, "", "clip_matrix_norm"], [444, 0, 1, "", "clip_vector_norm"], [598, 0, 1, "", "concat"], [378, 0, 1, "", "concat_from_sequence"], [352, 0, 1, "", "cond"], [275, 0, 1, "", "conj"], [599, 0, 1, "", "constant_pad"], [550, 0, 1, "", "conv1d"], [551, 0, 1, "", "conv1d_transpose"], [552, 0, 1, "", "conv2d"], [553, 0, 1, "", "conv2d_transpose"], [554, 0, 1, "", "conv3d"], [555, 0, 1, "", "conv3d_transpose"], [83, 0, 1, "", "copy_array"], [276, 0, 1, "", "copysign"], [426, 0, 1, "", "corrcoef"], [190, 0, 1, "", "cos"], [191, 0, 1, "", "cosh"], [277, 0, 1, "", "count_nonzero"], [427, 0, 1, "", "cov"], [565, 0, 1, "", "cross"], [595, 0, 1, "", "cross_entropy"], [428, 0, 1, "", "cummax"], [429, 0, 1, "", "cummin"], [655, 0, 1, "", "cumprod"], [656, 0, 1, "", "cumsum"], [328, 0, 1, "", "dct"], [192, 0, 1, "", "deg2rad"], [558, 0, 1, "", "depthwise_conv2d"], [566, 0, 1, "", "det"], [150, 0, 1, "", "dev"], [329, 0, 1, "", "dft"], [567, 0, 1, "", "diag"], [353, 0, 1, "", "diagflat"], [568, 0, 1, "", "diagonal"], [278, 0, 1, "", "diff"], [279, 0, 1, "", "digamma"], [415, 0, 1, "", "dirichlet"], [193, 0, 1, "", "divide"], [559, 0, 1, "", "dropout"], [330, 0, 1, "", "dropout1d"], [331, 0, 1, "", "dropout2d"], [332, 0, 1, "", "dropout3d"], [379, 0, 1, "", "dsplit"], [380, 0, 1, "", "dstack"], [116, 0, 1, "", "dtype"], [355, 0, 1, "", "eig"], [570, 0, 1, "", "eigh"], [356, 0, 1, "", "eigh_tridiagonal"], [357, 0, 1, "", "eigvals"], [571, 0, 1, "", "eigvalsh"], [448, 0, 1, "", "einops_rearrange"], [449, 0, 1, "", "einops_reduce"], [450, 0, 1, "", "einops_repeat"], [657, 0, 1, "", "einsum"], [248, 0, 1, "", "elu"], [333, 0, 1, "", "embedding"], [85, 0, 1, "", "empty_like"], [194, 0, 1, "", "equal"], [195, 0, 1, "", "erf"], [196, 0, 1, "", "exp"], [197, 0, 1, "", "exp2"], [381, 0, 1, "", "expand"], [600, 0, 1, "", "expand_dims"], [198, 0, 1, "", "expm1"], [258, 0, 1, "", "eye_like"], [334, 0, 1, "", "fft"], [382, 0, 1, "", "fill_diagonal"], [118, 0, 1, "", "finfo"], [280, 0, 1, "", "fix"], [383, 0, 1, "", "flatten"], [601, 0, 1, "", "flip"], [384, 0, 1, "", "fliplr"], [385, 0, 1, "", "flipud"], [281, 0, 1, "", "float_power"], [199, 0, 1, "", "floor"], [200, 0, 1, "", "floor_divide"], [282, 0, 1, "", "fmax"], [201, 0, 1, "", "fmin"], [202, 0, 1, "", "fmod"], [386, 0, 1, "", "fold"], [452, 0, 1, "", "fourier_encode"], [283, 0, 1, "", "frexp"], [87, 0, 1, "", "from_dlpack"], [88, 0, 1, "", "frombuffer"], [90, 0, 1, "", "full_like"], [416, 0, 1, "", "gamma"], [455, 0, 1, "", "gather"], [456, 0, 1, "", "gather_nd"], [203, 0, 1, "", "gcd"], [59, 0, 1, "", "gelu"], [459, 0, 1, "", "get_num_dims"], [284, 0, 1, "", "gradient"], [519, 0, 1, "", "gradient_descent_update"], [204, 0, 1, "", "greater"], [205, 0, 1, "", "greater_equal"], [408, 0, 1, "", "group_norm"], [259, 0, 1, "", "hamming_window"], [260, 0, 1, "", "hann_window"], [60, 0, 1, "", "hardswish"], [461, 0, 1, "", "has_nans"], [387, 0, 1, "", "heaviside"], [430, 0, 1, "", "histogram"], [388, 0, 1, "", "hsplit"], [389, 0, 1, "", "hstack"], [285, 0, 1, "", "hypot"], [390, 0, 1, "", "i0"], [338, 0, 1, "", "idct"], [339, 0, 1, "", "ifft"], [340, 0, 1, "", "ifftn"], [431, 0, 1, "", "igamma"], [121, 0, 1, "", "iinfo"], [206, 0, 1, "", "imag"], [358, 0, 1, "", "initialize_tucker"], [572, 0, 1, "", "inner"], [463, 0, 1, "", "inplace_decrement"], [464, 0, 1, "", "inplace_increment"], [465, 0, 1, "", "inplace_update"], [409, 0, 1, "", "instance_norm"], [342, 0, 1, "", "interpolate"], [573, 0, 1, "", "inv"], [419, 0, 1, "", "invert_permutation"], [467, 0, 1, "", "is_array"], [124, 0, 1, "", "is_bool_dtype"], [125, 0, 1, "", "is_complex_dtype"], [126, 0, 1, "", "is_float_dtype"], [128, 0, 1, "", "is_int_dtype"], [468, 0, 1, "", "is_ivy_array"], [471, 0, 1, "", "is_native_array"], [130, 0, 1, "", "is_uint_dtype"], [286, 0, 1, "", "isclose"], [207, 0, 1, "", "isfinite"], [472, 0, 1, "", "isin"], [208, 0, 1, "", "isinf"], [209, 0, 1, "", "isnan"], [210, 0, 1, "", "isreal"], [474, 0, 1, "", "itemsize"], [262, 0, 1, "", "kaiser_bessel_derived_window"], [263, 0, 1, "", "kaiser_window"], [360, 0, 1, "", "kron"], [410, 0, 1, "", "l1_normalize"], [411, 0, 1, "", "l2_normalize"], [521, 0, 1, "", "lamb_update"], [522, 0, 1, "", "lars_update"], [635, 0, 1, "", "layer_norm"], [211, 0, 1, "", "lcm"], [287, 0, 1, "", "ldexp"], [61, 0, 1, "", "leaky_relu"], [288, 0, 1, "", "lerp"], [212, 0, 1, "", "less"], [213, 0, 1, "", "less_equal"], [420, 0, 1, "", "lexsort"], [560, 0, 1, "", "linear"], [91, 0, 1, "", "linspace"], [214, 0, 1, "", "log"], [215, 0, 1, "", "log10"], [216, 0, 1, "", "log1p"], [217, 0, 1, "", "log2"], [62, 0, 1, "", "log_softmax"], [218, 0, 1, "", "logaddexp"], [219, 0, 1, "", "logaddexp2"], [220, 0, 1, "", "logical_and"], [221, 0, 1, "", "logical_not"], [222, 0, 1, "", "logical_or"], [223, 0, 1, "", "logical_xor"], [249, 0, 1, "", "logit"], [250, 0, 1, "", "logsigmoid"], [92, 0, 1, "", "logspace"], [412, 0, 1, "", "lp_normalize"], [561, 0, 1, "", "lstm_update"], [362, 0, 1, "", "make_svd_non_negative"], [575, 0, 1, "", "matmul"], [391, 0, 1, "", "matricize"], [363, 0, 1, "", "matrix_exp"], [576, 0, 1, "", "matrix_norm"], [577, 0, 1, "", "matrix_power"], [578, 0, 1, "", "matrix_rank"], [579, 0, 1, "", "matrix_transpose"], [658, 0, 1, "", "max"], [343, 0, 1, "", "max_pool1d"], [344, 0, 1, "", "max_pool2d"], [345, 0, 1, "", "max_pool3d"], [224, 0, 1, "", "maximum"], [659, 0, 1, "", "mean"], [432, 0, 1, "", "median"], [93, 0, 1, "", "meshgrid"], [660, 0, 1, "", "min"], [225, 0, 1, "", "minimum"], [63, 0, 1, "", "mish"], [364, 0, 1, "", "mode_dot"], [290, 0, 1, "", "modf"], [392, 0, 1, "", "moveaxis"], [652, 0, 1, "", "msort"], [365, 0, 1, "", "multi_dot"], [562, 0, 1, "", "multi_head_attention"], [366, 0, 1, "", "multi_mode_dot"], [636, 0, 1, "", "multinomial"], [226, 0, 1, "", "multiply"], [227, 0, 1, "", "nan_to_num"], [433, 0, 1, "", "nanmean"], [434, 0, 1, "", "nanmedian"], [291, 0, 1, "", "nansum"], [94, 0, 1, "", "native_array"], [228, 0, 1, "", "negative"], [292, 0, 1, "", "nextafter"], [645, 0, 1, "", "nonzero"], [229, 0, 1, "", "not_equal"], [95, 0, 1, "", "one_hot"], [97, 0, 1, "", "ones_like"], [523, 0, 1, "", "optimizer_update"], [580, 0, 1, "", "outer"], [393, 0, 1, "", "pad"], [394, 0, 1, "", "partial_fold"], [395, 0, 1, "", "partial_tensor_to_vec"], [367, 0, 1, "", "partial_tucker"], [396, 0, 1, "", "partial_unfold"], [397, 0, 1, "", "partial_vec_to_tensor"], [602, 0, 1, "", "permute_dims"], [581, 0, 1, "", "pinv"], [417, 0, 1, "", "poisson"], [230, 0, 1, "", "positive"], [231, 0, 1, "", "pow"], [251, 0, 1, "", "prelu"], [661, 0, 1, "", "prod"], [582, 0, 1, "", "qr"], [436, 0, 1, "", "quantile"], [232, 0, 1, "", "rad2deg"], [637, 0, 1, "", "randint"], [638, 0, 1, "", "random_normal"], [639, 0, 1, "", "random_uniform"], [233, 0, 1, "", "real"], [234, 0, 1, "", "reciprocal"], [297, 0, 1, "", "reduce"], [349, 0, 1, "", "reduce_window"], [64, 0, 1, "", "relu"], [252, 0, 1, "", "relu6"], [235, 0, 1, "", "remainder"], [603, 0, 1, "", "repeat"], [604, 0, 1, "", "reshape"], [133, 0, 1, "", "result_type"], [350, 0, 1, "", "rfftn"], [605, 0, 1, "", "roll"], [399, 0, 1, "", "rot90"], [236, 0, 1, "", "round"], [563, 0, 1, "", "scaled_dot_product_attention"], [479, 0, 1, "", "scatter_flat"], [480, 0, 1, "", "scatter_nd"], [653, 0, 1, "", "searchsorted"], [253, 0, 1, "", "selu"], [641, 0, 1, "", "shuffle"], [65, 0, 1, "", "sigmoid"], [237, 0, 1, "", "sign"], [293, 0, 1, "", "signbit"], [255, 0, 1, "", "silu"], [238, 0, 1, "", "sin"], [294, 0, 1, "", "sinc"], [239, 0, 1, "", "sinh"], [583, 0, 1, "", "slogdet"], [400, 0, 1, "", "soft_thresholding"], [66, 0, 1, "", "softmax"], [67, 0, 1, "", "softplus"], [584, 0, 1, "", "solve"], [654, 0, 1, "", "sort"], [596, 0, 1, "", "sparse_cross_entropy"], [606, 0, 1, "", "split"], [240, 0, 1, "", "sqrt"], [241, 0, 1, "", "square"], [607, 0, 1, "", "squeeze"], [493, 0, 1, "", "stable_divide"], [494, 0, 1, "", "stable_pow"], [608, 0, 1, "", "stack"], [662, 0, 1, "", "std"], [524, 0, 1, "", "stop_gradient"], [495, 0, 1, "", "strides"], [242, 0, 1, "", "subtract"], [663, 0, 1, "", "sum"], [496, 0, 1, "", "supports_inplace_updates"], [585, 0, 1, "", "svd"], [368, 0, 1, "", "svd_flip"], [586, 0, 1, "", "svdvals"], [609, 0, 1, "", "swapaxes"], [401, 0, 1, "", "take_along_axis"], [243, 0, 1, "", "tan"], [244, 0, 1, "", "tanh"], [587, 0, 1, "", "tensordot"], [588, 0, 1, "", "tensorsolve"], [256, 0, 1, "", "thresholded_relu"], [610, 0, 1, "", "tile"], [167, 0, 1, "", "to_device"], [498, 0, 1, "", "to_list"], [500, 0, 1, "", "to_numpy"], [501, 0, 1, "", "to_scalar"], [402, 0, 1, "", "top_k"], [589, 0, 1, "", "trace"], [245, 0, 1, "", "trapz"], [98, 0, 1, "", "tril"], [268, 0, 1, "", "tril_indices"], [269, 0, 1, "", "trilu"], [99, 0, 1, "", "triu"], [100, 0, 1, "", "triu_indices"], [246, 0, 1, "", "trunc"], [247, 0, 1, "", "trunc_divide"], [369, 0, 1, "", "truncated_svd"], [370, 0, 1, "", "tucker"], [403, 0, 1, "", "unfold"], [647, 0, 1, "", "unique_all"], [404, 0, 1, "", "unique_consecutive"], [648, 0, 1, "", "unique_counts"], [649, 0, 1, "", "unique_inverse"], [650, 0, 1, "", "unique_values"], [418, 0, 1, "", "unravel_index"], [270, 0, 1, "", "unsorted_segment_min"], [271, 0, 1, "", "unsorted_segment_sum"], [611, 0, 1, "", "unstack"], [513, 0, 1, "", "value_is_nan"], [590, 0, 1, "", "vander"], [664, 0, 1, "", "var"], [591, 0, 1, "", "vecdot"], [592, 0, 1, "", "vector_norm"], [593, 0, 1, "", "vector_to_skew_symmetric_matrix"], [272, 0, 1, "", "vorbis_window"], [405, 0, 1, "", "vsplit"], [406, 0, 1, "", "vstack"], [646, 0, 1, "", "where"], [295, 0, 1, "", "xlogy"], [612, 0, 1, "", "zero_pad"], [102, 0, 1, "", "zeros_like"], [296, 0, 1, "", "zeta"]], "ivy.data_classes.FactorizedTensor": [[3, 3, 0, "-", "base"], [4, 3, 0, "-", "cp_tensor"], [5, 3, 0, "-", "tucker_tensor"]], "ivy.data_classes.FactorizedTensor.base": [[3, 1, 1, "", "FactorizedTensor"]], "ivy.data_classes.FactorizedTensor.base.FactorizedTensor": [[3, 0, 1, "", "__init__"], [3, 4, 1, "", "_abc_impl"], [3, 0, 1, "", "mode_dot"], [3, 0, 1, "", "norm"], [3, 0, 1, "", "to_tensor"], [3, 0, 1, "", "to_unfolded"], [3, 0, 1, "", "to_vec"]], "ivy.data_classes.FactorizedTensor.cp_tensor": [[4, 1, 1, "", "CPTensor"]], "ivy.data_classes.FactorizedTensor.cp_tensor.CPTensor": [[4, 0, 1, "", "__init__"], [4, 4, 1, "", "_abc_impl"], [4, 0, 1, "", "cp_copy"], [4, 0, 1, "", "cp_flip_sign"], [4, 0, 1, "", "cp_lstsq_grad"], [4, 0, 1, "", "cp_mode_dot"], [4, 0, 1, "", "cp_n_param"], [4, 0, 1, "", "cp_norm"], [4, 0, 1, "", "cp_normalize"], [4, 0, 1, "", "cp_to_tensor"], [4, 0, 1, "", "cp_to_unfolded"], [4, 0, 1, "", "cp_to_vec"], [4, 0, 1, "", "mode_dot"], [4, 5, 1, "", "n_param"], [4, 0, 1, "", "norm"], [4, 0, 1, "", "normalize"], [4, 0, 1, "", "to_tensor"], [4, 0, 1, "", "to_unfolded"], [4, 0, 1, "", "to_vec"], [4, 0, 1, "", "unfolding_dot_khatri_rao"], [4, 0, 1, "", "validate_cp_rank"], [4, 0, 1, "", "validate_cp_tensor"]], "ivy.data_classes.FactorizedTensor.tucker_tensor": [[5, 1, 1, "", "TuckerTensor"]], "ivy.data_classes.FactorizedTensor.tucker_tensor.TuckerTensor": [[5, 0, 1, "", "__init__"], [5, 4, 1, "", "_abc_impl"], [5, 0, 1, "", "mode_dot"], [5, 5, 1, "", "n_param"], [5, 0, 1, "", "to_tensor"], [5, 0, 1, "", "to_unfolded"], [5, 0, 1, "", "to_vec"], [5, 0, 1, "", "tucker_copy"], [5, 0, 1, "", "tucker_mode_dot"], [5, 0, 1, "", "tucker_n_param"], [5, 0, 1, "", "tucker_normalize"], [5, 0, 1, "", "tucker_to_tensor"], [5, 0, 1, "", "tucker_to_unfolded"], [5, 0, 1, "", "tucker_to_vec"], [5, 0, 1, "", "validate_tucker_rank"], [5, 0, 1, "", "validate_tucker_tensor"]], "ivy.data_classes.array": [[6, 3, 0, "-", "activations"], [52, 3, 0, "-", "array"], [7, 3, 0, "-", "conversions"], [8, 3, 0, "-", "creation"], [9, 3, 0, "-", "data_type"], [10, 3, 0, "-", "device"], [11, 3, 0, "-", "elementwise"], [12, 3, 0, "-", "experimental"], [13, 3, 0, "-", "general"], [14, 3, 0, "-", "gradients"], [15, 3, 0, "-", "image"], [16, 3, 0, "-", "layers"], [17, 3, 0, "-", "linear_algebra"], [18, 3, 0, "-", "losses"], [19, 3, 0, "-", "manipulation"], [20, 3, 0, "-", "norms"], [21, 3, 0, "-", "random"], [22, 3, 0, "-", "searching"], [23, 3, 0, "-", "set"], [24, 3, 0, "-", "sorting"], [25, 3, 0, "-", "statistical"], [26, 3, 0, "-", "utility"], [27, 3, 0, "-", "wrapping"]], "ivy.data_classes.array.activations": [[6, 1, 1, "", "_ArrayWithActivations"]], "ivy.data_classes.array.activations._ArrayWithActivations": [[6, 4, 1, "", "_abc_impl"], [6, 0, 1, "", "gelu"], [6, 0, 1, "", "hardswish"], [6, 0, 1, "", "leaky_relu"], [6, 0, 1, "", "log_softmax"], [6, 0, 1, "", "mish"], [6, 0, 1, "", "relu"], [6, 0, 1, "", "sigmoid"], [6, 0, 1, "", "softmax"], [6, 0, 1, "", "softplus"]], "ivy.data_classes.array.array": [[52, 1, 1, "", "Array"]], "ivy.data_classes.array.array.Array": [[52, 5, 1, "", "T"], [52, 0, 1, "", "__abs__"], [52, 0, 1, "", "__add__"], [52, 0, 1, "", "__eq__"], [52, 0, 1, "", "__ge__"], [52, 0, 1, "", "__gt__"], [52, 0, 1, "", "__init__"], [52, 0, 1, "", "__le__"], [52, 0, 1, "", "__lt__"], [52, 0, 1, "", "__ne__"], [52, 0, 1, "", "__pow__"], [52, 0, 1, "", "__radd__"], [52, 0, 1, "", "__rrshift__"], [52, 0, 1, "", "__rshift__"], [52, 0, 1, "", "__rsub__"], [52, 0, 1, "", "__sub__"], [52, 0, 1, "", "__truediv__"], [52, 0, 1, "", "__xor__"], [52, 5, 1, "", "backend"], [52, 5, 1, "", "base"], [52, 5, 1, "", "data"], [52, 5, 1, "", "device"], [52, 5, 1, "", "dtype"], [52, 5, 1, "", "dynamic_backend"], [52, 5, 1, "", "imag"], [52, 5, 1, "", "itemsize"], [52, 5, 1, "", "mT"], [52, 5, 1, "", "ndim"], [52, 5, 1, "", "real"], [52, 5, 1, "", "shape"], [52, 5, 1, "", "size"], [52, 5, 1, "", "strides"]], "ivy.data_classes.array.conversions": [[7, 2, 1, "", "_to_ivy"], [7, 2, 1, "", "_to_native"], [7, 2, 1, "", "args_to_ivy"], [7, 2, 1, "", "args_to_native"], [7, 2, 1, "", "to_ivy"], [7, 2, 1, "", "to_native"]], "ivy.data_classes.array.creation": [[8, 1, 1, "", "_ArrayWithCreation"]], "ivy.data_classes.array.creation._ArrayWithCreation": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "asarray"], [8, 0, 1, "", "copy_array"], [8, 0, 1, "", "empty_like"], [8, 0, 1, "", "from_dlpack"], [8, 0, 1, "", "full_like"], [8, 0, 1, "", "linspace"], [8, 0, 1, "", "logspace"], [8, 0, 1, "", "meshgrid"], [8, 0, 1, "", "native_array"], [8, 0, 1, "", "one_hot"], [8, 0, 1, "", "ones_like"], [8, 0, 1, "", "tril"], [8, 0, 1, "", "triu"], [8, 0, 1, "", "zeros_like"]], "ivy.data_classes.array.data_type": [[9, 1, 1, "", "_ArrayWithDataTypes"]], "ivy.data_classes.array.data_type._ArrayWithDataTypes": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "astype"], [9, 0, 1, "", "broadcast_arrays"], [9, 0, 1, "", "broadcast_to"], [9, 0, 1, "", "can_cast"], [9, 0, 1, "", "dtype"], [9, 0, 1, "", "finfo"], [9, 0, 1, "", "iinfo"], [9, 0, 1, "", "is_bool_dtype"], [9, 0, 1, "", "is_float_dtype"], [9, 0, 1, "", "is_int_dtype"], [9, 0, 1, "", "is_uint_dtype"], [9, 0, 1, "", "result_type"]], "ivy.data_classes.array.device": [[10, 1, 1, "", "_ArrayWithDevice"]], "ivy.data_classes.array.device._ArrayWithDevice": [[10, 4, 1, "", "_abc_impl"], [10, 0, 1, "", "dev"], [10, 0, 1, "", "to_device"]], "ivy.data_classes.array.elementwise": [[11, 1, 1, "", "_ArrayWithElementwise"]], "ivy.data_classes.array.elementwise._ArrayWithElementwise": [[11, 4, 1, "", "_abc_impl"], [11, 0, 1, "", "abs"], [11, 0, 1, "", "acos"], [11, 0, 1, "", "acosh"], [11, 0, 1, "", "add"], [11, 0, 1, "", "angle"], [11, 0, 1, "", "asin"], [11, 0, 1, "", "asinh"], [11, 0, 1, "", "atan"], [11, 0, 1, "", "atan2"], [11, 0, 1, "", "atanh"], [11, 0, 1, "", "bitwise_and"], [11, 0, 1, "", "bitwise_invert"], [11, 0, 1, "", "bitwise_left_shift"], [11, 0, 1, "", "bitwise_or"], [11, 0, 1, "", "bitwise_right_shift"], [11, 0, 1, "", "bitwise_xor"], [11, 0, 1, "", "ceil"], [11, 0, 1, "", "cos"], [11, 0, 1, "", "cosh"], [11, 0, 1, "", "deg2rad"], [11, 0, 1, "", "divide"], [11, 0, 1, "", "equal"], [11, 0, 1, "", "erf"], [11, 0, 1, "", "exp"], [11, 0, 1, "", "exp2"], [11, 0, 1, "", "expm1"], [11, 0, 1, "", "floor"], [11, 0, 1, "", "floor_divide"], [11, 0, 1, "", "fmin"], [11, 0, 1, "", "gcd"], [11, 0, 1, "", "greater"], [11, 0, 1, "", "greater_equal"], [11, 0, 1, "", "imag"], [11, 0, 1, "", "isfinite"], [11, 0, 1, "", "isinf"], [11, 0, 1, "", "isnan"], [11, 0, 1, "", "isreal"], [11, 0, 1, "", "lcm"], [11, 0, 1, "", "less"], [11, 0, 1, "", "less_equal"], [11, 0, 1, "", "log"], [11, 0, 1, "", "log10"], [11, 0, 1, "", "log1p"], [11, 0, 1, "", "log2"], [11, 0, 1, "", "logaddexp"], [11, 0, 1, "", "logaddexp2"], [11, 0, 1, "", "logical_and"], [11, 0, 1, "", "logical_not"], [11, 0, 1, "", "logical_or"], [11, 0, 1, "", "logical_xor"], [11, 0, 1, "", "maximum"], [11, 0, 1, "", "minimum"], [11, 0, 1, "", "multiply"], [11, 0, 1, "", "nan_to_num"], [11, 0, 1, "", "negative"], [11, 0, 1, "", "not_equal"], [11, 0, 1, "", "positive"], [11, 0, 1, "", "pow"], [11, 0, 1, "", "rad2deg"], [11, 0, 1, "", "real"], [11, 0, 1, "", "reciprocal"], [11, 0, 1, "", "remainder"], [11, 0, 1, "", "round"], [11, 0, 1, "", "sign"], [11, 0, 1, "", "sin"], [11, 0, 1, "", "sinh"], [11, 0, 1, "", "sqrt"], [11, 0, 1, "", "square"], [11, 0, 1, "", "subtract"], [11, 0, 1, "", "tan"], [11, 0, 1, "", "tanh"], [11, 0, 1, "", "trapz"], [11, 0, 1, "", "trunc"], [11, 0, 1, "", "trunc_divide"]], "ivy.data_classes.array.experimental": [[12, 3, 0, "-", "activations"], [12, 3, 0, "-", "conversions"], [12, 3, 0, "-", "creation"], [12, 3, 0, "-", "data_type"], [12, 3, 0, "-", "device"], [12, 3, 0, "-", "elementwise"], [12, 3, 0, "-", "general"], [12, 3, 0, "-", "gradients"], [12, 3, 0, "-", "image"], [12, 3, 0, "-", "layers"], [12, 3, 0, "-", "linear_algebra"], [12, 3, 0, "-", "losses"], [12, 3, 0, "-", "manipulation"], [12, 3, 0, "-", "norms"], [12, 3, 0, "-", "random"], [12, 3, 0, "-", "searching"], [12, 3, 0, "-", "set"], [12, 3, 0, "-", "sorting"], [12, 3, 0, "-", "statistical"], [12, 3, 0, "-", "utility"]], "ivy.data_classes.array.experimental.activations": [[12, 1, 1, "", "_ArrayWithActivationsExperimental"]], "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental": [[12, 4, 1, "", "_abc_impl"], [12, 0, 1, "", "elu"], [12, 0, 1, "", "logit"], [12, 0, 1, "", "logsigmoid"], [12, 0, 1, "", "prelu"], [12, 0, 1, "", "relu6"], [12, 0, 1, "", "selu"], [12, 0, 1, "", "silu"], [12, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.array.experimental.conversions": [[12, 1, 1, "", "_ArrayWithConversionsExperimental"]], "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental": [[12, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.creation": [[12, 1, 1, "", "_ArrayWithCreationExperimental"]], "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental": [[12, 4, 1, "", "_abc_impl"], [12, 0, 1, "", "blackman_window"], [12, 0, 1, "", "eye_like"], [12, 0, 1, "", "trilu"], [12, 0, 1, "", "unsorted_segment_min"], [12, 0, 1, "", "unsorted_segment_sum"]], "ivy.data_classes.array.experimental.data_type": [[12, 1, 1, "", "_ArrayWithData_typeExperimental"]], "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental": [[12, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.device": [[12, 1, 1, "", "_ArrayWithDeviceExperimental"]], "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental": [[12, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.elementwise": [[12, 1, 1, "", "_ArrayWithElementWiseExperimental"]], "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental": [[12, 4, 1, "", "_abc_impl"], [12, 0, 1, "", "allclose"], [12, 0, 1, "", "binarizer"], [12, 0, 1, "", "conj"], [12, 0, 1, "", "copysign"], [12, 0, 1, "", "count_nonzero"], [12, 0, 1, "", "diff"], [12, 0, 1, "", "digamma"], [12, 0, 1, "", "fix"], [12, 0, 1, "", "float_power"], [12, 0, 1, "", "fmax"], [12, 0, 1, "", "fmod"], [12, 0, 1, "", "frexp"], [12, 0, 1, "", "gradient"], [12, 0, 1, "", "hypot"], [12, 0, 1, "", "isclose"], [12, 0, 1, "", "ldexp"], [12, 0, 1, "", "lerp"], [12, 0, 1, "", "lgamma"], [12, 0, 1, "", "modf"], [12, 0, 1, "", "nansum"], [12, 0, 1, "", "nextafter"], [12, 0, 1, "", "signbit"], [12, 0, 1, "", "sinc"], [12, 0, 1, "", "xlogy"], [12, 0, 1, "", "zeta"]], "ivy.data_classes.array.experimental.general": [[12, 1, 1, "", "_ArrayWithGeneralExperimental"]], "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental": [[12, 4, 1, "", "_abc_impl"], [12, 0, 1, "", "reduce"]], "ivy.data_classes.array.experimental.gradients": [[12, 1, 1, "", "_ArrayWithGradientsExperimental"]], "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental": [[12, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.image": [[12, 1, 1, "", "_ArrayWithImageExperimental"]], "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental": [[12, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.layers": [[12, 1, 1, "", "_ArrayWithLayersExperimental"]], "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental": [[12, 4, 1, "", "_abc_impl"], [12, 0, 1, "", "adaptive_avg_pool1d"], [12, 0, 1, "", "adaptive_avg_pool2d"], [12, 0, 1, "", "adaptive_max_pool2d"], [12, 0, 1, "", "avg_pool1d"], [12, 0, 1, "", "avg_pool2d"], [12, 0, 1, "", "avg_pool3d"], [12, 0, 1, "", "dct"], [12, 0, 1, "", "dft"], [12, 0, 1, "", "embedding"], [12, 0, 1, "", "fft"], [12, 0, 1, "", "fft2"], [12, 0, 1, "", "idct"], [12, 0, 1, "", "ifft"], [12, 0, 1, "", "ifftn"], [12, 0, 1, "", "interpolate"], [12, 0, 1, "", "max_pool1d"], [12, 0, 1, "", "max_pool2d"], [12, 0, 1, "", "max_pool3d"], [12, 0, 1, "", "reduce_window"], [12, 0, 1, "", "rfftn"]], "ivy.data_classes.array.experimental.linear_algebra": [[12, 1, 1, "", "_ArrayWithLinearAlgebraExperimental"]], "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental": [[12, 4, 1, "", "_abc_impl"], [12, 0, 1, "", "adjoint"], [12, 0, 1, "", "cond"], [12, 0, 1, "", "diagflat"], [12, 0, 1, "", "eig"], [12, 0, 1, "", "eigh_tridiagonal"], [12, 0, 1, "", "eigvals"], [12, 0, 1, "", "initialize_tucker"], [12, 0, 1, "", "kron"], [12, 0, 1, "", "make_svd_non_negative"], [12, 0, 1, "", "matrix_exp"], [12, 0, 1, "", "mode_dot"], [12, 0, 1, "", "multi_dot"], [12, 0, 1, "", "multi_mode_dot"], [12, 0, 1, "", "partial_tucker"], [12, 0, 1, "", "svd_flip"], [12, 0, 1, "", "truncated_svd"], [12, 0, 1, "", "tucker"]], "ivy.data_classes.array.experimental.losses": [[12, 1, 1, "", "_ArrayWithLossesExperimental"]], "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental": [[12, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.manipulation": [[12, 1, 1, "", "_ArrayWithManipulationExperimental"]], "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental": [[12, 4, 1, "", "_abc_impl"], [12, 0, 1, "", "as_strided"], [12, 0, 1, "", "associative_scan"], [12, 0, 1, "", "atleast_1d"], [12, 0, 1, "", "atleast_2d"], [12, 0, 1, "", "atleast_3d"], [12, 0, 1, "", "concat_from_sequence"], [12, 0, 1, "", "dsplit"], [12, 0, 1, "", "dstack"], [12, 0, 1, "", "expand"], [12, 0, 1, "", "fill_diagonal"], [12, 0, 1, "", "flatten"], [12, 0, 1, "", "fliplr"], [12, 0, 1, "", "flipud"], [12, 0, 1, "", "fold"], [12, 0, 1, "", "heaviside"], [12, 0, 1, "", "hsplit"], [12, 0, 1, "", "hstack"], [12, 0, 1, "", "i0"], [12, 0, 1, "", "matricize"], [12, 0, 1, "", "moveaxis"], [12, 0, 1, "", "pad"], [12, 0, 1, "", "partial_fold"], [12, 0, 1, "", "partial_tensor_to_vec"], [12, 0, 1, "", "partial_unfold"], [12, 0, 1, "", "partial_vec_to_tensor"], [12, 0, 1, "", "rot90"], [12, 0, 1, "", "soft_thresholding"], [12, 0, 1, "", "take_along_axis"], [12, 0, 1, "", "top_k"], [12, 0, 1, "", "unfold"], [12, 0, 1, "", "unique_consecutive"], [12, 0, 1, "", "vsplit"], [12, 0, 1, "", "vstack"]], "ivy.data_classes.array.experimental.norms": [[12, 1, 1, "", "_ArrayWithNormsExperimental"]], "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental": [[12, 4, 1, "", "_abc_impl"], [12, 0, 1, "", "batch_norm"], [12, 0, 1, "", "group_norm"], [12, 0, 1, "", "instance_norm"], [12, 0, 1, "", "l1_normalize"], [12, 0, 1, "", "l2_normalize"], [12, 0, 1, "", "lp_normalize"]], "ivy.data_classes.array.experimental.random": [[12, 1, 1, "", "_ArrayWithRandomExperimental"]], "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental": [[12, 4, 1, "", "_abc_impl"], [12, 0, 1, "", "bernoulli"], [12, 0, 1, "", "beta"], [12, 0, 1, "", "dirichlet"], [12, 0, 1, "", "gamma"], [12, 0, 1, "", "poisson"]], "ivy.data_classes.array.experimental.searching": [[12, 1, 1, "", "_ArrayWithSearchingExperimental"]], "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental": [[12, 4, 1, "", "_abc_impl"], [12, 0, 1, "", "unravel_index"]], "ivy.data_classes.array.experimental.set": [[12, 1, 1, "", "_ArrayWithSetExperimental"]], "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental": [[12, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.sorting": [[12, 1, 1, "", "_ArrayWithSortingExperimental"]], "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental": [[12, 4, 1, "", "_abc_impl"], [12, 0, 1, "", "lexsort"]], "ivy.data_classes.array.experimental.statistical": [[12, 1, 1, "", "_ArrayWithStatisticalExperimental"]], "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental": [[12, 4, 1, "", "_abc_impl"], [12, 0, 1, "", "bincount"], [12, 0, 1, "", "corrcoef"], [12, 0, 1, "", "cov"], [12, 0, 1, "", "cummax"], [12, 0, 1, "", "cummin"], [12, 0, 1, "", "histogram"], [12, 0, 1, "", "igamma"], [12, 0, 1, "", "median"], [12, 0, 1, "", "nanmean"], [12, 0, 1, "", "nanmedian"], [12, 0, 1, "", "quantile"]], "ivy.data_classes.array.experimental.utility": [[12, 1, 1, "", "_ArrayWithUtilityExperimental"]], "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental": [[12, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.general": [[13, 1, 1, "", "_ArrayWithGeneral"]], "ivy.data_classes.array.general._ArrayWithGeneral": [[13, 4, 1, "", "_abc_impl"], [13, 0, 1, "", "all_equal"], [13, 0, 1, "", "array_equal"], [13, 0, 1, "", "assert_supports_inplace"], [13, 0, 1, "", "clip_matrix_norm"], [13, 0, 1, "", "clip_vector_norm"], [13, 0, 1, "", "default"], [13, 0, 1, "", "einops_rearrange"], [13, 0, 1, "", "einops_reduce"], [13, 0, 1, "", "einops_repeat"], [13, 0, 1, "", "exists"], [13, 0, 1, "", "fourier_encode"], [13, 0, 1, "", "gather"], [13, 0, 1, "", "gather_nd"], [13, 0, 1, "", "get_num_dims"], [13, 0, 1, "", "has_nans"], [13, 0, 1, "", "inplace_decrement"], [13, 0, 1, "", "inplace_increment"], [13, 0, 1, "", "inplace_update"], [13, 0, 1, "", "is_array"], [13, 0, 1, "", "is_ivy_array"], [13, 0, 1, "", "is_ivy_container"], [13, 0, 1, "", "is_native_array"], [13, 0, 1, "", "isin"], [13, 0, 1, "", "scatter_flat"], [13, 0, 1, "", "scatter_nd"], [13, 0, 1, "", "stable_divide"], [13, 0, 1, "", "stable_pow"], [13, 0, 1, "", "supports_inplace_updates"], [13, 0, 1, "", "to_file"], [13, 0, 1, "", "to_list"], [13, 0, 1, "", "to_numpy"], [13, 0, 1, "", "to_scalar"], [13, 0, 1, "", "value_is_nan"]], "ivy.data_classes.array.gradients": [[14, 1, 1, "", "_ArrayWithGradients"]], "ivy.data_classes.array.gradients._ArrayWithGradients": [[14, 4, 1, "", "_abc_impl"], [14, 0, 1, "", "adam_step"], [14, 0, 1, "", "adam_update"], [14, 0, 1, "", "gradient_descent_update"], [14, 0, 1, "", "lamb_update"], [14, 0, 1, "", "lars_update"], [14, 0, 1, "", "optimizer_update"], [14, 0, 1, "", "stop_gradient"]], "ivy.data_classes.array.image": [[15, 1, 1, "", "_ArrayWithImage"]], "ivy.data_classes.array.image._ArrayWithImage": [[15, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.layers": [[16, 1, 1, "", "_ArrayWithLayers"]], "ivy.data_classes.array.layers._ArrayWithLayers": [[16, 4, 1, "", "_abc_impl"], [16, 0, 1, "", "conv1d"], [16, 0, 1, "", "conv1d_transpose"], [16, 0, 1, "", "conv2d"], [16, 0, 1, "", "conv2d_transpose"], [16, 0, 1, "", "conv3d"], [16, 0, 1, "", "conv3d_transpose"], [16, 0, 1, "", "depthwise_conv2d"], [16, 0, 1, "", "dropout"], [16, 0, 1, "", "dropout1d"], [16, 0, 1, "", "dropout2d"], [16, 0, 1, "", "dropout3d"], [16, 0, 1, "", "linear"], [16, 0, 1, "", "lstm_update"], [16, 0, 1, "", "multi_head_attention"], [16, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.array.linear_algebra": [[17, 1, 1, "", "_ArrayWithLinearAlgebra"]], "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra": [[17, 4, 1, "", "_abc_impl"], [17, 0, 1, "", "cholesky"], [17, 0, 1, "", "cross"], [17, 0, 1, "", "det"], [17, 0, 1, "", "diag"], [17, 0, 1, "", "diagonal"], [17, 0, 1, "", "eig"], [17, 0, 1, "", "eigh"], [17, 0, 1, "", "eigvalsh"], [17, 0, 1, "", "inner"], [17, 0, 1, "", "inv"], [17, 0, 1, "", "matmul"], [17, 0, 1, "", "matrix_norm"], [17, 0, 1, "", "matrix_power"], [17, 0, 1, "", "matrix_rank"], [17, 0, 1, "", "matrix_transpose"], [17, 0, 1, "", "outer"], [17, 0, 1, "", "pinv"], [17, 0, 1, "", "qr"], [17, 0, 1, "", "slogdet"], [17, 0, 1, "", "solve"], [17, 0, 1, "", "svd"], [17, 0, 1, "", "svdvals"], [17, 0, 1, "", "tensordot"], [17, 0, 1, "", "tensorsolve"], [17, 0, 1, "", "trace"], [17, 0, 1, "", "vander"], [17, 0, 1, "", "vecdot"], [17, 0, 1, "", "vector_norm"], [17, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.array.losses": [[18, 1, 1, "", "_ArrayWithLosses"]], "ivy.data_classes.array.losses._ArrayWithLosses": [[18, 4, 1, "", "_abc_impl"], [18, 0, 1, "", "binary_cross_entropy"], [18, 0, 1, "", "cross_entropy"], [18, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.array.manipulation": [[19, 1, 1, "", "_ArrayWithManipulation"]], "ivy.data_classes.array.manipulation._ArrayWithManipulation": [[19, 4, 1, "", "_abc_impl"], [19, 0, 1, "", "clip"], [19, 0, 1, "", "concat"], [19, 0, 1, "", "constant_pad"], [19, 0, 1, "", "expand_dims"], [19, 0, 1, "", "flip"], [19, 0, 1, "", "permute_dims"], [19, 0, 1, "", "repeat"], [19, 0, 1, "", "reshape"], [19, 0, 1, "", "roll"], [19, 0, 1, "", "split"], [19, 0, 1, "", "squeeze"], [19, 0, 1, "", "stack"], [19, 0, 1, "", "swapaxes"], [19, 0, 1, "", "tile"], [19, 0, 1, "", "unstack"], [19, 0, 1, "", "view"], [19, 0, 1, "", "zero_pad"]], "ivy.data_classes.array.norms": [[20, 1, 1, "", "_ArrayWithNorms"]], "ivy.data_classes.array.norms._ArrayWithNorms": [[20, 4, 1, "", "_abc_impl"], [20, 0, 1, "", "layer_norm"]], "ivy.data_classes.array.random": [[21, 1, 1, "", "_ArrayWithRandom"]], "ivy.data_classes.array.random._ArrayWithRandom": [[21, 4, 1, "", "_abc_impl"], [21, 0, 1, "", "multinomial"], [21, 0, 1, "", "randint"], [21, 0, 1, "", "random_normal"], [21, 0, 1, "", "random_uniform"], [21, 0, 1, "", "shuffle"]], "ivy.data_classes.array.searching": [[22, 1, 1, "", "_ArrayWithSearching"]], "ivy.data_classes.array.searching._ArrayWithSearching": [[22, 4, 1, "", "_abc_impl"], [22, 0, 1, "", "argmax"], [22, 0, 1, "", "argmin"], [22, 0, 1, "", "argwhere"], [22, 0, 1, "", "nonzero"], [22, 0, 1, "", "where"]], "ivy.data_classes.array.set": [[23, 1, 1, "", "_ArrayWithSet"]], "ivy.data_classes.array.set._ArrayWithSet": [[23, 4, 1, "", "_abc_impl"], [23, 0, 1, "", "unique_all"], [23, 0, 1, "", "unique_counts"], [23, 0, 1, "", "unique_inverse"], [23, 0, 1, "", "unique_values"]], "ivy.data_classes.array.sorting": [[24, 1, 1, "", "_ArrayWithSorting"]], "ivy.data_classes.array.sorting._ArrayWithSorting": [[24, 4, 1, "", "_abc_impl"], [24, 0, 1, "", "argsort"], [24, 0, 1, "", "msort"], [24, 0, 1, "", "searchsorted"], [24, 0, 1, "", "sort"]], "ivy.data_classes.array.statistical": [[25, 1, 1, "", "_ArrayWithStatistical"]], "ivy.data_classes.array.statistical._ArrayWithStatistical": [[25, 4, 1, "", "_abc_impl"], [25, 0, 1, "", "cumprod"], [25, 0, 1, "", "cumsum"], [25, 0, 1, "", "einsum"], [25, 0, 1, "", "max"], [25, 0, 1, "", "mean"], [25, 0, 1, "", "min"], [25, 0, 1, "", "prod"], [25, 0, 1, "", "std"], [25, 0, 1, "", "sum"], [25, 0, 1, "", "var"]], "ivy.data_classes.array.utility": [[26, 1, 1, "", "_ArrayWithUtility"]], "ivy.data_classes.array.utility._ArrayWithUtility": [[26, 4, 1, "", "_abc_impl"], [26, 0, 1, "", "all"], [26, 0, 1, "", "any"]], "ivy.data_classes.array.wrapping": [[27, 2, 1, "", "_wrap_function"], [27, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy.data_classes.container": [[28, 3, 0, "-", "activations"], [29, 3, 0, "-", "base"], [53, 3, 0, "-", "container"], [30, 3, 0, "-", "conversions"], [31, 3, 0, "-", "creation"], [32, 3, 0, "-", "data_type"], [33, 3, 0, "-", "device"], [34, 3, 0, "-", "elementwise"], [35, 3, 0, "-", "experimental"], [36, 3, 0, "-", "general"], [37, 3, 0, "-", "gradients"], [38, 3, 0, "-", "image"], [39, 3, 0, "-", "layers"], [40, 3, 0, "-", "linear_algebra"], [41, 3, 0, "-", "losses"], [42, 3, 0, "-", "manipulation"], [43, 3, 0, "-", "norms"], [44, 3, 0, "-", "random"], [45, 3, 0, "-", "searching"], [46, 3, 0, "-", "set"], [47, 3, 0, "-", "sorting"], [48, 3, 0, "-", "statistical"], [49, 3, 0, "-", "utility"], [50, 3, 0, "-", "wrapping"]], "ivy.data_classes.container.activations": [[28, 1, 1, "", "_ContainerWithActivations"]], "ivy.data_classes.container.activations._ContainerWithActivations": [[28, 4, 1, "", "_abc_impl"], [28, 0, 1, "", "_static_gelu"], [28, 0, 1, "", "_static_hardswish"], [28, 0, 1, "", "_static_leaky_relu"], [28, 0, 1, "", "_static_log_softmax"], [28, 0, 1, "", "_static_mish"], [28, 0, 1, "", "_static_relu"], [28, 0, 1, "", "_static_sigmoid"], [28, 0, 1, "", "_static_softmax"], [28, 0, 1, "", "_static_softplus"], [28, 0, 1, "", "gelu"], [28, 0, 1, "", "hardswish"], [28, 0, 1, "", "leaky_relu"], [28, 0, 1, "", "log_softmax"], [28, 0, 1, "", "mish"], [28, 0, 1, "", "relu"], [28, 0, 1, "", "sigmoid"], [28, 0, 1, "", "softmax"], [28, 0, 1, "", "softplus"]], "ivy.data_classes.container.base": [[29, 1, 1, "", "ContainerBase"], [29, 2, 1, "", "_is_jsonable"], [29, 2, 1, "", "_repr"]], "ivy.data_classes.container.base.ContainerBase": [[29, 0, 1, "", "__getitem__"], [29, 0, 1, "", "__init__"], [29, 0, 1, "", "__setitem__"], [29, 4, 1, "", "_abc_impl"], [29, 0, 1, "", "_cont_at_key_chains_input_as_dict"], [29, 0, 1, "", "_cont_at_key_chains_input_as_seq"], [29, 0, 1, "", "_cont_call_static_method_with_flexible_args"], [29, 0, 1, "", "_cont_concat_unify"], [29, 0, 1, "", "_cont_get_dev"], [29, 0, 1, "", "_cont_get_shape"], [29, 0, 1, "", "_cont_get_shapes"], [29, 5, 1, "", "_cont_ivy"], [29, 0, 1, "", "_cont_mean_unify"], [29, 0, 1, "", "_cont_prune_key_chains_input_as_dict"], [29, 0, 1, "", "_cont_prune_key_chains_input_as_seq"], [29, 0, 1, "", "_cont_slice_keys"], [29, 0, 1, "", "_cont_sum_unify"], [29, 0, 1, "", "_get_queue_item"], [29, 0, 1, "", "cont_all_false"], [29, 0, 1, "", "cont_all_key_chains"], [29, 0, 1, "", "cont_all_true"], [29, 0, 1, "", "cont_as_bools"], [29, 0, 1, "", "cont_assert_contains_sub_container"], [29, 0, 1, "", "cont_assert_contains_sub_structure"], [29, 0, 1, "", "cont_assert_identical"], [29, 0, 1, "", "cont_assert_identical_structure"], [29, 0, 1, "", "cont_at_key_chain"], [29, 0, 1, "", "cont_at_key_chains"], [29, 0, 1, "", "cont_at_keys"], [29, 0, 1, "", "cont_combine"], [29, 0, 1, "", "cont_common_key_chains"], [29, 5, 1, "", "cont_config"], [29, 0, 1, "", "cont_contains_sub_container"], [29, 0, 1, "", "cont_contains_sub_structure"], [29, 0, 1, "", "cont_copy"], [29, 0, 1, "", "cont_create_if_absent"], [29, 0, 1, "", "cont_cutoff_at_depth"], [29, 0, 1, "", "cont_cutoff_at_height"], [29, 0, 1, "", "cont_deep_copy"], [29, 5, 1, "", "cont_dev"], [29, 5, 1, "", "cont_dev_str"], [29, 0, 1, "", "cont_diff"], [29, 0, 1, "", "cont_duplicate_array_keychains"], [29, 0, 1, "", "cont_find_sub_container"], [29, 0, 1, "", "cont_find_sub_structure"], [29, 0, 1, "", "cont_flatten_key_chain"], [29, 0, 1, "", "cont_flatten_key_chains"], [29, 0, 1, "", "cont_format_key_chains"], [29, 0, 1, "", "cont_from_disk_as_hdf5"], [29, 0, 1, "", "cont_from_disk_as_json"], [29, 0, 1, "", "cont_from_disk_as_pickled"], [29, 0, 1, "", "cont_from_flat_list"], [29, 0, 1, "", "cont_handle_inplace"], [29, 0, 1, "", "cont_has_key"], [29, 0, 1, "", "cont_has_key_chain"], [29, 0, 1, "", "cont_identical"], [29, 0, 1, "", "cont_identical_array_shapes"], [29, 0, 1, "", "cont_identical_configs"], [29, 0, 1, "", "cont_identical_structure"], [29, 0, 1, "", "cont_if_exists"], [29, 0, 1, "", "cont_inplace_update"], [29, 5, 1, "", "cont_ivy"], [29, 0, 1, "", "cont_key_chains_containing"], [29, 0, 1, "", "cont_list_join"], [29, 0, 1, "", "cont_list_stack"], [29, 0, 1, "", "cont_load"], [29, 0, 1, "", "cont_map"], [29, 0, 1, "", "cont_map_sub_conts"], [29, 5, 1, "", "cont_max_depth"], [29, 0, 1, "", "cont_multi_map"], [29, 0, 1, "", "cont_multi_map_in_function"], [29, 0, 1, "", "cont_num_arrays"], [29, 0, 1, "", "cont_overwrite_at_key_chain"], [29, 0, 1, "", "cont_overwrite_at_key_chains"], [29, 0, 1, "", "cont_prune_empty"], [29, 0, 1, "", "cont_prune_key_chain"], [29, 0, 1, "", "cont_prune_key_chains"], [29, 0, 1, "", "cont_prune_key_from_key_chains"], [29, 0, 1, "", "cont_prune_keys"], [29, 0, 1, "", "cont_prune_keys_from_key_chains"], [29, 0, 1, "", "cont_reduce"], [29, 0, 1, "", "cont_remove_key_length_limit"], [29, 0, 1, "", "cont_remove_print_limit"], [29, 0, 1, "", "cont_reshape_like"], [29, 0, 1, "", "cont_restructure"], [29, 0, 1, "", "cont_restructure_key_chains"], [29, 0, 1, "", "cont_save"], [29, 0, 1, "", "cont_set_at_key_chain"], [29, 0, 1, "", "cont_set_at_key_chains"], [29, 0, 1, "", "cont_set_at_keys"], [29, 5, 1, "", "cont_shape"], [29, 5, 1, "", "cont_shapes"], [29, 0, 1, "", "cont_show"], [29, 0, 1, "", "cont_show_sub_container"], [29, 0, 1, "", "cont_size_ordered_arrays"], [29, 0, 1, "", "cont_slice_keys"], [29, 0, 1, "", "cont_slice_via_key"], [29, 0, 1, "", "cont_sort_by_key"], [29, 0, 1, "", "cont_structural_diff"], [29, 0, 1, "", "cont_to_dict"], [29, 0, 1, "", "cont_to_disk_as_hdf5"], [29, 0, 1, "", "cont_to_disk_as_json"], [29, 0, 1, "", "cont_to_disk_as_pickled"], [29, 0, 1, "", "cont_to_flat_list"], [29, 0, 1, "", "cont_to_iterator"], [29, 0, 1, "", "cont_to_iterator_keys"], [29, 0, 1, "", "cont_to_iterator_values"], [29, 0, 1, "", "cont_to_jsonable"], [29, 0, 1, "", "cont_to_nested_list"], [29, 0, 1, "", "cont_to_raw"], [29, 0, 1, "", "cont_trim_key"], [29, 0, 1, "", "cont_try_kc"], [29, 0, 1, "", "cont_unify"], [29, 0, 1, "", "cont_unstack_conts"], [29, 0, 1, "", "cont_update_config"], [29, 0, 1, "", "cont_with_default_key_color"], [29, 0, 1, "", "cont_with_entries_as_lists"], [29, 0, 1, "", "cont_with_ivy_backend"], [29, 0, 1, "", "cont_with_key_length_limit"], [29, 0, 1, "", "cont_with_print_indent"], [29, 0, 1, "", "cont_with_print_limit"], [29, 0, 1, "", "cont_with_print_line_spacing"], [29, 5, 1, "", "dynamic_backend"], [29, 0, 1, "", "h5_file_size"], [29, 0, 1, "", "shuffle_h5_file"], [29, 0, 1, "", "split_conts"]], "ivy.data_classes.container.container": [[53, 1, 1, "", "Container"]], "ivy.data_classes.container.container.Container": [[53, 0, 1, "", "__abs__"], [53, 0, 1, "", "__add__"], [53, 0, 1, "", "__eq__"], [53, 0, 1, "", "__ge__"], [53, 0, 1, "", "__gt__"], [53, 0, 1, "", "__init__"], [53, 0, 1, "", "__le__"], [53, 0, 1, "", "__lt__"], [53, 0, 1, "", "__ne__"], [53, 0, 1, "", "__pow__"], [53, 0, 1, "", "__radd__"], [53, 0, 1, "", "__rrshift__"], [53, 0, 1, "", "__rshift__"], [53, 0, 1, "", "__rsub__"], [53, 0, 1, "", "__sub__"], [53, 0, 1, "", "__truediv__"], [53, 0, 1, "", "__xor__"]], "ivy.data_classes.container.conversions": [[30, 1, 1, "", "_ContainerWithConversions"]], "ivy.data_classes.container.conversions._ContainerWithConversions": [[30, 4, 1, "", "_abc_impl"], [30, 0, 1, "", "_static_to_ivy"], [30, 0, 1, "", "_static_to_native"], [30, 0, 1, "", "to_ivy"], [30, 0, 1, "", "to_native"]], "ivy.data_classes.container.creation": [[31, 1, 1, "", "_ContainerWithCreation"]], "ivy.data_classes.container.creation._ContainerWithCreation": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "_static_arange"], [31, 0, 1, "", "_static_asarray"], [31, 0, 1, "", "_static_copy_array"], [31, 0, 1, "", "_static_empty"], [31, 0, 1, "", "_static_empty_like"], [31, 0, 1, "", "_static_eye"], [31, 0, 1, "", "_static_from_dlpack"], [31, 0, 1, "", "_static_full"], [31, 0, 1, "", "_static_full_like"], [31, 0, 1, "", "_static_linspace"], [31, 0, 1, "", "_static_logspace"], [31, 0, 1, "", "_static_meshgrid"], [31, 0, 1, "", "_static_native_array"], [31, 0, 1, "", "_static_one_hot"], [31, 0, 1, "", "_static_ones"], [31, 0, 1, "", "_static_ones_like"], [31, 0, 1, "", "_static_tril"], [31, 0, 1, "", "_static_triu"], [31, 0, 1, "", "_static_zeros"], [31, 0, 1, "", "_static_zeros_like"], [31, 0, 1, "", "asarray"], [31, 0, 1, "", "copy_array"], [31, 0, 1, "", "empty_like"], [31, 0, 1, "", "from_dlpack"], [31, 0, 1, "", "frombuffer"], [31, 0, 1, "", "full_like"], [31, 0, 1, "", "linspace"], [31, 0, 1, "", "logspace"], [31, 0, 1, "", "meshgrid"], [31, 0, 1, "", "native_array"], [31, 0, 1, "", "one_hot"], [31, 0, 1, "", "ones_like"], [31, 0, 1, "", "static_frombuffer"], [31, 0, 1, "", "static_triu_indices"], [31, 0, 1, "", "tril"], [31, 0, 1, "", "triu"], [31, 0, 1, "", "triu_indices"], [31, 0, 1, "", "zeros_like"]], "ivy.data_classes.container.data_type": [[32, 1, 1, "", "_ContainerWithDataTypes"]], "ivy.data_classes.container.data_type._ContainerWithDataTypes": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "_static_astype"], [32, 0, 1, "", "_static_broadcast_arrays"], [32, 0, 1, "", "_static_broadcast_to"], [32, 0, 1, "", "_static_can_cast"], [32, 0, 1, "", "_static_default_complex_dtype"], [32, 0, 1, "", "_static_default_float_dtype"], [32, 0, 1, "", "_static_dtype"], [32, 0, 1, "", "_static_finfo"], [32, 0, 1, "", "_static_function_supported_dtypes"], [32, 0, 1, "", "_static_function_unsupported_dtypes"], [32, 0, 1, "", "_static_iinfo"], [32, 0, 1, "", "_static_is_bool_dtype"], [32, 0, 1, "", "_static_is_complex_dtype"], [32, 0, 1, "", "_static_is_float_dtype"], [32, 0, 1, "", "_static_is_int_dtype"], [32, 0, 1, "", "_static_is_uint_dtype"], [32, 0, 1, "", "_static_result_type"], [32, 0, 1, "", "astype"], [32, 0, 1, "", "broadcast_arrays"], [32, 0, 1, "", "broadcast_to"], [32, 0, 1, "", "can_cast"], [32, 0, 1, "", "dtype"], [32, 0, 1, "", "finfo"], [32, 0, 1, "", "iinfo"], [32, 0, 1, "", "is_bool_dtype"], [32, 0, 1, "", "is_complex_dtype"], [32, 0, 1, "", "is_float_dtype"], [32, 0, 1, "", "is_int_dtype"], [32, 0, 1, "", "is_uint_dtype"], [32, 0, 1, "", "result_type"]], "ivy.data_classes.container.device": [[33, 1, 1, "", "_ContainerWithDevice"]], "ivy.data_classes.container.device._ContainerWithDevice": [[33, 4, 1, "", "_abc_impl"], [33, 0, 1, "", "_static_dev"], [33, 0, 1, "", "_static_to_device"], [33, 0, 1, "", "dev"], [33, 0, 1, "", "to_device"]], "ivy.data_classes.container.elementwise": [[34, 1, 1, "", "_ContainerWithElementwise"]], "ivy.data_classes.container.elementwise._ContainerWithElementwise": [[34, 4, 1, "", "_abc_impl"], [34, 0, 1, "", "_static_abs"], [34, 0, 1, "", "_static_acos"], [34, 0, 1, "", "_static_acosh"], [34, 0, 1, "", "_static_add"], [34, 0, 1, "", "_static_asin"], [34, 0, 1, "", "_static_asinh"], [34, 0, 1, "", "_static_atan"], [34, 0, 1, "", "_static_atan2"], [34, 0, 1, "", "_static_atanh"], [34, 0, 1, "", "_static_bitwise_and"], [34, 0, 1, "", "_static_bitwise_invert"], [34, 0, 1, "", "_static_bitwise_left_shift"], [34, 0, 1, "", "_static_bitwise_or"], [34, 0, 1, "", "_static_bitwise_right_shift"], [34, 0, 1, "", "_static_bitwise_xor"], [34, 0, 1, "", "_static_ceil"], [34, 0, 1, "", "_static_cos"], [34, 0, 1, "", "_static_cosh"], [34, 0, 1, "", "_static_deg2rad"], [34, 0, 1, "", "_static_divide"], [34, 0, 1, "", "_static_equal"], [34, 0, 1, "", "_static_erf"], [34, 0, 1, "", "_static_exp"], [34, 0, 1, "", "_static_expm1"], [34, 0, 1, "", "_static_floor"], [34, 0, 1, "", "_static_floor_divide"], [34, 0, 1, "", "_static_greater"], [34, 0, 1, "", "_static_greater_equal"], [34, 0, 1, "", "_static_isfinite"], [34, 0, 1, "", "_static_isinf"], [34, 0, 1, "", "_static_isnan"], [34, 0, 1, "", "_static_isreal"], [34, 0, 1, "", "_static_lcm"], [34, 0, 1, "", "_static_less"], [34, 0, 1, "", "_static_less_equal"], [34, 0, 1, "", "_static_log"], [34, 0, 1, "", "_static_log10"], [34, 0, 1, "", "_static_log1p"], [34, 0, 1, "", "_static_log2"], [34, 0, 1, "", "_static_logaddexp"], [34, 0, 1, "", "_static_logical_and"], [34, 0, 1, "", "_static_logical_not"], [34, 0, 1, "", "_static_logical_or"], [34, 0, 1, "", "_static_logical_xor"], [34, 0, 1, "", "_static_maximum"], [34, 0, 1, "", "_static_minimum"], [34, 0, 1, "", "_static_multiply"], [34, 0, 1, "", "_static_negative"], [34, 0, 1, "", "_static_not_equal"], [34, 0, 1, "", "_static_positive"], [34, 0, 1, "", "_static_pow"], [34, 0, 1, "", "_static_rad2deg"], [34, 0, 1, "", "_static_reciprocal"], [34, 0, 1, "", "_static_remainder"], [34, 0, 1, "", "_static_round"], [34, 0, 1, "", "_static_sign"], [34, 0, 1, "", "_static_sin"], [34, 0, 1, "", "_static_sinh"], [34, 0, 1, "", "_static_sqrt"], [34, 0, 1, "", "_static_square"], [34, 0, 1, "", "_static_subtract"], [34, 0, 1, "", "_static_tan"], [34, 0, 1, "", "_static_tanh"], [34, 0, 1, "", "_static_trapz"], [34, 0, 1, "", "_static_trunc"], [34, 0, 1, "", "_static_trunc_divide"], [34, 0, 1, "", "abs"], [34, 0, 1, "", "acos"], [34, 0, 1, "", "acosh"], [34, 0, 1, "", "add"], [34, 0, 1, "", "angle"], [34, 0, 1, "", "asin"], [34, 0, 1, "", "asinh"], [34, 0, 1, "", "atan"], [34, 0, 1, "", "atan2"], [34, 0, 1, "", "atanh"], [34, 0, 1, "", "bitwise_and"], [34, 0, 1, "", "bitwise_invert"], [34, 0, 1, "", "bitwise_left_shift"], [34, 0, 1, "", "bitwise_or"], [34, 0, 1, "", "bitwise_right_shift"], [34, 0, 1, "", "bitwise_xor"], [34, 0, 1, "", "ceil"], [34, 0, 1, "", "cos"], [34, 0, 1, "", "cosh"], [34, 0, 1, "", "deg2rad"], [34, 0, 1, "", "divide"], [34, 0, 1, "", "equal"], [34, 0, 1, "", "erf"], [34, 0, 1, "", "exp"], [34, 0, 1, "", "exp2"], [34, 0, 1, "", "expm1"], [34, 0, 1, "", "floor"], [34, 0, 1, "", "floor_divide"], [34, 0, 1, "", "fmin"], [34, 0, 1, "", "gcd"], [34, 0, 1, "", "greater"], [34, 0, 1, "", "greater_equal"], [34, 0, 1, "", "imag"], [34, 0, 1, "", "isfinite"], [34, 0, 1, "", "isinf"], [34, 0, 1, "", "isnan"], [34, 0, 1, "", "isreal"], [34, 0, 1, "", "lcm"], [34, 0, 1, "", "less"], [34, 0, 1, "", "less_equal"], [34, 0, 1, "", "log"], [34, 0, 1, "", "log10"], [34, 0, 1, "", "log1p"], [34, 0, 1, "", "log2"], [34, 0, 1, "", "logaddexp"], [34, 0, 1, "", "logaddexp2"], [34, 0, 1, "", "logical_and"], [34, 0, 1, "", "logical_not"], [34, 0, 1, "", "logical_or"], [34, 0, 1, "", "logical_xor"], [34, 0, 1, "", "maximum"], [34, 0, 1, "", "minimum"], [34, 0, 1, "", "multiply"], [34, 0, 1, "", "nan_to_num"], [34, 0, 1, "", "negative"], [34, 0, 1, "", "not_equal"], [34, 0, 1, "", "positive"], [34, 0, 1, "", "pow"], [34, 0, 1, "", "rad2deg"], [34, 0, 1, "", "real"], [34, 0, 1, "", "reciprocal"], [34, 0, 1, "", "remainder"], [34, 0, 1, "", "round"], [34, 0, 1, "", "sign"], [34, 0, 1, "", "sin"], [34, 0, 1, "", "sinh"], [34, 0, 1, "", "sqrt"], [34, 0, 1, "", "square"], [34, 0, 1, "", "static_angle"], [34, 0, 1, "", "static_exp2"], [34, 0, 1, "", "static_fmin"], [34, 0, 1, "", "static_gcd"], [34, 0, 1, "", "static_imag"], [34, 0, 1, "", "static_logaddexp2"], [34, 0, 1, "", "static_nan_to_num"], [34, 0, 1, "", "static_real"], [34, 0, 1, "", "subtract"], [34, 0, 1, "", "tan"], [34, 0, 1, "", "tanh"], [34, 0, 1, "", "trapz"], [34, 0, 1, "", "trunc"], [34, 0, 1, "", "trunc_divide"]], "ivy.data_classes.container.experimental": [[35, 3, 0, "-", "activations"], [35, 3, 0, "-", "conversions"], [35, 3, 0, "-", "creation"], [35, 3, 0, "-", "data_type"], [35, 3, 0, "-", "device"], [35, 3, 0, "-", "elementwise"], [35, 3, 0, "-", "general"], [35, 3, 0, "-", "gradients"], [35, 3, 0, "-", "image"], [35, 3, 0, "-", "layers"], [35, 3, 0, "-", "linear_algebra"], [35, 3, 0, "-", "losses"], [35, 3, 0, "-", "manipulation"], [35, 3, 0, "-", "norms"], [35, 3, 0, "-", "random"], [35, 3, 0, "-", "searching"], [35, 3, 0, "-", "set"], [35, 3, 0, "-", "sorting"], [35, 3, 0, "-", "statistical"], [35, 3, 0, "-", "utility"]], "ivy.data_classes.container.experimental.activations": [[35, 1, 1, "", "_ContainerWithActivationExperimental"]], "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental": [[35, 4, 1, "", "_abc_impl"], [35, 0, 1, "", "_static_elu"], [35, 0, 1, "", "_static_silu"], [35, 0, 1, "", "elu"], [35, 0, 1, "", "logit"], [35, 0, 1, "", "logsigmoid"], [35, 0, 1, "", "prelu"], [35, 0, 1, "", "relu6"], [35, 0, 1, "", "selu"], [35, 0, 1, "", "silu"], [35, 0, 1, "", "static_logit"], [35, 0, 1, "", "static_logsigmoid"], [35, 0, 1, "", "static_prelu"], [35, 0, 1, "", "static_relu6"], [35, 0, 1, "", "static_selu"], [35, 0, 1, "", "static_thresholded_relu"], [35, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.container.experimental.conversions": [[35, 1, 1, "", "_ContainerWithConversionExperimental"]], "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental": [[35, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.creation": [[35, 1, 1, "", "_ContainerWithCreationExperimental"]], "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental": [[35, 4, 1, "", "_abc_impl"], [35, 0, 1, "", "_static_trilu"], [35, 0, 1, "", "blackman_window"], [35, 0, 1, "", "eye_like"], [35, 0, 1, "", "hamming_window"], [35, 0, 1, "", "hann_window"], [35, 0, 1, "", "kaiser_bessel_derived_window"], [35, 0, 1, "", "kaiser_window"], [35, 0, 1, "", "static_blackman_window"], [35, 0, 1, "", "static_eye_like"], [35, 0, 1, "", "static_hamming_window"], [35, 0, 1, "", "static_hann_window"], [35, 0, 1, "", "static_kaiser_bessel_derived_window"], [35, 0, 1, "", "static_kaiser_window"], [35, 0, 1, "", "static_tril_indices"], [35, 0, 1, "", "static_unsorted_segment_min"], [35, 0, 1, "", "static_unsorted_segment_sum"], [35, 0, 1, "", "static_vorbis_window"], [35, 0, 1, "", "tril_indices"], [35, 0, 1, "", "trilu"], [35, 0, 1, "", "unsorted_segment_min"], [35, 0, 1, "", "unsorted_segment_sum"], [35, 0, 1, "", "vorbis_window"]], "ivy.data_classes.container.experimental.data_type": [[35, 1, 1, "", "_ContainerWithData_typeExperimental"]], "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental": [[35, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.device": [[35, 1, 1, "", "_ContainerWithDeviceExperimental"]], "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental": [[35, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.elementwise": [[35, 1, 1, "", "_ContainerWithElementWiseExperimental"]], "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental": [[35, 4, 1, "", "_abc_impl"], [35, 0, 1, "", "allclose"], [35, 0, 1, "", "binarizer"], [35, 0, 1, "", "conj"], [35, 0, 1, "", "copysign"], [35, 0, 1, "", "count_nonzero"], [35, 0, 1, "", "diff"], [35, 0, 1, "", "digamma"], [35, 0, 1, "", "fix"], [35, 0, 1, "", "float_power"], [35, 0, 1, "", "fmax"], [35, 0, 1, "", "fmod"], [35, 0, 1, "", "frexp"], [35, 0, 1, "", "gradient"], [35, 0, 1, "", "hypot"], [35, 0, 1, "", "isclose"], [35, 0, 1, "", "ldexp"], [35, 0, 1, "", "lerp"], [35, 0, 1, "", "modf"], [35, 0, 1, "", "nansum"], [35, 0, 1, "", "nextafter"], [35, 0, 1, "", "signbit"], [35, 0, 1, "", "sinc"], [35, 0, 1, "", "static_allclose"], [35, 0, 1, "", "static_binarizer"], [35, 0, 1, "", "static_conj"], [35, 0, 1, "", "static_copysign"], [35, 0, 1, "", "static_count_nonzero"], [35, 0, 1, "", "static_diff"], [35, 0, 1, "", "static_digamma"], [35, 0, 1, "", "static_fix"], [35, 0, 1, "", "static_float_power"], [35, 0, 1, "", "static_fmax"], [35, 0, 1, "", "static_fmod"], [35, 0, 1, "", "static_frexp"], [35, 0, 1, "", "static_gradient"], [35, 0, 1, "", "static_hypot"], [35, 0, 1, "", "static_isclose"], [35, 0, 1, "", "static_ldexp"], [35, 0, 1, "", "static_lerp"], [35, 0, 1, "", "static_modf"], [35, 0, 1, "", "static_nansum"], [35, 0, 1, "", "static_nextafter"], [35, 0, 1, "", "static_signbit"], [35, 0, 1, "", "static_sinc"], [35, 0, 1, "", "static_xlogy"], [35, 0, 1, "", "static_zeta"], [35, 0, 1, "", "xlogy"], [35, 0, 1, "", "zeta"]], "ivy.data_classes.container.experimental.general": [[35, 1, 1, "", "_ContainerWithGeneralExperimental"]], "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental": [[35, 4, 1, "", "_abc_impl"], [35, 0, 1, "", "_static_reduce"], [35, 0, 1, "", "reduce"]], "ivy.data_classes.container.experimental.gradients": [[35, 1, 1, "", "_ContainerWithGradientsExperimental"]], "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental": [[35, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.image": [[35, 1, 1, "", "_ContainerWithImageExperimental"]], "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental": [[35, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.layers": [[35, 1, 1, "", "_ContainerWithLayersExperimental"]], "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental": [[35, 4, 1, "", "_abc_impl"], [35, 0, 1, "", "_static_fft"], [35, 0, 1, "", "adaptive_avg_pool1d"], [35, 0, 1, "", "adaptive_avg_pool2d"], [35, 0, 1, "", "adaptive_max_pool2d"], [35, 0, 1, "", "avg_pool1d"], [35, 0, 1, "", "avg_pool2d"], [35, 0, 1, "", "avg_pool3d"], [35, 0, 1, "", "dct"], [35, 0, 1, "", "dft"], [35, 0, 1, "", "embedding"], [35, 0, 1, "", "fft"], [35, 0, 1, "", "idct"], [35, 0, 1, "", "ifft"], [35, 0, 1, "", "ifftn"], [35, 0, 1, "", "interpolate"], [35, 0, 1, "", "max_pool1d"], [35, 0, 1, "", "max_pool2d"], [35, 0, 1, "", "max_pool3d"], [35, 0, 1, "", "rfftn"], [35, 0, 1, "", "static_adaptive_avg_pool1d"], [35, 0, 1, "", "static_adaptive_avg_pool2d"], [35, 0, 1, "", "static_adaptive_max_pool2d"], [35, 0, 1, "", "static_avg_pool1d"], [35, 0, 1, "", "static_avg_pool2d"], [35, 0, 1, "", "static_avg_pool3d"], [35, 0, 1, "", "static_dct"], [35, 0, 1, "", "static_dft"], [35, 0, 1, "", "static_embedding"], [35, 0, 1, "", "static_idct"], [35, 0, 1, "", "static_ifft"], [35, 0, 1, "", "static_ifftn"], [35, 0, 1, "", "static_interpolate"], [35, 0, 1, "", "static_max_pool1d"], [35, 0, 1, "", "static_max_pool2d"], [35, 0, 1, "", "static_max_pool3d"], [35, 0, 1, "", "static_rfftn"]], "ivy.data_classes.container.experimental.linear_algebra": [[35, 1, 1, "", "_ContainerWithLinearAlgebraExperimental"]], "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental": [[35, 4, 1, "", "_abc_impl"], [35, 0, 1, "", "adjoint"], [35, 0, 1, "", "cond"], [35, 0, 1, "", "diagflat"], [35, 0, 1, "", "eig"], [35, 0, 1, "", "eigh_tridiagonal"], [35, 0, 1, "", "eigvals"], [35, 0, 1, "", "initialize_tucker"], [35, 0, 1, "", "kron"], [35, 0, 1, "", "make_svd_non_negative"], [35, 0, 1, "", "matrix_exp"], [35, 0, 1, "", "mode_dot"], [35, 0, 1, "", "multi_dot"], [35, 0, 1, "", "multi_mode_dot"], [35, 0, 1, "", "partial_tucker"], [35, 0, 1, "", "static_adjoint"], [35, 0, 1, "", "static_cond"], [35, 0, 1, "", "static_diagflat"], [35, 0, 1, "", "static_eig"], [35, 0, 1, "", "static_eigh_tridiagonal"], [35, 0, 1, "", "static_eigvals"], [35, 0, 1, "", "static_initialize_tucker"], [35, 0, 1, "", "static_kron"], [35, 0, 1, "", "static_make_svd_non_negative"], [35, 0, 1, "", "static_matrix_exp"], [35, 0, 1, "", "static_mode_dot"], [35, 0, 1, "", "static_multi_dot"], [35, 0, 1, "", "static_multi_mode_dot"], [35, 0, 1, "", "static_partial_tucker"], [35, 0, 1, "", "static_svd_flip"], [35, 0, 1, "", "static_truncated_svd"], [35, 0, 1, "", "static_tucker"], [35, 0, 1, "", "svd_flip"], [35, 0, 1, "", "truncated_svd"], [35, 0, 1, "", "tucker"]], "ivy.data_classes.container.experimental.manipulation": [[35, 1, 1, "", "_ContainerWithManipulationExperimental"]], "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental": [[35, 4, 1, "", "_abc_impl"], [35, 0, 1, "", "_static_fill_diagonal"], [35, 0, 1, "", "_static_unique_consecutive"], [35, 0, 1, "", "as_strided"], [35, 0, 1, "", "associative_scan"], [35, 0, 1, "", "atleast_1d"], [35, 0, 1, "", "atleast_2d"], [35, 0, 1, "", "atleast_3d"], [35, 0, 1, "", "broadcast_shapes"], [35, 0, 1, "", "concat_from_sequence"], [35, 0, 1, "", "dsplit"], [35, 0, 1, "", "dstack"], [35, 0, 1, "", "expand"], [35, 0, 1, "", "fill_diagonal"], [35, 0, 1, "", "flatten"], [35, 0, 1, "", "fliplr"], [35, 0, 1, "", "flipud"], [35, 0, 1, "", "fold"], [35, 0, 1, "", "heaviside"], [35, 0, 1, "", "hsplit"], [35, 0, 1, "", "hstack"], [35, 0, 1, "", "i0"], [35, 0, 1, "", "matricize"], [35, 0, 1, "", "moveaxis"], [35, 0, 1, "", "pad"], [35, 0, 1, "", "partial_fold"], [35, 0, 1, "", "partial_tensor_to_vec"], [35, 0, 1, "", "partial_unfold"], [35, 0, 1, "", "partial_vec_to_tensor"], [35, 0, 1, "", "rot90"], [35, 0, 1, "", "soft_thresholding"], [35, 0, 1, "", "static_as_strided"], [35, 0, 1, "", "static_atleast_1d"], [35, 0, 1, "", "static_atleast_2d"], [35, 0, 1, "", "static_atleast_3d"], [35, 0, 1, "", "static_broadcast_shapes"], [35, 0, 1, "", "static_concat_from_sequence"], [35, 0, 1, "", "static_dsplit"], [35, 0, 1, "", "static_dstack"], [35, 0, 1, "", "static_expand"], [35, 0, 1, "", "static_flatten"], [35, 0, 1, "", "static_fliplr"], [35, 0, 1, "", "static_flipud"], [35, 0, 1, "", "static_fold"], [35, 0, 1, "", "static_heaviside"], [35, 0, 1, "", "static_hsplit"], [35, 0, 1, "", "static_hstack"], [35, 0, 1, "", "static_i0"], [35, 0, 1, "", "static_matricize"], [35, 0, 1, "", "static_moveaxis"], [35, 0, 1, "", "static_pad"], [35, 0, 1, "", "static_partial_fold"], [35, 0, 1, "", "static_partial_tensor_to_vec"], [35, 0, 1, "", "static_partial_unfold"], [35, 0, 1, "", "static_partial_vec_to_tensor"], [35, 0, 1, "", "static_rot90"], [35, 0, 1, "", "static_soft_thresholding"], [35, 0, 1, "", "static_take_along_axis"], [35, 0, 1, "", "static_top_k"], [35, 0, 1, "", "static_unfold"], [35, 0, 1, "", "static_vsplit"], [35, 0, 1, "", "static_vstack"], [35, 0, 1, "", "take_along_axis"], [35, 0, 1, "", "top_k"], [35, 0, 1, "", "unfold"], [35, 0, 1, "", "unique_consecutive"], [35, 0, 1, "", "vsplit"], [35, 0, 1, "", "vstack"]], "ivy.data_classes.container.experimental.norms": [[35, 1, 1, "", "_ContainerWithNormsExperimental"]], "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental": [[35, 4, 1, "", "_abc_impl"], [35, 0, 1, "", "batch_norm"], [35, 0, 1, "", "group_norm"], [35, 0, 1, "", "instance_norm"], [35, 0, 1, "", "l1_normalize"], [35, 0, 1, "", "l2_normalize"], [35, 0, 1, "", "lp_normalize"], [35, 0, 1, "", "static_batch_norm"], [35, 0, 1, "", "static_group_norm"], [35, 0, 1, "", "static_instance_norm"], [35, 0, 1, "", "static_l1_normalize"], [35, 0, 1, "", "static_l2_normalize"], [35, 0, 1, "", "static_lp_normalize"]], "ivy.data_classes.container.experimental.random": [[35, 1, 1, "", "_ContainerWithRandomExperimental"]], "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental": [[35, 4, 1, "", "_abc_impl"], [35, 0, 1, "", "bernoulli"], [35, 0, 1, "", "beta"], [35, 0, 1, "", "dirichlet"], [35, 0, 1, "", "gamma"], [35, 0, 1, "", "poisson"], [35, 0, 1, "", "static_bernoulli"], [35, 0, 1, "", "static_beta"], [35, 0, 1, "", "static_dirichlet"], [35, 0, 1, "", "static_gamma"], [35, 0, 1, "", "static_poisson"]], "ivy.data_classes.container.experimental.searching": [[35, 1, 1, "", "_ContainerWithSearchingExperimental"]], "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental": [[35, 4, 1, "", "_abc_impl"], [35, 0, 1, "", "static_unravel_index"], [35, 0, 1, "", "unravel_index"]], "ivy.data_classes.container.experimental.set": [[35, 1, 1, "", "_ContainerWithSetExperimental"]], "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental": [[35, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.sorting": [[35, 1, 1, "", "_ContainerWithSortingExperimental"]], "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental": [[35, 4, 1, "", "_abc_impl"], [35, 0, 1, "", "invert_permutation"], [35, 0, 1, "", "lexsort"], [35, 0, 1, "", "static_invert_permutation"], [35, 0, 1, "", "static_lexsort"]], "ivy.data_classes.container.experimental.statistical": [[35, 1, 1, "", "_ContainerWithStatisticalExperimental"]], "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental": [[35, 4, 1, "", "_abc_impl"], [35, 0, 1, "", "_static_cummax"], [35, 0, 1, "", "_static_cummin"], [35, 0, 1, "", "bincount"], [35, 0, 1, "", "corrcoef"], [35, 0, 1, "", "cov"], [35, 0, 1, "", "cummax"], [35, 0, 1, "", "cummin"], [35, 0, 1, "", "histogram"], [35, 0, 1, "", "igamma"], [35, 0, 1, "", "median"], [35, 0, 1, "", "nanmean"], [35, 0, 1, "", "nanmedian"], [35, 0, 1, "", "quantile"], [35, 0, 1, "", "static_bincount"], [35, 0, 1, "", "static_corrcoef"], [35, 0, 1, "", "static_cov"], [35, 0, 1, "", "static_histogram"], [35, 0, 1, "", "static_igamma"], [35, 0, 1, "", "static_median"], [35, 0, 1, "", "static_nanmean"], [35, 0, 1, "", "static_nanmedian"], [35, 0, 1, "", "static_quantile"]], "ivy.data_classes.container.experimental.utility": [[35, 1, 1, "", "_ContainerWithUtilityExperimental"]], "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental": [[35, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.general": [[36, 1, 1, "", "_ContainerWithGeneral"]], "ivy.data_classes.container.general._ContainerWithGeneral": [[36, 4, 1, "", "_abc_impl"], [36, 0, 1, "", "_static_all_equal"], [36, 0, 1, "", "_static_array_equal"], [36, 0, 1, "", "_static_assert_supports_inplace"], [36, 0, 1, "", "_static_clip_matrix_norm"], [36, 0, 1, "", "_static_clip_vector_norm"], [36, 0, 1, "", "_static_einops_rearrange"], [36, 0, 1, "", "_static_einops_reduce"], [36, 0, 1, "", "_static_einops_repeat"], [36, 0, 1, "", "_static_fourier_encode"], [36, 0, 1, "", "_static_gather"], [36, 0, 1, "", "_static_gather_nd"], [36, 0, 1, "", "_static_get_num_dims"], [36, 0, 1, "", "_static_has_nans"], [36, 0, 1, "", "_static_inplace_decrement"], [36, 0, 1, "", "_static_inplace_increment"], [36, 0, 1, "", "_static_inplace_update"], [36, 0, 1, "", "_static_is_array"], [36, 0, 1, "", "_static_is_ivy_array"], [36, 0, 1, "", "_static_is_native_array"], [36, 0, 1, "", "_static_scatter_flat"], [36, 0, 1, "", "_static_scatter_nd"], [36, 0, 1, "", "_static_stable_divide"], [36, 0, 1, "", "_static_stable_pow"], [36, 0, 1, "", "_static_supports_inplace_updates"], [36, 0, 1, "", "_static_to_list"], [36, 0, 1, "", "_static_to_numpy"], [36, 0, 1, "", "_static_to_scalar"], [36, 0, 1, "", "_static_value_is_nan"], [36, 0, 1, "", "all_equal"], [36, 0, 1, "", "array_equal"], [36, 0, 1, "", "assert_supports_inplace"], [36, 0, 1, "", "clip_matrix_norm"], [36, 0, 1, "", "clip_vector_norm"], [36, 0, 1, "", "einops_rearrange"], [36, 0, 1, "", "einops_reduce"], [36, 0, 1, "", "einops_repeat"], [36, 0, 1, "", "fourier_encode"], [36, 0, 1, "", "gather"], [36, 0, 1, "", "gather_nd"], [36, 0, 1, "", "get_num_dims"], [36, 0, 1, "", "has_nans"], [36, 0, 1, "", "inplace_decrement"], [36, 0, 1, "", "inplace_increment"], [36, 0, 1, "", "inplace_update"], [36, 0, 1, "", "is_array"], [36, 0, 1, "", "is_ivy_array"], [36, 0, 1, "", "is_native_array"], [36, 0, 1, "", "isin"], [36, 0, 1, "", "itemsize"], [36, 0, 1, "", "scatter_flat"], [36, 0, 1, "", "scatter_nd"], [36, 0, 1, "", "stable_divide"], [36, 0, 1, "", "stable_pow"], [36, 0, 1, "", "static_isin"], [36, 0, 1, "", "static_itemsize"], [36, 0, 1, "", "static_strides"], [36, 0, 1, "", "strides"], [36, 0, 1, "", "supports_inplace_updates"], [36, 0, 1, "", "to_list"], [36, 0, 1, "", "to_numpy"], [36, 0, 1, "", "to_scalar"], [36, 0, 1, "", "value_is_nan"]], "ivy.data_classes.container.gradients": [[37, 1, 1, "", "_ContainerWithGradients"]], "ivy.data_classes.container.gradients._ContainerWithGradients": [[37, 4, 1, "", "_abc_impl"], [37, 0, 1, "", "_static_stop_gradient"], [37, 0, 1, "", "adam_step"], [37, 0, 1, "", "adam_update"], [37, 0, 1, "", "gradient_descent_update"], [37, 0, 1, "", "lamb_update"], [37, 0, 1, "", "lars_update"], [37, 0, 1, "", "optimizer_update"], [37, 0, 1, "", "stop_gradient"]], "ivy.data_classes.container.image": [[38, 1, 1, "", "_ContainerWithImage"]], "ivy.data_classes.container.image._ContainerWithImage": [[38, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.layers": [[39, 1, 1, "", "_ContainerWithLayers"]], "ivy.data_classes.container.layers._ContainerWithLayers": [[39, 4, 1, "", "_abc_impl"], [39, 0, 1, "", "_static_conv1d"], [39, 0, 1, "", "_static_conv1d_transpose"], [39, 0, 1, "", "_static_conv2d"], [39, 0, 1, "", "_static_conv2d_transpose"], [39, 0, 1, "", "_static_conv3d"], [39, 0, 1, "", "_static_conv3d_transpose"], [39, 0, 1, "", "_static_depthwise_conv2d"], [39, 0, 1, "", "_static_dropout"], [39, 0, 1, "", "_static_dropout1d"], [39, 0, 1, "", "_static_dropout2d"], [39, 0, 1, "", "_static_dropout3d"], [39, 0, 1, "", "_static_linear"], [39, 0, 1, "", "_static_lstm_update"], [39, 0, 1, "", "_static_multi_head_attention"], [39, 0, 1, "", "_static_reduce_window"], [39, 0, 1, "", "_static_scaled_dot_product_attention"], [39, 0, 1, "", "conv1d"], [39, 0, 1, "", "conv1d_transpose"], [39, 0, 1, "", "conv2d"], [39, 0, 1, "", "conv2d_transpose"], [39, 0, 1, "", "conv3d"], [39, 0, 1, "", "conv3d_transpose"], [39, 0, 1, "", "depthwise_conv2d"], [39, 0, 1, "", "dropout"], [39, 0, 1, "", "dropout1d"], [39, 0, 1, "", "dropout2d"], [39, 0, 1, "", "dropout3d"], [39, 0, 1, "", "linear"], [39, 0, 1, "", "lstm_update"], [39, 0, 1, "", "multi_head_attention"], [39, 0, 1, "", "reduce_window"], [39, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.container.linear_algebra": [[40, 1, 1, "", "_ContainerWithLinearAlgebra"]], "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra": [[40, 4, 1, "", "_abc_impl"], [40, 0, 1, "", "_static_cholesky"], [40, 0, 1, "", "_static_cross"], [40, 0, 1, "", "_static_det"], [40, 0, 1, "", "_static_diag"], [40, 0, 1, "", "_static_diagonal"], [40, 0, 1, "", "_static_eigh"], [40, 0, 1, "", "_static_eigvalsh"], [40, 0, 1, "", "_static_inner"], [40, 0, 1, "", "_static_inv"], [40, 0, 1, "", "_static_matmul"], [40, 0, 1, "", "_static_matrix_norm"], [40, 0, 1, "", "_static_matrix_power"], [40, 0, 1, "", "_static_matrix_rank"], [40, 0, 1, "", "_static_matrix_transpose"], [40, 0, 1, "", "_static_outer"], [40, 0, 1, "", "_static_pinv"], [40, 0, 1, "", "_static_qr"], [40, 0, 1, "", "_static_slogdet"], [40, 0, 1, "", "_static_solve"], [40, 0, 1, "", "_static_svd"], [40, 0, 1, "", "_static_svdvals"], [40, 0, 1, "", "_static_tensordot"], [40, 0, 1, "", "_static_tensorsolve"], [40, 0, 1, "", "_static_trace"], [40, 0, 1, "", "_static_vander"], [40, 0, 1, "", "_static_vecdot"], [40, 0, 1, "", "_static_vector_norm"], [40, 0, 1, "", "_static_vector_to_skew_symmetric_matrix"], [40, 0, 1, "", "cholesky"], [40, 0, 1, "", "cross"], [40, 0, 1, "", "det"], [40, 0, 1, "", "diag"], [40, 0, 1, "", "diagonal"], [40, 0, 1, "", "eigh"], [40, 0, 1, "", "eigvalsh"], [40, 0, 1, "", "inner"], [40, 0, 1, "", "inv"], [40, 0, 1, "", "matmul"], [40, 0, 1, "", "matrix_norm"], [40, 0, 1, "", "matrix_power"], [40, 0, 1, "", "matrix_rank"], [40, 0, 1, "", "matrix_transpose"], [40, 0, 1, "", "outer"], [40, 0, 1, "", "pinv"], [40, 0, 1, "", "qr"], [40, 0, 1, "", "slogdet"], [40, 0, 1, "", "solve"], [40, 0, 1, "", "svd"], [40, 0, 1, "", "svdvals"], [40, 0, 1, "", "tensordot"], [40, 0, 1, "", "tensorsolve"], [40, 0, 1, "", "trace"], [40, 0, 1, "", "vander"], [40, 0, 1, "", "vecdot"], [40, 0, 1, "", "vector_norm"], [40, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.container.losses": [[41, 1, 1, "", "_ContainerWithLosses"]], "ivy.data_classes.container.losses._ContainerWithLosses": [[41, 4, 1, "", "_abc_impl"], [41, 0, 1, "", "_static_binary_cross_entropy"], [41, 0, 1, "", "_static_cross_entropy"], [41, 0, 1, "", "_static_sparse_cross_entropy"], [41, 0, 1, "", "binary_cross_entropy"], [41, 0, 1, "", "cross_entropy"], [41, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.container.manipulation": [[42, 1, 1, "", "_ContainerWithManipulation"]], "ivy.data_classes.container.manipulation._ContainerWithManipulation": [[42, 4, 1, "", "_abc_impl"], [42, 0, 1, "", "_static_clip"], [42, 0, 1, "", "_static_concat"], [42, 0, 1, "", "_static_constant_pad"], [42, 0, 1, "", "_static_expand_dims"], [42, 0, 1, "", "_static_flip"], [42, 0, 1, "", "_static_permute_dims"], [42, 0, 1, "", "_static_repeat"], [42, 0, 1, "", "_static_reshape"], [42, 0, 1, "", "_static_roll"], [42, 0, 1, "", "_static_split"], [42, 0, 1, "", "_static_squeeze"], [42, 0, 1, "", "_static_stack"], [42, 0, 1, "", "_static_swapaxes"], [42, 0, 1, "", "_static_tile"], [42, 0, 1, "", "_static_unstack"], [42, 0, 1, "", "_static_zero_pad"], [42, 0, 1, "", "clip"], [42, 0, 1, "", "concat"], [42, 0, 1, "", "constant_pad"], [42, 0, 1, "", "expand_dims"], [42, 0, 1, "", "flip"], [42, 0, 1, "", "permute_dims"], [42, 0, 1, "", "repeat"], [42, 0, 1, "", "reshape"], [42, 0, 1, "", "roll"], [42, 0, 1, "", "split"], [42, 0, 1, "", "squeeze"], [42, 0, 1, "", "stack"], [42, 0, 1, "", "swapaxes"], [42, 0, 1, "", "tile"], [42, 0, 1, "", "unstack"], [42, 0, 1, "", "zero_pad"]], "ivy.data_classes.container.norms": [[43, 1, 1, "", "_ContainerWithNorms"]], "ivy.data_classes.container.norms._ContainerWithNorms": [[43, 4, 1, "", "_abc_impl"], [43, 0, 1, "", "layer_norm"]], "ivy.data_classes.container.random": [[44, 1, 1, "", "_ContainerWithRandom"]], "ivy.data_classes.container.random._ContainerWithRandom": [[44, 4, 1, "", "_abc_impl"], [44, 0, 1, "", "_static_multinomial"], [44, 0, 1, "", "_static_randint"], [44, 0, 1, "", "_static_random_normal"], [44, 0, 1, "", "_static_random_uniform"], [44, 0, 1, "", "_static_shuffle"], [44, 0, 1, "", "multinomial"], [44, 0, 1, "", "randint"], [44, 0, 1, "", "random_normal"], [44, 0, 1, "", "random_uniform"], [44, 0, 1, "", "shuffle"]], "ivy.data_classes.container.searching": [[45, 1, 1, "", "_ContainerWithSearching"]], "ivy.data_classes.container.searching._ContainerWithSearching": [[45, 4, 1, "", "_abc_impl"], [45, 0, 1, "", "_static_argmax"], [45, 0, 1, "", "_static_argmin"], [45, 0, 1, "", "_static_argwhere"], [45, 0, 1, "", "_static_nonzero"], [45, 0, 1, "", "_static_where"], [45, 0, 1, "", "argmax"], [45, 0, 1, "", "argmin"], [45, 0, 1, "", "argwhere"], [45, 0, 1, "", "nonzero"], [45, 0, 1, "", "where"]], "ivy.data_classes.container.set": [[46, 1, 1, "", "_ContainerWithSet"]], "ivy.data_classes.container.set._ContainerWithSet": [[46, 4, 1, "", "_abc_impl"], [46, 0, 1, "", "_static_unique_all"], [46, 0, 1, "", "_static_unique_counts"], [46, 0, 1, "", "_static_unique_inverse"], [46, 0, 1, "", "_static_unique_values"], [46, 0, 1, "", "unique_all"], [46, 0, 1, "", "unique_counts"], [46, 0, 1, "", "unique_inverse"], [46, 0, 1, "", "unique_values"]], "ivy.data_classes.container.sorting": [[47, 1, 1, "", "_ContainerWithSorting"]], "ivy.data_classes.container.sorting._ContainerWithSorting": [[47, 4, 1, "", "_abc_impl"], [47, 0, 1, "", "_static_argsort"], [47, 0, 1, "", "_static_searchsorted"], [47, 0, 1, "", "_static_sort"], [47, 0, 1, "", "argsort"], [47, 0, 1, "", "msort"], [47, 0, 1, "", "searchsorted"], [47, 0, 1, "", "sort"], [47, 0, 1, "", "static_msort"]], "ivy.data_classes.container.statistical": [[48, 1, 1, "", "_ContainerWithStatistical"]], "ivy.data_classes.container.statistical._ContainerWithStatistical": [[48, 4, 1, "", "_abc_impl"], [48, 0, 1, "", "_static_cumprod"], [48, 0, 1, "", "_static_cumsum"], [48, 0, 1, "", "_static_prod"], [48, 0, 1, "", "_static_sum"], [48, 0, 1, "", "_static_var"], [48, 0, 1, "", "cumprod"], [48, 0, 1, "", "cumsum"], [48, 0, 1, "", "einsum"], [48, 0, 1, "", "max"], [48, 0, 1, "", "mean"], [48, 0, 1, "", "min"], [48, 0, 1, "", "prod"], [48, 0, 1, "", "std"], [48, 0, 1, "", "sum"], [48, 0, 1, "", "var"]], "ivy.data_classes.container.utility": [[49, 1, 1, "", "_ContainerWithUtility"]], "ivy.data_classes.container.utility._ContainerWithUtility": [[49, 4, 1, "", "_abc_impl"], [49, 0, 1, "", "_static_all"], [49, 0, 1, "", "_static_any"], [49, 0, 1, "", "all"], [49, 0, 1, "", "any"]], "ivy.data_classes.container.wrapping": [[50, 2, 1, "", "_wrap_function"], [50, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.data_classes.nested_array": [[55, 3, 0, "-", "base"], [56, 3, 0, "-", "elementwise"], [54, 3, 0, "-", "nested_array"]], "ivy.data_classes.nested_array.base": [[55, 1, 1, "", "NestedArrayBase"]], "ivy.data_classes.nested_array.base.NestedArrayBase": [[55, 0, 1, "", "__init__"], [55, 4, 1, "", "_abc_impl"], [55, 0, 1, "", "broadcast_shapes"], [55, 5, 1, "", "data"], [55, 5, 1, "", "device"], [55, 5, 1, "", "dtype"], [55, 5, 1, "", "inner_shape"], [55, 5, 1, "", "ndim"], [55, 0, 1, "", "nested_array"], [55, 5, 1, "", "nested_rank"], [55, 0, 1, "", "ragged_map"], [55, 0, 1, "", "ragged_multi_map"], [55, 0, 1, "", "ragged_multi_map_in_function"], [55, 0, 1, "", "replace_ivy_arrays"], [55, 5, 1, "", "shape"], [55, 0, 1, "", "unbind"]], "ivy.data_classes.nested_array.elementwise": [[56, 1, 1, "", "NestedArrayElementwise"]], "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise": [[56, 4, 1, "", "_abc_impl"], [56, 0, 1, "", "static_add"]], "ivy.data_classes.nested_array.nested_array": [[54, 1, 1, "", "NestedArray"]], "ivy.data_classes.nested_array.nested_array.NestedArray": [[54, 0, 1, "", "__init__"], [54, 0, 1, "", "from_row_lengths"], [54, 0, 1, "", "from_row_splits"]], "ivy.functional.ivy": [[526, 3, 0, "-", "activations"], [527, 3, 0, "-", "constants"], [528, 3, 0, "-", "control_flow_ops"], [529, 3, 0, "-", "creation"], [530, 3, 0, "-", "data_type"], [531, 3, 0, "-", "device"], [532, 3, 0, "-", "elementwise"], [533, 3, 0, "-", "experimental"], [534, 3, 0, "-", "general"], [535, 3, 0, "-", "gradients"], [536, 3, 0, "-", "layers"], [537, 3, 0, "-", "linear_algebra"], [538, 3, 0, "-", "losses"], [539, 3, 0, "-", "manipulation"], [540, 3, 0, "-", "meta"], [541, 3, 0, "-", "nest"], [542, 3, 0, "-", "norms"], [543, 3, 0, "-", "random"], [544, 3, 0, "-", "searching"], [545, 3, 0, "-", "set"], [546, 3, 0, "-", "sorting"], [547, 3, 0, "-", "statistical"], [548, 3, 0, "-", "utility"]], "ivy.functional.ivy.experimental": [[299, 3, 0, "-", "activations"], [300, 3, 0, "-", "constants"], [301, 3, 0, "-", "creation"], [302, 3, 0, "-", "data_type"], [303, 3, 0, "-", "device"], [304, 3, 0, "-", "elementwise"], [305, 3, 0, "-", "general"], [306, 3, 0, "-", "gradients"], [307, 3, 0, "-", "layers"], [308, 3, 0, "-", "linear_algebra"], [309, 3, 0, "-", "losses"], [310, 3, 0, "-", "manipulation"], [311, 3, 0, "-", "meta"], [312, 3, 0, "-", "nest"], [313, 3, 0, "-", "norms"], [314, 3, 0, "-", "random"], [315, 3, 0, "-", "searching"], [316, 3, 0, "-", "set"], [317, 3, 0, "-", "sorting"], [318, 3, 0, "-", "sparse_array"], [319, 3, 0, "-", "statistical"], [320, 3, 0, "-", "utility"]], "ivy.stateful": [[684, 3, 0, "-", "activations"], [685, 3, 0, "-", "converters"], [686, 3, 0, "-", "helpers"], [687, 3, 0, "-", "initializers"], [688, 3, 0, "-", "layers"], [689, 3, 0, "-", "losses"], [690, 3, 0, "-", "module"], [691, 3, 0, "-", "norms"], [692, 3, 0, "-", "optimizers"], [693, 3, 0, "-", "sequential"]], "ivy.stateful.activations": [[684, 1, 1, "", "ELU"], [684, 1, 1, "", "GEGLU"], [684, 1, 1, "", "GELU"], [684, 1, 1, "", "Hardswish"], [684, 1, 1, "", "LeakyReLU"], [684, 1, 1, "", "LogSigmoid"], [684, 1, 1, "", "LogSoftmax"], [684, 1, 1, "", "Logit"], [684, 1, 1, "", "Mish"], [684, 1, 1, "", "PReLU"], [684, 1, 1, "", "ReLU"], [684, 1, 1, "", "ReLU6"], [684, 1, 1, "", "SeLU"], [684, 1, 1, "", "SiLU"], [684, 1, 1, "", "Sigmoid"], [684, 1, 1, "", "Softmax"], [684, 1, 1, "", "Softplus"], [684, 1, 1, "", "Tanh"]], "ivy.stateful.activations.ELU": [[684, 0, 1, "", "__init__"]], "ivy.stateful.activations.GEGLU": [[684, 0, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[684, 0, 1, "", "__init__"]], "ivy.stateful.activations.Hardswish": [[684, 0, 1, "", "__init__"]], "ivy.stateful.activations.LeakyReLU": [[684, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSigmoid": [[684, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSoftmax": [[684, 0, 1, "", "__init__"]], "ivy.stateful.activations.Logit": [[684, 0, 1, "", "__init__"]], "ivy.stateful.activations.Mish": [[684, 0, 1, "", "__init__"]], "ivy.stateful.activations.PReLU": [[684, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU": [[684, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU6": [[684, 0, 1, "", "__init__"]], "ivy.stateful.activations.SeLU": [[684, 0, 1, "", "__init__"]], "ivy.stateful.activations.SiLU": [[684, 0, 1, "", "__init__"]], "ivy.stateful.activations.Sigmoid": [[684, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softmax": [[684, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softplus": [[684, 0, 1, "", "__init__"]], "ivy.stateful.activations.Tanh": [[684, 0, 1, "", "__init__"]], "ivy.stateful.converters": [[685, 1, 1, "", "ModuleConverters"], [685, 2, 1, "", "to_ivy_module"]], "ivy.stateful.converters.ModuleConverters": [[685, 0, 1, "", "from_flax_module"], [685, 0, 1, "", "from_haiku_module"], [685, 0, 1, "", "from_keras_module"], [685, 0, 1, "", "from_paddle_module"], [685, 0, 1, "", "from_torch_module"]], "ivy.stateful.helpers": [[686, 1, 1, "", "ModuleHelpers"]], "ivy.stateful.helpers.ModuleHelpers": [[686, 0, 1, "", "check_submod_rets"], [686, 0, 1, "", "get_mod_key"], [686, 0, 1, "", "mod_depth"], [686, 0, 1, "", "mod_height"], [686, 0, 1, "", "mod_with_top_mod_key_chain"], [686, 0, 1, "", "show_mod_in_top_mod"], [686, 0, 1, "", "show_structure"], [686, 0, 1, "", "show_v_in_top_v"], [686, 0, 1, "", "sub_mods"], [686, 0, 1, "", "track_submod_call_order"], [686, 0, 1, "", "track_submod_rets"], [686, 0, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.initializers": [[687, 1, 1, "", "Constant"], [687, 1, 1, "", "FirstLayerSiren"], [687, 1, 1, "", "GlorotUniform"], [687, 1, 1, "", "Initializer"], [687, 1, 1, "", "KaimingNormal"], [687, 1, 1, "", "Ones"], [687, 1, 1, "", "RandomNormal"], [687, 1, 1, "", "Siren"], [687, 1, 1, "", "Uniform"], [687, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[687, 0, 1, "", "__init__"], [687, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[687, 0, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[687, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Initializer": [[687, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.KaimingNormal": [[687, 0, 1, "", "__init__"], [687, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[687, 0, 1, "", "__init__"]], "ivy.stateful.initializers.RandomNormal": [[687, 0, 1, "", "__init__"], [687, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Siren": [[687, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[687, 0, 1, "", "__init__"], [687, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[687, 0, 1, "", "__init__"]], "ivy.stateful.layers": [[688, 1, 1, "", "AdaptiveAvgPool1d"], [688, 1, 1, "", "AdaptiveAvgPool2d"], [688, 1, 1, "", "AvgPool1D"], [688, 1, 1, "", "AvgPool2D"], [688, 1, 1, "", "AvgPool3D"], [688, 1, 1, "", "Conv1D"], [688, 1, 1, "", "Conv1DTranspose"], [688, 1, 1, "", "Conv2D"], [688, 1, 1, "", "Conv2DTranspose"], [688, 1, 1, "", "Conv3D"], [688, 1, 1, "", "Conv3DTranspose"], [688, 1, 1, "", "Dct"], [688, 1, 1, "", "DepthwiseConv2D"], [688, 1, 1, "", "Dropout"], [688, 1, 1, "", "Embedding"], [688, 1, 1, "", "FFT"], [688, 1, 1, "", "Identity"], [688, 1, 1, "", "LSTM"], [688, 1, 1, "", "Linear"], [688, 1, 1, "", "MaxPool1D"], [688, 1, 1, "", "MaxPool2D"], [688, 1, 1, "", "MaxPool3D"], [688, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.AdaptiveAvgPool1d": [[688, 0, 1, "", "__init__"]], "ivy.stateful.layers.AdaptiveAvgPool2d": [[688, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool1D": [[688, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool2D": [[688, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool3D": [[688, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1D": [[688, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[688, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[688, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[688, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[688, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[688, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dct": [[688, 0, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[688, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[688, 0, 1, "", "__init__"]], "ivy.stateful.layers.Embedding": [[688, 0, 1, "", "__init__"]], "ivy.stateful.layers.FFT": [[688, 0, 1, "", "__init__"]], "ivy.stateful.layers.Identity": [[688, 0, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[688, 0, 1, "", "__init__"], [688, 0, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[688, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool1D": [[688, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool2D": [[688, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool3D": [[688, 0, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[688, 0, 1, "", "__init__"]], "ivy.stateful.losses": [[689, 1, 1, "", "BinaryCrossEntropyLoss"], [689, 1, 1, "", "CrossEntropyLoss"], [689, 1, 1, "", "LogPoissonLoss"]], "ivy.stateful.losses.BinaryCrossEntropyLoss": [[689, 0, 1, "", "__init__"]], "ivy.stateful.losses.CrossEntropyLoss": [[689, 0, 1, "", "__init__"]], "ivy.stateful.losses.LogPoissonLoss": [[689, 0, 1, "", "__init__"]], "ivy.stateful.module": [[690, 1, 1, "", "Module"], [690, 1, 1, "", "ModuleMeta"]], "ivy.stateful.module.Module": [[690, 0, 1, "", "__call__"], [690, 0, 1, "", "__init__"], [690, 0, 1, "", "build"], [690, 5, 1, "", "build_mode"], [690, 5, 1, "", "built_"], [690, 0, 1, "", "compile"], [690, 0, 1, "", "load"], [690, 0, 1, "", "register_buffer"], [690, 0, 1, "", "save"], [690, 0, 1, "", "save_weights"], [690, 0, 1, "", "show_graph"]], "ivy.stateful.norms": [[691, 1, 1, "", "BatchNorm2D"], [691, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.BatchNorm2D": [[691, 0, 1, "", "__init__"]], "ivy.stateful.norms.LayerNorm": [[691, 0, 1, "", "__init__"]], "ivy.stateful.optimizers": [[692, 1, 1, "", "Adam"], [692, 1, 1, "", "LAMB"], [692, 1, 1, "", "LARS"], [692, 1, 1, "", "Optimizer"], [692, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[692, 0, 1, "", "__init__"], [692, 0, 1, "", "set_state"], [692, 5, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[692, 0, 1, "", "__init__"], [692, 0, 1, "", "set_state"], [692, 5, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[692, 0, 1, "", "__init__"], [692, 0, 1, "", "set_state"], [692, 5, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[692, 0, 1, "", "__init__"], [692, 0, 1, "", "set_state"], [692, 0, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[692, 0, 1, "", "__init__"], [692, 0, 1, "", "set_state"], [692, 5, 1, "", "state"]], "ivy.stateful.sequential": [[693, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[693, 0, 1, "", "__init__"]], "ivy.utils": [[694, 3, 0, "-", "assertions"], [695, 3, 0, "-", "backend"], [699, 3, 0, "-", "dynamic_import"], [700, 3, 0, "-", "einsum_parser"], [701, 3, 0, "-", "exceptions"], [702, 3, 0, "-", "inspection"], [703, 3, 0, "-", "logging"], [704, 3, 0, "-", "profiler"], [705, 3, 0, "-", "verbosity"]], "ivy.utils.assertions": [[694, 2, 1, "", "check_all"], [694, 2, 1, "", "check_all_or_any_fn"], [694, 2, 1, "", "check_any"], [694, 2, 1, "", "check_dev_correct_formatting"], [694, 2, 1, "", "check_dimensions"], [694, 2, 1, "", "check_elem_in_list"], [694, 2, 1, "", "check_equal"], [694, 2, 1, "", "check_exists"], [694, 2, 1, "", "check_false"], [694, 2, 1, "", "check_fill_value_and_dtype_are_compatible"], [694, 2, 1, "", "check_gather_input_valid"], [694, 2, 1, "", "check_gather_nd_input_valid"], [694, 2, 1, "", "check_greater"], [694, 2, 1, "", "check_inplace_sizes_valid"], [694, 2, 1, "", "check_isinstance"], [694, 2, 1, "", "check_kernel_padding_size"], [694, 2, 1, "", "check_less"], [694, 2, 1, "", "check_one_way_broadcastable"], [694, 2, 1, "", "check_same_dtype"], [694, 2, 1, "", "check_shape"], [694, 2, 1, "", "check_shapes_broadcastable"], [694, 2, 1, "", "check_true"], [694, 2, 1, "", "check_unsorted_segment_min_valid_params"]], "ivy.utils.backend": [[696, 3, 0, "-", "ast_helpers"], [697, 3, 0, "-", "handler"], [698, 3, 0, "-", "sub_backend_handler"]], "ivy.utils.backend.ast_helpers": [[696, 1, 1, "", "ImportTransformer"], [696, 1, 1, "", "IvyLoader"], [696, 1, 1, "", "IvyPathFinder"]], "ivy.utils.backend.ast_helpers.ImportTransformer": [[696, 0, 1, "", "__init__"], [696, 0, 1, "", "impersonate_import"], [696, 0, 1, "", "visit_Import"], [696, 0, 1, "", "visit_ImportFrom"]], "ivy.utils.backend.ast_helpers.IvyLoader": [[696, 0, 1, "", "__init__"], [696, 0, 1, "", "exec_module"]], "ivy.utils.backend.ast_helpers.IvyPathFinder": [[696, 0, 1, "", "find_spec"]], "ivy.utils.backend.handler": [[697, 1, 1, "", "ContextManager"], [697, 2, 1, "", "choose_random_backend"], [697, 2, 1, "", "convert_from_numpy_to_target_backend"], [697, 2, 1, "", "convert_from_source_backend_to_numpy"], [697, 2, 1, "", "current_backend"], [697, 2, 1, "", "fn_name_from_version_specific_fn_name"], [697, 2, 1, "", "prevent_access_locally"], [697, 2, 1, "", "previous_backend"], [697, 2, 1, "", "set_backend"], [697, 2, 1, "", "set_backend_to_specific_version"], [697, 2, 1, "", "set_jax_backend"], [697, 2, 1, "", "set_mxnet_backend"], [697, 2, 1, "", "set_numpy_backend"], [697, 2, 1, "", "set_paddle_backend"], [697, 2, 1, "", "set_tensorflow_backend"], [697, 2, 1, "", "set_torch_backend"], [697, 2, 1, "", "unset_backend"], [697, 2, 1, "", "with_backend"]], "ivy.utils.backend.handler.ContextManager": [[697, 0, 1, "", "__init__"]], "ivy.utils.backend.sub_backend_handler": [[698, 2, 1, "", "available_sub_backends"], [698, 2, 1, "", "clear_sub_backends"], [698, 2, 1, "", "find_available_sub_backends"], [698, 2, 1, "", "set_sub_backend"], [698, 2, 1, "", "unset_sub_backend"]], "ivy.utils.dynamic_import": [[699, 2, 1, "", "import_module"]], "ivy.utils.einsum_parser": [[700, 2, 1, "", "convert_interleaved_input"], [700, 2, 1, "", "convert_subscripts"], [700, 2, 1, "", "find_output_shape"], [700, 2, 1, "", "find_output_str"], [700, 2, 1, "", "gen_unused_symbols"], [700, 2, 1, "", "get_symbol"], [700, 2, 1, "", "has_valid_einsum_chars_only"], [700, 2, 1, "", "is_valid_einsum_char"], [700, 2, 1, "", "legalise_einsum_expr"], [700, 2, 1, "", "possibly_convert_to_numpy"]], "ivy.utils.exceptions": [[701, 7, 1, "", "InvalidBackendException"], [701, 7, 1, "", "IvyAttributeError"], [701, 7, 1, "", "IvyBackendException"], [701, 7, 1, "", "IvyBroadcastShapeError"], [701, 7, 1, "", "IvyDeviceError"], [701, 7, 1, "", "IvyDtypePromotionError"], [701, 7, 1, "", "IvyError"], [701, 7, 1, "", "IvyException"], [701, 7, 1, "", "IvyIndexError"], [701, 7, 1, "", "IvyNotImplementedException"], [701, 7, 1, "", "IvyValueError"], [701, 2, 1, "", "handle_exceptions"]], "ivy.utils.exceptions.InvalidBackendException": [[701, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyAttributeError": [[701, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBackendException": [[701, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBroadcastShapeError": [[701, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDeviceError": [[701, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDtypePromotionError": [[701, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyError": [[701, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyException": [[701, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyIndexError": [[701, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyNotImplementedException": [[701, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyValueError": [[701, 0, 1, "", "__init__"]], "ivy.utils.inspection": [[702, 2, 1, "", "add_array_specs"], [702, 2, 1, "", "fn_array_spec"]], "ivy.utils.logging": [[703, 2, 1, "", "set_logging_mode"], [703, 2, 1, "", "unset_logging_mode"]], "ivy.utils.profiler": [[704, 1, 1, "", "Profiler"]], "ivy.utils.profiler.Profiler": [[704, 0, 1, "", "__init__"], [704, 4, 1, "", "print_stats"], [704, 4, 1, "", "viz"]], "ivy.utils.verbosity": [[705, 2, 1, "", "cprint"]], "ivy_tests.test_ivy.helpers": [[668, 3, 0, "-", "assertions"], [669, 3, 0, "-", "available_frameworks"], [670, 3, 0, "-", "function_testing"], [671, 3, 0, "-", "globals"], [672, 3, 0, "-", "hypothesis_helpers"], [677, 3, 0, "-", "pipeline_helper"], [678, 3, 0, "-", "structs"], [679, 3, 0, "-", "test_parameter_flags"], [680, 3, 0, "-", "testing_helpers"]], "ivy_tests.test_ivy.helpers.assertions": [[668, 2, 1, "", "assert_all_close"], [668, 2, 1, "", "assert_same_type_and_shape"], [668, 2, 1, "", "check_unsupported_device"], [668, 2, 1, "", "check_unsupported_device_and_dtype"], [668, 2, 1, "", "check_unsupported_dtype"], [668, 2, 1, "", "test_unsupported_function"], [668, 2, 1, "", "value_test"]], "ivy_tests.test_ivy.helpers.function_testing": [[670, 2, 1, "", "args_to_container"], [670, 2, 1, "", "args_to_frontend"], [670, 2, 1, "", "arrays_to_frontend"], [670, 2, 1, "", "as_lists"], [670, 2, 1, "", "compiled_if_required"], [670, 2, 1, "", "convtrue"], [670, 2, 1, "", "create_args_kwargs"], [670, 2, 1, "", "flatten"], [670, 2, 1, "", "flatten_and_to_np"], [670, 2, 1, "", "flatten_frontend"], [670, 2, 1, "", "flatten_frontend_to_np"], [670, 2, 1, "", "get_frontend_ret"], [670, 2, 1, "", "get_ret_and_flattened_np_array"], [670, 2, 1, "", "gradient_incompatible_function"], [670, 2, 1, "", "gradient_test"], [670, 2, 1, "", "gradient_unsupported_dtypes"], [670, 2, 1, "", "kwargs_to_args_n_kwargs"], [670, 2, 1, "", "test_frontend_function"], [670, 2, 1, "", "test_frontend_method"], [670, 2, 1, "", "test_function"], [670, 2, 1, "", "test_method"], [670, 2, 1, "", "wrap_frontend_function_args"]], "ivy_tests.test_ivy.helpers.globals": [[671, 6, 1, "", "CURRENT_FRONTEND_CONFIG"], [671, 7, 1, "", "InterruptedTest"], [671, 1, 1, "", "TestData"], [671, 2, 1, "", "setup_api_test"], [671, 2, 1, "", "setup_frontend_test"], [671, 2, 1, "", "teardown_api_test"], [671, 2, 1, "", "teardown_frontend_test"]], "ivy_tests.test_ivy.helpers.globals.InterruptedTest": [[671, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.globals.TestData": [[671, 0, 1, "", "__init__"], [671, 4, 1, "", "fn_name"], [671, 4, 1, "", "fn_tree"], [671, 4, 1, "", "is_method"], [671, 4, 1, "", "supported_device_dtypes"], [671, 4, 1, "", "test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[673, 3, 0, "-", "array_helpers"], [674, 3, 0, "-", "dtype_helpers"], [675, 3, 0, "-", "general_helpers"], [676, 3, 0, "-", "number_helpers"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[673, 2, 1, "", "array_and_broadcastable_shape"], [673, 2, 1, "", "array_bools"], [673, 2, 1, "", "array_indices_axis"], [673, 2, 1, "", "array_indices_put_along_axis"], [673, 2, 1, "", "array_values"], [673, 2, 1, "", "arrays_and_axes"], [673, 2, 1, "", "arrays_for_pooling"], [673, 2, 1, "", "broadcast_shapes"], [673, 2, 1, "", "cond_data_gen_helper"], [673, 2, 1, "", "create_nested_input"], [673, 2, 1, "", "dtype_and_values"], [673, 2, 1, "", "dtype_array_query"], [673, 2, 1, "", "dtype_array_query_val"], [673, 2, 1, "", "dtype_values_axis"], [673, 2, 1, "", "einsum_helper"], [673, 2, 1, "", "get_first_solve_matrix"], [673, 2, 1, "", "get_second_solve_matrix"], [673, 2, 1, "", "list_of_size"], [673, 2, 1, "", "lists"], [673, 2, 1, "", "mutually_broadcastable_shapes"], [673, 2, 1, "", "prod"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[674, 2, 1, "", "array_dtypes"], [674, 2, 1, "", "get_castable_dtype"], [674, 2, 1, "", "get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[675, 2, 1, "", "apply_safety_factor"], [675, 2, 1, "", "embedding_helper"], [675, 2, 1, "", "get_axis"], [675, 2, 1, "", "get_bounds"], [675, 2, 1, "", "get_mean_std"], [675, 2, 1, "", "get_shape"], [675, 2, 1, "", "matrix_is_stable"], [675, 2, 1, "", "reshape_shapes"], [675, 2, 1, "", "subsets"], [675, 2, 1, "", "x_and_filters"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[676, 2, 1, "", "floats"], [676, 2, 1, "", "ints"], [676, 2, 1, "", "number"]], "ivy_tests.test_ivy.helpers.pipeline_helper": [[677, 1, 1, "", "BackendHandler"], [677, 1, 1, "", "BackendHandlerMode"], [677, 1, 1, "", "WithBackendContext"], [677, 2, 1, "", "get_frontend_config"]], "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler": [[677, 0, 1, "", "update_backend"]], "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode": [[677, 4, 1, "", "SetBackend"], [677, 4, 1, "", "WithBackend"]], "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext": [[677, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.structs": [[678, 1, 1, "", "FrontendMethodData"]], "ivy_tests.test_ivy.helpers.structs.FrontendMethodData": [[678, 0, 1, "", "__init__"], [678, 4, 1, "", "framework_init_module"], [678, 4, 1, "", "init_name"], [678, 4, 1, "", "ivy_init_module"], [678, 4, 1, "", "method_name"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[679, 1, 1, "", "FrontendFunctionTestFlags"], [679, 1, 1, "", "FrontendMethodTestFlags"], [679, 1, 1, "", "FunctionTestFlags"], [679, 1, 1, "", "InitMethodTestFlags"], [679, 1, 1, "", "MethodTestFlags"], [679, 1, 1, "", "TestFlags"], [679, 2, 1, "", "build_flag"], [679, 2, 1, "", "frontend_function_flags"], [679, 2, 1, "", "frontend_method_flags"], [679, 2, 1, "", "function_flags"], [679, 2, 1, "", "init_method_flags"], [679, 2, 1, "", "method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags": [[679, 0, 1, "", "__init__"], [679, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags": [[679, 0, 1, "", "__init__"], [679, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags": [[679, 0, 1, "", "__init__"], [679, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags": [[679, 0, 1, "", "__init__"], [679, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags": [[679, 0, 1, "", "__init__"], [679, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags": [[679, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[680, 2, 1, "", "handle_frontend_method"], [680, 2, 1, "", "handle_frontend_test"], [680, 2, 1, "", "handle_method"], [680, 2, 1, "", "handle_test"], [680, 2, 1, "", "num_positional_args"], [680, 2, 1, "", "num_positional_args_method"], [680, 2, 1, "", "seed"]]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:function", "3": "py:module", "4": "py:attribute", "5": "py:property", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "module", "Python module"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"graph": [0, 743, 748, 759, 764], "compil": [0, 743, 748, 756, 761, 763, 764], "api": [0, 1, 2, 706, 709, 715, 719, 723, 724, 734, 739, 743, 745, 747, 748, 755, 762, 764], "us": [0, 2, 706, 713, 715, 716, 719, 734, 737, 746, 752], "eager": 0, "v": [0, 709, 730, 751], "lazi": 0, "arrai": [0, 52, 54, 76, 318, 673, 709, 719, 720, 724, 731, 745, 755], "cach": 0, "gener": [0, 13, 36, 305, 534, 675, 734, 738, 741], "state": [0, 747, 751], "sharp": [0, 2], "bit": [0, 2], "exampl": [0, 2, 537, 586, 706, 712, 727, 731, 734, 737, 741], "set": [1, 23, 46, 316, 545, 706, 716, 721, 740], "up": [1, 706, 716], "ivi": [1, 2, 706, 712, 715, 717, 720, 722, 724, 727, 729, 734, 736, 737, 738, 739, 740, 743, 744, 745, 746, 747, 748, 750, 764], "folder": 1, "kei": 1, "issu": [1, 715, 717, 730], "question": 1, "transpil": [2, 706, 748], "function": [2, 58, 670, 715, 723, 725, 726, 729, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 743, 748, 751], "librari": [2, 712, 750], "modul": [2, 690, 725, 726, 747], "unifi": [2, 706, 710, 745, 760, 764], "base": [3, 29, 55], "cp": 4, "tensor": [4, 5], "tucker": [5, 370], "activ": [6, 28, 299, 526, 684], "convers": [7, 30, 733], "creation": [8, 31, 301, 529], "data": [9, 32, 57, 302, 530, 545, 647, 648, 649, 650, 725, 736, 738, 746, 751], "type": [9, 32, 302, 530, 725, 732, 736, 751], "devic": [10, 33, 303, 531, 726, 731, 736], "elementwis": [11, 34, 56, 304, 532], "experiment": [12, 35, 533, 715], "gradient": [14, 37, 284, 306, 535, 734], "imag": [15, 38, 206, 713, 722], "layer": [16, 39, 307, 536, 688], "linear": [17, 40, 308, 537, 560], "algebra": [17, 40, 308, 537], "loss": [18, 41, 309, 538, 689], "manipul": [19, 42, 310, 539], "norm": [20, 43, 313, 542, 691], "random": [21, 44, 314, 543], "search": [22, 45, 315, 544], "sort": [24, 47, 317, 546, 654], "statist": [25, 48, 319, 547], "util": [26, 49, 320, 548, 682], "wrap": [27, 50, 733], "factorizedtensor": 51, "contain": [53, 717, 723, 746], "nest": [54, 312, 541], "class": [57, 681, 720, 729, 736, 745], "gelu": 59, "hardswish": 60, "leaky_relu": 61, "log_softmax": 62, "mish": 63, "relu": 64, "sigmoid": 65, "softmax": 66, "softplu": 67, "cast_bool": 68, "cmp_i": 69, "cmp_isnot": 70, "for_loop": 71, "if_els": 72, "try_except": 73, "while_loop": 74, "arang": 75, "asarrai": 77, "asarray_handle_nest": 78, "asarray_infer_devic": 79, "asarray_infer_dtyp": 80, "asarray_inputs_to_native_shap": 81, "asarray_to_native_arrays_and_back": 82, "copy_arrai": 83, "empti": 84, "empty_lik": 85, "ey": 86, "from_dlpack": 87, "note": [87, 529], "frombuff": 88, "full": [89, 737], "full_lik": 90, "linspac": 91, "logspac": 92, "meshgrid": 93, "native_arrai": 94, "one_hot": 95, "ones": 96, "ones_lik": 97, "tril": 98, "triu": 99, "triu_indic": 100, "zero": 101, "zeros_lik": 102, "as_ivy_dtyp": 103, "as_native_dtyp": 104, "astyp": 105, "broadcast_arrai": 106, "broadcast_to": 107, "can_cast": 108, "check_float": 109, "closest_valid_dtyp": 110, "default_complex_dtyp": 111, "default_dtyp": 112, "default_float_dtyp": 113, "default_int_dtyp": 114, "default_uint_dtyp": 115, "dtype": [116, 674, 731], "dtype_bit": 117, "finfo": 118, "function_supported_dtyp": 119, "function_unsupported_dtyp": 120, "iinfo": 121, "infer_default_dtyp": 122, "invalid_dtyp": 123, "is_bool_dtyp": 124, "is_complex_dtyp": 125, "is_float_dtyp": 126, "is_hashable_dtyp": 127, "is_int_dtyp": 128, "is_native_dtyp": 129, "is_uint_dtyp": 130, "promote_typ": 131, "promote_types_of_input": 132, "result_typ": 133, "set_default_complex_dtyp": 134, "set_default_dtyp": 135, "set_default_float_dtyp": 136, "set_default_int_dtyp": 137, "set_default_uint_dtyp": 138, "type_promote_arrai": 139, "unset_default_complex_dtyp": 140, "unset_default_dtyp": 141, "unset_default_float_dtyp": 142, "unset_default_int_dtyp": 143, "unset_default_uint_dtyp": 144, "valid_dtyp": 145, "as_ivy_dev": 146, "as_native_dev": 147, "clear_cached_mem_on_dev": 148, "default_devic": 149, "dev": 150, "dev_util": 151, "function_supported_devic": 152, "function_unsupported_devic": 153, "get_all_ivy_arrays_on_dev": 154, "gpu_is_avail": 155, "handle_soft_device_vari": 156, "num_cpu_cor": 157, "num_gpu": 158, "num_ivy_arrays_on_dev": 159, "percent_used_mem_on_dev": 160, "print_all_ivy_arrays_on_dev": 161, "set_default_devic": 162, "set_soft_device_mod": 163, "paramet": [163, 481, 482, 486, 487, 489, 490, 531, 534, 679, 740], "set_split_factor": 164, "split_factor": 165, "split_func_cal": 166, "to_devic": 167, "total_mem_on_dev": 168, "tpu_is_avail": 169, "unset_default_devic": 170, "unset_soft_device_mod": 171, "used_mem_on_dev": 172, "ab": 173, "aco": 174, "acosh": 175, "add": [176, 727, 737, 764], "angl": 177, "asin": 178, "asinh": 179, "atan": 180, "atan2": 181, "atanh": 182, "bitwise_and": 183, "bitwise_invert": 184, "bitwise_left_shift": 185, "bitwise_or": 186, "bitwise_right_shift": 187, "bitwise_xor": 188, "ceil": 189, "co": 190, "cosh": 191, "deg2rad": 192, "divid": 193, "equal": 194, "erf": 195, "exp": 196, "exp2": 197, "expm1": 198, "floor": 199, "floor_divid": 200, "fmin": 201, "fmod": 202, "gcd": 203, "greater": 204, "greater_equ": 205, "isfinit": 207, "isinf": 208, "isnan": 209, "isreal": 210, "lcm": 211, "less": 212, "less_equ": 213, "log": [214, 703, 716], "log10": 215, "log1p": 216, "log2": 217, "logaddexp": 218, "logaddexp2": 219, "logical_and": 220, "logical_not": 221, "logical_or": 222, "logical_xor": 223, "maximum": 224, "minimum": 225, "multipli": 226, "nan_to_num": 227, "neg": 228, "not_equ": 229, "posit": [230, 731], "pow": 231, "rad2deg": 232, "real": 233, "reciproc": 234, "remaind": 235, "round": 236, "sign": 237, "sin": 238, "sinh": 239, "sqrt": 240, "squar": 241, "subtract": 242, "tan": [243, 727, 737], "tanh": 244, "trapz": 245, "trunc": 246, "trunc_divid": 247, "elu": 248, "logit": 249, "logsigmoid": 250, "prelu": 251, "relu6": 252, "selu": 253, "sequence_length": 254, "silu": 255, "thresholded_relu": 256, "blackman_window": 257, "eye_lik": 258, "hamming_window": 259, "hann_window": 260, "indic": 261, "kaiser_bessel_derived_window": 262, "kaiser_window": 263, "ndenumer": 264, "ndindex": 265, "random_cp": 266, "random_tuck": 267, "tril_indic": 268, "trilu": 269, "unsorted_segment_min": 270, "unsorted_segment_sum": 271, "vorbis_window": 272, "allclos": 273, "binar": 274, "conj": 275, "copysign": 276, "count_nonzero": 277, "diff": 278, "digamma": 279, "fix": 280, "float_pow": 281, "fmax": 282, "frexp": 283, "hypot": 285, "isclos": 286, "ldexp": 287, "lerp": 288, "lgamma": 289, "modf": 290, "nansum": 291, "nextaft": 292, "signbit": 293, "sinc": 294, "xlogi": 295, "zeta": 296, "reduc": 297, "bind_custom_gradient_funct": 298, "constant": [300, 527], "meta": [311, 540], "spars": 318, "adaptive_avg_pool1d": 321, "adaptive_avg_pool2d": 322, "adaptive_max_pool2d": 323, "area_interpol": 324, "avg_pool1d": 325, "avg_pool2d": 326, "avg_pool3d": 327, "dct": 328, "dft": 329, "dropout1d": 330, "dropout2d": 331, "dropout3d": 332, "embed": 333, "fft": 334, "fft2": 335, "generate_einsum_equ": 336, "get_interpolate_kernel": 337, "idct": 338, "ifft": 339, "ifftn": 340, "interp": 341, "interpol": 342, "max_pool1d": 343, "max_pool2d": 344, "max_pool3d": 345, "max_unpool1d": 346, "nearest_interpol": 347, "pool": 348, "reduce_window": 349, "rfftn": 350, "adjoint": 351, "cond": 352, "diagflat": 353, "dot": 354, "eig": [355, 569], "eigh_tridiagon": 356, "eigval": 357, "initialize_tuck": 358, "khatri_rao": 359, "kron": 360, "kroneck": 361, "make_svd_non_neg": 362, "matrix_exp": 363, "mode_dot": 364, "multi_dot": 365, "multi_mode_dot": 366, "partial_tuck": 367, "svd_flip": 368, "truncated_svd": 369, "log_poisson_loss": 371, "as_strid": 372, "associative_scan": 373, "atleast_1d": 374, "atleast_2d": 375, "atleast_3d": 376, "broadcast_shap": 377, "concat_from_sequ": 378, "dsplit": 379, "dstack": 380, "expand": 381, "fill_diagon": 382, "flatten": 383, "fliplr": 384, "flipud": 385, "fold": 386, "heavisid": 387, "hsplit": 388, "hstack": 389, "i0": 390, "matric": 391, "moveaxi": 392, "pad": 393, "partial_fold": 394, "partial_tensor_to_vec": 395, "partial_unfold": 396, "partial_vec_to_tensor": 397, "put_along_axi": 398, "rot90": 399, "soft_threshold": 400, "take_along_axi": 401, "top_k": 402, "unfold": 403, "unique_consecut": 404, "vsplit": 405, "vstack": 406, "batch_norm": 407, "group_norm": 408, "instance_norm": 409, "l1_normal": 410, "l2_normal": 411, "lp_normal": 412, "bernoulli": 413, "beta": 414, "dirichlet": 415, "gamma": 416, "poisson": 417, "unravel_index": 418, "invert_permut": 419, "lexsort": 420, "is_ivy_sparse_arrai": 421, "is_native_sparse_arrai": 422, "native_sparse_arrai": 423, "native_sparse_array_to_indices_values_and_shap": 424, "bincount": 425, "corrcoef": 426, "cov": 427, "cummax": 428, "cummin": 429, "histogram": 430, "igamma": 431, "median": 432, "nanmean": 433, "nanmedian": 434, "nanquantil": 435, "quantil": 436, "all_equ": 437, "arg_info": 438, "arg_nam": 439, "array_equ": 440, "assert_supports_inplac": 441, "cache_fn": 442, "clip_matrix_norm": 443, "clip_vector_norm": 444, "container_typ": 445, "current_backend_str": 446, "default": 447, "einops_rearrang": 448, "einops_reduc": 449, "einops_repeat": 450, "exist": [451, 713], "fourier_encod": 452, "function_supported_devices_and_dtyp": 453, "function_unsupported_devices_and_dtyp": 454, "gather": 455, "gather_nd": 456, "get_all_arrays_in_memori": 457, "get_item": 458, "get_num_dim": 459, "get_referrers_recurs": 460, "has_nan": 461, "inplace_arrays_support": 462, "inplace_decr": 463, "inplace_incr": 464, "inplace_upd": 465, "inplace_variables_support": 466, "is_arrai": 467, "is_ivy_arrai": 468, "is_ivy_contain": 469, "is_ivy_nested_arrai": 470, "is_native_arrai": 471, "isin": 472, "isscalar": 473, "items": 474, "match_kwarg": 475, "multiprocess": 476, "num_arrays_in_memori": 477, "print_all_arrays_in_memori": 478, "scatter_flat": 479, "scatter_nd": 480, "set_array_mod": 481, "set_exception_trace_mod": 482, "set_item": 483, "set_min_bas": 484, "set_min_denomin": 485, "set_nestable_mod": 486, "set_precise_mod": 487, "set_queue_timeout": 488, "set_shape_array_mod": 489, "set_show_func_wrapper_trace_mod": 490, "set_tmp_dir": 491, "shape": [492, 545, 647, 648, 649, 650, 733, 751], "stable_divid": 493, "stable_pow": 494, "stride": 495, "supports_inplace_upd": 496, "to_ivy_shap": 497, "to_list": 498, "to_native_shap": 499, "to_numpi": 500, "to_scalar": 501, "try_else_non": 502, "unset_array_mod": 503, "unset_exception_trace_mod": 504, "unset_min_bas": 505, "unset_min_denomin": 506, "unset_nestable_mod": 507, "unset_precise_mod": 508, "unset_queue_timeout": 509, "unset_shape_array_mod": 510, "unset_show_func_wrapper_trace_mod": 511, "unset_tmp_dir": 512, "value_is_nan": 513, "vmap": 514, "adam_step": 515, "adam_upd": 516, "execute_with_gradi": [517, 734], "grad": 518, "gradient_descent_upd": 519, "jac": 520, "lamb_upd": 521, "lars_upd": 522, "optimizer_upd": 523, "stop_gradi": 524, "value_and_grad": 525, "control": [528, 751], "flow": [528, 751], "op": 528, "instanc": [537, 586, 723, 736, 737, 745], "method": [537, 586, 723, 736, 737, 745, 746], "depend": [545, 647, 648, 649, 650], "output": [545, 647, 648, 649, 650], "conv": 549, "conv1d": 550, "conv1d_transpos": 551, "conv2d": 552, "conv2d_transpos": 553, "conv3d": 554, "conv3d_transpos": 555, "conv_general_dil": 556, "conv_general_transpos": 557, "depthwise_conv2d": 558, "dropout": 559, "lstm_updat": 561, "multi_head_attent": 562, "scaled_dot_product_attent": 563, "choleski": 564, "cross": 565, "det": 566, "diag": 567, "diagon": 568, "eigh": 570, "eigvalsh": 571, "inner": 572, "inv": 573, "lu_factor": 574, "matmul": 575, "matrix_norm": 576, "matrix_pow": 577, "matrix_rank": 578, "matrix_transpos": 579, "outer": 580, "pinv": 581, "qr": 582, "slogdet": 583, "solv": 584, "svd": 585, "svdval": 586, "tensordot": 587, "tensorsolv": 588, "trace": [589, 729], "vander": 590, "vecdot": 591, "vector_norm": 592, "vector_to_skew_symmetric_matrix": 593, "binary_cross_entropi": 594, "cross_entropi": 595, "sparse_cross_entropi": 596, "clip": 597, "concat": 598, "constant_pad": 599, "expand_dim": 600, "flip": 601, "permute_dim": 602, "repeat": 603, "reshap": 604, "roll": [605, 727], "split": 606, "squeez": 607, "stack": [608, 729], "swapax": 609, "tile": 610, "unstack": 611, "zero_pad": 612, "fomaml_step": 613, "maml_step": 614, "reptile_step": 615, "all_nested_indic": 616, "copy_nest": 617, "duplicate_array_index_chain": 618, "index_nest": 619, "insert_into_nest_at_index": 620, "insert_into_nest_at_indic": 621, "map": [622, 724], "map_nest_at_index": 623, "map_nest_at_indic": 624, "multi_index_nest": 625, "nested_ani": 626, "nested_argwher": 627, "nested_map": 628, "nested_multi_map": 629, "prune_empti": 630, "prune_nest_at_index": 631, "prune_nest_at_indic": 632, "set_nest_at_index": 633, "set_nest_at_indic": 634, "layer_norm": 635, "multinomi": 636, "randint": 637, "random_norm": 638, "random_uniform": 639, "seed": 640, "shuffl": 641, "argmax": 642, "argmin": 643, "argwher": 644, "nonzero": 645, "where": [646, 715], "unique_al": 647, "unique_count": 648, "unique_invers": 649, "unique_valu": 650, "argsort": 651, "msort": 652, "searchsort": 653, "cumprod": 655, "cumsum": 656, "einsum": [657, 700], "max": 658, "mean": 659, "min": 660, "prod": 661, "std": 662, "sum": 663, "var": 664, "all": 665, "ani": 666, "save": [667, 746], "assert": [668, 694, 729], "avail": 669, "framework": [669, 681, 706, 734, 737, 744, 758, 761, 764, 765], "test": [670, 679, 680, 683, 716, 717, 719, 724, 737, 738], "global": [671, 740], "hypothesi": [672, 716, 737, 738], "helper": [672, 673, 674, 675, 676, 677, 680, 686, 696, 737, 738, 739], "number": [676, 731], "pipelin": [677, 722, 724, 738, 751], "struct": 678, "flag": 679, "convert": [685, 748], "initi": [687, 747], "optim": [692, 747], "sequenti": 693, "backend": [695, 698, 706, 715, 721, 725, 734, 739, 743, 751], "ast": 696, "handler": [697, 698, 743], "sub": 698, "dynam": [699, 721, 751], "import": 699, "parser": 700, "except": [701, 729, 733], "inspect": 702, "profil": 704, "verbos": 705, "statu": 706, "ai": 706, "when": 706, "should": 706, "i": [706, 722, 741], "instal": [706, 752], "pip": [706, 752], "docker": [706, 713, 716, 717, 722, 752], "from": [706, 752], "sourc": [706, 752], "multi": [706, 761, 764], "support": [706, 721, 725, 733, 736, 751], "document": 706, "contribut": [706, 711], "commun": 706, "citat": 706, "background": 707, "ml": [708, 760, 764], "explos": 708, "standard": [709, 741, 755, 764], "skeptic": 709, "complimentari": 709, "competit": 709, "do": [709, 738], "work": [709, 754], "The": [709, 717, 722, 734, 736, 745, 751], "why": [710, 738], "No": [710, 716], "more": [710, 716, 741], "re": [710, 738], "implement": [710, 724, 734, 736], "infinit": 710, "shelf": 710, "life": 710, "appli": [712, 750], "introduct": [712, 736, 737], "robot": [712, 750], "build": [713, 722, 743], "doc": [713, 722], "conveni": [713, 722, 732], "script": [713, 722], "hub": 713, "local": [713, 717, 730], "without": [713, 737], "help": [714, 717], "resourc": 714, "open": 715, "task": 715, "format": [715, 730, 757, 764], "checklist": 715, "frontend": [715, 721, 736, 737, 748], "place": 715, "extend": [715, 738, 741], "creat": 715, "an": [715, 734], "": [715, 722], "github": [715, 716], "templat": 715, "fork": [716, 717], "clone": [716, 724], "repo": 716, "pre": [716, 730], "commit": [716, 717, 724, 730], "pycharm": [716, 717, 730], "virtual": 716, "environ": 716, "miniconda": 716, "venv": 716, "interpret": 716, "window": 716, "maco": 716, "ubuntu": 716, "detail": 716, "free": 716, "wsl": 716, "codespac": 716, "basic": [717, 736], "get": [717, 752], "todo": 717, "list": 717, "manag": 717, "your": [717, 738], "who": 717, "To": 717, "ask": 717, "With": 717, "command": 717, "line": 717, "browser": 717, "pull": [717, 724], "request": [717, 724], "small": 717, "often": 717, "interact": 717, "run": [717, 719, 722, 738], "most": 717, "out": [717, 731, 733, 735], "id": [717, 719], "deep": 718, "dive": 718, "termin": 719, "regener": 719, "failur": 719, "skip": 719, "nativ": [720, 741], "handl": [720, 726, 729, 733, 751], "integr": [720, 724, 730, 738], "custom": [720, 722, 734, 746, 751], "version": [721, 739, 751], "how": [722, 738], "builder": 722, "being": 722, "option": 722, "structur": [722, 734, 751], "index": 722, "rst": 722, "partial_conf": 722, "py": 722, "prebuild": 722, "sh": 722, "extens": [722, 749], "custom_autosummari": 722, "hide": 722, "tabl": 722, "discussion_link": 722, "skippable_funct": 722, "ivy_data": 722, "special": [723, 736], "nestabl": [723, 731, 732, 733], "continu": [724, 730], "push": 724, "pr": 724, "trigger": 724, "A": [724, 741], "top": 724, "down": 724, "view": [724, 733, 735], "store": 724, "retriev": 724, "repositori": 724, "nitti": 724, "gritti": 724, "storag": 724, "space": 724, "unifyai": 724, "determin": 724, "coverag": 724, "workflow": 724, "multipl": 724, "runner": 724, "race": 724, "condit": 724, "period": 724, "manual": 724, "dispatch": 724, "ci": 724, "dashboard": 724, "promot": [725, 736], "argument": [725, 726, 731, 733, 735, 736], "other": [725, 726], "unsupport": 725, "bug": 725, "cast": [725, 736], "mode": [725, 729, 740], "superset": [725, 741], "docstr": [727, 728], "configur": [729, 737, 746], "func_wrapp": 729, "prune": 729, "handle_except": 729, "decor": [729, 733, 738], "consist": [729, 738], "error": 729, "lint": 730, "check": [730, 751], "setup": 730, "code": [730, 739], "common": 730, "keyword": 731, "input": 731, "oper": [731, 740, 745, 751], "integ": 731, "sequenc": 731, "primari": 732, "composit": 732, "mix": [732, 733, 738], "partial": [732, 733, 738], "standalon": 732, "order": 733, "wrapper": [733, 764, 765], "infer": 733, "miscellan": 733, "overview": 734, "usag": [734, 741], "signatur": 734, "design": [734, 739, 742], "our": 734, "polici": [734, 736], "specif": [734, 762, 763, 764], "consider": 734, "inplac": 735, "updat": 735, "copi": 735, "write": [736, 738], "short": 736, "unus": 736, "rule": 736, "numpi": [736, 758], "duplic": [736, 741], "valu": 737, "alia": 737, "own": 738, "strategi": 738, "we": 738, "need": 738, "effect": 738, "bonu": 738, "featur": 738, "self": 738, "explicit": 738, "test_array_funct": 738, "fail": 738, "navig": 739, "categor": 739, "submodul": 739, "unpin": 739, "properti": 740, "getter": 740, "attribut": 740, "setter": 740, "set_": 740, "unset_": 740, "behaviour": 741, "what": [741, 764], "non": 741, "balanc": 741, "effici": 741, "maxim": 741, "block": 743, "monkei": 745, "patch": 745, "construct": 746, "represent": 746, "recurs": 746, "built": 746, "ins": 746, "access": 746, "load": 746, "comparison": 746, "case": 746, "compartment": 746, "network": [746, 748], "weight": 746, "role": 748, "model": [748, 751], "mechan": 750, "vision": 750, "gym": 750, "memori": 750, "faq": 751, "maintain": 751, "size": 751, "gpu": 751, "deploy": 751, "auto": 751, "differenti": 751, "replica": 751, "parallel": 751, "altern": 751, "start": 752, "glossari": 753, "relat": 754, "infrastructur": [756, 764], "llvm": 756, "mlir": 756, "oneapi": 756, "exchang": [757, 764], "onnx": 757, "nnef": 757, "coreml": 757, "matlab": 758, "scipi": 758, "torch": [758, 759], "scikit": 758, "learn": 758, "theano": 758, "panda": 758, "julia": 758, "apach": [758, 761], "spark": 758, "mllib": 758, "caff": 758, "chainer": 758, "tensorflow": 758, "1": 758, "mxnet": 758, "cntk": 758, "pytorch": 758, "flux": 758, "jax": 758, "2": 758, "dex": 758, "languag": 758, "tracer": [759, 764], "tf": 759, "jaxpr": 759, "jit": 759, "fx": 759, "compani": [760, 764], "quansight": 760, "modular": 760, "octoml": 760, "vendor": [761, 762, 763, 764], "tvm": 761, "xla": 761, "gcc": 761, "tensorrt": 762, "cuda": 762, "icc": 763, "icx": 763, "nvcc": 763, "doe": 764, "eagerpi": 765, "kera": 765, "thinc": 765, "tensorli": 765, "neuropod": 765}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"from_dlpack": [[87, "from-dlpack"]], "Note": [[87, null], [529, null]], "for_loop": [[71, "for-loop"]], "default_int_dtype": [[114, "default-int-dtype"]], "default_float_dtype": [[113, "default-float-dtype"]], "leaky_relu": [[61, "leaky-relu"]], "logspace": [[92, "logspace"]], "native_array": [[94, "native-array"]], "can_cast": [[108, "can-cast"]], "broadcast_arrays": [[106, "broadcast-arrays"]], "default_uint_dtype": [[115, "default-uint-dtype"]], "log_softmax": [[62, "log-softmax"]], "check_float": [[109, "check-float"]], "zeros": [[101, "zeros"]], "default_dtype": [[112, "default-dtype"]], "closest_valid_dtype": [[110, "closest-valid-dtype"]], "asarray_infer_device": [[79, "asarray-infer-device"]], "cast_bool": [[68, "cast-bool"]], "triu": [[99, "triu"]], "asarray": [[77, "asarray"]], "ones": [[96, "ones"]], "softmax": [[66, "softmax"]], "function_supported_dtypes": [[119, "function-supported-dtypes"]], "frombuffer": [[88, "frombuffer"]], "empty_like": [[85, "empty-like"]], "broadcast_to": [[107, "broadcast-to"]], "asarray_inputs_to_native_shapes": [[81, "asarray-inputs-to-native-shapes"]], "dtype_bits": [[117, "dtype-bits"]], "full_like": [[90, "full-like"]], "linspace": [[91, "linspace"]], "tril": [[98, "tril"]], "copy_array": [[83, "copy-array"]], "dtype": [[116, "dtype"]], "if_else": [[72, "if-else"]], "as_native_dtype": [[104, "as-native-dtype"]], "sigmoid": [[65, "sigmoid"]], "softplus": [[67, "softplus"]], "asarray_infer_dtype": [[80, "asarray-infer-dtype"]], "ones_like": [[97, "ones-like"]], "eye": [[86, "eye"]], "default_complex_dtype": [[111, "default-complex-dtype"]], "triu_indices": [[100, "triu-indices"]], "as_ivy_dtype": [[103, "as-ivy-dtype"]], "array": [[76, "array"]], "meshgrid": [[93, "meshgrid"]], "function_unsupported_dtypes": [[120, "function-unsupported-dtypes"]], "while_loop": [[74, "while-loop"]], "one_hot": [[95, "one-hot"]], "cmp_isnot": [[70, "cmp-isnot"]], "relu": [[64, "relu"]], "zeros_like": [[102, "zeros-like"]], "asarray_to_native_arrays_and_back": [[82, "asarray-to-native-arrays-and-back"]], "cmp_is": [[69, "cmp-is"]], "empty": [[84, "empty"]], "full": [[89, "full"]], "finfo": [[118, "finfo"]], "iinfo": [[121, "iinfo"]], "mish": [[63, "mish"]], "asarray_handle_nestable": [[78, "asarray-handle-nestable"]], "arange": [[75, "arange"]], "astype": [[105, "astype"]], "try_except": [[73, "try-except"]], "Wrapper Frameworks": [[765, "wrapper-frameworks"], [764, "wrapper-frameworks"]], "EagerPy eagerpy": [[765, "eagerpy-eagerpy"]], "Keras keras": [[765, "keras-keras"]], "Thinc thinc": [[765, "thinc-thinc"]], "TensorLy tensorly": [[765, "tensorly-tensorly"]], "NeuroPod": [[765, "id1"]], "Ivy Container": [[746, "ivy-container"]], "Construction": [[746, "construction"]], "Representation": [[746, "representation"]], "Recursive Methods": [[746, "recursive-methods"]], "Built-ins": [[746, "built-ins"]], "Access": [[746, "access"]], "Saving and Loading": [[746, "saving-and-loading"]], "Comparisons": [[746, "comparisons"]], "Customized Representations": [[746, "customized-representations"]], "Use Cases": [[746, "use-cases"]], "Compartmentalization": [[746, "compartmentalization"]], "Configuration": [[746, "configuration"]], "Data loading": [[746, "data-loading"]], "Network weights": [[746, "network-weights"]], "What does Ivy Add?": [[764, "what-does-ivy-add"]], "API Standards": [[764, "api-standards"], [755, "api-standards"]], "Frameworks": [[764, "frameworks"], [758, "frameworks"]], "Graph Tracers": [[764, "graph-tracers"], [759, "graph-tracers"]], "Exchange Formats": [[764, "exchange-formats"], [757, "exchange-formats"]], "Compiler Infrastructure": [[764, "compiler-infrastructure"], [756, "compiler-infrastructure"]], "Multi-Vendor Compiler Frameworks": [[764, "multi-vendor-compiler-frameworks"], [761, "multi-vendor-compiler-frameworks"]], "Vendor-Specific APIs": [[764, "vendor-specific-apis"], [762, "vendor-specific-apis"]], "Vendor-Specific Compilers": [[764, "vendor-specific-compilers"], [763, "vendor-specific-compilers"]], "ML-Unifying Companies": [[764, "ml-unifying-companies"], [760, "ml-unifying-companies"]], "Ivy Stateful API": [[747, "ivy-stateful-api"]], "Modules": [[747, "modules"]], "Initializers": [[747, "initializers"], [687, "module-ivy.stateful.initializers"]], "Optimizers": [[747, "optimizers"], [692, "module-ivy.stateful.optimizers"]], "ONNX onnx": [[757, "onnx-onnx"]], "NNEF nnef": [[757, "nnef-nnef"]], "CoreML coreml": [[757, "coreml-coreml"]], "Ivy as a Framework": [[744, "ivy-as-a-framework"]], "Ivy as a Transpiler": [[748, "ivy-as-a-transpiler"]], "Frontend Functional APIs \ud83d\udea7": [[748, "frontend-functional-apis"]], "Role of the Graph Compiler \ud83d\udea7": [[748, "role-of-the-graph-compiler"]], "Converting Network Models \ud83d\udea7": [[748, "converting-network-models"]], "Extensions": [[749, "extensions"]], "Operating Modes": [[740, "operating-modes"]], "Global Parameter Properties": [[740, "global-parameter-properties"]], "Getter: ivy.<setting> attribute": [[740, "getter-ivy-setting-attribute"]], "Setter: ivy.set_<setting> and ivy.unset_<setting> functions": [[740, "setter-ivy-set-setting-and-ivy-unset-setting-functions"]], "FAQ": [[751, "faq"]], "Maintaining Backend Versions": [[751, "maintaining-backend-versions"]], "Dynamic Sizes": [[751, "dynamic-sizes"]], "Type and Shape Checking": [[751, "type-and-shape-checking"]], "GPU handling": [[751, "gpu-handling"]], "Model Deployment": [[751, "model-deployment"]], "Dynamic Control Flow": [[751, "dynamic-control-flow"]], "Auto-Differentiation": [[751, "auto-differentiation"]], "Replicas, and Data vs Model Parallelism": [[751, "replicas-and-data-vs-model-parallelism"]], "Support for Functions": [[751, "support-for-functions"]], "Alternative Data Structures": [[751, "alternative-data-structures"]], "Custom Operations": [[751, "custom-operations"]], "The Pipeline": [[751, "the-pipeline"]], "State": [[751, "state"]], "Function Types": [[732, "function-types"]], "Primary Functions": [[732, "primary-functions"]], "Compositional Functions": [[732, "compositional-functions"]], "Mixed Functions": [[732, "mixed-functions"]], "Partial Mixed Functions": [[732, "partial-mixed-functions"]], "Standalone Functions": [[732, "standalone-functions"]], "Nestable Functions": [[732, "nestable-functions"], [723, "nestable-functions"], [731, "nestable-functions"]], "Convenience Functions": [[732, "convenience-functions"]], "Apache TVM": [[761, "apache-tvm"]], "XLA": [[761, "xla"]], "GCC": [[761, "gcc"]], "Inplace Updates": [[735, "inplace-updates"]], "out argument": [[735, "out-argument"]], "copy argument": [[735, "copy-argument"]], "Views": [[735, "views"]], "tf.Graph": [[759, "tf-graph"]], "Jaxpr": [[759, "jaxpr"]], "torch.jit": [[759, "torch-jit"]], "torch.fx": [[759, "torch-fx"]], "Array API Standard": [[755, "id1"]], "Related Work": [[754, "related-work"]], "Applied Libraries": [[750, "applied-libraries"], [712, "applied-libraries"]], "Ivy Mechanics": [[750, "ivy-mechanics"]], "Ivy Vision": [[750, "ivy-vision"]], "Ivy Robot": [[750, "ivy-robot"]], "Ivy Gym": [[750, "ivy-gym"]], "Ivy Memory": [[750, "ivy-memory"]], "Superset Behaviour": [[741, "superset-behaviour"]], "Extending the Standard": [[741, "extending-the-standard"]], "What is the Superset?": [[741, "what-is-the-superset"]], "A Non-Duplicate Superset": [[741, "a-non-duplicate-superset"]], "What is not the Superset?": [[741, "what-is-not-the-superset"]], "Balancing Generalization with Efficiency": [[741, "balancing-generalization-with-efficiency"]], "More Examples": [[741, "more-examples"]], "Maximizing Usage of Native Functionality": [[741, "maximizing-usage-of-native-functionality"]], "Glossary": [[753, "glossary"]], "Ivy Frontend Tests": [[737, "ivy-frontend-tests"]], "Introduction": [[737, "introduction"], [736, "introduction"], [712, "introduction"]], "Frontend Test Examples": [[737, "frontend-test-examples"]], "ivy.tan()": [[737, "ivy-tan"]], "ivy.full()": [[737, "ivy-full"]], "Testing Without Using Tests Values": [[737, "testing-without-using-tests-values"]], "Alias functions": [[737, "alias-functions"]], "Frontend Instance Method Tests": [[737, "frontend-instance-method-tests"]], "Frontend Instance Method Test Examples": [[737, "frontend-instance-method-test-examples"]], "ivy.add()": [[737, "ivy-add"]], "Hypothesis Helpers": [[737, "hypothesis-helpers"]], "Frontend Framework Testing Configuration": [[737, "frontend-framework-testing-configuration"]], "Navigating the Code": [[739, "navigating-the-code"]], "Categorization": [[739, "categorization"]], "Submodule Design": [[739, "submodule-design"]], "Ivy API": [[739, "ivy-api"]], "Backend API": [[739, "backend-api"]], "Submodule Helper Functions": [[739, "submodule-helper-functions"]], "Version Unpinning": [[739, "version-unpinning"]], "Quansight": [[760, "id1"]], "Modular": [[760, "id2"]], "OctoML": [[760, "id3"]], "Ivy Frontends": [[736, "ivy-frontends"]], "The Frontend Basics": [[736, "the-frontend-basics"]], "Writing Frontend Functions": [[736, "writing-frontend-functions"]], "Short Frontend Implementations": [[736, "short-frontend-implementations"]], "Unused Arguments": [[736, "unused-arguments"]], "Supported Data Types and Devices": [[736, "supported-data-types-and-devices"]], "Classes and Instance Methods": [[736, "id6"]], "Frontend Data Type Promotion Rules": [[736, "frontend-data-type-promotion-rules"]], "NumPy Special Argument - Casting": [[736, "numpy-special-argument-casting"]], "Frontends Duplicate Policy": [[736, "frontends-duplicate-policy"]], "Function Wrapping": [[733, "function-wrapping"]], "Decorator order": [[733, "decorator-order"]], "Conversion Wrappers": [[733, "conversion-wrappers"]], "Inference Wrappers": [[733, "inference-wrappers"]], "Out Argument Support": [[733, "out-argument-support"]], "Nestable Support": [[733, "nestable-support"]], "Partial Mixed Function Support": [[733, "partial-mixed-function-support"]], "Shape Conversion": [[733, "shape-conversion"]], "View Handling": [[733, "view-handling"]], "Exception Handling": [[733, "exception-handling"], [729, "exception-handling"]], "Miscellaneous Wrappers": [[733, "miscellaneous-wrappers"]], "Gradients": [[734, "gradients"], [535, "gradients"], [37, "module-ivy.data_classes.container.gradients"], [14, "module-ivy.data_classes.array.gradients"], [306, "gradients"]], "Overview": [[734, "overview"]], "Example Usage of the Gradient API": [[734, "example-usage-of-the-gradient-api"]], "The ivy.execute_with_gradients() function signature": [[734, "the-ivy-execute-with-gradients-function-signature"]], "An example using ivy.execute_with_gradients()": [[734, "an-example-using-ivy-execute-with-gradients"]], "Custom Gradient Functions": [[734, "custom-gradient-functions"]], "Design of the Gradient API": [[734, "design-of-the-gradient-api"]], "Our policy on gradients": [[734, "our-policy-on-gradients"]], "Gradient APIs of frameworks": [[734, "gradient-apis-of-frameworks"]], "General Structure of Backend-specific implementations": [[734, "general-structure-of-backend-specific-implementations"]], "Framework-specific Considerations": [[734, "framework-specific-considerations"]], "Ivy Array": [[745, "ivy-array"], [720, "ivy-array"]], "The Array Class": [[745, "the-array-class"]], "Unifying Operators": [[745, "unifying-operators"]], "API Monkey Patching": [[745, "api-monkey-patching"]], "Instance Methods": [[745, "instance-methods"]], "MATLAB matlab": [[758, "matlab-matlab"]], "SciPy scipy": [[758, "scipy-scipy"]], "Torch torch": [[758, "torch-torch"]], "NumPy numpy": [[758, "numpy-numpy"]], "SciKit Learn scikit-learn": [[758, "scikit-learn-scikit-learn"]], "Theano theano": [[758, "theano-theano"]], "Pandas pandas": [[758, "pandas-pandas"]], "Julia julia": [[758, "julia-julia"]], "Apache Spark MLlib apache-spark-mllib": [[758, "apache-spark-mllib-apache-spark-mllib"]], "Caffe caffe": [[758, "caffe-caffe"]], "Chainer chainer": [[758, "chainer-chainer"]], "TensorFlow 1 tensorflow-1": [[758, "tensorflow-1-tensorflow-1"]], "MXNet mxnet": [[758, "mxnet-mxnet"]], "CNTK cntk": [[758, "cntk-cntk"]], "PyTorch pytorch": [[758, "pytorch-pytorch"]], "Flux flux": [[758, "flux-flux"]], "JAX jax": [[758, "jax-jax"]], "TensorFlow 2 tensorflow-2": [[758, "tensorflow-2-tensorflow-2"]], "DEX Language dex-language": [[758, "dex-language-dex-language"]], "Ivy Tests": [[738, "ivy-tests"], [724, "ivy-tests"]], "Testing Pipeline": [[738, "testing-pipeline"]], "Hypothesis": [[738, "id1"]], "Data Generation": [[738, "id2"]], "Writing your own strategy": [[738, "writing-your-own-strategy"]], "Writing Hypothesis Tests": [[738, "writing-hypothesis-tests"]], "Ivy Test Decorators": [[738, "ivy-test-decorators"]], "Writing Ivy Tests": [[738, "writing-ivy-tests"]], "Integration of Strategies into Ivy Tests": [[738, "integration-of-strategies-into-ivy-tests"]], "Why do we need helper functions": [[738, "why-do-we-need-helper-functions"]], "How to write Hypothesis Tests effectively": [[738, "how-to-write-hypothesis-tests-effectively"]], "Testing Partial Mixed Functions": [[738, "testing-partial-mixed-functions"]], "Bonus: Hypothesis\u2019 Extended Features": [[738, "bonus-hypothesis-extended-features"]], "Self-Consistent and Explicit Testing": [[738, "self-consistent-and-explicit-testing"]], "test_array_function": [[738, "id5"]], "Running Ivy Tests": [[738, "running-ivy-tests"]], "Re-Running Failed Ivy Tests": [[738, "re-running-failed-ivy-tests"]], "Building Blocks": [[743, "building-blocks"]], "Backend Functional APIs \u2705": [[743, "backend-functional-apis"]], "Ivy Functional API \u2705": [[743, "ivy-functional-api"]], "Backend Handler \u2705": [[743, "backend-handler"]], "Graph Compiler \ud83d\udea7": [[743, "graph-compiler"]], "Get Started": [[752, "get-started"]], "Installing using pip": [[752, "installing-using-pip"], [706, "installing-using-pip"]], "Docker": [[752, "docker"], [706, "docker"]], "Installing from source": [[752, "installing-from-source"], [706, "installing-from-source"]], "TensorRT tensorrt": [[762, "tensorrt-tensorrt"]], "CUDA cuda": [[762, "cuda-cuda"]], "ICC": [[763, "id1"]], "ICX": [[763, "icx"]], "NVCC": [[763, "nvcc"]], "Design": [[742, "design"]], "LLVM": [[756, "id1"]], "MLIR": [[756, "id2"]], "OneAPI": [[756, "id3"]], "Converters": [[685, "module-ivy.stateful.converters"]], "Testing helpers": [[680, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "Globals": [[671, "module-ivy_tests.test_ivy.helpers.globals"]], "Assertions": [[694, "module-ivy.utils.assertions"], [668, "module-ivy_tests.test_ivy.helpers.assertions"]], "Utils": [[682, "utils"]], "Losses": [[689, "module-ivy.stateful.losses"], [538, "losses"], [41, "module-ivy.data_classes.container.losses"], [18, "module-ivy.data_classes.array.losses"], [309, "losses"]], "Ivy Exception Class": [[729, "ivy-exception-class"]], "Configurable Mode for Stack Trace": [[729, "configurable-mode-for-stack-trace"]], "Ivy func_wrapper Pruning": [[729, "ivy-func-wrapper-pruning"]], "@handle_exceptions Decorator": [[729, "handle-exceptions-decorator"]], "Consistency in Errors": [[729, "consistency-in-errors"]], "Assertion Function": [[729, "assertion-function"]], "Arrays": [[720, "arrays"]], "Native Array": [[720, "native-array"]], "Array Handling": [[720, "array-handling"]], "Integrating custom classes with Ivy": [[720, "integrating-custom-classes-with-ivy"]], "Containers": [[723, "containers"]], "Container Instance Methods": [[723, "container-instance-methods"]], "API Instance Methods": [[723, "api-instance-methods"]], "API Special Methods": [[723, "api-special-methods"]], "Backend Setting": [[721, "backend-setting"]], "Dynamic Backend Setting": [[721, "dynamic-backend-setting"]], "Backend and Frontend Version Support": [[721, "backend-and-frontend-version-support"]], "The Basics": [[717, "the-basics"]], "Getting Help": [[717, "getting-help"]], "ToDo List Issues": [[717, "todo-list-issues"]], "Managing Your Fork": [[717, "managing-your-fork"]], "Who To Ask": [[717, "who-to-ask"]], "With Command Line:": [[717, "with-command-line"]], "With Browser:": [[717, "with-browser"]], "Pull Requests": [[717, "pull-requests"]], "Small Commits Often": [[717, "small-commits-often"]], "Interactive Ivy Docker Container": [[717, "interactive-ivy-docker-container"]], "Running Tests Locally": [[717, "running-tests-locally"]], "With Docker": [[717, "with-docker"]], "Getting the most out of IDE": [[717, "getting-the-most-out-of-ide"]], "with PyCharm": [[717, "with-pycharm"]], "Exceptions": [[701, "module-ivy.utils.exceptions"]], "Helpful Resources": [[714, "helpful-resources"]], "Framework classes": [[681, "framework-classes"]], "Sequential": [[693, "module-ivy.stateful.sequential"]], "Open Tasks": [[715, "open-tasks"]], "Function Formatting": [[715, "function-formatting"]], "Formatting checklist": [[715, "formatting-checklist"]], "Frontend APIs": [[715, "frontend-apis"]], "Where to place a frontend function": [[715, "where-to-place-a-frontend-function"]], "Frontend checklist": [[715, "frontend-checklist"]], "Ivy Experimental API": [[715, "ivy-experimental-api"]], "Extending the Ivy API": [[715, "extending-the-ivy-api"]], "Where to place a backend function": [[715, "where-to-place-a-backend-function"]], "Creating an Issue on Ivy\u2019s GitHub using a Template": [[715, "creating-an-issue-on-ivy-s-github-using-a-template"]], "General helpers": [[675, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "Layers": [[688, "module-ivy.stateful.layers"], [536, "layers"], [16, "module-ivy.data_classes.array.layers"], [39, "module-ivy.data_classes.container.layers"], [307, "layers"]], "Devices": [[726, "devices"]], "Device Module": [[726, "device-module"]], "Arguments in other Functions": [[726, "arguments-in-other-functions"], [725, "arguments-in-other-functions"]], "Device handling": [[726, "device-handling"]], "Testing": [[683, "testing"]], "Module": [[690, "module-ivy.stateful.module"]], "Einsum parser": [[700, "module-ivy.utils.einsum_parser"]], "Number helpers": [[676, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "Status": [[706, "status"]], "Unified AI": [[706, "unified-ai"]], "Ivy as a transpiler": [[706, "ivy-as-a-transpiler"]], "When should I use Ivy as a transpiler?": [[706, "when-should-i-use-ivy-as-a-transpiler"]], "Ivy as a framework": [[706, "ivy-as-a-framework"]], "When should I use Ivy as a framework?": [[706, "when-should-i-use-ivy-as-a-framework"]], "Setting up Ivy": [[706, "setting-up-ivy"]], "Using Ivy": [[706, "using-ivy"]], "Multi-backend Support": [[706, "multi-backend-support"]], "Transpilation API": [[706, "transpilation-api"]], "Documentation": [[706, "documentation"]], "Examples": [[706, "examples"], [731, "examples"], [0, "examples"], [2, "examples"]], "Contributing": [[706, "contributing"], [711, "contributing"]], "Community": [[706, "community"]], "Citation": [[706, "citation"]], "Hypothesis helpers": [[672, "hypothesis-helpers"]], "Docstrings": [[728, "docstrings"]], "ML Explosion": [[708, "ml-explosion"]], "Dtype helpers": [[674, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "Why Unify?": [[710, "why-unify"]], "No More Re-implementations \ud83d\udea7": [[710, "no-more-re-implementations"]], "\u201cInfinite\u201d Shelf-Life \u2705": [[710, "infinite-shelf-life"]], "Backend": [[695, "backend"]], "Activations": [[684, "module-ivy.stateful.activations"], [526, "activations"], [6, "module-ivy.data_classes.array.activations"], [28, "module-ivy.data_classes.container.activations"], [299, "activations"]], "Ast helpers": [[696, "module-ivy.utils.backend.ast_helpers"]], "Test parameter flags": [[679, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "Logging": [[703, "module-ivy.utils.logging"]], "Norms": [[691, "module-ivy.stateful.norms"], [542, "norms"], [43, "module-ivy.data_classes.container.norms"], [20, "module-ivy.data_classes.array.norms"], [313, "norms"]], "Building the Docs": [[713, "building-the-docs"]], "Building the Docs using Docker": [[713, "building-the-docs-using-docker"]], "Using convenience script": [[713, "using-convenience-script"]], "Using existing image on Docker Hub": [[713, "using-existing-image-on-docker-hub"]], "Building the image locally": [[713, "building-the-image-locally"]], "Building the Docs without Docker": [[713, "building-the-docs-without-docker"]], "Example - Ivy Robot": [[712, "example-ivy-robot"]], "Handler": [[697, "module-ivy.utils.backend.handler"]], "Building the Docs Pipeline": [[722, "building-the-docs-pipeline"]], "How the doc-builder is being run": [[722, "how-the-doc-builder-is-being-run"]], "The convenience script": [[722, "the-convenience-script"]], "Options": [[722, "options"]], "The Docker image": [[722, "the-docker-image"]], "How Ivy\u2019s docs is structured": [[722, "how-ivy-s-docs-is-structured"]], "index.rst": [[722, "index-rst"]], "partial_conf.py": [[722, "partial-conf-py"]], "prebuild.sh": [[722, "prebuild-sh"]], "Custom Extensions": [[722, "custom-extensions"]], "custom_autosummary": [[722, "custom-autosummary"]], ":hide-table:": [[722, "hide-table"]], "discussion_linker": [[722, "discussion-linker"]], "skippable_function": [[722, "skippable-function"]], "ivy_data": [[722, "ivy-data"]], "Verbosity": [[705, "module-ivy.utils.verbosity"]], "Array API Tests": [[719, "array-api-tests"], [724, "array-api-tests"]], "Running the Tests": [[719, "running-the-tests"]], "Using Terminal": [[719, "using-terminal"]], "Using the IDE": [[719, "using-the-ide"]], "Regenerating Test Failures": [[719, "regenerating-test-failures"]], "Test Skipping": [[719, "test-skipping"]], "Sub backend handler": [[698, "module-ivy.utils.backend.sub_backend_handler"]], "Array helpers": [[673, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "Continuous Integration": [[724, "continuous-integration"], [730, "continuous-integration"]], "Commit (Push/PR) Triggered Testing": [[724, "commit-push-pr-triggered-testing"]], "Implementation": [[724, "implementation"]], "A Top-Down View": [[724, "a-top-down-view"]], "Storing (and retrieving) the Mapping": [[724, "storing-and-retrieving-the-mapping"]], "Cloning and Pushing to the Repository": [[724, "cloning-and-pushing-to-the-repository"]], "Implementational Nitty Gritties": [[724, "implementational-nitty-gritties"]], "Storage Space (unifyai/Mapping)": [[724, "storage-space-unifyai-mapping"]], "Determine Test Coverage Workflow": [[724, "determine-test-coverage-workflow"]], "Multiple Runners": [[724, "multiple-runners"]], "Race Condition": [[724, "race-condition"]], "Periodic Testing": [[724, "periodic-testing"]], "Manually Dispatched Workflows": [[724, "manually-dispatched-workflows"]], "CI Pipeline \u27a1\ufe0f": [[724, "ci-pipeline"]], "Push": [[724, "push"]], "Pull Request": [[724, "pull-request"]], "Dashboard": [[724, "dashboard"]], "Standardization": [[709, "standardization"]], "Skepticism": [[709, "skepticism"]], "Complimentary vs Competitive": [[709, "complimentary-vs-competitive"]], "Do Standards Work?": [[709, "do-standards-work"]], "The Array API Standard": [[709, "the-array-api-standard"]], "Data Types": [[725, "data-types"]], "Data Type Module": [[725, "data-type-module"]], "Data Type Promotion": [[725, "data-type-promotion"]], "Supported and Unsupported Data Types": [[725, "supported-and-unsupported-data-types"]], "Backend Data Type Bugs": [[725, "backend-data-type-bugs"]], "Data Type Casting Modes": [[725, "data-type-casting-modes"]], "Superset Data Type Support": [[725, "superset-data-type-support"]], "Function Arguments": [[731, "function-arguments"]], "Positional and Keyword Arguments": [[731, "positional-and-keyword-arguments"]], "Input Arrays": [[731, "input-arrays"]], "out Argument": [[731, "out-argument"]], "dtype and device arguments": [[731, "dtype-and-device-arguments"]], "Numbers in Operator Functions": [[731, "numbers-in-operator-functions"]], "Integer Sequences": [[731, "integer-sequences"]], "Background": [[707, "background"]], "Profiler": [[704, "module-ivy.utils.profiler"]], "Deep Dive": [[718, "deep-dive"]], "Helpers": [[686, "module-ivy.stateful.helpers"]], "Docstring Examples": [[727, "docstring-examples"]], "ivy.tan": [[727, "ivy-tan"]], "ivy.roll": [[727, "ivy-roll"]], "ivy.add": [[727, "ivy-add"]], "Formatting": [[730, "formatting"]], "Lint Checks": [[730, "lint-checks"], [730, "id2"]], "Setup Formatting Locally": [[730, "setup-formatting-locally"]], "Pre-commit": [[730, "pre-commit"]], "VS Code": [[730, "vs-code"]], "PyCharm": [[730, "pycharm"], [716, "pycharm"]], "Common Issues with Pre-Commit": [[730, "common-issues-with-pre-commit"]], "Lint Formatting": [[730, "lint-formatting"]], "Dynamic import": [[699, "module-ivy.utils.dynamic_import"]], "Pipeline helper": [[677, "module-ivy_tests.test_ivy.helpers.pipeline_helper"]], "Setting Up": [[716, "setting-up"], [1, "setting-up"]], "Forking and cloning the repo": [[716, "forking-and-cloning-the-repo"]], "Pre-Commit": [[716, "pre-commit"]], "Virtual environments - No Docker": [[716, "virtual-environments-no-docker"]], "Using miniconda": [[716, "using-miniconda"]], "Using venv": [[716, "using-venv"]], "Docker Interpreter with PyCharm": [[716, "docker-interpreter-with-pycharm"]], "Windows": [[716, "windows"], [716, "id6"]], "MacOS": [[716, "macos"]], "Ubuntu": [[716, "ubuntu"], [716, "id8"]], "Setting Up Testing in PyCharm": [[716, "setting-up-testing-in-pycharm"]], "More Detailed Hypothesis Logs in PyCharm": [[716, "more-detailed-hypothesis-logs-in-pycharm"]], "Setting up for Free": [[716, "setting-up-for-free"]], "WSL": [[716, "wsl"]], "GitHub Codespaces": [[716, "github-codespaces"]], "Structs": [[678, "module-ivy_tests.test_ivy.helpers.structs"]], "Inspection": [[702, "module-ivy.utils.inspection"]], "tile": [[610, "tile"]], "zero_pad": [[612, "zero-pad"]], "all_nested_indices": [[616, "all-nested-indices"]], "argmax": [[642, "argmax"]], "map_nest_at_indices": [[624, "map-nest-at-indices"]], "std": [[662, "std"]], "layer_norm": [[635, "layer-norm"]], "randint": [[637, "randint"]], "fomaml_step": [[613, "fomaml-step"]], "maml_step": [[614, "maml-step"]], "nested_argwhere": [[627, "nested-argwhere"]], "index_nest": [[619, "index-nest"]], "argsort": [[651, "argsort"]], "multinomial": [[636, "multinomial"]], "random_uniform": [[639, "random-uniform"]], "shuffle": [[641, "shuffle"]], "argmin": [[643, "argmin"]], "mean": [[659, "mean"]], "sum": [[663, "sum"]], "duplicate_array_index_chains": [[618, "duplicate-array-index-chains"]], "nested_multi_map": [[629, "nested-multi-map"]], "set_nest_at_indices": [[634, "set-nest-at-indices"]], "unique_all": [[647, "unique-all"]], "Data-dependent output shape": [[647, null], [649, null], [650, null], [648, null], [545, null], [545, null], [545, null], [545, null]], "all": [[665, "all"]], "argwhere": [[644, "argwhere"]], "random_normal": [[638, "random-normal"]], "seed": [[640, "seed"]], "msort": [[652, "msort"]], "multi_index_nest": [[625, "multi-index-nest"]], "unstack": [[611, "unstack"]], "copy_nest": [[617, "copy-nest"]], "nonzero": [[645, "nonzero"]], "unique_inverse": [[649, "unique-inverse"]], "nested_any": [[626, "nested-any"]], "unique_values": [[650, "unique-values"]], "prod": [[661, "prod"]], "var": [[664, "var"]], "insert_into_nest_at_index": [[620, "insert-into-nest-at-index"]], "min": [[660, "min"]], "max": [[658, "max"]], "prune_empty": [[630, "prune-empty"]], "searchsorted": [[653, "searchsorted"]], "map": [[622, "map"]], "any": [[666, "any"]], "reptile_step": [[615, "reptile-step"]], "prune_nest_at_index": [[631, "prune-nest-at-index"]], "prune_nest_at_indices": [[632, "prune-nest-at-indices"]], "Available frameworks": [[669, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "insert_into_nest_at_indices": [[621, "insert-into-nest-at-indices"]], "Function testing": [[670, "module-ivy_tests.test_ivy.helpers.function_testing"]], "sort": [[654, "sort"]], "einsum": [[657, "einsum"]], "map_nest_at_index": [[623, "map-nest-at-index"]], "cumsum": [[656, "cumsum"]], "set_nest_at_index": [[633, "set-nest-at-index"]], "save": [[667, "save"]], "where": [[646, "where"]], "cumprod": [[655, "cumprod"]], "nested_map": [[628, "nested-map"]], "unique_counts": [[648, "unique-counts"]], "linear": [[560, "linear"]], "split": [[606, "split"]], "conv_general_transpose": [[557, "conv-general-transpose"]], "matrix_transpose": [[579, "matrix-transpose"]], "tensordot": [[587, "tensordot"]], "permute_dims": [[602, "permute-dims"]], "pinv": [[581, "pinv"]], "flip": [[601, "flip"]], "depthwise_conv2d": [[558, "depthwise-conv2d"]], "lstm_update": [[561, "lstm-update"]], "diagonal": [[568, "diagonal"]], "det": [[566, "det"]], "outer": [[580, "outer"]], "swapaxes": [[609, "swapaxes"]], "cross": [[565, "cross"]], "conv": [[549, "conv"]], "conv2d": [[552, "conv2d"]], "eig": [[569, "eig"], [355, "eig"]], "eigh": [[570, "eigh"]], "vecdot": [[591, "vecdot"]], "matrix_rank": [[578, "matrix-rank"]], "tensorsolve": [[588, "tensorsolve"]], "vector_to_skew_symmetric_matrix": [[593, "vector-to-skew-symmetric-matrix"]], "cross_entropy": [[595, "cross-entropy"]], "multi_head_attention": [[562, "multi-head-attention"]], "matmul": [[575, "matmul"]], "solve": [[584, "solve"]], "roll": [[605, "roll"]], "clip": [[597, "clip"]], "conv3d": [[554, "conv3d"]], "binary_cross_entropy": [[594, "binary-cross-entropy"]], "constant_pad": [[599, "constant-pad"]], "slogdet": [[583, "slogdet"]], "scaled_dot_product_attention": [[563, "scaled-dot-product-attention"]], "expand_dims": [[600, "expand-dims"]], "stack": [[608, "stack"]], "cholesky": [[564, "cholesky"]], "inv": [[573, "inv"]], "conv3d_transpose": [[555, "conv3d-transpose"]], "qr": [[582, "qr"]], "squeeze": [[607, "squeeze"]], "svdvals": [[586, "svdvals"]], "# Instance Method Examples": [[586, "instance-method-examples"], [537, "instance-method-examples"]], "svd": [[585, "svd"]], "conv2d_transpose": [[553, "conv2d-transpose"]], "conv_general_dilated": [[556, "conv-general-dilated"]], "vander": [[590, "vander"]], "vector_norm": [[592, "vector-norm"]], "sparse_cross_entropy": [[596, "sparse-cross-entropy"]], "eigvalsh": [[571, "eigvalsh"]], "lu_factor": [[574, "lu-factor"]], "dropout": [[559, "dropout"]], "diag": [[567, "diag"]], "inner": [[572, "inner"]], "repeat": [[603, "repeat"]], "matrix_power": [[577, "matrix-power"]], "trace": [[589, "trace"]], "conv1d_transpose": [[551, "conv1d-transpose"]], "reshape": [[604, "reshape"]], "matrix_norm": [[576, "matrix-norm"]], "conv1d": [[550, "conv1d"]], "concat": [[598, "concat"]], "set_queue_timeout": [[488, "set-queue-timeout"]], "unset_tmp_dir": [[512, "unset-tmp-dir"]], "jac": [[520, "jac"]], "lars_update": [[522, "lars-update"]], "strides": [[495, "strides"]], "unset_nestable_mode": [[507, "unset-nestable-mode"]], "to_list": [[498, "to-list"]], "try_else_none": [[502, "try-else-none"]], "Control flow ops": [[528, "control-flow-ops"]], "Meta": [[540, "meta"], [311, "module-ivy.functional.ivy.experimental.meta"]], "optimizer_update": [[523, "optimizer-update"]], "unset_precise_mode": [[508, "unset-precise-mode"]], "Sorting": [[546, "sorting"], [24, "module-ivy.data_classes.array.sorting"], [47, "module-ivy.data_classes.container.sorting"], [317, "sorting"]], "Constants": [[527, "module-ivy.functional.ivy.constants"], [300, "module-ivy.functional.ivy.experimental.constants"]], "Manipulation": [[539, "manipulation"], [19, "module-ivy.data_classes.array.manipulation"], [42, "module-ivy.data_classes.container.manipulation"], [310, "manipulation"]], "Data type": [[530, "data-type"], [9, "module-ivy.data_classes.array.data_type"], [32, "module-ivy.data_classes.container.data_type"], [302, "module-ivy.functional.ivy.experimental.data_type"]], "Statistical": [[547, "statistical"], [48, "module-ivy.data_classes.container.statistical"], [25, "module-ivy.data_classes.array.statistical"], [319, "statistical"]], "Linear algebra": [[537, "linear-algebra"], [40, "module-ivy.data_classes.container.linear_algebra"], [17, "module-ivy.data_classes.array.linear_algebra"], [308, "linear-algebra"]], "unset_array_mode": [[503, "unset-array-mode"]], "Nest": [[541, "nest"], [312, "module-ivy.functional.ivy.experimental.nest"]], "value_and_grad": [[525, "value-and-grad"]], "vmap": [[514, "vmap"]], "lamb_update": [[521, "lamb-update"]], "General": [[534, "general"], [36, "module-ivy.data_classes.container.general"], [13, "module-ivy.data_classes.array.general"], [305, "general"]], "Parameter": [[534, "parameter"], [534, "id1"], [534, "id2"], [534, "id3"], [534, "id4"], [534, "id5"], [490, "parameter"], [531, "parameter"], [489, "parameter"], [481, "parameter"], [487, "parameter"], [486, "parameter"], [482, "parameter"], [163, "parameter"]], "to_scalar": [[501, "to-scalar"]], "unset_queue_timeout": [[509, "unset-queue-timeout"]], "to_ivy_shape": [[497, "to-ivy-shape"]], "set_show_func_wrapper_trace_mode": [[490, "set-show-func-wrapper-trace-mode"]], "unset_shape_array_mode": [[510, "unset-shape-array-mode"]], "unset_exception_trace_mode": [[504, "unset-exception-trace-mode"]], "execute_with_gradients": [[517, "execute-with-gradients"]], "Creation": [[529, "creation"], [31, "module-ivy.data_classes.container.creation"], [8, "module-ivy.data_classes.array.creation"], [301, "creation"]], "set_tmp_dir": [[491, "set-tmp-dir"]], "stable_pow": [[494, "stable-pow"]], "adam_step": [[515, "adam-step"]], "stable_divide": [[493, "stable-divide"]], "grad": [[518, "grad"]], "Device": [[531, "device"], [10, "module-ivy.data_classes.array.device"], [33, "module-ivy.data_classes.container.device"], [303, "module-ivy.functional.ivy.experimental.device"]], "Elementwise": [[532, "elementwise"], [11, "module-ivy.data_classes.array.elementwise"], [56, "module-ivy.data_classes.nested_array.elementwise"], [34, "module-ivy.data_classes.container.elementwise"], [304, "elementwise"]], "to_native_shape": [[499, "to-native-shape"]], "set_shape_array_mode": [[489, "set-shape-array-mode"]], "adam_update": [[516, "adam-update"]], "Set": [[545, "set"], [46, "module-ivy.data_classes.container.set"], [23, "module-ivy.data_classes.array.set"], [316, "module-ivy.functional.ivy.experimental.set"]], "Utility": [[548, "utility"], [49, "module-ivy.data_classes.container.utility"], [26, "module-ivy.data_classes.array.utility"], [320, "module-ivy.functional.ivy.experimental.utility"]], "stop_gradient": [[524, "stop-gradient"]], "Searching": [[544, "searching"], [22, "module-ivy.data_classes.array.searching"], [45, "module-ivy.data_classes.container.searching"], [315, "searching"]], "value_is_nan": [[513, "value-is-nan"]], "shape": [[492, "shape"]], "unset_show_func_wrapper_trace_mode": [[511, "unset-show-func-wrapper-trace-mode"]], "unset_min_base": [[505, "unset-min-base"]], "to_numpy": [[500, "to-numpy"]], "unset_min_denominator": [[506, "unset-min-denominator"]], "gradient_descent_update": [[519, "gradient-descent-update"]], "supports_inplace_updates": [[496, "supports-inplace-updates"]], "Random": [[543, "random"], [21, "module-ivy.data_classes.array.random"], [44, "module-ivy.data_classes.container.random"], [314, "random"]], "Experimental": [[533, "experimental"], [35, "module-ivy.data_classes.container.experimental"], [12, "module-ivy.data_classes.array.experimental"]], "Factorizedtensor": [[51, "factorizedtensor"]], "hardswish": [[60, "hardswish"]], "Image": [[38, "module-ivy.data_classes.container.image"], [15, "module-ivy.data_classes.array.image"]], "Conversions": [[7, "module-ivy.data_classes.array.conversions"], [30, "module-ivy.data_classes.container.conversions"]], "Base": [[29, "module-ivy.data_classes.container.base"], [3, "module-ivy.data_classes.FactorizedTensor.base"], [55, "module-ivy.data_classes.nested_array.base"]], "Tucker tensor": [[5, "module-ivy.data_classes.FactorizedTensor.tucker_tensor"]], "Cp tensor": [[4, "module-ivy.data_classes.FactorizedTensor.cp_tensor"]], "Wrapping": [[27, "module-ivy.data_classes.array.wrapping"], [50, "module-ivy.data_classes.container.wrapping"]], "Array": [[52, "array"]], "Functions": [[58, "functions"]], "Data classes": [[57, "data-classes"]], "Ivy Folder": [[1, "ivy-folder"]], "Setting Up the API key": [[1, "setting-up-the-api-key"]], "Issues and Questions": [[1, "issues-and-questions"]], "gelu": [[59, "gelu"]], "Graph Compiler": [[0, "graph-compiler"]], "Compiler API": [[0, "compiler-api"]], "Using the compiler": [[0, "using-the-compiler"]], "Eager vs lazy Compilation": [[0, "eager-vs-lazy-compilation"]], "Array caching": [[0, "array-caching"]], "Generators": [[0, "generators"]], "Stateful": [[0, "stateful"]], "Sharp bits": [[0, "sharp-bits"], [2, "sharp-bits"]], "Transpiler": [[2, "transpiler"]], "Transpiler API": [[2, "transpiler-api"]], "Using the transpiler": [[2, "using-the-transpiler"]], "Transpiling functions": [[2, "transpiling-functions"]], "Transpiling Libraries": [[2, "transpiling-libraries"]], "Transpiling Modules": [[2, "transpiling-modules"]], "Ivy.unify": [[2, "ivy-unify"]], "Container": [[53, "container"]], "Nested array": [[54, "nested-array"]], "clip_vector_norm": [[444, "clip-vector-norm"]], "inplace_arrays_supported": [[462, "inplace-arrays-supported"]], "einops_reduce": [[449, "einops-reduce"]], "arg_info": [[438, "arg-info"]], "isscalar": [[473, "isscalar"]], "set_min_denominator": [[485, "set-min-denominator"]], "histogram": [[430, "histogram"]], "all_equal": [[437, "all-equal"]], "einops_rearrange": [[448, "einops-rearrange"]], "num_arrays_in_memory": [[477, "num-arrays-in-memory"]], "median": [[432, "median"]], "itemsize": [[474, "itemsize"]], "function_unsupported_devices_and_dtypes": [[454, "function-unsupported-devices-and-dtypes"]], "set_array_mode": [[481, "set-array-mode"]], "cummax": [[428, "cummax"]], "fourier_encode": [[452, "fourier-encode"]], "container_types": [[445, "container-types"]], "default": [[447, "default"]], "get_num_dims": [[459, "get-num-dims"]], "assert_supports_inplace": [[441, "assert-supports-inplace"]], "print_all_arrays_in_memory": [[478, "print-all-arrays-in-memory"]], "cache_fn": [[442, "cache-fn"]], "set_min_base": [[484, "set-min-base"]], "is_ivy_nested_array": [[470, "is-ivy-nested-array"]], "set_precise_mode": [[487, "set-precise-mode"]], "is_ivy_array": [[468, "is-ivy-array"]], "set_nestable_mode": [[486, "set-nestable-mode"]], "exists": [[451, "exists"]], "scatter_flat": [[479, "scatter-flat"]], "multiprocessing": [[476, "multiprocessing"]], "has_nans": [[461, "has-nans"]], "current_backend_str": [[446, "current-backend-str"]], "gather_nd": [[456, "gather-nd"]], "clip_matrix_norm": [[443, "clip-matrix-norm"]], "inplace_decrement": [[463, "inplace-decrement"]], "get_all_arrays_in_memory": [[457, "get-all-arrays-in-memory"]], "inplace_variables_supported": [[466, "inplace-variables-supported"]], "igamma": [[431, "igamma"]], "get_item": [[458, "get-item"]], "is_ivy_container": [[469, "is-ivy-container"]], "match_kwargs": [[475, "match-kwargs"]], "set_exception_trace_mode": [[482, "set-exception-trace-mode"]], "is_array": [[467, "is-array"]], "cummin": [[429, "cummin"]], "function_supported_devices_and_dtypes": [[453, "function-supported-devices-and-dtypes"]], "inplace_increment": [[464, "inplace-increment"]], "einops_repeat": [[450, "einops-repeat"]], "quantile": [[436, "quantile"]], "array_equal": [[440, "array-equal"]], "isin": [[472, "isin"]], "set_item": [[483, "set-item"]], "nanquantile": [[435, "nanquantile"]], "nanmean": [[433, "nanmean"]], "is_native_array": [[471, "is-native-array"]], "nanmedian": [[434, "nanmedian"]], "cov": [[427, "cov"]], "gather": [[455, "gather"]], "arg_names": [[439, "arg-names"]], "get_referrers_recursive": [[460, "get-referrers-recursive"]], "scatter_nd": [[480, "scatter-nd"]], "inplace_update": [[465, "inplace-update"]], "tucker": [[370, "tucker"]], "fill_diagonal": [[382, "fill-diagonal"]], "take_along_axis": [[401, "take-along-axis"]], "l2_normalize": [[411, "l2-normalize"]], "unfold": [[403, "unfold"]], "corrcoef": [[426, "corrcoef"]], "log_poisson_loss": [[371, "log-poisson-loss"]], "partial_unfold": [[396, "partial-unfold"]], "unique_consecutive": [[404, "unique-consecutive"]], "beta": [[414, "beta"]], "heaviside": [[387, "heaviside"]], "as_strided": [[372, "as-strided"]], "group_norm": [[408, "group-norm"]], "unravel_index": [[418, "unravel-index"]], "native_sparse_array": [[423, "native-sparse-array"]], "top_k": [[402, "top-k"]], "atleast_1d": [[374, "atleast-1d"]], "i0": [[390, "i0"]], "atleast_3d": [[376, "atleast-3d"]], "batch_norm": [[407, "batch-norm"]], "is_ivy_sparse_array": [[421, "is-ivy-sparse-array"]], "partial_vec_to_tensor": [[397, "partial-vec-to-tensor"]], "soft_thresholding": [[400, "soft-thresholding"]], "dirichlet": [[415, "dirichlet"]], "atleast_2d": [[375, "atleast-2d"]], "flatten": [[383, "flatten"]], "partial_tucker": [[367, "partial-tucker"]], "concat_from_sequence": [[378, "concat-from-sequence"]], "truncated_svd": [[369, "truncated-svd"]], "is_native_sparse_array": [[422, "is-native-sparse-array"]], "bincount": [[425, "bincount"]], "bernoulli": [[413, "bernoulli"]], "vsplit": [[405, "vsplit"]], "pad": [[393, "pad"]], "gamma": [[416, "gamma"]], "fliplr": [[384, "fliplr"]], "vstack": [[406, "vstack"]], "l1_normalize": [[410, "l1-normalize"]], "hsplit": [[388, "hsplit"]], "put_along_axis": [[398, "put-along-axis"]], "rot90": [[399, "rot90"]], "instance_norm": [[409, "instance-norm"]], "lexsort": [[420, "lexsort"]], "flipud": [[385, "flipud"]], "broadcast_shapes": [[377, "broadcast-shapes"]], "svd_flip": [[368, "svd-flip"]], "fold": [[386, "fold"]], "partial_fold": [[394, "partial-fold"]], "matricize": [[391, "matricize"]], "native_sparse_array_to_indices_values_and_shape": [[424, "native-sparse-array-to-indices-values-and-shape"]], "multi_mode_dot": [[366, "multi-mode-dot"]], "lp_normalize": [[412, "lp-normalize"]], "associative_scan": [[373, "associative-scan"]], "partial_tensor_to_vec": [[395, "partial-tensor-to-vec"]], "dsplit": [[379, "dsplit"]], "poisson": [[417, "poisson"]], "dstack": [[380, "dstack"]], "hstack": [[389, "hstack"]], "invert_permutation": [[419, "invert-permutation"]], "moveaxis": [[392, "moveaxis"]], "expand": [[381, "expand"]], "max_pool3d": [[345, "max-pool3d"]], "eigh_tridiagonal": [[356, "eigh-tridiagonal"]], "max_pool1d": [[343, "max-pool1d"]], "make_svd_non_negative": [[362, "make-svd-non-negative"]], "adjoint": [[351, "adjoint"]], "max_pool2d": [[344, "max-pool2d"]], "get_interpolate_kernel": [[337, "get-interpolate-kernel"]], "dropout2d": [[331, "dropout2d"]], "fft2": [[335, "fft2"]], "nearest_interpolate": [[347, "nearest-interpolate"]], "initialize_tucker": [[358, "initialize-tucker"]], "avg_pool2d": [[326, "avg-pool2d"]], "dropout1d": [[330, "dropout1d"]], "adaptive_avg_pool2d": [[322, "adaptive-avg-pool2d"]], "generate_einsum_equation": [[336, "generate-einsum-equation"]], "diagflat": [[353, "diagflat"]], "kronecker": [[361, "kronecker"]], "avg_pool1d": [[325, "avg-pool1d"]], "dct": [[328, "dct"]], "cond": [[352, "cond"]], "dot": [[354, "dot"]], "matrix_exp": [[363, "matrix-exp"]], "multi_dot": [[365, "multi-dot"]], "area_interpolate": [[324, "area-interpolate"]], "eigvals": [[357, "eigvals"]], "Sparse array": [[318, "sparse-array"]], "fft": [[334, "fft"]], "avg_pool3d": [[327, "avg-pool3d"]], "interpolate": [[342, "interpolate"]], "reduce_window": [[349, "reduce-window"]], "ifft": [[339, "ifft"]], "max_unpool1d": [[346, "max-unpool1d"]], "rfftn": [[350, "rfftn"]], "interp": [[341, "interp"]], "dropout3d": [[332, "dropout3d"]], "embedding": [[333, "embedding"]], "idct": [[338, "idct"]], "ifftn": [[340, "ifftn"]], "adaptive_max_pool2d": [[323, "adaptive-max-pool2d"]], "khatri_rao": [[359, "khatri-rao"]], "pool": [[348, "pool"]], "kron": [[360, "kron"]], "adaptive_avg_pool1d": [[321, "adaptive-avg-pool1d"]], "dft": [[329, "dft"]], "mode_dot": [[364, "mode-dot"]], "tanh": [[244, "tanh"]], "eye_like": [[258, "eye-like"]], "modf": [[290, "modf"]], "gradient": [[284, "gradient"]], "unsorted_segment_sum": [[271, "unsorted-segment-sum"]], "hypot": [[285, "hypot"]], "count_nonzero": [[277, "count-nonzero"]], "trilu": [[269, "trilu"]], "conj": [[275, "conj"]], "copysign": [[276, "copysign"]], "tril_indices": [[268, "tril-indices"]], "fmax": [[282, "fmax"]], "silu": [[255, "silu"]], "logit": [[249, "logit"]], "kaiser_window": [[263, "kaiser-window"]], "nansum": [[291, "nansum"]], "vorbis_window": [[272, "vorbis-window"]], "sinc": [[294, "sinc"]], "trunc": [[246, "trunc"]], "ndindex": [[265, "ndindex"]], "trunc_divide": [[247, "trunc-divide"]], "hann_window": [[260, "hann-window"]], "hamming_window": [[259, "hamming-window"]], "ndenumerate": [[264, "ndenumerate"]], "unsorted_segment_min": [[270, "unsorted-segment-min"]], "indices": [[261, "indices"]], "isclose": [[286, "isclose"]], "elu": [[248, "elu"]], "allclose": [[273, "allclose"]], "blackman_window": [[257, "blackman-window"]], "zeta": [[296, "zeta"]], "logsigmoid": [[250, "logsigmoid"]], "fix": [[280, "fix"]], "frexp": [[283, "frexp"]], "random_cp": [[266, "random-cp"]], "float_power": [[281, "float-power"]], "xlogy": [[295, "xlogy"]], "relu6": [[252, "relu6"]], "digamma": [[279, "digamma"]], "prelu": [[251, "prelu"]], "signbit": [[293, "signbit"]], "kaiser_bessel_derived_window": [[262, "kaiser-bessel-derived-window"]], "lerp": [[288, "lerp"]], "lgamma": [[289, "lgamma"]], "trapz": [[245, "trapz"]], "ldexp": [[287, "ldexp"]], "bind_custom_gradient_function": [[298, "bind-custom-gradient-function"]], "binarizer": [[274, "binarizer"]], "thresholded_relu": [[256, "thresholded-relu"]], "reduce": [[297, "reduce"]], "random_tucker": [[267, "random-tucker"]], "selu": [[253, "selu"]], "nextafter": [[292, "nextafter"]], "sequence_length": [[254, "sequence-length"]], "diff": [[278, "diff"]], "dev": [[150, "dev"]], "default_device": [[149, "default-device"]], "atanh": [[182, "atanh"]], "unset_default_float_dtype": [[142, "unset-default-float-dtype"]], "asin": [[178, "asin"]], "unset_default_device": [[170, "unset-default-device"]], "atan": [[180, "atan"]], "promote_types": [[131, "promote-types"]], "angle": [[177, "angle"]], "is_int_dtype": [[128, "is-int-dtype"]], "acos": [[174, "acos"]], "percent_used_mem_on_dev": [[160, "percent-used-mem-on-dev"]], "total_mem_on_dev": [[168, "total-mem-on-dev"]], "abs": [[173, "abs"]], "set_default_dtype": [[135, "set-default-dtype"]], "as_native_dev": [[147, "as-native-dev"]], "is_hashable_dtype": [[127, "is-hashable-dtype"]], "is_native_dtype": [[129, "is-native-dtype"]], "set_default_complex_dtype": [[134, "set-default-complex-dtype"]], "gpu_is_available": [[155, "gpu-is-available"]], "print_all_ivy_arrays_on_dev": [[161, "print-all-ivy-arrays-on-dev"]], "asinh": [[179, "asinh"]], "is_bool_dtype": [[124, "is-bool-dtype"]], "result_type": [[133, "result-type"]], "is_uint_dtype": [[130, "is-uint-dtype"]], "type_promote_arrays": [[139, "type-promote-arrays"]], "as_ivy_dev": [[146, "as-ivy-dev"]], "dev_util": [[151, "dev-util"]], "num_cpu_cores": [[157, "num-cpu-cores"]], "infer_default_dtype": [[122, "infer-default-dtype"]], "split_func_call": [[166, "split-func-call"]], "set_default_uint_dtype": [[138, "set-default-uint-dtype"]], "is_float_dtype": [[126, "is-float-dtype"]], "split_factor": [[165, "split-factor"]], "num_ivy_arrays_on_dev": [[159, "num-ivy-arrays-on-dev"]], "promote_types_of_inputs": [[132, "promote-types-of-inputs"]], "get_all_ivy_arrays_on_dev": [[154, "get-all-ivy-arrays-on-dev"]], "add": [[176, "add"]], "set_soft_device_mode": [[163, "set-soft-device-mode"]], "set_split_factor": [[164, "set-split-factor"]], "acosh": [[175, "acosh"]], "clear_cached_mem_on_dev": [[148, "clear-cached-mem-on-dev"]], "used_mem_on_dev": [[172, "used-mem-on-dev"]], "atan2": [[181, "atan2"]], "tpu_is_available": [[169, "tpu-is-available"]], "function_supported_devices": [[152, "function-supported-devices"]], "handle_soft_device_variable": [[156, "handle-soft-device-variable"]], "function_unsupported_devices": [[153, "function-unsupported-devices"]], "set_default_float_dtype": [[136, "set-default-float-dtype"]], "unset_default_int_dtype": [[143, "unset-default-int-dtype"]], "unset_default_uint_dtype": [[144, "unset-default-uint-dtype"]], "num_gpus": [[158, "num-gpus"]], "is_complex_dtype": [[125, "is-complex-dtype"]], "valid_dtype": [[145, "valid-dtype"]], "set_default_device": [[162, "set-default-device"]], "unset_default_dtype": [[141, "unset-default-dtype"]], "to_device": [[167, "to-device"]], "unset_default_complex_dtype": [[140, "unset-default-complex-dtype"]], "set_default_int_dtype": [[137, "set-default-int-dtype"]], "unset_soft_device_mode": [[171, "unset-soft-device-mode"]], "invalid_dtype": [[123, "invalid-dtype"]], "imag": [[206, "imag"]], "erf": [[195, "erf"]], "less": [[212, "less"]], "isreal": [[210, "isreal"]], "bitwise_xor": [[188, "bitwise-xor"]], "logaddexp": [[218, "logaddexp"]], "bitwise_invert": [[184, "bitwise-invert"]], "sin": [[238, "sin"]], "multiply": [[226, "multiply"]], "bitwise_right_shift": [[187, "bitwise-right-shift"]], "isnan": [[209, "isnan"]], "floor": [[199, "floor"]], "exp": [[196, "exp"]], "log2": [[217, "log2"]], "ceil": [[189, "ceil"]], "pow": [[231, "pow"]], "fmin": [[201, "fmin"]], "round": [[236, "round"]], "bitwise_and": [[183, "bitwise-and"]], "isfinite": [[207, "isfinite"]], "log": [[214, "log"]], "equal": [[194, "equal"]], "divide": [[193, "divide"]], "minimum": [[225, "minimum"]], "real": [[233, "real"]], "greater": [[204, "greater"]], "less_equal": [[213, "less-equal"]], "sign": [[237, "sign"]], "logical_xor": [[223, "logical-xor"]], "log10": [[215, "log10"]], "positive": [[230, "positive"]], "remainder": [[235, "remainder"]], "floor_divide": [[200, "floor-divide"]], "logical_not": [[221, "logical-not"]], "greater_equal": [[205, "greater-equal"]], "cosh": [[191, "cosh"]], "deg2rad": [[192, "deg2rad"]], "gcd": [[203, "gcd"]], "cos": [[190, "cos"]], "subtract": [[242, "subtract"]], "logical_and": [[220, "logical-and"]], "exp2": [[197, "exp2"]], "negative": [[228, "negative"]], "bitwise_or": [[186, "bitwise-or"]], "log1p": [[216, "log1p"]], "lcm": [[211, "lcm"]], "square": [[241, "square"]], "reciprocal": [[234, "reciprocal"]], "expm1": [[198, "expm1"]], "bitwise_left_shift": [[185, "bitwise-left-shift"]], "fmod": [[202, "fmod"]], "nan_to_num": [[227, "nan-to-num"]], "sqrt": [[240, "sqrt"]], "rad2deg": [[232, "rad2deg"]], "tan": [[243, "tan"]], "maximum": [[224, "maximum"]], "logical_or": [[222, "logical-or"]], "isinf": [[208, "isinf"]], "logaddexp2": [[219, "logaddexp2"]], "not_equal": [[229, "not-equal"]], "sinh": [[239, "sinh"]]}, "indexentries": {"built-in function": [[0, "ivy.compile"], [2, "ivy.transpile"], [2, "ivy.unify"]], "ivy.compile()": [[0, "ivy.compile"]], "ivy.transpile()": [[2, "ivy.transpile"]], "ivy.unify()": [[2, "ivy.unify"]], "factorizedtensor (class in ivy.data_classes.factorizedtensor.base)": [[3, "ivy.data_classes.FactorizedTensor.base.FactorizedTensor"]], "__init__() (ivy.data_classes.factorizedtensor.base.factorizedtensor method)": [[3, "ivy.data_classes.FactorizedTensor.base.FactorizedTensor.__init__"]], "_abc_impl (ivy.data_classes.factorizedtensor.base.factorizedtensor attribute)": [[3, "ivy.data_classes.FactorizedTensor.base.FactorizedTensor._abc_impl"]], "ivy.data_classes.factorizedtensor.base": [[3, "module-ivy.data_classes.FactorizedTensor.base"]], "mode_dot() (ivy.data_classes.factorizedtensor.base.factorizedtensor method)": [[3, "ivy.data_classes.FactorizedTensor.base.FactorizedTensor.mode_dot"]], "module": [[3, "module-ivy.data_classes.FactorizedTensor.base"], [4, "module-ivy.data_classes.FactorizedTensor.cp_tensor"], [5, "module-ivy.data_classes.FactorizedTensor.tucker_tensor"], [6, "module-ivy.data_classes.array.activations"], [7, "module-ivy.data_classes.array.conversions"], [8, "module-ivy.data_classes.array.creation"], [9, "module-ivy.data_classes.array.data_type"], [10, "module-ivy.data_classes.array.device"], [11, "module-ivy.data_classes.array.elementwise"], [12, "module-ivy.data_classes.array.experimental"], [12, "module-ivy.data_classes.array.experimental.activations"], [12, "module-ivy.data_classes.array.experimental.conversions"], [12, "module-ivy.data_classes.array.experimental.creation"], [12, "module-ivy.data_classes.array.experimental.data_type"], [12, "module-ivy.data_classes.array.experimental.device"], [12, "module-ivy.data_classes.array.experimental.elementwise"], [12, "module-ivy.data_classes.array.experimental.general"], [12, "module-ivy.data_classes.array.experimental.gradients"], [12, "module-ivy.data_classes.array.experimental.image"], [12, "module-ivy.data_classes.array.experimental.layers"], [12, "module-ivy.data_classes.array.experimental.linear_algebra"], [12, "module-ivy.data_classes.array.experimental.losses"], [12, "module-ivy.data_classes.array.experimental.manipulation"], [12, "module-ivy.data_classes.array.experimental.norms"], [12, "module-ivy.data_classes.array.experimental.random"], [12, "module-ivy.data_classes.array.experimental.searching"], [12, "module-ivy.data_classes.array.experimental.set"], [12, "module-ivy.data_classes.array.experimental.sorting"], [12, "module-ivy.data_classes.array.experimental.statistical"], [12, "module-ivy.data_classes.array.experimental.utility"], [13, "module-ivy.data_classes.array.general"], [14, "module-ivy.data_classes.array.gradients"], [15, "module-ivy.data_classes.array.image"], [16, "module-ivy.data_classes.array.layers"], [17, "module-ivy.data_classes.array.linear_algebra"], [18, "module-ivy.data_classes.array.losses"], [19, "module-ivy.data_classes.array.manipulation"], [20, "module-ivy.data_classes.array.norms"], [21, "module-ivy.data_classes.array.random"], [22, "module-ivy.data_classes.array.searching"], [23, "module-ivy.data_classes.array.set"], [24, "module-ivy.data_classes.array.sorting"], [25, "module-ivy.data_classes.array.statistical"], [26, "module-ivy.data_classes.array.utility"], [27, "module-ivy.data_classes.array.wrapping"], [28, "module-ivy.data_classes.container.activations"], [29, "module-ivy.data_classes.container.base"], [30, "module-ivy.data_classes.container.conversions"], [31, "module-ivy.data_classes.container.creation"], [32, "module-ivy.data_classes.container.data_type"], [33, "module-ivy.data_classes.container.device"], [34, "module-ivy.data_classes.container.elementwise"], [35, "module-ivy.data_classes.container.experimental"], [35, "module-ivy.data_classes.container.experimental.activations"], [35, "module-ivy.data_classes.container.experimental.conversions"], [35, "module-ivy.data_classes.container.experimental.creation"], [35, "module-ivy.data_classes.container.experimental.data_type"], [35, "module-ivy.data_classes.container.experimental.device"], [35, "module-ivy.data_classes.container.experimental.elementwise"], [35, "module-ivy.data_classes.container.experimental.general"], [35, "module-ivy.data_classes.container.experimental.gradients"], [35, "module-ivy.data_classes.container.experimental.image"], [35, "module-ivy.data_classes.container.experimental.layers"], [35, "module-ivy.data_classes.container.experimental.linear_algebra"], [35, "module-ivy.data_classes.container.experimental.losses"], [35, "module-ivy.data_classes.container.experimental.manipulation"], [35, "module-ivy.data_classes.container.experimental.norms"], [35, "module-ivy.data_classes.container.experimental.random"], [35, "module-ivy.data_classes.container.experimental.searching"], [35, "module-ivy.data_classes.container.experimental.set"], [35, "module-ivy.data_classes.container.experimental.sorting"], [35, "module-ivy.data_classes.container.experimental.statistical"], [35, "module-ivy.data_classes.container.experimental.utility"], [36, "module-ivy.data_classes.container.general"], [37, "module-ivy.data_classes.container.gradients"], [38, "module-ivy.data_classes.container.image"], [39, "module-ivy.data_classes.container.layers"], [40, "module-ivy.data_classes.container.linear_algebra"], [41, "module-ivy.data_classes.container.losses"], [42, "module-ivy.data_classes.container.manipulation"], [43, "module-ivy.data_classes.container.norms"], [44, "module-ivy.data_classes.container.random"], [45, "module-ivy.data_classes.container.searching"], [46, "module-ivy.data_classes.container.set"], [47, "module-ivy.data_classes.container.sorting"], [48, "module-ivy.data_classes.container.statistical"], [49, "module-ivy.data_classes.container.utility"], [50, "module-ivy.data_classes.container.wrapping"], [52, "module-ivy.data_classes.array.array"], [53, "module-ivy.data_classes.container.container"], [54, "module-ivy.data_classes.nested_array.nested_array"], [55, "module-ivy.data_classes.nested_array.base"], [56, "module-ivy.data_classes.nested_array.elementwise"], [299, "module-ivy.functional.ivy.experimental.activations"], [300, "module-ivy.functional.ivy.experimental.constants"], [301, "module-ivy.functional.ivy.experimental.creation"], [302, "module-ivy.functional.ivy.experimental.data_type"], [303, "module-ivy.functional.ivy.experimental.device"], [304, "module-ivy.functional.ivy.experimental.elementwise"], [305, "module-ivy.functional.ivy.experimental.general"], [306, "module-ivy.functional.ivy.experimental.gradients"], [307, "module-ivy.functional.ivy.experimental.layers"], [308, "module-ivy.functional.ivy.experimental.linear_algebra"], [309, "module-ivy.functional.ivy.experimental.losses"], [310, "module-ivy.functional.ivy.experimental.manipulation"], [311, "module-ivy.functional.ivy.experimental.meta"], [312, "module-ivy.functional.ivy.experimental.nest"], [313, "module-ivy.functional.ivy.experimental.norms"], [314, "module-ivy.functional.ivy.experimental.random"], [315, "module-ivy.functional.ivy.experimental.searching"], [316, "module-ivy.functional.ivy.experimental.set"], [317, "module-ivy.functional.ivy.experimental.sorting"], [318, "module-ivy.functional.ivy.experimental.sparse_array"], [319, "module-ivy.functional.ivy.experimental.statistical"], [320, "module-ivy.functional.ivy.experimental.utility"], [526, "module-ivy.functional.ivy.activations"], [527, "module-ivy.functional.ivy.constants"], [528, "module-ivy.functional.ivy.control_flow_ops"], [529, "module-ivy.functional.ivy.creation"], [530, "module-ivy.functional.ivy.data_type"], [531, "module-ivy.functional.ivy.device"], [532, "module-ivy.functional.ivy.elementwise"], [533, "module-ivy.functional.ivy.experimental"], [534, "module-ivy.functional.ivy.general"], [535, "module-ivy.functional.ivy.gradients"], [536, "module-ivy.functional.ivy.layers"], [537, "module-ivy.functional.ivy.linear_algebra"], [538, "module-ivy.functional.ivy.losses"], [539, "module-ivy.functional.ivy.manipulation"], [540, "module-ivy.functional.ivy.meta"], [541, "module-ivy.functional.ivy.nest"], [542, "module-ivy.functional.ivy.norms"], [543, "module-ivy.functional.ivy.random"], [544, "module-ivy.functional.ivy.searching"], [545, "module-ivy.functional.ivy.set"], [546, "module-ivy.functional.ivy.sorting"], [547, "module-ivy.functional.ivy.statistical"], [548, "module-ivy.functional.ivy.utility"], [668, "module-ivy_tests.test_ivy.helpers.assertions"], [669, "module-ivy_tests.test_ivy.helpers.available_frameworks"], [670, "module-ivy_tests.test_ivy.helpers.function_testing"], [671, "module-ivy_tests.test_ivy.helpers.globals"], [672, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"], [673, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"], [674, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"], [675, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"], [676, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"], [677, "module-ivy_tests.test_ivy.helpers.pipeline_helper"], [678, "module-ivy_tests.test_ivy.helpers.structs"], [679, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"], [680, "module-ivy_tests.test_ivy.helpers.testing_helpers"], [684, "module-ivy.stateful.activations"], [685, "module-ivy.stateful.converters"], [686, "module-ivy.stateful.helpers"], [687, "module-ivy.stateful.initializers"], [688, "module-ivy.stateful.layers"], [689, "module-ivy.stateful.losses"], [690, "module-ivy.stateful.module"], [691, "module-ivy.stateful.norms"], [692, "module-ivy.stateful.optimizers"], [693, "module-ivy.stateful.sequential"], [694, "module-ivy.utils.assertions"], [695, "module-ivy.utils.backend"], [696, "module-ivy.utils.backend.ast_helpers"], [697, "module-ivy.utils.backend.handler"], [698, "module-ivy.utils.backend.sub_backend_handler"], [699, "module-ivy.utils.dynamic_import"], [700, "module-ivy.utils.einsum_parser"], [701, "module-ivy.utils.exceptions"], [702, "module-ivy.utils.inspection"], [703, "module-ivy.utils.logging"], [704, "module-ivy.utils.profiler"], [705, "module-ivy.utils.verbosity"]], "norm() (ivy.data_classes.factorizedtensor.base.factorizedtensor method)": [[3, "ivy.data_classes.FactorizedTensor.base.FactorizedTensor.norm"]], "to_tensor() (ivy.data_classes.factorizedtensor.base.factorizedtensor method)": [[3, "ivy.data_classes.FactorizedTensor.base.FactorizedTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorizedtensor.base.factorizedtensor method)": [[3, "ivy.data_classes.FactorizedTensor.base.FactorizedTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorizedtensor.base.factorizedtensor method)": [[3, "ivy.data_classes.FactorizedTensor.base.FactorizedTensor.to_vec"]], "cptensor (class in ivy.data_classes.factorizedtensor.cp_tensor)": [[4, "ivy.data_classes.FactorizedTensor.cp_tensor.CPTensor"]], "__init__() (ivy.data_classes.factorizedtensor.cp_tensor.cptensor method)": [[4, "ivy.data_classes.FactorizedTensor.cp_tensor.CPTensor.__init__"]], "_abc_impl (ivy.data_classes.factorizedtensor.cp_tensor.cptensor attribute)": [[4, "ivy.data_classes.FactorizedTensor.cp_tensor.CPTensor._abc_impl"]], "cp_copy() (ivy.data_classes.factorizedtensor.cp_tensor.cptensor method)": [[4, "ivy.data_classes.FactorizedTensor.cp_tensor.CPTensor.cp_copy"]], "cp_flip_sign() (ivy.data_classes.factorizedtensor.cp_tensor.cptensor static method)": [[4, "ivy.data_classes.FactorizedTensor.cp_tensor.CPTensor.cp_flip_sign"]], "cp_lstsq_grad() (ivy.data_classes.factorizedtensor.cp_tensor.cptensor static method)": [[4, "ivy.data_classes.FactorizedTensor.cp_tensor.CPTensor.cp_lstsq_grad"]], "cp_mode_dot() (ivy.data_classes.factorizedtensor.cp_tensor.cptensor static method)": [[4, "ivy.data_classes.FactorizedTensor.cp_tensor.CPTensor.cp_mode_dot"]], "cp_n_param() (ivy.data_classes.factorizedtensor.cp_tensor.cptensor static method)": [[4, "ivy.data_classes.FactorizedTensor.cp_tensor.CPTensor.cp_n_param"]], "cp_norm() (ivy.data_classes.factorizedtensor.cp_tensor.cptensor static method)": [[4, "ivy.data_classes.FactorizedTensor.cp_tensor.CPTensor.cp_norm"]], "cp_normalize() (ivy.data_classes.factorizedtensor.cp_tensor.cptensor static method)": [[4, "ivy.data_classes.FactorizedTensor.cp_tensor.CPTensor.cp_normalize"]], "cp_to_tensor() (ivy.data_classes.factorizedtensor.cp_tensor.cptensor static method)": [[4, "ivy.data_classes.FactorizedTensor.cp_tensor.CPTensor.cp_to_tensor"]], "cp_to_unfolded() (ivy.data_classes.factorizedtensor.cp_tensor.cptensor static method)": [[4, "ivy.data_classes.FactorizedTensor.cp_tensor.CPTensor.cp_to_unfolded"]], "cp_to_vec() (ivy.data_classes.factorizedtensor.cp_tensor.cptensor static method)": [[4, "ivy.data_classes.FactorizedTensor.cp_tensor.CPTensor.cp_to_vec"]], "ivy.data_classes.factorizedtensor.cp_tensor": [[4, "module-ivy.data_classes.FactorizedTensor.cp_tensor"]], "mode_dot() (ivy.data_classes.factorizedtensor.cp_tensor.cptensor method)": [[4, "ivy.data_classes.FactorizedTensor.cp_tensor.CPTensor.mode_dot"]], "n_param (ivy.data_classes.factorizedtensor.cp_tensor.cptensor property)": [[4, "ivy.data_classes.FactorizedTensor.cp_tensor.CPTensor.n_param"]], "norm() (ivy.data_classes.factorizedtensor.cp_tensor.cptensor method)": [[4, "ivy.data_classes.FactorizedTensor.cp_tensor.CPTensor.norm"]], "normalize() (ivy.data_classes.factorizedtensor.cp_tensor.cptensor method)": [[4, "ivy.data_classes.FactorizedTensor.cp_tensor.CPTensor.normalize"]], "to_tensor() (ivy.data_classes.factorizedtensor.cp_tensor.cptensor method)": [[4, "ivy.data_classes.FactorizedTensor.cp_tensor.CPTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorizedtensor.cp_tensor.cptensor method)": [[4, "ivy.data_classes.FactorizedTensor.cp_tensor.CPTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorizedtensor.cp_tensor.cptensor method)": [[4, "ivy.data_classes.FactorizedTensor.cp_tensor.CPTensor.to_vec"]], "unfolding_dot_khatri_rao() (ivy.data_classes.factorizedtensor.cp_tensor.cptensor static method)": [[4, "ivy.data_classes.FactorizedTensor.cp_tensor.CPTensor.unfolding_dot_khatri_rao"]], "validate_cp_rank() (ivy.data_classes.factorizedtensor.cp_tensor.cptensor static method)": [[4, "ivy.data_classes.FactorizedTensor.cp_tensor.CPTensor.validate_cp_rank"]], "validate_cp_tensor() (ivy.data_classes.factorizedtensor.cp_tensor.cptensor static method)": [[4, "ivy.data_classes.FactorizedTensor.cp_tensor.CPTensor.validate_cp_tensor"]], "tuckertensor (class in ivy.data_classes.factorizedtensor.tucker_tensor)": [[5, "ivy.data_classes.FactorizedTensor.tucker_tensor.TuckerTensor"]], "__init__() (ivy.data_classes.factorizedtensor.tucker_tensor.tuckertensor method)": [[5, "ivy.data_classes.FactorizedTensor.tucker_tensor.TuckerTensor.__init__"]], "_abc_impl (ivy.data_classes.factorizedtensor.tucker_tensor.tuckertensor attribute)": [[5, "ivy.data_classes.FactorizedTensor.tucker_tensor.TuckerTensor._abc_impl"]], "ivy.data_classes.factorizedtensor.tucker_tensor": [[5, "module-ivy.data_classes.FactorizedTensor.tucker_tensor"]], "mode_dot() (ivy.data_classes.factorizedtensor.tucker_tensor.tuckertensor method)": [[5, "ivy.data_classes.FactorizedTensor.tucker_tensor.TuckerTensor.mode_dot"]], "n_param (ivy.data_classes.factorizedtensor.tucker_tensor.tuckertensor property)": [[5, "ivy.data_classes.FactorizedTensor.tucker_tensor.TuckerTensor.n_param"]], "to_tensor() (ivy.data_classes.factorizedtensor.tucker_tensor.tuckertensor method)": [[5, "ivy.data_classes.FactorizedTensor.tucker_tensor.TuckerTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorizedtensor.tucker_tensor.tuckertensor method)": [[5, "ivy.data_classes.FactorizedTensor.tucker_tensor.TuckerTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorizedtensor.tucker_tensor.tuckertensor method)": [[5, "ivy.data_classes.FactorizedTensor.tucker_tensor.TuckerTensor.to_vec"]], "tucker_copy() (ivy.data_classes.factorizedtensor.tucker_tensor.tuckertensor method)": [[5, "ivy.data_classes.FactorizedTensor.tucker_tensor.TuckerTensor.tucker_copy"]], "tucker_mode_dot() (ivy.data_classes.factorizedtensor.tucker_tensor.tuckertensor static method)": [[5, "ivy.data_classes.FactorizedTensor.tucker_tensor.TuckerTensor.tucker_mode_dot"]], "tucker_n_param() (ivy.data_classes.factorizedtensor.tucker_tensor.tuckertensor static method)": [[5, "ivy.data_classes.FactorizedTensor.tucker_tensor.TuckerTensor.tucker_n_param"]], "tucker_normalize() (ivy.data_classes.factorizedtensor.tucker_tensor.tuckertensor static method)": [[5, "ivy.data_classes.FactorizedTensor.tucker_tensor.TuckerTensor.tucker_normalize"]], "tucker_to_tensor() (ivy.data_classes.factorizedtensor.tucker_tensor.tuckertensor static method)": [[5, "ivy.data_classes.FactorizedTensor.tucker_tensor.TuckerTensor.tucker_to_tensor"]], "tucker_to_unfolded() (ivy.data_classes.factorizedtensor.tucker_tensor.tuckertensor static method)": [[5, "ivy.data_classes.FactorizedTensor.tucker_tensor.TuckerTensor.tucker_to_unfolded"]], "tucker_to_vec() (ivy.data_classes.factorizedtensor.tucker_tensor.tuckertensor static method)": [[5, "ivy.data_classes.FactorizedTensor.tucker_tensor.TuckerTensor.tucker_to_vec"]], "validate_tucker_rank() (ivy.data_classes.factorizedtensor.tucker_tensor.tuckertensor static method)": [[5, "ivy.data_classes.FactorizedTensor.tucker_tensor.TuckerTensor.validate_tucker_rank"]], "validate_tucker_tensor() (ivy.data_classes.factorizedtensor.tucker_tensor.tuckertensor static method)": [[5, "ivy.data_classes.FactorizedTensor.tucker_tensor.TuckerTensor.validate_tucker_tensor"]], "_arraywithactivations (class in ivy.data_classes.array.activations)": [[6, "ivy.data_classes.array.activations._ArrayWithActivations"]], "_abc_impl (ivy.data_classes.array.activations._arraywithactivations attribute)": [[6, "ivy.data_classes.array.activations._ArrayWithActivations._abc_impl"]], "gelu() (ivy.data_classes.array.activations._arraywithactivations method)": [[6, "ivy.data_classes.array.activations._ArrayWithActivations.gelu"]], "hardswish() (ivy.data_classes.array.activations._arraywithactivations method)": [[6, "ivy.data_classes.array.activations._ArrayWithActivations.hardswish"]], "ivy.data_classes.array.activations": [[6, "module-ivy.data_classes.array.activations"]], "leaky_relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[6, "ivy.data_classes.array.activations._ArrayWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[6, "ivy.data_classes.array.activations._ArrayWithActivations.log_softmax"]], "mish() (ivy.data_classes.array.activations._arraywithactivations method)": [[6, "ivy.data_classes.array.activations._ArrayWithActivations.mish"]], "relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[6, "ivy.data_classes.array.activations._ArrayWithActivations.relu"]], "sigmoid() (ivy.data_classes.array.activations._arraywithactivations method)": [[6, "ivy.data_classes.array.activations._ArrayWithActivations.sigmoid"]], "softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[6, "ivy.data_classes.array.activations._ArrayWithActivations.softmax"]], "softplus() (ivy.data_classes.array.activations._arraywithactivations method)": [[6, "ivy.data_classes.array.activations._ArrayWithActivations.softplus"]], "_to_ivy() (in module ivy.data_classes.array.conversions)": [[7, "ivy.data_classes.array.conversions._to_ivy"]], "_to_native() (in module ivy.data_classes.array.conversions)": [[7, "ivy.data_classes.array.conversions._to_native"]], "args_to_ivy() (in module ivy.data_classes.array.conversions)": [[7, "ivy.data_classes.array.conversions.args_to_ivy"]], "args_to_native() (in module ivy.data_classes.array.conversions)": [[7, "ivy.data_classes.array.conversions.args_to_native"]], "ivy.data_classes.array.conversions": [[7, "module-ivy.data_classes.array.conversions"]], "to_ivy() (in module ivy.data_classes.array.conversions)": [[7, "ivy.data_classes.array.conversions.to_ivy"]], "to_native() (in module ivy.data_classes.array.conversions)": [[7, "ivy.data_classes.array.conversions.to_native"]], "_arraywithcreation (class in ivy.data_classes.array.creation)": [[8, "ivy.data_classes.array.creation._ArrayWithCreation"]], "_abc_impl (ivy.data_classes.array.creation._arraywithcreation attribute)": [[8, "ivy.data_classes.array.creation._ArrayWithCreation._abc_impl"]], "asarray() (ivy.data_classes.array.creation._arraywithcreation method)": [[8, "ivy.data_classes.array.creation._ArrayWithCreation.asarray"]], "copy_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[8, "ivy.data_classes.array.creation._ArrayWithCreation.copy_array"]], "empty_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[8, "ivy.data_classes.array.creation._ArrayWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.array.creation._arraywithcreation method)": [[8, "ivy.data_classes.array.creation._ArrayWithCreation.from_dlpack"]], "full_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[8, "ivy.data_classes.array.creation._ArrayWithCreation.full_like"]], "ivy.data_classes.array.creation": [[8, "module-ivy.data_classes.array.creation"]], "linspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[8, "ivy.data_classes.array.creation._ArrayWithCreation.linspace"]], "logspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[8, "ivy.data_classes.array.creation._ArrayWithCreation.logspace"]], "meshgrid() (ivy.data_classes.array.creation._arraywithcreation method)": [[8, "ivy.data_classes.array.creation._ArrayWithCreation.meshgrid"]], "native_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[8, "ivy.data_classes.array.creation._ArrayWithCreation.native_array"]], "one_hot() (ivy.data_classes.array.creation._arraywithcreation method)": [[8, "ivy.data_classes.array.creation._ArrayWithCreation.one_hot"]], "ones_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[8, "ivy.data_classes.array.creation._ArrayWithCreation.ones_like"]], "tril() (ivy.data_classes.array.creation._arraywithcreation method)": [[8, "ivy.data_classes.array.creation._ArrayWithCreation.tril"]], "triu() (ivy.data_classes.array.creation._arraywithcreation method)": [[8, "ivy.data_classes.array.creation._ArrayWithCreation.triu"]], "zeros_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[8, "ivy.data_classes.array.creation._ArrayWithCreation.zeros_like"]], "_arraywithdatatypes (class in ivy.data_classes.array.data_type)": [[9, "ivy.data_classes.array.data_type._ArrayWithDataTypes"]], "_abc_impl (ivy.data_classes.array.data_type._arraywithdatatypes attribute)": [[9, "ivy.data_classes.array.data_type._ArrayWithDataTypes._abc_impl"]], "astype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[9, "ivy.data_classes.array.data_type._ArrayWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[9, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[9, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[9, "ivy.data_classes.array.data_type._ArrayWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[9, "ivy.data_classes.array.data_type._ArrayWithDataTypes.dtype"]], "finfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[9, "ivy.data_classes.array.data_type._ArrayWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[9, "ivy.data_classes.array.data_type._ArrayWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[9, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_bool_dtype"]], "is_float_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[9, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[9, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[9, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_uint_dtype"]], "ivy.data_classes.array.data_type": [[9, "module-ivy.data_classes.array.data_type"]], "result_type() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[9, "ivy.data_classes.array.data_type._ArrayWithDataTypes.result_type"]], "_arraywithdevice (class in ivy.data_classes.array.device)": [[10, "ivy.data_classes.array.device._ArrayWithDevice"]], "_abc_impl (ivy.data_classes.array.device._arraywithdevice attribute)": [[10, "ivy.data_classes.array.device._ArrayWithDevice._abc_impl"]], "dev() (ivy.data_classes.array.device._arraywithdevice method)": [[10, "ivy.data_classes.array.device._ArrayWithDevice.dev"]], "ivy.data_classes.array.device": [[10, "module-ivy.data_classes.array.device"]], "to_device() (ivy.data_classes.array.device._arraywithdevice method)": [[10, "ivy.data_classes.array.device._ArrayWithDevice.to_device"]], "_arraywithelementwise (class in ivy.data_classes.array.elementwise)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise"]], "_abc_impl (ivy.data_classes.array.elementwise._arraywithelementwise attribute)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise._abc_impl"]], "abs() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.abs"]], "acos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acos"]], "acosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acosh"]], "add() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.add"]], "angle() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.angle"]], "asin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asin"]], "asinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asinh"]], "atan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan"]], "atan2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan2"]], "atanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.ceil"]], "cos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cos"]], "cosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.deg2rad"]], "divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.divide"]], "equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.equal"]], "erf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.erf"]], "exp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp"]], "exp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp2"]], "expm1() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.expm1"]], "floor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor"]], "floor_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.fmin"]], "gcd() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.gcd"]], "greater() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater"]], "greater_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater_equal"]], "imag() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.imag"]], "isfinite() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isfinite"]], "isinf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isinf"]], "isnan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isnan"]], "isreal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isreal"]], "ivy.data_classes.array.elementwise": [[11, "module-ivy.data_classes.array.elementwise"]], "lcm() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.lcm"]], "less() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less"]], "less_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less_equal"]], "log() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log"]], "log10() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log10"]], "log1p() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log1p"]], "log2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log2"]], "logaddexp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.maximum"]], "minimum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.minimum"]], "multiply() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.negative"]], "not_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.not_equal"]], "positive() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.positive"]], "pow() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.pow"]], "rad2deg() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.rad2deg"]], "real() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.real"]], "reciprocal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.remainder"]], "round() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.round"]], "sign() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sign"]], "sin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sin"]], "sinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sinh"]], "sqrt() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sqrt"]], "square() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.square"]], "subtract() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.subtract"]], "tan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tan"]], "tanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tanh"]], "trapz() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trapz"]], "trunc() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[11, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc_divide"]], "_arraywithactivationsexperimental (class in ivy.data_classes.array.experimental.activations)": [[12, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental"]], "_arraywithconversionsexperimental (class in ivy.data_classes.array.experimental.conversions)": [[12, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental"]], "_arraywithcreationexperimental (class in ivy.data_classes.array.experimental.creation)": [[12, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental"]], "_arraywithdata_typeexperimental (class in ivy.data_classes.array.experimental.data_type)": [[12, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental"]], "_arraywithdeviceexperimental (class in ivy.data_classes.array.experimental.device)": [[12, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental"]], "_arraywithelementwiseexperimental (class in ivy.data_classes.array.experimental.elementwise)": [[12, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental"]], "_arraywithgeneralexperimental (class in ivy.data_classes.array.experimental.general)": [[12, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental"]], "_arraywithgradientsexperimental (class in ivy.data_classes.array.experimental.gradients)": [[12, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental"]], "_arraywithimageexperimental (class in ivy.data_classes.array.experimental.image)": [[12, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental"]], "_arraywithlayersexperimental (class in ivy.data_classes.array.experimental.layers)": [[12, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental"]], "_arraywithlinearalgebraexperimental (class in ivy.data_classes.array.experimental.linear_algebra)": [[12, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental"]], "_arraywithlossesexperimental (class in ivy.data_classes.array.experimental.losses)": [[12, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental"]], "_arraywithmanipulationexperimental (class in ivy.data_classes.array.experimental.manipulation)": [[12, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental"]], "_arraywithnormsexperimental (class in ivy.data_classes.array.experimental.norms)": [[12, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental"]], "_arraywithrandomexperimental (class in ivy.data_classes.array.experimental.random)": [[12, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental"]], "_arraywithsearchingexperimental (class in ivy.data_classes.array.experimental.searching)": [[12, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental"]], "_arraywithsetexperimental (class in ivy.data_classes.array.experimental.set)": [[12, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental"]], "_arraywithsortingexperimental (class in ivy.data_classes.array.experimental.sorting)": [[12, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental"]], "_arraywithstatisticalexperimental (class in ivy.data_classes.array.experimental.statistical)": [[12, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental"]], "_arraywithutilityexperimental (class in ivy.data_classes.array.experimental.utility)": [[12, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental attribute)": [[12, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.conversions._arraywithconversionsexperimental attribute)": [[12, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental attribute)": [[12, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.data_type._arraywithdata_typeexperimental attribute)": [[12, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.device._arraywithdeviceexperimental attribute)": [[12, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental attribute)": [[12, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental attribute)": [[12, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.gradients._arraywithgradientsexperimental attribute)": [[12, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.image._arraywithimageexperimental attribute)": [[12, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental attribute)": [[12, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental attribute)": [[12, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental attribute)": [[12, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental attribute)": [[12, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental attribute)": [[12, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.random._arraywithrandomexperimental attribute)": [[12, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental attribute)": [[12, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.set._arraywithsetexperimental attribute)": [[12, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental attribute)": [[12, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental attribute)": [[12, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental attribute)": [[12, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental._abc_impl"]], "adaptive_avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[12, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[12, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[12, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_max_pool2d"]], "adjoint() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[12, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[12, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.allclose"]], "as_strided() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[12, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[12, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[12, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[12, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[12, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[12, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[12, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[12, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[12, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.batch_norm"]], "bernoulli() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[12, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[12, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[12, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[12, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[12, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.blackman_window"]], "concat_from_sequence() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[12, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[12, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[12, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[12, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[12, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[12, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[12, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[12, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[12, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[12, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dct"]], "dft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[12, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[12, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[12, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[12, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[12, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.dirichlet"]], "dsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[12, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[12, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[12, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[12, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[12, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[12, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.elu"]], "embedding() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[12, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.embedding"]], "expand() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[12, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[12, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[12, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft"]], "fft2() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[12, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft2"]], "fill_diagonal() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[12, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[12, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[12, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[12, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[12, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[12, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[12, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[12, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[12, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[12, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[12, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.gamma"]], "gradient() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[12, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[12, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.group_norm"]], "heaviside() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[12, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.heaviside"]], "histogram() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[12, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[12, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[12, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hstack"]], "hypot() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[12, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[12, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[12, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[12, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[12, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[12, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[12, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[12, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[12, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.interpolate"]], "isclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[12, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.isclose"]], "ivy.data_classes.array.experimental": [[12, "module-ivy.data_classes.array.experimental"]], "ivy.data_classes.array.experimental.activations": [[12, "module-ivy.data_classes.array.experimental.activations"]], "ivy.data_classes.array.experimental.conversions": [[12, "module-ivy.data_classes.array.experimental.conversions"]], "ivy.data_classes.array.experimental.creation": [[12, "module-ivy.data_classes.array.experimental.creation"]], "ivy.data_classes.array.experimental.data_type": [[12, "module-ivy.data_classes.array.experimental.data_type"]], "ivy.data_classes.array.experimental.device": [[12, "module-ivy.data_classes.array.experimental.device"]], "ivy.data_classes.array.experimental.elementwise": [[12, "module-ivy.data_classes.array.experimental.elementwise"]], "ivy.data_classes.array.experimental.general": [[12, "module-ivy.data_classes.array.experimental.general"]], "ivy.data_classes.array.experimental.gradients": [[12, "module-ivy.data_classes.array.experimental.gradients"]], "ivy.data_classes.array.experimental.image": [[12, "module-ivy.data_classes.array.experimental.image"]], "ivy.data_classes.array.experimental.layers": [[12, "module-ivy.data_classes.array.experimental.layers"]], "ivy.data_classes.array.experimental.linear_algebra": [[12, "module-ivy.data_classes.array.experimental.linear_algebra"]], "ivy.data_classes.array.experimental.losses": [[12, "module-ivy.data_classes.array.experimental.losses"]], "ivy.data_classes.array.experimental.manipulation": [[12, "module-ivy.data_classes.array.experimental.manipulation"]], "ivy.data_classes.array.experimental.norms": [[12, "module-ivy.data_classes.array.experimental.norms"]], "ivy.data_classes.array.experimental.random": [[12, "module-ivy.data_classes.array.experimental.random"]], "ivy.data_classes.array.experimental.searching": [[12, "module-ivy.data_classes.array.experimental.searching"]], "ivy.data_classes.array.experimental.set": [[12, "module-ivy.data_classes.array.experimental.set"]], "ivy.data_classes.array.experimental.sorting": [[12, "module-ivy.data_classes.array.experimental.sorting"]], "ivy.data_classes.array.experimental.statistical": [[12, "module-ivy.data_classes.array.experimental.statistical"]], "ivy.data_classes.array.experimental.utility": [[12, "module-ivy.data_classes.array.experimental.utility"]], "kron() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[12, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.kron"]], "l1_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[12, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[12, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[12, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[12, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental method)": [[12, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[12, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lgamma"]], "logit() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[12, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logit"]], "logsigmoid() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[12, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[12, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[12, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[12, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[12, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[12, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[12, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[12, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool3d"]], "median() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[12, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.median"]], "mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[12, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[12, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[12, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[12, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[12, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[12, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[12, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmedian"]], "nansum() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[12, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[12, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nextafter"]], "pad() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[12, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[12, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[12, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[12, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[12, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[12, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[12, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.poisson"]], "prelu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[12, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.prelu"]], "quantile() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[12, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental method)": [[12, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental.reduce"]], "reduce_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[12, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.reduce_window"]], "relu6() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[12, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.relu6"]], "rfftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[12, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[12, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.rot90"]], "selu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[12, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.selu"]], "signbit() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[12, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[12, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.silu"]], "sinc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[12, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sinc"]], "soft_thresholding() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[12, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.soft_thresholding"]], "svd_flip() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[12, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.svd_flip"]], "take_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[12, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take_along_axis"]], "thresholded_relu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[12, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[12, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.top_k"]], "trilu() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[12, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.trilu"]], "truncated_svd() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[12, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.truncated_svd"]], "tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[12, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tucker"]], "unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[12, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[12, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental method)": [[12, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental.unravel_index"]], "unsorted_segment_min() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[12, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[12, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_sum"]], "vsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[12, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[12, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[12, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[12, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.zeta"]], "_arraywithgeneral (class in ivy.data_classes.array.general)": [[13, "ivy.data_classes.array.general._ArrayWithGeneral"]], "_abc_impl (ivy.data_classes.array.general._arraywithgeneral attribute)": [[13, "ivy.data_classes.array.general._ArrayWithGeneral._abc_impl"]], "all_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[13, "ivy.data_classes.array.general._ArrayWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[13, "ivy.data_classes.array.general._ArrayWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.array.general._arraywithgeneral method)": [[13, "ivy.data_classes.array.general._ArrayWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[13, "ivy.data_classes.array.general._ArrayWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[13, "ivy.data_classes.array.general._ArrayWithGeneral.clip_vector_norm"]], "default() (ivy.data_classes.array.general._arraywithgeneral method)": [[13, "ivy.data_classes.array.general._ArrayWithGeneral.default"]], "einops_rearrange() (ivy.data_classes.array.general._arraywithgeneral method)": [[13, "ivy.data_classes.array.general._ArrayWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.array.general._arraywithgeneral method)": [[13, "ivy.data_classes.array.general._ArrayWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.array.general._arraywithgeneral method)": [[13, "ivy.data_classes.array.general._ArrayWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.array.general._arraywithgeneral method)": [[13, "ivy.data_classes.array.general._ArrayWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.array.general._arraywithgeneral method)": [[13, "ivy.data_classes.array.general._ArrayWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.array.general._arraywithgeneral method)": [[13, "ivy.data_classes.array.general._ArrayWithGeneral.gather"]], "gather_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[13, "ivy.data_classes.array.general._ArrayWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.array.general._arraywithgeneral method)": [[13, "ivy.data_classes.array.general._ArrayWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.array.general._arraywithgeneral method)": [[13, "ivy.data_classes.array.general._ArrayWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.array.general._arraywithgeneral method)": [[13, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.array.general._arraywithgeneral method)": [[13, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.array.general._arraywithgeneral method)": [[13, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[13, "ivy.data_classes.array.general._ArrayWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[13, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_array"]], "is_ivy_container() (ivy.data_classes.array.general._arraywithgeneral method)": [[13, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_container"]], "is_native_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[13, "ivy.data_classes.array.general._ArrayWithGeneral.is_native_array"]], "isin() (ivy.data_classes.array.general._arraywithgeneral method)": [[13, "ivy.data_classes.array.general._ArrayWithGeneral.isin"]], "ivy.data_classes.array.general": [[13, "module-ivy.data_classes.array.general"]], "scatter_flat() (ivy.data_classes.array.general._arraywithgeneral method)": [[13, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[13, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.array.general._arraywithgeneral method)": [[13, "ivy.data_classes.array.general._ArrayWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.array.general._arraywithgeneral method)": [[13, "ivy.data_classes.array.general._ArrayWithGeneral.stable_pow"]], "supports_inplace_updates() (ivy.data_classes.array.general._arraywithgeneral method)": [[13, "ivy.data_classes.array.general._ArrayWithGeneral.supports_inplace_updates"]], "to_file() (ivy.data_classes.array.general._arraywithgeneral method)": [[13, "ivy.data_classes.array.general._ArrayWithGeneral.to_file"]], "to_list() (ivy.data_classes.array.general._arraywithgeneral method)": [[13, "ivy.data_classes.array.general._ArrayWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.array.general._arraywithgeneral method)": [[13, "ivy.data_classes.array.general._ArrayWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.array.general._arraywithgeneral method)": [[13, "ivy.data_classes.array.general._ArrayWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.array.general._arraywithgeneral method)": [[13, "ivy.data_classes.array.general._ArrayWithGeneral.value_is_nan"]], "_arraywithgradients (class in ivy.data_classes.array.gradients)": [[14, "ivy.data_classes.array.gradients._ArrayWithGradients"]], "_abc_impl (ivy.data_classes.array.gradients._arraywithgradients attribute)": [[14, "ivy.data_classes.array.gradients._ArrayWithGradients._abc_impl"]], "adam_step() (ivy.data_classes.array.gradients._arraywithgradients method)": [[14, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_step"]], "adam_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[14, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[14, "ivy.data_classes.array.gradients._ArrayWithGradients.gradient_descent_update"]], "ivy.data_classes.array.gradients": [[14, "module-ivy.data_classes.array.gradients"]], "lamb_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[14, "ivy.data_classes.array.gradients._ArrayWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[14, "ivy.data_classes.array.gradients._ArrayWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[14, "ivy.data_classes.array.gradients._ArrayWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.array.gradients._arraywithgradients method)": [[14, "ivy.data_classes.array.gradients._ArrayWithGradients.stop_gradient"]], "_arraywithimage (class in ivy.data_classes.array.image)": [[15, "ivy.data_classes.array.image._ArrayWithImage"]], "_abc_impl (ivy.data_classes.array.image._arraywithimage attribute)": [[15, "ivy.data_classes.array.image._ArrayWithImage._abc_impl"]], "ivy.data_classes.array.image": [[15, "module-ivy.data_classes.array.image"]], "_arraywithlayers (class in ivy.data_classes.array.layers)": [[16, "ivy.data_classes.array.layers._ArrayWithLayers"]], "_abc_impl (ivy.data_classes.array.layers._arraywithlayers attribute)": [[16, "ivy.data_classes.array.layers._ArrayWithLayers._abc_impl"]], "conv1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[16, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[16, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[16, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[16, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[16, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[16, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[16, "ivy.data_classes.array.layers._ArrayWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.array.layers._arraywithlayers method)": [[16, "ivy.data_classes.array.layers._ArrayWithLayers.dropout"]], "dropout1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[16, "ivy.data_classes.array.layers._ArrayWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[16, "ivy.data_classes.array.layers._ArrayWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[16, "ivy.data_classes.array.layers._ArrayWithLayers.dropout3d"]], "ivy.data_classes.array.layers": [[16, "module-ivy.data_classes.array.layers"]], "linear() (ivy.data_classes.array.layers._arraywithlayers method)": [[16, "ivy.data_classes.array.layers._ArrayWithLayers.linear"]], "lstm_update() (ivy.data_classes.array.layers._arraywithlayers method)": [[16, "ivy.data_classes.array.layers._ArrayWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[16, "ivy.data_classes.array.layers._ArrayWithLayers.multi_head_attention"]], "scaled_dot_product_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[16, "ivy.data_classes.array.layers._ArrayWithLayers.scaled_dot_product_attention"]], "_arraywithlinearalgebra (class in ivy.data_classes.array.linear_algebra)": [[17, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra attribute)": [[17, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra._abc_impl"]], "cholesky() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[17, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[17, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cross"]], "det() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[17, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.det"]], "diag() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[17, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[17, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diagonal"]], "eig() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[17, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eig"]], "eigh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[17, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[17, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[17, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[17, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inv"]], "ivy.data_classes.array.linear_algebra": [[17, "module-ivy.data_classes.array.linear_algebra"]], "matmul() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[17, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[17, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[17, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[17, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[17, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[17, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[17, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[17, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[17, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[17, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[17, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[17, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[17, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[17, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[17, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[17, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[17, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[17, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[17, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_arraywithlosses (class in ivy.data_classes.array.losses)": [[18, "ivy.data_classes.array.losses._ArrayWithLosses"]], "_abc_impl (ivy.data_classes.array.losses._arraywithlosses attribute)": [[18, "ivy.data_classes.array.losses._ArrayWithLosses._abc_impl"]], "binary_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[18, "ivy.data_classes.array.losses._ArrayWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[18, "ivy.data_classes.array.losses._ArrayWithLosses.cross_entropy"]], "ivy.data_classes.array.losses": [[18, "module-ivy.data_classes.array.losses"]], "sparse_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[18, "ivy.data_classes.array.losses._ArrayWithLosses.sparse_cross_entropy"]], "_arraywithmanipulation (class in ivy.data_classes.array.manipulation)": [[19, "ivy.data_classes.array.manipulation._ArrayWithManipulation"]], "_abc_impl (ivy.data_classes.array.manipulation._arraywithmanipulation attribute)": [[19, "ivy.data_classes.array.manipulation._ArrayWithManipulation._abc_impl"]], "clip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[19, "ivy.data_classes.array.manipulation._ArrayWithManipulation.clip"]], "concat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[19, "ivy.data_classes.array.manipulation._ArrayWithManipulation.concat"]], "constant_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[19, "ivy.data_classes.array.manipulation._ArrayWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[19, "ivy.data_classes.array.manipulation._ArrayWithManipulation.expand_dims"]], "flip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[19, "ivy.data_classes.array.manipulation._ArrayWithManipulation.flip"]], "ivy.data_classes.array.manipulation": [[19, "module-ivy.data_classes.array.manipulation"]], "permute_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[19, "ivy.data_classes.array.manipulation._ArrayWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[19, "ivy.data_classes.array.manipulation._ArrayWithManipulation.repeat"]], "reshape() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[19, "ivy.data_classes.array.manipulation._ArrayWithManipulation.reshape"]], "roll() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[19, "ivy.data_classes.array.manipulation._ArrayWithManipulation.roll"]], "split() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[19, "ivy.data_classes.array.manipulation._ArrayWithManipulation.split"]], "squeeze() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[19, "ivy.data_classes.array.manipulation._ArrayWithManipulation.squeeze"]], "stack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[19, "ivy.data_classes.array.manipulation._ArrayWithManipulation.stack"]], "swapaxes() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[19, "ivy.data_classes.array.manipulation._ArrayWithManipulation.swapaxes"]], "tile() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[19, "ivy.data_classes.array.manipulation._ArrayWithManipulation.tile"]], "unstack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[19, "ivy.data_classes.array.manipulation._ArrayWithManipulation.unstack"]], "view() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[19, "ivy.data_classes.array.manipulation._ArrayWithManipulation.view"]], "zero_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[19, "ivy.data_classes.array.manipulation._ArrayWithManipulation.zero_pad"]], "_arraywithnorms (class in ivy.data_classes.array.norms)": [[20, "ivy.data_classes.array.norms._ArrayWithNorms"]], "_abc_impl (ivy.data_classes.array.norms._arraywithnorms attribute)": [[20, "ivy.data_classes.array.norms._ArrayWithNorms._abc_impl"]], "ivy.data_classes.array.norms": [[20, "module-ivy.data_classes.array.norms"]], "layer_norm() (ivy.data_classes.array.norms._arraywithnorms method)": [[20, "ivy.data_classes.array.norms._ArrayWithNorms.layer_norm"]], "_arraywithrandom (class in ivy.data_classes.array.random)": [[21, "ivy.data_classes.array.random._ArrayWithRandom"]], "_abc_impl (ivy.data_classes.array.random._arraywithrandom attribute)": [[21, "ivy.data_classes.array.random._ArrayWithRandom._abc_impl"]], "ivy.data_classes.array.random": [[21, "module-ivy.data_classes.array.random"]], "multinomial() (ivy.data_classes.array.random._arraywithrandom method)": [[21, "ivy.data_classes.array.random._ArrayWithRandom.multinomial"]], "randint() (ivy.data_classes.array.random._arraywithrandom method)": [[21, "ivy.data_classes.array.random._ArrayWithRandom.randint"]], "random_normal() (ivy.data_classes.array.random._arraywithrandom method)": [[21, "ivy.data_classes.array.random._ArrayWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.array.random._arraywithrandom method)": [[21, "ivy.data_classes.array.random._ArrayWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.array.random._arraywithrandom method)": [[21, "ivy.data_classes.array.random._ArrayWithRandom.shuffle"]], "_arraywithsearching (class in ivy.data_classes.array.searching)": [[22, "ivy.data_classes.array.searching._ArrayWithSearching"]], "_abc_impl (ivy.data_classes.array.searching._arraywithsearching attribute)": [[22, "ivy.data_classes.array.searching._ArrayWithSearching._abc_impl"]], "argmax() (ivy.data_classes.array.searching._arraywithsearching method)": [[22, "ivy.data_classes.array.searching._ArrayWithSearching.argmax"]], "argmin() (ivy.data_classes.array.searching._arraywithsearching method)": [[22, "ivy.data_classes.array.searching._ArrayWithSearching.argmin"]], "argwhere() (ivy.data_classes.array.searching._arraywithsearching method)": [[22, "ivy.data_classes.array.searching._ArrayWithSearching.argwhere"]], "ivy.data_classes.array.searching": [[22, "module-ivy.data_classes.array.searching"]], "nonzero() (ivy.data_classes.array.searching._arraywithsearching method)": [[22, "ivy.data_classes.array.searching._ArrayWithSearching.nonzero"]], "where() (ivy.data_classes.array.searching._arraywithsearching method)": [[22, "ivy.data_classes.array.searching._ArrayWithSearching.where"]], "_arraywithset (class in ivy.data_classes.array.set)": [[23, "ivy.data_classes.array.set._ArrayWithSet"]], "_abc_impl (ivy.data_classes.array.set._arraywithset attribute)": [[23, "ivy.data_classes.array.set._ArrayWithSet._abc_impl"]], "ivy.data_classes.array.set": [[23, "module-ivy.data_classes.array.set"]], "unique_all() (ivy.data_classes.array.set._arraywithset method)": [[23, "ivy.data_classes.array.set._ArrayWithSet.unique_all"]], "unique_counts() (ivy.data_classes.array.set._arraywithset method)": [[23, "ivy.data_classes.array.set._ArrayWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.array.set._arraywithset method)": [[23, "ivy.data_classes.array.set._ArrayWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.array.set._arraywithset method)": [[23, "ivy.data_classes.array.set._ArrayWithSet.unique_values"]], "_arraywithsorting (class in ivy.data_classes.array.sorting)": [[24, "ivy.data_classes.array.sorting._ArrayWithSorting"]], "_abc_impl (ivy.data_classes.array.sorting._arraywithsorting attribute)": [[24, "ivy.data_classes.array.sorting._ArrayWithSorting._abc_impl"]], "argsort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[24, "ivy.data_classes.array.sorting._ArrayWithSorting.argsort"]], "ivy.data_classes.array.sorting": [[24, "module-ivy.data_classes.array.sorting"]], "msort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[24, "ivy.data_classes.array.sorting._ArrayWithSorting.msort"]], "searchsorted() (ivy.data_classes.array.sorting._arraywithsorting method)": [[24, "ivy.data_classes.array.sorting._ArrayWithSorting.searchsorted"]], "sort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[24, "ivy.data_classes.array.sorting._ArrayWithSorting.sort"]], "_arraywithstatistical (class in ivy.data_classes.array.statistical)": [[25, "ivy.data_classes.array.statistical._ArrayWithStatistical"]], "_abc_impl (ivy.data_classes.array.statistical._arraywithstatistical attribute)": [[25, "ivy.data_classes.array.statistical._ArrayWithStatistical._abc_impl"]], "cumprod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[25, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[25, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumsum"]], "einsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[25, "ivy.data_classes.array.statistical._ArrayWithStatistical.einsum"]], "ivy.data_classes.array.statistical": [[25, "module-ivy.data_classes.array.statistical"]], "max() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[25, "ivy.data_classes.array.statistical._ArrayWithStatistical.max"]], "mean() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[25, "ivy.data_classes.array.statistical._ArrayWithStatistical.mean"]], "min() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[25, "ivy.data_classes.array.statistical._ArrayWithStatistical.min"]], "prod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[25, "ivy.data_classes.array.statistical._ArrayWithStatistical.prod"]], "std() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[25, "ivy.data_classes.array.statistical._ArrayWithStatistical.std"]], "sum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[25, "ivy.data_classes.array.statistical._ArrayWithStatistical.sum"]], "var() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[25, "ivy.data_classes.array.statistical._ArrayWithStatistical.var"]], "_arraywithutility (class in ivy.data_classes.array.utility)": [[26, "ivy.data_classes.array.utility._ArrayWithUtility"]], "_abc_impl (ivy.data_classes.array.utility._arraywithutility attribute)": [[26, "ivy.data_classes.array.utility._ArrayWithUtility._abc_impl"]], "all() (ivy.data_classes.array.utility._arraywithutility method)": [[26, "ivy.data_classes.array.utility._ArrayWithUtility.all"]], "any() (ivy.data_classes.array.utility._arraywithutility method)": [[26, "ivy.data_classes.array.utility._ArrayWithUtility.any"]], "ivy.data_classes.array.utility": [[26, "module-ivy.data_classes.array.utility"]], "_wrap_function() (in module ivy.data_classes.array.wrapping)": [[27, "ivy.data_classes.array.wrapping._wrap_function"]], "add_ivy_array_instance_methods() (in module ivy.data_classes.array.wrapping)": [[27, "ivy.data_classes.array.wrapping.add_ivy_array_instance_methods"]], "ivy.data_classes.array.wrapping": [[27, "module-ivy.data_classes.array.wrapping"]], "_containerwithactivations (class in ivy.data_classes.container.activations)": [[28, "ivy.data_classes.container.activations._ContainerWithActivations"]], "_abc_impl (ivy.data_classes.container.activations._containerwithactivations attribute)": [[28, "ivy.data_classes.container.activations._ContainerWithActivations._abc_impl"]], "_static_gelu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[28, "ivy.data_classes.container.activations._ContainerWithActivations._static_gelu"]], "_static_hardswish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[28, "ivy.data_classes.container.activations._ContainerWithActivations._static_hardswish"]], "_static_leaky_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[28, "ivy.data_classes.container.activations._ContainerWithActivations._static_leaky_relu"]], "_static_log_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[28, "ivy.data_classes.container.activations._ContainerWithActivations._static_log_softmax"]], "_static_mish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[28, "ivy.data_classes.container.activations._ContainerWithActivations._static_mish"]], "_static_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[28, "ivy.data_classes.container.activations._ContainerWithActivations._static_relu"]], "_static_sigmoid() (ivy.data_classes.container.activations._containerwithactivations static method)": [[28, "ivy.data_classes.container.activations._ContainerWithActivations._static_sigmoid"]], "_static_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[28, "ivy.data_classes.container.activations._ContainerWithActivations._static_softmax"]], "_static_softplus() (ivy.data_classes.container.activations._containerwithactivations static method)": [[28, "ivy.data_classes.container.activations._ContainerWithActivations._static_softplus"]], "gelu() (ivy.data_classes.container.activations._containerwithactivations method)": [[28, "ivy.data_classes.container.activations._ContainerWithActivations.gelu"]], "hardswish() (ivy.data_classes.container.activations._containerwithactivations method)": [[28, "ivy.data_classes.container.activations._ContainerWithActivations.hardswish"]], "ivy.data_classes.container.activations": [[28, "module-ivy.data_classes.container.activations"]], "leaky_relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[28, "ivy.data_classes.container.activations._ContainerWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[28, "ivy.data_classes.container.activations._ContainerWithActivations.log_softmax"]], "mish() (ivy.data_classes.container.activations._containerwithactivations method)": [[28, "ivy.data_classes.container.activations._ContainerWithActivations.mish"]], "relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[28, "ivy.data_classes.container.activations._ContainerWithActivations.relu"]], "sigmoid() (ivy.data_classes.container.activations._containerwithactivations method)": [[28, "ivy.data_classes.container.activations._ContainerWithActivations.sigmoid"]], "softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[28, "ivy.data_classes.container.activations._ContainerWithActivations.softmax"]], "softplus() (ivy.data_classes.container.activations._containerwithactivations method)": [[28, "ivy.data_classes.container.activations._ContainerWithActivations.softplus"]], "containerbase (class in ivy.data_classes.container.base)": [[29, "ivy.data_classes.container.base.ContainerBase"]], "__getitem__() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.__getitem__"]], "__init__() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.__init__"]], "__setitem__() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.__setitem__"]], "_abc_impl (ivy.data_classes.container.base.containerbase attribute)": [[29, "ivy.data_classes.container.base.ContainerBase._abc_impl"]], "_cont_at_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_dict"]], "_cont_at_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_seq"]], "_cont_call_static_method_with_flexible_args() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase._cont_call_static_method_with_flexible_args"]], "_cont_concat_unify() (ivy.data_classes.container.base.containerbase static method)": [[29, "ivy.data_classes.container.base.ContainerBase._cont_concat_unify"]], "_cont_get_dev() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase._cont_get_dev"]], "_cont_get_shape() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase._cont_get_shape"]], "_cont_get_shapes() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase._cont_get_shapes"]], "_cont_ivy (ivy.data_classes.container.base.containerbase property)": [[29, "ivy.data_classes.container.base.ContainerBase._cont_ivy"]], "_cont_mean_unify() (ivy.data_classes.container.base.containerbase static method)": [[29, "ivy.data_classes.container.base.ContainerBase._cont_mean_unify"]], "_cont_prune_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_dict"]], "_cont_prune_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_seq"]], "_cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase._cont_slice_keys"]], "_cont_sum_unify() (ivy.data_classes.container.base.containerbase static method)": [[29, "ivy.data_classes.container.base.ContainerBase._cont_sum_unify"]], "_get_queue_item() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase._get_queue_item"]], "_is_jsonable() (in module ivy.data_classes.container.base)": [[29, "ivy.data_classes.container.base._is_jsonable"]], "_repr() (in module ivy.data_classes.container.base)": [[29, "ivy.data_classes.container.base._repr"]], "cont_all_false() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_all_false"]], "cont_all_key_chains() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_all_key_chains"]], "cont_all_true() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_all_true"]], "cont_as_bools() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_as_bools"]], "cont_assert_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_container"]], "cont_assert_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_structure"]], "cont_assert_identical() (ivy.data_classes.container.base.containerbase static method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical"]], "cont_assert_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical_structure"]], "cont_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chain"]], "cont_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chains"]], "cont_at_keys() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_at_keys"]], "cont_combine() (ivy.data_classes.container.base.containerbase static method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_combine"]], "cont_common_key_chains() (ivy.data_classes.container.base.containerbase static method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_common_key_chains"]], "cont_config (ivy.data_classes.container.base.containerbase property)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_config"]], "cont_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_container"]], "cont_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_structure"]], "cont_copy() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_copy"]], "cont_create_if_absent() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_create_if_absent"]], "cont_cutoff_at_depth() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_depth"]], "cont_cutoff_at_height() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_height"]], "cont_deep_copy() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_deep_copy"]], "cont_dev (ivy.data_classes.container.base.containerbase property)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_dev"]], "cont_dev_str (ivy.data_classes.container.base.containerbase property)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_dev_str"]], "cont_diff() (ivy.data_classes.container.base.containerbase static method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_diff"]], "cont_duplicate_array_keychains() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_duplicate_array_keychains"]], "cont_find_sub_container() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_container"]], "cont_find_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_structure"]], "cont_flatten_key_chain() (ivy.data_classes.container.base.containerbase static method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chain"]], "cont_flatten_key_chains() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chains"]], "cont_format_key_chains() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_format_key_chains"]], "cont_from_disk_as_hdf5() (ivy.data_classes.container.base.containerbase static method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_hdf5"]], "cont_from_disk_as_json() (ivy.data_classes.container.base.containerbase static method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_json"]], "cont_from_disk_as_pickled() (ivy.data_classes.container.base.containerbase static method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_pickled"]], "cont_from_flat_list() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_from_flat_list"]], "cont_handle_inplace() (ivy.data_classes.container.base.containerbase static method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_handle_inplace"]], "cont_has_key() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_has_key"]], "cont_has_key_chain() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_has_key_chain"]], "cont_identical() (ivy.data_classes.container.base.containerbase static method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_identical"]], "cont_identical_array_shapes() (ivy.data_classes.container.base.containerbase static method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_identical_array_shapes"]], "cont_identical_configs() (ivy.data_classes.container.base.containerbase static method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_identical_configs"]], "cont_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_identical_structure"]], "cont_if_exists() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_if_exists"]], "cont_inplace_update() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_inplace_update"]], "cont_ivy (ivy.data_classes.container.base.containerbase property)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_ivy"]], "cont_key_chains_containing() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_key_chains_containing"]], "cont_list_join() (ivy.data_classes.container.base.containerbase static method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_list_join"]], "cont_list_stack() (ivy.data_classes.container.base.containerbase static method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_list_stack"]], "cont_load() (ivy.data_classes.container.base.containerbase static method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_load"]], "cont_map() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_map"]], "cont_map_sub_conts() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_map_sub_conts"]], "cont_max_depth (ivy.data_classes.container.base.containerbase property)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_max_depth"]], "cont_multi_map() (ivy.data_classes.container.base.containerbase static method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_multi_map"]], "cont_multi_map_in_function() (ivy.data_classes.container.base.containerbase static method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_multi_map_in_function"]], "cont_num_arrays() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_num_arrays"]], "cont_overwrite_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chain"]], "cont_overwrite_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chains"]], "cont_prune_empty() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_prune_empty"]], "cont_prune_key_chain() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chain"]], "cont_prune_key_chains() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chains"]], "cont_prune_key_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_from_key_chains"]], "cont_prune_keys() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys"]], "cont_prune_keys_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys_from_key_chains"]], "cont_reduce() (ivy.data_classes.container.base.containerbase static method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_reduce"]], "cont_remove_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_remove_key_length_limit"]], "cont_remove_print_limit() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_remove_print_limit"]], "cont_reshape_like() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_reshape_like"]], "cont_restructure() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_restructure"]], "cont_restructure_key_chains() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_restructure_key_chains"]], "cont_save() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_save"]], "cont_set_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chain"]], "cont_set_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chains"]], "cont_set_at_keys() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_set_at_keys"]], "cont_shape (ivy.data_classes.container.base.containerbase property)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_shape"]], "cont_shapes (ivy.data_classes.container.base.containerbase property)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_shapes"]], "cont_show() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_show"]], "cont_show_sub_container() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_show_sub_container"]], "cont_size_ordered_arrays() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_size_ordered_arrays"]], "cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_slice_keys"]], "cont_slice_via_key() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_slice_via_key"]], "cont_sort_by_key() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_sort_by_key"]], "cont_structural_diff() (ivy.data_classes.container.base.containerbase static method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_structural_diff"]], "cont_to_dict() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_to_dict"]], "cont_to_disk_as_hdf5() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_hdf5"]], "cont_to_disk_as_json() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_json"]], "cont_to_disk_as_pickled() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_pickled"]], "cont_to_flat_list() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_to_flat_list"]], "cont_to_iterator() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator"]], "cont_to_iterator_keys() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_keys"]], "cont_to_iterator_values() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_values"]], "cont_to_jsonable() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_to_jsonable"]], "cont_to_nested_list() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_to_nested_list"]], "cont_to_raw() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_to_raw"]], "cont_trim_key() (ivy.data_classes.container.base.containerbase static method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_trim_key"]], "cont_try_kc() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_try_kc"]], "cont_unify() (ivy.data_classes.container.base.containerbase static method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_unify"]], "cont_unstack_conts() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_unstack_conts"]], "cont_update_config() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_update_config"]], "cont_with_default_key_color() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_with_default_key_color"]], "cont_with_entries_as_lists() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_with_entries_as_lists"]], "cont_with_ivy_backend() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_with_ivy_backend"]], "cont_with_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_with_key_length_limit"]], "cont_with_print_indent() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_with_print_indent"]], "cont_with_print_limit() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_with_print_limit"]], "cont_with_print_line_spacing() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.cont_with_print_line_spacing"]], "dynamic_backend (ivy.data_classes.container.base.containerbase property)": [[29, "ivy.data_classes.container.base.ContainerBase.dynamic_backend"]], "h5_file_size() (ivy.data_classes.container.base.containerbase static method)": [[29, "ivy.data_classes.container.base.ContainerBase.h5_file_size"]], "ivy.data_classes.container.base": [[29, "module-ivy.data_classes.container.base"]], "shuffle_h5_file() (ivy.data_classes.container.base.containerbase static method)": [[29, "ivy.data_classes.container.base.ContainerBase.shuffle_h5_file"]], "split_conts() (ivy.data_classes.container.base.containerbase method)": [[29, "ivy.data_classes.container.base.ContainerBase.split_conts"]], "_containerwithconversions (class in ivy.data_classes.container.conversions)": [[30, "ivy.data_classes.container.conversions._ContainerWithConversions"]], "_abc_impl (ivy.data_classes.container.conversions._containerwithconversions attribute)": [[30, "ivy.data_classes.container.conversions._ContainerWithConversions._abc_impl"]], "_static_to_ivy() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[30, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_ivy"]], "_static_to_native() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[30, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_native"]], "ivy.data_classes.container.conversions": [[30, "module-ivy.data_classes.container.conversions"]], "to_ivy() (ivy.data_classes.container.conversions._containerwithconversions method)": [[30, "ivy.data_classes.container.conversions._ContainerWithConversions.to_ivy"]], "to_native() (ivy.data_classes.container.conversions._containerwithconversions method)": [[30, "ivy.data_classes.container.conversions._ContainerWithConversions.to_native"]], "_containerwithcreation (class in ivy.data_classes.container.creation)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation"]], "_abc_impl (ivy.data_classes.container.creation._containerwithcreation attribute)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation._abc_impl"]], "_static_arange() (ivy.data_classes.container.creation._containerwithcreation static method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation._static_arange"]], "_static_asarray() (ivy.data_classes.container.creation._containerwithcreation static method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation._static_asarray"]], "_static_copy_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation._static_copy_array"]], "_static_empty() (ivy.data_classes.container.creation._containerwithcreation static method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty"]], "_static_empty_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty_like"]], "_static_eye() (ivy.data_classes.container.creation._containerwithcreation static method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation._static_eye"]], "_static_from_dlpack() (ivy.data_classes.container.creation._containerwithcreation static method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation._static_from_dlpack"]], "_static_full() (ivy.data_classes.container.creation._containerwithcreation static method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation._static_full"]], "_static_full_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation._static_full_like"]], "_static_linspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation._static_linspace"]], "_static_logspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation._static_logspace"]], "_static_meshgrid() (ivy.data_classes.container.creation._containerwithcreation static method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation._static_meshgrid"]], "_static_native_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation._static_native_array"]], "_static_one_hot() (ivy.data_classes.container.creation._containerwithcreation static method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation._static_one_hot"]], "_static_ones() (ivy.data_classes.container.creation._containerwithcreation static method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones"]], "_static_ones_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones_like"]], "_static_tril() (ivy.data_classes.container.creation._containerwithcreation static method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation._static_tril"]], "_static_triu() (ivy.data_classes.container.creation._containerwithcreation static method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation._static_triu"]], "_static_zeros() (ivy.data_classes.container.creation._containerwithcreation static method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros"]], "_static_zeros_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros_like"]], "asarray() (ivy.data_classes.container.creation._containerwithcreation method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation.asarray"]], "copy_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation.copy_array"]], "empty_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.container.creation._containerwithcreation method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation.from_dlpack"]], "frombuffer() (ivy.data_classes.container.creation._containerwithcreation method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation.frombuffer"]], "full_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation.full_like"]], "ivy.data_classes.container.creation": [[31, "module-ivy.data_classes.container.creation"]], "linspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation.linspace"]], "logspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation.logspace"]], "meshgrid() (ivy.data_classes.container.creation._containerwithcreation method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation.meshgrid"]], "native_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation.native_array"]], "one_hot() (ivy.data_classes.container.creation._containerwithcreation method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation.one_hot"]], "ones_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation.ones_like"]], "static_frombuffer() (ivy.data_classes.container.creation._containerwithcreation static method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation.static_frombuffer"]], "static_triu_indices() (ivy.data_classes.container.creation._containerwithcreation static method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation.static_triu_indices"]], "tril() (ivy.data_classes.container.creation._containerwithcreation method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation.tril"]], "triu() (ivy.data_classes.container.creation._containerwithcreation method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation.triu"]], "triu_indices() (ivy.data_classes.container.creation._containerwithcreation method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation.triu_indices"]], "zeros_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[31, "ivy.data_classes.container.creation._ContainerWithCreation.zeros_like"]], "_containerwithdatatypes (class in ivy.data_classes.container.data_type)": [[32, "ivy.data_classes.container.data_type._ContainerWithDataTypes"]], "_abc_impl (ivy.data_classes.container.data_type._containerwithdatatypes attribute)": [[32, "ivy.data_classes.container.data_type._ContainerWithDataTypes._abc_impl"]], "_static_astype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[32, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_astype"]], "_static_broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[32, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_arrays"]], "_static_broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[32, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_to"]], "_static_can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[32, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_can_cast"]], "_static_default_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[32, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_complex_dtype"]], "_static_default_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[32, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_float_dtype"]], "_static_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[32, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_dtype"]], "_static_finfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[32, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_finfo"]], "_static_function_supported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[32, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_supported_dtypes"]], "_static_function_unsupported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[32, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_unsupported_dtypes"]], "_static_iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[32, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_iinfo"]], "_static_is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[32, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_bool_dtype"]], "_static_is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[32, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_complex_dtype"]], "_static_is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[32, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_float_dtype"]], "_static_is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[32, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_int_dtype"]], "_static_is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[32, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_uint_dtype"]], "_static_result_type() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[32, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_result_type"]], "astype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[32, "ivy.data_classes.container.data_type._ContainerWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[32, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[32, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[32, "ivy.data_classes.container.data_type._ContainerWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[32, "ivy.data_classes.container.data_type._ContainerWithDataTypes.dtype"]], "finfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[32, "ivy.data_classes.container.data_type._ContainerWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[32, "ivy.data_classes.container.data_type._ContainerWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[32, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_bool_dtype"]], "is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[32, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_complex_dtype"]], "is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[32, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[32, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[32, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_uint_dtype"]], "ivy.data_classes.container.data_type": [[32, "module-ivy.data_classes.container.data_type"]], "result_type() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[32, "ivy.data_classes.container.data_type._ContainerWithDataTypes.result_type"]], "_containerwithdevice (class in ivy.data_classes.container.device)": [[33, "ivy.data_classes.container.device._ContainerWithDevice"]], "_abc_impl (ivy.data_classes.container.device._containerwithdevice attribute)": [[33, "ivy.data_classes.container.device._ContainerWithDevice._abc_impl"]], "_static_dev() (ivy.data_classes.container.device._containerwithdevice static method)": [[33, "ivy.data_classes.container.device._ContainerWithDevice._static_dev"]], "_static_to_device() (ivy.data_classes.container.device._containerwithdevice static method)": [[33, "ivy.data_classes.container.device._ContainerWithDevice._static_to_device"]], "dev() (ivy.data_classes.container.device._containerwithdevice method)": [[33, "ivy.data_classes.container.device._ContainerWithDevice.dev"]], "ivy.data_classes.container.device": [[33, "module-ivy.data_classes.container.device"]], "to_device() (ivy.data_classes.container.device._containerwithdevice method)": [[33, "ivy.data_classes.container.device._ContainerWithDevice.to_device"]], "_containerwithelementwise (class in ivy.data_classes.container.elementwise)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise"]], "_abc_impl (ivy.data_classes.container.elementwise._containerwithelementwise attribute)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._abc_impl"]], "_static_abs() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_abs"]], "_static_acos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acos"]], "_static_acosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acosh"]], "_static_add() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_add"]], "_static_asin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asin"]], "_static_asinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asinh"]], "_static_atan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan"]], "_static_atan2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan2"]], "_static_atanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atanh"]], "_static_bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_and"]], "_static_bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_invert"]], "_static_bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_left_shift"]], "_static_bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_or"]], "_static_bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_right_shift"]], "_static_bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_xor"]], "_static_ceil() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_ceil"]], "_static_cos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cos"]], "_static_cosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cosh"]], "_static_deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_deg2rad"]], "_static_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_divide"]], "_static_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_equal"]], "_static_erf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_erf"]], "_static_exp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_exp"]], "_static_expm1() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_expm1"]], "_static_floor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor"]], "_static_floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor_divide"]], "_static_greater() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater"]], "_static_greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater_equal"]], "_static_isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isfinite"]], "_static_isinf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isinf"]], "_static_isnan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isnan"]], "_static_isreal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isreal"]], "_static_lcm() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_lcm"]], "_static_less() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less"]], "_static_less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less_equal"]], "_static_log() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log"]], "_static_log10() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log10"]], "_static_log1p() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log1p"]], "_static_log2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log2"]], "_static_logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logaddexp"]], "_static_logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_and"]], "_static_logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_not"]], "_static_logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_or"]], "_static_logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_xor"]], "_static_maximum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_maximum"]], "_static_minimum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_minimum"]], "_static_multiply() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_multiply"]], "_static_negative() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_negative"]], "_static_not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_not_equal"]], "_static_positive() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_positive"]], "_static_pow() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_pow"]], "_static_rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_rad2deg"]], "_static_reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_reciprocal"]], "_static_remainder() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_remainder"]], "_static_round() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_round"]], "_static_sign() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sign"]], "_static_sin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sin"]], "_static_sinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sinh"]], "_static_sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sqrt"]], "_static_square() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_square"]], "_static_subtract() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_subtract"]], "_static_tan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tan"]], "_static_tanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tanh"]], "_static_trapz() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trapz"]], "_static_trunc() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc"]], "_static_trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc_divide"]], "abs() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.abs"]], "acos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acos"]], "acosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acosh"]], "add() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.add"]], "angle() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.angle"]], "asin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asin"]], "asinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asinh"]], "atan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan"]], "atan2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan2"]], "atanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.ceil"]], "cos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cos"]], "cosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.deg2rad"]], "divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.divide"]], "equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.equal"]], "erf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.erf"]], "exp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp"]], "exp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp2"]], "expm1() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.expm1"]], "floor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor"]], "floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.fmin"]], "gcd() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.gcd"]], "greater() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater"]], "greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater_equal"]], "imag() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.imag"]], "isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isfinite"]], "isinf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isinf"]], "isnan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isnan"]], "isreal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isreal"]], "ivy.data_classes.container.elementwise": [[34, "module-ivy.data_classes.container.elementwise"]], "lcm() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.lcm"]], "less() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less"]], "less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less_equal"]], "log() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log"]], "log10() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log10"]], "log1p() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log1p"]], "log2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log2"]], "logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.maximum"]], "minimum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.minimum"]], "multiply() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.negative"]], "not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.not_equal"]], "positive() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.positive"]], "pow() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.pow"]], "rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.rad2deg"]], "real() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.real"]], "reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.remainder"]], "round() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.round"]], "sign() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sign"]], "sin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sin"]], "sinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sinh"]], "sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sqrt"]], "square() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.square"]], "static_angle() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_angle"]], "static_exp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_exp2"]], "static_fmin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_fmin"]], "static_gcd() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_gcd"]], "static_imag() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_imag"]], "static_logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_logaddexp2"]], "static_nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_nan_to_num"]], "static_real() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_real"]], "subtract() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.subtract"]], "tan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tan"]], "tanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tanh"]], "trapz() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trapz"]], "trunc() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[34, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc_divide"]], "_containerwithactivationexperimental (class in ivy.data_classes.container.experimental.activations)": [[35, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental"]], "_containerwithconversionexperimental (class in ivy.data_classes.container.experimental.conversions)": [[35, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental"]], "_containerwithcreationexperimental (class in ivy.data_classes.container.experimental.creation)": [[35, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental"]], "_containerwithdata_typeexperimental (class in ivy.data_classes.container.experimental.data_type)": [[35, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental"]], "_containerwithdeviceexperimental (class in ivy.data_classes.container.experimental.device)": [[35, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental"]], "_containerwithelementwiseexperimental (class in ivy.data_classes.container.experimental.elementwise)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental"]], "_containerwithgeneralexperimental (class in ivy.data_classes.container.experimental.general)": [[35, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental"]], "_containerwithgradientsexperimental (class in ivy.data_classes.container.experimental.gradients)": [[35, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental"]], "_containerwithimageexperimental (class in ivy.data_classes.container.experimental.image)": [[35, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental"]], "_containerwithlayersexperimental (class in ivy.data_classes.container.experimental.layers)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental"]], "_containerwithlinearalgebraexperimental (class in ivy.data_classes.container.experimental.linear_algebra)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental"]], "_containerwithmanipulationexperimental (class in ivy.data_classes.container.experimental.manipulation)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental"]], "_containerwithnormsexperimental (class in ivy.data_classes.container.experimental.norms)": [[35, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental"]], "_containerwithrandomexperimental (class in ivy.data_classes.container.experimental.random)": [[35, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental"]], "_containerwithsearchingexperimental (class in ivy.data_classes.container.experimental.searching)": [[35, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental"]], "_containerwithsetexperimental (class in ivy.data_classes.container.experimental.set)": [[35, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental"]], "_containerwithsortingexperimental (class in ivy.data_classes.container.experimental.sorting)": [[35, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental"]], "_containerwithstatisticalexperimental (class in ivy.data_classes.container.experimental.statistical)": [[35, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental"]], "_containerwithutilityexperimental (class in ivy.data_classes.container.experimental.utility)": [[35, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental attribute)": [[35, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.conversions._containerwithconversionexperimental attribute)": [[35, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental attribute)": [[35, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.data_type._containerwithdata_typeexperimental attribute)": [[35, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.device._containerwithdeviceexperimental attribute)": [[35, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental attribute)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental attribute)": [[35, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.gradients._containerwithgradientsexperimental attribute)": [[35, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.image._containerwithimageexperimental attribute)": [[35, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental attribute)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental attribute)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental attribute)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental attribute)": [[35, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.random._containerwithrandomexperimental attribute)": [[35, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental attribute)": [[35, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.set._containerwithsetexperimental attribute)": [[35, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental attribute)": [[35, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental attribute)": [[35, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental attribute)": [[35, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental._abc_impl"]], "_static_cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[35, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummax"]], "_static_cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[35, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummin"]], "_static_elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[35, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_elu"]], "_static_fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_fft"]], "_static_fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_fill_diagonal"]], "_static_reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental static method)": [[35, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._static_reduce"]], "_static_silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[35, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_silu"]], "_static_trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[35, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._static_trilu"]], "_static_unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_unique_consecutive"]], "adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_max_pool2d"]], "adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.allclose"]], "as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[35, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.batch_norm"]], "bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[35, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[35, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[35, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[35, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.blackman_window"]], "broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.broadcast_shapes"]], "concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[35, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[35, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[35, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[35, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dct"]], "dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[35, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.dirichlet"]], "dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[35, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.elu"]], "embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.embedding"]], "expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[35, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.fft"]], "fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[35, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.gamma"]], "gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[35, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.group_norm"]], "hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[35, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hamming_window"]], "hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[35, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hann_window"]], "heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.heaviside"]], "histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[35, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hstack"]], "hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[35, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[35, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.interpolate"]], "invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[35, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.invert_permutation"]], "isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.isclose"]], "ivy.data_classes.container.experimental": [[35, "module-ivy.data_classes.container.experimental"]], "ivy.data_classes.container.experimental.activations": [[35, "module-ivy.data_classes.container.experimental.activations"]], "ivy.data_classes.container.experimental.conversions": [[35, "module-ivy.data_classes.container.experimental.conversions"]], "ivy.data_classes.container.experimental.creation": [[35, "module-ivy.data_classes.container.experimental.creation"]], "ivy.data_classes.container.experimental.data_type": [[35, "module-ivy.data_classes.container.experimental.data_type"]], "ivy.data_classes.container.experimental.device": [[35, "module-ivy.data_classes.container.experimental.device"]], "ivy.data_classes.container.experimental.elementwise": [[35, "module-ivy.data_classes.container.experimental.elementwise"]], "ivy.data_classes.container.experimental.general": [[35, "module-ivy.data_classes.container.experimental.general"]], "ivy.data_classes.container.experimental.gradients": [[35, "module-ivy.data_classes.container.experimental.gradients"]], "ivy.data_classes.container.experimental.image": [[35, "module-ivy.data_classes.container.experimental.image"]], "ivy.data_classes.container.experimental.layers": [[35, "module-ivy.data_classes.container.experimental.layers"]], "ivy.data_classes.container.experimental.linear_algebra": [[35, "module-ivy.data_classes.container.experimental.linear_algebra"]], "ivy.data_classes.container.experimental.losses": [[35, "module-ivy.data_classes.container.experimental.losses"]], "ivy.data_classes.container.experimental.manipulation": [[35, "module-ivy.data_classes.container.experimental.manipulation"]], "ivy.data_classes.container.experimental.norms": [[35, "module-ivy.data_classes.container.experimental.norms"]], "ivy.data_classes.container.experimental.random": [[35, "module-ivy.data_classes.container.experimental.random"]], "ivy.data_classes.container.experimental.searching": [[35, "module-ivy.data_classes.container.experimental.searching"]], "ivy.data_classes.container.experimental.set": [[35, "module-ivy.data_classes.container.experimental.set"]], "ivy.data_classes.container.experimental.sorting": [[35, "module-ivy.data_classes.container.experimental.sorting"]], "ivy.data_classes.container.experimental.statistical": [[35, "module-ivy.data_classes.container.experimental.statistical"]], "ivy.data_classes.container.experimental.utility": [[35, "module-ivy.data_classes.container.experimental.utility"]], "kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[35, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_bessel_derived_window"]], "kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[35, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_window"]], "kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.kron"]], "l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[35, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[35, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[35, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.lexsort"]], "logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[35, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logit"]], "logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[35, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[35, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool3d"]], "median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[35, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.median"]], "mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[35, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[35, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmedian"]], "nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nextafter"]], "pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[35, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.poisson"]], "prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[35, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.prelu"]], "quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[35, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental method)": [[35, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental.reduce"]], "relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[35, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.relu6"]], "rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.rot90"]], "selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[35, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.selu"]], "signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[35, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.silu"]], "sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sinc"]], "soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.soft_thresholding"]], "static_adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool1d"]], "static_adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool2d"]], "static_adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_max_pool2d"]], "static_adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_adjoint"]], "static_allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_allclose"]], "static_as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_as_strided"]], "static_atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_1d"]], "static_atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_2d"]], "static_atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_3d"]], "static_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool1d"]], "static_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool2d"]], "static_avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool3d"]], "static_batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[35, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_batch_norm"]], "static_bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[35, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_bernoulli"]], "static_beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[35, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_beta"]], "static_binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_binarizer"]], "static_bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[35, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_bincount"]], "static_blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[35, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_blackman_window"]], "static_broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_broadcast_shapes"]], "static_concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_concat_from_sequence"]], "static_cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_cond"]], "static_conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_conj"]], "static_copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_copysign"]], "static_corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[35, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_corrcoef"]], "static_count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_count_nonzero"]], "static_cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[35, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_cov"]], "static_dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dct"]], "static_dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dft"]], "static_diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_diagflat"]], "static_diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_diff"]], "static_digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_digamma"]], "static_dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[35, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_dirichlet"]], "static_dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dsplit"]], "static_dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dstack"]], "static_eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eig"]], "static_eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigh_tridiagonal"]], "static_eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigvals"]], "static_embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_embedding"]], "static_expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_expand"]], "static_eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[35, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_eye_like"]], "static_fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fix"]], "static_flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flatten"]], "static_fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fliplr"]], "static_flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flipud"]], "static_float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_float_power"]], "static_fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmax"]], "static_fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmod"]], "static_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fold"]], "static_frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_frexp"]], "static_gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[35, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_gamma"]], "static_gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_gradient"]], "static_group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[35, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_group_norm"]], "static_hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[35, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hamming_window"]], "static_hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[35, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hann_window"]], "static_heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_heaviside"]], "static_histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[35, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_histogram"]], "static_hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hsplit"]], "static_hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hstack"]], "static_hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_hypot"]], "static_i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_i0"]], "static_idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_idct"]], "static_ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifft"]], "static_ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifftn"]], "static_igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[35, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_igamma"]], "static_initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_initialize_tucker"]], "static_instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[35, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_instance_norm"]], "static_interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_interpolate"]], "static_invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[35, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_invert_permutation"]], "static_isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_isclose"]], "static_kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[35, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_bessel_derived_window"]], "static_kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[35, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_window"]], "static_kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_kron"]], "static_l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[35, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l1_normalize"]], "static_l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[35, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l2_normalize"]], "static_ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_ldexp"]], "static_lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_lerp"]], "static_lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[35, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_lexsort"]], "static_logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[35, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logit"]], "static_logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[35, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logsigmoid"]], "static_lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[35, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_lp_normalize"]], "static_make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_make_svd_non_negative"]], "static_matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_matricize"]], "static_matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_matrix_exp"]], "static_max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool1d"]], "static_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool2d"]], "static_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool3d"]], "static_median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[35, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_median"]], "static_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_mode_dot"]], "static_modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_modf"]], "static_moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_moveaxis"]], "static_multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_dot"]], "static_multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_mode_dot"]], "static_nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[35, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmean"]], "static_nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[35, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmedian"]], "static_nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nansum"]], "static_nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nextafter"]], "static_pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_pad"]], "static_partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_fold"]], "static_partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_tensor_to_vec"]], "static_partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_partial_tucker"]], "static_partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_unfold"]], "static_partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_vec_to_tensor"]], "static_poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[35, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_poisson"]], "static_prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[35, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_prelu"]], "static_quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[35, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_quantile"]], "static_relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[35, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_relu6"]], "static_rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[35, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfftn"]], "static_rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_rot90"]], "static_selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[35, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_selu"]], "static_signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_signbit"]], "static_sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sinc"]], "static_soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_soft_thresholding"]], "static_svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_svd_flip"]], "static_take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_take_along_axis"]], "static_thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[35, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_thresholded_relu"]], "static_top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_top_k"]], "static_tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[35, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_tril_indices"]], "static_truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_truncated_svd"]], "static_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tucker"]], "static_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_unfold"]], "static_unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental static method)": [[35, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.static_unravel_index"]], "static_unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[35, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_min"]], "static_unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[35, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_sum"]], "static_vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[35, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_vorbis_window"]], "static_vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vsplit"]], "static_vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vstack"]], "static_xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_xlogy"]], "static_zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_zeta"]], "svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.svd_flip"]], "take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take_along_axis"]], "thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[35, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.top_k"]], "tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[35, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.tril_indices"]], "trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[35, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.trilu"]], "truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.truncated_svd"]], "tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[35, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tucker"]], "unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental method)": [[35, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.unravel_index"]], "unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[35, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[35, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_sum"]], "vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[35, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.vorbis_window"]], "vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[35, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[35, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.zeta"]], "_containerwithgeneral (class in ivy.data_classes.container.general)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral"]], "_abc_impl (ivy.data_classes.container.general._containerwithgeneral attribute)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral._abc_impl"]], "_static_all_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral._static_all_equal"]], "_static_array_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral._static_array_equal"]], "_static_assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral static method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral._static_assert_supports_inplace"]], "_static_clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_matrix_norm"]], "_static_clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_vector_norm"]], "_static_einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral static method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_rearrange"]], "_static_einops_reduce() (ivy.data_classes.container.general._containerwithgeneral static method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_reduce"]], "_static_einops_repeat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_repeat"]], "_static_fourier_encode() (ivy.data_classes.container.general._containerwithgeneral static method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral._static_fourier_encode"]], "_static_gather() (ivy.data_classes.container.general._containerwithgeneral static method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather"]], "_static_gather_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather_nd"]], "_static_get_num_dims() (ivy.data_classes.container.general._containerwithgeneral static method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral._static_get_num_dims"]], "_static_has_nans() (ivy.data_classes.container.general._containerwithgeneral static method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral._static_has_nans"]], "_static_inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral static method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_decrement"]], "_static_inplace_increment() (ivy.data_classes.container.general._containerwithgeneral static method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_increment"]], "_static_inplace_update() (ivy.data_classes.container.general._containerwithgeneral static method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_update"]], "_static_is_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_array"]], "_static_is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_ivy_array"]], "_static_is_native_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_native_array"]], "_static_scatter_flat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_flat"]], "_static_scatter_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_nd"]], "_static_stable_divide() (ivy.data_classes.container.general._containerwithgeneral static method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_divide"]], "_static_stable_pow() (ivy.data_classes.container.general._containerwithgeneral static method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_pow"]], "_static_supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral static method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral._static_supports_inplace_updates"]], "_static_to_list() (ivy.data_classes.container.general._containerwithgeneral static method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_list"]], "_static_to_numpy() (ivy.data_classes.container.general._containerwithgeneral static method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_numpy"]], "_static_to_scalar() (ivy.data_classes.container.general._containerwithgeneral static method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_scalar"]], "_static_value_is_nan() (ivy.data_classes.container.general._containerwithgeneral static method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral._static_value_is_nan"]], "all_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral.clip_vector_norm"]], "einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.container.general._containerwithgeneral method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.container.general._containerwithgeneral method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral.einops_repeat"]], "fourier_encode() (ivy.data_classes.container.general._containerwithgeneral method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.container.general._containerwithgeneral method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral.gather"]], "gather_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.container.general._containerwithgeneral method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.container.general._containerwithgeneral method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.container.general._containerwithgeneral method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.container.general._containerwithgeneral method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral.is_ivy_array"]], "is_native_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral.is_native_array"]], "isin() (ivy.data_classes.container.general._containerwithgeneral method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral.isin"]], "itemsize() (ivy.data_classes.container.general._containerwithgeneral method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral.itemsize"]], "ivy.data_classes.container.general": [[36, "module-ivy.data_classes.container.general"]], "scatter_flat() (ivy.data_classes.container.general._containerwithgeneral method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.container.general._containerwithgeneral method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.container.general._containerwithgeneral method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral.stable_pow"]], "static_isin() (ivy.data_classes.container.general._containerwithgeneral static method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral.static_isin"]], "static_itemsize() (ivy.data_classes.container.general._containerwithgeneral static method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral.static_itemsize"]], "static_strides() (ivy.data_classes.container.general._containerwithgeneral static method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral.static_strides"]], "strides() (ivy.data_classes.container.general._containerwithgeneral method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral.strides"]], "supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral.supports_inplace_updates"]], "to_list() (ivy.data_classes.container.general._containerwithgeneral method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.container.general._containerwithgeneral method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.container.general._containerwithgeneral method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.container.general._containerwithgeneral method)": [[36, "ivy.data_classes.container.general._ContainerWithGeneral.value_is_nan"]], "_containerwithgradients (class in ivy.data_classes.container.gradients)": [[37, "ivy.data_classes.container.gradients._ContainerWithGradients"]], "_abc_impl (ivy.data_classes.container.gradients._containerwithgradients attribute)": [[37, "ivy.data_classes.container.gradients._ContainerWithGradients._abc_impl"]], "_static_stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients static method)": [[37, "ivy.data_classes.container.gradients._ContainerWithGradients._static_stop_gradient"]], "adam_step() (ivy.data_classes.container.gradients._containerwithgradients method)": [[37, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_step"]], "adam_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[37, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[37, "ivy.data_classes.container.gradients._ContainerWithGradients.gradient_descent_update"]], "ivy.data_classes.container.gradients": [[37, "module-ivy.data_classes.container.gradients"]], "lamb_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[37, "ivy.data_classes.container.gradients._ContainerWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[37, "ivy.data_classes.container.gradients._ContainerWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[37, "ivy.data_classes.container.gradients._ContainerWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients method)": [[37, "ivy.data_classes.container.gradients._ContainerWithGradients.stop_gradient"]], "_containerwithimage (class in ivy.data_classes.container.image)": [[38, "ivy.data_classes.container.image._ContainerWithImage"]], "_abc_impl (ivy.data_classes.container.image._containerwithimage attribute)": [[38, "ivy.data_classes.container.image._ContainerWithImage._abc_impl"]], "ivy.data_classes.container.image": [[38, "module-ivy.data_classes.container.image"]], "_containerwithlayers (class in ivy.data_classes.container.layers)": [[39, "ivy.data_classes.container.layers._ContainerWithLayers"]], "_abc_impl (ivy.data_classes.container.layers._containerwithlayers attribute)": [[39, "ivy.data_classes.container.layers._ContainerWithLayers._abc_impl"]], "_static_conv1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[39, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d"]], "_static_conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[39, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d_transpose"]], "_static_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[39, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d"]], "_static_conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[39, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d_transpose"]], "_static_conv3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[39, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d"]], "_static_conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[39, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d_transpose"]], "_static_depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[39, "ivy.data_classes.container.layers._ContainerWithLayers._static_depthwise_conv2d"]], "_static_dropout() (ivy.data_classes.container.layers._containerwithlayers static method)": [[39, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout"]], "_static_dropout1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[39, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout1d"]], "_static_dropout2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[39, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout2d"]], "_static_dropout3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[39, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout3d"]], "_static_linear() (ivy.data_classes.container.layers._containerwithlayers static method)": [[39, "ivy.data_classes.container.layers._ContainerWithLayers._static_linear"]], "_static_lstm_update() (ivy.data_classes.container.layers._containerwithlayers static method)": [[39, "ivy.data_classes.container.layers._ContainerWithLayers._static_lstm_update"]], "_static_multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[39, "ivy.data_classes.container.layers._ContainerWithLayers._static_multi_head_attention"]], "_static_reduce_window() (ivy.data_classes.container.layers._containerwithlayers static method)": [[39, "ivy.data_classes.container.layers._ContainerWithLayers._static_reduce_window"]], "_static_scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[39, "ivy.data_classes.container.layers._ContainerWithLayers._static_scaled_dot_product_attention"]], "conv1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[39, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[39, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[39, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[39, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[39, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[39, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[39, "ivy.data_classes.container.layers._ContainerWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.container.layers._containerwithlayers method)": [[39, "ivy.data_classes.container.layers._ContainerWithLayers.dropout"]], "dropout1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[39, "ivy.data_classes.container.layers._ContainerWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[39, "ivy.data_classes.container.layers._ContainerWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[39, "ivy.data_classes.container.layers._ContainerWithLayers.dropout3d"]], "ivy.data_classes.container.layers": [[39, "module-ivy.data_classes.container.layers"]], "linear() (ivy.data_classes.container.layers._containerwithlayers method)": [[39, "ivy.data_classes.container.layers._ContainerWithLayers.linear"]], "lstm_update() (ivy.data_classes.container.layers._containerwithlayers method)": [[39, "ivy.data_classes.container.layers._ContainerWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[39, "ivy.data_classes.container.layers._ContainerWithLayers.multi_head_attention"]], "reduce_window() (ivy.data_classes.container.layers._containerwithlayers method)": [[39, "ivy.data_classes.container.layers._ContainerWithLayers.reduce_window"]], "scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[39, "ivy.data_classes.container.layers._ContainerWithLayers.scaled_dot_product_attention"]], "_containerwithlinearalgebra (class in ivy.data_classes.container.linear_algebra)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra attribute)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._abc_impl"]], "_static_cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cholesky"]], "_static_cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cross"]], "_static_det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_det"]], "_static_diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diag"]], "_static_diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diagonal"]], "_static_eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigh"]], "_static_eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigvalsh"]], "_static_inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inner"]], "_static_inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inv"]], "_static_matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matmul"]], "_static_matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_norm"]], "_static_matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_power"]], "_static_matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_rank"]], "_static_matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_transpose"]], "_static_outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_outer"]], "_static_pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_pinv"]], "_static_qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_qr"]], "_static_slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_slogdet"]], "_static_solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_solve"]], "_static_svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svd"]], "_static_svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svdvals"]], "_static_tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensordot"]], "_static_tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensorsolve"]], "_static_trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_trace"]], "_static_vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vander"]], "_static_vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vecdot"]], "_static_vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_norm"]], "_static_vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_to_skew_symmetric_matrix"]], "cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cross"]], "det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.det"]], "diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diagonal"]], "eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inv"]], "ivy.data_classes.container.linear_algebra": [[40, "module-ivy.data_classes.container.linear_algebra"]], "matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[40, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_containerwithlosses (class in ivy.data_classes.container.losses)": [[41, "ivy.data_classes.container.losses._ContainerWithLosses"]], "_abc_impl (ivy.data_classes.container.losses._containerwithlosses attribute)": [[41, "ivy.data_classes.container.losses._ContainerWithLosses._abc_impl"]], "_static_binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[41, "ivy.data_classes.container.losses._ContainerWithLosses._static_binary_cross_entropy"]], "_static_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[41, "ivy.data_classes.container.losses._ContainerWithLosses._static_cross_entropy"]], "_static_sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[41, "ivy.data_classes.container.losses._ContainerWithLosses._static_sparse_cross_entropy"]], "binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[41, "ivy.data_classes.container.losses._ContainerWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[41, "ivy.data_classes.container.losses._ContainerWithLosses.cross_entropy"]], "ivy.data_classes.container.losses": [[41, "module-ivy.data_classes.container.losses"]], "sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[41, "ivy.data_classes.container.losses._ContainerWithLosses.sparse_cross_entropy"]], "_containerwithmanipulation (class in ivy.data_classes.container.manipulation)": [[42, "ivy.data_classes.container.manipulation._ContainerWithManipulation"]], "_abc_impl (ivy.data_classes.container.manipulation._containerwithmanipulation attribute)": [[42, "ivy.data_classes.container.manipulation._ContainerWithManipulation._abc_impl"]], "_static_clip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[42, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_clip"]], "_static_concat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[42, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_concat"]], "_static_constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[42, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_constant_pad"]], "_static_expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[42, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_expand_dims"]], "_static_flip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[42, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_flip"]], "_static_permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[42, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_permute_dims"]], "_static_repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[42, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_repeat"]], "_static_reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[42, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_reshape"]], "_static_roll() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[42, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_roll"]], "_static_split() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[42, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_split"]], "_static_squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[42, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_squeeze"]], "_static_stack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[42, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_stack"]], "_static_swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[42, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_swapaxes"]], "_static_tile() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[42, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_tile"]], "_static_unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[42, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_unstack"]], "_static_zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[42, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_zero_pad"]], "clip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[42, "ivy.data_classes.container.manipulation._ContainerWithManipulation.clip"]], "concat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[42, "ivy.data_classes.container.manipulation._ContainerWithManipulation.concat"]], "constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[42, "ivy.data_classes.container.manipulation._ContainerWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[42, "ivy.data_classes.container.manipulation._ContainerWithManipulation.expand_dims"]], "flip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[42, "ivy.data_classes.container.manipulation._ContainerWithManipulation.flip"]], "ivy.data_classes.container.manipulation": [[42, "module-ivy.data_classes.container.manipulation"]], "permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[42, "ivy.data_classes.container.manipulation._ContainerWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[42, "ivy.data_classes.container.manipulation._ContainerWithManipulation.repeat"]], "reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[42, "ivy.data_classes.container.manipulation._ContainerWithManipulation.reshape"]], "roll() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[42, "ivy.data_classes.container.manipulation._ContainerWithManipulation.roll"]], "split() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[42, "ivy.data_classes.container.manipulation._ContainerWithManipulation.split"]], "squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[42, "ivy.data_classes.container.manipulation._ContainerWithManipulation.squeeze"]], "stack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[42, "ivy.data_classes.container.manipulation._ContainerWithManipulation.stack"]], "swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[42, "ivy.data_classes.container.manipulation._ContainerWithManipulation.swapaxes"]], "tile() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[42, "ivy.data_classes.container.manipulation._ContainerWithManipulation.tile"]], "unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[42, "ivy.data_classes.container.manipulation._ContainerWithManipulation.unstack"]], "zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[42, "ivy.data_classes.container.manipulation._ContainerWithManipulation.zero_pad"]], "_containerwithnorms (class in ivy.data_classes.container.norms)": [[43, "ivy.data_classes.container.norms._ContainerWithNorms"]], "_abc_impl (ivy.data_classes.container.norms._containerwithnorms attribute)": [[43, "ivy.data_classes.container.norms._ContainerWithNorms._abc_impl"]], "ivy.data_classes.container.norms": [[43, "module-ivy.data_classes.container.norms"]], "layer_norm() (ivy.data_classes.container.norms._containerwithnorms method)": [[43, "ivy.data_classes.container.norms._ContainerWithNorms.layer_norm"]], "_containerwithrandom (class in ivy.data_classes.container.random)": [[44, "ivy.data_classes.container.random._ContainerWithRandom"]], "_abc_impl (ivy.data_classes.container.random._containerwithrandom attribute)": [[44, "ivy.data_classes.container.random._ContainerWithRandom._abc_impl"]], "_static_multinomial() (ivy.data_classes.container.random._containerwithrandom static method)": [[44, "ivy.data_classes.container.random._ContainerWithRandom._static_multinomial"]], "_static_randint() (ivy.data_classes.container.random._containerwithrandom static method)": [[44, "ivy.data_classes.container.random._ContainerWithRandom._static_randint"]], "_static_random_normal() (ivy.data_classes.container.random._containerwithrandom static method)": [[44, "ivy.data_classes.container.random._ContainerWithRandom._static_random_normal"]], "_static_random_uniform() (ivy.data_classes.container.random._containerwithrandom static method)": [[44, "ivy.data_classes.container.random._ContainerWithRandom._static_random_uniform"]], "_static_shuffle() (ivy.data_classes.container.random._containerwithrandom static method)": [[44, "ivy.data_classes.container.random._ContainerWithRandom._static_shuffle"]], "ivy.data_classes.container.random": [[44, "module-ivy.data_classes.container.random"]], "multinomial() (ivy.data_classes.container.random._containerwithrandom method)": [[44, "ivy.data_classes.container.random._ContainerWithRandom.multinomial"]], "randint() (ivy.data_classes.container.random._containerwithrandom method)": [[44, "ivy.data_classes.container.random._ContainerWithRandom.randint"]], "random_normal() (ivy.data_classes.container.random._containerwithrandom method)": [[44, "ivy.data_classes.container.random._ContainerWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.container.random._containerwithrandom method)": [[44, "ivy.data_classes.container.random._ContainerWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.container.random._containerwithrandom method)": [[44, "ivy.data_classes.container.random._ContainerWithRandom.shuffle"]], "_containerwithsearching (class in ivy.data_classes.container.searching)": [[45, "ivy.data_classes.container.searching._ContainerWithSearching"]], "_abc_impl (ivy.data_classes.container.searching._containerwithsearching attribute)": [[45, "ivy.data_classes.container.searching._ContainerWithSearching._abc_impl"]], "_static_argmax() (ivy.data_classes.container.searching._containerwithsearching static method)": [[45, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmax"]], "_static_argmin() (ivy.data_classes.container.searching._containerwithsearching static method)": [[45, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmin"]], "_static_argwhere() (ivy.data_classes.container.searching._containerwithsearching static method)": [[45, "ivy.data_classes.container.searching._ContainerWithSearching._static_argwhere"]], "_static_nonzero() (ivy.data_classes.container.searching._containerwithsearching static method)": [[45, "ivy.data_classes.container.searching._ContainerWithSearching._static_nonzero"]], "_static_where() (ivy.data_classes.container.searching._containerwithsearching static method)": [[45, "ivy.data_classes.container.searching._ContainerWithSearching._static_where"]], "argmax() (ivy.data_classes.container.searching._containerwithsearching method)": [[45, "ivy.data_classes.container.searching._ContainerWithSearching.argmax"]], "argmin() (ivy.data_classes.container.searching._containerwithsearching method)": [[45, "ivy.data_classes.container.searching._ContainerWithSearching.argmin"]], "argwhere() (ivy.data_classes.container.searching._containerwithsearching method)": [[45, "ivy.data_classes.container.searching._ContainerWithSearching.argwhere"]], "ivy.data_classes.container.searching": [[45, "module-ivy.data_classes.container.searching"]], "nonzero() (ivy.data_classes.container.searching._containerwithsearching method)": [[45, "ivy.data_classes.container.searching._ContainerWithSearching.nonzero"]], "where() (ivy.data_classes.container.searching._containerwithsearching method)": [[45, "ivy.data_classes.container.searching._ContainerWithSearching.where"]], "_containerwithset (class in ivy.data_classes.container.set)": [[46, "ivy.data_classes.container.set._ContainerWithSet"]], "_abc_impl (ivy.data_classes.container.set._containerwithset attribute)": [[46, "ivy.data_classes.container.set._ContainerWithSet._abc_impl"]], "_static_unique_all() (ivy.data_classes.container.set._containerwithset static method)": [[46, "ivy.data_classes.container.set._ContainerWithSet._static_unique_all"]], "_static_unique_counts() (ivy.data_classes.container.set._containerwithset static method)": [[46, "ivy.data_classes.container.set._ContainerWithSet._static_unique_counts"]], "_static_unique_inverse() (ivy.data_classes.container.set._containerwithset static method)": [[46, "ivy.data_classes.container.set._ContainerWithSet._static_unique_inverse"]], "_static_unique_values() (ivy.data_classes.container.set._containerwithset static method)": [[46, "ivy.data_classes.container.set._ContainerWithSet._static_unique_values"]], "ivy.data_classes.container.set": [[46, "module-ivy.data_classes.container.set"]], "unique_all() (ivy.data_classes.container.set._containerwithset method)": [[46, "ivy.data_classes.container.set._ContainerWithSet.unique_all"]], "unique_counts() (ivy.data_classes.container.set._containerwithset method)": [[46, "ivy.data_classes.container.set._ContainerWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.container.set._containerwithset method)": [[46, "ivy.data_classes.container.set._ContainerWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.container.set._containerwithset method)": [[46, "ivy.data_classes.container.set._ContainerWithSet.unique_values"]], "_containerwithsorting (class in ivy.data_classes.container.sorting)": [[47, "ivy.data_classes.container.sorting._ContainerWithSorting"]], "_abc_impl (ivy.data_classes.container.sorting._containerwithsorting attribute)": [[47, "ivy.data_classes.container.sorting._ContainerWithSorting._abc_impl"]], "_static_argsort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[47, "ivy.data_classes.container.sorting._ContainerWithSorting._static_argsort"]], "_static_searchsorted() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[47, "ivy.data_classes.container.sorting._ContainerWithSorting._static_searchsorted"]], "_static_sort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[47, "ivy.data_classes.container.sorting._ContainerWithSorting._static_sort"]], "argsort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[47, "ivy.data_classes.container.sorting._ContainerWithSorting.argsort"]], "ivy.data_classes.container.sorting": [[47, "module-ivy.data_classes.container.sorting"]], "msort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[47, "ivy.data_classes.container.sorting._ContainerWithSorting.msort"]], "searchsorted() (ivy.data_classes.container.sorting._containerwithsorting method)": [[47, "ivy.data_classes.container.sorting._ContainerWithSorting.searchsorted"]], "sort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[47, "ivy.data_classes.container.sorting._ContainerWithSorting.sort"]], "static_msort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[47, "ivy.data_classes.container.sorting._ContainerWithSorting.static_msort"]], "_containerwithstatistical (class in ivy.data_classes.container.statistical)": [[48, "ivy.data_classes.container.statistical._ContainerWithStatistical"]], "_abc_impl (ivy.data_classes.container.statistical._containerwithstatistical attribute)": [[48, "ivy.data_classes.container.statistical._ContainerWithStatistical._abc_impl"]], "_static_cumprod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[48, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumprod"]], "_static_cumsum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[48, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumsum"]], "_static_prod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[48, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_prod"]], "_static_sum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[48, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_sum"]], "_static_var() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[48, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_var"]], "cumprod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[48, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[48, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumsum"]], "einsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[48, "ivy.data_classes.container.statistical._ContainerWithStatistical.einsum"]], "ivy.data_classes.container.statistical": [[48, "module-ivy.data_classes.container.statistical"]], "max() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[48, "ivy.data_classes.container.statistical._ContainerWithStatistical.max"]], "mean() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[48, "ivy.data_classes.container.statistical._ContainerWithStatistical.mean"]], "min() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[48, "ivy.data_classes.container.statistical._ContainerWithStatistical.min"]], "prod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[48, "ivy.data_classes.container.statistical._ContainerWithStatistical.prod"]], "std() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[48, "ivy.data_classes.container.statistical._ContainerWithStatistical.std"]], "sum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[48, "ivy.data_classes.container.statistical._ContainerWithStatistical.sum"]], "var() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[48, "ivy.data_classes.container.statistical._ContainerWithStatistical.var"]], "_containerwithutility (class in ivy.data_classes.container.utility)": [[49, "ivy.data_classes.container.utility._ContainerWithUtility"]], "_abc_impl (ivy.data_classes.container.utility._containerwithutility attribute)": [[49, "ivy.data_classes.container.utility._ContainerWithUtility._abc_impl"]], "_static_all() (ivy.data_classes.container.utility._containerwithutility static method)": [[49, "ivy.data_classes.container.utility._ContainerWithUtility._static_all"]], "_static_any() (ivy.data_classes.container.utility._containerwithutility static method)": [[49, "ivy.data_classes.container.utility._ContainerWithUtility._static_any"]], "all() (ivy.data_classes.container.utility._containerwithutility method)": [[49, "ivy.data_classes.container.utility._ContainerWithUtility.all"]], "any() (ivy.data_classes.container.utility._containerwithutility method)": [[49, "ivy.data_classes.container.utility._ContainerWithUtility.any"]], "ivy.data_classes.container.utility": [[49, "module-ivy.data_classes.container.utility"]], "_wrap_function() (in module ivy.data_classes.container.wrapping)": [[50, "ivy.data_classes.container.wrapping._wrap_function"]], "add_ivy_container_instance_methods() (in module ivy.data_classes.container.wrapping)": [[50, "ivy.data_classes.container.wrapping.add_ivy_container_instance_methods"]], "ivy.data_classes.container.wrapping": [[50, "module-ivy.data_classes.container.wrapping"]], "array (class in ivy.data_classes.array.array)": [[52, "ivy.data_classes.array.array.Array"]], "t (ivy.data_classes.array.array.array property)": [[52, "ivy.data_classes.array.array.Array.T"]], "__abs__() (ivy.data_classes.array.array.array method)": [[52, "ivy.data_classes.array.array.Array.__abs__"]], "__add__() (ivy.data_classes.array.array.array method)": [[52, "ivy.data_classes.array.array.Array.__add__"]], "__eq__() (ivy.data_classes.array.array.array method)": [[52, "ivy.data_classes.array.array.Array.__eq__"]], "__ge__() (ivy.data_classes.array.array.array method)": [[52, "ivy.data_classes.array.array.Array.__ge__"]], "__gt__() (ivy.data_classes.array.array.array method)": [[52, "ivy.data_classes.array.array.Array.__gt__"]], "__init__() (ivy.data_classes.array.array.array method)": [[52, "ivy.data_classes.array.array.Array.__init__"]], "__le__() (ivy.data_classes.array.array.array method)": [[52, "ivy.data_classes.array.array.Array.__le__"]], "__lt__() (ivy.data_classes.array.array.array method)": [[52, "ivy.data_classes.array.array.Array.__lt__"]], "__ne__() (ivy.data_classes.array.array.array method)": [[52, "ivy.data_classes.array.array.Array.__ne__"]], "__pow__() (ivy.data_classes.array.array.array method)": [[52, "ivy.data_classes.array.array.Array.__pow__"]], "__radd__() (ivy.data_classes.array.array.array method)": [[52, "ivy.data_classes.array.array.Array.__radd__"]], "__rrshift__() (ivy.data_classes.array.array.array method)": [[52, "ivy.data_classes.array.array.Array.__rrshift__"]], "__rshift__() (ivy.data_classes.array.array.array method)": [[52, "ivy.data_classes.array.array.Array.__rshift__"]], "__rsub__() (ivy.data_classes.array.array.array method)": [[52, "ivy.data_classes.array.array.Array.__rsub__"]], "__sub__() (ivy.data_classes.array.array.array method)": [[52, "ivy.data_classes.array.array.Array.__sub__"]], "__truediv__() (ivy.data_classes.array.array.array method)": [[52, "ivy.data_classes.array.array.Array.__truediv__"]], "__xor__() (ivy.data_classes.array.array.array method)": [[52, "ivy.data_classes.array.array.Array.__xor__"]], "backend (ivy.data_classes.array.array.array property)": [[52, "ivy.data_classes.array.array.Array.backend"]], "base (ivy.data_classes.array.array.array property)": [[52, "ivy.data_classes.array.array.Array.base"]], "data (ivy.data_classes.array.array.array property)": [[52, "ivy.data_classes.array.array.Array.data"]], "device (ivy.data_classes.array.array.array property)": [[52, "ivy.data_classes.array.array.Array.device"]], "dtype (ivy.data_classes.array.array.array property)": [[52, "ivy.data_classes.array.array.Array.dtype"]], "dynamic_backend (ivy.data_classes.array.array.array property)": [[52, "ivy.data_classes.array.array.Array.dynamic_backend"]], "imag (ivy.data_classes.array.array.array property)": [[52, "ivy.data_classes.array.array.Array.imag"]], "itemsize (ivy.data_classes.array.array.array property)": [[52, "ivy.data_classes.array.array.Array.itemsize"]], "ivy.data_classes.array.array": [[52, "module-ivy.data_classes.array.array"]], "mt (ivy.data_classes.array.array.array property)": [[52, "ivy.data_classes.array.array.Array.mT"]], "ndim (ivy.data_classes.array.array.array property)": [[52, "ivy.data_classes.array.array.Array.ndim"]], "real (ivy.data_classes.array.array.array property)": [[52, "ivy.data_classes.array.array.Array.real"]], "shape (ivy.data_classes.array.array.array property)": [[52, "ivy.data_classes.array.array.Array.shape"]], "size (ivy.data_classes.array.array.array property)": [[52, "ivy.data_classes.array.array.Array.size"]], "strides (ivy.data_classes.array.array.array property)": [[52, "ivy.data_classes.array.array.Array.strides"]], "container (class in ivy.data_classes.container.container)": [[53, "ivy.data_classes.container.container.Container"]], "__abs__() (ivy.data_classes.container.container.container method)": [[53, "ivy.data_classes.container.container.Container.__abs__"]], "__add__() (ivy.data_classes.container.container.container method)": [[53, "ivy.data_classes.container.container.Container.__add__"]], "__eq__() (ivy.data_classes.container.container.container method)": [[53, "ivy.data_classes.container.container.Container.__eq__"]], "__ge__() (ivy.data_classes.container.container.container method)": [[53, "ivy.data_classes.container.container.Container.__ge__"]], "__gt__() (ivy.data_classes.container.container.container method)": [[53, "ivy.data_classes.container.container.Container.__gt__"]], "__init__() (ivy.data_classes.container.container.container method)": [[53, "ivy.data_classes.container.container.Container.__init__"]], "__le__() (ivy.data_classes.container.container.container method)": [[53, "ivy.data_classes.container.container.Container.__le__"]], "__lt__() (ivy.data_classes.container.container.container method)": [[53, "ivy.data_classes.container.container.Container.__lt__"]], "__ne__() (ivy.data_classes.container.container.container method)": [[53, "ivy.data_classes.container.container.Container.__ne__"]], "__pow__() (ivy.data_classes.container.container.container method)": [[53, "ivy.data_classes.container.container.Container.__pow__"]], "__radd__() (ivy.data_classes.container.container.container method)": [[53, "ivy.data_classes.container.container.Container.__radd__"]], "__rrshift__() (ivy.data_classes.container.container.container method)": [[53, "ivy.data_classes.container.container.Container.__rrshift__"]], "__rshift__() (ivy.data_classes.container.container.container method)": [[53, "ivy.data_classes.container.container.Container.__rshift__"]], "__rsub__() (ivy.data_classes.container.container.container method)": [[53, "ivy.data_classes.container.container.Container.__rsub__"]], "__sub__() (ivy.data_classes.container.container.container method)": [[53, "ivy.data_classes.container.container.Container.__sub__"]], "__truediv__() (ivy.data_classes.container.container.container method)": [[53, "ivy.data_classes.container.container.Container.__truediv__"]], "__xor__() (ivy.data_classes.container.container.container method)": [[53, "ivy.data_classes.container.container.Container.__xor__"]], "ivy.data_classes.container.container": [[53, "module-ivy.data_classes.container.container"]], "nestedarray (class in ivy.data_classes.nested_array.nested_array)": [[54, "ivy.data_classes.nested_array.nested_array.NestedArray"]], "__init__() (ivy.data_classes.nested_array.nested_array.nestedarray method)": [[54, "ivy.data_classes.nested_array.nested_array.NestedArray.__init__"]], "from_row_lengths() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[54, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_lengths"]], "from_row_splits() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[54, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_splits"]], "ivy.data_classes.nested_array.nested_array": [[54, "module-ivy.data_classes.nested_array.nested_array"]], "nestedarraybase (class in ivy.data_classes.nested_array.base)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase"]], "__init__() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.__init__"]], "_abc_impl (ivy.data_classes.nested_array.base.nestedarraybase attribute)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase._abc_impl"]], "broadcast_shapes() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.broadcast_shapes"]], "data (ivy.data_classes.nested_array.base.nestedarraybase property)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.data"]], "device (ivy.data_classes.nested_array.base.nestedarraybase property)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.device"]], "dtype (ivy.data_classes.nested_array.base.nestedarraybase property)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.dtype"]], "inner_shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.inner_shape"]], "ivy.data_classes.nested_array.base": [[55, "module-ivy.data_classes.nested_array.base"]], "ndim (ivy.data_classes.nested_array.base.nestedarraybase property)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.ndim"]], "nested_array() (ivy.data_classes.nested_array.base.nestedarraybase class method)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_array"]], "nested_rank (ivy.data_classes.nested_array.base.nestedarraybase property)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_rank"]], "ragged_map() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_map"]], "ragged_multi_map() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map"]], "ragged_multi_map_in_function() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map_in_function"]], "replace_ivy_arrays() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.replace_ivy_arrays"]], "shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.shape"]], "unbind() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.unbind"]], "nestedarrayelementwise (class in ivy.data_classes.nested_array.elementwise)": [[56, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise"]], "_abc_impl (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise attribute)": [[56, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise._abc_impl"]], "ivy.data_classes.nested_array.elementwise": [[56, "module-ivy.data_classes.nested_array.elementwise"]], "static_add() (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise static method)": [[56, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise.static_add"]], "gelu() (in module ivy)": [[59, "ivy.gelu"], [526, "ivy.gelu"]], "gelu() (ivy.array method)": [[59, "ivy.Array.gelu"]], "gelu() (ivy.container method)": [[59, "ivy.Container.gelu"]], "hardswish() (in module ivy)": [[60, "ivy.hardswish"], [526, "ivy.hardswish"]], "hardswish() (ivy.array method)": [[60, "ivy.Array.hardswish"]], "hardswish() (ivy.container method)": [[60, "ivy.Container.hardswish"]], "leaky_relu() (in module ivy)": [[61, "ivy.leaky_relu"], [526, "ivy.leaky_relu"]], "leaky_relu() (ivy.array method)": [[61, "ivy.Array.leaky_relu"]], "leaky_relu() (ivy.container method)": [[61, "ivy.Container.leaky_relu"]], "log_softmax() (in module ivy)": [[62, "ivy.log_softmax"], [526, "ivy.log_softmax"]], "log_softmax() (ivy.array method)": [[62, "ivy.Array.log_softmax"]], "log_softmax() (ivy.container method)": [[62, "ivy.Container.log_softmax"]], "mish() (in module ivy)": [[63, "ivy.mish"], [526, "ivy.mish"]], "mish() (ivy.array method)": [[63, "ivy.Array.mish"]], "mish() (ivy.container method)": [[63, "ivy.Container.mish"]], "relu() (in module ivy)": [[64, "ivy.relu"], [526, "ivy.relu"]], "relu() (ivy.array method)": [[64, "ivy.Array.relu"]], "relu() (ivy.container method)": [[64, "ivy.Container.relu"]], "sigmoid() (in module ivy)": [[65, "ivy.sigmoid"], [526, "ivy.sigmoid"]], "sigmoid() (ivy.array method)": [[65, "ivy.Array.sigmoid"]], "sigmoid() (ivy.container method)": [[65, "ivy.Container.sigmoid"]], "softmax() (in module ivy)": [[66, "ivy.softmax"], [526, "ivy.softmax"]], "softmax() (ivy.array method)": [[66, "ivy.Array.softmax"]], "softmax() (ivy.container method)": [[66, "ivy.Container.softmax"]], "softplus() (in module ivy)": [[67, "ivy.softplus"], [526, "ivy.softplus"]], "softplus() (ivy.array method)": [[67, "ivy.Array.softplus"]], "softplus() (ivy.container method)": [[67, "ivy.Container.softplus"]], "cast_bool() (in module ivy)": [[68, "ivy.cast_bool"], [528, "ivy.cast_bool"]], "cmp_is() (in module ivy)": [[69, "ivy.cmp_is"], [528, "ivy.cmp_is"]], "cmp_isnot() (in module ivy)": [[70, "ivy.cmp_isnot"], [528, "ivy.cmp_isnot"]], "for_loop() (in module ivy)": [[71, "ivy.for_loop"], [528, "ivy.for_loop"]], "if_else() (in module ivy)": [[72, "ivy.if_else"], [528, "ivy.if_else"]], "try_except() (in module ivy)": [[73, "ivy.try_except"], [528, "ivy.try_except"]], "while_loop() (in module ivy)": [[74, "ivy.while_loop"], [528, "ivy.while_loop"]], "arange() (in module ivy)": [[75, "ivy.arange"], [529, "ivy.arange"]], "array() (in module ivy)": [[76, "ivy.array"], [529, "ivy.array"]], "asarray() (in module ivy)": [[77, "ivy.asarray"], [529, "ivy.asarray"]], "asarray() (ivy.array method)": [[77, "ivy.Array.asarray"]], "asarray() (ivy.container method)": [[77, "ivy.Container.asarray"]], "asarray_handle_nestable() (in module ivy)": [[78, "ivy.asarray_handle_nestable"], [529, "ivy.asarray_handle_nestable"]], "asarray_infer_device() (in module ivy)": [[79, "ivy.asarray_infer_device"], [529, "ivy.asarray_infer_device"]], "asarray_infer_dtype() (in module ivy)": [[80, "ivy.asarray_infer_dtype"], [529, "ivy.asarray_infer_dtype"]], "asarray_inputs_to_native_shapes() (in module ivy)": [[81, "ivy.asarray_inputs_to_native_shapes"], [529, "ivy.asarray_inputs_to_native_shapes"]], "asarray_to_native_arrays_and_back() (in module ivy)": [[82, "ivy.asarray_to_native_arrays_and_back"], [529, "ivy.asarray_to_native_arrays_and_back"]], "copy_array() (in module ivy)": [[83, "ivy.copy_array"], [529, "ivy.copy_array"]], "copy_array() (ivy.array method)": [[83, "ivy.Array.copy_array"]], "copy_array() (ivy.container method)": [[83, "ivy.Container.copy_array"]], "empty() (in module ivy)": [[84, "ivy.empty"], [529, "ivy.empty"]], "empty_like() (in module ivy)": [[85, "ivy.empty_like"], [529, "ivy.empty_like"]], "empty_like() (ivy.array method)": [[85, "ivy.Array.empty_like"]], "empty_like() (ivy.container method)": [[85, "ivy.Container.empty_like"]], "eye() (in module ivy)": [[86, "ivy.eye"], [529, "ivy.eye"]], "from_dlpack() (in module ivy)": [[87, "ivy.from_dlpack"], [529, "ivy.from_dlpack"]], "from_dlpack() (ivy.array method)": [[87, "ivy.Array.from_dlpack"]], "from_dlpack() (ivy.container method)": [[87, "ivy.Container.from_dlpack"]], "frombuffer() (in module ivy)": [[88, "ivy.frombuffer"], [529, "ivy.frombuffer"]], "frombuffer() (ivy.container method)": [[88, "ivy.Container.frombuffer"]], "full() (in module ivy)": [[89, "ivy.full"], [529, "ivy.full"]], "full_like() (in module ivy)": [[90, "ivy.full_like"], [529, "ivy.full_like"]], "full_like() (ivy.array method)": [[90, "ivy.Array.full_like"]], "full_like() (ivy.container method)": [[90, "ivy.Container.full_like"]], "linspace() (in module ivy)": [[91, "ivy.linspace"], [529, "ivy.linspace"]], "linspace() (ivy.array method)": [[91, "ivy.Array.linspace"]], "linspace() (ivy.container method)": [[91, "ivy.Container.linspace"]], "logspace() (in module ivy)": [[92, "ivy.logspace"], [529, "ivy.logspace"]], "logspace() (ivy.array method)": [[92, "ivy.Array.logspace"]], "logspace() (ivy.container method)": [[92, "ivy.Container.logspace"]], "meshgrid() (in module ivy)": [[93, "ivy.meshgrid"], [529, "ivy.meshgrid"]], "meshgrid() (ivy.array method)": [[93, "ivy.Array.meshgrid"]], "meshgrid() (ivy.container method)": [[93, "ivy.Container.meshgrid"]], "native_array() (in module ivy)": [[94, "ivy.native_array"], [529, "ivy.native_array"]], "native_array() (ivy.array method)": [[94, "ivy.Array.native_array"]], "native_array() (ivy.container method)": [[94, "ivy.Container.native_array"]], "one_hot() (in module ivy)": [[95, "ivy.one_hot"], [529, "ivy.one_hot"]], "one_hot() (ivy.array method)": [[95, "ivy.Array.one_hot"]], "one_hot() (ivy.container method)": [[95, "ivy.Container.one_hot"]], "ones() (in module ivy)": [[96, "ivy.ones"], [529, "ivy.ones"]], "ones_like() (in module ivy)": [[97, "ivy.ones_like"], [529, "ivy.ones_like"]], "ones_like() (ivy.array method)": [[97, "ivy.Array.ones_like"]], "ones_like() (ivy.container method)": [[97, "ivy.Container.ones_like"]], "tril() (in module ivy)": [[98, "ivy.tril"], [529, "ivy.tril"]], "tril() (ivy.array method)": [[98, "ivy.Array.tril"]], "tril() (ivy.container method)": [[98, "ivy.Container.tril"]], "triu() (in module ivy)": [[99, "ivy.triu"], [529, "ivy.triu"]], "triu() (ivy.array method)": [[99, "ivy.Array.triu"]], "triu() (ivy.container method)": [[99, "ivy.Container.triu"]], "triu_indices() (in module ivy)": [[100, "ivy.triu_indices"], [529, "ivy.triu_indices"]], "triu_indices() (ivy.container method)": [[100, "ivy.Container.triu_indices"]], "zeros() (in module ivy)": [[101, "ivy.zeros"], [529, "ivy.zeros"]], "zeros_like() (in module ivy)": [[102, "ivy.zeros_like"], [529, "ivy.zeros_like"]], "zeros_like() (ivy.array method)": [[102, "ivy.Array.zeros_like"]], "zeros_like() (ivy.container method)": [[102, "ivy.Container.zeros_like"]], "as_ivy_dtype() (in module ivy)": [[103, "ivy.as_ivy_dtype"], [530, "ivy.as_ivy_dtype"]], "as_native_dtype() (in module ivy)": [[104, "ivy.as_native_dtype"], [530, "ivy.as_native_dtype"]], "astype() (in module ivy)": [[105, "ivy.astype"], [530, "ivy.astype"]], "astype() (ivy.array method)": [[105, "ivy.Array.astype"]], "astype() (ivy.container method)": [[105, "ivy.Container.astype"]], "broadcast_arrays() (in module ivy)": [[106, "ivy.broadcast_arrays"], [530, "ivy.broadcast_arrays"]], "broadcast_arrays() (ivy.array method)": [[106, "ivy.Array.broadcast_arrays"]], "broadcast_arrays() (ivy.container method)": [[106, "ivy.Container.broadcast_arrays"]], "broadcast_to() (in module ivy)": [[107, "ivy.broadcast_to"], [530, "ivy.broadcast_to"]], "broadcast_to() (ivy.array method)": [[107, "ivy.Array.broadcast_to"]], "broadcast_to() (ivy.container method)": [[107, "ivy.Container.broadcast_to"]], "can_cast() (in module ivy)": [[108, "ivy.can_cast"], [530, "ivy.can_cast"]], "can_cast() (ivy.array method)": [[108, "ivy.Array.can_cast"]], "can_cast() (ivy.container method)": [[108, "ivy.Container.can_cast"]], "check_float() (in module ivy)": [[109, "ivy.check_float"], [530, "ivy.check_float"]], "closest_valid_dtype() (in module ivy)": [[110, "ivy.closest_valid_dtype"], [530, "ivy.closest_valid_dtype"]], "default_complex_dtype() (in module ivy)": [[111, "ivy.default_complex_dtype"], [530, "ivy.default_complex_dtype"]], "default_dtype() (in module ivy)": [[112, "ivy.default_dtype"], [530, "ivy.default_dtype"]], "default_float_dtype() (in module ivy)": [[113, "ivy.default_float_dtype"], [530, "ivy.default_float_dtype"]], "default_int_dtype() (in module ivy)": [[114, "ivy.default_int_dtype"], [530, "ivy.default_int_dtype"]], "default_uint_dtype() (in module ivy)": [[115, "ivy.default_uint_dtype"], [530, "ivy.default_uint_dtype"]], "dtype() (in module ivy)": [[116, "ivy.dtype"], [530, "ivy.dtype"]], "dtype() (ivy.array method)": [[116, "ivy.Array.dtype"]], "dtype() (ivy.container method)": [[116, "ivy.Container.dtype"]], "dtype_bits() (in module ivy)": [[117, "ivy.dtype_bits"], [530, "ivy.dtype_bits"]], "finfo() (in module ivy)": [[118, "ivy.finfo"], [530, "ivy.finfo"]], "finfo() (ivy.array method)": [[118, "ivy.Array.finfo"]], "finfo() (ivy.container method)": [[118, "ivy.Container.finfo"]], "function_supported_dtypes() (in module ivy)": [[119, "ivy.function_supported_dtypes"], [530, "ivy.function_supported_dtypes"]], "function_unsupported_dtypes() (in module ivy)": [[120, "ivy.function_unsupported_dtypes"], [530, "ivy.function_unsupported_dtypes"]], "iinfo() (in module ivy)": [[121, "ivy.iinfo"], [530, "ivy.iinfo"]], "iinfo() (ivy.array method)": [[121, "ivy.Array.iinfo"]], "iinfo() (ivy.container method)": [[121, "ivy.Container.iinfo"]], "infer_default_dtype() (in module ivy)": [[122, "ivy.infer_default_dtype"], [530, "ivy.infer_default_dtype"]], "invalid_dtype() (in module ivy)": [[123, "ivy.invalid_dtype"], [530, "ivy.invalid_dtype"]], "is_bool_dtype() (in module ivy)": [[124, "ivy.is_bool_dtype"], [530, "ivy.is_bool_dtype"]], "is_bool_dtype() (ivy.array method)": [[124, "ivy.Array.is_bool_dtype"]], "is_bool_dtype() (ivy.container method)": [[124, "ivy.Container.is_bool_dtype"]], "is_complex_dtype() (in module ivy)": [[125, "ivy.is_complex_dtype"], [530, "ivy.is_complex_dtype"]], "is_complex_dtype() (ivy.container method)": [[125, "ivy.Container.is_complex_dtype"]], "is_float_dtype() (in module ivy)": [[126, "ivy.is_float_dtype"], [530, "ivy.is_float_dtype"]], "is_float_dtype() (ivy.array method)": [[126, "ivy.Array.is_float_dtype"]], "is_float_dtype() (ivy.container method)": [[126, "ivy.Container.is_float_dtype"]], "is_hashable_dtype() (in module ivy)": [[127, "ivy.is_hashable_dtype"], [530, "ivy.is_hashable_dtype"]], "is_int_dtype() (in module ivy)": [[128, "ivy.is_int_dtype"], [530, "ivy.is_int_dtype"]], "is_int_dtype() (ivy.array method)": [[128, "ivy.Array.is_int_dtype"]], "is_int_dtype() (ivy.container method)": [[128, "ivy.Container.is_int_dtype"]], "is_native_dtype() (in module ivy)": [[129, "ivy.is_native_dtype"], [530, "ivy.is_native_dtype"]], "is_uint_dtype() (in module ivy)": [[130, "ivy.is_uint_dtype"], [530, "ivy.is_uint_dtype"]], "is_uint_dtype() (ivy.array method)": [[130, "ivy.Array.is_uint_dtype"]], "is_uint_dtype() (ivy.container method)": [[130, "ivy.Container.is_uint_dtype"]], "promote_types() (in module ivy)": [[131, "ivy.promote_types"], [530, "ivy.promote_types"]], "promote_types_of_inputs() (in module ivy)": [[132, "ivy.promote_types_of_inputs"], [530, "ivy.promote_types_of_inputs"]], "result_type() (in module ivy)": [[133, "ivy.result_type"], [530, "ivy.result_type"]], "result_type() (ivy.array method)": [[133, "ivy.Array.result_type"]], "result_type() (ivy.container method)": [[133, "ivy.Container.result_type"]], "set_default_complex_dtype() (in module ivy)": [[134, "ivy.set_default_complex_dtype"], [530, "ivy.set_default_complex_dtype"]], "set_default_dtype() (in module ivy)": [[135, "ivy.set_default_dtype"], [530, "ivy.set_default_dtype"]], "set_default_float_dtype() (in module ivy)": [[136, "ivy.set_default_float_dtype"], [530, "ivy.set_default_float_dtype"]], "set_default_int_dtype() (in module ivy)": [[137, "ivy.set_default_int_dtype"], [530, "ivy.set_default_int_dtype"]], "set_default_uint_dtype() (in module ivy)": [[138, "ivy.set_default_uint_dtype"], [530, "ivy.set_default_uint_dtype"]], "type_promote_arrays() (in module ivy)": [[139, "ivy.type_promote_arrays"], [530, "ivy.type_promote_arrays"]], "unset_default_complex_dtype() (in module ivy)": [[140, "ivy.unset_default_complex_dtype"], [530, "ivy.unset_default_complex_dtype"]], "unset_default_dtype() (in module ivy)": [[141, "ivy.unset_default_dtype"], [530, "ivy.unset_default_dtype"]], "unset_default_float_dtype() (in module ivy)": [[142, "ivy.unset_default_float_dtype"], [530, "ivy.unset_default_float_dtype"]], "unset_default_int_dtype() (in module ivy)": [[143, "ivy.unset_default_int_dtype"], [530, "ivy.unset_default_int_dtype"]], "unset_default_uint_dtype() (in module ivy)": [[144, "ivy.unset_default_uint_dtype"], [530, "ivy.unset_default_uint_dtype"]], "valid_dtype() (in module ivy)": [[145, "ivy.valid_dtype"], [530, "ivy.valid_dtype"]], "as_ivy_dev() (in module ivy)": [[146, "ivy.as_ivy_dev"], [531, "ivy.as_ivy_dev"]], "as_native_dev() (in module ivy)": [[147, "ivy.as_native_dev"], [531, "ivy.as_native_dev"]], "clear_cached_mem_on_dev() (in module ivy)": [[148, "ivy.clear_cached_mem_on_dev"], [531, "ivy.clear_cached_mem_on_dev"]], "default_device() (in module ivy)": [[149, "ivy.default_device"], [531, "ivy.default_device"]], "dev() (in module ivy)": [[150, "ivy.dev"], [531, "ivy.dev"]], "dev() (ivy.array method)": [[150, "ivy.Array.dev"]], "dev() (ivy.container method)": [[150, "ivy.Container.dev"]], "dev_util() (in module ivy)": [[151, "ivy.dev_util"], [531, "ivy.dev_util"]], "function_supported_devices() (in module ivy)": [[152, "ivy.function_supported_devices"], [531, "ivy.function_supported_devices"]], "function_unsupported_devices() (in module ivy)": [[153, "ivy.function_unsupported_devices"], [531, "ivy.function_unsupported_devices"]], "get_all_ivy_arrays_on_dev() (in module ivy)": [[154, "ivy.get_all_ivy_arrays_on_dev"], [531, "ivy.get_all_ivy_arrays_on_dev"]], "gpu_is_available() (in module ivy)": [[155, "ivy.gpu_is_available"], [531, "ivy.gpu_is_available"]], "handle_soft_device_variable() (in module ivy)": [[156, "ivy.handle_soft_device_variable"], [531, "ivy.handle_soft_device_variable"]], "num_cpu_cores() (in module ivy)": [[157, "ivy.num_cpu_cores"], [531, "ivy.num_cpu_cores"]], "num_gpus() (in module ivy)": [[158, "ivy.num_gpus"], [531, "ivy.num_gpus"]], "num_ivy_arrays_on_dev() (in module ivy)": [[159, "ivy.num_ivy_arrays_on_dev"], [531, "ivy.num_ivy_arrays_on_dev"]], "percent_used_mem_on_dev() (in module ivy)": [[160, "ivy.percent_used_mem_on_dev"], [531, "ivy.percent_used_mem_on_dev"]], "print_all_ivy_arrays_on_dev() (in module ivy)": [[161, "ivy.print_all_ivy_arrays_on_dev"], [531, "ivy.print_all_ivy_arrays_on_dev"]], "set_default_device() (in module ivy)": [[162, "ivy.set_default_device"], [531, "ivy.set_default_device"]], "set_soft_device_mode() (in module ivy)": [[163, "ivy.set_soft_device_mode"], [531, "ivy.set_soft_device_mode"]], "set_split_factor() (in module ivy)": [[164, "ivy.set_split_factor"], [531, "ivy.set_split_factor"]], "split_factor() (in module ivy)": [[165, "ivy.split_factor"], [531, "ivy.split_factor"]], "split_func_call() (in module ivy)": [[166, "ivy.split_func_call"], [531, "ivy.split_func_call"]], "to_device() (in module ivy)": [[167, "ivy.to_device"], [531, "ivy.to_device"]], "to_device() (ivy.array method)": [[167, "ivy.Array.to_device"]], "to_device() (ivy.container method)": [[167, "ivy.Container.to_device"]], "total_mem_on_dev() (in module ivy)": [[168, "ivy.total_mem_on_dev"], [531, "ivy.total_mem_on_dev"]], "tpu_is_available() (in module ivy)": [[169, "ivy.tpu_is_available"], [531, "ivy.tpu_is_available"]], "unset_default_device() (in module ivy)": [[170, "ivy.unset_default_device"], [531, "ivy.unset_default_device"]], "unset_soft_device_mode() (in module ivy)": [[171, "ivy.unset_soft_device_mode"], [531, "ivy.unset_soft_device_mode"]], "used_mem_on_dev() (in module ivy)": [[172, "ivy.used_mem_on_dev"], [531, "ivy.used_mem_on_dev"]], "abs() (in module ivy)": [[173, "ivy.abs"], [532, "ivy.abs"]], "abs() (ivy.array method)": [[173, "ivy.Array.abs"]], "abs() (ivy.container method)": [[173, "ivy.Container.abs"]], "acos() (in module ivy)": [[174, "ivy.acos"], [532, "ivy.acos"]], "acos() (ivy.array method)": [[174, "ivy.Array.acos"]], "acos() (ivy.container method)": [[174, "ivy.Container.acos"]], "acosh() (in module ivy)": [[175, "ivy.acosh"], [532, "ivy.acosh"]], "acosh() (ivy.array method)": [[175, "ivy.Array.acosh"]], "acosh() (ivy.container method)": [[175, "ivy.Container.acosh"]], "add() (in module ivy)": [[176, "ivy.add"], [532, "ivy.add"]], "add() (ivy.array method)": [[176, "ivy.Array.add"]], "add() (ivy.container method)": [[176, "ivy.Container.add"]], "angle() (in module ivy)": [[177, "ivy.angle"], [532, "ivy.angle"]], "angle() (ivy.array method)": [[177, "ivy.Array.angle"]], "angle() (ivy.container method)": [[177, "ivy.Container.angle"]], "asin() (in module ivy)": [[178, "ivy.asin"], [532, "ivy.asin"]], "asin() (ivy.array method)": [[178, "ivy.Array.asin"]], "asin() (ivy.container method)": [[178, "ivy.Container.asin"]], "asinh() (in module ivy)": [[179, "ivy.asinh"], [532, "ivy.asinh"]], "asinh() (ivy.array method)": [[179, "ivy.Array.asinh"]], "asinh() (ivy.container method)": [[179, "ivy.Container.asinh"]], "atan() (in module ivy)": [[180, "ivy.atan"], [532, "ivy.atan"]], "atan() (ivy.array method)": [[180, "ivy.Array.atan"]], "atan() (ivy.container method)": [[180, "ivy.Container.atan"]], "atan2() (in module ivy)": [[181, "ivy.atan2"], [532, "ivy.atan2"]], "atan2() (ivy.array method)": [[181, "ivy.Array.atan2"]], "atan2() (ivy.container method)": [[181, "ivy.Container.atan2"]], "atanh() (in module ivy)": [[182, "ivy.atanh"], [532, "ivy.atanh"]], "atanh() (ivy.array method)": [[182, "ivy.Array.atanh"]], "atanh() (ivy.container method)": [[182, "ivy.Container.atanh"]], "bitwise_and() (in module ivy)": [[183, "ivy.bitwise_and"], [532, "ivy.bitwise_and"]], "bitwise_and() (ivy.array method)": [[183, "ivy.Array.bitwise_and"]], "bitwise_and() (ivy.container method)": [[183, "ivy.Container.bitwise_and"]], "bitwise_invert() (in module ivy)": [[184, "ivy.bitwise_invert"], [532, "ivy.bitwise_invert"]], "bitwise_invert() (ivy.array method)": [[184, "ivy.Array.bitwise_invert"]], "bitwise_invert() (ivy.container method)": [[184, "ivy.Container.bitwise_invert"]], "bitwise_left_shift() (in module ivy)": [[185, "ivy.bitwise_left_shift"], [532, "ivy.bitwise_left_shift"]], "bitwise_left_shift() (ivy.array method)": [[185, "ivy.Array.bitwise_left_shift"]], "bitwise_left_shift() (ivy.container method)": [[185, "ivy.Container.bitwise_left_shift"]], "bitwise_or() (in module ivy)": [[186, "ivy.bitwise_or"], [532, "ivy.bitwise_or"]], "bitwise_or() (ivy.array method)": [[186, "ivy.Array.bitwise_or"]], "bitwise_or() (ivy.container method)": [[186, "ivy.Container.bitwise_or"]], "bitwise_right_shift() (in module ivy)": [[187, "ivy.bitwise_right_shift"], [532, "ivy.bitwise_right_shift"]], "bitwise_right_shift() (ivy.array method)": [[187, "ivy.Array.bitwise_right_shift"]], "bitwise_right_shift() (ivy.container method)": [[187, "ivy.Container.bitwise_right_shift"]], "bitwise_xor() (in module ivy)": [[188, "ivy.bitwise_xor"], [532, "ivy.bitwise_xor"]], "bitwise_xor() (ivy.array method)": [[188, "ivy.Array.bitwise_xor"]], "bitwise_xor() (ivy.container method)": [[188, "ivy.Container.bitwise_xor"]], "ceil() (in module ivy)": [[189, "ivy.ceil"], [532, "ivy.ceil"]], "ceil() (ivy.array method)": [[189, "ivy.Array.ceil"]], "ceil() (ivy.container method)": [[189, "ivy.Container.ceil"]], "cos() (in module ivy)": [[190, "ivy.cos"], [532, "ivy.cos"]], "cos() (ivy.array method)": [[190, "ivy.Array.cos"]], "cos() (ivy.container method)": [[190, "ivy.Container.cos"]], "cosh() (in module ivy)": [[191, "ivy.cosh"], [532, "ivy.cosh"]], "cosh() (ivy.array method)": [[191, "ivy.Array.cosh"]], "cosh() (ivy.container method)": [[191, "ivy.Container.cosh"]], "deg2rad() (in module ivy)": [[192, "ivy.deg2rad"], [532, "ivy.deg2rad"]], "deg2rad() (ivy.array method)": [[192, "ivy.Array.deg2rad"]], "deg2rad() (ivy.container method)": [[192, "ivy.Container.deg2rad"]], "divide() (in module ivy)": [[193, "ivy.divide"], [532, "ivy.divide"]], "divide() (ivy.array method)": [[193, "ivy.Array.divide"]], "divide() (ivy.container method)": [[193, "ivy.Container.divide"]], "equal() (in module ivy)": [[194, "ivy.equal"], [532, "ivy.equal"]], "equal() (ivy.array method)": [[194, "ivy.Array.equal"]], "equal() (ivy.container method)": [[194, "ivy.Container.equal"]], "erf() (in module ivy)": [[195, "ivy.erf"], [532, "ivy.erf"]], "erf() (ivy.array method)": [[195, "ivy.Array.erf"]], "erf() (ivy.container method)": [[195, "ivy.Container.erf"]], "exp() (in module ivy)": [[196, "ivy.exp"], [532, "ivy.exp"]], "exp() (ivy.array method)": [[196, "ivy.Array.exp"]], "exp() (ivy.container method)": [[196, "ivy.Container.exp"]], "exp2() (in module ivy)": [[197, "ivy.exp2"], [532, "ivy.exp2"]], "exp2() (ivy.array method)": [[197, "ivy.Array.exp2"]], "exp2() (ivy.container method)": [[197, "ivy.Container.exp2"]], "expm1() (in module ivy)": [[198, "ivy.expm1"], [532, "ivy.expm1"]], "expm1() (ivy.array method)": [[198, "ivy.Array.expm1"]], "expm1() (ivy.container method)": [[198, "ivy.Container.expm1"]], "floor() (in module ivy)": [[199, "ivy.floor"], [532, "ivy.floor"]], "floor() (ivy.array method)": [[199, "ivy.Array.floor"]], "floor() (ivy.container method)": [[199, "ivy.Container.floor"]], "floor_divide() (in module ivy)": [[200, "ivy.floor_divide"], [532, "ivy.floor_divide"]], "floor_divide() (ivy.array method)": [[200, "ivy.Array.floor_divide"]], "floor_divide() (ivy.container method)": [[200, "ivy.Container.floor_divide"]], "fmin() (in module ivy)": [[201, "ivy.fmin"], [532, "ivy.fmin"]], "fmin() (ivy.array method)": [[201, "ivy.Array.fmin"]], "fmin() (ivy.container method)": [[201, "ivy.Container.fmin"]], "fmod() (in module ivy)": [[202, "ivy.fmod"], [532, "ivy.fmod"]], "fmod() (ivy.array method)": [[202, "ivy.Array.fmod"]], "fmod() (ivy.container method)": [[202, "ivy.Container.fmod"]], "gcd() (in module ivy)": [[203, "ivy.gcd"], [532, "ivy.gcd"]], "gcd() (ivy.array method)": [[203, "ivy.Array.gcd"]], "gcd() (ivy.container method)": [[203, "ivy.Container.gcd"]], "greater() (in module ivy)": [[204, "ivy.greater"], [532, "ivy.greater"]], "greater() (ivy.array method)": [[204, "ivy.Array.greater"]], "greater() (ivy.container method)": [[204, "ivy.Container.greater"]], "greater_equal() (in module ivy)": [[205, "ivy.greater_equal"], [532, "ivy.greater_equal"]], "greater_equal() (ivy.array method)": [[205, "ivy.Array.greater_equal"]], "greater_equal() (ivy.container method)": [[205, "ivy.Container.greater_equal"]], "imag() (in module ivy)": [[206, "ivy.imag"], [532, "ivy.imag"]], "imag() (ivy.array method)": [[206, "ivy.Array.imag"]], "imag() (ivy.container method)": [[206, "ivy.Container.imag"]], "isfinite() (in module ivy)": [[207, "ivy.isfinite"], [532, "ivy.isfinite"]], "isfinite() (ivy.array method)": [[207, "ivy.Array.isfinite"]], "isfinite() (ivy.container method)": [[207, "ivy.Container.isfinite"]], "isinf() (in module ivy)": [[208, "ivy.isinf"], [532, "ivy.isinf"]], "isinf() (ivy.array method)": [[208, "ivy.Array.isinf"]], "isinf() (ivy.container method)": [[208, "ivy.Container.isinf"]], "isnan() (in module ivy)": [[209, "ivy.isnan"], [532, "ivy.isnan"]], "isnan() (ivy.array method)": [[209, "ivy.Array.isnan"]], "isnan() (ivy.container method)": [[209, "ivy.Container.isnan"]], "isreal() (in module ivy)": [[210, "ivy.isreal"], [532, "ivy.isreal"]], "isreal() (ivy.array method)": [[210, "ivy.Array.isreal"]], "isreal() (ivy.container method)": [[210, "ivy.Container.isreal"]], "lcm() (in module ivy)": [[211, "ivy.lcm"], [532, "ivy.lcm"]], "lcm() (ivy.array method)": [[211, "ivy.Array.lcm"]], "lcm() (ivy.container method)": [[211, "ivy.Container.lcm"]], "less() (in module ivy)": [[212, "ivy.less"], [532, "ivy.less"]], "less() (ivy.array method)": [[212, "ivy.Array.less"]], "less() (ivy.container method)": [[212, "ivy.Container.less"]], "less_equal() (in module ivy)": [[213, "ivy.less_equal"], [532, "ivy.less_equal"]], "less_equal() (ivy.array method)": [[213, "ivy.Array.less_equal"]], "less_equal() (ivy.container method)": [[213, "ivy.Container.less_equal"]], "log() (in module ivy)": [[214, "ivy.log"], [532, "ivy.log"]], "log() (ivy.array method)": [[214, "ivy.Array.log"]], "log() (ivy.container method)": [[214, "ivy.Container.log"]], "log10() (in module ivy)": [[215, "ivy.log10"], [532, "ivy.log10"]], "log10() (ivy.array method)": [[215, "ivy.Array.log10"]], "log10() (ivy.container method)": [[215, "ivy.Container.log10"]], "log1p() (in module ivy)": [[216, "ivy.log1p"], [532, "ivy.log1p"]], "log1p() (ivy.array method)": [[216, "ivy.Array.log1p"]], "log1p() (ivy.container method)": [[216, "ivy.Container.log1p"]], "log2() (in module ivy)": [[217, "ivy.log2"], [532, "ivy.log2"]], "log2() (ivy.array method)": [[217, "ivy.Array.log2"]], "log2() (ivy.container method)": [[217, "ivy.Container.log2"]], "logaddexp() (in module ivy)": [[218, "ivy.logaddexp"], [532, "ivy.logaddexp"]], "logaddexp() (ivy.array method)": [[218, "ivy.Array.logaddexp"]], "logaddexp() (ivy.container method)": [[218, "ivy.Container.logaddexp"]], "logaddexp2() (in module ivy)": [[219, "ivy.logaddexp2"], [532, "ivy.logaddexp2"]], "logaddexp2() (ivy.array method)": [[219, "ivy.Array.logaddexp2"]], "logaddexp2() (ivy.container method)": [[219, "ivy.Container.logaddexp2"]], "logical_and() (in module ivy)": [[220, "ivy.logical_and"], [532, "ivy.logical_and"]], "logical_and() (ivy.array method)": [[220, "ivy.Array.logical_and"]], "logical_and() (ivy.container method)": [[220, "ivy.Container.logical_and"]], "logical_not() (in module ivy)": [[221, "ivy.logical_not"], [532, "ivy.logical_not"]], "logical_not() (ivy.array method)": [[221, "ivy.Array.logical_not"]], "logical_not() (ivy.container method)": [[221, "ivy.Container.logical_not"]], "logical_or() (in module ivy)": [[222, "ivy.logical_or"], [532, "ivy.logical_or"]], "logical_or() (ivy.array method)": [[222, "ivy.Array.logical_or"]], "logical_or() (ivy.container method)": [[222, "ivy.Container.logical_or"]], "logical_xor() (in module ivy)": [[223, "ivy.logical_xor"], [532, "ivy.logical_xor"]], "logical_xor() (ivy.array method)": [[223, "ivy.Array.logical_xor"]], "logical_xor() (ivy.container method)": [[223, "ivy.Container.logical_xor"]], "maximum() (in module ivy)": [[224, "ivy.maximum"], [532, "ivy.maximum"]], "maximum() (ivy.array method)": [[224, "ivy.Array.maximum"]], "maximum() (ivy.container method)": [[224, "ivy.Container.maximum"]], "minimum() (in module ivy)": [[225, "ivy.minimum"], [532, "ivy.minimum"]], "minimum() (ivy.array method)": [[225, "ivy.Array.minimum"]], "minimum() (ivy.container method)": [[225, "ivy.Container.minimum"]], "multiply() (in module ivy)": [[226, "ivy.multiply"], [532, "ivy.multiply"]], "multiply() (ivy.array method)": [[226, "ivy.Array.multiply"]], "multiply() (ivy.container method)": [[226, "ivy.Container.multiply"]], "nan_to_num() (in module ivy)": [[227, "ivy.nan_to_num"], [532, "ivy.nan_to_num"]], "nan_to_num() (ivy.array method)": [[227, "ivy.Array.nan_to_num"]], "nan_to_num() (ivy.container method)": [[227, "ivy.Container.nan_to_num"]], "negative() (in module ivy)": [[228, "ivy.negative"], [532, "ivy.negative"]], "negative() (ivy.array method)": [[228, "ivy.Array.negative"]], "negative() (ivy.container method)": [[228, "ivy.Container.negative"]], "not_equal() (in module ivy)": [[229, "ivy.not_equal"], [532, "ivy.not_equal"]], "not_equal() (ivy.array method)": [[229, "ivy.Array.not_equal"]], "not_equal() (ivy.container method)": [[229, "ivy.Container.not_equal"]], "positive() (in module ivy)": [[230, "ivy.positive"], [532, "ivy.positive"]], "positive() (ivy.array method)": [[230, "ivy.Array.positive"]], "positive() (ivy.container method)": [[230, "ivy.Container.positive"]], "pow() (in module ivy)": [[231, "ivy.pow"], [532, "ivy.pow"]], "pow() (ivy.array method)": [[231, "ivy.Array.pow"]], "pow() (ivy.container method)": [[231, "ivy.Container.pow"]], "rad2deg() (in module ivy)": [[232, "ivy.rad2deg"], [532, "ivy.rad2deg"]], "rad2deg() (ivy.array method)": [[232, "ivy.Array.rad2deg"]], "rad2deg() (ivy.container method)": [[232, "ivy.Container.rad2deg"]], "real() (in module ivy)": [[233, "ivy.real"], [532, "ivy.real"]], "real() (ivy.array method)": [[233, "ivy.Array.real"]], "real() (ivy.container method)": [[233, "ivy.Container.real"]], "reciprocal() (in module ivy)": [[234, "ivy.reciprocal"], [532, "ivy.reciprocal"]], "reciprocal() (ivy.array method)": [[234, "ivy.Array.reciprocal"]], "reciprocal() (ivy.container method)": [[234, "ivy.Container.reciprocal"]], "remainder() (in module ivy)": [[235, "ivy.remainder"], [532, "ivy.remainder"]], "remainder() (ivy.array method)": [[235, "ivy.Array.remainder"]], "remainder() (ivy.container method)": [[235, "ivy.Container.remainder"]], "round() (in module ivy)": [[236, "ivy.round"], [532, "ivy.round"]], "round() (ivy.array method)": [[236, "ivy.Array.round"]], "round() (ivy.container method)": [[236, "ivy.Container.round"]], "sign() (in module ivy)": [[237, "ivy.sign"], [532, "ivy.sign"]], "sign() (ivy.array method)": [[237, "ivy.Array.sign"]], "sign() (ivy.container method)": [[237, "ivy.Container.sign"]], "sin() (in module ivy)": [[238, "ivy.sin"], [532, "ivy.sin"]], "sin() (ivy.array method)": [[238, "ivy.Array.sin"]], "sin() (ivy.container method)": [[238, "ivy.Container.sin"]], "sinh() (in module ivy)": [[239, "ivy.sinh"], [532, "ivy.sinh"]], "sinh() (ivy.array method)": [[239, "ivy.Array.sinh"]], "sinh() (ivy.container method)": [[239, "ivy.Container.sinh"]], "sqrt() (in module ivy)": [[240, "ivy.sqrt"], [532, "ivy.sqrt"]], "sqrt() (ivy.array method)": [[240, "ivy.Array.sqrt"]], "sqrt() (ivy.container method)": [[240, "ivy.Container.sqrt"]], "square() (in module ivy)": [[241, "ivy.square"], [532, "ivy.square"]], "square() (ivy.array method)": [[241, "ivy.Array.square"]], "square() (ivy.container method)": [[241, "ivy.Container.square"]], "subtract() (in module ivy)": [[242, "ivy.subtract"], [532, "ivy.subtract"]], "subtract() (ivy.array method)": [[242, "ivy.Array.subtract"]], "subtract() (ivy.container method)": [[242, "ivy.Container.subtract"]], "tan() (in module ivy)": [[243, "ivy.tan"], [532, "ivy.tan"]], "tan() (ivy.array method)": [[243, "ivy.Array.tan"]], "tan() (ivy.container method)": [[243, "ivy.Container.tan"]], "tanh() (in module ivy)": [[244, "ivy.tanh"], [532, "ivy.tanh"]], "tanh() (ivy.array method)": [[244, "ivy.Array.tanh"]], "tanh() (ivy.container method)": [[244, "ivy.Container.tanh"]], "trapz() (in module ivy)": [[245, "ivy.trapz"], [532, "ivy.trapz"]], "trapz() (ivy.array method)": [[245, "ivy.Array.trapz"]], "trapz() (ivy.container method)": [[245, "ivy.Container.trapz"]], "trunc() (in module ivy)": [[246, "ivy.trunc"], [532, "ivy.trunc"]], "trunc() (ivy.array method)": [[246, "ivy.Array.trunc"]], "trunc() (ivy.container method)": [[246, "ivy.Container.trunc"]], "trunc_divide() (in module ivy)": [[247, "ivy.trunc_divide"], [532, "ivy.trunc_divide"]], "trunc_divide() (ivy.array method)": [[247, "ivy.Array.trunc_divide"]], "trunc_divide() (ivy.container method)": [[247, "ivy.Container.trunc_divide"]], "elu() (in module ivy)": [[248, "ivy.elu"], [299, "ivy.elu"]], "elu() (ivy.array method)": [[248, "ivy.Array.elu"]], "elu() (ivy.container method)": [[248, "ivy.Container.elu"]], "logit() (in module ivy)": [[249, "ivy.logit"], [299, "ivy.logit"]], "logit() (ivy.array method)": [[249, "ivy.Array.logit"]], "logit() (ivy.container method)": [[249, "ivy.Container.logit"]], "logsigmoid() (in module ivy)": [[250, "ivy.logsigmoid"], [299, "ivy.logsigmoid"]], "logsigmoid() (ivy.array method)": [[250, "ivy.Array.logsigmoid"]], "logsigmoid() (ivy.container method)": [[250, "ivy.Container.logsigmoid"]], "prelu() (in module ivy)": [[251, "ivy.prelu"], [299, "ivy.prelu"]], "prelu() (ivy.array method)": [[251, "ivy.Array.prelu"]], "prelu() (ivy.container method)": [[251, "ivy.Container.prelu"]], "relu6() (in module ivy)": [[252, "ivy.relu6"], [299, "ivy.relu6"]], "relu6() (ivy.array method)": [[252, "ivy.Array.relu6"]], "relu6() (ivy.container method)": [[252, "ivy.Container.relu6"]], "selu() (in module ivy)": [[253, "ivy.selu"], [299, "ivy.selu"]], "selu() (ivy.array method)": [[253, "ivy.Array.selu"]], "selu() (ivy.container method)": [[253, "ivy.Container.selu"]], "sequence_length() (in module ivy)": [[254, "ivy.sequence_length"], [299, "ivy.sequence_length"]], "silu() (in module ivy)": [[255, "ivy.silu"], [299, "ivy.silu"]], "silu() (ivy.array method)": [[255, "ivy.Array.silu"]], "silu() (ivy.container method)": [[255, "ivy.Container.silu"]], "thresholded_relu() (in module ivy)": [[256, "ivy.thresholded_relu"], [299, "ivy.thresholded_relu"]], "thresholded_relu() (ivy.array method)": [[256, "ivy.Array.thresholded_relu"]], "thresholded_relu() (ivy.container method)": [[256, "ivy.Container.thresholded_relu"]], "blackman_window() (in module ivy)": [[257, "ivy.blackman_window"], [301, "ivy.blackman_window"]], "blackman_window() (ivy.array method)": [[257, "ivy.Array.blackman_window"]], "blackman_window() (ivy.container method)": [[257, "ivy.Container.blackman_window"]], "eye_like() (in module ivy)": [[258, "ivy.eye_like"], [301, "ivy.eye_like"]], "eye_like() (ivy.array method)": [[258, "ivy.Array.eye_like"]], "eye_like() (ivy.container method)": [[258, "ivy.Container.eye_like"]], "hamming_window() (in module ivy)": [[259, "ivy.hamming_window"], [301, "ivy.hamming_window"]], "hamming_window() (ivy.container method)": [[259, "ivy.Container.hamming_window"]], "hann_window() (in module ivy)": [[260, "ivy.hann_window"], [301, "ivy.hann_window"]], "hann_window() (ivy.container method)": [[260, "ivy.Container.hann_window"]], "indices() (in module ivy)": [[261, "ivy.indices"], [301, "ivy.indices"]], "kaiser_bessel_derived_window() (in module ivy)": [[262, "ivy.kaiser_bessel_derived_window"], [301, "ivy.kaiser_bessel_derived_window"]], "kaiser_bessel_derived_window() (ivy.container method)": [[262, "ivy.Container.kaiser_bessel_derived_window"]], "kaiser_window() (in module ivy)": [[263, "ivy.kaiser_window"], [301, "ivy.kaiser_window"]], "kaiser_window() (ivy.container method)": [[263, "ivy.Container.kaiser_window"]], "ndenumerate() (in module ivy)": [[264, "ivy.ndenumerate"], [301, "ivy.ndenumerate"]], "ndindex() (in module ivy)": [[265, "ivy.ndindex"], [301, "ivy.ndindex"]], "random_cp() (in module ivy)": [[266, "ivy.random_cp"], [301, "ivy.random_cp"]], "random_tucker() (in module ivy)": [[267, "ivy.random_tucker"], [301, "ivy.random_tucker"]], "tril_indices() (in module ivy)": [[268, "ivy.tril_indices"], [301, "ivy.tril_indices"]], "tril_indices() (ivy.container method)": [[268, "ivy.Container.tril_indices"]], "trilu() (in module ivy)": [[269, "ivy.trilu"], [301, "ivy.trilu"]], "trilu() (ivy.array method)": [[269, "ivy.Array.trilu"]], "trilu() (ivy.container method)": [[269, "ivy.Container.trilu"]], "unsorted_segment_min() (in module ivy)": [[270, "ivy.unsorted_segment_min"], [301, "ivy.unsorted_segment_min"]], "unsorted_segment_min() (ivy.array method)": [[270, "ivy.Array.unsorted_segment_min"]], "unsorted_segment_min() (ivy.container method)": [[270, "ivy.Container.unsorted_segment_min"]], "unsorted_segment_sum() (in module ivy)": [[271, "ivy.unsorted_segment_sum"], [301, "ivy.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.array method)": [[271, "ivy.Array.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.container method)": [[271, "ivy.Container.unsorted_segment_sum"]], "vorbis_window() (in module ivy)": [[272, "ivy.vorbis_window"], [301, "ivy.vorbis_window"]], "vorbis_window() (ivy.container method)": [[272, "ivy.Container.vorbis_window"]], "allclose() (in module ivy)": [[273, "ivy.allclose"], [304, "ivy.allclose"]], "allclose() (ivy.array method)": [[273, "ivy.Array.allclose"]], "allclose() (ivy.container method)": [[273, "ivy.Container.allclose"]], "binarizer() (in module ivy)": [[274, "ivy.binarizer"], [304, "ivy.binarizer"]], "binarizer() (ivy.array method)": [[274, "ivy.Array.binarizer"]], "binarizer() (ivy.container method)": [[274, "ivy.Container.binarizer"]], "conj() (in module ivy)": [[275, "ivy.conj"], [304, "ivy.conj"]], "conj() (ivy.array method)": [[275, "ivy.Array.conj"]], "conj() (ivy.container method)": [[275, "ivy.Container.conj"]], "copysign() (in module ivy)": [[276, "ivy.copysign"], [304, "ivy.copysign"]], "copysign() (ivy.array method)": [[276, "ivy.Array.copysign"]], "copysign() (ivy.container method)": [[276, "ivy.Container.copysign"]], "count_nonzero() (in module ivy)": [[277, "ivy.count_nonzero"], [304, "ivy.count_nonzero"]], "count_nonzero() (ivy.array method)": [[277, "ivy.Array.count_nonzero"]], "count_nonzero() (ivy.container method)": [[277, "ivy.Container.count_nonzero"]], "diff() (in module ivy)": [[278, "ivy.diff"], [304, "ivy.diff"]], "diff() (ivy.array method)": [[278, "ivy.Array.diff"]], "diff() (ivy.container method)": [[278, "ivy.Container.diff"]], "digamma() (in module ivy)": [[279, "ivy.digamma"], [304, "ivy.digamma"]], "digamma() (ivy.array method)": [[279, "ivy.Array.digamma"]], "digamma() (ivy.container method)": [[279, "ivy.Container.digamma"]], "fix() (in module ivy)": [[280, "ivy.fix"], [304, "ivy.fix"]], "fix() (ivy.array method)": [[280, "ivy.Array.fix"]], "fix() (ivy.container method)": [[280, "ivy.Container.fix"]], "float_power() (in module ivy)": [[281, "ivy.float_power"], [304, "ivy.float_power"]], "float_power() (ivy.array method)": [[281, "ivy.Array.float_power"]], "float_power() (ivy.container method)": [[281, "ivy.Container.float_power"]], "fmax() (in module ivy)": [[282, "ivy.fmax"], [304, "ivy.fmax"]], "fmax() (ivy.array method)": [[282, "ivy.Array.fmax"]], "fmax() (ivy.container method)": [[282, "ivy.Container.fmax"]], "frexp() (in module ivy)": [[283, "ivy.frexp"], [304, "ivy.frexp"]], "frexp() (ivy.array method)": [[283, "ivy.Array.frexp"]], "frexp() (ivy.container method)": [[283, "ivy.Container.frexp"]], "gradient() (in module ivy)": [[284, "ivy.gradient"], [304, "ivy.gradient"]], "gradient() (ivy.array method)": [[284, "ivy.Array.gradient"]], "gradient() (ivy.container method)": [[284, "ivy.Container.gradient"]], "hypot() (in module ivy)": [[285, "ivy.hypot"], [304, "ivy.hypot"]], "hypot() (ivy.array method)": [[285, "ivy.Array.hypot"]], "hypot() (ivy.container method)": [[285, "ivy.Container.hypot"]], "isclose() (in module ivy)": [[286, "ivy.isclose"], [304, "ivy.isclose"]], "isclose() (ivy.array method)": [[286, "ivy.Array.isclose"]], "isclose() (ivy.container method)": [[286, "ivy.Container.isclose"]], "ldexp() (in module ivy)": [[287, "ivy.ldexp"], [304, "ivy.ldexp"]], "ldexp() (ivy.array method)": [[287, "ivy.Array.ldexp"]], "ldexp() (ivy.container method)": [[287, "ivy.Container.ldexp"]], "lerp() (in module ivy)": [[288, "ivy.lerp"], [304, "ivy.lerp"]], "lerp() (ivy.array method)": [[288, "ivy.Array.lerp"]], "lerp() (ivy.container method)": [[288, "ivy.Container.lerp"]], "lgamma() (in module ivy)": [[289, "ivy.lgamma"], [304, "ivy.lgamma"]], "lgamma() (ivy.array method)": [[289, "ivy.Array.lgamma"]], "modf() (in module ivy)": [[290, "ivy.modf"], [304, "ivy.modf"]], "modf() (ivy.array method)": [[290, "ivy.Array.modf"]], "modf() (ivy.container method)": [[290, "ivy.Container.modf"]], "nansum() (in module ivy)": [[291, "ivy.nansum"], [304, "ivy.nansum"]], "nansum() (ivy.array method)": [[291, "ivy.Array.nansum"]], "nansum() (ivy.container method)": [[291, "ivy.Container.nansum"]], "nextafter() (in module ivy)": [[292, "ivy.nextafter"], [304, "ivy.nextafter"]], "nextafter() (ivy.array method)": [[292, "ivy.Array.nextafter"]], "nextafter() (ivy.container method)": [[292, "ivy.Container.nextafter"]], "signbit() (in module ivy)": [[293, "ivy.signbit"], [304, "ivy.signbit"]], "signbit() (ivy.array method)": [[293, "ivy.Array.signbit"]], "signbit() (ivy.container method)": [[293, "ivy.Container.signbit"]], "sinc() (in module ivy)": [[294, "ivy.sinc"], [304, "ivy.sinc"]], "sinc() (ivy.array method)": [[294, "ivy.Array.sinc"]], "sinc() (ivy.container method)": [[294, "ivy.Container.sinc"]], "xlogy() (in module ivy)": [[295, "ivy.xlogy"], [304, "ivy.xlogy"]], "xlogy() (ivy.array method)": [[295, "ivy.Array.xlogy"]], "xlogy() (ivy.container method)": [[295, "ivy.Container.xlogy"]], "zeta() (in module ivy)": [[296, "ivy.zeta"], [304, "ivy.zeta"]], "zeta() (ivy.array method)": [[296, "ivy.Array.zeta"]], "zeta() (ivy.container method)": [[296, "ivy.Container.zeta"]], "reduce() (in module ivy)": [[297, "ivy.reduce"], [305, "ivy.reduce"]], "reduce() (ivy.array method)": [[297, "ivy.Array.reduce"]], "reduce() (ivy.container method)": [[297, "ivy.Container.reduce"]], "bind_custom_gradient_function() (in module ivy)": [[298, "ivy.bind_custom_gradient_function"], [306, "ivy.bind_custom_gradient_function"]], "ivy.functional.ivy.experimental.activations": [[299, "module-ivy.functional.ivy.experimental.activations"]], "ivy.functional.ivy.experimental.constants": [[300, "module-ivy.functional.ivy.experimental.constants"]], "ivy.functional.ivy.experimental.creation": [[301, "module-ivy.functional.ivy.experimental.creation"]], "ivy.functional.ivy.experimental.data_type": [[302, "module-ivy.functional.ivy.experimental.data_type"]], "ivy.functional.ivy.experimental.device": [[303, "module-ivy.functional.ivy.experimental.device"]], "ivy.functional.ivy.experimental.elementwise": [[304, "module-ivy.functional.ivy.experimental.elementwise"]], "ivy.functional.ivy.experimental.general": [[305, "module-ivy.functional.ivy.experimental.general"]], "ivy.functional.ivy.experimental.gradients": [[306, "module-ivy.functional.ivy.experimental.gradients"]], "adaptive_avg_pool1d() (in module ivy)": [[307, "ivy.adaptive_avg_pool1d"], [321, "ivy.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (in module ivy)": [[307, "ivy.adaptive_avg_pool2d"], [322, "ivy.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (in module ivy)": [[307, "ivy.adaptive_max_pool2d"], [323, "ivy.adaptive_max_pool2d"]], "area_interpolate() (in module ivy)": [[307, "ivy.area_interpolate"], [324, "ivy.area_interpolate"]], "avg_pool1d() (in module ivy)": [[307, "ivy.avg_pool1d"], [325, "ivy.avg_pool1d"]], "avg_pool2d() (in module ivy)": [[307, "ivy.avg_pool2d"], [326, "ivy.avg_pool2d"]], "avg_pool3d() (in module ivy)": [[307, "ivy.avg_pool3d"], [327, "ivy.avg_pool3d"]], "dct() (in module ivy)": [[307, "ivy.dct"], [328, "ivy.dct"]], "dft() (in module ivy)": [[307, "ivy.dft"], [329, "ivy.dft"]], "dropout1d() (in module ivy)": [[307, "ivy.dropout1d"], [330, "ivy.dropout1d"]], "dropout2d() (in module ivy)": [[307, "ivy.dropout2d"], [331, "ivy.dropout2d"]], "dropout3d() (in module ivy)": [[307, "ivy.dropout3d"], [332, "ivy.dropout3d"]], "embedding() (in module ivy)": [[307, "ivy.embedding"], [333, "ivy.embedding"]], "fft() (in module ivy)": [[307, "ivy.fft"], [334, "ivy.fft"]], "fft2() (in module ivy)": [[307, "ivy.fft2"], [335, "ivy.fft2"]], "generate_einsum_equation() (in module ivy)": [[307, "ivy.generate_einsum_equation"], [336, "ivy.generate_einsum_equation"]], "get_interpolate_kernel() (in module ivy)": [[307, "ivy.get_interpolate_kernel"], [337, "ivy.get_interpolate_kernel"]], "idct() (in module ivy)": [[307, "ivy.idct"], [338, "ivy.idct"]], "ifft() (in module ivy)": [[307, "ivy.ifft"], [339, "ivy.ifft"]], "ifftn() (in module ivy)": [[307, "ivy.ifftn"], [340, "ivy.ifftn"]], "interp() (in module ivy)": [[307, "ivy.interp"], [341, "ivy.interp"]], "interpolate() (in module ivy)": [[307, "ivy.interpolate"], [342, "ivy.interpolate"]], "ivy.functional.ivy.experimental.layers": [[307, "module-ivy.functional.ivy.experimental.layers"]], "max_pool1d() (in module ivy)": [[307, "ivy.max_pool1d"], [343, "ivy.max_pool1d"]], "max_pool2d() (in module ivy)": [[307, "ivy.max_pool2d"], [344, "ivy.max_pool2d"]], "max_pool3d() (in module ivy)": [[307, "ivy.max_pool3d"], [345, "ivy.max_pool3d"]], "max_unpool1d() (in module ivy)": [[307, "ivy.max_unpool1d"], [346, "ivy.max_unpool1d"]], "nearest_interpolate() (in module ivy)": [[307, "ivy.nearest_interpolate"], [347, "ivy.nearest_interpolate"]], "pool() (in module ivy)": [[307, "ivy.pool"], [348, "ivy.pool"]], "reduce_window() (in module ivy)": [[307, "ivy.reduce_window"], [349, "ivy.reduce_window"]], "rfftn() (in module ivy)": [[307, "ivy.rfftn"], [350, "ivy.rfftn"]], "adjoint() (in module ivy)": [[308, "ivy.adjoint"], [351, "ivy.adjoint"]], "cond() (in module ivy)": [[308, "ivy.cond"], [352, "ivy.cond"]], "diagflat() (in module ivy)": [[308, "ivy.diagflat"], [353, "ivy.diagflat"]], "dot() (in module ivy)": [[308, "ivy.dot"], [354, "ivy.dot"]], "eig() (in module ivy)": [[308, "ivy.eig"], [355, "ivy.eig"], [537, "ivy.eig"], [569, "ivy.eig"]], "eigh_tridiagonal() (in module ivy)": [[308, "ivy.eigh_tridiagonal"], [356, "ivy.eigh_tridiagonal"]], "eigvals() (in module ivy)": [[308, "ivy.eigvals"], [357, "ivy.eigvals"]], "initialize_tucker() (in module ivy)": [[308, "ivy.initialize_tucker"], [358, "ivy.initialize_tucker"]], "ivy.functional.ivy.experimental.linear_algebra": [[308, "module-ivy.functional.ivy.experimental.linear_algebra"]], "khatri_rao() (in module ivy)": [[308, "ivy.khatri_rao"], [359, "ivy.khatri_rao"]], "kron() (in module ivy)": [[308, "ivy.kron"], [360, "ivy.kron"]], "kronecker() (in module ivy)": [[308, "ivy.kronecker"], [361, "ivy.kronecker"]], "make_svd_non_negative() (in module ivy)": [[308, "ivy.make_svd_non_negative"], [362, "ivy.make_svd_non_negative"]], "matrix_exp() (in module ivy)": [[308, "ivy.matrix_exp"], [363, "ivy.matrix_exp"]], "mode_dot() (in module ivy)": [[308, "ivy.mode_dot"], [364, "ivy.mode_dot"]], "multi_dot() (in module ivy)": [[308, "ivy.multi_dot"], [365, "ivy.multi_dot"]], "multi_mode_dot() (in module ivy)": [[308, "ivy.multi_mode_dot"], [366, "ivy.multi_mode_dot"]], "partial_tucker() (in module ivy)": [[308, "ivy.partial_tucker"], [367, "ivy.partial_tucker"]], "svd_flip() (in module ivy)": [[308, "ivy.svd_flip"], [368, "ivy.svd_flip"]], "truncated_svd() (in module ivy)": [[308, "ivy.truncated_svd"], [369, "ivy.truncated_svd"]], "tucker() (in module ivy)": [[308, "ivy.tucker"], [370, "ivy.tucker"]], "ivy.functional.ivy.experimental.losses": [[309, "module-ivy.functional.ivy.experimental.losses"]], "log_poisson_loss() (in module ivy)": [[309, "ivy.log_poisson_loss"], [371, "ivy.log_poisson_loss"]], "as_strided() (in module ivy)": [[310, "ivy.as_strided"], [372, "ivy.as_strided"]], "associative_scan() (in module ivy)": [[310, "ivy.associative_scan"], [373, "ivy.associative_scan"]], "atleast_1d() (in module ivy)": [[310, "ivy.atleast_1d"], [374, "ivy.atleast_1d"]], "atleast_2d() (in module ivy)": [[310, "ivy.atleast_2d"], [375, "ivy.atleast_2d"]], "atleast_3d() (in module ivy)": [[310, "ivy.atleast_3d"], [376, "ivy.atleast_3d"]], "broadcast_shapes() (in module ivy)": [[310, "ivy.broadcast_shapes"], [377, "ivy.broadcast_shapes"]], "concat_from_sequence() (in module ivy)": [[310, "ivy.concat_from_sequence"], [378, "ivy.concat_from_sequence"]], "dsplit() (in module ivy)": [[310, "ivy.dsplit"], [379, "ivy.dsplit"]], "dstack() (in module ivy)": [[310, "ivy.dstack"], [380, "ivy.dstack"]], "expand() (in module ivy)": [[310, "ivy.expand"], [381, "ivy.expand"]], "fill_diagonal() (in module ivy)": [[310, "ivy.fill_diagonal"], [382, "ivy.fill_diagonal"]], "flatten() (in module ivy)": [[310, "ivy.flatten"], [383, "ivy.flatten"]], "fliplr() (in module ivy)": [[310, "ivy.fliplr"], [384, "ivy.fliplr"]], "flipud() (in module ivy)": [[310, "ivy.flipud"], [385, "ivy.flipud"]], "fold() (in module ivy)": [[310, "ivy.fold"], [386, "ivy.fold"]], "heaviside() (in module ivy)": [[310, "ivy.heaviside"], [387, "ivy.heaviside"]], "hsplit() (in module ivy)": [[310, "ivy.hsplit"], [388, "ivy.hsplit"]], "hstack() (in module ivy)": [[310, "ivy.hstack"], [389, "ivy.hstack"]], "i0() (in module ivy)": [[310, "ivy.i0"], [390, "ivy.i0"]], "ivy.functional.ivy.experimental.manipulation": [[310, "module-ivy.functional.ivy.experimental.manipulation"]], "matricize() (in module ivy)": [[310, "ivy.matricize"], [391, "ivy.matricize"]], "moveaxis() (in module ivy)": [[310, "ivy.moveaxis"], [392, "ivy.moveaxis"]], "pad() (in module ivy)": [[310, "ivy.pad"], [393, "ivy.pad"]], "partial_fold() (in module ivy)": [[310, "ivy.partial_fold"], [394, "ivy.partial_fold"]], "partial_tensor_to_vec() (in module ivy)": [[310, "ivy.partial_tensor_to_vec"], [395, "ivy.partial_tensor_to_vec"]], "partial_unfold() (in module ivy)": [[310, "ivy.partial_unfold"], [396, "ivy.partial_unfold"]], "partial_vec_to_tensor() (in module ivy)": [[310, "ivy.partial_vec_to_tensor"], [397, "ivy.partial_vec_to_tensor"]], "put_along_axis() (in module ivy)": [[310, "ivy.put_along_axis"], [398, "ivy.put_along_axis"]], "rot90() (in module ivy)": [[310, "ivy.rot90"], [399, "ivy.rot90"]], "soft_thresholding() (in module ivy)": [[310, "ivy.soft_thresholding"], [400, "ivy.soft_thresholding"]], "take_along_axis() (in module ivy)": [[310, "ivy.take_along_axis"], [401, "ivy.take_along_axis"]], "top_k() (in module ivy)": [[310, "ivy.top_k"], [402, "ivy.top_k"]], "unfold() (in module ivy)": [[310, "ivy.unfold"], [403, "ivy.unfold"]], "unique_consecutive() (in module ivy)": [[310, "ivy.unique_consecutive"], [404, "ivy.unique_consecutive"]], "vsplit() (in module ivy)": [[310, "ivy.vsplit"], [405, "ivy.vsplit"]], "vstack() (in module ivy)": [[310, "ivy.vstack"], [406, "ivy.vstack"]], "ivy.functional.ivy.experimental.meta": [[311, "module-ivy.functional.ivy.experimental.meta"]], "ivy.functional.ivy.experimental.nest": [[312, "module-ivy.functional.ivy.experimental.nest"]], "batch_norm() (in module ivy)": [[313, "ivy.batch_norm"], [407, "ivy.batch_norm"]], "group_norm() (in module ivy)": [[313, "ivy.group_norm"], [408, "ivy.group_norm"]], "instance_norm() (in module ivy)": [[313, "ivy.instance_norm"], [409, "ivy.instance_norm"]], "ivy.functional.ivy.experimental.norms": [[313, "module-ivy.functional.ivy.experimental.norms"]], "l1_normalize() (in module ivy)": [[313, "ivy.l1_normalize"], [410, "ivy.l1_normalize"]], "l2_normalize() (in module ivy)": [[313, "ivy.l2_normalize"], [411, "ivy.l2_normalize"]], "lp_normalize() (in module ivy)": [[313, "ivy.lp_normalize"], [412, "ivy.lp_normalize"]], "bernoulli() (in module ivy)": [[314, "ivy.bernoulli"], [413, "ivy.bernoulli"]], "beta() (in module ivy)": [[314, "ivy.beta"], [414, "ivy.beta"]], "dirichlet() (in module ivy)": [[314, "ivy.dirichlet"], [415, "ivy.dirichlet"]], "gamma() (in module ivy)": [[314, "ivy.gamma"], [416, "ivy.gamma"]], "ivy.functional.ivy.experimental.random": [[314, "module-ivy.functional.ivy.experimental.random"]], "poisson() (in module ivy)": [[314, "ivy.poisson"], [417, "ivy.poisson"]], "ivy.functional.ivy.experimental.searching": [[315, "module-ivy.functional.ivy.experimental.searching"]], "unravel_index() (in module ivy)": [[315, "ivy.unravel_index"], [418, "ivy.unravel_index"]], "ivy.functional.ivy.experimental.set": [[316, "module-ivy.functional.ivy.experimental.set"]], "invert_permutation() (in module ivy)": [[317, "ivy.invert_permutation"], [419, "ivy.invert_permutation"]], "ivy.functional.ivy.experimental.sorting": [[317, "module-ivy.functional.ivy.experimental.sorting"]], "lexsort() (in module ivy)": [[317, "ivy.lexsort"], [420, "ivy.lexsort"]], "nativesparsearray (class in ivy)": [[318, "ivy.NativeSparseArray"]], "sparsearray (class in ivy)": [[318, "ivy.SparseArray"]], "is_ivy_sparse_array() (in module ivy)": [[318, "ivy.is_ivy_sparse_array"], [421, "ivy.is_ivy_sparse_array"]], "is_native_sparse_array() (in module ivy)": [[318, "ivy.is_native_sparse_array"], [422, "ivy.is_native_sparse_array"]], "ivy.functional.ivy.experimental.sparse_array": [[318, "module-ivy.functional.ivy.experimental.sparse_array"]], "native_sparse_array() (in module ivy)": [[318, "ivy.native_sparse_array"], [423, "ivy.native_sparse_array"]], "native_sparse_array_to_indices_values_and_shape() (in module ivy)": [[318, "ivy.native_sparse_array_to_indices_values_and_shape"], [424, "ivy.native_sparse_array_to_indices_values_and_shape"]], "bincount() (in module ivy)": [[319, "ivy.bincount"], [425, "ivy.bincount"]], "corrcoef() (in module ivy)": [[319, "ivy.corrcoef"], [426, "ivy.corrcoef"]], "cov() (in module ivy)": [[319, "ivy.cov"], [427, "ivy.cov"]], "cummax() (in module ivy)": [[319, "ivy.cummax"], [428, "ivy.cummax"]], "cummin() (in module ivy)": [[319, "ivy.cummin"], [429, "ivy.cummin"]], "histogram() (in module ivy)": [[319, "ivy.histogram"], [430, "ivy.histogram"]], "igamma() (in module ivy)": [[319, "ivy.igamma"], [431, "ivy.igamma"]], "ivy.functional.ivy.experimental.statistical": [[319, "module-ivy.functional.ivy.experimental.statistical"]], "median() (in module ivy)": [[319, "ivy.median"], [432, "ivy.median"]], "nanmean() (in module ivy)": [[319, "ivy.nanmean"], [433, "ivy.nanmean"]], "nanmedian() (in module ivy)": [[319, "ivy.nanmedian"], [434, "ivy.nanmedian"]], "nanquantile() (in module ivy)": [[319, "ivy.nanquantile"], [435, "ivy.nanquantile"]], "quantile() (in module ivy)": [[319, "ivy.quantile"], [436, "ivy.quantile"]], "ivy.functional.ivy.experimental.utility": [[320, "module-ivy.functional.ivy.experimental.utility"]], "adaptive_avg_pool1d() (ivy.array method)": [[321, "ivy.Array.adaptive_avg_pool1d"]], "adaptive_avg_pool1d() (ivy.container method)": [[321, "ivy.Container.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.array method)": [[322, "ivy.Array.adaptive_avg_pool2d"]], "adaptive_avg_pool2d() (ivy.container method)": [[322, "ivy.Container.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.array method)": [[323, "ivy.Array.adaptive_max_pool2d"]], "adaptive_max_pool2d() (ivy.container method)": [[323, "ivy.Container.adaptive_max_pool2d"]], "avg_pool1d() (ivy.array method)": [[325, "ivy.Array.avg_pool1d"]], "avg_pool1d() (ivy.container method)": [[325, "ivy.Container.avg_pool1d"]], "avg_pool2d() (ivy.array method)": [[326, "ivy.Array.avg_pool2d"]], "avg_pool2d() (ivy.container method)": [[326, "ivy.Container.avg_pool2d"]], "avg_pool3d() (ivy.array method)": [[327, "ivy.Array.avg_pool3d"]], "avg_pool3d() (ivy.container method)": [[327, "ivy.Container.avg_pool3d"]], "dct() (ivy.array method)": [[328, "ivy.Array.dct"]], "dct() (ivy.container method)": [[328, "ivy.Container.dct"]], "dft() (ivy.array method)": [[329, "ivy.Array.dft"]], "dft() (ivy.container method)": [[329, "ivy.Container.dft"]], "dropout1d() (ivy.array method)": [[330, "ivy.Array.dropout1d"]], "dropout1d() (ivy.container method)": [[330, "ivy.Container.dropout1d"]], "dropout2d() (ivy.array method)": [[331, "ivy.Array.dropout2d"]], "dropout2d() (ivy.container method)": [[331, "ivy.Container.dropout2d"]], "dropout3d() (ivy.array method)": [[332, "ivy.Array.dropout3d"]], "dropout3d() (ivy.container method)": [[332, "ivy.Container.dropout3d"]], "embedding() (ivy.array method)": [[333, "ivy.Array.embedding"]], "embedding() (ivy.container method)": [[333, "ivy.Container.embedding"]], "fft() (ivy.array method)": [[334, "ivy.Array.fft"]], "fft() (ivy.container method)": [[334, "ivy.Container.fft"]], "fft2() (ivy.array method)": [[335, "ivy.Array.fft2"]], "idct() (ivy.array method)": [[338, "ivy.Array.idct"]], "idct() (ivy.container method)": [[338, "ivy.Container.idct"]], "ifft() (ivy.array method)": [[339, "ivy.Array.ifft"]], "ifft() (ivy.container method)": [[339, "ivy.Container.ifft"]], "ifftn() (ivy.array method)": [[340, "ivy.Array.ifftn"]], "ifftn() (ivy.container method)": [[340, "ivy.Container.ifftn"]], "interpolate() (ivy.array method)": [[342, "ivy.Array.interpolate"]], "interpolate() (ivy.container method)": [[342, "ivy.Container.interpolate"]], "max_pool1d() (ivy.array method)": [[343, "ivy.Array.max_pool1d"]], "max_pool1d() (ivy.container method)": [[343, "ivy.Container.max_pool1d"]], "max_pool2d() (ivy.array method)": [[344, "ivy.Array.max_pool2d"]], "max_pool2d() (ivy.container method)": [[344, "ivy.Container.max_pool2d"]], "max_pool3d() (ivy.array method)": [[345, "ivy.Array.max_pool3d"]], "max_pool3d() (ivy.container method)": [[345, "ivy.Container.max_pool3d"]], "reduce_window() (ivy.array method)": [[349, "ivy.Array.reduce_window"]], "reduce_window() (ivy.container method)": [[349, "ivy.Container.reduce_window"]], "rfftn() (ivy.array method)": [[350, "ivy.Array.rfftn"]], "rfftn() (ivy.container method)": [[350, "ivy.Container.rfftn"]], "adjoint() (ivy.array method)": [[351, "ivy.Array.adjoint"]], "adjoint() (ivy.container method)": [[351, "ivy.Container.adjoint"]], "cond() (ivy.array method)": [[352, "ivy.Array.cond"]], "cond() (ivy.container method)": [[352, "ivy.Container.cond"]], "diagflat() (ivy.array method)": [[353, "ivy.Array.diagflat"]], "diagflat() (ivy.container method)": [[353, "ivy.Container.diagflat"]], "eig() (ivy.array method)": [[355, "ivy.Array.eig"], [569, "ivy.Array.eig"]], "eig() (ivy.container method)": [[355, "ivy.Container.eig"], [569, "ivy.Container.eig"]], "eigh_tridiagonal() (ivy.array method)": [[356, "ivy.Array.eigh_tridiagonal"]], "eigh_tridiagonal() (ivy.container method)": [[356, "ivy.Container.eigh_tridiagonal"]], "eigvals() (ivy.array method)": [[357, "ivy.Array.eigvals"]], "eigvals() (ivy.container method)": [[357, "ivy.Container.eigvals"]], "initialize_tucker() (ivy.array method)": [[358, "ivy.Array.initialize_tucker"]], "initialize_tucker() (ivy.container method)": [[358, "ivy.Container.initialize_tucker"]], "kron() (ivy.array method)": [[360, "ivy.Array.kron"]], "kron() (ivy.container method)": [[360, "ivy.Container.kron"]], "make_svd_non_negative() (ivy.array method)": [[362, "ivy.Array.make_svd_non_negative"]], "make_svd_non_negative() (ivy.container method)": [[362, "ivy.Container.make_svd_non_negative"]], "matrix_exp() (ivy.array method)": [[363, "ivy.Array.matrix_exp"]], "matrix_exp() (ivy.container method)": [[363, "ivy.Container.matrix_exp"]], "mode_dot() (ivy.array method)": [[364, "ivy.Array.mode_dot"]], "mode_dot() (ivy.container method)": [[364, "ivy.Container.mode_dot"]], "multi_dot() (ivy.array method)": [[365, "ivy.Array.multi_dot"]], "multi_dot() (ivy.container method)": [[365, "ivy.Container.multi_dot"]], "multi_mode_dot() (ivy.array method)": [[366, "ivy.Array.multi_mode_dot"]], "multi_mode_dot() (ivy.container method)": [[366, "ivy.Container.multi_mode_dot"]], "partial_tucker() (ivy.array method)": [[367, "ivy.Array.partial_tucker"]], "partial_tucker() (ivy.container method)": [[367, "ivy.Container.partial_tucker"]], "svd_flip() (ivy.array method)": [[368, "ivy.Array.svd_flip"]], "svd_flip() (ivy.container method)": [[368, "ivy.Container.svd_flip"]], "truncated_svd() (ivy.array method)": [[369, "ivy.Array.truncated_svd"]], "truncated_svd() (ivy.container method)": [[369, "ivy.Container.truncated_svd"]], "tucker() (ivy.array method)": [[370, "ivy.Array.tucker"]], "tucker() (ivy.container method)": [[370, "ivy.Container.tucker"]], "as_strided() (ivy.array method)": [[372, "ivy.Array.as_strided"]], "as_strided() (ivy.container method)": [[372, "ivy.Container.as_strided"]], "associative_scan() (ivy.array method)": [[373, "ivy.Array.associative_scan"]], "associative_scan() (ivy.container method)": [[373, "ivy.Container.associative_scan"]], "atleast_1d() (ivy.array method)": [[374, "ivy.Array.atleast_1d"]], "atleast_1d() (ivy.container method)": [[374, "ivy.Container.atleast_1d"]], "atleast_2d() (ivy.array method)": [[375, "ivy.Array.atleast_2d"]], "atleast_2d() (ivy.container method)": [[375, "ivy.Container.atleast_2d"]], "atleast_3d() (ivy.array method)": [[376, "ivy.Array.atleast_3d"]], "atleast_3d() (ivy.container method)": [[376, "ivy.Container.atleast_3d"]], "broadcast_shapes() (ivy.container method)": [[377, "ivy.Container.broadcast_shapes"]], "concat_from_sequence() (ivy.array method)": [[378, "ivy.Array.concat_from_sequence"]], "concat_from_sequence() (ivy.container method)": [[378, "ivy.Container.concat_from_sequence"]], "dsplit() (ivy.array method)": [[379, "ivy.Array.dsplit"]], "dsplit() (ivy.container method)": [[379, "ivy.Container.dsplit"]], "dstack() (ivy.array method)": [[380, "ivy.Array.dstack"]], "dstack() (ivy.container method)": [[380, "ivy.Container.dstack"]], "expand() (ivy.array method)": [[381, "ivy.Array.expand"]], "expand() (ivy.container method)": [[381, "ivy.Container.expand"]], "fill_diagonal() (ivy.array method)": [[382, "ivy.Array.fill_diagonal"]], "fill_diagonal() (ivy.container method)": [[382, "ivy.Container.fill_diagonal"]], "flatten() (ivy.array method)": [[383, "ivy.Array.flatten"]], "flatten() (ivy.container method)": [[383, "ivy.Container.flatten"]], "fliplr() (ivy.array method)": [[384, "ivy.Array.fliplr"]], "fliplr() (ivy.container method)": [[384, "ivy.Container.fliplr"]], "flipud() (ivy.array method)": [[385, "ivy.Array.flipud"]], "flipud() (ivy.container method)": [[385, "ivy.Container.flipud"]], "fold() (ivy.array method)": [[386, "ivy.Array.fold"]], "fold() (ivy.container method)": [[386, "ivy.Container.fold"]], "heaviside() (ivy.array method)": [[387, "ivy.Array.heaviside"]], "heaviside() (ivy.container method)": [[387, "ivy.Container.heaviside"]], "hsplit() (ivy.array method)": [[388, "ivy.Array.hsplit"]], "hsplit() (ivy.container method)": [[388, "ivy.Container.hsplit"]], "hstack() (ivy.array method)": [[389, "ivy.Array.hstack"]], "hstack() (ivy.container method)": [[389, "ivy.Container.hstack"]], "i0() (ivy.array method)": [[390, "ivy.Array.i0"]], "i0() (ivy.container method)": [[390, "ivy.Container.i0"]], "matricize() (ivy.array method)": [[391, "ivy.Array.matricize"]], "matricize() (ivy.container method)": [[391, "ivy.Container.matricize"]], "moveaxis() (ivy.array method)": [[392, "ivy.Array.moveaxis"]], "moveaxis() (ivy.container method)": [[392, "ivy.Container.moveaxis"]], "pad() (ivy.array method)": [[393, "ivy.Array.pad"]], "pad() (ivy.container method)": [[393, "ivy.Container.pad"]], "partial_fold() (ivy.array method)": [[394, "ivy.Array.partial_fold"]], "partial_fold() (ivy.container method)": [[394, "ivy.Container.partial_fold"]], "partial_tensor_to_vec() (ivy.array method)": [[395, "ivy.Array.partial_tensor_to_vec"]], "partial_tensor_to_vec() (ivy.container method)": [[395, "ivy.Container.partial_tensor_to_vec"]], "partial_unfold() (ivy.array method)": [[396, "ivy.Array.partial_unfold"]], "partial_unfold() (ivy.container method)": [[396, "ivy.Container.partial_unfold"]], "partial_vec_to_tensor() (ivy.array method)": [[397, "ivy.Array.partial_vec_to_tensor"]], "partial_vec_to_tensor() (ivy.container method)": [[397, "ivy.Container.partial_vec_to_tensor"]], "rot90() (ivy.array method)": [[399, "ivy.Array.rot90"]], "rot90() (ivy.container method)": [[399, "ivy.Container.rot90"]], "soft_thresholding() (ivy.array method)": [[400, "ivy.Array.soft_thresholding"]], "soft_thresholding() (ivy.container method)": [[400, "ivy.Container.soft_thresholding"]], "take_along_axis() (ivy.array method)": [[401, "ivy.Array.take_along_axis"]], "take_along_axis() (ivy.container method)": [[401, "ivy.Container.take_along_axis"]], "top_k() (ivy.array method)": [[402, "ivy.Array.top_k"]], "top_k() (ivy.container method)": [[402, "ivy.Container.top_k"]], "unfold() (ivy.array method)": [[403, "ivy.Array.unfold"]], "unfold() (ivy.container method)": [[403, "ivy.Container.unfold"]], "unique_consecutive() (ivy.array method)": [[404, "ivy.Array.unique_consecutive"]], "unique_consecutive() (ivy.container method)": [[404, "ivy.Container.unique_consecutive"]], "vsplit() (ivy.array method)": [[405, "ivy.Array.vsplit"]], "vsplit() (ivy.container method)": [[405, "ivy.Container.vsplit"]], "vstack() (ivy.array method)": [[406, "ivy.Array.vstack"]], "vstack() (ivy.container method)": [[406, "ivy.Container.vstack"]], "batch_norm() (ivy.array method)": [[407, "ivy.Array.batch_norm"]], "batch_norm() (ivy.container method)": [[407, "ivy.Container.batch_norm"]], "group_norm() (ivy.array method)": [[408, "ivy.Array.group_norm"]], "group_norm() (ivy.container method)": [[408, "ivy.Container.group_norm"]], "instance_norm() (ivy.array method)": [[409, "ivy.Array.instance_norm"]], "instance_norm() (ivy.container method)": [[409, "ivy.Container.instance_norm"]], "l1_normalize() (ivy.array method)": [[410, "ivy.Array.l1_normalize"]], "l1_normalize() (ivy.container method)": [[410, "ivy.Container.l1_normalize"]], "l2_normalize() (ivy.array method)": [[411, "ivy.Array.l2_normalize"]], "l2_normalize() (ivy.container method)": [[411, "ivy.Container.l2_normalize"]], "lp_normalize() (ivy.array method)": [[412, "ivy.Array.lp_normalize"]], "lp_normalize() (ivy.container method)": [[412, "ivy.Container.lp_normalize"]], "bernoulli() (ivy.array method)": [[413, "ivy.Array.bernoulli"]], "bernoulli() (ivy.container method)": [[413, "ivy.Container.bernoulli"]], "beta() (ivy.array method)": [[414, "ivy.Array.beta"]], "beta() (ivy.container method)": [[414, "ivy.Container.beta"]], "dirichlet() (ivy.array method)": [[415, "ivy.Array.dirichlet"]], "dirichlet() (ivy.container method)": [[415, "ivy.Container.dirichlet"]], "gamma() (ivy.array method)": [[416, "ivy.Array.gamma"]], "gamma() (ivy.container method)": [[416, "ivy.Container.gamma"]], "poisson() (ivy.array method)": [[417, "ivy.Array.poisson"]], "poisson() (ivy.container method)": [[417, "ivy.Container.poisson"]], "unravel_index() (ivy.array method)": [[418, "ivy.Array.unravel_index"]], "unravel_index() (ivy.container method)": [[418, "ivy.Container.unravel_index"]], "invert_permutation() (ivy.container method)": [[419, "ivy.Container.invert_permutation"]], "lexsort() (ivy.array method)": [[420, "ivy.Array.lexsort"]], "lexsort() (ivy.container method)": [[420, "ivy.Container.lexsort"]], "bincount() (ivy.array method)": [[425, "ivy.Array.bincount"]], "bincount() (ivy.container method)": [[425, "ivy.Container.bincount"]], "corrcoef() (ivy.array method)": [[426, "ivy.Array.corrcoef"]], "corrcoef() (ivy.container method)": [[426, "ivy.Container.corrcoef"]], "cov() (ivy.array method)": [[427, "ivy.Array.cov"]], "cov() (ivy.container method)": [[427, "ivy.Container.cov"]], "cummax() (ivy.array method)": [[428, "ivy.Array.cummax"]], "cummax() (ivy.container method)": [[428, "ivy.Container.cummax"]], "cummin() (ivy.array method)": [[429, "ivy.Array.cummin"]], "cummin() (ivy.container method)": [[429, "ivy.Container.cummin"]], "histogram() (ivy.array method)": [[430, "ivy.Array.histogram"]], "histogram() (ivy.container method)": [[430, "ivy.Container.histogram"]], "igamma() (ivy.array method)": [[431, "ivy.Array.igamma"]], "igamma() (ivy.container method)": [[431, "ivy.Container.igamma"]], "median() (ivy.array method)": [[432, "ivy.Array.median"]], "median() (ivy.container method)": [[432, "ivy.Container.median"]], "nanmean() (ivy.array method)": [[433, "ivy.Array.nanmean"]], "nanmean() (ivy.container method)": [[433, "ivy.Container.nanmean"]], "nanmedian() (ivy.array method)": [[434, "ivy.Array.nanmedian"]], "nanmedian() (ivy.container method)": [[434, "ivy.Container.nanmedian"]], "quantile() (ivy.array method)": [[436, "ivy.Array.quantile"]], "quantile() (ivy.container method)": [[436, "ivy.Container.quantile"]], "all_equal() (in module ivy)": [[437, "ivy.all_equal"], [534, "ivy.all_equal"]], "all_equal() (ivy.array method)": [[437, "ivy.Array.all_equal"]], "all_equal() (ivy.container method)": [[437, "ivy.Container.all_equal"]], "arg_info() (in module ivy)": [[438, "ivy.arg_info"], [534, "ivy.arg_info"]], "arg_names() (in module ivy)": [[439, "ivy.arg_names"], [534, "ivy.arg_names"]], "array_equal() (in module ivy)": [[440, "ivy.array_equal"], [534, "ivy.array_equal"]], "array_equal() (ivy.array method)": [[440, "ivy.Array.array_equal"]], "array_equal() (ivy.container method)": [[440, "ivy.Container.array_equal"]], "assert_supports_inplace() (in module ivy)": [[441, "ivy.assert_supports_inplace"], [534, "ivy.assert_supports_inplace"]], "assert_supports_inplace() (ivy.array method)": [[441, "ivy.Array.assert_supports_inplace"]], "assert_supports_inplace() (ivy.container method)": [[441, "ivy.Container.assert_supports_inplace"]], "cache_fn() (in module ivy)": [[442, "ivy.cache_fn"], [534, "ivy.cache_fn"]], "clip_matrix_norm() (in module ivy)": [[443, "ivy.clip_matrix_norm"], [534, "ivy.clip_matrix_norm"]], "clip_matrix_norm() (ivy.array method)": [[443, "ivy.Array.clip_matrix_norm"]], "clip_matrix_norm() (ivy.container method)": [[443, "ivy.Container.clip_matrix_norm"]], "clip_vector_norm() (in module ivy)": [[444, "ivy.clip_vector_norm"], [534, "ivy.clip_vector_norm"]], "clip_vector_norm() (ivy.array method)": [[444, "ivy.Array.clip_vector_norm"]], "clip_vector_norm() (ivy.container method)": [[444, "ivy.Container.clip_vector_norm"]], "container_types() (in module ivy)": [[445, "ivy.container_types"], [534, "ivy.container_types"]], "current_backend_str() (in module ivy)": [[446, "ivy.current_backend_str"], [534, "ivy.current_backend_str"]], "default() (in module ivy)": [[447, "ivy.default"], [534, "ivy.default"]], "default() (ivy.array method)": [[447, "ivy.Array.default"]], "einops_rearrange() (in module ivy)": [[448, "ivy.einops_rearrange"], [534, "ivy.einops_rearrange"]], "einops_rearrange() (ivy.array method)": [[448, "ivy.Array.einops_rearrange"]], "einops_rearrange() (ivy.container method)": [[448, "ivy.Container.einops_rearrange"]], "einops_reduce() (in module ivy)": [[449, "ivy.einops_reduce"], [534, "ivy.einops_reduce"]], "einops_reduce() (ivy.array method)": [[449, "ivy.Array.einops_reduce"]], "einops_reduce() (ivy.container method)": [[449, "ivy.Container.einops_reduce"]], "einops_repeat() (in module ivy)": [[450, "ivy.einops_repeat"], [534, "ivy.einops_repeat"]], "einops_repeat() (ivy.array method)": [[450, "ivy.Array.einops_repeat"]], "einops_repeat() (ivy.container method)": [[450, "ivy.Container.einops_repeat"]], "exists() (in module ivy)": [[451, "ivy.exists"], [534, "ivy.exists"]], "exists() (ivy.array method)": [[451, "ivy.Array.exists"]], "fourier_encode() (in module ivy)": [[452, "ivy.fourier_encode"], [534, "ivy.fourier_encode"]], "fourier_encode() (ivy.array method)": [[452, "ivy.Array.fourier_encode"]], "fourier_encode() (ivy.container method)": [[452, "ivy.Container.fourier_encode"]], "function_supported_devices_and_dtypes() (in module ivy)": [[453, "ivy.function_supported_devices_and_dtypes"], [534, "ivy.function_supported_devices_and_dtypes"]], "function_unsupported_devices_and_dtypes() (in module ivy)": [[454, "ivy.function_unsupported_devices_and_dtypes"], [534, "ivy.function_unsupported_devices_and_dtypes"]], "gather() (in module ivy)": [[455, "ivy.gather"], [534, "ivy.gather"]], "gather() (ivy.array method)": [[455, "ivy.Array.gather"]], "gather() (ivy.container method)": [[455, "ivy.Container.gather"]], "gather_nd() (in module ivy)": [[456, "ivy.gather_nd"], [534, "ivy.gather_nd"]], "gather_nd() (ivy.array method)": [[456, "ivy.Array.gather_nd"]], "gather_nd() (ivy.container method)": [[456, "ivy.Container.gather_nd"]], "get_all_arrays_in_memory() (in module ivy)": [[457, "ivy.get_all_arrays_in_memory"], [534, "ivy.get_all_arrays_in_memory"]], "get_item() (in module ivy)": [[458, "ivy.get_item"], [534, "ivy.get_item"]], "get_num_dims() (in module ivy)": [[459, "ivy.get_num_dims"], [534, "ivy.get_num_dims"]], "get_num_dims() (ivy.array method)": [[459, "ivy.Array.get_num_dims"]], "get_num_dims() (ivy.container method)": [[459, "ivy.Container.get_num_dims"]], "get_referrers_recursive() (in module ivy)": [[460, "ivy.get_referrers_recursive"], [534, "ivy.get_referrers_recursive"]], "has_nans() (in module ivy)": [[461, "ivy.has_nans"], [534, "ivy.has_nans"]], "has_nans() (ivy.array method)": [[461, "ivy.Array.has_nans"]], "has_nans() (ivy.container method)": [[461, "ivy.Container.has_nans"]], "inplace_arrays_supported() (in module ivy)": [[462, "ivy.inplace_arrays_supported"], [534, "ivy.inplace_arrays_supported"]], "inplace_decrement() (in module ivy)": [[463, "ivy.inplace_decrement"], [534, "ivy.inplace_decrement"]], "inplace_decrement() (ivy.array method)": [[463, "ivy.Array.inplace_decrement"]], "inplace_decrement() (ivy.container method)": [[463, "ivy.Container.inplace_decrement"]], "inplace_increment() (in module ivy)": [[464, "ivy.inplace_increment"], [534, "ivy.inplace_increment"]], "inplace_increment() (ivy.array method)": [[464, "ivy.Array.inplace_increment"]], "inplace_increment() (ivy.container method)": [[464, "ivy.Container.inplace_increment"]], "inplace_update() (in module ivy)": [[465, "ivy.inplace_update"], [534, "ivy.inplace_update"]], "inplace_update() (ivy.array method)": [[465, "ivy.Array.inplace_update"]], "inplace_update() (ivy.container method)": [[465, "ivy.Container.inplace_update"]], "inplace_variables_supported() (in module ivy)": [[466, "ivy.inplace_variables_supported"], [534, "ivy.inplace_variables_supported"]], "is_array() (in module ivy)": [[467, "ivy.is_array"], [534, "ivy.is_array"]], "is_array() (ivy.array method)": [[467, "ivy.Array.is_array"]], "is_array() (ivy.container method)": [[467, "ivy.Container.is_array"]], "is_ivy_array() (in module ivy)": [[468, "ivy.is_ivy_array"], [534, "ivy.is_ivy_array"]], "is_ivy_array() (ivy.array method)": [[468, "ivy.Array.is_ivy_array"]], "is_ivy_array() (ivy.container method)": [[468, "ivy.Container.is_ivy_array"]], "is_ivy_container() (in module ivy)": [[469, "ivy.is_ivy_container"], [534, "ivy.is_ivy_container"]], "is_ivy_container() (ivy.array method)": [[469, "ivy.Array.is_ivy_container"]], "is_ivy_nested_array() (in module ivy)": [[470, "ivy.is_ivy_nested_array"], [534, "ivy.is_ivy_nested_array"]], "is_native_array() (in module ivy)": [[471, "ivy.is_native_array"], [534, "ivy.is_native_array"]], "is_native_array() (ivy.array method)": [[471, "ivy.Array.is_native_array"]], "is_native_array() (ivy.container method)": [[471, "ivy.Container.is_native_array"]], "isin() (in module ivy)": [[472, "ivy.isin"], [534, "ivy.isin"]], "isin() (ivy.array method)": [[472, "ivy.Array.isin"]], "isin() (ivy.container method)": [[472, "ivy.Container.isin"]], "isscalar() (in module ivy)": [[473, "ivy.isscalar"], [534, "ivy.isscalar"]], "itemsize() (in module ivy)": [[474, "ivy.itemsize"], [534, "ivy.itemsize"]], "itemsize() (ivy.array method)": [[474, "ivy.Array.itemsize"]], "itemsize() (ivy.container method)": [[474, "ivy.Container.itemsize"]], "match_kwargs() (in module ivy)": [[475, "ivy.match_kwargs"], [534, "ivy.match_kwargs"]], "multiprocessing() (in module ivy)": [[476, "ivy.multiprocessing"], [534, "ivy.multiprocessing"]], "num_arrays_in_memory() (in module ivy)": [[477, "ivy.num_arrays_in_memory"], [534, "ivy.num_arrays_in_memory"]], "print_all_arrays_in_memory() (in module ivy)": [[478, "ivy.print_all_arrays_in_memory"], [534, "ivy.print_all_arrays_in_memory"]], "scatter_flat() (in module ivy)": [[479, "ivy.scatter_flat"], [534, "ivy.scatter_flat"]], "scatter_flat() (ivy.array method)": [[479, "ivy.Array.scatter_flat"]], "scatter_flat() (ivy.container method)": [[479, "ivy.Container.scatter_flat"]], "scatter_nd() (in module ivy)": [[480, "ivy.scatter_nd"], [534, "ivy.scatter_nd"]], "scatter_nd() (ivy.array method)": [[480, "ivy.Array.scatter_nd"]], "scatter_nd() (ivy.container method)": [[480, "ivy.Container.scatter_nd"]], "set_array_mode() (in module ivy)": [[481, "ivy.set_array_mode"], [534, "ivy.set_array_mode"]], "set_exception_trace_mode() (in module ivy)": [[482, "ivy.set_exception_trace_mode"], [534, "ivy.set_exception_trace_mode"]], "set_item() (in module ivy)": [[483, "ivy.set_item"], [534, "ivy.set_item"]], "set_min_base() (in module ivy)": [[484, "ivy.set_min_base"], [534, "ivy.set_min_base"]], "set_min_denominator() (in module ivy)": [[485, "ivy.set_min_denominator"], [534, "ivy.set_min_denominator"]], "set_nestable_mode() (in module ivy)": [[486, "ivy.set_nestable_mode"], [534, "ivy.set_nestable_mode"]], "set_precise_mode() (in module ivy)": [[487, "ivy.set_precise_mode"], [534, "ivy.set_precise_mode"]], "set_queue_timeout() (in module ivy)": [[488, "ivy.set_queue_timeout"], [534, "ivy.set_queue_timeout"]], "set_shape_array_mode() (in module ivy)": [[489, "ivy.set_shape_array_mode"], [534, "ivy.set_shape_array_mode"]], "set_show_func_wrapper_trace_mode() (in module ivy)": [[490, "ivy.set_show_func_wrapper_trace_mode"], [534, "ivy.set_show_func_wrapper_trace_mode"]], "set_tmp_dir() (in module ivy)": [[491, "ivy.set_tmp_dir"], [534, "ivy.set_tmp_dir"]], "shape() (in module ivy)": [[492, "ivy.shape"], [534, "ivy.shape"]], "shape() (ivy.array method)": [[492, "ivy.Array.shape"]], "stable_divide() (in module ivy)": [[493, "ivy.stable_divide"], [534, "ivy.stable_divide"]], "stable_divide() (ivy.array method)": [[493, "ivy.Array.stable_divide"]], "stable_divide() (ivy.container method)": [[493, "ivy.Container.stable_divide"]], "stable_pow() (in module ivy)": [[494, "ivy.stable_pow"], [534, "ivy.stable_pow"]], "stable_pow() (ivy.array method)": [[494, "ivy.Array.stable_pow"]], "stable_pow() (ivy.container method)": [[494, "ivy.Container.stable_pow"]], "strides() (in module ivy)": [[495, "ivy.strides"], [534, "ivy.strides"]], "strides() (ivy.array method)": [[495, "ivy.Array.strides"]], "strides() (ivy.container method)": [[495, "ivy.Container.strides"]], "supports_inplace_updates() (in module ivy)": [[496, "ivy.supports_inplace_updates"], [534, "ivy.supports_inplace_updates"]], "supports_inplace_updates() (ivy.array method)": [[496, "ivy.Array.supports_inplace_updates"]], "supports_inplace_updates() (ivy.container method)": [[496, "ivy.Container.supports_inplace_updates"]], "to_ivy_shape() (in module ivy)": [[497, "ivy.to_ivy_shape"], [534, "ivy.to_ivy_shape"]], "to_list() (in module ivy)": [[498, "ivy.to_list"], [534, "ivy.to_list"]], "to_list() (ivy.array method)": [[498, "ivy.Array.to_list"]], "to_list() (ivy.container method)": [[498, "ivy.Container.to_list"]], "to_native_shape() (in module ivy)": [[499, "ivy.to_native_shape"], [534, "ivy.to_native_shape"]], "to_numpy() (in module ivy)": [[500, "ivy.to_numpy"], [534, "ivy.to_numpy"]], "to_numpy() (ivy.array method)": [[500, "ivy.Array.to_numpy"]], "to_numpy() (ivy.container method)": [[500, "ivy.Container.to_numpy"]], "to_scalar() (in module ivy)": [[501, "ivy.to_scalar"], [534, "ivy.to_scalar"]], "to_scalar() (ivy.array method)": [[501, "ivy.Array.to_scalar"]], "to_scalar() (ivy.container method)": [[501, "ivy.Container.to_scalar"]], "try_else_none() (in module ivy)": [[502, "ivy.try_else_none"], [534, "ivy.try_else_none"]], "unset_array_mode() (in module ivy)": [[503, "ivy.unset_array_mode"], [534, "ivy.unset_array_mode"]], "unset_exception_trace_mode() (in module ivy)": [[504, "ivy.unset_exception_trace_mode"], [534, "ivy.unset_exception_trace_mode"]], "unset_min_base() (in module ivy)": [[505, "ivy.unset_min_base"], [534, "ivy.unset_min_base"]], "unset_min_denominator() (in module ivy)": [[506, "ivy.unset_min_denominator"], [534, "ivy.unset_min_denominator"]], "unset_nestable_mode() (in module ivy)": [[507, "ivy.unset_nestable_mode"], [534, "ivy.unset_nestable_mode"]], "unset_precise_mode() (in module ivy)": [[508, "ivy.unset_precise_mode"], [534, "ivy.unset_precise_mode"]], "unset_queue_timeout() (in module ivy)": [[509, "ivy.unset_queue_timeout"], [534, "ivy.unset_queue_timeout"]], "unset_shape_array_mode() (in module ivy)": [[510, "ivy.unset_shape_array_mode"], [534, "ivy.unset_shape_array_mode"]], "unset_show_func_wrapper_trace_mode() (in module ivy)": [[511, "ivy.unset_show_func_wrapper_trace_mode"], [534, "ivy.unset_show_func_wrapper_trace_mode"]], "unset_tmp_dir() (in module ivy)": [[512, "ivy.unset_tmp_dir"], [534, "ivy.unset_tmp_dir"]], "value_is_nan() (in module ivy)": [[513, "ivy.value_is_nan"], [534, "ivy.value_is_nan"]], "value_is_nan() (ivy.array method)": [[513, "ivy.Array.value_is_nan"]], "value_is_nan() (ivy.container method)": [[513, "ivy.Container.value_is_nan"]], "vmap() (in module ivy)": [[514, "ivy.vmap"], [534, "ivy.vmap"]], "adam_step() (in module ivy)": [[515, "ivy.adam_step"], [535, "ivy.adam_step"]], "adam_step() (ivy.array method)": [[515, "ivy.Array.adam_step"]], "adam_step() (ivy.container method)": [[515, "ivy.Container.adam_step"]], "adam_update() (in module ivy)": [[516, "ivy.adam_update"], [535, "ivy.adam_update"]], "adam_update() (ivy.array method)": [[516, "ivy.Array.adam_update"]], "adam_update() (ivy.container method)": [[516, "ivy.Container.adam_update"]], "execute_with_gradients() (in module ivy)": [[517, "ivy.execute_with_gradients"], [535, "ivy.execute_with_gradients"]], "grad() (in module ivy)": [[518, "ivy.grad"], [535, "ivy.grad"]], "gradient_descent_update() (in module ivy)": [[519, "ivy.gradient_descent_update"], [535, "ivy.gradient_descent_update"]], "gradient_descent_update() (ivy.array method)": [[519, "ivy.Array.gradient_descent_update"]], "gradient_descent_update() (ivy.container method)": [[519, "ivy.Container.gradient_descent_update"]], "jac() (in module ivy)": [[520, "ivy.jac"], [535, "ivy.jac"]], "lamb_update() (in module ivy)": [[521, "ivy.lamb_update"], [535, "ivy.lamb_update"]], "lamb_update() (ivy.array method)": [[521, "ivy.Array.lamb_update"]], "lamb_update() (ivy.container method)": [[521, "ivy.Container.lamb_update"]], "lars_update() (in module ivy)": [[522, "ivy.lars_update"], [535, "ivy.lars_update"]], "lars_update() (ivy.array method)": [[522, "ivy.Array.lars_update"]], "lars_update() (ivy.container method)": [[522, "ivy.Container.lars_update"]], "optimizer_update() (in module ivy)": [[523, "ivy.optimizer_update"], [535, "ivy.optimizer_update"]], "optimizer_update() (ivy.array method)": [[523, "ivy.Array.optimizer_update"]], "optimizer_update() (ivy.container method)": [[523, "ivy.Container.optimizer_update"]], "stop_gradient() (in module ivy)": [[524, "ivy.stop_gradient"], [535, "ivy.stop_gradient"]], "stop_gradient() (ivy.array method)": [[524, "ivy.Array.stop_gradient"]], "stop_gradient() (ivy.container method)": [[524, "ivy.Container.stop_gradient"]], "value_and_grad() (in module ivy)": [[525, "ivy.value_and_grad"], [535, "ivy.value_and_grad"]], "ivy.functional.ivy.activations": [[526, "module-ivy.functional.ivy.activations"]], "e (in module ivy)": [[527, "ivy.e"]], "inf (in module ivy)": [[527, "ivy.inf"]], "ivy.functional.ivy.constants": [[527, "module-ivy.functional.ivy.constants"]], "nan (in module ivy)": [[527, "ivy.nan"]], "newaxis (in module ivy)": [[527, "ivy.newaxis"]], "pi (in module ivy)": [[527, "ivy.pi"]], "ivy.functional.ivy.control_flow_ops": [[528, "module-ivy.functional.ivy.control_flow_ops"]], "nestedsequence (class in ivy)": [[529, "ivy.NestedSequence"]], "ivy.functional.ivy.creation": [[529, "module-ivy.functional.ivy.creation"]], "defaultcomplexdtype (class in ivy)": [[530, "ivy.DefaultComplexDtype"]], "defaultdtype (class in ivy)": [[530, "ivy.DefaultDtype"]], "defaultfloatdtype (class in ivy)": [[530, "ivy.DefaultFloatDtype"]], "defaultintdtype (class in ivy)": [[530, "ivy.DefaultIntDtype"]], "defaultuintdtype (class in ivy)": [[530, "ivy.DefaultUintDtype"]], "ivy.functional.ivy.data_type": [[530, "module-ivy.functional.ivy.data_type"]], "defaultdevice (class in ivy)": [[531, "ivy.DefaultDevice"]], "profiler (class in ivy)": [[531, "ivy.Profiler"]], "ivy.functional.ivy.device": [[531, "module-ivy.functional.ivy.device"]], "ivy.functional.ivy.elementwise": [[532, "module-ivy.functional.ivy.elementwise"]], "ivy.functional.ivy.experimental": [[533, "module-ivy.functional.ivy.experimental"]], "arraymode (class in ivy)": [[534, "ivy.ArrayMode"]], "precisemode (class in ivy)": [[534, "ivy.PreciseMode"]], "ivy.functional.ivy.general": [[534, "module-ivy.functional.ivy.general"]], "ivy.functional.ivy.gradients": [[535, "module-ivy.functional.ivy.gradients"]], "conv() (in module ivy)": [[536, "ivy.conv"], [549, "ivy.conv"]], "conv1d() (in module ivy)": [[536, "ivy.conv1d"], [550, "ivy.conv1d"]], "conv1d_transpose() (in module ivy)": [[536, "ivy.conv1d_transpose"], [551, "ivy.conv1d_transpose"]], "conv2d() (in module ivy)": [[536, "ivy.conv2d"], [552, "ivy.conv2d"]], "conv2d_transpose() (in module ivy)": [[536, "ivy.conv2d_transpose"], [553, "ivy.conv2d_transpose"]], "conv3d() (in module ivy)": [[536, "ivy.conv3d"], [554, "ivy.conv3d"]], "conv3d_transpose() (in module ivy)": [[536, "ivy.conv3d_transpose"], [555, "ivy.conv3d_transpose"]], "conv_general_dilated() (in module ivy)": [[536, "ivy.conv_general_dilated"], [556, "ivy.conv_general_dilated"]], "conv_general_transpose() (in module ivy)": [[536, "ivy.conv_general_transpose"], [557, "ivy.conv_general_transpose"]], "depthwise_conv2d() (in module ivy)": [[536, "ivy.depthwise_conv2d"], [558, "ivy.depthwise_conv2d"]], "dropout() (in module ivy)": [[536, "ivy.dropout"], [559, "ivy.dropout"]], "ivy.functional.ivy.layers": [[536, "module-ivy.functional.ivy.layers"]], "linear() (in module ivy)": [[536, "ivy.linear"], [560, "ivy.linear"]], "lstm_update() (in module ivy)": [[536, "ivy.lstm_update"], [561, "ivy.lstm_update"]], "multi_head_attention() (in module ivy)": [[536, "ivy.multi_head_attention"], [562, "ivy.multi_head_attention"]], "scaled_dot_product_attention() (in module ivy)": [[536, "ivy.scaled_dot_product_attention"], [563, "ivy.scaled_dot_product_attention"]], "cholesky() (in module ivy)": [[537, "ivy.cholesky"], [564, "ivy.cholesky"]], "cross() (in module ivy)": [[537, "ivy.cross"], [565, "ivy.cross"]], "det() (in module ivy)": [[537, "ivy.det"], [566, "ivy.det"]], "diag() (in module ivy)": [[537, "ivy.diag"], [567, "ivy.diag"]], "diagonal() (in module ivy)": [[537, "ivy.diagonal"], [568, "ivy.diagonal"]], "eigh() (in module ivy)": [[537, "ivy.eigh"], [570, "ivy.eigh"]], "eigvalsh() (in module ivy)": [[537, "ivy.eigvalsh"], [571, "ivy.eigvalsh"]], "inner() (in module ivy)": [[537, "ivy.inner"], [572, "ivy.inner"]], "inv() (in module ivy)": [[537, "ivy.inv"], [573, "ivy.inv"]], "ivy.functional.ivy.linear_algebra": [[537, "module-ivy.functional.ivy.linear_algebra"]], "lu_factor() (in module ivy)": [[537, "ivy.lu_factor"], [574, "ivy.lu_factor"]], "matmul() (in module ivy)": [[537, "ivy.matmul"], [575, "ivy.matmul"]], "matrix_norm() (in module ivy)": [[537, "ivy.matrix_norm"], [576, "ivy.matrix_norm"]], "matrix_power() (in module ivy)": [[537, "ivy.matrix_power"], [577, "ivy.matrix_power"]], "matrix_rank() (in module ivy)": [[537, "ivy.matrix_rank"], [578, "ivy.matrix_rank"]], "matrix_transpose() (in module ivy)": [[537, "ivy.matrix_transpose"], [579, "ivy.matrix_transpose"]], "outer() (in module ivy)": [[537, "ivy.outer"], [580, "ivy.outer"]], "pinv() (in module ivy)": [[537, "ivy.pinv"], [581, "ivy.pinv"]], "qr() (in module ivy)": [[537, "ivy.qr"], [582, "ivy.qr"]], "slogdet() (in module ivy)": [[537, "ivy.slogdet"], [583, "ivy.slogdet"]], "solve() (in module ivy)": [[537, "ivy.solve"], [584, "ivy.solve"]], "svd() (in module ivy)": [[537, "ivy.svd"], [585, "ivy.svd"]], "svdvals() (in module ivy)": [[537, "ivy.svdvals"], [586, "ivy.svdvals"]], "tensordot() (in module ivy)": [[537, "ivy.tensordot"], [587, "ivy.tensordot"]], "tensorsolve() (in module ivy)": [[537, "ivy.tensorsolve"], [588, "ivy.tensorsolve"]], "trace() (in module ivy)": [[537, "ivy.trace"], [589, "ivy.trace"]], "vander() (in module ivy)": [[537, "ivy.vander"], [590, "ivy.vander"]], "vecdot() (in module ivy)": [[537, "ivy.vecdot"], [591, "ivy.vecdot"]], "vector_norm() (in module ivy)": [[537, "ivy.vector_norm"], [592, "ivy.vector_norm"]], "vector_to_skew_symmetric_matrix() (in module ivy)": [[537, "ivy.vector_to_skew_symmetric_matrix"], [593, "ivy.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (in module ivy)": [[538, "ivy.binary_cross_entropy"], [594, "ivy.binary_cross_entropy"]], "cross_entropy() (in module ivy)": [[538, "ivy.cross_entropy"], [595, "ivy.cross_entropy"]], "ivy.functional.ivy.losses": [[538, "module-ivy.functional.ivy.losses"]], "sparse_cross_entropy() (in module ivy)": [[538, "ivy.sparse_cross_entropy"], [596, "ivy.sparse_cross_entropy"]], "clip() (in module ivy)": [[539, "ivy.clip"], [597, "ivy.clip"]], "concat() (in module ivy)": [[539, "ivy.concat"], [598, "ivy.concat"]], "constant_pad() (in module ivy)": [[539, "ivy.constant_pad"], [599, "ivy.constant_pad"]], "expand_dims() (in module ivy)": [[539, "ivy.expand_dims"], [600, "ivy.expand_dims"]], "flip() (in module ivy)": [[539, "ivy.flip"], [601, "ivy.flip"]], "ivy.functional.ivy.manipulation": [[539, "module-ivy.functional.ivy.manipulation"]], "permute_dims() (in module ivy)": [[539, "ivy.permute_dims"], [602, "ivy.permute_dims"]], "repeat() (in module ivy)": [[539, "ivy.repeat"], [603, "ivy.repeat"]], "reshape() (in module ivy)": [[539, "ivy.reshape"], [604, "ivy.reshape"]], "roll() (in module ivy)": [[539, "ivy.roll"], [605, "ivy.roll"]], "split() (in module ivy)": [[539, "ivy.split"], [606, "ivy.split"]], "squeeze() (in module ivy)": [[539, "ivy.squeeze"], [607, "ivy.squeeze"]], "stack() (in module ivy)": [[539, "ivy.stack"], [608, "ivy.stack"]], "swapaxes() (in module ivy)": [[539, "ivy.swapaxes"], [609, "ivy.swapaxes"]], "tile() (in module ivy)": [[539, "ivy.tile"], [610, "ivy.tile"]], "unstack() (in module ivy)": [[539, "ivy.unstack"], [611, "ivy.unstack"]], "zero_pad() (in module ivy)": [[539, "ivy.zero_pad"], [612, "ivy.zero_pad"]], "fomaml_step() (in module ivy)": [[540, "ivy.fomaml_step"], [613, "ivy.fomaml_step"]], "ivy.functional.ivy.meta": [[540, "module-ivy.functional.ivy.meta"]], "maml_step() (in module ivy)": [[540, "ivy.maml_step"], [614, "ivy.maml_step"]], "reptile_step() (in module ivy)": [[540, "ivy.reptile_step"], [615, "ivy.reptile_step"]], "all_nested_indices() (in module ivy)": [[541, "ivy.all_nested_indices"], [616, "ivy.all_nested_indices"]], "copy_nest() (in module ivy)": [[541, "ivy.copy_nest"], [617, "ivy.copy_nest"]], "duplicate_array_index_chains() (in module ivy)": [[541, "ivy.duplicate_array_index_chains"], [618, "ivy.duplicate_array_index_chains"]], "index_nest() (in module ivy)": [[541, "ivy.index_nest"], [619, "ivy.index_nest"]], "insert_into_nest_at_index() (in module ivy)": [[541, "ivy.insert_into_nest_at_index"], [620, "ivy.insert_into_nest_at_index"]], "insert_into_nest_at_indices() (in module ivy)": [[541, "ivy.insert_into_nest_at_indices"], [621, "ivy.insert_into_nest_at_indices"]], "ivy.functional.ivy.nest": [[541, "module-ivy.functional.ivy.nest"]], "map() (in module ivy)": [[541, "ivy.map"], [622, "ivy.map"]], "map_nest_at_index() (in module ivy)": [[541, "ivy.map_nest_at_index"], [623, "ivy.map_nest_at_index"]], "map_nest_at_indices() (in module ivy)": [[541, "ivy.map_nest_at_indices"], [624, "ivy.map_nest_at_indices"]], "multi_index_nest() (in module ivy)": [[541, "ivy.multi_index_nest"], [625, "ivy.multi_index_nest"]], "nested_any() (in module ivy)": [[541, "ivy.nested_any"], [626, "ivy.nested_any"]], "nested_argwhere() (in module ivy)": [[541, "ivy.nested_argwhere"], [627, "ivy.nested_argwhere"]], "nested_map() (in module ivy)": [[541, "ivy.nested_map"], [628, "ivy.nested_map"]], "nested_multi_map() (in module ivy)": [[541, "ivy.nested_multi_map"], [629, "ivy.nested_multi_map"]], "prune_empty() (in module ivy)": [[541, "ivy.prune_empty"], [630, "ivy.prune_empty"]], "prune_nest_at_index() (in module ivy)": [[541, "ivy.prune_nest_at_index"], [631, "ivy.prune_nest_at_index"]], "prune_nest_at_indices() (in module ivy)": [[541, "ivy.prune_nest_at_indices"], [632, "ivy.prune_nest_at_indices"]], "set_nest_at_index() (in module ivy)": [[541, "ivy.set_nest_at_index"], [633, "ivy.set_nest_at_index"]], "set_nest_at_indices() (in module ivy)": [[541, "ivy.set_nest_at_indices"], [634, "ivy.set_nest_at_indices"]], "ivy.functional.ivy.norms": [[542, "module-ivy.functional.ivy.norms"]], "layer_norm() (in module ivy)": [[542, "ivy.layer_norm"], [635, "ivy.layer_norm"]], "ivy.functional.ivy.random": [[543, "module-ivy.functional.ivy.random"]], "multinomial() (in module ivy)": [[543, "ivy.multinomial"], [636, "ivy.multinomial"]], "randint() (in module ivy)": [[543, "ivy.randint"], [637, "ivy.randint"]], "random_normal() (in module ivy)": [[543, "ivy.random_normal"], [638, "ivy.random_normal"]], "random_uniform() (in module ivy)": [[543, "ivy.random_uniform"], [639, "ivy.random_uniform"]], "seed() (in module ivy)": [[543, "ivy.seed"], [640, "ivy.seed"]], "shuffle() (in module ivy)": [[543, "ivy.shuffle"], [641, "ivy.shuffle"]], "argmax() (in module ivy)": [[544, "ivy.argmax"], [642, "ivy.argmax"]], "argmin() (in module ivy)": [[544, "ivy.argmin"], [643, "ivy.argmin"]], "argwhere() (in module ivy)": [[544, "ivy.argwhere"], [644, "ivy.argwhere"]], "ivy.functional.ivy.searching": [[544, "module-ivy.functional.ivy.searching"]], "nonzero() (in module ivy)": [[544, "ivy.nonzero"], [645, "ivy.nonzero"]], "where() (in module ivy)": [[544, "ivy.where"], [646, "ivy.where"]], "ivy.functional.ivy.set": [[545, "module-ivy.functional.ivy.set"]], "unique_all() (in module ivy)": [[545, "ivy.unique_all"], [647, "ivy.unique_all"]], "unique_counts() (in module ivy)": [[545, "ivy.unique_counts"], [648, "ivy.unique_counts"]], "unique_inverse() (in module ivy)": [[545, "ivy.unique_inverse"], [649, "ivy.unique_inverse"]], "unique_values() (in module ivy)": [[545, "ivy.unique_values"], [650, "ivy.unique_values"]], "argsort() (in module ivy)": [[546, "ivy.argsort"], [651, "ivy.argsort"]], "ivy.functional.ivy.sorting": [[546, "module-ivy.functional.ivy.sorting"]], "msort() (in module ivy)": [[546, "ivy.msort"], [652, "ivy.msort"]], "searchsorted() (in module ivy)": [[546, "ivy.searchsorted"], [653, "ivy.searchsorted"]], "sort() (in module ivy)": [[546, "ivy.sort"], [654, "ivy.sort"]], "cumprod() (in module ivy)": [[547, "ivy.cumprod"], [655, "ivy.cumprod"]], "cumsum() (in module ivy)": [[547, "ivy.cumsum"], [656, "ivy.cumsum"]], "einsum() (in module ivy)": [[547, "ivy.einsum"], [657, "ivy.einsum"]], "ivy.functional.ivy.statistical": [[547, "module-ivy.functional.ivy.statistical"]], "max() (in module ivy)": [[547, "ivy.max"], [658, "ivy.max"]], "mean() (in module ivy)": [[547, "ivy.mean"], [659, "ivy.mean"]], "min() (in module ivy)": [[547, "ivy.min"], [660, "ivy.min"]], "prod() (in module ivy)": [[547, "ivy.prod"], [661, "ivy.prod"]], "std() (in module ivy)": [[547, "ivy.std"], [662, "ivy.std"]], "sum() (in module ivy)": [[547, "ivy.sum"], [663, "ivy.sum"]], "var() (in module ivy)": [[547, "ivy.var"], [664, "ivy.var"]], "all() (in module ivy)": [[548, "ivy.all"], [665, "ivy.all"]], "any() (in module ivy)": [[548, "ivy.any"], [666, "ivy.any"]], "ivy.functional.ivy.utility": [[548, "module-ivy.functional.ivy.utility"]], "save() (in module ivy)": [[548, "ivy.save"], [667, "ivy.save"]], "conv1d() (ivy.array method)": [[550, "ivy.Array.conv1d"]], "conv1d() (ivy.container method)": [[550, "ivy.Container.conv1d"]], "conv1d_transpose() (ivy.array method)": [[551, "ivy.Array.conv1d_transpose"]], "conv1d_transpose() (ivy.container method)": [[551, "ivy.Container.conv1d_transpose"]], "conv2d() (ivy.array method)": [[552, "ivy.Array.conv2d"]], "conv2d() (ivy.container method)": [[552, "ivy.Container.conv2d"]], "conv2d_transpose() (ivy.array method)": [[553, "ivy.Array.conv2d_transpose"]], "conv2d_transpose() (ivy.container method)": [[553, "ivy.Container.conv2d_transpose"]], "conv3d() (ivy.array method)": [[554, "ivy.Array.conv3d"]], "conv3d() (ivy.container method)": [[554, "ivy.Container.conv3d"]], "conv3d_transpose() (ivy.array method)": [[555, "ivy.Array.conv3d_transpose"]], "conv3d_transpose() (ivy.container method)": [[555, "ivy.Container.conv3d_transpose"]], "depthwise_conv2d() (ivy.array method)": [[558, "ivy.Array.depthwise_conv2d"]], "depthwise_conv2d() (ivy.container method)": [[558, "ivy.Container.depthwise_conv2d"]], "dropout() (ivy.array method)": [[559, "ivy.Array.dropout"]], "dropout() (ivy.container method)": [[559, "ivy.Container.dropout"]], "linear() (ivy.array method)": [[560, "ivy.Array.linear"]], "linear() (ivy.container method)": [[560, "ivy.Container.linear"]], "lstm_update() (ivy.array method)": [[561, "ivy.Array.lstm_update"]], "lstm_update() (ivy.container method)": [[561, "ivy.Container.lstm_update"]], "multi_head_attention() (ivy.array method)": [[562, "ivy.Array.multi_head_attention"]], "multi_head_attention() (ivy.container method)": [[562, "ivy.Container.multi_head_attention"]], "scaled_dot_product_attention() (ivy.array method)": [[563, "ivy.Array.scaled_dot_product_attention"]], "scaled_dot_product_attention() (ivy.container method)": [[563, "ivy.Container.scaled_dot_product_attention"]], "cholesky() (ivy.array method)": [[564, "ivy.Array.cholesky"]], "cholesky() (ivy.container method)": [[564, "ivy.Container.cholesky"]], "cross() (ivy.array method)": [[565, "ivy.Array.cross"]], "cross() (ivy.container method)": [[565, "ivy.Container.cross"]], "det() (ivy.array method)": [[566, "ivy.Array.det"]], "det() (ivy.container method)": [[566, "ivy.Container.det"]], "diag() (ivy.array method)": [[567, "ivy.Array.diag"]], "diag() (ivy.container method)": [[567, "ivy.Container.diag"]], "diagonal() (ivy.array method)": [[568, "ivy.Array.diagonal"]], "diagonal() (ivy.container method)": [[568, "ivy.Container.diagonal"]], "eigh() (ivy.array method)": [[570, "ivy.Array.eigh"]], "eigh() (ivy.container method)": [[570, "ivy.Container.eigh"]], "eigvalsh() (ivy.array method)": [[571, "ivy.Array.eigvalsh"]], "eigvalsh() (ivy.container method)": [[571, "ivy.Container.eigvalsh"]], "inner() (ivy.array method)": [[572, "ivy.Array.inner"]], "inner() (ivy.container method)": [[572, "ivy.Container.inner"]], "inv() (ivy.array method)": [[573, "ivy.Array.inv"]], "inv() (ivy.container method)": [[573, "ivy.Container.inv"]], "matmul() (ivy.array method)": [[575, "ivy.Array.matmul"]], "matmul() (ivy.container method)": [[575, "ivy.Container.matmul"]], "matrix_norm() (ivy.array method)": [[576, "ivy.Array.matrix_norm"]], "matrix_norm() (ivy.container method)": [[576, "ivy.Container.matrix_norm"]], "matrix_power() (ivy.array method)": [[577, "ivy.Array.matrix_power"]], "matrix_power() (ivy.container method)": [[577, "ivy.Container.matrix_power"]], "matrix_rank() (ivy.array method)": [[578, "ivy.Array.matrix_rank"]], "matrix_rank() (ivy.container method)": [[578, "ivy.Container.matrix_rank"]], "matrix_transpose() (ivy.array method)": [[579, "ivy.Array.matrix_transpose"]], "matrix_transpose() (ivy.container method)": [[579, "ivy.Container.matrix_transpose"]], "outer() (ivy.array method)": [[580, "ivy.Array.outer"]], "outer() (ivy.container method)": [[580, "ivy.Container.outer"]], "pinv() (ivy.array method)": [[581, "ivy.Array.pinv"]], "pinv() (ivy.container method)": [[581, "ivy.Container.pinv"]], "qr() (ivy.array method)": [[582, "ivy.Array.qr"]], "qr() (ivy.container method)": [[582, "ivy.Container.qr"]], "slogdet() (ivy.array method)": [[583, "ivy.Array.slogdet"]], "slogdet() (ivy.container method)": [[583, "ivy.Container.slogdet"]], "solve() (ivy.array method)": [[584, "ivy.Array.solve"]], "solve() (ivy.container method)": [[584, "ivy.Container.solve"]], "svd() (ivy.array method)": [[585, "ivy.Array.svd"]], "svd() (ivy.container method)": [[585, "ivy.Container.svd"]], "svdvals() (ivy.array method)": [[586, "ivy.Array.svdvals"]], "svdvals() (ivy.container method)": [[586, "ivy.Container.svdvals"]], "tensordot() (ivy.array method)": [[587, "ivy.Array.tensordot"]], "tensordot() (ivy.container method)": [[587, "ivy.Container.tensordot"]], "tensorsolve() (ivy.array method)": [[588, "ivy.Array.tensorsolve"]], "tensorsolve() (ivy.container method)": [[588, "ivy.Container.tensorsolve"]], "trace() (ivy.array method)": [[589, "ivy.Array.trace"]], "trace() (ivy.container method)": [[589, "ivy.Container.trace"]], "vander() (ivy.array method)": [[590, "ivy.Array.vander"]], "vander() (ivy.container method)": [[590, "ivy.Container.vander"]], "vecdot() (ivy.array method)": [[591, "ivy.Array.vecdot"]], "vecdot() (ivy.container method)": [[591, "ivy.Container.vecdot"]], "vector_norm() (ivy.array method)": [[592, "ivy.Array.vector_norm"]], "vector_norm() (ivy.container method)": [[592, "ivy.Container.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.array method)": [[593, "ivy.Array.vector_to_skew_symmetric_matrix"]], "vector_to_skew_symmetric_matrix() (ivy.container method)": [[593, "ivy.Container.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (ivy.array method)": [[594, "ivy.Array.binary_cross_entropy"]], "binary_cross_entropy() (ivy.container method)": [[594, "ivy.Container.binary_cross_entropy"]], "cross_entropy() (ivy.array method)": [[595, "ivy.Array.cross_entropy"]], "cross_entropy() (ivy.container method)": [[595, "ivy.Container.cross_entropy"]], "sparse_cross_entropy() (ivy.array method)": [[596, "ivy.Array.sparse_cross_entropy"]], "sparse_cross_entropy() (ivy.container method)": [[596, "ivy.Container.sparse_cross_entropy"]], "clip() (ivy.array method)": [[597, "ivy.Array.clip"]], "clip() (ivy.container method)": [[597, "ivy.Container.clip"]], "concat() (ivy.array method)": [[598, "ivy.Array.concat"]], "concat() (ivy.container method)": [[598, "ivy.Container.concat"]], "constant_pad() (ivy.array method)": [[599, "ivy.Array.constant_pad"]], "constant_pad() (ivy.container method)": [[599, "ivy.Container.constant_pad"]], "expand_dims() (ivy.array method)": [[600, "ivy.Array.expand_dims"]], "expand_dims() (ivy.container method)": [[600, "ivy.Container.expand_dims"]], "flip() (ivy.array method)": [[601, "ivy.Array.flip"]], "flip() (ivy.container method)": [[601, "ivy.Container.flip"]], "permute_dims() (ivy.array method)": [[602, "ivy.Array.permute_dims"]], "permute_dims() (ivy.container method)": [[602, "ivy.Container.permute_dims"]], "repeat() (ivy.array method)": [[603, "ivy.Array.repeat"]], "repeat() (ivy.container method)": [[603, "ivy.Container.repeat"]], "reshape() (ivy.array method)": [[604, "ivy.Array.reshape"]], "reshape() (ivy.container method)": [[604, "ivy.Container.reshape"]], "roll() (ivy.array method)": [[605, "ivy.Array.roll"]], "roll() (ivy.container method)": [[605, "ivy.Container.roll"]], "split() (ivy.array method)": [[606, "ivy.Array.split"]], "split() (ivy.container method)": [[606, "ivy.Container.split"]], "squeeze() (ivy.array method)": [[607, "ivy.Array.squeeze"]], "squeeze() (ivy.container method)": [[607, "ivy.Container.squeeze"]], "stack() (ivy.array method)": [[608, "ivy.Array.stack"]], "stack() (ivy.container method)": [[608, "ivy.Container.stack"]], "swapaxes() (ivy.array method)": [[609, "ivy.Array.swapaxes"]], "swapaxes() (ivy.container method)": [[609, "ivy.Container.swapaxes"]], "tile() (ivy.array method)": [[610, "ivy.Array.tile"]], "tile() (ivy.container method)": [[610, "ivy.Container.tile"]], "unstack() (ivy.array method)": [[611, "ivy.Array.unstack"]], "unstack() (ivy.container method)": [[611, "ivy.Container.unstack"]], "zero_pad() (ivy.array method)": [[612, "ivy.Array.zero_pad"]], "zero_pad() (ivy.container method)": [[612, "ivy.Container.zero_pad"]], "layer_norm() (ivy.array method)": [[635, "ivy.Array.layer_norm"]], "layer_norm() (ivy.container method)": [[635, "ivy.Container.layer_norm"]], "multinomial() (ivy.array method)": [[636, "ivy.Array.multinomial"]], "multinomial() (ivy.container method)": [[636, "ivy.Container.multinomial"]], "randint() (ivy.array method)": [[637, "ivy.Array.randint"]], "randint() (ivy.container method)": [[637, "ivy.Container.randint"]], "random_normal() (ivy.array method)": [[638, "ivy.Array.random_normal"]], "random_normal() (ivy.container method)": [[638, "ivy.Container.random_normal"]], "random_uniform() (ivy.array method)": [[639, "ivy.Array.random_uniform"]], "random_uniform() (ivy.container method)": [[639, "ivy.Container.random_uniform"]], "shuffle() (ivy.array method)": [[641, "ivy.Array.shuffle"]], "shuffle() (ivy.container method)": [[641, "ivy.Container.shuffle"]], "argmax() (ivy.array method)": [[642, "ivy.Array.argmax"]], "argmax() (ivy.container method)": [[642, "ivy.Container.argmax"]], "argmin() (ivy.array method)": [[643, "ivy.Array.argmin"]], "argmin() (ivy.container method)": [[643, "ivy.Container.argmin"]], "argwhere() (ivy.array method)": [[644, "ivy.Array.argwhere"]], "argwhere() (ivy.container method)": [[644, "ivy.Container.argwhere"]], "nonzero() (ivy.array method)": [[645, "ivy.Array.nonzero"]], "nonzero() (ivy.container method)": [[645, "ivy.Container.nonzero"]], "where() (ivy.array method)": [[646, "ivy.Array.where"]], "where() (ivy.container method)": [[646, "ivy.Container.where"]], "unique_all() (ivy.array method)": [[647, "ivy.Array.unique_all"]], "unique_all() (ivy.container method)": [[647, "ivy.Container.unique_all"]], "unique_counts() (ivy.array method)": [[648, "ivy.Array.unique_counts"]], "unique_counts() (ivy.container method)": [[648, "ivy.Container.unique_counts"]], "unique_inverse() (ivy.array method)": [[649, "ivy.Array.unique_inverse"]], "unique_inverse() (ivy.container method)": [[649, "ivy.Container.unique_inverse"]], "unique_values() (ivy.array method)": [[650, "ivy.Array.unique_values"]], "unique_values() (ivy.container method)": [[650, "ivy.Container.unique_values"]], "argsort() (ivy.array method)": [[651, "ivy.Array.argsort"]], "argsort() (ivy.container method)": [[651, "ivy.Container.argsort"]], "msort() (ivy.array method)": [[652, "ivy.Array.msort"]], "msort() (ivy.container method)": [[652, "ivy.Container.msort"]], "searchsorted() (ivy.array method)": [[653, "ivy.Array.searchsorted"]], "searchsorted() (ivy.container method)": [[653, "ivy.Container.searchsorted"]], "sort() (ivy.array method)": [[654, "ivy.Array.sort"]], "sort() (ivy.container method)": [[654, "ivy.Container.sort"]], "cumprod() (ivy.array method)": [[655, "ivy.Array.cumprod"]], "cumprod() (ivy.container method)": [[655, "ivy.Container.cumprod"]], "cumsum() (ivy.array method)": [[656, "ivy.Array.cumsum"]], "cumsum() (ivy.container method)": [[656, "ivy.Container.cumsum"]], "einsum() (ivy.array method)": [[657, "ivy.Array.einsum"]], "einsum() (ivy.container method)": [[657, "ivy.Container.einsum"]], "max() (ivy.array method)": [[658, "ivy.Array.max"]], "max() (ivy.container method)": [[658, "ivy.Container.max"]], "mean() (ivy.array method)": [[659, "ivy.Array.mean"]], "mean() (ivy.container method)": [[659, "ivy.Container.mean"]], "min() (ivy.array method)": [[660, "ivy.Array.min"]], "min() (ivy.container method)": [[660, "ivy.Container.min"]], "prod() (ivy.array method)": [[661, "ivy.Array.prod"]], "prod() (ivy.container method)": [[661, "ivy.Container.prod"]], "std() (ivy.array method)": [[662, "ivy.Array.std"]], "std() (ivy.container method)": [[662, "ivy.Container.std"]], "sum() (ivy.array method)": [[663, "ivy.Array.sum"]], "sum() (ivy.container method)": [[663, "ivy.Container.sum"]], "var() (ivy.array method)": [[664, "ivy.Array.var"]], "var() (ivy.container method)": [[664, "ivy.Container.var"]], "all() (ivy.array method)": [[665, "ivy.Array.all"]], "all() (ivy.container method)": [[665, "ivy.Container.all"]], "any() (ivy.array method)": [[666, "ivy.Array.any"]], "any() (ivy.container method)": [[666, "ivy.Container.any"]], "assert_all_close() (in module ivy_tests.test_ivy.helpers.assertions)": [[668, "ivy_tests.test_ivy.helpers.assertions.assert_all_close"]], "assert_same_type_and_shape() (in module ivy_tests.test_ivy.helpers.assertions)": [[668, "ivy_tests.test_ivy.helpers.assertions.assert_same_type_and_shape"]], "check_unsupported_device() (in module ivy_tests.test_ivy.helpers.assertions)": [[668, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device"]], "check_unsupported_device_and_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[668, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device_and_dtype"]], "check_unsupported_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[668, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_dtype"]], "ivy_tests.test_ivy.helpers.assertions": [[668, "module-ivy_tests.test_ivy.helpers.assertions"]], "test_unsupported_function() (in module ivy_tests.test_ivy.helpers.assertions)": [[668, "ivy_tests.test_ivy.helpers.assertions.test_unsupported_function"]], "value_test() (in module ivy_tests.test_ivy.helpers.assertions)": [[668, "ivy_tests.test_ivy.helpers.assertions.value_test"]], "ivy_tests.test_ivy.helpers.available_frameworks": [[669, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "args_to_container() (in module ivy_tests.test_ivy.helpers.function_testing)": [[670, "ivy_tests.test_ivy.helpers.function_testing.args_to_container"]], "args_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[670, "ivy_tests.test_ivy.helpers.function_testing.args_to_frontend"]], "arrays_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[670, "ivy_tests.test_ivy.helpers.function_testing.arrays_to_frontend"]], "as_lists() (in module ivy_tests.test_ivy.helpers.function_testing)": [[670, "ivy_tests.test_ivy.helpers.function_testing.as_lists"]], "compiled_if_required() (in module ivy_tests.test_ivy.helpers.function_testing)": [[670, "ivy_tests.test_ivy.helpers.function_testing.compiled_if_required"]], "convtrue() (in module ivy_tests.test_ivy.helpers.function_testing)": [[670, "ivy_tests.test_ivy.helpers.function_testing.convtrue"]], "create_args_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[670, "ivy_tests.test_ivy.helpers.function_testing.create_args_kwargs"]], "flatten() (in module ivy_tests.test_ivy.helpers.function_testing)": [[670, "ivy_tests.test_ivy.helpers.function_testing.flatten"]], "flatten_and_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[670, "ivy_tests.test_ivy.helpers.function_testing.flatten_and_to_np"]], "flatten_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[670, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend"]], "flatten_frontend_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[670, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_to_np"]], "get_frontend_ret() (in module ivy_tests.test_ivy.helpers.function_testing)": [[670, "ivy_tests.test_ivy.helpers.function_testing.get_frontend_ret"]], "get_ret_and_flattened_np_array() (in module ivy_tests.test_ivy.helpers.function_testing)": [[670, "ivy_tests.test_ivy.helpers.function_testing.get_ret_and_flattened_np_array"]], "gradient_incompatible_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[670, "ivy_tests.test_ivy.helpers.function_testing.gradient_incompatible_function"]], "gradient_test() (in module ivy_tests.test_ivy.helpers.function_testing)": [[670, "ivy_tests.test_ivy.helpers.function_testing.gradient_test"]], "gradient_unsupported_dtypes() (in module ivy_tests.test_ivy.helpers.function_testing)": [[670, "ivy_tests.test_ivy.helpers.function_testing.gradient_unsupported_dtypes"]], "ivy_tests.test_ivy.helpers.function_testing": [[670, "module-ivy_tests.test_ivy.helpers.function_testing"]], "kwargs_to_args_n_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[670, "ivy_tests.test_ivy.helpers.function_testing.kwargs_to_args_n_kwargs"]], "test_frontend_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[670, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_function"]], "test_frontend_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[670, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_method"]], "test_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[670, "ivy_tests.test_ivy.helpers.function_testing.test_function"]], "test_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[670, "ivy_tests.test_ivy.helpers.function_testing.test_method"]], "wrap_frontend_function_args() (in module ivy_tests.test_ivy.helpers.function_testing)": [[670, "ivy_tests.test_ivy.helpers.function_testing.wrap_frontend_function_args"]], "current_frontend_config (in module ivy_tests.test_ivy.helpers.globals)": [[671, "ivy_tests.test_ivy.helpers.globals.CURRENT_FRONTEND_CONFIG"]], "interruptedtest": [[671, "ivy_tests.test_ivy.helpers.globals.InterruptedTest"]], "testdata (class in ivy_tests.test_ivy.helpers.globals)": [[671, "ivy_tests.test_ivy.helpers.globals.TestData"]], "__init__() (ivy_tests.test_ivy.helpers.globals.interruptedtest method)": [[671, "ivy_tests.test_ivy.helpers.globals.InterruptedTest.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.globals.testdata method)": [[671, "ivy_tests.test_ivy.helpers.globals.TestData.__init__"]], "fn_name (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[671, "ivy_tests.test_ivy.helpers.globals.TestData.fn_name"]], "fn_tree (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[671, "ivy_tests.test_ivy.helpers.globals.TestData.fn_tree"]], "is_method (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[671, "ivy_tests.test_ivy.helpers.globals.TestData.is_method"]], "ivy_tests.test_ivy.helpers.globals": [[671, "module-ivy_tests.test_ivy.helpers.globals"]], "setup_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[671, "ivy_tests.test_ivy.helpers.globals.setup_api_test"]], "setup_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[671, "ivy_tests.test_ivy.helpers.globals.setup_frontend_test"]], "supported_device_dtypes (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[671, "ivy_tests.test_ivy.helpers.globals.TestData.supported_device_dtypes"]], "teardown_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[671, "ivy_tests.test_ivy.helpers.globals.teardown_api_test"]], "teardown_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[671, "ivy_tests.test_ivy.helpers.globals.teardown_frontend_test"]], "test_fn (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[671, "ivy_tests.test_ivy.helpers.globals.TestData.test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[672, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"]], "array_and_broadcastable_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[673, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_and_broadcastable_shape"]], "array_bools() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[673, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_bools"]], "array_indices_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[673, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_axis"]], "array_indices_put_along_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[673, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_put_along_axis"]], "array_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[673, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_values"]], "arrays_and_axes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[673, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_and_axes"]], "arrays_for_pooling() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[673, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_for_pooling"]], "broadcast_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[673, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.broadcast_shapes"]], "cond_data_gen_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[673, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.cond_data_gen_helper"]], "create_nested_input() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[673, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.create_nested_input"]], "dtype_and_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[673, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_and_values"]], "dtype_array_query() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[673, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_array_query"]], "dtype_array_query_val() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[673, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_array_query_val"]], "dtype_values_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[673, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_values_axis"]], "einsum_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[673, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.einsum_helper"]], "get_first_solve_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[673, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_first_solve_matrix"]], "get_second_solve_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[673, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_second_solve_matrix"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[673, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "list_of_size() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[673, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.list_of_size"]], "lists() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[673, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.lists"]], "mutually_broadcastable_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[673, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.mutually_broadcastable_shapes"]], "prod() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[673, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.prod"]], "array_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[674, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.array_dtypes"]], "get_castable_dtype() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[674, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_castable_dtype"]], "get_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[674, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[674, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "apply_safety_factor() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[675, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.apply_safety_factor"]], "embedding_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[675, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.embedding_helper"]], "get_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[675, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_axis"]], "get_bounds() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[675, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_bounds"]], "get_mean_std() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[675, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_mean_std"]], "get_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[675, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_shape"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[675, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "matrix_is_stable() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[675, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.matrix_is_stable"]], "reshape_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[675, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.reshape_shapes"]], "subsets() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[675, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.subsets"]], "x_and_filters() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[675, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.x_and_filters"]], "floats() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[676, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.floats"]], "ints() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[676, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.ints"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[676, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "number() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[676, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.number"]], "backendhandler (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[677, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler"]], "backendhandlermode (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[677, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode"]], "setbackend (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandlermode attribute)": [[677, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode.SetBackend"]], "withbackend (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandlermode attribute)": [[677, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode.WithBackend"]], "withbackendcontext (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[677, "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext"]], "__init__() (ivy_tests.test_ivy.helpers.pipeline_helper.withbackendcontext method)": [[677, "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext.__init__"]], "get_frontend_config() (in module ivy_tests.test_ivy.helpers.pipeline_helper)": [[677, "ivy_tests.test_ivy.helpers.pipeline_helper.get_frontend_config"]], "ivy_tests.test_ivy.helpers.pipeline_helper": [[677, "module-ivy_tests.test_ivy.helpers.pipeline_helper"]], "update_backend() (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandler class method)": [[677, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler.update_backend"]], "frontendmethoddata (class in ivy_tests.test_ivy.helpers.structs)": [[678, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData"]], "__init__() (ivy_tests.test_ivy.helpers.structs.frontendmethoddata method)": [[678, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.__init__"]], "framework_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[678, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.framework_init_module"]], "init_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[678, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.init_name"]], "ivy_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[678, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.ivy_init_module"]], "ivy_tests.test_ivy.helpers.structs": [[678, "module-ivy_tests.test_ivy.helpers.structs"]], "method_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[678, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.method_name"]], "frontendfunctiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[679, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags"]], "frontendmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[679, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags"]], "functiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[679, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags"]], "initmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[679, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags"]], "methodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[679, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags"]], "testflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[679, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[679, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[679, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[679, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[679, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[679, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.__init__"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[679, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[679, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[679, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[679, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[679, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.testflags method)": [[679, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags.apply_flags"]], "build_flag() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[679, "ivy_tests.test_ivy.helpers.test_parameter_flags.build_flag"]], "frontend_function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[679, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_function_flags"]], "frontend_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[679, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_method_flags"]], "function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[679, "ivy_tests.test_ivy.helpers.test_parameter_flags.function_flags"]], "init_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[679, "ivy_tests.test_ivy.helpers.test_parameter_flags.init_method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[679, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[679, "ivy_tests.test_ivy.helpers.test_parameter_flags.method_flags"]], "handle_frontend_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[680, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_method"]], "handle_frontend_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[680, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_test"]], "handle_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[680, "ivy_tests.test_ivy.helpers.testing_helpers.handle_method"]], "handle_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[680, "ivy_tests.test_ivy.helpers.testing_helpers.handle_test"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[680, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "num_positional_args() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[680, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args"]], "num_positional_args_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[680, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_method"]], "seed() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[680, "ivy_tests.test_ivy.helpers.testing_helpers.seed"]], "elu (class in ivy.stateful.activations)": [[684, "ivy.stateful.activations.ELU"]], "geglu (class in ivy.stateful.activations)": [[684, "ivy.stateful.activations.GEGLU"]], "gelu (class in ivy.stateful.activations)": [[684, "ivy.stateful.activations.GELU"]], "hardswish (class in ivy.stateful.activations)": [[684, "ivy.stateful.activations.Hardswish"]], "leakyrelu (class in ivy.stateful.activations)": [[684, "ivy.stateful.activations.LeakyReLU"]], "logsigmoid (class in ivy.stateful.activations)": [[684, "ivy.stateful.activations.LogSigmoid"]], "logsoftmax (class in ivy.stateful.activations)": [[684, "ivy.stateful.activations.LogSoftmax"]], "logit (class in ivy.stateful.activations)": [[684, "ivy.stateful.activations.Logit"]], "mish (class in ivy.stateful.activations)": [[684, "ivy.stateful.activations.Mish"]], "prelu (class in ivy.stateful.activations)": [[684, "ivy.stateful.activations.PReLU"]], "relu (class in ivy.stateful.activations)": [[684, "ivy.stateful.activations.ReLU"]], "relu6 (class in ivy.stateful.activations)": [[684, "ivy.stateful.activations.ReLU6"]], "selu (class in ivy.stateful.activations)": [[684, "ivy.stateful.activations.SeLU"]], "silu (class in ivy.stateful.activations)": [[684, "ivy.stateful.activations.SiLU"]], "sigmoid (class in ivy.stateful.activations)": [[684, "ivy.stateful.activations.Sigmoid"]], "softmax (class in ivy.stateful.activations)": [[684, "ivy.stateful.activations.Softmax"]], "softplus (class in ivy.stateful.activations)": [[684, "ivy.stateful.activations.Softplus"]], "tanh (class in ivy.stateful.activations)": [[684, "ivy.stateful.activations.Tanh"]], "__init__() (ivy.stateful.activations.elu method)": [[684, "ivy.stateful.activations.ELU.__init__"]], "__init__() (ivy.stateful.activations.geglu method)": [[684, "ivy.stateful.activations.GEGLU.__init__"]], "__init__() (ivy.stateful.activations.gelu method)": [[684, "ivy.stateful.activations.GELU.__init__"]], "__init__() (ivy.stateful.activations.hardswish method)": [[684, "ivy.stateful.activations.Hardswish.__init__"]], "__init__() (ivy.stateful.activations.leakyrelu method)": [[684, "ivy.stateful.activations.LeakyReLU.__init__"]], "__init__() (ivy.stateful.activations.logsigmoid method)": [[684, "ivy.stateful.activations.LogSigmoid.__init__"]], "__init__() (ivy.stateful.activations.logsoftmax method)": [[684, "ivy.stateful.activations.LogSoftmax.__init__"]], "__init__() (ivy.stateful.activations.logit method)": [[684, "ivy.stateful.activations.Logit.__init__"]], "__init__() (ivy.stateful.activations.mish method)": [[684, "ivy.stateful.activations.Mish.__init__"]], "__init__() (ivy.stateful.activations.prelu method)": [[684, "ivy.stateful.activations.PReLU.__init__"]], "__init__() (ivy.stateful.activations.relu method)": [[684, "ivy.stateful.activations.ReLU.__init__"]], "__init__() (ivy.stateful.activations.relu6 method)": [[684, "ivy.stateful.activations.ReLU6.__init__"]], "__init__() (ivy.stateful.activations.selu method)": [[684, "ivy.stateful.activations.SeLU.__init__"]], "__init__() (ivy.stateful.activations.silu method)": [[684, "ivy.stateful.activations.SiLU.__init__"]], "__init__() (ivy.stateful.activations.sigmoid method)": [[684, "ivy.stateful.activations.Sigmoid.__init__"]], "__init__() (ivy.stateful.activations.softmax method)": [[684, "ivy.stateful.activations.Softmax.__init__"]], "__init__() (ivy.stateful.activations.softplus method)": [[684, "ivy.stateful.activations.Softplus.__init__"]], "__init__() (ivy.stateful.activations.tanh method)": [[684, "ivy.stateful.activations.Tanh.__init__"]], "ivy.stateful.activations": [[684, "module-ivy.stateful.activations"]], "moduleconverters (class in ivy.stateful.converters)": [[685, "ivy.stateful.converters.ModuleConverters"]], "from_flax_module() (ivy.stateful.converters.moduleconverters static method)": [[685, "ivy.stateful.converters.ModuleConverters.from_flax_module"]], "from_haiku_module() (ivy.stateful.converters.moduleconverters static method)": [[685, "ivy.stateful.converters.ModuleConverters.from_haiku_module"]], "from_keras_module() (ivy.stateful.converters.moduleconverters static method)": [[685, "ivy.stateful.converters.ModuleConverters.from_keras_module"]], "from_paddle_module() (ivy.stateful.converters.moduleconverters static method)": [[685, "ivy.stateful.converters.ModuleConverters.from_paddle_module"]], "from_torch_module() (ivy.stateful.converters.moduleconverters static method)": [[685, "ivy.stateful.converters.ModuleConverters.from_torch_module"]], "ivy.stateful.converters": [[685, "module-ivy.stateful.converters"]], "to_ivy_module() (in module ivy.stateful.converters)": [[685, "ivy.stateful.converters.to_ivy_module"]], "modulehelpers (class in ivy.stateful.helpers)": [[686, "ivy.stateful.helpers.ModuleHelpers"]], "check_submod_rets() (ivy.stateful.helpers.modulehelpers method)": [[686, "ivy.stateful.helpers.ModuleHelpers.check_submod_rets"]], "get_mod_key() (ivy.stateful.helpers.modulehelpers method)": [[686, "ivy.stateful.helpers.ModuleHelpers.get_mod_key"]], "ivy.stateful.helpers": [[686, "module-ivy.stateful.helpers"]], "mod_depth() (ivy.stateful.helpers.modulehelpers method)": [[686, "ivy.stateful.helpers.ModuleHelpers.mod_depth"]], "mod_height() (ivy.stateful.helpers.modulehelpers method)": [[686, "ivy.stateful.helpers.ModuleHelpers.mod_height"]], "mod_with_top_mod_key_chain() (ivy.stateful.helpers.modulehelpers method)": [[686, "ivy.stateful.helpers.ModuleHelpers.mod_with_top_mod_key_chain"]], "show_mod_in_top_mod() (ivy.stateful.helpers.modulehelpers method)": [[686, "ivy.stateful.helpers.ModuleHelpers.show_mod_in_top_mod"]], "show_structure() (ivy.stateful.helpers.modulehelpers method)": [[686, "ivy.stateful.helpers.ModuleHelpers.show_structure"]], "show_v_in_top_v() (ivy.stateful.helpers.modulehelpers method)": [[686, "ivy.stateful.helpers.ModuleHelpers.show_v_in_top_v"]], "sub_mods() (ivy.stateful.helpers.modulehelpers method)": [[686, "ivy.stateful.helpers.ModuleHelpers.sub_mods"]], "track_submod_call_order() (ivy.stateful.helpers.modulehelpers method)": [[686, "ivy.stateful.helpers.ModuleHelpers.track_submod_call_order"]], "track_submod_rets() (ivy.stateful.helpers.modulehelpers method)": [[686, "ivy.stateful.helpers.ModuleHelpers.track_submod_rets"]], "v_with_top_v_key_chains() (ivy.stateful.helpers.modulehelpers method)": [[686, "ivy.stateful.helpers.ModuleHelpers.v_with_top_v_key_chains"]], "constant (class in ivy.stateful.initializers)": [[687, "ivy.stateful.initializers.Constant"]], "firstlayersiren (class in ivy.stateful.initializers)": [[687, "ivy.stateful.initializers.FirstLayerSiren"]], "glorotuniform (class in ivy.stateful.initializers)": [[687, "ivy.stateful.initializers.GlorotUniform"]], "initializer (class in ivy.stateful.initializers)": [[687, "ivy.stateful.initializers.Initializer"]], "kaimingnormal (class in ivy.stateful.initializers)": [[687, "ivy.stateful.initializers.KaimingNormal"]], "ones (class in ivy.stateful.initializers)": [[687, "ivy.stateful.initializers.Ones"]], "randomnormal (class in ivy.stateful.initializers)": [[687, "ivy.stateful.initializers.RandomNormal"]], "siren (class in ivy.stateful.initializers)": [[687, "ivy.stateful.initializers.Siren"]], "uniform (class in ivy.stateful.initializers)": [[687, "ivy.stateful.initializers.Uniform"]], "zeros (class in ivy.stateful.initializers)": [[687, "ivy.stateful.initializers.Zeros"]], "__init__() (ivy.stateful.initializers.constant method)": [[687, "ivy.stateful.initializers.Constant.__init__"]], "__init__() (ivy.stateful.initializers.firstlayersiren method)": [[687, "ivy.stateful.initializers.FirstLayerSiren.__init__"]], "__init__() (ivy.stateful.initializers.glorotuniform method)": [[687, "ivy.stateful.initializers.GlorotUniform.__init__"]], "__init__() (ivy.stateful.initializers.kaimingnormal method)": [[687, "ivy.stateful.initializers.KaimingNormal.__init__"]], "__init__() (ivy.stateful.initializers.ones method)": [[687, "ivy.stateful.initializers.Ones.__init__"]], "__init__() (ivy.stateful.initializers.randomnormal method)": [[687, "ivy.stateful.initializers.RandomNormal.__init__"]], "__init__() (ivy.stateful.initializers.siren method)": [[687, "ivy.stateful.initializers.Siren.__init__"]], "__init__() (ivy.stateful.initializers.uniform method)": [[687, "ivy.stateful.initializers.Uniform.__init__"]], "__init__() (ivy.stateful.initializers.zeros method)": [[687, "ivy.stateful.initializers.Zeros.__init__"]], "create_variables() (ivy.stateful.initializers.constant method)": [[687, "ivy.stateful.initializers.Constant.create_variables"]], "create_variables() (ivy.stateful.initializers.initializer method)": [[687, "ivy.stateful.initializers.Initializer.create_variables"]], "create_variables() (ivy.stateful.initializers.kaimingnormal method)": [[687, "ivy.stateful.initializers.KaimingNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.randomnormal method)": [[687, "ivy.stateful.initializers.RandomNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.uniform method)": [[687, "ivy.stateful.initializers.Uniform.create_variables"]], "ivy.stateful.initializers": [[687, "module-ivy.stateful.initializers"]], "adaptiveavgpool1d (class in ivy.stateful.layers)": [[688, "ivy.stateful.layers.AdaptiveAvgPool1d"]], "adaptiveavgpool2d (class in ivy.stateful.layers)": [[688, "ivy.stateful.layers.AdaptiveAvgPool2d"]], "avgpool1d (class in ivy.stateful.layers)": [[688, "ivy.stateful.layers.AvgPool1D"]], "avgpool2d (class in ivy.stateful.layers)": [[688, "ivy.stateful.layers.AvgPool2D"]], "avgpool3d (class in ivy.stateful.layers)": [[688, "ivy.stateful.layers.AvgPool3D"]], "conv1d (class in ivy.stateful.layers)": [[688, "ivy.stateful.layers.Conv1D"]], "conv1dtranspose (class in ivy.stateful.layers)": [[688, "ivy.stateful.layers.Conv1DTranspose"]], "conv2d (class in ivy.stateful.layers)": [[688, "ivy.stateful.layers.Conv2D"]], "conv2dtranspose (class in ivy.stateful.layers)": [[688, "ivy.stateful.layers.Conv2DTranspose"]], "conv3d (class in ivy.stateful.layers)": [[688, "ivy.stateful.layers.Conv3D"]], "conv3dtranspose (class in ivy.stateful.layers)": [[688, "ivy.stateful.layers.Conv3DTranspose"]], "dct (class in ivy.stateful.layers)": [[688, "ivy.stateful.layers.Dct"]], "depthwiseconv2d (class in ivy.stateful.layers)": [[688, "ivy.stateful.layers.DepthwiseConv2D"]], "dropout (class in ivy.stateful.layers)": [[688, "ivy.stateful.layers.Dropout"]], "embedding (class in ivy.stateful.layers)": [[688, "ivy.stateful.layers.Embedding"]], "fft (class in ivy.stateful.layers)": [[688, "ivy.stateful.layers.FFT"]], "identity (class in ivy.stateful.layers)": [[688, "ivy.stateful.layers.Identity"]], "lstm (class in ivy.stateful.layers)": [[688, "ivy.stateful.layers.LSTM"]], "linear (class in ivy.stateful.layers)": [[688, "ivy.stateful.layers.Linear"]], "maxpool1d (class in ivy.stateful.layers)": [[688, "ivy.stateful.layers.MaxPool1D"]], "maxpool2d (class in ivy.stateful.layers)": [[688, "ivy.stateful.layers.MaxPool2D"]], "maxpool3d (class in ivy.stateful.layers)": [[688, "ivy.stateful.layers.MaxPool3D"]], "multiheadattention (class in ivy.stateful.layers)": [[688, "ivy.stateful.layers.MultiHeadAttention"]], "__init__() (ivy.stateful.layers.adaptiveavgpool1d method)": [[688, "ivy.stateful.layers.AdaptiveAvgPool1d.__init__"]], "__init__() (ivy.stateful.layers.adaptiveavgpool2d method)": [[688, "ivy.stateful.layers.AdaptiveAvgPool2d.__init__"]], "__init__() (ivy.stateful.layers.avgpool1d method)": [[688, "ivy.stateful.layers.AvgPool1D.__init__"]], "__init__() (ivy.stateful.layers.avgpool2d method)": [[688, "ivy.stateful.layers.AvgPool2D.__init__"]], "__init__() (ivy.stateful.layers.avgpool3d method)": [[688, "ivy.stateful.layers.AvgPool3D.__init__"]], "__init__() (ivy.stateful.layers.conv1d method)": [[688, "ivy.stateful.layers.Conv1D.__init__"]], "__init__() (ivy.stateful.layers.conv1dtranspose method)": [[688, "ivy.stateful.layers.Conv1DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv2d method)": [[688, "ivy.stateful.layers.Conv2D.__init__"]], "__init__() (ivy.stateful.layers.conv2dtranspose method)": [[688, "ivy.stateful.layers.Conv2DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv3d method)": [[688, "ivy.stateful.layers.Conv3D.__init__"]], "__init__() (ivy.stateful.layers.conv3dtranspose method)": [[688, "ivy.stateful.layers.Conv3DTranspose.__init__"]], "__init__() (ivy.stateful.layers.dct method)": [[688, "ivy.stateful.layers.Dct.__init__"]], "__init__() (ivy.stateful.layers.depthwiseconv2d method)": [[688, "ivy.stateful.layers.DepthwiseConv2D.__init__"]], "__init__() (ivy.stateful.layers.dropout method)": [[688, "ivy.stateful.layers.Dropout.__init__"]], "__init__() (ivy.stateful.layers.embedding method)": [[688, "ivy.stateful.layers.Embedding.__init__"]], "__init__() (ivy.stateful.layers.fft method)": [[688, "ivy.stateful.layers.FFT.__init__"]], "__init__() (ivy.stateful.layers.identity method)": [[688, "ivy.stateful.layers.Identity.__init__"]], "__init__() (ivy.stateful.layers.lstm method)": [[688, "ivy.stateful.layers.LSTM.__init__"]], "__init__() (ivy.stateful.layers.linear method)": [[688, "ivy.stateful.layers.Linear.__init__"]], "__init__() (ivy.stateful.layers.maxpool1d method)": [[688, "ivy.stateful.layers.MaxPool1D.__init__"]], "__init__() (ivy.stateful.layers.maxpool2d method)": [[688, "ivy.stateful.layers.MaxPool2D.__init__"]], "__init__() (ivy.stateful.layers.maxpool3d method)": [[688, "ivy.stateful.layers.MaxPool3D.__init__"]], "__init__() (ivy.stateful.layers.multiheadattention method)": [[688, "ivy.stateful.layers.MultiHeadAttention.__init__"]], "get_initial_state() (ivy.stateful.layers.lstm method)": [[688, "ivy.stateful.layers.LSTM.get_initial_state"]], "ivy.stateful.layers": [[688, "module-ivy.stateful.layers"]], "binarycrossentropyloss (class in ivy.stateful.losses)": [[689, "ivy.stateful.losses.BinaryCrossEntropyLoss"]], "crossentropyloss (class in ivy.stateful.losses)": [[689, "ivy.stateful.losses.CrossEntropyLoss"]], "logpoissonloss (class in ivy.stateful.losses)": [[689, "ivy.stateful.losses.LogPoissonLoss"]], "__init__() (ivy.stateful.losses.binarycrossentropyloss method)": [[689, "ivy.stateful.losses.BinaryCrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.crossentropyloss method)": [[689, "ivy.stateful.losses.CrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.logpoissonloss method)": [[689, "ivy.stateful.losses.LogPoissonLoss.__init__"]], "ivy.stateful.losses": [[689, "module-ivy.stateful.losses"]], "module (class in ivy.stateful.module)": [[690, "ivy.stateful.module.Module"]], "modulemeta (class in ivy.stateful.module)": [[690, "ivy.stateful.module.ModuleMeta"]], "__call__() (ivy.stateful.module.module method)": [[690, "ivy.stateful.module.Module.__call__"]], "__init__() (ivy.stateful.module.module method)": [[690, "ivy.stateful.module.Module.__init__"]], "build() (ivy.stateful.module.module method)": [[690, "ivy.stateful.module.Module.build"]], "build_mode (ivy.stateful.module.module property)": [[690, "ivy.stateful.module.Module.build_mode"]], "built_ (ivy.stateful.module.module property)": [[690, "ivy.stateful.module.Module.built_"]], "compile() (ivy.stateful.module.module method)": [[690, "ivy.stateful.module.Module.compile"]], "ivy.stateful.module": [[690, "module-ivy.stateful.module"]], "load() (ivy.stateful.module.module static method)": [[690, "ivy.stateful.module.Module.load"]], "register_buffer() (ivy.stateful.module.module method)": [[690, "ivy.stateful.module.Module.register_buffer"]], "save() (ivy.stateful.module.module method)": [[690, "ivy.stateful.module.Module.save"]], "save_weights() (ivy.stateful.module.module method)": [[690, "ivy.stateful.module.Module.save_weights"]], "show_graph() (ivy.stateful.module.module method)": [[690, "ivy.stateful.module.Module.show_graph"]], "batchnorm2d (class in ivy.stateful.norms)": [[691, "ivy.stateful.norms.BatchNorm2D"]], "layernorm (class in ivy.stateful.norms)": [[691, "ivy.stateful.norms.LayerNorm"]], "__init__() (ivy.stateful.norms.batchnorm2d method)": [[691, "ivy.stateful.norms.BatchNorm2D.__init__"]], "__init__() (ivy.stateful.norms.layernorm method)": [[691, "ivy.stateful.norms.LayerNorm.__init__"]], "ivy.stateful.norms": [[691, "module-ivy.stateful.norms"]], "adam (class in ivy.stateful.optimizers)": [[692, "ivy.stateful.optimizers.Adam"]], "lamb (class in ivy.stateful.optimizers)": [[692, "ivy.stateful.optimizers.LAMB"]], "lars (class in ivy.stateful.optimizers)": [[692, "ivy.stateful.optimizers.LARS"]], "optimizer (class in ivy.stateful.optimizers)": [[692, "ivy.stateful.optimizers.Optimizer"]], "sgd (class in ivy.stateful.optimizers)": [[692, "ivy.stateful.optimizers.SGD"]], "__init__() (ivy.stateful.optimizers.adam method)": [[692, "ivy.stateful.optimizers.Adam.__init__"]], "__init__() (ivy.stateful.optimizers.lamb method)": [[692, "ivy.stateful.optimizers.LAMB.__init__"]], "__init__() (ivy.stateful.optimizers.lars method)": [[692, "ivy.stateful.optimizers.LARS.__init__"]], "__init__() (ivy.stateful.optimizers.optimizer method)": [[692, "ivy.stateful.optimizers.Optimizer.__init__"]], "__init__() (ivy.stateful.optimizers.sgd method)": [[692, "ivy.stateful.optimizers.SGD.__init__"]], "ivy.stateful.optimizers": [[692, "module-ivy.stateful.optimizers"]], "set_state() (ivy.stateful.optimizers.adam method)": [[692, "ivy.stateful.optimizers.Adam.set_state"]], "set_state() (ivy.stateful.optimizers.lamb method)": [[692, "ivy.stateful.optimizers.LAMB.set_state"]], "set_state() (ivy.stateful.optimizers.lars method)": [[692, "ivy.stateful.optimizers.LARS.set_state"]], "set_state() (ivy.stateful.optimizers.optimizer method)": [[692, "ivy.stateful.optimizers.Optimizer.set_state"]], "set_state() (ivy.stateful.optimizers.sgd method)": [[692, "ivy.stateful.optimizers.SGD.set_state"]], "state (ivy.stateful.optimizers.adam property)": [[692, "ivy.stateful.optimizers.Adam.state"]], "state (ivy.stateful.optimizers.lamb property)": [[692, "ivy.stateful.optimizers.LAMB.state"]], "state (ivy.stateful.optimizers.lars property)": [[692, "ivy.stateful.optimizers.LARS.state"]], "state (ivy.stateful.optimizers.sgd property)": [[692, "ivy.stateful.optimizers.SGD.state"]], "step() (ivy.stateful.optimizers.optimizer method)": [[692, "ivy.stateful.optimizers.Optimizer.step"]], "sequential (class in ivy.stateful.sequential)": [[693, "ivy.stateful.sequential.Sequential"]], "__init__() (ivy.stateful.sequential.sequential method)": [[693, "ivy.stateful.sequential.Sequential.__init__"]], "ivy.stateful.sequential": [[693, "module-ivy.stateful.sequential"]], "check_all() (in module ivy.utils.assertions)": [[694, "ivy.utils.assertions.check_all"]], "check_all_or_any_fn() (in module ivy.utils.assertions)": [[694, "ivy.utils.assertions.check_all_or_any_fn"]], "check_any() (in module ivy.utils.assertions)": [[694, "ivy.utils.assertions.check_any"]], "check_dev_correct_formatting() (in module ivy.utils.assertions)": [[694, "ivy.utils.assertions.check_dev_correct_formatting"]], "check_dimensions() (in module ivy.utils.assertions)": [[694, "ivy.utils.assertions.check_dimensions"]], "check_elem_in_list() (in module ivy.utils.assertions)": [[694, "ivy.utils.assertions.check_elem_in_list"]], "check_equal() (in module ivy.utils.assertions)": [[694, "ivy.utils.assertions.check_equal"]], "check_exists() (in module ivy.utils.assertions)": [[694, "ivy.utils.assertions.check_exists"]], "check_false() (in module ivy.utils.assertions)": [[694, "ivy.utils.assertions.check_false"]], "check_fill_value_and_dtype_are_compatible() (in module ivy.utils.assertions)": [[694, "ivy.utils.assertions.check_fill_value_and_dtype_are_compatible"]], "check_gather_input_valid() (in module ivy.utils.assertions)": [[694, "ivy.utils.assertions.check_gather_input_valid"]], "check_gather_nd_input_valid() (in module ivy.utils.assertions)": [[694, "ivy.utils.assertions.check_gather_nd_input_valid"]], "check_greater() (in module ivy.utils.assertions)": [[694, "ivy.utils.assertions.check_greater"]], "check_inplace_sizes_valid() (in module ivy.utils.assertions)": [[694, "ivy.utils.assertions.check_inplace_sizes_valid"]], "check_isinstance() (in module ivy.utils.assertions)": [[694, "ivy.utils.assertions.check_isinstance"]], "check_kernel_padding_size() (in module ivy.utils.assertions)": [[694, "ivy.utils.assertions.check_kernel_padding_size"]], "check_less() (in module ivy.utils.assertions)": [[694, "ivy.utils.assertions.check_less"]], "check_one_way_broadcastable() (in module ivy.utils.assertions)": [[694, "ivy.utils.assertions.check_one_way_broadcastable"]], "check_same_dtype() (in module ivy.utils.assertions)": [[694, "ivy.utils.assertions.check_same_dtype"]], "check_shape() (in module ivy.utils.assertions)": [[694, "ivy.utils.assertions.check_shape"]], "check_shapes_broadcastable() (in module ivy.utils.assertions)": [[694, "ivy.utils.assertions.check_shapes_broadcastable"]], "check_true() (in module ivy.utils.assertions)": [[694, "ivy.utils.assertions.check_true"]], "check_unsorted_segment_min_valid_params() (in module ivy.utils.assertions)": [[694, "ivy.utils.assertions.check_unsorted_segment_min_valid_params"]], "ivy.utils.assertions": [[694, "module-ivy.utils.assertions"]], "ivy.utils.backend": [[695, "module-ivy.utils.backend"]], "importtransformer (class in ivy.utils.backend.ast_helpers)": [[696, "ivy.utils.backend.ast_helpers.ImportTransformer"]], "ivyloader (class in ivy.utils.backend.ast_helpers)": [[696, "ivy.utils.backend.ast_helpers.IvyLoader"]], "ivypathfinder (class in ivy.utils.backend.ast_helpers)": [[696, "ivy.utils.backend.ast_helpers.IvyPathFinder"]], "__init__() (ivy.utils.backend.ast_helpers.importtransformer method)": [[696, "ivy.utils.backend.ast_helpers.ImportTransformer.__init__"]], "__init__() (ivy.utils.backend.ast_helpers.ivyloader method)": [[696, "ivy.utils.backend.ast_helpers.IvyLoader.__init__"]], "exec_module() (ivy.utils.backend.ast_helpers.ivyloader method)": [[696, "ivy.utils.backend.ast_helpers.IvyLoader.exec_module"]], "find_spec() (ivy.utils.backend.ast_helpers.ivypathfinder method)": [[696, "ivy.utils.backend.ast_helpers.IvyPathFinder.find_spec"]], "impersonate_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[696, "ivy.utils.backend.ast_helpers.ImportTransformer.impersonate_import"]], "ivy.utils.backend.ast_helpers": [[696, "module-ivy.utils.backend.ast_helpers"]], "visit_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[696, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_Import"]], "visit_importfrom() (ivy.utils.backend.ast_helpers.importtransformer method)": [[696, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_ImportFrom"]], "contextmanager (class in ivy.utils.backend.handler)": [[697, "ivy.utils.backend.handler.ContextManager"]], "__init__() (ivy.utils.backend.handler.contextmanager method)": [[697, "ivy.utils.backend.handler.ContextManager.__init__"]], "choose_random_backend() (in module ivy.utils.backend.handler)": [[697, "ivy.utils.backend.handler.choose_random_backend"]], "convert_from_numpy_to_target_backend() (in module ivy.utils.backend.handler)": [[697, "ivy.utils.backend.handler.convert_from_numpy_to_target_backend"]], "convert_from_source_backend_to_numpy() (in module ivy.utils.backend.handler)": [[697, "ivy.utils.backend.handler.convert_from_source_backend_to_numpy"]], "current_backend() (in module ivy.utils.backend.handler)": [[697, "ivy.utils.backend.handler.current_backend"]], "fn_name_from_version_specific_fn_name() (in module ivy.utils.backend.handler)": [[697, "ivy.utils.backend.handler.fn_name_from_version_specific_fn_name"]], "ivy.utils.backend.handler": [[697, "module-ivy.utils.backend.handler"]], "prevent_access_locally() (in module ivy.utils.backend.handler)": [[697, "ivy.utils.backend.handler.prevent_access_locally"]], "previous_backend() (in module ivy.utils.backend.handler)": [[697, "ivy.utils.backend.handler.previous_backend"]], "set_backend() (in module ivy.utils.backend.handler)": [[697, "ivy.utils.backend.handler.set_backend"]], "set_backend_to_specific_version() (in module ivy.utils.backend.handler)": [[697, "ivy.utils.backend.handler.set_backend_to_specific_version"]], "set_jax_backend() (in module ivy.utils.backend.handler)": [[697, "ivy.utils.backend.handler.set_jax_backend"]], "set_mxnet_backend() (in module ivy.utils.backend.handler)": [[697, "ivy.utils.backend.handler.set_mxnet_backend"]], "set_numpy_backend() (in module ivy.utils.backend.handler)": [[697, "ivy.utils.backend.handler.set_numpy_backend"]], "set_paddle_backend() (in module ivy.utils.backend.handler)": [[697, "ivy.utils.backend.handler.set_paddle_backend"]], "set_tensorflow_backend() (in module ivy.utils.backend.handler)": [[697, "ivy.utils.backend.handler.set_tensorflow_backend"]], "set_torch_backend() (in module ivy.utils.backend.handler)": [[697, "ivy.utils.backend.handler.set_torch_backend"]], "unset_backend() (in module ivy.utils.backend.handler)": [[697, "ivy.utils.backend.handler.unset_backend"]], "with_backend() (in module ivy.utils.backend.handler)": [[697, "ivy.utils.backend.handler.with_backend"]], "available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[698, "ivy.utils.backend.sub_backend_handler.available_sub_backends"]], "clear_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[698, "ivy.utils.backend.sub_backend_handler.clear_sub_backends"]], "find_available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[698, "ivy.utils.backend.sub_backend_handler.find_available_sub_backends"]], "ivy.utils.backend.sub_backend_handler": [[698, "module-ivy.utils.backend.sub_backend_handler"]], "set_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[698, "ivy.utils.backend.sub_backend_handler.set_sub_backend"]], "unset_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[698, "ivy.utils.backend.sub_backend_handler.unset_sub_backend"]], "import_module() (in module ivy.utils.dynamic_import)": [[699, "ivy.utils.dynamic_import.import_module"]], "ivy.utils.dynamic_import": [[699, "module-ivy.utils.dynamic_import"]], "convert_interleaved_input() (in module ivy.utils.einsum_parser)": [[700, "ivy.utils.einsum_parser.convert_interleaved_input"]], "convert_subscripts() (in module ivy.utils.einsum_parser)": [[700, "ivy.utils.einsum_parser.convert_subscripts"]], "find_output_shape() (in module ivy.utils.einsum_parser)": [[700, "ivy.utils.einsum_parser.find_output_shape"]], "find_output_str() (in module ivy.utils.einsum_parser)": [[700, "ivy.utils.einsum_parser.find_output_str"]], "gen_unused_symbols() (in module ivy.utils.einsum_parser)": [[700, "ivy.utils.einsum_parser.gen_unused_symbols"]], "get_symbol() (in module ivy.utils.einsum_parser)": [[700, "ivy.utils.einsum_parser.get_symbol"]], "has_valid_einsum_chars_only() (in module ivy.utils.einsum_parser)": [[700, "ivy.utils.einsum_parser.has_valid_einsum_chars_only"]], "is_valid_einsum_char() (in module ivy.utils.einsum_parser)": [[700, "ivy.utils.einsum_parser.is_valid_einsum_char"]], "ivy.utils.einsum_parser": [[700, "module-ivy.utils.einsum_parser"]], "legalise_einsum_expr() (in module ivy.utils.einsum_parser)": [[700, "ivy.utils.einsum_parser.legalise_einsum_expr"]], "possibly_convert_to_numpy() (in module ivy.utils.einsum_parser)": [[700, "ivy.utils.einsum_parser.possibly_convert_to_numpy"]], "invalidbackendexception": [[701, "ivy.utils.exceptions.InvalidBackendException"]], "ivyattributeerror": [[701, "ivy.utils.exceptions.IvyAttributeError"]], "ivybackendexception": [[701, "ivy.utils.exceptions.IvyBackendException"]], "ivybroadcastshapeerror": [[701, "ivy.utils.exceptions.IvyBroadcastShapeError"]], "ivydeviceerror": [[701, "ivy.utils.exceptions.IvyDeviceError"]], "ivydtypepromotionerror": [[701, "ivy.utils.exceptions.IvyDtypePromotionError"]], "ivyerror": [[701, "ivy.utils.exceptions.IvyError"]], "ivyexception": [[701, "ivy.utils.exceptions.IvyException"]], "ivyindexerror": [[701, "ivy.utils.exceptions.IvyIndexError"]], "ivynotimplementedexception": [[701, "ivy.utils.exceptions.IvyNotImplementedException"]], "ivyvalueerror": [[701, "ivy.utils.exceptions.IvyValueError"]], "__init__() (ivy.utils.exceptions.invalidbackendexception method)": [[701, "ivy.utils.exceptions.InvalidBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivyattributeerror method)": [[701, "ivy.utils.exceptions.IvyAttributeError.__init__"]], "__init__() (ivy.utils.exceptions.ivybackendexception method)": [[701, "ivy.utils.exceptions.IvyBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivybroadcastshapeerror method)": [[701, "ivy.utils.exceptions.IvyBroadcastShapeError.__init__"]], "__init__() (ivy.utils.exceptions.ivydeviceerror method)": [[701, "ivy.utils.exceptions.IvyDeviceError.__init__"]], "__init__() (ivy.utils.exceptions.ivydtypepromotionerror method)": [[701, "ivy.utils.exceptions.IvyDtypePromotionError.__init__"]], "__init__() (ivy.utils.exceptions.ivyerror method)": [[701, "ivy.utils.exceptions.IvyError.__init__"]], "__init__() (ivy.utils.exceptions.ivyexception method)": [[701, "ivy.utils.exceptions.IvyException.__init__"]], "__init__() (ivy.utils.exceptions.ivyindexerror method)": [[701, "ivy.utils.exceptions.IvyIndexError.__init__"]], "__init__() (ivy.utils.exceptions.ivynotimplementedexception method)": [[701, "ivy.utils.exceptions.IvyNotImplementedException.__init__"]], "__init__() (ivy.utils.exceptions.ivyvalueerror method)": [[701, "ivy.utils.exceptions.IvyValueError.__init__"]], "handle_exceptions() (in module ivy.utils.exceptions)": [[701, "ivy.utils.exceptions.handle_exceptions"]], "ivy.utils.exceptions": [[701, "module-ivy.utils.exceptions"]], "add_array_specs() (in module ivy.utils.inspection)": [[702, "ivy.utils.inspection.add_array_specs"]], "fn_array_spec() (in module ivy.utils.inspection)": [[702, "ivy.utils.inspection.fn_array_spec"]], "ivy.utils.inspection": [[702, "module-ivy.utils.inspection"]], "ivy.utils.logging": [[703, "module-ivy.utils.logging"]], "set_logging_mode() (in module ivy.utils.logging)": [[703, "ivy.utils.logging.set_logging_mode"]], "unset_logging_mode() (in module ivy.utils.logging)": [[703, "ivy.utils.logging.unset_logging_mode"]], "profiler (class in ivy.utils.profiler)": [[704, "ivy.utils.profiler.Profiler"]], "__init__() (ivy.utils.profiler.profiler method)": [[704, "ivy.utils.profiler.Profiler.__init__"]], "ivy.utils.profiler": [[704, "module-ivy.utils.profiler"]], "print_stats (ivy.utils.profiler.profiler attribute)": [[704, "ivy.utils.profiler.Profiler.print_stats"]], "viz (ivy.utils.profiler.profiler attribute)": [[704, "ivy.utils.profiler.Profiler.viz"]], "cprint() (in module ivy.utils.verbosity)": [[705, "ivy.utils.verbosity.cprint"]], "ivy.utils.verbosity": [[705, "module-ivy.utils.verbosity"]], "applied libraries": [[753, "term-Applied-Libraries"]], "automatic code conversions": [[753, "term-Automatic-Code-Conversions"]], "backend handler": [[753, "term-Backend-Handler"]], "compositional functions": [[753, "term-Compositional-Functions"]], "convenience functions": [[753, "term-Convenience-Functions"]], "framework": [[753, "term-Framework"]], "framework handler": [[753, "term-Framework-Handler"]], "graph compiler": [[753, "term-Graph-Compiler"]], "ivy array": [[753, "term-Ivy-Array"]], "ivy backends": [[753, "term-Ivy-Backends"]], "ivy builder": [[753, "term-Ivy-Builder"]], "ivy compiler": [[753, "term-Ivy-Compiler"]], "ivy container": [[753, "term-Ivy-Container"]], "ivy frontends": [[753, "term-Ivy-Frontends"]], "ivy functional api": [[753, "term-Ivy-Functional-API"]], "ivy graph compiler": [[753, "term-Ivy-Graph-Compiler"]], "ivy transpiler": [[753, "term-Ivy-Transpiler"]], "mixed functions": [[753, "term-Mixed-Functions"]], "native array": [[753, "term-Native-Array"]], "nestable functions": [[753, "term-Nestable-Functions"]], "pipeline": [[753, "term-Pipeline"]], "primary functions": [[753, "term-Primary-Functions"]], "standalone functions": [[753, "term-Standalone-Functions"]], "submodule helper functions": [[753, "term-Submodule-Helper-Functions"]]}})