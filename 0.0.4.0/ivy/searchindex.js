Search.setIndex({"docnames": ["demos/README", "demos/assets/01_template", "demos/examples_and_demos", "demos/examples_and_demos/alexnet_demo", "demos/examples_and_demos/bert_demo", "demos/examples_and_demos/image_segmentation_with_ivy_unet", "demos/examples_and_demos/mmpretrain_to_jax", "demos/examples_and_demos/resnet_demo", "demos/examples_and_demos/torch_to_jax", "demos/guides", "demos/guides/01_transpiling_a_torch_model", "demos/guides/02_transpiling_a_haiku_model", "demos/guides/03_transpiling_a_tf_model", "demos/guides/04_developing_a_convnet_with_ivy", "demos/index", "demos/learn_the_basics", "demos/learn_the_basics/01_write_ivy_code", "demos/learn_the_basics/02_unify_code", "demos/learn_the_basics/03_compile_code", "demos/learn_the_basics/04_transpile_code", "demos/learn_the_basics/05_lazy_vs_eager", "demos/learn_the_basics/06_how_to_use_decorators", "demos/learn_the_basics/07_transpile_any_library", "demos/learn_the_basics/08_transpile_any_model", "demos/learn_the_basics/09_write_a_model_using_ivy", "demos/misc/odsc", "demos/quickstart", "demos/wip/0_building_blocks/0_0_unify", "demos/wip/0_building_blocks/0_1_compile", "demos/wip/0_building_blocks/0_2_transpile", "demos/wip/1_the_basics/1_0_lazy_vs_eager", "demos/wip/1_the_basics/1_1_framework_selection", "demos/wip/1_the_basics/1_2_as_a_decorator", "demos/wip/1_the_basics/1_3_dynamic_vs_static", "demos/wip/2_libraries/2_0_kornia", "demos/wip/3_models/3_0_perceiver", "demos/wip/3_models/3_1_stable_diffusion", "demos/wip/basic_operations_with_ivy", "demos/wip/compilation_of_a_basic_function", "demos/wip/deepmind_perceiver_io", "demos/wip/deepmind_perceiverio", "demos/wip/end_to_end_training_pipeline_in_ivy", "demos/wip/hf_tensorflow_deit", "demos/wip/ivy_as_a_transpiler_intro", "demos/wip/resnet_18", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type", "docs/data_classes/data_classes/array/ivy.data_classes.array.device", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental", "docs/data_classes/data_classes/array/ivy.data_classes.array.general", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients", "docs/data_classes/data_classes/array/ivy.data_classes.array.image", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms", "docs/data_classes/data_classes/array/ivy.data_classes.array.random", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching", "docs/data_classes/data_classes/array/ivy.data_classes.array.set", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations", "docs/data_classes/data_classes/container/ivy.data_classes.container.base", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type", "docs/data_classes/data_classes/container/ivy.data_classes.container.device", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental", "docs/data_classes/data_classes/container/ivy.data_classes.container.general", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients", "docs/data_classes/data_classes/container/ivy.data_classes.container.image", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms", "docs/data_classes/data_classes/container/ivy.data_classes.container.random", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching", "docs/data_classes/data_classes/container/ivy.data_classes.container.set", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.parafac2_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tr_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tt_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor", "docs/data_classes/data_classes/ivy.data_classes.array", "docs/data_classes/data_classes/ivy.data_classes.container", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor", "docs/data_classes/data_classes/ivy.data_classes.nested_array", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise", "docs/data_classes/ivy.data_classes", "docs/functional/ivy.functional.ivy", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.to_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.dev", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.celu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardtanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.tanhshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_parafac2", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tr", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tt", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amin", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.sliding_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.stft", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.batched_outer", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.general_inner_product", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.higher_order_moment", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.solve_triangular", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tensor_train", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tt_matrix_to_tensor", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.kl_div", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.poisson_nll_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.column_stack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.trim_zeros", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str", "docs/functional/ivy/general/ivy.functional.ivy.general.default", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat", "docs/functional/ivy/general/ivy.functional.ivy.general.exists", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.gather", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array", "docs/functional/ivy/general/ivy.functional.ivy.general.isin", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.shape", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow", "docs/functional/ivy/general/ivy.functional.ivy.general.strides", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad", "docs/functional/ivy/ivy.functional.ivy.activations", "docs/functional/ivy/ivy.functional.ivy.constants", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops", "docs/functional/ivy/ivy.functional.ivy.creation", "docs/functional/ivy/ivy.functional.ivy.data_type", "docs/functional/ivy/ivy.functional.ivy.device", "docs/functional/ivy/ivy.functional.ivy.elementwise", "docs/functional/ivy/ivy.functional.ivy.experimental", "docs/functional/ivy/ivy.functional.ivy.general", "docs/functional/ivy/ivy.functional.ivy.gradients", "docs/functional/ivy/ivy.functional.ivy.layers", "docs/functional/ivy/ivy.functional.ivy.linear_algebra", "docs/functional/ivy/ivy.functional.ivy.losses", "docs/functional/ivy/ivy.functional.ivy.manipulation", "docs/functional/ivy/ivy.functional.ivy.meta", "docs/functional/ivy/ivy.functional.ivy.nest", "docs/functional/ivy/ivy.functional.ivy.norms", "docs/functional/ivy/ivy.functional.ivy.random", "docs/functional/ivy/ivy.functional.ivy.searching", "docs/functional/ivy/ivy.functional.ivy.set", "docs/functional/ivy/ivy.functional.ivy.sorting", "docs/functional/ivy/ivy.functional.ivy.statistical", "docs/functional/ivy/ivy.functional.ivy.utility", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention", "docs/functional/ivy/layers/ivy.functional.ivy.layers.nms", "docs/functional/ivy/layers/ivy.functional.ivy.layers.roi_align", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial", "docs/functional/ivy/random/ivy.functional.ivy.random.randint", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform", "docs/functional/ivy/random/ivy.functional.ivy.random.seed", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save", "docs/helpers/ivy_tests.test_ivy.helpers.assertions", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing", "docs/helpers/ivy_tests.test_ivy.helpers.globals", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.multiprocessing", "docs/helpers/ivy_tests.test_ivy.helpers.pipeline_helper", "docs/helpers/ivy_tests.test_ivy.helpers.structs", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers", "docs/ivy.stateful", "docs/ivy.utils", "docs/ivy_tests.test_ivy.helpers", "docs/stateful/ivy.stateful.activations", "docs/stateful/ivy.stateful.converters", "docs/stateful/ivy.stateful.helpers", "docs/stateful/ivy.stateful.initializers", "docs/stateful/ivy.stateful.layers", "docs/stateful/ivy.stateful.losses", "docs/stateful/ivy.stateful.module", "docs/stateful/ivy.stateful.norms", "docs/stateful/ivy.stateful.optimizers", "docs/stateful/ivy.stateful.sequential", "docs/utils/ivy.utils.assertions", "docs/utils/ivy.utils.backend", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler", "docs/utils/ivy.utils.binaries", "docs/utils/ivy.utils.dynamic_import", "docs/utils/ivy.utils.einsum_parser", "docs/utils/ivy.utils.exceptions", "docs/utils/ivy.utils.inspection", "docs/utils/ivy.utils.logging", "docs/utils/ivy.utils.profiler", "docs/utils/ivy.utils.verbosity", "index", "overview/contributing", "overview/contributing/building_the_docs", "overview/contributing/error_handling", "overview/contributing/helpful_resources", "overview/contributing/open_tasks", "overview/contributing/setting_up", "overview/contributing/the_basics", "overview/deep_dive", "overview/deep_dive/array_api_tests", "overview/deep_dive/arrays", "overview/deep_dive/backend_setting", "overview/deep_dive/building_the_docs_pipeline", "overview/deep_dive/containers", "overview/deep_dive/continuous_integration", "overview/deep_dive/data_types", "overview/deep_dive/devices", "overview/deep_dive/docstring_examples", "overview/deep_dive/docstrings", "overview/deep_dive/exception_handling", "overview/deep_dive/formatting", "overview/deep_dive/function_arguments", "overview/deep_dive/function_types", "overview/deep_dive/function_wrapping", "overview/deep_dive/gradients", "overview/deep_dive/inplace_updates", "overview/deep_dive/ivy_frontends", "overview/deep_dive/ivy_frontends_tests", "overview/deep_dive/ivy_lint", "overview/deep_dive/ivy_tests", "overview/deep_dive/navigating_the_code", "overview/deep_dive/operating_modes", "overview/deep_dive/superset_behaviour", "overview/design", "overview/design/building_blocks", "overview/design/ivy_as_a_framework", "overview/design/ivy_as_a_framework/ivy_array", "overview/design/ivy_as_a_framework/ivy_container", "overview/design/ivy_as_a_framework/ivy_stateful_api", "overview/design/ivy_as_a_transpiler", "overview/faq", "overview/get_started", "overview/glossary", "overview/motivation", "overview/motivation/ml_explosion", "overview/motivation/standardization", "overview/motivation/why_unify", "overview/one_liners", "overview/one_liners/trace", "overview/one_liners/transpile", "overview/one_liners/unify", "overview/related_work", "overview/related_work/api_standards", "overview/related_work/compiler_infrastructure", "overview/related_work/exchange_formats", "overview/related_work/frameworks", "overview/related_work/graph_tracers", "overview/related_work/ml_unifying_companies", "overview/related_work/multi_vendor_compiler_frameworks", "overview/related_work/vendor_specific_apis", "overview/related_work/vendor_specific_compilers", "overview/related_work/what_does_ivy_add", "overview/related_work/wrapper_frameworks"], "filenames": ["demos/README.md", "demos/assets/01_template.ipynb", "demos/examples_and_demos.rst", "demos/examples_and_demos/alexnet_demo.ipynb", "demos/examples_and_demos/bert_demo.ipynb", "demos/examples_and_demos/image_segmentation_with_ivy_unet.ipynb", "demos/examples_and_demos/mmpretrain_to_jax.ipynb", "demos/examples_and_demos/resnet_demo.ipynb", "demos/examples_and_demos/torch_to_jax.ipynb", "demos/guides.rst", "demos/guides/01_transpiling_a_torch_model.ipynb", "demos/guides/02_transpiling_a_haiku_model.ipynb", "demos/guides/03_transpiling_a_tf_model.ipynb", "demos/guides/04_developing_a_convnet_with_ivy.ipynb", "demos/index.rst", "demos/learn_the_basics.rst", "demos/learn_the_basics/01_write_ivy_code.ipynb", "demos/learn_the_basics/02_unify_code.ipynb", "demos/learn_the_basics/03_compile_code.ipynb", "demos/learn_the_basics/04_transpile_code.ipynb", "demos/learn_the_basics/05_lazy_vs_eager.ipynb", "demos/learn_the_basics/06_how_to_use_decorators.ipynb", "demos/learn_the_basics/07_transpile_any_library.ipynb", "demos/learn_the_basics/08_transpile_any_model.ipynb", "demos/learn_the_basics/09_write_a_model_using_ivy.ipynb", "demos/misc/odsc.ipynb", "demos/quickstart.ipynb", "demos/wip/0_building_blocks/0_0_unify.ipynb", "demos/wip/0_building_blocks/0_1_compile.ipynb", "demos/wip/0_building_blocks/0_2_transpile.ipynb", "demos/wip/1_the_basics/1_0_lazy_vs_eager.ipynb", "demos/wip/1_the_basics/1_1_framework_selection.ipynb", "demos/wip/1_the_basics/1_2_as_a_decorator.ipynb", "demos/wip/1_the_basics/1_3_dynamic_vs_static.ipynb", "demos/wip/2_libraries/2_0_kornia.ipynb", "demos/wip/3_models/3_0_perceiver.ipynb", "demos/wip/3_models/3_1_stable_diffusion.ipynb", "demos/wip/basic_operations_with_ivy.ipynb", "demos/wip/compilation_of_a_basic_function.ipynb", "demos/wip/deepmind_perceiver_io.ipynb", "demos/wip/deepmind_perceiverio.ipynb", "demos/wip/end_to_end_training_pipeline_in_ivy.ipynb", "demos/wip/hf_tensorflow_deit.ipynb", "demos/wip/ivy_as_a_transpiler_intro.ipynb", "demos/wip/resnet_18.ipynb", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.device.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.general.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.image.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.random.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.set.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.base.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.device.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.general.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.image.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.random.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.set.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.parafac2_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tr_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tt_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.array.rst", "docs/data_classes/data_classes/ivy.data_classes.container.rst", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.nested_array.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise.rst", "docs/data_classes/ivy.data_classes.rst", "docs/functional/ivy.functional.ivy.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.to_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.celu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardtanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.tanhshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_parafac2.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tr.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tt.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amin.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta.rst", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.sliding_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.stft.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.batched_outer.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.general_inner_product.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.higher_order_moment.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.solve_triangular.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tensor_train.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tt_matrix_to_tensor.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.kl_div.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.poisson_nll_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.column_stack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.trim_zeros.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson.rst", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile.rst", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.default.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.exists.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isin.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.strides.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad.rst", "docs/functional/ivy/ivy.functional.ivy.activations.rst", "docs/functional/ivy/ivy.functional.ivy.constants.rst", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops.rst", "docs/functional/ivy/ivy.functional.ivy.creation.rst", "docs/functional/ivy/ivy.functional.ivy.data_type.rst", "docs/functional/ivy/ivy.functional.ivy.device.rst", "docs/functional/ivy/ivy.functional.ivy.elementwise.rst", "docs/functional/ivy/ivy.functional.ivy.experimental.rst", "docs/functional/ivy/ivy.functional.ivy.general.rst", "docs/functional/ivy/ivy.functional.ivy.gradients.rst", "docs/functional/ivy/ivy.functional.ivy.layers.rst", "docs/functional/ivy/ivy.functional.ivy.linear_algebra.rst", "docs/functional/ivy/ivy.functional.ivy.losses.rst", "docs/functional/ivy/ivy.functional.ivy.manipulation.rst", "docs/functional/ivy/ivy.functional.ivy.meta.rst", "docs/functional/ivy/ivy.functional.ivy.nest.rst", "docs/functional/ivy/ivy.functional.ivy.norms.rst", "docs/functional/ivy/ivy.functional.ivy.random.rst", "docs/functional/ivy/ivy.functional.ivy.searching.rst", "docs/functional/ivy/ivy.functional.ivy.set.rst", "docs/functional/ivy/ivy.functional.ivy.sorting.rst", "docs/functional/ivy/ivy.functional.ivy.statistical.rst", "docs/functional/ivy/ivy.functional.ivy.utility.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.nms.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.roi_align.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices.rst", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.randint.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.seed.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save.rst", "docs/helpers/ivy_tests.test_ivy.helpers.assertions.rst", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks.rst", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing.rst", "docs/helpers/ivy_tests.test_ivy.helpers.globals.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.multiprocessing.rst", "docs/helpers/ivy_tests.test_ivy.helpers.pipeline_helper.rst", "docs/helpers/ivy_tests.test_ivy.helpers.structs.rst", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags.rst", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers.rst", "docs/ivy.stateful.rst", "docs/ivy.utils.rst", "docs/ivy_tests.test_ivy.helpers.rst", "docs/stateful/ivy.stateful.activations.rst", "docs/stateful/ivy.stateful.converters.rst", "docs/stateful/ivy.stateful.helpers.rst", "docs/stateful/ivy.stateful.initializers.rst", "docs/stateful/ivy.stateful.layers.rst", "docs/stateful/ivy.stateful.losses.rst", "docs/stateful/ivy.stateful.module.rst", "docs/stateful/ivy.stateful.norms.rst", "docs/stateful/ivy.stateful.optimizers.rst", "docs/stateful/ivy.stateful.sequential.rst", "docs/utils/ivy.utils.assertions.rst", "docs/utils/ivy.utils.backend.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler.rst", "docs/utils/ivy.utils.binaries.rst", "docs/utils/ivy.utils.dynamic_import.rst", "docs/utils/ivy.utils.einsum_parser.rst", "docs/utils/ivy.utils.exceptions.rst", "docs/utils/ivy.utils.inspection.rst", "docs/utils/ivy.utils.logging.rst", "docs/utils/ivy.utils.profiler.rst", "docs/utils/ivy.utils.verbosity.rst", "index.rst", "overview/contributing.rst", "overview/contributing/building_the_docs.rst", "overview/contributing/error_handling.rst", "overview/contributing/helpful_resources.rst", "overview/contributing/open_tasks.rst", "overview/contributing/setting_up.rst", "overview/contributing/the_basics.rst", "overview/deep_dive.rst", "overview/deep_dive/array_api_tests.rst", "overview/deep_dive/arrays.rst", "overview/deep_dive/backend_setting.rst", "overview/deep_dive/building_the_docs_pipeline.rst", "overview/deep_dive/containers.rst", "overview/deep_dive/continuous_integration.rst", "overview/deep_dive/data_types.rst", "overview/deep_dive/devices.rst", "overview/deep_dive/docstring_examples.rst", "overview/deep_dive/docstrings.rst", "overview/deep_dive/exception_handling.rst", "overview/deep_dive/formatting.rst", "overview/deep_dive/function_arguments.rst", "overview/deep_dive/function_types.rst", "overview/deep_dive/function_wrapping.rst", "overview/deep_dive/gradients.rst", "overview/deep_dive/inplace_updates.rst", "overview/deep_dive/ivy_frontends.rst", "overview/deep_dive/ivy_frontends_tests.rst", "overview/deep_dive/ivy_lint.rst", "overview/deep_dive/ivy_tests.rst", "overview/deep_dive/navigating_the_code.rst", "overview/deep_dive/operating_modes.rst", "overview/deep_dive/superset_behaviour.rst", "overview/design.rst", "overview/design/building_blocks.rst", "overview/design/ivy_as_a_framework.rst", "overview/design/ivy_as_a_framework/ivy_array.rst", "overview/design/ivy_as_a_framework/ivy_container.rst", "overview/design/ivy_as_a_framework/ivy_stateful_api.rst", "overview/design/ivy_as_a_transpiler.rst", "overview/faq.rst", "overview/get_started.rst", "overview/glossary.rst", "overview/motivation.rst", "overview/motivation/ml_explosion.rst", "overview/motivation/standardization.rst", "overview/motivation/why_unify.rst", "overview/one_liners.rst", "overview/one_liners/trace.rst", "overview/one_liners/transpile.rst", "overview/one_liners/unify.rst", "overview/related_work.rst", "overview/related_work/api_standards.rst", "overview/related_work/compiler_infrastructure.rst", "overview/related_work/exchange_formats.rst", "overview/related_work/frameworks.rst", "overview/related_work/graph_tracers.rst", "overview/related_work/ml_unifying_companies.rst", "overview/related_work/multi_vendor_compiler_frameworks.rst", "overview/related_work/vendor_specific_apis.rst", "overview/related_work/vendor_specific_compilers.rst", "overview/related_work/what_does_ivy_add.rst", "overview/related_work/wrapper_frameworks.rst"], "titles": ["Demos", "TO REPLACE: Title", "Examples and Demos", "Ivy AlexNet demo", "# Ivy Bert Demo", "Image Segmentation with Ivy UNet", "Accelerating MMPreTrain models with JAX", "Using Ivy ResNet", "Accelerating PyTorch models with JAX", "Guides", "Transpiling a PyTorch model to build on top", "Transpiling a haiku model to build on top", "Transpiling a Tensorflow model to build on top", "Developing a convolutional network using Ivy", "Tutorials And Examples", "Learn the basics", "Write Ivy code", "Unify code", "Compile code", "Transpile code", "Lazy vs Eager", "How to use decorators", "Transpile any library", "Transpile any model", "Write a model using Ivy", "ODSC Ivy Demo", "Quickstart", "0.0: Unify", "0.1: Compile", "0.2: Transpile", "1.0: Lazy vs Eager", "1.1: Framework Selection", "1.2: As a Decorator", "1.3: Dynamic vs Static", "2.0: Kornia", "3.0: Perceiver", "3.1: Stable Diffusion", "Basic Operations with Ivy", "Compilation of a Basic Function", "Demo: Transpiling DeepMind\u2019s PerceiverIO", "Deepmind PerceiverIO on GPU", "End-to-End Training Pipeline in Ivy", "HuggingFace Tensorflow DeiT", "Ivy as a Transpiler Introduction", "Resnet 18", "Activations", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Activations", "Base", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Base", "Cp tensor", "Parafac2 tensor", "Tr tensor", "Tt tensor", "Tucker tensor", "Array", "Container", "Factorized tensor", "Nested array", "Base", "Elementwise", "Data classes", "Functions", "gelu", "hardswish", "leaky_relu", "log_softmax", "mish", "relu", "sigmoid", "softmax", "softplus", "softsign", "cmp_is", "cmp_isnot", "for_loop", "if_else", "try_except", "while_loop", "arange", "array", "asarray", "copy_array", "empty", "empty_like", "eye", "from_dlpack", "frombuffer", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "one_hot", "ones", "ones_like", "to_dlpack", "tril", "triu", "triu_indices", "zeros", "zeros_like", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "check_float", "closest_valid_dtype", "default_complex_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "default_uint_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "infer_default_dtype", "invalid_dtype", "is_bool_dtype", "is_complex_dtype", "is_float_dtype", "is_hashable_dtype", "is_int_dtype", "is_native_dtype", "is_uint_dtype", "promote_types", "promote_types_of_inputs", "result_type", "set_default_complex_dtype", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "set_default_uint_dtype", "type_promote_arrays", "unset_default_complex_dtype", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "unset_default_uint_dtype", "valid_dtype", "as_ivy_dev", "as_native_dev", "clear_cached_mem_on_dev", "default_device", "dev", "dev_util", "function_supported_devices", "function_unsupported_devices", "get_all_ivy_arrays_on_dev", "gpu_is_available", "handle_soft_device_variable", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_soft_device_mode", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "unset_soft_device_mode", "used_mem_on_dev", "abs", "acos", "acosh", "add", "angle", "asin", "asinh", "atan", "atan2", "atanh", "bitwise_and", "bitwise_invert", "bitwise_left_shift", "bitwise_or", "bitwise_right_shift", "bitwise_xor", "ceil", "cos", "cosh", "deg2rad", "divide", "equal", "erf", "exp", "exp2", "expm1", "floor", "floor_divide", "fmin", "fmod", "gcd", "greater", "greater_equal", "imag", "isfinite", "isinf", "isnan", "isreal", "lcm", "less", "less_equal", "log", "log10", "log1p", "log2", "logaddexp", "logaddexp2", "logical_and", "logical_not", "logical_or", "logical_xor", "maximum", "minimum", "multiply", "nan_to_num", "negative", "not_equal", "positive", "pow", "rad2deg", "real", "reciprocal", "remainder", "round", "sign", "sin", "sinh", "sqrt", "square", "subtract", "tan", "tanh", "trapz", "trunc", "trunc_divide", "celu", "elu", "hardtanh", "logit", "logsigmoid", "prelu", "relu6", "selu", "silu", "tanhshrink", "thresholded_relu", "blackman_window", "eye_like", "hamming_window", "hann_window", "indices", "kaiser_bessel_derived_window", "kaiser_window", "mel_weight_matrix", "ndenumerate", "ndindex", "random_cp", "random_parafac2", "random_tr", "random_tt", "random_tucker", "tril_indices", "trilu", "unsorted_segment_min", "unsorted_segment_sum", "vorbis_window", "allclose", "amax", "amin", "binarizer", "conj", "copysign", "count_nonzero", "diff", "digamma", "erfc", "fix", "float_power", "fmax", "frexp", "gradient", "hypot", "isclose", "ldexp", "lerp", "lgamma", "modf", "nansum", "nextafter", "signbit", "sinc", "sparsify_tensor", "xlogy", "zeta", "reduce", "bind_custom_gradient_function", "Activations", "Constants", "Creation", "Data type", "Device", "Elementwise", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Sparse array", "Statistical", "Utility", "adaptive_avg_pool1d", "adaptive_avg_pool2d", "adaptive_max_pool2d", "area_interpolate", "avg_pool1d", "avg_pool2d", "avg_pool3d", "dct", "dft", "dropout1d", "dropout2d", "dropout3d", "embedding", "fft", "fft2", "generate_einsum_equation", "get_interpolate_kernel", "idct", "ifft", "ifftn", "interp", "interpolate", "max_pool1d", "max_pool2d", "max_pool3d", "max_unpool1d", "nearest_interpolate", "pool", "reduce_window", "rfft", "rfftn", "sliding_window", "stft", "adjoint", "batched_outer", "cond", "diagflat", "dot", "eig", "eigh_tridiagonal", "eigvals", "general_inner_product", "higher_order_moment", "initialize_tucker", "khatri_rao", "kron", "kronecker", "make_svd_non_negative", "matrix_exp", "mode_dot", "multi_dot", "multi_mode_dot", "partial_tucker", "solve_triangular", "svd_flip", "tensor_train", "truncated_svd", "tt_matrix_to_tensor", "tucker", "huber_loss", "kl_div", "l1_loss", "log_poisson_loss", "poisson_nll_loss", "smooth_l1_loss", "soft_margin_loss", "as_strided", "associative_scan", "atleast_1d", "atleast_2d", "atleast_3d", "broadcast_shapes", "choose", "column_stack", "concat_from_sequence", "dsplit", "dstack", "expand", "fill_diagonal", "flatten", "fliplr", "flipud", "fold", "heaviside", "hsplit", "hstack", "i0", "matricize", "moveaxis", "pad", "partial_fold", "partial_tensor_to_vec", "partial_unfold", "partial_vec_to_tensor", "put_along_axis", "rot90", "soft_thresholding", "take_along_axis", "top_k", "trim_zeros", "unfold", "unique_consecutive", "vsplit", "vstack", "batch_norm", "group_norm", "instance_norm", "l1_normalize", "l2_normalize", "lp_normalize", "bernoulli", "beta", "dirichlet", "gamma", "poisson", "unravel_index", "invert_permutation", "lexsort", "is_ivy_sparse_array", "is_native_sparse_array", "native_sparse_array", "native_sparse_array_to_indices_values_and_shape", "bincount", "corrcoef", "cov", "cummax", "cummin", "histogram", "igamma", "median", "nanmean", "nanmedian", "nanprod", "quantile", "optional_get_element", "all_equal", "arg_info", "arg_names", "array_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "fourier_encode", "function_supported_devices_and_dtypes", "function_unsupported_devices_and_dtypes", "gather", "gather_nd", "get_all_arrays_in_memory", "get_item", "get_num_dims", "get_referrers_recursive", "has_nans", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_ivy_nested_array", "is_native_array", "isin", "isscalar", "itemsize", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "print_all_arrays_in_memory", "scatter_flat", "scatter_nd", "set_array_mode", "set_exception_trace_mode", "set_inplace_mode", "set_item", "set_min_base", "set_min_denominator", "set_nestable_mode", "set_precise_mode", "set_queue_timeout", "set_shape_array_mode", "set_show_func_wrapper_trace_mode", "set_tmp_dir", "shape", "stable_divide", "stable_pow", "strides", "supports_inplace_updates", "to_ivy_shape", "to_list", "to_native_shape", "to_numpy", "to_scalar", "try_else_none", "unset_array_mode", "unset_exception_trace_mode", "unset_inplace_mode", "unset_min_base", "unset_min_denominator", "unset_nestable_mode", "unset_precise_mode", "unset_queue_timeout", "unset_shape_array_mode", "unset_show_func_wrapper_trace_mode", "unset_tmp_dir", "value_is_nan", "vmap", "adam_step", "adam_update", "execute_with_gradients", "grad", "gradient_descent_update", "jac", "lamb_update", "lars_update", "optimizer_update", "stop_gradient", "value_and_grad", "Activations", "Constants", "Control flow ops", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "conv", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "conv_general_dilated", "conv_general_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "nms", "roi_align", "scaled_dot_product_attention", "cholesky", "cross", "det", "diag", "diagonal", "eig", "eigh", "eigvalsh", "inner", "inv", "lu_factor", "matmul", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "tensorsolve", "trace", "vander", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "binary_cross_entropy", "cross_entropy", "sparse_cross_entropy", "clip", "concat", "constant_pad", "expand_dims", "flip", "permute_dims", "repeat", "reshape", "roll", "split", "squeeze", "stack", "swapaxes", "tile", "unstack", "zero_pad", "fomaml_step", "maml_step", "reptile_step", "all_nested_indices", "copy_nest", "duplicate_array_index_chains", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_argwhere", "nested_map", "nested_multi_map", "prune_empty", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "layer_norm", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "argmax", "argmin", "argwhere", "nonzero", "where", "unique_all", "unique_counts", "unique_inverse", "unique_values", "argsort", "msort", "searchsorted", "sort", "cumprod", "cumsum", "einsum", "max", "mean", "min", "prod", "std", "sum", "var", "all", "any", "load", "save", "Assertions", "Available frameworks", "Function testing", "Globals", "Hypothesis helpers", "Array helpers", "Dtype helpers", "General helpers", "Number helpers", "Multiprocessing", "Pipeline helper", "Structs", "Test parameter flags", "Testing helpers", "Framework classes", "Utils", "Testing", "Activations", "Converters", "Helpers", "Initializers", "Layers", "Losses", "Module", "Norms", "Optimizers", "Sequential", "Assertions", "Backend", "Ast helpers", "Handler", "Sub backend handler", "Binaries", "Dynamic import", "Einsum parser", "Exceptions", "Inspection", "Logging", "Profiler", "Verbosity", "Home", "Contributing", "Building the Docs", "Error Handling", "Helpful Resources", "Open Tasks", "Setting Up", "The Basics", "Deep Dive", "Array API Tests", "Arrays", "Backend Setting", "Building the Docs Pipeline", "Containers", "Continuous Integration", "Data Types", "Devices", "Docstring Examples", "Docstrings", "Exception Handling", "Formatting", "Function Arguments", "Function Types", "Function Wrapping", "Gradients", "Inplace Updates", "Ivy Frontends", "Ivy Frontend Tests", "Ivy-Lint: Ivy\u2019s Custom Code Formatters", "Ivy Tests", "Navigating the Code", "Operating Modes", "Superset Behaviour", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "FAQ", "Get Started", "Glossary", "Motivation", "ML Explosion", "Standardization", "Why Unify?", "One liners", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.trace_graph()</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.transpile()</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.unify()</span></code>", "Related Work", "API Standards", "Compiler Infrastructure", "Exchange Formats", "Frameworks", "Graph Tracers", "ML-Unifying Companies", "Multi-Vendor Compiler Frameworks", "Vendor-Specific APIs", "Vendor-Specific Compilers", "What does Ivy Add?", "Wrapper Frameworks"], "terms": {"thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 40, 42, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 94, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 147, 148, 149, 159, 162, 165, 166, 167, 169, 173, 174, 188, 191, 201, 207, 208, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 367, 370, 371, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 389, 390, 391, 394, 395, 396, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 513, 514, 517, 518, 519, 520, 521, 522, 525, 526, 529, 530, 531, 533, 534, 535, 537, 538, 539, 541, 542, 544, 549, 550, 553, 559, 564, 565, 566, 567, 569, 571, 572, 585, 586, 587, 588, 589, 591, 593, 594, 595, 596, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 692, 694, 696, 697, 702, 703, 707, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 745, 746, 748, 749, 751, 760, 761, 763, 764, 766, 767, 768, 769, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845], "repo": [0, 10, 39, 787, 790, 792, 795, 797, 798, 810, 812, 827], "hold": [0, 51, 52, 56, 64, 74, 79, 87, 91, 92, 320, 336, 341, 355, 370, 447, 474, 497, 498, 503, 549, 550, 606, 609, 619, 650, 730, 746, 820, 839], "all": [0, 1, 3, 4, 5, 7, 10, 11, 12, 13, 16, 17, 18, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 38, 39, 41, 42, 44, 46, 47, 51, 52, 55, 56, 58, 60, 65, 66, 68, 69, 70, 73, 74, 75, 78, 79, 81, 83, 88, 89, 91, 92, 120, 128, 135, 139, 140, 141, 195, 202, 234, 238, 266, 267, 315, 316, 327, 345, 352, 355, 358, 359, 361, 370, 391, 400, 402, 403, 411, 416, 424, 425, 427, 430, 450, 461, 473, 502, 507, 510, 527, 547, 548, 564, 571, 572, 586, 589, 601, 603, 604, 606, 607, 608, 609, 611, 612, 613, 615, 616, 620, 631, 633, 634, 639, 652, 657, 658, 661, 666, 675, 679, 681, 687, 688, 689, 690, 691, 692, 701, 702, 703, 704, 710, 713, 718, 743, 745, 748, 749, 750, 751, 762, 763, 764, 770, 773, 779, 783, 784, 786, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 831, 832, 834, 835, 836, 837, 838, 839, 841, 844, 845], "jupyt": [0, 828, 840], "exampl": [0, 6, 8, 16, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 37, 39, 40, 41, 42, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 117, 119, 120, 121, 122, 123, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 141, 142, 143, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 170, 171, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 315, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 352, 355, 356, 358, 359, 360, 361, 364, 365, 366, 368, 370, 376, 377, 378, 379, 381, 382, 384, 385, 386, 389, 390, 391, 394, 395, 396, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 417, 420, 422, 425, 429, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 452, 453, 455, 456, 457, 458, 460, 461, 466, 467, 468, 469, 470, 471, 473, 474, 475, 479, 480, 481, 484, 486, 487, 488, 489, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 509, 510, 511, 512, 513, 514, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 537, 538, 539, 541, 542, 544, 545, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 693, 694, 696, 697, 698, 699, 701, 702, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 745, 748, 749, 756, 773, 777, 781, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 805, 806, 808, 809, 812, 813, 817, 819, 820, 821, 822, 823, 829, 835, 836, 839, 841, 844, 845], "tab": [0, 788, 789, 797, 820], "ivi": [0, 1, 2, 6, 8, 10, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 39, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 789, 791, 792, 794, 796, 798, 799, 801, 803, 804, 805, 806, 808, 815, 816, 823, 825, 828, 829, 830, 834, 845], "": [0, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 40, 42, 43, 44, 47, 51, 52, 53, 56, 64, 74, 76, 79, 87, 116, 133, 139, 140, 160, 161, 190, 193, 194, 206, 241, 276, 316, 320, 321, 322, 324, 334, 336, 342, 346, 348, 352, 355, 356, 358, 359, 360, 361, 364, 365, 370, 373, 374, 380, 386, 391, 402, 409, 413, 419, 428, 432, 434, 435, 450, 452, 453, 461, 476, 477, 478, 486, 496, 505, 523, 524, 530, 544, 566, 567, 588, 590, 591, 592, 593, 595, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 613, 619, 623, 625, 627, 629, 634, 641, 652, 659, 660, 666, 702, 736, 738, 749, 762, 763, 764, 765, 766, 767, 768, 769, 773, 783, 784, 785, 786, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 812, 813, 814, 815, 817, 819, 820, 821, 822, 823, 825, 828, 829, 830, 831, 832, 833, 834, 837, 838, 839, 841, 842, 843, 844], "web": 0, "relev": [0, 47, 70, 132, 601, 768, 783, 788, 789, 790, 793, 796, 797, 798, 800, 806, 807, 810, 811, 812, 820, 824, 828, 836, 843, 844], "link": [0, 16, 25, 26, 40, 783, 788, 789, 790, 795, 797, 798, 803, 809, 832, 834, 836], "list": [0, 4, 5, 6, 7, 41, 46, 47, 48, 50, 51, 52, 55, 58, 59, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 120, 121, 122, 128, 130, 133, 134, 135, 137, 143, 147, 149, 162, 166, 167, 174, 190, 207, 208, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 294, 295, 296, 297, 298, 299, 301, 320, 321, 322, 323, 324, 326, 327, 328, 330, 331, 334, 335, 336, 342, 343, 344, 346, 347, 348, 355, 358, 359, 361, 368, 376, 377, 378, 380, 381, 382, 383, 394, 395, 396, 397, 401, 406, 411, 415, 418, 423, 424, 427, 430, 431, 432, 433, 434, 435, 436, 437, 440, 441, 442, 443, 445, 446, 447, 456, 467, 469, 470, 474, 476, 478, 479, 480, 481, 483, 488, 496, 497, 498, 499, 507, 509, 510, 511, 513, 514, 518, 519, 520, 521, 522, 525, 526, 527, 529, 531, 533, 534, 535, 537, 538, 541, 545, 549, 550, 564, 565, 567, 569, 570, 571, 572, 573, 585, 586, 591, 596, 601, 602, 603, 604, 606, 608, 609, 611, 613, 614, 617, 618, 622, 623, 624, 625, 626, 627, 630, 631, 632, 634, 637, 638, 639, 644, 645, 646, 647, 649, 650, 652, 654, 656, 657, 661, 663, 668, 669, 670, 671, 672, 675, 678, 679, 680, 681, 682, 685, 686, 690, 691, 692, 693, 696, 697, 698, 699, 701, 702, 707, 708, 709, 710, 711, 712, 713, 715, 718, 721, 722, 723, 724, 725, 726, 727, 729, 730, 733, 735, 736, 738, 739, 740, 743, 745, 748, 749, 750, 751, 756, 761, 762, 764, 770, 777, 787, 788, 789, 792, 793, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 808, 809, 810, 812, 813, 817, 820, 821, 822, 823, 831, 838, 839, 844], "open": [0, 3, 5, 6, 7, 8, 22, 25, 26, 39, 40, 41, 42, 52, 60, 83, 120, 601, 615, 711, 713, 783, 784, 785, 789, 790, 795, 798, 801, 809, 810, 815, 824, 827, 828, 829, 831, 832, 836, 837, 838, 840, 841], "task": [0, 42, 612, 687, 688, 689, 783, 784, 789, 790, 809, 810, 838, 844, 845], "avil": 0, "discuss": [0, 788, 790, 795, 798, 799, 808, 809, 811, 812, 815, 818, 819, 820, 823, 829, 834, 839], "suggest": [0, 788, 789, 790, 795, 798, 803, 807, 809, 812, 813, 814, 824], "new": [0, 6, 8, 9, 10, 12, 14, 17, 23, 25, 26, 27, 41, 43, 51, 52, 53, 58, 59, 68, 70, 74, 75, 76, 79, 81, 82, 124, 127, 129, 130, 135, 136, 137, 142, 143, 180, 223, 269, 271, 275, 320, 325, 336, 341, 355, 361, 370, 438, 445, 446, 460, 466, 503, 518, 519, 520, 522, 525, 526, 528, 549, 550, 553, 555, 562, 564, 565, 571, 588, 591, 593, 594, 595, 601, 602, 604, 606, 607, 608, 611, 613, 614, 634, 646, 654, 674, 678, 682, 695, 707, 708, 709, 761, 764, 767, 768, 773, 783, 784, 788, 789, 790, 791, 793, 794, 796, 797, 798, 800, 801, 803, 806, 808, 809, 810, 811, 812, 813, 815, 816, 819, 822, 824, 825, 827, 828, 829, 831, 836, 840, 844, 845], "should": [0, 4, 42, 45, 47, 50, 51, 52, 53, 55, 56, 58, 60, 61, 62, 64, 67, 68, 70, 73, 74, 75, 76, 78, 79, 81, 83, 84, 86, 87, 89, 91, 94, 96, 97, 107, 111, 119, 133, 135, 139, 140, 148, 173, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 237, 239, 240, 241, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 267, 269, 270, 271, 272, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 294, 301, 316, 321, 322, 333, 337, 338, 339, 340, 344, 349, 350, 352, 355, 357, 358, 359, 360, 361, 365, 370, 381, 382, 383, 385, 390, 401, 415, 424, 430, 436, 460, 461, 482, 483, 496, 497, 498, 512, 530, 535, 586, 588, 591, 593, 594, 595, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 628, 629, 637, 638, 639, 640, 642, 644, 645, 646, 647, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 661, 663, 665, 666, 678, 694, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 729, 730, 731, 732, 733, 734, 735, 737, 738, 745, 746, 748, 750, 760, 761, 762, 763, 764, 766, 767, 768, 769, 777, 785, 786, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 817, 819, 820, 821, 826, 828, 832, 834, 835, 838, 840, 845], "comprehens": [0, 14, 790, 792, 811], "possibl": [0, 3, 31, 47, 51, 70, 74, 81, 91, 122, 241, 284, 300, 321, 322, 352, 355, 358, 360, 361, 380, 431, 440, 441, 442, 447, 449, 451, 452, 453, 460, 474, 545, 604, 606, 608, 619, 631, 674, 675, 676, 678, 680, 681, 683, 685, 732, 734, 748, 764, 780, 783, 784, 786, 788, 789, 790, 792, 795, 796, 798, 800, 801, 803, 805, 807, 808, 809, 810, 812, 815, 817, 820, 823, 828, 836, 838, 844], "us": [0, 1, 2, 3, 4, 6, 8, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 37, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 60, 61, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 83, 84, 89, 91, 92, 94, 97, 104, 132, 135, 146, 158, 160, 161, 172, 173, 193, 194, 196, 201, 205, 206, 207, 208, 210, 213, 219, 227, 255, 256, 258, 259, 261, 262, 263, 265, 266, 268, 277, 281, 286, 300, 302, 303, 305, 306, 307, 314, 334, 337, 338, 341, 352, 355, 358, 359, 360, 361, 364, 365, 366, 368, 370, 376, 377, 378, 380, 381, 382, 383, 384, 386, 391, 393, 394, 395, 396, 399, 401, 402, 404, 409, 411, 415, 419, 421, 423, 424, 426, 427, 428, 430, 435, 451, 455, 459, 461, 476, 478, 481, 482, 483, 484, 485, 486, 487, 488, 489, 496, 503, 505, 523, 524, 533, 534, 545, 553, 555, 556, 558, 564, 565, 577, 578, 580, 587, 588, 593, 594, 598, 599, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 615, 617, 619, 632, 634, 637, 642, 644, 652, 656, 660, 666, 668, 677, 678, 679, 683, 687, 688, 689, 690, 692, 693, 699, 700, 701, 703, 710, 711, 712, 713, 715, 716, 717, 718, 721, 723, 731, 746, 748, 749, 750, 751, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 773, 777, 781, 784, 787, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 825, 829, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845], "easi": [0, 25, 26, 39, 789, 790, 793, 794, 796, 805, 807, 810, 812, 815, 828, 836, 838, 844, 845], "follow": [0, 19, 20, 25, 26, 29, 30, 31, 37, 40, 41, 51, 52, 53, 55, 56, 62, 68, 74, 75, 76, 78, 79, 128, 159, 162, 207, 217, 234, 241, 267, 269, 276, 277, 307, 352, 358, 360, 361, 364, 380, 393, 401, 435, 449, 461, 476, 478, 533, 534, 535, 564, 565, 588, 591, 593, 594, 595, 601, 602, 603, 604, 606, 607, 608, 609, 613, 617, 634, 637, 650, 656, 666, 696, 702, 721, 722, 723, 724, 764, 768, 783, 785, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 827, 828, 831, 835, 838, 841], "attract": 0, "visual": [0, 43, 781, 783, 789, 809, 812, 823, 838, 840, 843], "graph": [0, 3, 5, 14, 15, 18, 22, 23, 26, 32, 33, 38, 43, 44, 62, 617, 721, 722, 723, 724, 756, 765, 766, 783, 796, 805, 809, 811, 815, 817, 822, 823, 825, 829, 830, 831, 832, 833, 834, 838, 841], "nice": [0, 812, 829, 838], "format": [0, 22, 23, 25, 26, 37, 39, 40, 41, 49, 52, 64, 67, 68, 69, 72, 94, 112, 157, 191, 358, 359, 369, 399, 429, 492, 518, 598, 602, 603, 606, 608, 619, 620, 621, 622, 624, 625, 626, 628, 629, 731, 741, 742, 743, 760, 783, 789, 790, 791, 797, 798, 799, 800, 801, 802, 809, 811, 820, 832, 834, 836, 838, 839], "result": [0, 3, 5, 6, 7, 8, 10, 12, 25, 26, 37, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 142, 143, 146, 148, 173, 174, 208, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 352, 355, 356, 358, 359, 360, 361, 364, 365, 366, 368, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 389, 390, 391, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 413, 414, 416, 417, 419, 420, 421, 422, 423, 425, 429, 431, 432, 433, 434, 436, 437, 439, 445, 446, 449, 451, 452, 453, 454, 455, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 513, 514, 518, 519, 520, 525, 526, 530, 535, 542, 549, 550, 587, 588, 589, 591, 593, 594, 595, 596, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 686, 693, 696, 697, 699, 703, 707, 709, 710, 711, 712, 713, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 745, 750, 756, 770, 781, 783, 786, 788, 790, 792, 793, 795, 796, 797, 798, 800, 801, 804, 805, 807, 808, 809, 810, 812, 813, 817, 820, 823, 831, 832, 833, 839, 841], "etc": [0, 28, 33, 40, 47, 51, 60, 62, 66, 70, 74, 83, 89, 123, 131, 132, 135, 358, 365, 386, 391, 402, 482, 483, 485, 486, 601, 615, 617, 710, 711, 712, 713, 721, 722, 723, 724, 748, 751, 763, 764, 765, 766, 767, 768, 769, 788, 789, 790, 792, 793, 794, 795, 796, 798, 800, 802, 804, 809, 810, 812, 813, 817, 819, 820, 823, 825, 829, 831, 836, 838, 844], "gener": [0, 5, 14, 18, 25, 26, 28, 31, 39, 41, 43, 44, 47, 50, 51, 55, 60, 66, 70, 73, 74, 78, 83, 89, 92, 120, 131, 132, 141, 149, 234, 237, 247, 248, 263, 267, 276, 300, 303, 307, 308, 309, 310, 311, 312, 313, 314, 315, 321, 322, 352, 355, 358, 359, 365, 370, 401, 406, 426, 484, 496, 601, 602, 604, 608, 609, 611, 615, 619, 631, 657, 658, 661, 664, 686, 710, 711, 713, 714, 736, 748, 751, 756, 768, 777, 788, 789, 790, 791, 792, 793, 795, 798, 799, 800, 801, 802, 804, 805, 808, 809, 810, 813, 816, 817, 819, 821, 822, 823, 825, 836, 837, 838, 839, 840, 841, 842, 843, 844], "tone": [0, 4], "feel": [0, 40, 96, 97, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 760, 761, 763, 764, 766, 767, 768, 769, 783, 785, 786, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 815, 816, 824, 831], "free": [0, 5, 39, 40, 96, 97, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 760, 761, 763, 764, 766, 767, 768, 769, 783, 785, 786, 787, 788, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 815, 816, 824, 831, 839, 841], "includ": [0, 14, 18, 28, 33, 47, 50, 51, 52, 56, 61, 64, 65, 68, 70, 73, 74, 75, 79, 84, 87, 88, 120, 121, 122, 131, 132, 134, 141, 214, 238, 242, 243, 244, 247, 249, 252, 260, 268, 281, 286, 302, 305, 306, 307, 315, 317, 319, 321, 322, 326, 327, 328, 330, 331, 332, 333, 335, 337, 338, 340, 341, 342, 343, 346, 347, 352, 355, 358, 361, 370, 376, 377, 378, 407, 410, 412, 452, 453, 455, 458, 460, 462, 465, 484, 486, 487, 495, 499, 501, 502, 504, 505, 531, 585, 601, 604, 606, 609, 613, 615, 616, 619, 620, 643, 664, 666, 690, 713, 717, 732, 733, 734, 735, 736, 737, 738, 739, 740, 745, 748, 749, 751, 763, 764, 767, 779, 783, 788, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 808, 809, 810, 811, 812, 813, 815, 817, 828, 831, 832, 835, 836, 838, 840, 843, 844, 845], "emoji": [0, 788], "don": [0, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 39, 41, 66, 89, 783, 788, 789, 790, 797, 798, 799, 803, 807, 812, 815, 821, 823, 829, 831], "t": [0, 4, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 31, 37, 39, 40, 41, 51, 55, 66, 74, 78, 89, 91, 92, 96, 334, 349, 355, 357, 359, 411, 535, 553, 567, 589, 606, 607, 608, 613, 632, 633, 698, 743, 764, 783, 785, 788, 789, 790, 791, 793, 794, 796, 797, 798, 799, 800, 803, 805, 806, 807, 808, 812, 813, 815, 817, 819, 820, 821, 822, 823, 824, 828, 829, 831, 832, 833, 836, 838, 840], "keep": [0, 1, 10, 12, 16, 22, 23, 25, 51, 58, 68, 74, 81, 91, 94, 345, 359, 430, 611, 685, 787, 788, 789, 790, 792, 794, 795, 796, 797, 802, 808, 809, 812, 813, 815, 820, 822, 824, 832], "thing": [0, 23, 37, 39, 777, 787, 788, 789, 790, 794, 809, 812, 815, 819, 820, 827, 828, 829, 838], "super": [0, 3, 5, 10, 12, 25, 26, 39, 51, 74, 359, 411, 783, 802, 817, 820, 821, 822, 832], "seriou": 0, "given": [0, 3, 16, 25, 38, 51, 52, 57, 58, 60, 68, 74, 75, 76, 80, 81, 83, 91, 92, 94, 96, 97, 120, 124, 131, 132, 152, 153, 154, 155, 156, 168, 173, 192, 201, 203, 205, 206, 207, 209, 213, 286, 317, 320, 326, 327, 334, 335, 336, 338, 341, 352, 355, 358, 359, 360, 361, 364, 365, 370, 376, 377, 378, 379, 384, 385, 386, 389, 390, 391, 393, 394, 395, 396, 397, 402, 411, 416, 429, 432, 433, 434, 436, 437, 438, 439, 448, 449, 450, 457, 459, 470, 475, 479, 480, 481, 482, 483, 484, 485, 486, 496, 497, 498, 499, 504, 526, 530, 549, 550, 560, 587, 588, 591, 593, 594, 595, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 667, 668, 669, 670, 671, 674, 675, 676, 677, 679, 680, 684, 685, 697, 698, 707, 708, 711, 712, 713, 715, 727, 728, 729, 730, 743, 748, 749, 750, 751, 756, 760, 761, 763, 764, 766, 767, 768, 769, 770, 777, 786, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 815, 818, 819, 821, 828, 829, 835, 840, 841, 844, 845], "an": [0, 2, 3, 14, 15, 16, 18, 21, 23, 25, 26, 31, 37, 39, 40, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 84, 85, 87, 88, 89, 91, 92, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 116, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 149, 159, 162, 165, 169, 173, 174, 204, 208, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 295, 296, 297, 298, 299, 301, 302, 304, 305, 306, 308, 309, 315, 316, 317, 318, 319, 321, 322, 324, 327, 330, 335, 339, 344, 350, 352, 355, 358, 359, 360, 361, 364, 365, 368, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 389, 391, 393, 394, 395, 396, 399, 400, 401, 402, 403, 404, 405, 407, 410, 411, 412, 434, 435, 439, 440, 441, 442, 445, 446, 447, 449, 456, 460, 461, 467, 473, 474, 476, 477, 478, 482, 483, 485, 488, 489, 494, 495, 496, 497, 498, 499, 500, 503, 506, 511, 513, 514, 522, 525, 529, 530, 531, 533, 534, 535, 537, 538, 539, 540, 541, 544, 550, 553, 554, 563, 567, 571, 572, 573, 586, 589, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 630, 631, 632, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 696, 709, 711, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 745, 748, 750, 751, 753, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 783, 785, 786, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 812, 813, 814, 815, 817, 819, 820, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 841, 842, 844, 845], "intern": [0, 68, 99, 100, 101, 613, 690, 700, 701, 763, 764, 765, 766, 767, 769, 793, 796, 799, 801, 808, 810, 812, 814], "releas": [0, 40, 788, 789, 798, 813, 815, 823, 829, 838, 844], "compil": [0, 3, 4, 5, 6, 7, 8, 14, 15, 19, 23, 29, 33, 42, 44, 285, 604, 756, 765, 766, 783, 789, 809, 813, 817, 823, 825, 832, 834, 837, 838, 839, 842, 845], "i": [0, 3, 4, 5, 6, 7, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 94, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 174, 186, 188, 190, 191, 193, 194, 196, 198, 201, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 346, 347, 348, 350, 352, 355, 356, 358, 359, 360, 361, 364, 365, 368, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 386, 389, 391, 393, 394, 395, 396, 397, 400, 401, 402, 403, 404, 408, 409, 410, 411, 413, 414, 415, 416, 418, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440, 441, 442, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 510, 511, 513, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 533, 534, 535, 537, 538, 539, 540, 541, 542, 545, 546, 549, 550, 551, 553, 559, 563, 564, 565, 567, 569, 571, 572, 573, 585, 586, 588, 589, 590, 591, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 697, 698, 699, 700, 701, 702, 703, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 745, 746, 748, 749, 750, 751, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 773, 774, 777, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845], "around": [0, 9, 10, 12, 14, 68, 97, 361, 461, 790, 792, 793, 795, 799, 804, 805, 809, 813, 819, 823, 825, 831, 836, 838, 845], "corner": [0, 51, 74, 358, 393, 789, 790, 809], "anybodi": 0, "abl": [0, 3, 5, 27, 31, 42, 44, 68, 91, 789, 790, 792, 798, 805, 808, 809, 813, 817, 822, 831, 841, 844], "start": [0, 1, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 40, 41, 47, 51, 68, 70, 74, 78, 120, 128, 131, 132, 338, 348, 355, 356, 358, 361, 370, 400, 451, 454, 462, 464, 472, 504, 601, 750, 762, 777, 784, 788, 789, 790, 791, 797, 798, 800, 801, 803, 804, 809, 812, 815, 816, 817, 819, 820, 821, 823, 831, 832, 838, 844], "work": [0, 23, 25, 26, 37, 38, 40, 44, 51, 74, 91, 370, 505, 613, 697, 698, 702, 707, 708, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 808, 809, 810, 812, 813, 816, 817, 819, 821, 822, 824, 829, 831, 832, 833, 836, 838, 840, 842, 845], "shortli": 0, "so": [0, 1, 5, 6, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 37, 39, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 94, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 122, 123, 125, 127, 128, 130, 132, 133, 134, 135, 137, 139, 140, 143, 147, 148, 149, 162, 166, 167, 174, 191, 208, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 355, 358, 361, 368, 370, 376, 377, 378, 379, 381, 382, 383, 385, 389, 390, 391, 394, 395, 396, 400, 401, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 417, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 513, 514, 517, 518, 519, 520, 521, 522, 525, 526, 529, 531, 533, 534, 535, 537, 538, 539, 541, 542, 544, 549, 550, 564, 565, 566, 567, 569, 571, 572, 585, 587, 588, 591, 593, 594, 595, 596, 608, 613, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 649, 650, 655, 656, 657, 659, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 701, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 783, 786, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 827, 828, 831, 832, 833, 838, 839, 840, 842], "worri": [0, 25, 26, 788, 789, 803], "about": [0, 14, 15, 16, 19, 21, 23, 25, 26, 29, 40, 41, 48, 71, 159, 162, 602, 783, 785, 787, 788, 789, 790, 791, 792, 795, 797, 798, 799, 803, 804, 808, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 829, 833, 839, 840, 843], "have": [0, 1, 3, 4, 5, 6, 8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 29, 37, 39, 41, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 146, 147, 148, 159, 208, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 295, 296, 297, 298, 299, 300, 301, 316, 321, 322, 323, 324, 329, 333, 335, 337, 338, 339, 340, 344, 347, 350, 352, 355, 358, 359, 360, 361, 364, 365, 366, 368, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 390, 391, 393, 394, 395, 396, 399, 401, 402, 405, 407, 408, 410, 411, 416, 417, 420, 421, 422, 423, 428, 431, 432, 433, 434, 435, 436, 437, 441, 442, 446, 447, 449, 454, 462, 463, 464, 465, 467, 470, 472, 479, 480, 481, 482, 483, 485, 486, 487, 489, 496, 497, 498, 499, 503, 506, 513, 514, 518, 519, 520, 525, 526, 535, 549, 550, 553, 587, 588, 591, 593, 594, 595, 596, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 686, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 748, 760, 761, 762, 763, 764, 766, 767, 768, 769, 777, 783, 785, 786, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 833, 834, 835, 836, 837, 838, 840, 844, 845], "access": [0, 22, 25, 26, 68, 783, 788, 789, 790, 797, 798, 803, 808, 809, 824, 832, 838, 840, 842], "transpil": [0, 6, 8, 9, 14, 15, 18, 28, 755, 756, 788, 789, 802, 809, 816, 817, 818, 825, 830, 831, 833, 838, 844, 845], "code": [0, 4, 6, 8, 14, 15, 22, 23, 25, 27, 28, 29, 30, 31, 32, 39, 40, 49, 50, 68, 72, 73, 97, 208, 254, 370, 503, 511, 519, 520, 535, 549, 553, 567, 603, 606, 608, 609, 611, 630, 651, 652, 653, 682, 781, 783, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 804, 805, 806, 808, 809, 810, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 841, 842, 843, 844, 845], "now": [0, 4, 6, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 37, 39, 41, 764, 765, 766, 783, 789, 792, 793, 794, 795, 796, 797, 798, 799, 804, 806, 809, 810, 812, 813, 815, 819, 820, 822, 823, 829, 831, 832, 833, 838], "you": [0, 1, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 51, 52, 74, 75, 91, 96, 97, 361, 370, 449, 503, 525, 526, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 634, 760, 761, 763, 764, 766, 767, 768, 769, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 831, 832, 833, 838], "can": [0, 1, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 40, 41, 44, 47, 48, 51, 52, 56, 58, 60, 62, 70, 71, 74, 75, 79, 81, 83, 85, 91, 92, 106, 109, 121, 122, 132, 134, 149, 188, 205, 206, 207, 294, 307, 350, 352, 358, 359, 360, 364, 365, 368, 370, 380, 393, 416, 421, 423, 428, 435, 446, 476, 483, 484, 489, 496, 542, 553, 586, 589, 598, 601, 602, 603, 606, 607, 608, 609, 611, 615, 634, 642, 649, 659, 663, 678, 682, 711, 712, 713, 721, 745, 748, 749, 750, 751, 756, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 831, 832, 833, 835, 836, 837, 838, 839, 841, 842, 844, 845], "style": [0, 39, 41, 361, 461, 616, 719, 790, 803, 838], "stori": 0, "If": [0, 1, 3, 4, 8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 31, 40, 43, 44, 46, 47, 48, 50, 51, 52, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 92, 104, 105, 106, 107, 108, 109, 110, 111, 112, 117, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 139, 140, 141, 142, 143, 146, 147, 148, 149, 174, 190, 206, 208, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 315, 316, 317, 320, 321, 322, 323, 324, 326, 327, 328, 331, 335, 336, 341, 342, 344, 346, 347, 348, 352, 355, 356, 358, 359, 360, 361, 364, 365, 370, 371, 376, 377, 378, 379, 380, 381, 382, 383, 386, 389, 391, 393, 394, 395, 396, 401, 402, 404, 409, 411, 413, 415, 416, 421, 423, 425, 426, 428, 429, 431, 432, 433, 434, 435, 436, 437, 440, 441, 442, 445, 446, 447, 449, 450, 451, 452, 453, 456, 460, 466, 467, 468, 469, 470, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 510, 511, 513, 514, 518, 519, 520, 521, 522, 525, 526, 528, 529, 530, 531, 533, 534, 535, 537, 538, 541, 542, 549, 550, 554, 564, 565, 567, 569, 571, 572, 585, 586, 589, 591, 596, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 631, 632, 634, 637, 638, 639, 641, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 663, 664, 665, 666, 668, 669, 670, 671, 672, 674, 675, 676, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 702, 703, 710, 711, 712, 713, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 745, 748, 749, 750, 762, 763, 764, 766, 767, 773, 783, 784, 785, 786, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 819, 820, 822, 823, 824, 827, 831, 832, 833], "anyon": [0, 783, 784, 790, 797, 823, 828, 844], "ha": [0, 3, 5, 7, 10, 12, 16, 18, 22, 25, 26, 28, 31, 33, 37, 44, 47, 51, 56, 58, 62, 64, 68, 71, 74, 75, 79, 81, 85, 87, 91, 133, 190, 214, 234, 237, 239, 241, 251, 267, 269, 274, 277, 279, 280, 284, 317, 318, 352, 358, 359, 360, 361, 370, 393, 425, 434, 444, 468, 469, 473, 495, 497, 498, 500, 531, 601, 603, 604, 608, 609, 611, 616, 617, 619, 634, 649, 650, 658, 659, 661, 663, 666, 674, 681, 719, 722, 723, 724, 729, 730, 733, 735, 736, 737, 738, 748, 751, 762, 773, 788, 790, 792, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 812, 813, 815, 817, 818, 819, 821, 822, 823, 824, 827, 828, 829, 831, 833, 834, 837, 838, 840, 841, 844], "ani": [0, 5, 10, 12, 14, 15, 16, 17, 18, 27, 28, 31, 37, 38, 39, 40, 41, 43, 44, 46, 47, 49, 50, 51, 52, 56, 65, 66, 70, 72, 73, 74, 75, 88, 89, 91, 96, 97, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 149, 150, 165, 169, 173, 208, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 237, 239, 240, 241, 245, 246, 247, 248, 249, 250, 254, 256, 257, 258, 259, 261, 262, 263, 264, 267, 269, 270, 271, 272, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 301, 315, 316, 321, 322, 324, 327, 352, 355, 358, 359, 361, 364, 370, 376, 377, 378, 379, 381, 382, 383, 389, 394, 395, 396, 401, 402, 411, 416, 450, 461, 476, 477, 478, 496, 499, 502, 503, 507, 517, 518, 519, 520, 521, 525, 529, 531, 533, 537, 539, 540, 558, 565, 572, 573, 580, 586, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 630, 631, 632, 634, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 696, 697, 699, 700, 707, 709, 713, 716, 717, 719, 720, 721, 722, 723, 724, 725, 728, 732, 733, 734, 735, 736, 737, 738, 739, 743, 746, 750, 760, 761, 763, 764, 766, 767, 768, 769, 773, 777, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 831, 832, 833, 836, 837, 838, 839, 841, 844, 845], "question": [0, 96, 97, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 760, 761, 763, 764, 766, 767, 768, 769, 783, 786, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 815, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829], "ping": 0, "me": [0, 790], "guillermo": 0, "commun": [0, 40, 784, 788, 789, 790, 823, 828, 837, 838, 840], "ux": 0, "team": [0, 783, 784, 788, 789, 790, 809, 824, 840], "discord": [0, 40, 96, 97, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 760, 761, 763, 764, 766, 767, 768, 769, 783, 786, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 817, 818, 819, 820, 821, 822, 824, 827, 828, 829], "channel": [0, 23, 41, 51, 52, 55, 74, 75, 78, 96, 97, 358, 364, 381, 382, 383, 393, 476, 477, 478, 518, 522, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 630, 760, 761, 763, 764, 766, 767, 768, 769, 786, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815], "To": [0, 7, 10, 12, 16, 25, 26, 37, 40, 41, 42, 92, 241, 360, 434, 559, 604, 606, 763, 764, 766, 788, 789, 792, 793, 794, 795, 798, 800, 802, 803, 805, 806, 809, 810, 811, 812, 813, 820, 821, 822, 824, 831, 832], "ensur": [0, 10, 12, 23, 51, 52, 74, 75, 358, 359, 394, 395, 396, 426, 535, 606, 743, 783, 788, 789, 790, 793, 798, 799, 800, 802, 803, 804, 806, 808, 809, 810, 811, 812, 813, 824, 838], "similar": [0, 16, 25, 26, 276, 604, 608, 634, 764, 786, 788, 789, 796, 797, 798, 799, 802, 803, 805, 806, 807, 809, 810, 812, 813, 820, 823, 827, 832, 834, 835, 836, 837, 844], "ar": [0, 1, 3, 4, 6, 7, 8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 37, 39, 40, 42, 43, 46, 47, 50, 51, 52, 55, 56, 58, 60, 61, 62, 68, 70, 73, 74, 75, 78, 79, 81, 83, 84, 85, 91, 92, 96, 97, 120, 130, 132, 135, 141, 195, 200, 202, 207, 231, 233, 234, 237, 241, 262, 263, 267, 272, 273, 277, 279, 284, 285, 286, 315, 317, 318, 320, 323, 325, 326, 327, 330, 331, 336, 341, 344, 348, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 367, 370, 373, 374, 380, 381, 382, 383, 386, 391, 393, 401, 402, 410, 411, 415, 423, 424, 426, 430, 431, 435, 436, 440, 441, 442, 451, 452, 453, 455, 461, 464, 468, 476, 478, 482, 483, 484, 485, 486, 496, 501, 502, 503, 504, 505, 507, 510, 511, 512, 521, 527, 532, 536, 547, 548, 557, 567, 579, 589, 601, 603, 604, 606, 607, 608, 609, 611, 613, 615, 616, 617, 631, 632, 634, 637, 639, 643, 644, 645, 649, 650, 652, 655, 656, 659, 660, 664, 665, 666, 671, 672, 675, 679, 681, 691, 696, 701, 702, 703, 711, 712, 713, 716, 717, 718, 719, 721, 723, 743, 745, 748, 749, 750, 751, 756, 762, 763, 764, 766, 769, 770, 777, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 831, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845], "across": [0, 37, 61, 68, 75, 84, 96, 205, 206, 234, 241, 267, 285, 364, 478, 510, 531, 566, 603, 604, 606, 608, 613, 616, 631, 634, 696, 716, 717, 764, 788, 792, 798, 800, 802, 804, 805, 807, 812, 815, 836, 838, 843], "templat": [0, 783, 795, 801, 812], "help": [0, 14, 41, 43, 48, 508, 553, 606, 619, 737, 763, 783, 784, 785, 788, 789, 793, 794, 795, 796, 797, 798, 800, 803, 805, 806, 808, 809, 812, 813, 819, 820, 821, 824, 825, 834, 838, 840, 844], "get": [0, 3, 4, 6, 7, 8, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 39, 40, 42, 48, 49, 56, 68, 72, 79, 96, 157, 158, 159, 162, 190, 191, 192, 195, 201, 206, 209, 213, 361, 466, 509, 527, 548, 566, 602, 603, 606, 609, 613, 666, 692, 748, 762, 763, 764, 777, 784, 787, 788, 789, 791, 792, 797, 798, 799, 805, 806, 807, 808, 809, 810, 811, 812, 817, 818, 819, 820, 821, 825, 829, 832, 833, 838, 844], "It": [0, 3, 17, 25, 26, 27, 28, 37, 38, 39, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 91, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 142, 143, 146, 148, 208, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 295, 296, 297, 298, 299, 300, 301, 316, 321, 322, 323, 324, 329, 333, 335, 337, 338, 339, 340, 344, 350, 352, 355, 358, 359, 360, 361, 364, 365, 370, 371, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 390, 391, 393, 394, 395, 396, 399, 401, 405, 407, 408, 416, 417, 420, 421, 422, 423, 431, 432, 433, 434, 436, 437, 446, 449, 454, 462, 463, 464, 465, 467, 472, 476, 479, 480, 481, 482, 483, 485, 486, 496, 497, 498, 499, 506, 513, 514, 518, 519, 520, 525, 526, 535, 549, 550, 551, 587, 588, 591, 593, 594, 595, 596, 598, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 649, 650, 652, 653, 654, 655, 658, 660, 661, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 686, 689, 709, 710, 711, 712, 713, 715, 716, 717, 718, 720, 724, 725, 728, 729, 730, 733, 735, 736, 738, 739, 740, 763, 764, 783, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 806, 808, 809, 810, 811, 812, 813, 814, 815, 817, 819, 820, 821, 830, 833, 836, 838, 839, 841, 842, 843, 844, 845], "locat": [0, 41, 135, 370, 497, 601, 613, 615, 618, 694, 710, 727, 788, 790, 794, 795, 799, 809, 810, 812, 813, 824, 836], "asset": [0, 825], "01_templat": 0, "ipynb": 0, "pleas": [0, 31, 40, 44, 96, 97, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 760, 761, 763, 764, 766, 767, 768, 769, 783, 786, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 817, 818, 819, 820, 821, 822, 824, 827, 828, 829], "make": [0, 3, 5, 6, 7, 8, 17, 25, 26, 27, 39, 43, 51, 74, 358, 401, 773, 783, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 815, 817, 819, 820, 822, 824, 828, 829, 832, 836, 838, 839, 840, 841, 844, 845], "copi": [0, 41, 44, 47, 48, 49, 50, 51, 52, 58, 68, 70, 71, 72, 73, 74, 75, 81, 91, 95, 121, 122, 123, 127, 138, 146, 208, 268, 361, 438, 440, 441, 442, 447, 449, 451, 452, 453, 456, 460, 467, 474, 528, 554, 564, 571, 572, 601, 602, 603, 604, 606, 611, 613, 618, 674, 675, 676, 678, 680, 681, 683, 685, 691, 726, 728, 789, 790, 792, 794, 797, 798, 801, 809, 810, 817, 823, 831, 832, 833], "firstli": [0, 17, 18, 21, 27, 28, 32, 37, 793, 798, 800, 801, 802, 805, 806, 808, 815, 820, 834, 844], "updat": [0, 4, 5, 6, 8, 19, 25, 26, 39, 41, 46, 52, 53, 68, 75, 76, 91, 361, 466, 535, 549, 550, 553, 554, 576, 587, 588, 591, 593, 594, 595, 606, 607, 608, 612, 613, 631, 633, 687, 688, 689, 697, 698, 702, 707, 708, 756, 761, 767, 768, 773, 783, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 800, 804, 806, 807, 809, 810, 812, 815, 817, 819, 820, 822, 823], "file": [0, 39, 40, 41, 52, 68, 562, 584, 606, 766, 785, 788, 789, 790, 792, 793, 794, 795, 796, 797, 799, 801, 802, 803, 805, 809, 810, 811, 812, 813, 817, 820, 824, 834, 837, 838, 839], "name": [0, 6, 25, 26, 37, 39, 40, 41, 51, 56, 62, 66, 74, 79, 85, 89, 241, 358, 359, 361, 404, 410, 470, 473, 508, 509, 604, 606, 609, 617, 643, 644, 648, 656, 657, 659, 664, 721, 722, 723, 745, 749, 756, 766, 773, 774, 776, 788, 789, 790, 794, 795, 796, 797, 800, 801, 802, 804, 809, 810, 812, 813, 814, 815, 817, 820, 822, 838], "match": [0, 48, 51, 68, 71, 74, 146, 241, 276, 325, 327, 355, 358, 361, 402, 444, 466, 469, 545, 602, 604, 606, 609, 644, 645, 650, 666, 743, 786, 788, 793, 795, 796, 800, 810, 839, 844], "topic": [0, 14, 17, 18, 19, 27, 28, 29, 30, 31, 32, 806, 819, 838], "your": [0, 2, 3, 4, 6, 8, 10, 12, 14, 15, 16, 18, 19, 22, 25, 26, 29, 37, 39, 41, 43, 764, 766, 783, 784, 786, 787, 788, 789, 792, 794, 795, 797, 801, 803, 807, 809, 811, 813, 815, 820, 821, 823, 824, 828, 829, 831, 832, 838], "Then": [0, 44, 608, 634, 785, 788, 789, 790, 794, 795, 797, 803, 806, 808, 812, 813, 823], "place": [0, 39, 46, 47, 50, 51, 52, 56, 58, 68, 70, 72, 73, 74, 75, 79, 81, 120, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 149, 165, 169, 208, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 237, 239, 240, 241, 245, 246, 247, 248, 249, 250, 251, 254, 256, 257, 258, 259, 261, 262, 263, 264, 267, 268, 269, 270, 271, 272, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 300, 301, 304, 315, 316, 320, 321, 322, 324, 327, 328, 329, 333, 335, 336, 337, 338, 340, 341, 342, 346, 347, 352, 355, 358, 359, 361, 370, 376, 377, 378, 379, 381, 382, 383, 389, 394, 395, 396, 401, 411, 451, 461, 466, 483, 496, 499, 503, 511, 519, 520, 525, 529, 531, 533, 534, 535, 549, 553, 567, 572, 576, 596, 601, 602, 603, 604, 606, 607, 608, 609, 611, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 630, 631, 632, 634, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 709, 716, 717, 719, 720, 721, 722, 723, 724, 725, 728, 732, 733, 734, 735, 736, 737, 738, 739, 740, 766, 768, 783, 786, 787, 790, 791, 792, 795, 796, 797, 799, 800, 801, 804, 805, 809, 810, 812, 813, 815, 822, 825, 840], "its": [0, 8, 16, 18, 25, 26, 28, 31, 38, 39, 41, 46, 48, 51, 58, 68, 71, 74, 75, 81, 94, 106, 109, 112, 117, 147, 152, 153, 154, 155, 156, 207, 234, 267, 286, 294, 350, 358, 361, 370, 397, 404, 473, 499, 522, 570, 598, 600, 602, 603, 604, 606, 609, 611, 613, 649, 674, 678, 679, 683, 696, 745, 762, 783, 788, 789, 793, 796, 797, 798, 799, 801, 802, 806, 807, 808, 809, 810, 812, 813, 814, 815, 817, 822, 823, 825, 831, 837, 838, 844], "folder": [0, 41, 783, 789, 790, 792, 795, 797, 805, 809, 812, 813, 814], "next": [0, 5, 17, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 39, 41, 51, 74, 159, 333, 337, 342, 346, 355, 602, 763, 765, 766, 768, 783, 788, 789, 790, 794, 798, 800, 801, 803, 806, 818, 819, 820, 829, 838, 840], "edit": [0, 788, 789, 790, 803], "titl": [0, 11, 13, 24, 40, 43, 783, 788, 790, 795], "descript": [0, 1, 34, 35, 36, 41, 44, 47, 50, 51, 56, 73, 74, 79, 120, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 142, 143, 149, 165, 169, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 237, 239, 240, 241, 245, 246, 247, 248, 249, 250, 251, 254, 256, 257, 258, 259, 261, 262, 263, 264, 267, 269, 270, 271, 272, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 301, 316, 321, 322, 324, 327, 352, 355, 358, 359, 361, 370, 376, 377, 378, 379, 381, 382, 383, 389, 394, 395, 396, 401, 411, 461, 496, 499, 525, 529, 531, 533, 572, 596, 601, 602, 604, 606, 607, 608, 609, 611, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 630, 631, 632, 634, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 709, 716, 717, 719, 720, 721, 722, 723, 724, 725, 728, 732, 733, 734, 735, 736, 737, 738, 739, 740, 788, 790, 801, 807, 808], "accordingli": [0, 51, 56, 61, 62, 64, 65, 74, 79, 84, 87, 88, 133, 234, 239, 241, 257, 267, 281, 321, 322, 355, 601, 604, 609, 616, 617, 619, 620, 666, 717, 721, 722, 723, 724, 732, 733, 734, 735, 736, 737, 738, 739, 740, 809, 817, 824], "thei": [0, 32, 37, 42, 51, 56, 60, 62, 68, 79, 83, 85, 172, 286, 331, 355, 602, 604, 609, 612, 615, 617, 664, 687, 688, 710, 721, 743, 769, 783, 787, 788, 789, 791, 792, 794, 795, 796, 797, 798, 799, 800, 802, 803, 805, 806, 808, 809, 812, 813, 815, 817, 819, 820, 821, 822, 823, 831, 835, 838, 840, 841, 844, 845], "render": [0, 795, 801], "correctli": [0, 22, 25, 26, 39, 51, 56, 61, 74, 79, 84, 326, 355, 370, 502, 503, 504, 505, 609, 616, 650, 716, 788, 789, 790, 793, 796, 798, 800, 802, 803, 804, 810, 812, 815, 821, 823, 831, 832], "webpag": [0, 14], "content": [0, 1, 11, 13, 24, 25, 40, 41, 51, 68, 74, 370, 503, 788, 790, 795, 799, 808, 811, 817, 820, 824], "behind": [0, 16, 25, 783, 791, 804, 812, 816, 818], "exist": [0, 16, 25, 26, 39, 40, 41, 44, 47, 51, 52, 68, 70, 74, 75, 81, 122, 361, 440, 441, 446, 447, 449, 451, 452, 453, 460, 474, 517, 553, 606, 611, 672, 674, 675, 676, 678, 680, 681, 683, 685, 768, 770, 783, 788, 789, 792, 794, 799, 800, 801, 805, 806, 808, 809, 812, 815, 817, 823, 825, 827, 828, 836, 838, 841, 844], "cell": [0, 1, 3, 4, 5, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 26, 40, 55, 78, 608, 633, 764, 797, 817], "where": [0, 6, 18, 22, 28, 29, 33, 41, 47, 50, 51, 52, 56, 58, 60, 61, 64, 65, 68, 70, 73, 74, 75, 79, 81, 83, 84, 87, 88, 91, 92, 129, 130, 133, 135, 141, 222, 232, 234, 237, 239, 241, 242, 251, 256, 257, 258, 265, 266, 267, 272, 274, 278, 280, 284, 292, 294, 315, 317, 318, 332, 336, 343, 350, 352, 355, 358, 359, 360, 361, 364, 365, 370, 372, 373, 374, 380, 385, 386, 390, 404, 410, 411, 415, 416, 418, 424, 430, 431, 440, 441, 442, 455, 461, 476, 477, 478, 482, 483, 485, 486, 496, 504, 505, 535, 549, 586, 601, 604, 606, 608, 609, 611, 613, 615, 616, 619, 620, 634, 639, 643, 644, 648, 650, 652, 654, 655, 656, 659, 660, 663, 665, 671, 673, 674, 676, 682, 686, 694, 701, 710, 711, 712, 713, 718, 719, 736, 738, 739, 740, 748, 763, 767, 783, 784, 786, 789, 790, 792, 793, 794, 795, 796, 798, 799, 801, 802, 805, 806, 807, 808, 809, 810, 812, 813, 815, 817, 820, 821, 822, 823, 824, 827, 828, 829, 831, 836, 845], "The": [0, 3, 5, 6, 7, 8, 14, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 38, 39, 41, 42, 43, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 94, 96, 97, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 117, 119, 120, 127, 128, 130, 132, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 151, 152, 153, 154, 155, 156, 158, 160, 161, 162, 164, 166, 167, 168, 171, 172, 174, 175, 177, 178, 179, 180, 186, 187, 188, 189, 190, 192, 193, 194, 195, 200, 201, 202, 203, 205, 206, 207, 208, 209, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 333, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 352, 355, 356, 358, 359, 360, 361, 364, 365, 366, 370, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 389, 390, 391, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 407, 408, 409, 410, 411, 413, 415, 425, 426, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 450, 451, 452, 453, 457, 460, 461, 466, 467, 469, 470, 471, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 487, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 529, 530, 531, 533, 534, 535, 537, 538, 539, 540, 541, 544, 546, 549, 550, 553, 555, 556, 559, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 585, 587, 588, 591, 593, 594, 595, 596, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 745, 748, 750, 751, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 773, 777, 783, 784, 785, 786, 788, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 810, 812, 813, 815, 816, 817, 820, 821, 822, 824, 825, 826, 827, 829, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845], "h2": [0, 1, 11, 13, 24], "tag": [0, 1, 11, 13, 24, 789, 790], "section": [0, 1, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 45, 51, 62, 74, 106, 358, 361, 391, 402, 447, 456, 474, 617, 721, 722, 723, 724, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 815, 816, 820, 821, 833, 834, 841, 844], "h3": [0, 1, 11, 13, 24], "subsect": [0, 1, 11, 13, 24, 788, 789, 790, 792, 797], "step": [0, 1, 11, 12, 13, 24, 25, 26, 37, 39, 40, 41, 51, 53, 70, 74, 76, 120, 131, 358, 361, 404, 455, 587, 588, 591, 593, 594, 595, 601, 607, 612, 687, 688, 689, 762, 768, 783, 788, 789, 790, 793, 794, 796, 797, 798, 799, 800, 807, 809, 812, 817, 820, 821, 822, 829, 838], "explan": [0, 1, 11, 13, 24, 788, 789, 790, 796, 801, 804, 809, 813, 819], "go": [0, 4, 10, 12, 16, 23, 26, 31, 46, 51, 74, 78, 358, 400, 403, 613, 701, 702, 783, 784, 786, 788, 789, 790, 791, 794, 795, 797, 798, 800, 803, 809, 810, 812, 813, 816, 820, 823, 834, 838, 839, 843, 845], "default": [0, 3, 5, 25, 26, 39, 40, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 94, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 166, 167, 172, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 190, 191, 193, 194, 198, 201, 202, 203, 205, 206, 207, 208, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 352, 355, 356, 358, 359, 360, 361, 364, 365, 366, 368, 370, 371, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 389, 390, 391, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 411, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 513, 514, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 533, 534, 535, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 559, 563, 564, 565, 567, 569, 571, 572, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 598, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 696, 697, 698, 700, 701, 702, 703, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 745, 748, 749, 750, 751, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 777, 788, 789, 790, 794, 795, 798, 799, 800, 801, 802, 804, 805, 809, 812, 815, 817, 821, 825, 831, 838], "which": [0, 3, 16, 17, 18, 19, 20, 23, 25, 26, 27, 28, 29, 30, 31, 38, 39, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 91, 94, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 139, 140, 141, 142, 143, 147, 149, 151, 157, 159, 162, 164, 167, 174, 186, 191, 195, 200, 202, 205, 206, 207, 208, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 295, 296, 297, 298, 299, 300, 301, 312, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 335, 336, 337, 338, 340, 341, 342, 344, 346, 347, 348, 349, 350, 352, 355, 356, 357, 358, 359, 360, 361, 364, 365, 368, 370, 380, 381, 382, 383, 385, 386, 390, 391, 400, 401, 402, 403, 408, 411, 421, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440, 441, 442, 445, 446, 466, 467, 468, 469, 470, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 496, 497, 498, 499, 501, 502, 503, 504, 505, 507, 508, 510, 511, 513, 514, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 537, 538, 541, 542, 547, 548, 549, 550, 564, 565, 567, 569, 571, 572, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 613, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 631, 632, 634, 637, 638, 639, 641, 642, 644, 645, 646, 647, 649, 650, 652, 653, 654, 656, 657, 658, 659, 663, 665, 666, 668, 669, 670, 671, 672, 674, 675, 677, 678, 679, 680, 681, 682, 685, 686, 695, 696, 697, 698, 703, 705, 706, 707, 708, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 745, 748, 749, 750, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 773, 774, 779, 783, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 831, 832, 834, 835, 836, 837, 838, 839, 841, 843, 844, 845], "text": [0, 4, 39, 51, 52, 359, 423, 788, 790, 795, 800, 801], "paragraph": [0, 1, 11, 13, 24, 795], "p": [0, 1, 11, 13, 24, 37, 51, 52, 56, 74, 75, 79, 92, 133, 238, 359, 364, 407, 481, 513, 514, 601, 604, 606, 609, 613, 650, 666, 698, 764, 783, 789, 790, 791], "without": [0, 3, 28, 37, 41, 44, 62, 68, 94, 559, 573, 606, 611, 613, 617, 678, 691, 721, 722, 723, 724, 748, 751, 777, 789, 790, 793, 794, 796, 797, 798, 799, 800, 802, 804, 805, 809, 812, 813, 815, 819, 820, 821, 823, 831, 835, 838, 839, 840, 844], "path": [0, 40, 41, 745, 756, 772, 789, 795, 808, 809, 810, 824, 838], "correspond": [0, 3, 6, 8, 12, 25, 26, 40, 48, 50, 51, 52, 55, 58, 61, 62, 64, 68, 71, 73, 74, 78, 81, 87, 91, 94, 97, 147, 159, 162, 222, 272, 286, 317, 330, 331, 352, 355, 358, 359, 361, 364, 370, 380, 386, 397, 402, 407, 410, 411, 412, 429, 452, 453, 476, 477, 478, 497, 498, 564, 586, 602, 604, 606, 608, 609, 611, 615, 616, 617, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 634, 639, 643, 644, 650, 657, 658, 678, 679, 710, 716, 717, 721, 722, 723, 724, 729, 730, 735, 736, 737, 738, 745, 748, 750, 777, 783, 788, 790, 793, 794, 796, 797, 798, 800, 801, 802, 804, 805, 807, 809, 812, 815, 817, 831, 832, 833, 838], "toctre": [0, 795], "index": [0, 39, 40, 41, 44, 47, 51, 52, 58, 61, 62, 63, 68, 70, 74, 75, 81, 84, 85, 86, 126, 133, 203, 301, 308, 309, 317, 318, 352, 358, 359, 361, 366, 368, 370, 380, 386, 416, 418, 423, 444, 451, 454, 462, 464, 466, 469, 472, 487, 488, 497, 505, 508, 526, 528, 549, 550, 554, 599, 601, 603, 606, 611, 613, 616, 617, 618, 678, 682, 692, 693, 694, 697, 698, 699, 705, 707, 716, 717, 719, 721, 722, 723, 725, 727, 749, 764, 779, 796, 797, 802, 805, 806, 807, 808, 810, 812, 819, 838], "rst": [0, 805], "left": [0, 18, 28, 39, 40, 51, 56, 61, 63, 74, 79, 84, 86, 114, 115, 226, 241, 326, 341, 348, 355, 356, 358, 359, 361, 370, 392, 410, 415, 419, 426, 428, 452, 462, 501, 502, 503, 504, 505, 518, 600, 604, 606, 609, 616, 618, 643, 644, 650, 659, 664, 716, 727, 748, 789, 790, 792, 795, 797, 798, 800], "mai": [0, 49, 50, 51, 56, 62, 63, 72, 73, 79, 86, 96, 97, 120, 127, 138, 208, 234, 235, 241, 246, 254, 262, 263, 267, 268, 270, 285, 321, 322, 355, 386, 517, 553, 601, 603, 604, 606, 609, 617, 618, 619, 657, 666, 721, 722, 723, 724, 725, 728, 732, 733, 734, 736, 748, 787, 788, 789, 790, 792, 796, 797, 798, 802, 805, 806, 807, 809, 810, 812, 815, 818, 819, 821, 829, 845], "need": [0, 3, 6, 8, 14, 16, 22, 23, 25, 26, 39, 40, 41, 51, 52, 58, 74, 75, 81, 358, 359, 370, 380, 385, 386, 390, 410, 503, 513, 514, 535, 606, 608, 609, 611, 613, 634, 643, 671, 674, 701, 749, 783, 785, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 813, 815, 817, 819, 820, 823, 824, 829, 831, 832, 834, 838, 839, 840, 844], "add": [0, 18, 28, 41, 43, 50, 51, 59, 66, 68, 73, 74, 82, 89, 96, 97, 348, 356, 358, 360, 361, 400, 435, 466, 545, 573, 604, 606, 608, 609, 614, 619, 634, 663, 709, 737, 745, 756, 764, 767, 783, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 803, 804, 805, 806, 808, 809, 812, 813, 815, 817, 819, 823, 824, 834, 836, 838], "grid": [0, 41, 47, 133, 304, 352, 601, 800, 812], "item": [0, 4, 25, 26, 37, 39, 41, 46, 52, 66, 68, 70, 73, 74, 75, 128, 153, 190, 244, 260, 268, 327, 330, 343, 515, 525, 526, 530, 564, 565, 601, 602, 603, 606, 613, 620, 695, 696, 697, 698, 702, 707, 708, 742, 765, 766, 783, 788, 796, 798, 817, 819, 820, 822, 831], "card": [0, 51, 74, 345, 355, 843], "refer": [0, 5, 51, 58, 64, 65, 74, 76, 81, 87, 88, 126, 141, 239, 257, 301, 315, 343, 352, 355, 358, 359, 361, 386, 391, 402, 408, 430, 451, 587, 588, 601, 604, 607, 609, 611, 619, 620, 639, 641, 665, 678, 736, 738, 739, 740, 764, 783, 787, 788, 789, 790, 792, 793, 795, 797, 798, 804, 805, 806, 807, 808, 809, 810, 811, 812, 823, 824, 825, 838], "also": [0, 3, 4, 6, 8, 10, 12, 16, 18, 20, 21, 23, 25, 26, 28, 30, 31, 32, 39, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 94, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 147, 148, 149, 162, 165, 166, 167, 169, 174, 191, 208, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 355, 358, 359, 361, 368, 370, 376, 377, 378, 379, 381, 382, 383, 385, 389, 390, 391, 394, 395, 396, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 417, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 513, 514, 517, 518, 519, 520, 521, 522, 525, 526, 529, 531, 533, 534, 535, 537, 538, 539, 541, 542, 544, 549, 550, 564, 565, 566, 567, 569, 571, 572, 585, 587, 588, 591, 593, 594, 595, 596, 601, 602, 604, 606, 607, 608, 609, 611, 612, 613, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 700, 701, 702, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 748, 763, 764, 773, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 812, 813, 815, 817, 820, 821, 822, 823, 824, 827, 828, 831, 832, 834, 835, 836, 837, 838, 839, 841, 843, 844, 845], "look": [0, 5, 16, 25, 26, 39, 41, 44, 783, 786, 788, 789, 790, 794, 795, 796, 798, 799, 800, 802, 803, 804, 805, 809, 810, 812, 813, 814, 815, 817, 819, 821, 822, 824, 827, 831, 834, 838], "document": [0, 16, 25, 58, 241, 321, 322, 355, 586, 604, 606, 682, 784, 785, 787, 790, 795, 797, 798, 800, 808, 809, 810, 812, 820, 822], "sphinx": [0, 785, 795], "design": [0, 16, 25, 74, 241, 300, 305, 306, 352, 604, 783, 791, 795, 797, 798, 808, 809, 810, 811, 815, 817, 819, 823, 827, 828, 834, 836, 838, 841, 842, 843], "websit": [0, 43, 789, 792, 828], "alreadi": [1, 17, 21, 23, 25, 26, 31, 39, 41, 44, 51, 56, 68, 74, 79, 230, 240, 267, 277, 287, 361, 370, 441, 442, 461, 494, 503, 604, 609, 646, 654, 777, 783, 788, 789, 790, 794, 796, 798, 799, 804, 808, 809, 815, 823, 824, 838, 840, 845], "instal": [1, 5, 6, 8, 10, 12, 17, 18, 19, 20, 21, 22, 23, 25, 26, 39, 41, 42, 43, 44, 785, 789, 790, 794, 795, 803], "skip": [1, 4, 41, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 104, 105, 106, 107, 108, 109, 110, 111, 112, 128, 130, 135, 137, 143, 147, 149, 174, 208, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 295, 296, 297, 298, 299, 301, 320, 321, 322, 323, 324, 326, 328, 335, 336, 342, 344, 346, 347, 348, 359, 361, 381, 382, 383, 401, 416, 418, 423, 431, 432, 433, 434, 435, 436, 437, 440, 441, 442, 445, 446, 462, 465, 467, 469, 470, 476, 478, 479, 480, 481, 483, 496, 497, 498, 499, 507, 510, 511, 513, 514, 518, 519, 520, 521, 522, 525, 526, 529, 531, 533, 534, 535, 537, 538, 541, 549, 550, 564, 565, 567, 569, 571, 572, 585, 591, 596, 613, 622, 623, 624, 625, 631, 632, 637, 638, 639, 644, 645, 646, 647, 649, 650, 652, 654, 656, 657, 663, 668, 669, 670, 671, 675, 678, 679, 680, 681, 682, 685, 686, 703, 710, 711, 712, 713, 715, 718, 721, 722, 723, 724, 725, 729, 730, 733, 735, 736, 738, 739, 740, 749, 777, 795, 805, 812], "colab": [1, 4, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 26, 39, 41, 43, 44], "manual": [1, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 26, 613, 690, 700, 701, 788, 789, 790, 798, 803, 812, 821, 824], "do": [1, 3, 5, 6, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 26, 37, 39, 41, 51, 52, 68, 74, 75, 234, 267, 276, 360, 361, 370, 435, 446, 503, 505, 535, 604, 606, 613, 690, 697, 700, 701, 702, 707, 783, 786, 788, 789, 790, 792, 793, 794, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 813, 815, 817, 819, 820, 821, 822, 823, 825, 829, 839, 844, 845], "run": [1, 3, 4, 5, 6, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 39, 41, 42, 43, 51, 53, 74, 76, 364, 476, 478, 587, 588, 593, 607, 612, 687, 688, 689, 745, 746, 764, 765, 766, 767, 777, 783, 785, 788, 789, 791, 793, 794, 797, 799, 800, 802, 803, 804, 806, 809, 810, 817, 818, 819, 820, 821, 822, 823, 824, 831, 832, 833, 836, 838, 839, 840, 841, 843, 844, 845], "below": [1, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 26, 30, 31, 32, 37, 40, 41, 42, 47, 51, 56, 79, 87, 139, 140, 141, 241, 251, 274, 315, 316, 324, 352, 355, 601, 604, 609, 642, 663, 738, 784, 786, 788, 789, 791, 792, 796, 797, 798, 799, 800, 802, 805, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 831, 832, 833, 834, 836, 841, 843], "mind": [1, 10, 12, 16, 22, 25, 29, 788, 789, 793, 794, 796, 812, 824, 832], "packag": [1, 3, 5, 7, 10, 26, 39, 40, 41, 44, 776, 783, 786, 789, 797, 809, 823, 824, 838, 840], "avail": [1, 3, 5, 7, 25, 26, 41, 52, 75, 190, 196, 198, 199, 210, 519, 603, 606, 749, 783, 789, 790, 796, 797, 798, 799, 801, 802, 809, 812, 815, 823, 824, 827, 831, 832, 833, 843, 844], "click": [1, 3, 41, 788, 789, 790, 797, 801, 803, 818], "runtim": [1, 3, 4, 5, 6, 7, 8, 18, 25, 28, 39, 40, 791, 805, 812, 815, 838], "restart": [1, 3, 4, 5, 7, 39, 40, 789], "pip": [1, 3, 4, 5, 6, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 37, 38, 39, 40, 41, 42, 43, 44, 786, 789, 795, 803], "q": [1, 3, 4, 5, 6, 7, 8, 39, 40, 41, 51, 55, 56, 74, 78, 79, 347, 355, 359, 370, 410, 505, 608, 609, 613, 634, 637, 643, 644, 656, 698, 789, 790, 791, 810, 823], "git": [1, 3, 4, 5, 7, 25, 39, 40, 41, 42, 783, 785, 787, 789, 790, 792, 795, 797, 803, 812, 824], "clone": [1, 3, 5, 7, 25, 39, 41, 42, 783, 785, 790, 824], "http": [1, 3, 4, 5, 6, 7, 8, 12, 22, 25, 26, 39, 40, 41, 42, 43, 44, 50, 51, 73, 74, 76, 141, 149, 237, 247, 248, 263, 315, 321, 322, 352, 355, 358, 370, 401, 496, 587, 588, 601, 602, 604, 607, 609, 611, 619, 657, 658, 686, 736, 783, 785, 789, 790, 792, 795, 797, 798, 801, 824, 832], "github": [1, 3, 4, 5, 7, 25, 39, 40, 41, 42, 43, 783, 785, 787, 790, 792, 795, 797, 798, 800, 801, 803, 811, 812, 824, 827], "com": [1, 3, 4, 5, 7, 12, 25, 39, 40, 41, 42, 43, 783, 785, 789, 790, 792, 795, 797, 798, 824], "unifyai": [1, 3, 5, 7, 25, 39, 40, 41, 42, 43, 783, 785, 789, 790, 795, 824], "model": [1, 2, 3, 9, 14, 15, 16, 42, 44, 234, 267, 360, 431, 604, 783, 820, 821, 825, 831, 832, 836, 837, 838, 839, 840, 841, 842, 844, 845], "depth": [1, 3, 5, 7, 40, 47, 51, 55, 70, 74, 78, 135, 358, 361, 393, 448, 518, 530, 601, 606, 608, 626, 627, 762, 766, 790, 797, 820, 821, 822, 824], "1": [1, 3, 4, 5, 6, 7, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 94, 96, 97, 104, 106, 107, 108, 109, 110, 111, 112, 113, 116, 117, 119, 120, 121, 122, 123, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 146, 147, 148, 149, 153, 157, 158, 159, 162, 167, 169, 174, 190, 191, 195, 199, 200, 202, 208, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 312, 313, 315, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 350, 352, 355, 356, 358, 359, 360, 361, 364, 365, 366, 368, 370, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 389, 390, 391, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 510, 511, 513, 514, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 537, 538, 539, 541, 542, 544, 545, 547, 549, 550, 554, 563, 564, 565, 566, 567, 569, 571, 572, 573, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 693, 694, 696, 697, 698, 699, 701, 702, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 745, 748, 749, 750, 751, 753, 756, 760, 762, 763, 764, 765, 766, 767, 768, 769, 773, 777, 783, 786, 789, 790, 792, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 807, 808, 809, 810, 812, 815, 816, 817, 819, 820, 821, 822, 823, 828, 829, 831, 832, 833], "from": [1, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 17, 18, 19, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 55, 56, 58, 60, 61, 64, 65, 66, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 81, 83, 84, 87, 88, 89, 91, 92, 94, 97, 120, 122, 125, 127, 128, 129, 130, 133, 134, 137, 141, 143, 149, 167, 173, 174, 190, 195, 200, 206, 207, 233, 241, 242, 269, 273, 274, 281, 285, 300, 301, 307, 315, 317, 318, 325, 328, 331, 332, 334, 335, 347, 352, 355, 358, 359, 360, 361, 365, 370, 381, 382, 383, 397, 402, 419, 426, 431, 435, 444, 447, 456, 461, 467, 469, 471, 473, 474, 482, 483, 484, 485, 486, 497, 498, 517, 525, 526, 528, 548, 559, 569, 586, 588, 589, 593, 601, 602, 603, 604, 606, 607, 608, 609, 611, 612, 613, 615, 616, 617, 619, 620, 622, 630, 631, 639, 642, 659, 663, 664, 665, 672, 675, 678, 681, 687, 688, 689, 691, 702, 703, 704, 710, 711, 712, 713, 717, 720, 721, 723, 729, 730, 735, 736, 737, 738, 739, 740, 743, 745, 748, 749, 750, 751, 756, 761, 762, 763, 764, 766, 768, 773, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 812, 813, 815, 817, 818, 819, 820, 821, 822, 823, 825, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 842, 843, 844, 845], "repositori": [1, 3, 5, 7, 785, 789, 790, 791, 792, 795, 811, 829], "cd": [1, 3, 5, 7, 25, 42, 783, 785, 789, 790, 824], "here": [1, 3, 11, 13, 16, 21, 24, 25, 26, 37, 39, 40, 41, 42, 44, 74, 277, 437, 604, 783, 786, 787, 788, 789, 790, 792, 794, 795, 796, 797, 798, 800, 803, 804, 806, 807, 808, 809, 810, 812, 813, 817, 818, 819, 820, 821, 822, 823, 831, 832, 833, 838, 839], "normal": [1, 3, 7, 10, 11, 12, 13, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 39, 40, 51, 59, 60, 74, 82, 83, 91, 92, 344, 355, 358, 364, 370, 379, 380, 385, 386, 389, 390, 391, 401, 402, 476, 477, 478, 479, 480, 481, 496, 499, 611, 614, 615, 672, 682, 709, 710, 712, 763, 764, 767, 783, 788, 808, 809, 815, 820, 831, 833, 836], "resnet": [2, 8, 14, 25, 831, 832], "imag": [2, 3, 6, 8, 10, 14, 22, 25, 26, 39, 40, 41, 42, 43, 44, 50, 51, 55, 73, 74, 78, 96, 214, 215, 216, 217, 220, 223, 232, 235, 237, 239, 248, 249, 250, 255, 257, 270, 277, 278, 280, 281, 285, 358, 376, 377, 393, 394, 395, 397, 518, 604, 606, 608, 621, 622, 623, 624, 625, 628, 629, 630, 764, 783, 789, 815, 817, 818, 820, 822, 824, 831, 832, 838], "classif": [2, 3, 7, 14, 39, 783, 838], "acceler": [2, 14, 783, 798, 809, 836, 840, 841, 842, 843], "pytorch": [2, 3, 4, 5, 6, 7, 9, 11, 12, 14, 15, 23, 25, 26, 37, 44, 277, 321, 322, 355, 604, 768, 783, 787, 788, 793, 798, 799, 802, 804, 805, 808, 809, 810, 815, 817, 822, 823, 825, 828, 829, 831, 832, 839, 841, 842, 844, 845], "jax": [2, 14, 15, 16, 17, 18, 19, 22, 25, 26, 27, 28, 29, 31, 37, 39, 43, 45, 50, 51, 52, 62, 67, 73, 74, 75, 104, 105, 106, 107, 108, 109, 110, 111, 112, 285, 289, 292, 293, 295, 334, 350, 355, 370, 505, 535, 567, 586, 598, 604, 606, 617, 721, 722, 723, 724, 756, 760, 773, 783, 786, 787, 788, 789, 790, 792, 794, 798, 799, 802, 804, 807, 808, 809, 810, 812, 813, 815, 817, 819, 822, 823, 828, 829, 831, 832, 833, 839, 841, 844, 845], "convert": [2, 5, 6, 8, 10, 12, 14, 15, 17, 19, 22, 23, 25, 26, 27, 29, 31, 39, 42, 44, 46, 47, 50, 68, 69, 70, 73, 91, 121, 122, 134, 144, 145, 187, 188, 189, 190, 201, 209, 213, 233, 273, 361, 366, 440, 441, 442, 487, 551, 568, 570, 571, 572, 574, 601, 602, 603, 604, 606, 609, 613, 667, 691, 702, 703, 745, 773, 777, 783, 788, 793, 794, 806, 807, 809, 812, 814, 817, 823, 825, 829, 832, 836, 837, 844], "them": [2, 3, 6, 8, 10, 12, 14, 25, 26, 31, 359, 425, 512, 548, 606, 748, 764, 783, 785, 788, 790, 792, 793, 794, 795, 796, 797, 798, 802, 803, 806, 808, 809, 810, 812, 814, 817, 819, 820, 821, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 838, 840, 844], "faster": [2, 3, 6, 8, 14, 25, 26, 42, 44, 51, 56, 74, 79, 359, 428, 609, 659, 785, 787, 795, 825, 840, 843], "infer": [2, 6, 8, 14, 18, 28, 30, 31, 40, 42, 44, 47, 51, 52, 55, 58, 70, 74, 75, 78, 81, 120, 122, 125, 129, 130, 134, 137, 143, 152, 153, 154, 155, 156, 300, 301, 365, 484, 529, 563, 601, 602, 606, 608, 611, 631, 678, 773, 774, 791, 794, 798, 799, 812, 817, 822, 832, 836, 837, 840, 842], "mmpretrain": [2, 14], "segment": [2, 14, 51, 74, 317, 318, 352, 795, 800], "unet": [2, 14], "alexnet": [2, 14], "In": [2, 3, 4, 10, 12, 14, 16, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 44, 49, 51, 52, 58, 72, 75, 81, 91, 92, 201, 208, 209, 213, 217, 234, 235, 241, 249, 250, 267, 270, 276, 278, 358, 361, 364, 381, 382, 383, 440, 441, 442, 447, 449, 451, 452, 453, 454, 456, 460, 466, 467, 474, 476, 478, 508, 528, 535, 553, 603, 604, 606, 609, 611, 615, 657, 674, 675, 676, 678, 680, 681, 683, 685, 713, 783, 788, 789, 790, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 812, 813, 814, 815, 819, 820, 821, 822, 823, 827, 829, 831, 832, 833, 834, 836, 838, 839, 841, 844], "we": [2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 42, 43, 44, 51, 56, 57, 58, 66, 74, 79, 80, 89, 91, 92, 112, 349, 357, 361, 440, 441, 442, 447, 449, 451, 452, 453, 456, 460, 467, 470, 474, 518, 528, 567, 589, 590, 592, 597, 598, 606, 607, 609, 610, 611, 652, 668, 674, 675, 676, 678, 680, 681, 683, 685, 760, 762, 766, 773, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 838, 839, 843, 844], "show": [2, 3, 4, 7, 14, 20, 25, 26, 27, 28, 30, 37, 39, 41, 42, 552, 561, 583, 606, 762, 783, 788, 789, 790, 795, 797, 800, 803, 808, 809, 812, 814, 823, 831, 838], "how": [2, 3, 4, 5, 6, 8, 10, 12, 14, 15, 16, 17, 18, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 37, 40, 43, 44, 45, 50, 51, 67, 73, 74, 94, 104, 105, 106, 107, 108, 109, 110, 111, 112, 234, 267, 285, 289, 292, 293, 295, 350, 361, 444, 469, 598, 604, 760, 762, 763, 764, 765, 766, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 827, 829, 834, 838], "written": [2, 3, 4, 14, 16, 25, 26, 39, 52, 361, 450, 789, 792, 793, 801, 803, 804, 808, 809, 813, 817, 819, 822, 823, 827, 832, 836, 838, 842, 844, 845], "nativ": [3, 4, 16, 25, 26, 46, 47, 48, 49, 52, 69, 72, 75, 96, 100, 134, 144, 145, 151, 152, 153, 154, 155, 156, 170, 173, 188, 189, 190, 191, 201, 209, 213, 535, 537, 541, 548, 553, 570, 601, 602, 603, 606, 745, 756, 761, 773, 783, 786, 788, 794, 798, 799, 802, 805, 806, 808, 809, 810, 812, 817, 819, 820, 825, 831, 832, 833, 836, 845], "integr": [3, 4, 10, 12, 19, 26, 29, 48, 50, 51, 71, 73, 74, 146, 286, 340, 355, 370, 499, 602, 604, 783, 787, 789, 791, 806, 832, 836, 838, 840, 841, 842], "three": [3, 4, 14, 20, 30, 31, 41, 51, 133, 300, 352, 361, 442, 601, 789, 790, 796, 797, 798, 800, 809, 812, 815, 816, 817, 839, 844], "major": [3, 4, 616, 719, 798, 799, 810, 812, 823, 828, 835, 838], "ml": [3, 4, 14, 15, 16, 17, 18, 19, 25, 26, 27, 28, 29, 30, 31, 32, 39, 41, 44, 783, 784, 787, 809, 816, 817, 818, 820, 821, 822, 826, 828, 829, 832, 834, 835, 836, 837, 838, 841, 843, 845], "framework": [3, 4, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 32, 39, 41, 43, 46, 52, 164, 186, 196, 199, 210, 516, 532, 536, 567, 570, 602, 603, 606, 613, 692, 743, 745, 749, 756, 761, 768, 773, 774, 783, 786, 788, 789, 791, 792, 793, 794, 795, 797, 798, 799, 800, 802, 804, 805, 806, 808, 809, 812, 813, 815, 816, 817, 819, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 842], "sinc": [3, 5, 7, 22, 23, 25, 26, 39, 41, 51, 74, 92, 355, 783, 785, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 802, 808, 809, 823, 828, 838, 844], "want": [3, 5, 7, 8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 38, 39, 41, 51, 66, 74, 89, 234, 267, 361, 449, 604, 762, 766, 783, 784, 785, 788, 789, 790, 795, 797, 799, 802, 803, 805, 806, 807, 808, 812, 815, 820, 821, 822, 823, 824, 828, 832], "after": [3, 4, 5, 6, 7, 8, 25, 26, 40, 51, 52, 53, 55, 59, 68, 74, 75, 76, 78, 82, 180, 281, 342, 355, 358, 359, 361, 380, 381, 382, 383, 400, 403, 422, 450, 461, 535, 588, 591, 593, 594, 595, 602, 604, 606, 607, 608, 613, 614, 621, 622, 623, 624, 626, 628, 630, 631, 701, 709, 768, 773, 783, 788, 789, 790, 792, 794, 795, 797, 798, 800, 802, 804, 807, 810, 812, 816, 824, 831, 832, 838], "first": [3, 4, 5, 7, 10, 16, 18, 19, 20, 22, 25, 26, 28, 29, 30, 39, 42, 43, 44, 47, 50, 51, 56, 58, 60, 61, 62, 64, 70, 73, 74, 75, 79, 81, 83, 85, 87, 91, 92, 96, 97, 116, 117, 131, 132, 141, 172, 180, 190, 217, 222, 224, 226, 227, 228, 229, 235, 241, 242, 243, 244, 245, 246, 252, 253, 254, 259, 260, 261, 263, 264, 267, 270, 272, 283, 284, 294, 300, 301, 315, 317, 318, 320, 332, 334, 335, 336, 342, 346, 347, 350, 352, 355, 358, 359, 360, 361, 368, 370, 380, 409, 410, 411, 413, 417, 436, 445, 447, 451, 458, 461, 463, 464, 467, 473, 483, 485, 489, 497, 498, 499, 505, 510, 600, 601, 602, 603, 604, 606, 608, 609, 611, 612, 613, 616, 617, 618, 619, 634, 639, 642, 643, 644, 646, 649, 654, 656, 657, 659, 661, 665, 678, 679, 682, 683, 687, 688, 689, 690, 691, 700, 701, 703, 715, 716, 717, 721, 722, 723, 726, 727, 729, 730, 745, 763, 764, 765, 766, 768, 773, 783, 785, 787, 788, 789, 790, 792, 793, 794, 795, 796, 799, 800, 803, 804, 805, 806, 808, 809, 812, 815, 817, 819, 820, 822, 824, 827, 828, 831, 832, 836, 838, 839, 843], "notebook": [3, 4, 5, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 29, 31, 40, 766, 783], "automat": [3, 5, 7, 25, 26, 31, 783, 788, 789, 790, 791, 794, 795, 797, 798, 803, 805, 808, 812, 815, 816, 818, 821, 822, 824, 825, 829, 838, 841, 845], "sure": [3, 5, 6, 7, 8, 25, 39, 788, 789, 790, 792, 797, 802, 809, 810, 812, 815, 824], "gpu": [3, 4, 5, 6, 7, 8, 39, 41, 43, 44, 190, 192, 193, 196, 199, 201, 203, 205, 206, 209, 211, 213, 603, 783, 789, 790, 797, 799, 819, 824, 836, 838, 841, 842, 843], "enabl": [3, 4, 5, 6, 7, 8, 23, 40, 51, 56, 68, 79, 97, 358, 360, 380, 434, 553, 606, 609, 652, 783, 789, 790, 793, 796, 798, 805, 806, 807, 808, 809, 812, 813, 816, 818, 820, 822, 823, 825, 828, 831, 836, 837, 838, 839, 840, 841, 844, 845], "dm": [3, 4, 5, 6, 8, 25, 26, 37, 39], "haiku": [3, 4, 5, 6, 8, 23, 25, 26, 37, 39, 43, 761, 783, 822, 829, 832, 838], "exit": [3, 5, 7, 22, 25, 26, 799], "download": [3, 7, 10, 12, 25, 26, 40, 41, 44, 785, 789, 795, 812, 831, 832], "imagenet": [3, 12, 40, 42, 783], "class": [3, 5, 7, 10, 12, 16, 25, 26, 37, 38, 39, 40, 41, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 128, 137, 143, 159, 162, 175, 177, 178, 237, 274, 324, 345, 355, 369, 370, 377, 378, 410, 502, 503, 509, 518, 522, 535, 545, 567, 601, 602, 603, 604, 606, 608, 609, 610, 613, 614, 633, 637, 643, 654, 658, 659, 661, 668, 684, 691, 702, 709, 724, 731, 735, 736, 745, 746, 753, 754, 755, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 772, 773, 777, 781, 783, 788, 794, 795, 796, 798, 799, 800, 801, 804, 806, 807, 810, 811, 812, 815, 817, 818, 820, 821, 822, 825, 831, 832, 836, 838, 839, 845], "preprocess": [3, 7, 25, 26, 39, 42, 831], "wget": [3, 5, 7, 39, 40, 43, 789], "raw": [3, 5, 6, 7, 8, 22, 25, 26, 39, 42, 43, 68, 783, 801, 832, 839], "githubusercont": [3, 5, 7, 39, 43], "hub": [3, 5, 7, 39, 42, 44], "master": [3, 5, 7, 17, 18, 19, 27, 28, 29, 30, 31, 32, 39, 41, 42, 43, 797, 838], "imagenet_class": [3, 7], "txt": [3, 7, 40, 52, 789, 792, 795], "r": [3, 7, 39, 40, 51, 56, 68, 74, 79, 91, 92, 334, 349, 355, 357, 589, 607, 609, 611, 656, 685, 789, 790, 791, 807, 810], "f": [3, 4, 6, 7, 25, 26, 38, 39, 41, 51, 58, 74, 81, 294, 307, 350, 352, 361, 451, 471, 611, 613, 678, 693, 697, 698, 699, 702, 707, 708, 783, 784, 790, 791, 796, 797, 802, 813, 817, 819, 820, 829, 834], "categori": [3, 7, 788, 792, 793, 796, 798, 802, 809, 813, 816], "strip": [3, 7, 18, 28, 828], "readlin": [3, 7, 40], "cat": [3, 7, 40, 810, 815, 817, 822, 831, 832], "jpg": [3, 5, 6, 7, 8, 22, 25, 26, 41, 42, 783, 832], "filenam": [3, 5, 7, 25, 26, 39, 41, 44, 52, 766, 772, 820], "3": [3, 5, 6, 7, 10, 12, 16, 19, 21, 22, 23, 25, 26, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 60, 61, 62, 64, 65, 67, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 119, 120, 121, 122, 126, 128, 130, 131, 133, 134, 135, 136, 137, 141, 142, 143, 146, 147, 148, 149, 153, 157, 159, 167, 169, 174, 188, 190, 191, 202, 205, 208, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 315, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 350, 352, 355, 356, 358, 359, 360, 361, 364, 365, 366, 368, 370, 376, 377, 378, 379, 381, 384, 385, 386, 389, 390, 394, 395, 396, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 417, 422, 425, 427, 430, 431, 432, 433, 434, 435, 436, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 452, 453, 455, 456, 457, 458, 460, 461, 466, 467, 468, 469, 470, 471, 473, 474, 475, 479, 480, 481, 484, 486, 487, 488, 489, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 507, 510, 511, 512, 513, 514, 517, 518, 519, 520, 521, 522, 525, 526, 529, 530, 531, 533, 534, 535, 537, 538, 539, 541, 542, 544, 545, 549, 550, 563, 564, 565, 569, 572, 573, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 691, 693, 694, 696, 697, 698, 699, 701, 702, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 745, 748, 751, 764, 777, 783, 786, 788, 789, 792, 793, 794, 796, 797, 798, 800, 802, 805, 807, 810, 812, 817, 819, 820, 821, 822, 831, 832, 845], "import": [3, 6, 8, 10, 12, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 39, 40, 42, 43, 44, 51, 62, 66, 70, 74, 89, 188, 189, 193, 203, 205, 370, 496, 530, 603, 606, 612, 617, 688, 689, 724, 756, 773, 774, 783, 787, 788, 789, 790, 792, 793, 794, 795, 796, 798, 799, 800, 801, 803, 806, 807, 808, 809, 810, 811, 812, 813, 817, 819, 820, 822, 823, 824, 828, 831, 832, 833, 834, 836, 838, 841, 842, 844], "torchvis": [3, 6, 7, 39, 829], "transform": [3, 4, 6, 7, 8, 22, 25, 26, 39, 40, 42, 51, 55, 74, 78, 358, 359, 379, 380, 385, 386, 389, 390, 391, 401, 402, 404, 419, 608, 632, 748, 751, 764, 783, 806, 812, 822, 825, 831, 832, 836, 838, 839, 840], "pil": [3, 5, 6, 7, 8, 22, 25, 26, 40, 41, 42, 783, 832], "numpi": [3, 4, 5, 6, 8, 10, 12, 17, 20, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 37, 38, 39, 41, 42, 43, 44, 50, 51, 52, 64, 73, 74, 75, 141, 170, 188, 218, 278, 315, 352, 370, 496, 503, 511, 535, 564, 567, 571, 601, 602, 603, 604, 606, 619, 731, 743, 745, 756, 773, 777, 783, 787, 788, 789, 790, 792, 793, 794, 797, 798, 799, 802, 804, 808, 810, 812, 813, 815, 817, 819, 822, 824, 825, 827, 828, 831, 832, 833, 840, 845], "np": [3, 4, 5, 6, 8, 10, 12, 17, 20, 21, 22, 23, 25, 26, 27, 30, 31, 32, 37, 38, 39, 40, 41, 42, 44, 47, 50, 51, 73, 74, 75, 121, 122, 123, 134, 170, 247, 251, 358, 359, 385, 390, 405, 564, 601, 602, 604, 606, 613, 696, 745, 773, 777, 783, 788, 793, 798, 799, 802, 804, 808, 809, 810, 812, 813, 815, 817, 819, 820, 822, 825, 833], "warn": [3, 4, 5, 39, 40, 41, 44, 780, 789, 790, 814, 831, 832, 833], "time": [3, 4, 6, 8, 23, 25, 26, 31, 39, 41, 42, 43, 51, 53, 56, 62, 74, 76, 85, 91, 92, 128, 327, 355, 358, 359, 361, 370, 386, 391, 404, 423, 430, 461, 467, 496, 588, 593, 601, 607, 608, 609, 611, 612, 616, 617, 631, 633, 649, 684, 687, 688, 689, 716, 717, 721, 722, 764, 765, 766, 788, 789, 790, 792, 794, 796, 797, 798, 800, 804, 805, 806, 808, 809, 812, 813, 817, 820, 822, 823, 824, 827, 828, 829, 831, 832, 836, 838, 839, 842, 843, 844], "filterwarn": [3, 4], "ignor": [3, 4, 38, 46, 47, 51, 68, 74, 133, 358, 359, 361, 381, 382, 383, 411, 425, 463, 464, 468, 601, 608, 609, 613, 634, 648, 701, 702, 768, 789, 795, 797, 800, 812, 823, 844], "compos": [3, 6, 7, 25, 26, 39, 51, 74, 358, 372, 373, 374, 762, 789, 796, 809, 812, 831, 833, 838, 845], "resiz": [3, 5, 6, 7, 39, 40, 51, 74, 358, 393, 815], "256": [3, 5, 7, 50, 75, 277, 278, 565, 608, 623, 625, 627, 748], "centercrop": [3, 7], "224": [3, 7, 10, 12, 25, 26, 39, 40, 42, 783, 832], "totensor": [3, 6, 7, 39], "mean": [3, 6, 7, 8, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 40, 41, 51, 52, 55, 57, 58, 60, 64, 66, 68, 70, 74, 75, 78, 80, 81, 83, 87, 89, 91, 128, 207, 326, 355, 358, 359, 360, 361, 364, 365, 370, 386, 391, 408, 419, 431, 432, 433, 434, 435, 436, 437, 446, 451, 461, 476, 478, 483, 502, 503, 519, 589, 590, 592, 597, 601, 603, 606, 607, 608, 609, 610, 611, 612, 613, 615, 619, 623, 625, 626, 627, 630, 631, 641, 668, 669, 670, 678, 687, 688, 689, 696, 711, 712, 748, 750, 751, 763, 764, 767, 783, 789, 790, 791, 792, 794, 796, 798, 799, 800, 805, 807, 808, 809, 812, 813, 815, 817, 819, 820, 821, 822, 823, 825, 832, 833, 835, 838], "0": [3, 4, 5, 6, 7, 10, 12, 17, 18, 19, 20, 21, 22, 23, 25, 26, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 119, 120, 123, 126, 128, 129, 130, 131, 132, 135, 137, 139, 140, 141, 142, 143, 146, 147, 148, 149, 157, 159, 162, 163, 167, 169, 174, 187, 190, 192, 195, 200, 201, 202, 203, 205, 206, 207, 209, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 228, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 352, 355, 356, 358, 359, 360, 361, 364, 365, 368, 370, 376, 379, 380, 381, 382, 383, 384, 385, 386, 389, 390, 391, 394, 395, 396, 397, 400, 401, 402, 403, 406, 407, 408, 410, 411, 412, 415, 416, 418, 419, 420, 423, 424, 425, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 444, 446, 447, 448, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 510, 512, 513, 514, 517, 518, 519, 521, 522, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 537, 538, 539, 541, 542, 545, 547, 549, 550, 554, 559, 563, 564, 565, 567, 569, 571, 572, 581, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 693, 696, 697, 698, 699, 701, 702, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 745, 748, 749, 750, 751, 753, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 773, 777, 783, 786, 789, 790, 792, 794, 796, 797, 798, 799, 800, 801, 802, 807, 808, 809, 810, 812, 813, 817, 819, 820, 821, 822, 823, 831, 832], "485": [3, 7, 39], "456": [3, 7, 39, 812], "406": [3, 7, 39, 51, 74, 379, 513, 606], "std": [3, 6, 7, 8, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 40, 55, 60, 64, 78, 83, 87, 365, 483, 608, 615, 619, 623, 625, 626, 627, 630, 711, 712, 783, 800, 833], "229": [3, 7, 39, 273, 604], "225": [3, 7, 39, 41, 228, 604], "torch_img": [3, 5, 7], "unsqueez": [3, 5, 6, 7], "img": [3, 5, 7, 22, 25, 26, 39, 40, 41, 43, 783, 820, 832], "4": [3, 4, 5, 6, 7, 8, 10, 16, 18, 19, 20, 21, 22, 23, 25, 37, 38, 39, 40, 41, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 60, 61, 62, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 96, 97, 104, 105, 106, 107, 108, 109, 111, 112, 120, 121, 122, 123, 126, 128, 130, 131, 132, 133, 134, 135, 137, 141, 143, 147, 148, 149, 157, 159, 162, 167, 169, 174, 191, 192, 200, 205, 208, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 293, 295, 296, 297, 298, 299, 300, 301, 303, 308, 309, 315, 321, 322, 324, 326, 327, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 348, 350, 352, 355, 356, 358, 359, 360, 361, 364, 365, 366, 368, 370, 376, 377, 378, 379, 381, 382, 384, 385, 386, 389, 390, 394, 395, 396, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 417, 419, 425, 431, 432, 433, 434, 435, 436, 438, 440, 441, 442, 444, 445, 446, 447, 448, 451, 452, 453, 456, 457, 458, 460, 461, 466, 467, 468, 469, 470, 473, 474, 475, 479, 480, 481, 484, 486, 487, 489, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 513, 514, 517, 518, 519, 520, 521, 522, 525, 526, 528, 531, 533, 534, 535, 542, 549, 550, 564, 565, 566, 567, 569, 573, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 689, 691, 693, 694, 696, 697, 698, 699, 701, 702, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 745, 748, 749, 751, 763, 764, 768, 777, 783, 786, 788, 789, 794, 795, 796, 797, 798, 800, 807, 810, 812, 815, 817, 819, 820, 821, 822, 829, 831, 838, 844, 845], "ipython": [3, 5, 7, 25, 26, 44], "displai": [3, 5, 7, 22, 25, 26, 39, 40, 41, 43, 44, 789, 795, 797, 802, 812, 820], "end": [3, 5, 39, 40, 51, 74, 120, 222, 278, 338, 355, 358, 361, 404, 451, 461, 463, 464, 601, 604, 762, 783, 789, 790, 794, 797, 808, 813, 815, 816, 823, 836, 841], "see": [3, 4, 6, 8, 17, 18, 23, 25, 26, 27, 28, 32, 37, 38, 44, 45, 48, 50, 51, 56, 61, 62, 64, 65, 67, 73, 74, 79, 84, 87, 88, 91, 92, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 120, 127, 131, 138, 141, 148, 167, 174, 217, 222, 224, 226, 227, 228, 229, 234, 235, 239, 241, 245, 246, 253, 254, 257, 259, 261, 263, 264, 267, 270, 272, 276, 283, 285, 288, 289, 292, 293, 295, 315, 321, 322, 350, 352, 355, 359, 360, 407, 432, 598, 601, 602, 604, 609, 616, 617, 619, 620, 639, 652, 655, 658, 665, 666, 717, 721, 722, 723, 724, 732, 733, 734, 735, 736, 737, 738, 739, 740, 760, 783, 784, 786, 788, 789, 790, 792, 793, 795, 796, 797, 798, 799, 800, 803, 804, 805, 809, 810, 812, 815, 817, 819, 820, 823, 827, 834], "5": [3, 4, 5, 6, 7, 10, 18, 21, 22, 23, 25, 26, 37, 39, 40, 41, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 67, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 91, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 117, 120, 121, 122, 128, 130, 131, 132, 133, 134, 135, 136, 137, 142, 143, 147, 148, 149, 153, 157, 159, 167, 169, 174, 191, 200, 205, 208, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 305, 306, 307, 319, 321, 322, 324, 326, 328, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 350, 352, 355, 356, 358, 359, 360, 361, 366, 368, 370, 376, 377, 378, 379, 381, 382, 384, 385, 386, 389, 390, 394, 395, 396, 399, 400, 401, 402, 403, 406, 409, 410, 412, 413, 415, 424, 427, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 445, 446, 447, 448, 451, 452, 455, 456, 457, 460, 461, 466, 467, 468, 469, 470, 474, 475, 480, 481, 484, 486, 487, 489, 494, 496, 497, 498, 499, 500, 501, 503, 505, 511, 512, 513, 514, 517, 518, 519, 520, 522, 525, 526, 528, 531, 533, 534, 535, 549, 550, 554, 564, 565, 566, 567, 569, 573, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 653, 654, 655, 656, 657, 659, 660, 661, 663, 664, 665, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 691, 693, 696, 697, 698, 699, 701, 702, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 748, 749, 750, 751, 764, 777, 783, 788, 789, 790, 792, 794, 796, 797, 798, 800, 802, 804, 807, 810, 812, 819, 820, 821, 832], "set_backend": [3, 4, 5, 7, 16, 17, 18, 19, 20, 21, 25, 26, 28, 29, 30, 31, 32, 38, 40, 41, 42, 50, 52, 66, 73, 75, 161, 170, 188, 189, 203, 205, 210, 218, 511, 535, 602, 603, 606, 612, 688, 689, 773, 783, 792, 794, 798, 799, 805, 806, 807, 817, 819, 822, 831, 832, 833], "ivy_model": [3, 4, 5, 7, 42], "ivy_alexnet": 3, "order": [3, 19, 29, 31, 39, 42, 44, 47, 51, 52, 55, 56, 58, 62, 63, 68, 74, 78, 79, 81, 85, 86, 91, 96, 97, 121, 122, 133, 141, 222, 241, 284, 315, 334, 352, 355, 359, 361, 364, 368, 407, 410, 411, 412, 413, 414, 418, 422, 424, 427, 430, 451, 452, 453, 458, 459, 470, 476, 477, 478, 489, 601, 604, 608, 609, 611, 612, 616, 617, 618, 622, 623, 624, 625, 626, 627, 630, 643, 644, 650, 659, 660, 664, 666, 675, 678, 687, 688, 719, 721, 722, 723, 724, 725, 727, 728, 745, 762, 766, 767, 769, 783, 788, 789, 790, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 809, 810, 811, 812, 813, 814, 815, 820, 822, 823, 827, 834, 837, 838, 839, 841, 844], "quick": [3, 14, 26, 790, 791, 810, 821], "call": [3, 6, 10, 12, 16, 18, 19, 20, 21, 22, 25, 26, 28, 29, 30, 31, 32, 39, 43, 51, 66, 71, 74, 89, 91, 97, 116, 166, 167, 207, 359, 370, 422, 503, 553, 559, 573, 589, 590, 592, 600, 603, 606, 607, 609, 613, 657, 690, 696, 700, 701, 745, 756, 762, 764, 765, 766, 768, 773, 783, 788, 789, 790, 793, 794, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 808, 809, 810, 812, 813, 815, 817, 819, 820, 821, 822, 823, 828, 831, 832, 833, 838, 839, 842], "take": [3, 7, 16, 23, 25, 26, 31, 37, 39, 42, 51, 56, 58, 64, 74, 81, 91, 116, 117, 119, 135, 274, 281, 294, 350, 358, 359, 361, 377, 385, 390, 395, 404, 413, 425, 444, 451, 469, 497, 498, 600, 601, 604, 608, 609, 611, 612, 634, 649, 653, 678, 689, 729, 748, 756, 763, 764, 777, 783, 784, 788, 789, 790, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 808, 809, 810, 812, 815, 817, 819, 821, 822, 823, 824, 829, 831, 832, 835, 836, 844], "moment": [3, 51, 53, 74, 76, 359, 414, 587, 588, 593, 607, 768, 788, 794, 823, 831, 832], "one": [3, 6, 8, 10, 12, 14, 15, 18, 19, 22, 23, 25, 26, 28, 29, 41, 42, 43, 47, 51, 52, 55, 56, 58, 61, 62, 64, 68, 70, 73, 74, 75, 76, 78, 79, 81, 82, 84, 85, 86, 87, 91, 120, 123, 133, 135, 136, 137, 147, 149, 207, 228, 234, 241, 242, 259, 265, 266, 267, 286, 294, 300, 303, 304, 320, 326, 329, 332, 333, 336, 337, 338, 340, 341, 348, 350, 352, 355, 356, 358, 359, 360, 361, 364, 365, 370, 379, 381, 385, 386, 389, 390, 393, 401, 405, 407, 416, 423, 436, 440, 441, 442, 445, 451, 452, 453, 458, 460, 465, 468, 476, 477, 478, 482, 487, 497, 498, 501, 502, 503, 504, 505, 507, 545, 549, 550, 552, 569, 571, 572, 585, 587, 588, 591, 593, 594, 595, 596, 601, 602, 603, 604, 606, 607, 608, 609, 611, 614, 616, 617, 619, 622, 623, 624, 625, 626, 627, 630, 646, 649, 650, 654, 656, 665, 666, 674, 675, 676, 679, 681, 685, 709, 716, 719, 721, 722, 723, 724, 729, 731, 748, 750, 767, 770, 773, 780, 783, 788, 789, 790, 792, 793, 794, 795, 796, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 812, 814, 815, 816, 819, 820, 822, 823, 824, 825, 828, 829, 832, 838, 839, 841, 844], "cost": [3, 53, 76, 587, 588, 591, 593, 594, 595, 607, 612, 687, 688, 689, 798, 815, 836], "arg": [3, 5, 6, 7, 10, 12, 20, 21, 23, 25, 26, 30, 31, 32, 43, 46, 68, 90, 100, 116, 197, 207, 573, 600, 601, 603, 606, 743, 745, 760, 761, 764, 766, 770, 773, 777, 781, 783, 793, 798, 799, 802, 807, 808, 809, 815, 817, 821, 831, 832, 833], "asarrai": [3, 4, 5, 6, 7, 40, 47, 51, 52, 63, 70, 74, 75, 86, 121, 368, 488, 489, 518, 529, 533, 534, 564, 565, 601, 606, 608, 617, 618, 622, 722, 726, 802, 806, 809, 810], "cuda": [3, 4, 5, 6, 7, 8, 16, 25, 40, 41, 44, 47, 51, 60, 70, 74, 83, 131, 132, 135, 187, 188, 189, 203, 205, 365, 482, 483, 485, 486, 601, 603, 615, 710, 711, 712, 713, 763, 764, 765, 766, 767, 768, 769, 783, 817, 823, 825, 843], "7": [3, 5, 6, 8, 10, 12, 17, 18, 20, 21, 23, 37, 39, 40, 41, 43, 44, 45, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 96, 97, 106, 107, 108, 109, 120, 121, 122, 131, 134, 135, 153, 159, 162, 192, 214, 217, 220, 224, 225, 227, 228, 229, 230, 232, 234, 235, 236, 237, 238, 240, 241, 244, 245, 246, 251, 252, 253, 254, 255, 256, 257, 258, 259, 262, 264, 265, 266, 267, 269, 270, 271, 273, 274, 277, 278, 279, 281, 284, 285, 287, 288, 290, 291, 293, 295, 296, 297, 298, 299, 300, 301, 303, 306, 307, 320, 324, 326, 327, 334, 335, 336, 338, 340, 341, 348, 350, 352, 355, 356, 358, 359, 360, 361, 366, 370, 376, 377, 378, 379, 384, 385, 389, 390, 394, 399, 400, 401, 402, 403, 406, 409, 420, 431, 432, 433, 434, 436, 437, 440, 441, 442, 445, 447, 451, 456, 457, 460, 461, 466, 467, 469, 471, 474, 475, 484, 486, 487, 494, 497, 498, 500, 501, 505, 511, 513, 514, 518, 519, 522, 533, 534, 535, 542, 549, 550, 564, 567, 587, 588, 590, 591, 592, 593, 594, 595, 598, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 622, 623, 625, 627, 630, 631, 632, 637, 639, 640, 641, 642, 644, 645, 646, 649, 651, 654, 656, 657, 659, 660, 661, 663, 664, 665, 668, 669, 670, 671, 674, 675, 680, 682, 683, 685, 690, 691, 698, 702, 709, 710, 711, 712, 713, 715, 720, 721, 723, 725, 726, 728, 729, 730, 731, 733, 735, 737, 738, 748, 789, 790, 794, 796, 797, 800, 805, 808, 812], "output": [3, 4, 5, 7, 16, 22, 23, 25, 26, 38, 39, 40, 42, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 146, 148, 173, 207, 208, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 352, 355, 357, 358, 359, 360, 361, 364, 365, 366, 368, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 389, 390, 391, 393, 394, 395, 396, 399, 401, 402, 404, 405, 407, 408, 409, 411, 413, 416, 417, 420, 421, 422, 423, 425, 426, 429, 431, 432, 433, 434, 435, 436, 437, 438, 444, 445, 446, 449, 451, 452, 453, 454, 455, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 512, 513, 514, 518, 519, 520, 522, 526, 535, 542, 549, 550, 551, 574, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 686, 703, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 748, 763, 764, 777, 783, 785, 789, 790, 791, 792, 793, 795, 796, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 817, 819, 821, 822, 823, 825, 831, 832, 839], "softmax": [3, 7, 10, 23, 25, 26, 41, 45, 55, 66, 67, 78, 360, 432, 598, 608, 634, 637, 760, 783], "pass": [3, 5, 6, 7, 8, 10, 12, 16, 23, 25, 26, 32, 38, 39, 41, 43, 44, 50, 51, 66, 68, 73, 74, 89, 97, 116, 117, 119, 151, 173, 188, 207, 222, 268, 360, 361, 364, 365, 370, 432, 451, 476, 478, 482, 502, 503, 535, 600, 602, 603, 604, 606, 612, 687, 688, 743, 745, 749, 756, 761, 765, 766, 768, 769, 773, 777, 781, 783, 786, 788, 790, 792, 793, 794, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 815, 823, 831, 832, 833, 836], "argsort": [3, 7, 63, 86, 618, 727, 809], "descend": [3, 7, 63, 86, 609, 618, 659, 660, 725, 728], "true": [3, 4, 5, 6, 7, 8, 10, 12, 16, 19, 20, 22, 23, 25, 26, 30, 31, 32, 39, 40, 41, 42, 44, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 117, 119, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 139, 140, 141, 143, 146, 147, 148, 149, 150, 157, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 174, 186, 190, 191, 193, 194, 198, 201, 202, 203, 204, 208, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 326, 328, 335, 336, 341, 342, 343, 344, 345, 346, 347, 348, 352, 355, 356, 358, 359, 360, 361, 364, 370, 372, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 393, 394, 395, 396, 400, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440, 441, 442, 445, 446, 447, 448, 449, 451, 452, 453, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 488, 489, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 507, 510, 511, 513, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 531, 533, 534, 535, 537, 538, 539, 541, 542, 549, 550, 551, 554, 557, 558, 560, 561, 563, 564, 565, 567, 569, 571, 572, 574, 579, 580, 582, 583, 585, 588, 589, 591, 593, 594, 595, 596, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 696, 697, 698, 700, 701, 702, 703, 707, 708, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 745, 748, 749, 750, 751, 762, 764, 765, 766, 767, 768, 770, 773, 775, 777, 781, 783, 786, 789, 794, 796, 797, 798, 799, 800, 802, 804, 805, 806, 808, 809, 810, 812, 814, 815, 817, 820, 821, 822, 831, 832], "top": [3, 7, 9, 14, 23, 25, 26, 39, 40, 51, 58, 74, 307, 352, 361, 470, 518, 606, 672, 762, 783, 789, 790, 798, 809, 811, 812, 815, 820, 821, 838, 842], "logit": [3, 4, 5, 7, 39, 40, 41, 42, 51, 57, 74, 80, 350, 365, 482, 485, 610, 668, 670, 760, 783, 831], "gather": [3, 7, 39, 51, 52, 74, 75, 317, 318, 352, 526, 528, 606, 845], "print": [3, 4, 6, 7, 10, 12, 16, 17, 19, 23, 25, 26, 27, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 96, 97, 104, 106, 107, 108, 109, 110, 111, 112, 113, 116, 117, 119, 120, 123, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 141, 142, 143, 146, 147, 148, 149, 151, 157, 158, 159, 160, 161, 164, 166, 167, 169, 174, 186, 187, 191, 193, 194, 195, 196, 198, 199, 200, 201, 202, 205, 206, 208, 209, 210, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 301, 308, 309, 315, 320, 321, 322, 324, 338, 339, 344, 348, 350, 352, 355, 358, 359, 360, 361, 364, 370, 376, 377, 378, 379, 381, 382, 384, 386, 389, 391, 394, 395, 396, 399, 401, 402, 406, 409, 411, 413, 414, 422, 429, 431, 432, 433, 434, 435, 436, 437, 443, 444, 446, 457, 461, 466, 467, 469, 470, 475, 479, 480, 481, 496, 497, 498, 499, 505, 507, 509, 510, 511, 512, 513, 514, 517, 518, 519, 520, 521, 522, 525, 526, 528, 529, 530, 531, 533, 534, 535, 537, 538, 539, 541, 545, 548, 549, 550, 554, 555, 556, 559, 562, 563, 564, 565, 567, 569, 571, 572, 573, 577, 578, 581, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 630, 631, 632, 637, 638, 639, 640, 642, 644, 645, 646, 647, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 665, 666, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 693, 694, 696, 697, 698, 699, 701, 702, 707, 708, 709, 710, 711, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 762, 764, 766, 773, 777, 781, 783, 789, 790, 796, 798, 800, 810, 812, 814, 817, 819, 820, 821, 831, 833], "indic": [3, 7, 47, 51, 52, 55, 56, 58, 59, 61, 62, 63, 68, 70, 71, 74, 75, 78, 79, 81, 82, 84, 85, 86, 91, 94, 121, 122, 135, 139, 141, 162, 166, 167, 278, 315, 316, 334, 352, 355, 358, 359, 360, 361, 366, 368, 376, 377, 378, 380, 384, 385, 386, 390, 391, 394, 395, 396, 397, 401, 402, 411, 430, 432, 440, 441, 442, 444, 447, 449, 451, 452, 453, 456, 460, 466, 467, 469, 470, 473, 474, 487, 488, 489, 510, 525, 526, 528, 549, 550, 554, 586, 589, 590, 601, 604, 606, 607, 608, 609, 611, 613, 614, 615, 616, 617, 618, 622, 624, 625, 626, 627, 630, 634, 652, 666, 674, 675, 676, 678, 679, 680, 681, 683, 685, 690, 693, 695, 697, 698, 699, 701, 705, 706, 707, 708, 709, 710, 716, 717, 718, 719, 721, 723, 725, 727, 728, 745, 746, 748, 750, 762, 764, 765, 766, 770, 777, 779, 789, 797, 804, 807, 809, 822, 831], "to_list": [3, 7, 52, 75, 606], "arrai": [3, 4, 7, 16, 17, 18, 20, 21, 22, 25, 26, 27, 28, 30, 31, 32, 37, 38, 39, 40, 41, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 94, 97, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 117, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 159, 162, 163, 165, 166, 167, 169, 171, 172, 173, 174, 180, 190, 191, 195, 200, 202, 204, 207, 208, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 352, 355, 356, 358, 359, 360, 361, 364, 365, 366, 368, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 389, 390, 391, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 513, 514, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 544, 545, 547, 548, 549, 550, 551, 553, 554, 560, 561, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 582, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 697, 698, 699, 702, 703, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 745, 750, 756, 763, 764, 769, 773, 777, 779, 783, 786, 788, 789, 790, 791, 794, 795, 796, 798, 799, 800, 801, 802, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 825, 832, 833, 836, 837, 838, 840, 844, 845], "282": [3, 7], "281": [3, 7, 39, 41], "285": [3, 7, 74], "dev": [3, 6, 7, 8, 18, 39, 41, 44, 49, 68, 72, 195, 202, 603, 789, 799, 805, 819, 821], "64773697": 3, "29496649": 3, "04526037": 3, "39": [3, 4, 6, 7, 10, 12, 16, 37, 39, 40, 41, 42, 44, 45, 50, 51, 56, 60, 67, 73, 74, 76, 79, 83, 106, 220, 255, 257, 259, 289, 290, 291, 350, 358, 370, 377, 379, 396, 399, 497, 587, 598, 604, 607, 609, 619, 646, 654, 712, 731], "tiger": [3, 7], "tabbi": [3, 7], "egyptian": [3, 7], "check": [3, 4, 6, 8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 37, 42, 44, 46, 48, 52, 56, 68, 71, 75, 79, 112, 150, 151, 160, 161, 164, 166, 167, 168, 171, 186, 193, 194, 201, 213, 511, 521, 523, 524, 531, 537, 538, 539, 540, 541, 557, 567, 579, 585, 598, 602, 603, 606, 609, 613, 644, 645, 652, 690, 700, 701, 702, 743, 750, 762, 777, 783, 785, 787, 788, 789, 790, 792, 796, 797, 799, 800, 802, 806, 808, 809, 810, 811, 812, 813, 814, 816, 817, 819, 820, 821, 824, 831], "confirm": [3, 40, 788], "same": [3, 4, 5, 6, 8, 12, 18, 20, 25, 28, 30, 32, 37, 38, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 58, 60, 62, 63, 64, 68, 70, 71, 73, 74, 75, 76, 78, 79, 81, 83, 85, 87, 91, 92, 93, 94, 95, 96, 110, 120, 125, 130, 132, 133, 135, 137, 139, 140, 141, 143, 146, 147, 148, 159, 162, 207, 214, 215, 216, 217, 219, 221, 225, 227, 230, 234, 240, 241, 247, 267, 269, 271, 274, 276, 277, 278, 287, 293, 301, 314, 315, 316, 317, 318, 321, 322, 324, 331, 347, 350, 352, 355, 358, 359, 360, 361, 364, 366, 368, 370, 376, 377, 378, 394, 395, 396, 397, 399, 400, 401, 402, 403, 410, 415, 416, 424, 425, 426, 427, 428, 430, 432, 435, 444, 446, 461, 469, 476, 478, 487, 489, 494, 495, 496, 497, 498, 499, 500, 505, 542, 596, 601, 602, 603, 604, 606, 607, 608, 609, 611, 612, 613, 615, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 637, 638, 639, 640, 642, 643, 644, 645, 647, 649, 651, 653, 654, 655, 656, 657, 658, 659, 660, 663, 665, 672, 675, 676, 678, 679, 681, 682, 687, 688, 703, 713, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 743, 748, 749, 750, 756, 764, 777, 783, 789, 790, 793, 794, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 815, 817, 819, 821, 822, 823, 827, 829, 831, 833, 835, 837, 844, 845], "8": [3, 6, 17, 18, 20, 37, 39, 41, 44, 48, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 71, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 96, 97, 104, 119, 129, 130, 134, 137, 143, 152, 154, 155, 156, 159, 167, 192, 209, 217, 219, 220, 224, 225, 228, 229, 230, 232, 238, 241, 245, 246, 252, 253, 254, 258, 259, 262, 263, 265, 266, 267, 272, 273, 276, 277, 278, 281, 282, 285, 286, 287, 295, 296, 297, 298, 300, 301, 320, 331, 334, 336, 337, 338, 341, 348, 350, 352, 355, 358, 359, 360, 361, 370, 376, 377, 378, 379, 384, 385, 389, 390, 394, 395, 399, 400, 403, 406, 409, 417, 431, 432, 433, 435, 436, 437, 438, 440, 441, 442, 445, 447, 451, 456, 457, 466, 467, 469, 470, 471, 474, 475, 484, 486, 498, 501, 502, 505, 511, 512, 514, 518, 519, 522, 525, 529, 533, 534, 535, 537, 538, 541, 544, 549, 550, 554, 564, 565, 566, 567, 587, 590, 592, 594, 595, 597, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 613, 615, 616, 617, 618, 619, 622, 626, 627, 630, 631, 632, 634, 640, 641, 642, 644, 645, 646, 649, 650, 651, 654, 656, 657, 659, 660, 661, 663, 664, 665, 666, 668, 669, 670, 671, 675, 682, 683, 685, 691, 698, 702, 710, 711, 712, 713, 715, 720, 721, 723, 725, 726, 728, 730, 731, 733, 735, 737, 738, 748, 751, 764, 789, 796, 797, 800, 812, 816, 820], "torch_alexnet": 3, "alexnet_weight": 3, "weight": [3, 10, 12, 25, 26, 39, 40, 51, 53, 55, 57, 74, 76, 78, 80, 91, 92, 303, 307, 338, 352, 355, 358, 359, 370, 384, 416, 494, 496, 499, 587, 588, 591, 593, 594, 595, 607, 608, 610, 612, 632, 633, 634, 637, 668, 689, 750, 763, 764, 766, 768, 783, 796, 805, 812, 817, 821, 822, 837], "imagenet1k_v1": [3, 7], "dropout": [3, 55, 78, 358, 381, 382, 383, 608, 634, 637, 764, 820], "9": [3, 4, 5, 6, 7, 8, 17, 18, 20, 37, 39, 41, 44, 47, 48, 50, 51, 52, 53, 55, 56, 58, 60, 62, 63, 64, 67, 71, 73, 74, 75, 76, 78, 79, 81, 83, 85, 86, 87, 96, 97, 104, 120, 121, 122, 134, 152, 153, 154, 155, 156, 159, 162, 215, 217, 219, 220, 223, 224, 225, 228, 229, 234, 235, 236, 241, 248, 254, 255, 256, 258, 262, 263, 265, 266, 267, 270, 272, 273, 277, 278, 281, 282, 283, 288, 292, 295, 296, 328, 330, 334, 340, 341, 348, 350, 355, 356, 358, 360, 361, 368, 370, 376, 377, 378, 379, 384, 385, 389, 390, 394, 395, 399, 400, 403, 417, 431, 433, 435, 436, 440, 441, 442, 447, 451, 456, 466, 467, 468, 470, 474, 484, 486, 489, 498, 514, 518, 519, 520, 522, 525, 533, 534, 537, 538, 541, 549, 550, 564, 566, 587, 588, 589, 593, 594, 598, 601, 602, 604, 606, 607, 608, 609, 611, 613, 615, 616, 617, 618, 619, 622, 623, 624, 627, 630, 631, 632, 639, 640, 642, 644, 645, 646, 649, 650, 651, 654, 656, 657, 659, 660, 661, 663, 664, 665, 671, 675, 679, 680, 682, 683, 685, 690, 691, 696, 698, 701, 702, 710, 711, 712, 713, 715, 720, 721, 723, 725, 726, 728, 730, 731, 733, 735, 737, 738, 748, 768, 796, 798, 800, 807, 812, 820, 821, 834], "torch_output": [3, 5, 7], "dim": [3, 7, 41, 51, 68, 70, 74, 135, 301, 352, 358, 361, 375, 385, 386, 387, 390, 398, 451, 601, 608, 621, 628, 629, 750, 764, 783, 798, 809, 810, 815], "torch_class": [3, 7], "torch_logit": [3, 7], "tensor": [3, 4, 6, 7, 8, 10, 12, 16, 17, 20, 21, 23, 25, 26, 27, 31, 37, 39, 47, 50, 51, 52, 55, 57, 58, 60, 68, 70, 73, 74, 75, 78, 79, 80, 81, 83, 90, 123, 131, 132, 135, 141, 157, 173, 265, 266, 294, 307, 310, 311, 312, 313, 314, 315, 323, 345, 350, 352, 355, 358, 359, 360, 361, 370, 371, 376, 377, 380, 384, 393, 394, 395, 396, 404, 406, 413, 414, 415, 416, 419, 421, 423, 424, 427, 429, 430, 432, 435, 436, 451, 454, 459, 462, 463, 464, 465, 468, 472, 502, 506, 549, 550, 601, 602, 604, 606, 608, 609, 610, 611, 615, 631, 633, 634, 648, 661, 668, 678, 680, 710, 764, 773, 783, 793, 794, 798, 799, 804, 805, 808, 809, 810, 812, 813, 815, 817, 819, 820, 822, 823, 825, 827, 831, 832, 833, 835, 836, 839, 841, 842, 845], "devic": [3, 5, 6, 7, 40, 41, 44, 47, 51, 60, 68, 70, 74, 83, 96, 99, 100, 101, 120, 121, 122, 124, 125, 126, 129, 130, 131, 132, 134, 135, 136, 137, 139, 140, 141, 142, 143, 187, 188, 189, 190, 191, 192, 193, 194, 195, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 213, 300, 301, 315, 316, 352, 365, 449, 482, 483, 485, 486, 509, 523, 524, 601, 606, 615, 710, 711, 712, 713, 743, 745, 746, 761, 763, 764, 765, 766, 767, 768, 769, 770, 773, 783, 790, 791, 794, 798, 802, 805, 806, 810, 812, 813, 815, 817, 822, 823, 824, 825, 828, 837, 838, 840, 841, 842, 843], "6477": 3, "2950": 3, "0453": 3, "grad_fn": [3, 7, 23, 37, 590, 597, 607, 820], "lt": [3, 7, 10, 12, 16, 20, 21, 23, 37, 39, 41, 97], "takebackward0": [3, 7], "gt": [3, 7, 10, 12, 16, 20, 21, 23, 37, 39, 41, 44, 97, 810, 817], "great": [3, 5, 783, 790, 812, 817, 819, 828, 829, 844], "With": [3, 18, 28, 37, 45, 47, 48, 50, 51, 52, 53, 55, 56, 58, 61, 64, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 142, 143, 146, 147, 148, 149, 151, 157, 158, 159, 162, 169, 174, 175, 176, 177, 178, 188, 191, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 297, 298, 299, 300, 301, 303, 321, 322, 324, 326, 329, 333, 336, 337, 338, 340, 341, 344, 350, 352, 355, 358, 359, 360, 361, 370, 379, 381, 382, 389, 401, 407, 408, 409, 411, 412, 413, 422, 425, 436, 451, 452, 453, 455, 458, 460, 461, 467, 470, 473, 487, 496, 497, 498, 499, 501, 502, 503, 504, 505, 507, 511, 512, 513, 514, 517, 518, 519, 520, 521, 525, 526, 529, 531, 533, 534, 535, 549, 550, 564, 565, 567, 569, 571, 572, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 630, 631, 632, 637, 638, 639, 640, 641, 642, 644, 645, 647, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 663, 664, 665, 668, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 693, 696, 697, 698, 699, 701, 702, 707, 708, 709, 710, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 789, 798, 800, 809, 812, 815, 817, 828, 829, 831, 838, 841], "simpl": [3, 10, 14, 15, 17, 20, 22, 23, 24, 25, 26, 27, 28, 30, 31, 37, 39, 41, 44, 51, 74, 370, 496, 750, 764, 783, 788, 789, 790, 793, 795, 796, 798, 799, 800, 801, 805, 808, 809, 812, 813, 815, 819, 821, 822, 823, 825, 827, 831, 832, 837, 838, 839, 840], "chang": [3, 4, 16, 26, 39, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 122, 123, 125, 127, 128, 130, 132, 133, 134, 135, 137, 139, 140, 143, 147, 148, 149, 162, 166, 167, 174, 191, 208, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 355, 358, 361, 370, 376, 377, 378, 379, 381, 382, 383, 385, 389, 390, 391, 394, 395, 396, 400, 401, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 417, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 513, 514, 517, 518, 519, 520, 521, 522, 525, 526, 529, 531, 533, 534, 535, 537, 538, 539, 541, 542, 544, 549, 550, 564, 565, 566, 567, 569, 571, 572, 585, 587, 588, 591, 593, 594, 595, 596, 598, 604, 611, 613, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 649, 650, 655, 656, 657, 659, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 691, 702, 707, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 745, 783, 788, 789, 790, 792, 794, 795, 796, 797, 798, 800, 801, 803, 809, 810, 811, 812, 813, 814, 815, 817, 821, 823, 824, 829, 831, 841, 844], "backend": [3, 17, 18, 19, 26, 28, 29, 31, 46, 47, 51, 52, 56, 68, 74, 75, 79, 96, 123, 160, 161, 164, 186, 193, 194, 196, 199, 210, 321, 322, 355, 359, 409, 411, 503, 511, 523, 524, 532, 535, 536, 546, 553, 567, 570, 601, 602, 603, 606, 609, 659, 743, 745, 746, 748, 749, 750, 753, 755, 756, 761, 766, 768, 772, 773, 783, 786, 787, 789, 790, 791, 792, 793, 797, 799, 800, 801, 802, 804, 805, 806, 808, 809, 810, 812, 814, 815, 816, 818, 819, 822, 825, 827, 831, 832, 833, 838, 841, 844, 845], "let": [3, 4, 5, 6, 8, 10, 12, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 37, 39, 40, 42, 44, 52, 64, 75, 214, 215, 216, 217, 220, 223, 232, 235, 237, 239, 248, 249, 250, 255, 257, 270, 278, 280, 281, 285, 525, 526, 604, 606, 609, 619, 663, 733, 735, 736, 737, 738, 783, 788, 793, 795, 796, 798, 799, 800, 801, 802, 809, 810, 812, 813, 814, 815, 817, 819, 820, 821, 822, 829, 831, 832, 845], "u": [3, 6, 39, 41, 43, 44, 51, 56, 70, 74, 79, 91, 92, 132, 359, 419, 426, 428, 609, 613, 638, 644, 645, 659, 698, 783, 784, 789, 790, 791, 796, 797, 803, 806, 808, 809, 810, 811, 812, 813, 815, 821, 823, 828], "differ": [3, 4, 6, 8, 10, 14, 15, 19, 20, 21, 25, 26, 29, 30, 31, 32, 50, 51, 52, 56, 64, 68, 74, 75, 87, 96, 97, 106, 109, 159, 217, 234, 241, 242, 267, 283, 320, 327, 331, 332, 336, 355, 358, 359, 361, 370, 391, 402, 424, 430, 445, 452, 453, 467, 497, 498, 505, 525, 526, 598, 602, 604, 606, 608, 609, 611, 619, 631, 632, 646, 657, 672, 682, 729, 730, 735, 737, 738, 743, 748, 756, 766, 783, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 807, 808, 809, 810, 812, 813, 815, 817, 818, 819, 820, 821, 822, 823, 824, 827, 828, 829, 831, 832, 833, 835, 836, 837, 838, 841, 844, 845], "ll": [3, 5, 6, 8, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 40, 783, 784, 786, 788, 789, 790, 795, 800, 803, 807, 808, 820, 824, 829, 831, 832], "try": [3, 17, 27, 37, 40, 44, 68, 573, 606, 763, 773, 783, 788, 789, 790, 792, 793, 796, 797, 798, 802, 803, 808, 810, 817, 819, 823, 826, 828, 829, 833], "10": [3, 5, 7, 8, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 37, 39, 41, 43, 44, 47, 50, 51, 52, 53, 55, 56, 60, 62, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 97, 120, 130, 131, 132, 216, 224, 225, 228, 229, 232, 239, 244, 246, 252, 254, 256, 267, 273, 280, 281, 286, 293, 320, 321, 322, 325, 329, 331, 333, 334, 336, 337, 338, 340, 341, 345, 348, 355, 358, 361, 370, 376, 377, 378, 379, 389, 394, 395, 399, 400, 401, 402, 403, 442, 444, 447, 451, 456, 466, 467, 474, 494, 497, 498, 501, 503, 505, 518, 519, 520, 522, 525, 526, 528, 533, 534, 542, 550, 554, 559, 564, 566, 578, 581, 593, 601, 604, 606, 607, 608, 609, 611, 613, 614, 615, 616, 617, 618, 619, 622, 623, 625, 631, 640, 642, 646, 647, 649, 650, 651, 654, 659, 660, 661, 665, 675, 680, 681, 682, 683, 685, 696, 698, 701, 702, 709, 710, 711, 712, 713, 719, 721, 727, 729, 730, 731, 732, 734, 735, 737, 738, 748, 750, 768, 783, 786, 789, 792, 796, 797, 798, 800, 807, 810, 812, 817, 819, 820, 828, 833, 843], "tf": [3, 5, 10, 12, 17, 20, 21, 23, 25, 26, 27, 28, 30, 32, 37, 42, 43, 783, 793, 794, 798, 799, 804, 808, 809, 812, 813, 815, 817, 822, 823, 825, 831, 832, 833, 838], "onc": [3, 5, 25, 26, 37, 39, 56, 60, 79, 83, 207, 359, 410, 603, 609, 615, 643, 644, 645, 659, 710, 783, 788, 789, 790, 796, 797, 798, 799, 800, 803, 808, 809, 812, 815, 817, 820, 823, 824, 829, 831], "set": [3, 10, 12, 18, 25, 26, 28, 31, 39, 40, 41, 42, 43, 46, 51, 52, 55, 56, 61, 63, 64, 68, 74, 75, 78, 79, 84, 86, 87, 109, 112, 119, 139, 141, 175, 176, 177, 178, 179, 190, 203, 204, 205, 206, 207, 222, 315, 326, 341, 343, 348, 352, 355, 356, 358, 359, 360, 361, 370, 380, 401, 404, 408, 412, 415, 435, 436, 451, 461, 464, 470, 496, 501, 502, 503, 504, 505, 507, 511, 518, 530, 535, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 567, 575, 598, 600, 601, 602, 603, 604, 606, 608, 609, 613, 615, 616, 618, 619, 631, 637, 639, 650, 652, 655, 658, 659, 690, 697, 700, 701, 702, 707, 708, 714, 716, 717, 721, 723, 724, 725, 728, 736, 738, 745, 748, 749, 750, 751, 756, 762, 763, 764, 766, 768, 773, 780, 783, 784, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 802, 803, 805, 806, 808, 809, 810, 812, 813, 815, 817, 819, 820, 827, 830, 831, 832, 836, 837, 838, 839, 840, 842, 845], "our": [3, 6, 8, 10, 12, 14, 17, 18, 20, 21, 22, 25, 26, 27, 28, 30, 31, 32, 37, 39, 40, 43, 66, 89, 96, 97, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 750, 760, 761, 763, 764, 766, 767, 768, 769, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 800, 802, 803, 806, 809, 810, 811, 812, 813, 815, 816, 817, 819, 820, 821, 822, 823, 827, 828, 831, 843, 844], "post": [3, 5, 39, 59, 82, 614, 709, 789, 807, 822, 824], "process": [3, 5, 20, 25, 26, 30, 39, 201, 213, 603, 784, 789, 790, 795, 796, 797, 803, 805, 807, 809, 810, 811, 812, 815, 817, 822, 828, 829, 831, 836, 837, 838, 841, 842, 844, 845], "11": [3, 5, 16, 18, 20, 37, 39, 40, 41, 44, 50, 51, 52, 55, 56, 60, 64, 73, 74, 75, 78, 79, 81, 83, 87, 97, 217, 221, 224, 229, 239, 276, 277, 283, 338, 355, 358, 359, 361, 376, 377, 389, 394, 395, 399, 400, 403, 412, 444, 445, 447, 451, 456, 458, 474, 497, 498, 512, 518, 519, 525, 534, 550, 604, 606, 608, 609, 610, 611, 613, 615, 616, 617, 619, 622, 623, 631, 632, 642, 645, 646, 647, 649, 650, 654, 658, 659, 660, 661, 665, 668, 670, 675, 680, 681, 683, 685, 696, 698, 708, 711, 712, 713, 720, 721, 729, 730, 731, 738, 796, 797, 798, 800, 807], "st": [3, 4, 6, 748, 792, 810, 812], "perf_count": [3, 6], "raw_logit": 3, "latenc": [3, 6], "nn": [3, 5, 12, 23, 25, 26, 39, 43, 133, 601, 783, 805, 810, 815, 822, 832, 839], "axi": [3, 5, 40, 41, 42, 45, 47, 50, 51, 52, 56, 57, 58, 60, 61, 62, 63, 64, 65, 67, 68, 70, 73, 74, 75, 79, 80, 81, 83, 84, 85, 86, 87, 88, 91, 107, 111, 131, 132, 135, 207, 281, 286, 321, 322, 326, 327, 334, 341, 355, 358, 360, 361, 364, 368, 370, 379, 380, 386, 389, 391, 401, 402, 434, 439, 446, 447, 448, 451, 452, 453, 456, 461, 466, 467, 469, 470, 473, 474, 479, 480, 481, 489, 494, 497, 498, 499, 501, 502, 503, 504, 505, 518, 525, 586, 598, 601, 603, 604, 606, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 630, 639, 642, 650, 665, 666, 668, 669, 670, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 715, 716, 717, 721, 723, 725, 726, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 748, 750, 760, 764, 765, 770, 796, 798, 800, 802, 804, 805, 808, 809, 812, 815, 817, 819, 822], "direct": [3, 51, 74, 327, 333, 337, 342, 346, 355, 358, 361, 391, 402, 452, 453, 467, 618, 728, 788, 793, 795, 809, 815, 821, 822, 834, 838, 839, 842], "tolist": 3, "652289830999962": 3, "shape": [3, 4, 5, 10, 12, 18, 19, 20, 21, 25, 26, 31, 37, 39, 40, 41, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 94, 95, 96, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 202, 208, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 321, 322, 323, 324, 325, 327, 329, 331, 333, 335, 337, 338, 339, 340, 344, 345, 347, 350, 352, 355, 358, 359, 360, 361, 364, 365, 366, 368, 370, 372, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 390, 391, 393, 394, 395, 396, 399, 401, 402, 405, 406, 407, 408, 410, 411, 412, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 442, 443, 444, 446, 449, 454, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 494, 495, 496, 497, 498, 499, 513, 514, 518, 519, 520, 522, 525, 526, 529, 535, 542, 549, 550, 560, 568, 570, 582, 586, 587, 588, 591, 593, 594, 595, 596, 598, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 725, 726, 728, 729, 730, 731, 733, 735, 736, 738, 739, 740, 745, 748, 750, 763, 764, 767, 777, 783, 790, 796, 798, 799, 800, 801, 802, 804, 808, 809, 810, 812, 813, 814, 817, 819, 820, 821, 822, 831, 832], "dtype": [3, 5, 7, 12, 18, 20, 21, 37, 40, 47, 48, 51, 52, 55, 56, 60, 61, 64, 68, 70, 71, 73, 74, 75, 78, 79, 83, 84, 87, 96, 99, 100, 101, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 142, 143, 144, 145, 146, 147, 149, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 202, 229, 268, 300, 301, 302, 303, 304, 305, 306, 310, 311, 312, 313, 314, 319, 324, 326, 341, 352, 355, 358, 359, 360, 361, 365, 370, 379, 389, 401, 402, 404, 425, 435, 445, 482, 483, 484, 485, 486, 496, 497, 498, 499, 502, 504, 505, 522, 523, 524, 526, 535, 544, 571, 601, 602, 603, 604, 606, 608, 609, 612, 615, 616, 618, 619, 620, 624, 631, 650, 666, 688, 689, 711, 712, 713, 716, 717, 718, 727, 728, 729, 730, 735, 737, 739, 740, 743, 745, 748, 750, 751, 763, 764, 766, 767, 769, 783, 786, 792, 794, 798, 799, 800, 802, 805, 806, 808, 809, 810, 812, 813, 817, 819, 832], "int32": [3, 37, 39, 48, 51, 52, 60, 61, 64, 71, 74, 75, 83, 84, 126, 131, 137, 143, 146, 149, 151, 153, 155, 157, 160, 162, 163, 167, 170, 174, 178, 182, 184, 202, 229, 366, 370, 487, 497, 498, 499, 526, 535, 571, 601, 602, 603, 604, 606, 615, 616, 619, 711, 712, 713, 717, 729, 730, 735, 737, 748, 749, 798, 809, 812, 817], "6477362": 3, "29496726": 3, "04526032": 3, "float32": [3, 5, 7, 10, 12, 17, 18, 37, 39, 40, 41, 47, 48, 52, 55, 70, 71, 74, 75, 78, 87, 132, 135, 137, 143, 144, 145, 149, 153, 154, 157, 158, 159, 160, 163, 166, 167, 169, 174, 177, 183, 247, 274, 319, 331, 352, 355, 358, 359, 370, 379, 389, 402, 425, 435, 499, 535, 571, 601, 602, 604, 606, 608, 609, 612, 624, 626, 627, 630, 657, 659, 660, 666, 688, 689, 745, 748, 749, 783, 798, 800, 810, 812, 813, 832, 833], "As": [3, 5, 6, 8, 10, 12, 18, 22, 23, 25, 26, 28, 31, 37, 38, 62, 66, 89, 617, 721, 722, 723, 724, 783, 786, 788, 789, 790, 793, 795, 796, 797, 798, 799, 802, 803, 804, 805, 808, 809, 810, 811, 812, 815, 819, 820, 821, 823, 827, 831, 832, 833, 838, 843], "expect": [3, 5, 6, 8, 18, 22, 25, 26, 28, 41, 42, 44, 51, 56, 57, 74, 80, 173, 241, 285, 358, 360, 380, 402, 435, 509, 602, 604, 606, 610, 654, 668, 762, 763, 764, 766, 783, 789, 790, 792, 798, 799, 802, 803, 806, 808, 810, 812, 815, 823, 824, 829, 831, 832, 833], "ident": [3, 23, 40, 42, 56, 68, 126, 195, 528, 554, 601, 603, 606, 609, 613, 646, 651, 703, 764, 796, 805, 806, 809, 810, 813, 815, 819, 820, 823, 825, 827, 829], "had": [3, 796, 797, 808, 813, 817, 838, 839], "anoth": [3, 16, 18, 19, 22, 23, 25, 26, 28, 29, 41, 42, 127, 147, 149, 601, 602, 783, 788, 789, 790, 794, 796, 798, 799, 802, 803, 805, 808, 809, 812, 817, 819, 822, 825, 828, 830, 831, 832, 838, 844], "postprocess": 3, "routin": [3, 797, 808, 809, 815, 823, 838], "feed": [3, 207, 603, 831, 838, 839], "other": [3, 6, 8, 10, 12, 17, 18, 19, 25, 26, 27, 28, 29, 30, 31, 32, 39, 41, 48, 50, 51, 52, 58, 64, 68, 71, 73, 74, 75, 81, 87, 91, 96, 97, 120, 135, 147, 173, 234, 239, 241, 257, 266, 267, 323, 327, 355, 361, 445, 446, 454, 507, 508, 601, 602, 604, 606, 615, 619, 672, 682, 713, 736, 738, 783, 786, 788, 789, 790, 792, 793, 796, 797, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 812, 813, 815, 817, 819, 821, 822, 823, 824, 825, 828, 831, 832, 834, 836, 837, 838, 844, 845], "carefulli": [3, 272, 604, 763, 809, 836, 841], "rewrit": 3, "easili": [3, 22, 25, 26, 37, 783, 789, 793, 797, 809, 815, 820, 821, 822, 823, 828, 838, 844, 845], "out": [3, 5, 8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 37, 40, 43, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 96, 97, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 148, 157, 208, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 352, 355, 358, 359, 360, 361, 364, 365, 366, 368, 370, 371, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 389, 390, 391, 393, 394, 395, 396, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 413, 414, 416, 417, 418, 420, 421, 422, 423, 425, 429, 431, 432, 433, 434, 436, 437, 443, 444, 445, 446, 448, 449, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 509, 513, 514, 518, 519, 520, 522, 525, 526, 535, 545, 549, 550, 587, 588, 591, 593, 594, 595, 596, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 686, 709, 710, 711, 712, 713, 715, 716, 717, 718, 720, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 748, 756, 760, 761, 763, 764, 766, 767, 768, 769, 783, 784, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 807, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 824, 827, 828, 829, 831, 832, 838, 845], "quickest": 3, "particular": [3, 25, 26, 262, 604, 749, 789, 790, 792, 794, 797, 798, 800, 806, 808, 809, 812, 813, 834, 838, 844], "hardwar": [3, 39, 96, 100, 783, 789, 815, 828, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844], "again": [3, 5, 19, 20, 28, 29, 30, 31, 609, 657, 790, 793, 794, 795, 796, 800, 802, 803, 808, 809, 812, 813, 815, 820, 822, 823, 828, 829, 843, 844], "speed": [3, 6, 8, 25, 26, 39, 44, 52, 75, 542, 606, 812, 827, 841], "up": [3, 5, 6, 8, 25, 51, 52, 74, 75, 358, 361, 380, 393, 445, 453, 530, 542, 606, 608, 631, 762, 783, 784, 786, 788, 790, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 815, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 831, 839, 844, 845], "12": [3, 5, 6, 7, 16, 18, 20, 21, 37, 39, 40, 41, 48, 50, 51, 52, 55, 56, 60, 64, 71, 73, 74, 75, 78, 79, 81, 82, 83, 87, 96, 97, 162, 217, 219, 224, 228, 229, 232, 234, 235, 236, 254, 267, 270, 277, 280, 287, 288, 305, 306, 334, 337, 338, 352, 355, 358, 361, 370, 376, 377, 378, 379, 381, 385, 386, 394, 395, 399, 400, 401, 402, 403, 444, 445, 447, 451, 456, 474, 486, 497, 503, 504, 514, 518, 519, 550, 556, 564, 578, 604, 606, 608, 609, 611, 613, 614, 615, 616, 617, 619, 622, 626, 631, 632, 642, 644, 646, 650, 654, 658, 660, 661, 663, 665, 675, 679, 681, 683, 685, 702, 709, 711, 712, 713, 720, 721, 729, 730, 731, 735, 737, 748, 789, 794, 796, 798, 800, 807], "repeat": [3, 4, 19, 29, 51, 52, 58, 74, 75, 81, 358, 361, 370, 386, 391, 450, 496, 520, 606, 611, 612, 684, 688, 689, 777, 790, 793, 794, 800, 801, 808, 812], "previou": [3, 18, 19, 20, 22, 28, 29, 30, 32, 53, 76, 181, 182, 183, 184, 185, 349, 357, 574, 576, 577, 578, 579, 581, 582, 584, 588, 593, 602, 606, 607, 763, 780, 789, 790, 792, 794, 797, 799, 804, 809, 812, 815, 822, 823, 841], "befor": [3, 4, 5, 17, 18, 19, 20, 21, 27, 28, 29, 30, 31, 32, 39, 51, 55, 56, 58, 62, 64, 68, 74, 78, 79, 204, 207, 212, 358, 361, 370, 385, 390, 400, 403, 445, 452, 453, 454, 461, 497, 498, 603, 608, 609, 611, 612, 613, 617, 619, 621, 622, 623, 624, 626, 628, 630, 634, 637, 649, 666, 672, 687, 688, 702, 721, 722, 723, 724, 729, 730, 735, 737, 762, 764, 773, 777, 788, 789, 790, 792, 793, 795, 798, 799, 801, 802, 803, 804, 806, 807, 808, 809, 810, 812, 817, 820, 823, 831, 832, 838], "13": [3, 5, 6, 7, 16, 21, 37, 39, 41, 45, 50, 51, 55, 56, 60, 64, 73, 74, 75, 76, 78, 81, 83, 87, 96, 112, 162, 192, 217, 232, 241, 252, 272, 281, 334, 341, 348, 355, 358, 361, 378, 379, 389, 394, 400, 403, 444, 445, 447, 451, 456, 474, 486, 497, 498, 513, 514, 518, 519, 534, 556, 564, 587, 598, 602, 603, 604, 606, 607, 608, 609, 611, 612, 613, 616, 617, 619, 622, 623, 631, 632, 642, 646, 654, 658, 660, 685, 689, 702, 711, 712, 713, 720, 721, 729, 730, 731, 796, 798, 800, 809], "026875037000081647": 3, "14": [3, 5, 6, 7, 21, 37, 39, 40, 41, 48, 50, 51, 55, 56, 60, 64, 71, 73, 74, 75, 78, 79, 81, 83, 146, 159, 162, 215, 220, 222, 229, 233, 259, 263, 267, 273, 280, 288, 330, 358, 359, 361, 370, 376, 377, 378, 379, 389, 396, 399, 400, 401, 403, 407, 413, 414, 445, 447, 451, 456, 474, 497, 564, 587, 602, 604, 606, 607, 608, 609, 611, 613, 617, 619, 622, 623, 625, 627, 631, 642, 644, 646, 654, 661, 663, 665, 685, 702, 711, 712, 713, 721, 730, 731, 796, 800, 812], "overrid": [3, 5, 31, 40, 47, 51, 70, 74, 135, 370, 496, 601, 793, 795], "behavior": [3, 5, 51, 62, 234, 241, 267, 276, 371, 506, 553, 576, 604, 606, 617, 721, 722, 723, 724, 788, 795, 796, 797, 798, 808, 809, 810, 812, 815, 817, 823, 835], "prealloc": [3, 5], "75": [3, 5, 37, 50, 51, 73, 74, 75, 78, 83, 113, 131, 220, 222, 234, 236, 247, 303, 333, 334, 352, 355, 400, 505, 520, 533, 564, 598, 601, 604, 606, 609, 613, 615, 622, 647, 654, 698, 713], "memori": [3, 5, 47, 51, 58, 70, 74, 81, 122, 133, 189, 201, 207, 209, 213, 361, 370, 440, 441, 447, 449, 451, 452, 453, 460, 474, 503, 548, 553, 576, 601, 603, 606, 608, 611, 633, 674, 675, 676, 678, 680, 681, 683, 685, 797, 798, 799, 808, 809, 815, 817, 823, 831, 838, 840, 841, 842], "temporari": [3, 5, 562, 584, 606, 798, 814], "fix": [3, 5, 41, 51, 74, 91, 92, 355, 359, 430, 608, 634, 783, 786, 789, 790, 792, 798, 803, 812, 813], "until": [3, 5, 790, 808, 817, 823, 828, 831, 845], "handl": [3, 5, 37, 39, 45, 49, 50, 51, 67, 68, 72, 73, 74, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 187, 188, 189, 190, 191, 195, 200, 201, 209, 213, 219, 231, 256, 258, 272, 278, 279, 284, 285, 289, 292, 293, 295, 350, 361, 444, 469, 598, 603, 604, 609, 619, 663, 735, 737, 760, 768, 784, 791, 796, 797, 798, 803, 804, 805, 807, 808, 809, 810, 811, 812, 814, 815, 821, 835, 845], "o": [3, 5, 38, 39, 40, 41, 43, 545, 606, 608, 634, 783, 789, 791, 797, 817, 824], "environ": [3, 5, 40, 43, 783, 784, 790, 824, 838, 840], "xla_python_client_alloc": [3, 5], "platform": [3, 5, 785, 787, 789, 795, 836, 840, 842], "jit": [3, 6, 8, 25, 28, 817, 823, 831, 838], "img_jax": [3, 5], "device_put": [3, 6], "15": [3, 5, 7, 8, 21, 37, 39, 40, 41, 44, 50, 51, 52, 56, 60, 64, 70, 71, 73, 74, 75, 78, 79, 81, 83, 87, 97, 130, 159, 217, 224, 228, 234, 236, 245, 252, 253, 258, 259, 267, 276, 277, 278, 334, 348, 355, 356, 358, 359, 361, 370, 376, 377, 394, 396, 399, 400, 403, 409, 447, 451, 456, 474, 497, 514, 518, 519, 522, 533, 534, 559, 564, 581, 601, 602, 604, 606, 608, 609, 611, 613, 615, 616, 617, 619, 622, 632, 642, 645, 646, 647, 654, 660, 661, 679, 685, 690, 702, 711, 712, 719, 721, 729, 730, 731, 745, 789, 797, 800, 807, 841], "warm": 3, "_": [3, 6, 8, 25, 38, 39, 50, 51, 68, 73, 74, 76, 92, 149, 237, 239, 247, 248, 263, 321, 322, 355, 358, 370, 401, 427, 430, 496, 518, 587, 588, 602, 604, 606, 607, 609, 611, 613, 619, 657, 658, 660, 686, 697, 736, 801, 808, 820], "rang": [3, 25, 26, 37, 38, 39, 41, 47, 51, 64, 70, 74, 120, 131, 132, 281, 291, 307, 350, 352, 359, 361, 370, 411, 421, 454, 462, 464, 472, 497, 498, 499, 518, 586, 601, 604, 606, 617, 619, 721, 729, 730, 735, 737, 748, 750, 751, 763, 783, 798, 802, 805, 812, 817, 820, 821, 822, 838, 844], "16": [3, 5, 8, 21, 37, 39, 41, 50, 51, 52, 55, 56, 60, 64, 71, 73, 74, 75, 78, 79, 81, 83, 96, 97, 162, 228, 257, 277, 284, 331, 334, 338, 355, 358, 361, 370, 376, 377, 379, 385, 389, 390, 394, 395, 400, 403, 435, 451, 497, 503, 519, 522, 544, 564, 565, 597, 602, 604, 606, 607, 608, 609, 611, 613, 615, 616, 619, 630, 632, 638, 642, 645, 646, 654, 656, 660, 685, 698, 711, 712, 713, 720, 730, 731, 748, 751, 783, 790, 798, 800, 820], "0022192720000475674": 3, "64773613": 3, "29496723": 3, "exact": [3, 51, 67, 68, 104, 358, 360, 393, 398, 434, 435, 617, 721, 723, 750, 760, 789, 790, 792, 800, 817], "note": [3, 5, 21, 25, 26, 31, 40, 41, 42, 51, 52, 56, 58, 62, 74, 79, 81, 91, 128, 141, 173, 241, 276, 277, 284, 315, 316, 334, 352, 355, 358, 359, 361, 380, 410, 415, 423, 424, 430, 451, 602, 604, 608, 609, 611, 617, 619, 634, 643, 644, 656, 657, 659, 678, 682, 722, 724, 733, 764, 786, 788, 789, 790, 793, 798, 800, 801, 803, 808, 809, 810, 812, 813, 815], "were": [3, 5, 42, 68, 71, 162, 166, 167, 241, 604, 608, 634, 789, 790, 798, 802, 803, 807, 808, 810, 812, 813, 815, 817, 831, 838, 839, 844], "function": [3, 10, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 147, 148, 149, 159, 160, 161, 162, 165, 166, 167, 169, 173, 174, 191, 193, 194, 207, 208, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 367, 370, 376, 377, 378, 379, 381, 382, 383, 385, 389, 390, 391, 394, 395, 396, 400, 401, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 417, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 533, 534, 535, 537, 538, 539, 541, 542, 544, 545, 548, 549, 550, 553, 554, 557, 559, 561, 564, 565, 566, 567, 569, 571, 572, 573, 579, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 694, 696, 697, 698, 700, 701, 702, 703, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 746, 748, 749, 750, 751, 756, 760, 763, 766, 773, 774, 779, 783, 786, 789, 790, 791, 792, 793, 794, 795, 797, 800, 801, 808, 811, 816, 818, 819, 820, 821, 825, 827, 831, 833, 835, 836, 837, 838, 839, 844, 845], "calcul": [3, 39, 50, 51, 52, 57, 64, 68, 73, 74, 75, 79, 80, 87, 97, 214, 215, 216, 217, 218, 219, 220, 221, 222, 231, 232, 234, 237, 238, 239, 255, 256, 257, 258, 259, 260, 265, 266, 267, 272, 279, 280, 281, 283, 284, 285, 321, 322, 334, 344, 355, 358, 359, 360, 361, 364, 370, 376, 377, 378, 411, 435, 461, 476, 478, 503, 542, 604, 606, 609, 610, 619, 645, 654, 657, 668, 669, 670, 732, 733, 734, 735, 736, 737, 738, 748, 750, 763, 764, 767, 788, 801, 817, 828, 831], "dog": 3, "18": [3, 21, 37, 39, 41, 50, 51, 60, 73, 74, 78, 79, 83, 87, 107, 229, 234, 276, 280, 289, 290, 334, 350, 355, 358, 361, 379, 385, 389, 390, 394, 400, 403, 451, 598, 604, 609, 615, 619, 626, 642, 649, 654, 661, 711, 712, 713, 730, 731, 735, 796, 798, 800], "19": [3, 21, 37, 39, 40, 41, 44, 50, 51, 60, 73, 74, 78, 79, 83, 220, 229, 257, 267, 284, 358, 359, 361, 370, 378, 379, 390, 394, 400, 403, 409, 414, 451, 497, 604, 609, 613, 615, 618, 642, 650, 663, 701, 711, 712, 713, 728, 800], "006431100999861883": 3, "258": [3, 608, 623, 625, 627], "104": [3, 64, 609, 619, 654, 731], "259": 3, "72447652": 3, "13937832": 3, "05874982": 3, "samoi": 3, "wallabi": 3, "pomeranian": 3, "incorrect": [3, 797], "predict": [3, 5, 7, 39, 40, 41, 42, 51, 57, 74, 80, 360, 431, 434, 437, 610, 668, 669, 670, 783, 798], "down": [3, 18, 28, 42, 51, 74, 358, 361, 393, 453, 762, 789, 812, 825, 838, 844], "itself": [3, 20, 30, 50, 91, 268, 508, 573, 604, 606, 613, 702, 786, 789, 790, 792, 795, 796, 797, 798, 799, 802, 803, 808, 809, 821, 823, 827, 831, 837, 838, 839, 844], "version": [3, 22, 28, 39, 40, 41, 44, 45, 51, 74, 91, 104, 285, 326, 328, 355, 370, 501, 505, 586, 604, 606, 609, 644, 645, 745, 773, 774, 783, 789, 790, 795, 797, 798, 801, 808, 810, 817, 827, 828, 829, 832, 844, 845], "return": [3, 5, 6, 8, 10, 12, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 41, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 96, 97, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 180, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 368, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 389, 390, 391, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 745, 748, 749, 750, 751, 755, 756, 761, 762, 763, 764, 766, 768, 773, 774, 777, 778, 779, 780, 783, 789, 790, 793, 796, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 817, 819, 820, 821, 822, 823, 831, 832, 833, 839], "20": [3, 12, 37, 39, 40, 41, 44, 50, 51, 55, 60, 64, 73, 74, 75, 78, 79, 83, 87, 229, 233, 237, 273, 277, 281, 334, 336, 338, 355, 358, 361, 376, 378, 394, 400, 403, 444, 466, 518, 525, 526, 528, 550, 554, 564, 604, 606, 609, 615, 616, 619, 622, 623, 633, 642, 647, 650, 654, 661, 711, 719, 720, 729, 730, 731, 735, 737, 783, 797, 815, 819], "004749261999904775": 3, "7245": 3, "1394": 3, "0587": 3, "promis": [3, 828], "sourc": [3, 17, 18, 19, 20, 21, 22, 23, 25, 26, 31, 32, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 748, 749, 750, 752, 753, 754, 755, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 788, 789, 790, 792, 793, 795, 796, 797, 809, 811, 827, 828, 829, 830, 832, 833, 837, 838, 839, 840, 841], "21": [3, 37, 39, 41, 44, 50, 51, 52, 60, 70, 73, 74, 78, 79, 83, 87, 96, 132, 162, 217, 220, 222, 228, 252, 267, 341, 358, 359, 361, 370, 376, 379, 389, 394, 400, 402, 403, 407, 444, 497, 550, 601, 602, 604, 606, 609, 610, 613, 619, 642, 654, 658, 670, 696, 711, 712, 729, 730, 731, 802, 807], "modul": [3, 5, 6, 8, 10, 12, 14, 15, 16, 22, 23, 25, 26, 27, 31, 37, 38, 39, 41, 42, 43, 66, 68, 89, 97, 351, 353, 354, 362, 363, 367, 546, 606, 620, 741, 745, 760, 761, 762, 764, 765, 767, 769, 772, 773, 783, 785, 789, 793, 794, 795, 802, 805, 808, 809, 811, 812, 817, 818, 820, 822, 823, 829, 831, 833, 838, 839, 841], "def": [3, 5, 6, 8, 10, 12, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 41, 43, 50, 73, 116, 218, 512, 530, 600, 606, 612, 613, 688, 689, 696, 777, 783, 786, 788, 789, 792, 793, 796, 798, 799, 800, 802, 804, 805, 807, 808, 809, 810, 812, 813, 815, 817, 819, 820, 821, 822, 831, 832, 833], "__init__": [3, 5, 10, 12, 25, 26, 37, 38, 39, 41, 68, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 746, 753, 754, 755, 760, 763, 764, 765, 766, 767, 768, 769, 772, 773, 777, 778, 781, 783, 788, 793, 794, 798, 802, 809, 813, 817, 819, 820, 821, 822, 832], "self": [3, 5, 10, 12, 25, 26, 37, 38, 39, 41, 43, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 96, 97, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 137, 139, 140, 141, 143, 146, 147, 148, 149, 157, 159, 162, 165, 166, 167, 169, 171, 174, 191, 208, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 370, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 389, 390, 391, 393, 394, 395, 396, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 513, 514, 517, 518, 519, 520, 521, 522, 525, 526, 529, 531, 533, 534, 535, 537, 538, 539, 541, 542, 544, 549, 550, 564, 565, 566, 567, 569, 571, 572, 585, 587, 588, 591, 593, 594, 595, 596, 608, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 768, 777, 783, 790, 793, 796, 802, 809, 810, 817, 819, 820, 821, 822, 832], "num_class": [3, 10, 12, 25, 26, 39, 41, 43, 783, 822, 832], "1000": [3, 6, 10, 25, 26, 39, 40, 41, 42, 44, 47, 70, 132, 601, 783, 820, 832], "v": [3, 4, 5, 14, 15, 18, 25, 26, 28, 31, 32, 37, 40, 41, 51, 55, 63, 70, 74, 78, 86, 132, 232, 237, 239, 280, 359, 361, 411, 419, 426, 427, 450, 604, 608, 612, 618, 634, 637, 688, 689, 727, 745, 762, 764, 765, 766, 767, 768, 769, 783, 785, 789, 790, 791, 795, 817, 820, 821, 822], "none": [3, 5, 6, 8, 25, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 95, 96, 97, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 159, 162, 164, 165, 166, 167, 169, 171, 174, 186, 189, 190, 202, 203, 204, 205, 206, 207, 208, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 310, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 352, 355, 358, 359, 360, 361, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 513, 514, 517, 518, 519, 520, 521, 522, 525, 526, 528, 529, 530, 531, 533, 534, 535, 537, 538, 541, 546, 549, 550, 551, 552, 553, 555, 556, 557, 558, 560, 561, 562, 564, 565, 567, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 593, 594, 595, 596, 598, 599, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 694, 695, 696, 697, 701, 702, 703, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 748, 749, 750, 751, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 772, 773, 776, 783, 786, 789, 792, 793, 794, 796, 797, 798, 799, 800, 802, 804, 805, 808, 809, 810, 812, 813, 815, 817, 819, 821, 822, 831, 832, 833], "_build": [3, 5, 783], "kwarg": [3, 4, 5, 8, 25, 39, 43, 46, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 97, 100, 197, 361, 461, 545, 573, 601, 603, 606, 743, 745, 760, 761, 764, 766, 773, 781, 783, 793, 798, 799, 802, 805, 808, 809, 815, 817, 821, 831, 832, 833], "featur": [3, 8, 10, 12, 14, 16, 25, 26, 39, 43, 51, 74, 358, 372, 373, 374, 381, 382, 383, 763, 764, 783, 788, 789, 790, 793, 794, 797, 798, 804, 813, 815, 820, 823, 832, 838, 839, 840, 844], "sequenti": [3, 5, 23, 25, 26, 41, 783, 795, 796, 821, 832], "conv2d": [3, 5, 23, 25, 26, 41, 44, 55, 78, 608, 625, 764, 783], "64": [3, 5, 37, 39, 40, 41, 44, 50, 51, 55, 73, 74, 75, 78, 79, 83, 87, 97, 158, 228, 238, 272, 281, 282, 331, 355, 358, 379, 389, 518, 519, 565, 593, 602, 604, 606, 607, 608, 609, 613, 619, 623, 625, 627, 630, 651, 654, 664, 698, 702, 712, 731, 735, 783, 789, 798, 820, 821, 843], "2": [3, 4, 5, 6, 7, 8, 10, 16, 18, 19, 20, 22, 23, 25, 26, 37, 38, 39, 40, 41, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 94, 96, 97, 104, 106, 107, 108, 109, 110, 111, 112, 113, 117, 119, 120, 121, 122, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 141, 143, 146, 147, 148, 149, 153, 157, 159, 167, 169, 174, 190, 191, 192, 195, 198, 200, 202, 205, 208, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 304, 307, 308, 309, 315, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 350, 352, 355, 356, 358, 359, 360, 361, 364, 365, 368, 370, 373, 374, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 389, 390, 391, 394, 395, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 417, 420, 422, 425, 429, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 452, 453, 455, 456, 457, 458, 460, 461, 466, 467, 468, 469, 470, 473, 474, 475, 479, 480, 481, 484, 486, 487, 488, 489, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 510, 511, 512, 513, 514, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 537, 538, 539, 541, 542, 544, 545, 547, 549, 550, 554, 563, 564, 565, 566, 567, 569, 573, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 693, 694, 696, 697, 698, 699, 701, 702, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 748, 750, 751, 760, 763, 764, 773, 777, 783, 786, 789, 790, 792, 794, 795, 796, 797, 798, 800, 802, 804, 805, 807, 808, 809, 810, 812, 816, 817, 819, 820, 821, 822, 823, 831, 832, 833, 844, 845], "data_format": [3, 41, 51, 55, 74, 78, 358, 364, 376, 377, 378, 381, 382, 383, 394, 395, 396, 397, 399, 476, 477, 478, 608, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 748, 764, 767, 783], "nchw": [3, 41, 51, 55, 74, 78, 358, 377, 382, 395, 399, 608, 621, 624, 625, 628, 629, 630, 764, 783], "relu": [3, 5, 23, 25, 26, 37, 44, 45, 51, 66, 67, 74, 106, 294, 295, 299, 350, 598, 760, 783, 810, 820, 821], "maxpool2d": [3, 5, 39, 764, 783], "192": [3, 41, 748, 777], "384": [3, 76, 587, 607, 613, 690], "avgpool": 3, "adaptiveavgpool2d": [3, 764], "6": [3, 6, 8, 10, 18, 20, 21, 22, 23, 25, 26, 37, 39, 40, 41, 44, 45, 47, 48, 50, 51, 52, 53, 55, 56, 58, 60, 61, 63, 64, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 92, 96, 97, 104, 106, 111, 116, 121, 122, 129, 130, 133, 134, 137, 143, 147, 148, 149, 157, 159, 167, 213, 214, 216, 217, 219, 220, 221, 222, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 262, 264, 265, 266, 267, 269, 270, 271, 273, 274, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 295, 296, 297, 298, 299, 300, 301, 307, 321, 322, 324, 326, 334, 335, 337, 338, 339, 341, 348, 350, 352, 355, 356, 358, 359, 360, 361, 366, 368, 370, 379, 381, 384, 385, 389, 390, 394, 400, 401, 402, 403, 406, 409, 412, 413, 417, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 445, 447, 451, 452, 456, 457, 460, 461, 466, 467, 469, 474, 475, 484, 486, 487, 489, 494, 496, 497, 498, 499, 501, 503, 504, 505, 511, 513, 514, 517, 518, 519, 525, 526, 533, 534, 535, 550, 564, 565, 566, 567, 569, 573, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 637, 639, 640, 641, 642, 644, 645, 646, 649, 650, 651, 654, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 690, 691, 701, 702, 708, 709, 710, 711, 712, 713, 715, 716, 717, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 748, 763, 783, 786, 789, 792, 794, 796, 797, 798, 800, 807, 812, 815, 817, 819, 820, 821], "classifi": [3, 10, 12, 25, 26, 39, 41, 42, 783, 831, 832], "prob": [3, 41, 51, 55, 74, 78, 83, 358, 365, 381, 382, 383, 482, 608, 615, 631, 710, 764, 783], "linear": [3, 12, 24, 25, 26, 37, 38, 39, 41, 44, 51, 52, 55, 67, 74, 75, 78, 104, 106, 108, 109, 112, 289, 291, 295, 296, 297, 299, 338, 350, 355, 358, 361, 370, 393, 425, 461, 505, 522, 545, 598, 606, 608, 613, 634, 658, 697, 748, 750, 751, 763, 764, 783, 796, 801, 805, 806, 808, 809, 812, 815, 817, 820, 821, 822, 832, 836, 837, 838, 841], "4096": 3, "_forward": [3, 5, 6, 8, 25, 26, 37, 38, 41, 783, 801, 817, 820, 821], "x": [3, 5, 10, 12, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 166, 167, 169, 174, 190, 191, 195, 200, 201, 202, 206, 208, 209, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 268, 269, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 315, 316, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 350, 352, 355, 356, 358, 359, 360, 361, 364, 368, 369, 370, 371, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 407, 408, 410, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 443, 445, 446, 448, 449, 451, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 470, 472, 473, 475, 476, 477, 478, 479, 480, 481, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 529, 531, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 554, 555, 556, 559, 562, 563, 564, 565, 566, 567, 569, 571, 572, 573, 585, 586, 588, 589, 590, 592, 596, 597, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 693, 696, 697, 698, 699, 700, 701, 702, 707, 708, 709, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 745, 748, 749, 750, 764, 767, 770, 773, 777, 781, 783, 786, 788, 791, 793, 794, 796, 798, 799, 800, 801, 802, 804, 805, 807, 808, 809, 810, 812, 813, 815, 817, 819, 820, 821, 822, 831, 832, 833], "reshap": [3, 25, 26, 41, 42, 51, 55, 56, 58, 68, 74, 78, 79, 81, 345, 355, 358, 359, 361, 376, 377, 378, 381, 394, 395, 396, 399, 407, 422, 445, 451, 586, 606, 608, 609, 611, 624, 626, 630, 650, 666, 783, 808, 809, 812, 815, 817, 819, 822], "bidirect": 4, "encod": [4, 10, 12, 25, 26, 39, 41, 52, 57, 75, 80, 522, 606, 610, 668, 783, 820, 828, 832], "mlm": 4, "support": [4, 16, 25, 28, 40, 49, 51, 52, 56, 72, 74, 75, 79, 141, 160, 164, 186, 193, 208, 217, 234, 241, 262, 263, 267, 277, 294, 315, 334, 350, 352, 355, 358, 359, 393, 410, 511, 523, 532, 535, 536, 553, 567, 601, 602, 603, 604, 606, 608, 609, 632, 643, 644, 645, 648, 650, 659, 666, 743, 749, 756, 768, 773, 774, 777, 783, 785, 786, 788, 789, 790, 792, 793, 795, 799, 800, 801, 804, 805, 807, 808, 810, 812, 813, 815, 816, 817, 819, 820, 822, 824, 825, 827, 828, 829, 832, 835, 837, 838, 841, 843, 844, 845], "googl": [4, 39, 40, 41, 43, 797, 828], "type": [4, 6, 10, 12, 16, 22, 25, 26, 31, 39, 40, 41, 44, 45, 46, 47, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 96, 97, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 352, 355, 356, 358, 359, 360, 361, 364, 365, 366, 368, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 389, 390, 391, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 745, 748, 749, 750, 751, 755, 756, 760, 763, 764, 766, 770, 773, 777, 778, 781, 783, 788, 789, 790, 791, 792, 793, 796, 799, 800, 801, 802, 804, 806, 808, 810, 812, 813, 815, 817, 819, 820, 831, 832, 833, 838, 839, 842], "choos": [4, 39, 41, 49, 61, 62, 72, 208, 234, 241, 262, 263, 267, 321, 322, 355, 361, 603, 604, 616, 617, 619, 720, 721, 722, 723, 724, 732, 733, 734, 736, 748, 783, 788, 789, 790, 806, 812, 818, 822, 831], "librari": [4, 6, 8, 14, 15, 21, 23, 37, 39, 49, 62, 72, 208, 239, 241, 257, 262, 263, 285, 321, 322, 355, 603, 604, 609, 617, 619, 644, 645, 721, 722, 723, 724, 732, 733, 734, 736, 783, 788, 789, 792, 798, 822, 823, 827, 828, 829, 831, 834, 835, 836, 838, 842, 845], "pretrain": [4, 6, 10, 11, 12, 25, 26, 44, 783, 832], "save": [4, 39, 51, 68, 74, 370, 503, 562, 584, 603, 606, 620, 766, 789, 797, 803, 812, 823, 829, 837], "some": [4, 5, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 30, 31, 37, 41, 42, 68, 76, 239, 241, 257, 358, 381, 382, 383, 587, 588, 591, 593, 594, 595, 603, 604, 607, 613, 701, 764, 783, 786, 788, 789, 790, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 819, 820, 821, 823, 824, 825, 828, 829, 831, 832, 834, 835, 837, 838, 839, 844, 845], "mohame54": 4, "automodel": [4, 8, 25], "autotoken": 4, "load": [4, 6, 8, 22, 25, 39, 40, 41, 42, 43, 44, 68, 359, 426, 620, 766, 783, 812, 823, 837, 844], "token": [4, 41], "bert_bas": 4, "from_pretrain": [4, 8, 25, 42, 831, 832], "base": [4, 39, 42, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 99, 101, 132, 141, 173, 237, 238, 255, 256, 257, 258, 272, 307, 315, 323, 326, 331, 338, 352, 355, 358, 359, 368, 400, 403, 426, 488, 555, 565, 577, 601, 602, 604, 606, 609, 611, 617, 619, 650, 674, 721, 722, 723, 724, 731, 746, 749, 753, 754, 755, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 772, 773, 778, 781, 783, 789, 790, 792, 796, 797, 798, 802, 804, 806, 807, 808, 810, 811, 812, 813, 814, 815, 817, 838, 843, 845], "uncas": 4, "eval": [4, 5, 7, 766], "evalu": [4, 50, 51, 68, 73, 74, 237, 239, 255, 256, 257, 258, 262, 269, 271, 278, 282, 339, 359, 360, 361, 422, 435, 458, 597, 604, 607, 613, 620, 700, 701, 739, 740, 765, 766, 790, 796, 798, 805, 806, 838], "bert_token": 4, "sampl": [4, 6, 8, 10, 12, 22, 25, 26, 40, 47, 50, 51, 60, 64, 70, 73, 74, 83, 87, 131, 132, 286, 307, 352, 358, 360, 361, 365, 381, 382, 383, 393, 404, 435, 464, 482, 483, 484, 485, 486, 601, 604, 615, 619, 710, 711, 712, 713, 736, 738, 764, 810, 812], "test": [4, 17, 18, 20, 21, 27, 28, 30, 31, 32, 40, 41, 50, 52, 65, 73, 75, 88, 119, 165, 169, 248, 249, 250, 251, 274, 358, 381, 382, 383, 542, 600, 602, 604, 606, 620, 739, 740, 743, 746, 749, 783, 785, 786, 787, 788, 791, 795, 798, 800, 802, 803, 806, 809, 811, 813, 823, 824, 829, 831, 832, 833, 838], "did": [4, 39, 788, 795, 822, 828, 844], "realli": [4, 37, 789, 796, 823, 831, 843, 844], "like": [4, 6, 8, 17, 18, 19, 25, 27, 28, 29, 30, 31, 32, 42, 44, 47, 50, 51, 58, 70, 73, 74, 78, 81, 86, 132, 150, 173, 218, 238, 244, 247, 260, 278, 327, 331, 343, 355, 358, 359, 360, 361, 368, 370, 400, 402, 410, 432, 441, 442, 450, 451, 488, 489, 505, 601, 602, 604, 609, 611, 615, 618, 643, 678, 713, 726, 783, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 815, 816, 817, 819, 820, 821, 822, 823, 828, 831, 832, 838, 843], "input": [4, 5, 8, 10, 12, 22, 23, 25, 30, 31, 39, 40, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 162, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 188, 190, 191, 204, 207, 208, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 352, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 368, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 389, 390, 391, 393, 394, 395, 396, 397, 399, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 420, 422, 423, 424, 425, 426, 427, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 444, 445, 446, 447, 449, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 513, 514, 517, 518, 519, 520, 521, 522, 525, 526, 528, 529, 531, 533, 534, 535, 537, 538, 539, 540, 541, 542, 544, 549, 550, 551, 557, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 579, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 696, 697, 698, 699, 701, 702, 703, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 745, 749, 756, 760, 763, 764, 766, 767, 777, 792, 793, 794, 796, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 817, 819, 820, 821, 822, 823, 831, 832, 839, 842], "pad": [4, 39, 41, 51, 55, 58, 74, 78, 81, 92, 94, 358, 361, 376, 377, 378, 379, 380, 385, 386, 389, 390, 391, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 522, 606, 608, 611, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 673, 686, 750, 764, 783], "longest": 4, "return_tensor": [4, 8, 25, 42, 831, 832], "pt": [4, 8, 25, 831], "max_length": [4, 68], "512": [4, 5, 39, 41, 79, 608, 623, 664, 783], "input_id": 4, "101": [4, 40, 608, 609, 613, 632, 647, 696], "1045": 4, "2106": 4, "1005": 4, "1056": 4, "2428": 4, "2066": 4, "2115": 4, "4309": 4, "1012": 4, "102": [4, 51, 74, 83, 379, 711], "token_type_id": 4, "attention_mask": [4, 55, 78, 608, 634], "pooler": 4, "compar": [4, 6, 8, 25, 38, 42, 44, 51, 52, 62, 63, 68, 74, 75, 86, 320, 336, 355, 507, 510, 606, 617, 618, 721, 722, 723, 724, 725, 728, 745, 783, 794, 800, 802, 810, 812, 815, 820, 834, 836, 838, 844, 845], "no_grad": [4, 39, 831], "bert_output": 4, "pooler_output": 4, "ivy_bert": 4, "bert_base_uncas": 4, "ivy_input": 4, "k": [4, 6, 38, 41, 47, 51, 52, 55, 56, 60, 70, 73, 74, 78, 79, 83, 91, 92, 116, 126, 139, 140, 141, 261, 301, 315, 316, 352, 359, 361, 365, 368, 370, 408, 421, 425, 427, 429, 467, 470, 482, 483, 484, 485, 486, 489, 499, 510, 600, 601, 606, 608, 609, 613, 615, 616, 634, 637, 641, 649, 650, 656, 658, 659, 660, 663, 698, 711, 712, 713, 719, 783, 791, 792, 809, 810, 817, 831, 834, 838], "ivy_output": [4, 42], "logits_clos": 4, "allclos": [4, 6, 8, 10, 12, 25, 42, 44, 51, 74, 355], "detach": [4, 6, 8, 10, 12, 25, 807], "rtol": [4, 10, 12, 51, 56, 74, 79, 320, 336, 355, 609, 652, 655, 743, 745, 786, 810], "005": [4, 51, 74, 320, 336, 355, 431], "atol": [4, 6, 8, 25, 51, 56, 74, 79, 320, 336, 355, 609, 652, 743, 745, 786, 810], "equal": [4, 47, 48, 50, 51, 52, 56, 57, 58, 60, 62, 63, 64, 68, 71, 73, 74, 75, 79, 80, 81, 83, 86, 92, 96, 97, 126, 128, 129, 130, 136, 137, 146, 226, 228, 232, 237, 239, 248, 249, 270, 272, 277, 280, 281, 285, 317, 318, 320, 336, 352, 355, 358, 359, 361, 364, 370, 380, 401, 425, 447, 456, 474, 479, 480, 481, 499, 507, 510, 586, 601, 602, 604, 606, 609, 610, 611, 615, 616, 617, 618, 619, 642, 651, 652, 655, 657, 663, 668, 671, 673, 678, 680, 686, 713, 719, 721, 722, 723, 724, 725, 728, 733, 735, 736, 737, 738, 756, 763, 764, 795, 796, 798, 800, 802, 810, 812], "els": [4, 5, 6, 40, 41, 43, 44, 51, 52, 60, 73, 74, 83, 152, 153, 154, 155, 156, 168, 274, 278, 359, 365, 415, 424, 428, 430, 483, 517, 521, 602, 604, 606, 613, 615, 700, 703, 711, 712, 713, 743, 777, 783, 788, 789, 790, 792, 794, 798, 799, 802, 805, 808, 809, 810, 812, 813, 815, 817, 819, 821, 822, 823, 839], "768": 4, "fn": [4, 42, 44, 51, 68, 71, 74, 100, 160, 161, 193, 194, 197, 361, 439, 508, 523, 524, 573, 602, 603, 606, 613, 696, 697, 698, 700, 701, 702, 743, 745, 770, 773, 778, 779, 781, 799, 802, 808, 809, 817, 831], "finish": [4, 14, 25, 26, 37, 40, 783, 784, 788, 789, 791], "2f": [4, 6], "sec": 4, "89": [4, 37, 50, 60, 71, 73, 74, 83, 97, 162, 229, 602, 609, 619, 661, 712, 713, 737], "43": [4, 37, 39, 41, 51, 74, 83, 97, 228, 358, 359, 370, 378, 409, 497, 604, 615, 616, 712, 713, 720], "procedur": [4, 795, 797, 800, 810], "60": [4, 37, 41, 50, 64, 73, 75, 83, 87, 218, 252, 361, 466, 526, 534, 550, 564, 586, 604, 606, 609, 613, 619, 654, 693, 711, 729, 731, 735, 797], "big": [4, 763, 784, 823, 838], "jnp": [4, 17, 22, 25, 26, 27, 28, 31, 37, 39, 43, 783, 798, 799, 802, 804, 808, 813, 817, 822, 832, 833], "config": [4, 5, 6, 8, 19, 25, 26, 39, 40, 42, 68, 613, 703, 783, 789, 792, 795, 797, 803, 810, 820, 831, 839], "jax_enable_x64": [4, 5, 6, 8, 19, 25, 26, 783], "ref": [4, 5, 75, 79, 253, 267, 270, 276, 283, 604, 611, 682, 789, 808], "initi": [4, 25, 26, 42, 51, 55, 68, 74, 78, 97, 359, 370, 415, 424, 430, 504, 608, 633, 761, 762, 764, 765, 766, 768, 769, 783, 790, 794, 798, 799, 810, 812, 817, 828, 831, 832, 833, 838, 844, 845], "fast": [4, 20, 30, 51, 358, 380, 838], "valu": [4, 37, 38, 40, 41, 47, 48, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 67, 68, 70, 71, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 94, 96, 97, 99, 112, 116, 117, 119, 120, 126, 129, 130, 131, 132, 135, 141, 146, 163, 167, 173, 206, 207, 214, 215, 216, 217, 219, 221, 222, 223, 230, 234, 235, 237, 239, 240, 241, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 294, 299, 301, 308, 315, 317, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 333, 334, 336, 337, 339, 342, 344, 345, 346, 347, 348, 350, 352, 355, 356, 358, 359, 360, 361, 364, 365, 369, 370, 380, 393, 400, 401, 404, 408, 411, 415, 419, 424, 426, 428, 430, 431, 433, 434, 435, 436, 444, 450, 455, 461, 466, 468, 469, 470, 473, 476, 478, 482, 483, 485, 486, 492, 494, 497, 498, 499, 502, 503, 504, 505, 511, 513, 514, 515, 517, 522, 525, 526, 528, 533, 534, 535, 542, 549, 550, 554, 555, 556, 559, 567, 572, 577, 578, 581, 584, 585, 586, 587, 588, 589, 593, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 637, 641, 644, 645, 650, 651, 652, 655, 656, 657, 658, 659, 660, 663, 666, 671, 672, 673, 677, 678, 686, 687, 688, 692, 694, 695, 696, 697, 698, 703, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 743, 745, 748, 749, 750, 751, 753, 755, 760, 762, 763, 764, 765, 766, 767, 768, 786, 789, 790, 792, 795, 796, 798, 799, 800, 801, 802, 804, 805, 808, 809, 812, 814, 815, 817, 819, 823, 831, 838, 839], "demo": [5, 6, 7, 8, 26, 33, 37, 41, 783], "milesi": 5, "blob": [5, 39, 41], "2f62e6b1c8e98022a6418d31a76f6abd800e5ae7": 5, "util": [5, 23, 39, 42, 51, 74, 192, 359, 426, 603, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 789, 795, 799, 802, 805, 808, 812, 813, 817, 832, 836, 844, 845], "data_load": 5, "py": [5, 39, 41, 44, 87, 359, 426, 731, 773, 777, 783, 788, 789, 790, 792, 794, 797, 798, 799, 801, 802, 803, 804, 805, 809, 810, 812, 813, 817, 819, 821, 822], "l65": 5, "mask_valu": 5, "pil_img": 5, "scale": [5, 6, 39, 51, 55, 59, 74, 76, 78, 82, 106, 205, 206, 296, 307, 334, 350, 352, 355, 358, 359, 364, 375, 381, 382, 383, 391, 402, 417, 476, 477, 478, 594, 598, 603, 607, 608, 614, 631, 634, 637, 709, 748, 750, 751, 763, 764, 768, 838, 840], "is_mask": 5, "w": [5, 40, 41, 51, 52, 53, 55, 68, 73, 74, 75, 76, 78, 91, 261, 334, 349, 355, 357, 358, 359, 376, 377, 378, 380, 394, 395, 396, 397, 412, 430, 495, 518, 520, 564, 587, 588, 589, 591, 593, 594, 595, 606, 607, 608, 613, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 696, 783, 791, 807, 817, 820, 821, 832], "h": [5, 51, 52, 55, 74, 75, 78, 358, 377, 378, 395, 396, 518, 520, 606, 608, 613, 621, 624, 625, 626, 627, 628, 629, 630, 693, 697, 699, 702, 707, 791, 795, 796, 797, 832, 834], "size": [5, 10, 12, 17, 20, 21, 27, 28, 30, 31, 32, 39, 41, 44, 51, 52, 55, 56, 58, 60, 61, 68, 74, 75, 78, 79, 81, 83, 84, 91, 92, 96, 97, 128, 131, 205, 206, 207, 300, 303, 307, 317, 318, 319, 326, 341, 348, 352, 355, 356, 358, 359, 361, 364, 365, 368, 370, 372, 373, 374, 375, 376, 377, 393, 394, 395, 397, 398, 403, 404, 411, 414, 424, 430, 432, 445, 447, 459, 470, 477, 478, 484, 489, 501, 502, 503, 504, 505, 544, 549, 601, 603, 606, 608, 609, 611, 615, 616, 620, 634, 637, 639, 642, 646, 650, 654, 656, 659, 665, 674, 679, 680, 681, 710, 716, 719, 739, 740, 748, 750, 751, 764, 783, 808, 810, 812, 815, 820, 831, 833], "neww": 5, "newh": 5, "int": [5, 39, 42, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 94, 96, 100, 107, 111, 112, 121, 122, 126, 128, 129, 130, 131, 132, 135, 139, 140, 141, 148, 155, 158, 159, 162, 169, 184, 198, 199, 200, 207, 208, 217, 224, 225, 226, 227, 228, 229, 241, 244, 268, 272, 277, 283, 286, 292, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 322, 326, 327, 330, 334, 341, 343, 345, 348, 350, 352, 355, 356, 358, 359, 360, 361, 364, 365, 366, 368, 370, 372, 373, 374, 376, 377, 378, 379, 380, 384, 385, 386, 389, 390, 391, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 407, 411, 413, 414, 415, 416, 418, 421, 423, 424, 427, 428, 430, 434, 438, 439, 443, 446, 447, 450, 451, 454, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 472, 473, 474, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 494, 496, 497, 498, 499, 501, 502, 503, 504, 505, 508, 518, 519, 520, 522, 525, 526, 529, 530, 544, 547, 549, 564, 565, 566, 570, 586, 587, 588, 589, 590, 593, 598, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 639, 641, 642, 650, 651, 656, 661, 663, 664, 665, 666, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 696, 697, 699, 701, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 721, 723, 725, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 748, 749, 750, 751, 760, 763, 764, 777, 796, 798, 799, 800, 802, 804, 805, 808, 810, 812, 813, 815, 817, 822, 831], "assert": [5, 40, 42, 44, 68, 511, 606, 756, 786, 791, 792, 805, 808, 809, 810, 812, 813, 819, 820], "too": [5, 217, 234, 241, 267, 604, 763, 788, 789, 790, 792, 798, 802, 813, 823], "small": [5, 41, 50, 51, 56, 59, 73, 74, 79, 82, 234, 241, 267, 268, 320, 336, 355, 359, 360, 364, 419, 435, 476, 477, 478, 604, 609, 614, 652, 655, 657, 709, 763, 767, 783, 789, 797, 800, 805, 810, 815, 817, 821, 823, 831, 832, 839], "would": [5, 19, 25, 26, 29, 31, 33, 41, 47, 49, 51, 70, 72, 74, 81, 107, 111, 122, 208, 358, 361, 385, 390, 440, 441, 447, 449, 451, 452, 453, 460, 464, 474, 598, 603, 674, 675, 676, 678, 680, 681, 683, 685, 750, 760, 764, 783, 784, 786, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 800, 801, 804, 806, 808, 809, 810, 812, 813, 815, 816, 817, 819, 821, 822, 823, 824, 828, 831, 838, 844], "pixel": [5, 39, 51, 74, 358, 393], "resampl": 5, "nearest": [5, 51, 74, 217, 234, 267, 277, 330, 355, 358, 370, 393, 505, 604, 815], "bicub": [5, 51, 74, 358, 393, 815], "zero": [5, 39, 47, 48, 50, 51, 53, 55, 56, 58, 61, 62, 64, 65, 70, 71, 73, 74, 76, 78, 79, 83, 84, 87, 88, 92, 106, 108, 109, 110, 112, 123, 124, 126, 128, 133, 135, 136, 137, 139, 140, 143, 146, 147, 215, 216, 217, 219, 220, 221, 222, 223, 226, 228, 229, 231, 232, 233, 234, 236, 239, 240, 241, 248, 249, 250, 251, 257, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 279, 280, 281, 282, 284, 285, 287, 288, 290, 291, 295, 296, 299, 301, 316, 321, 322, 325, 326, 327, 330, 338, 341, 343, 344, 345, 346, 350, 352, 355, 358, 359, 361, 368, 370, 379, 380, 381, 382, 383, 385, 386, 389, 390, 391, 400, 401, 402, 403, 404, 409, 411, 422, 425, 445, 455, 460, 461, 471, 488, 497, 498, 514, 518, 525, 545, 550, 587, 588, 593, 594, 595, 596, 598, 601, 602, 604, 606, 607, 608, 609, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 630, 631, 632, 634, 637, 638, 640, 644, 645, 647, 648, 649, 650, 651, 652, 653, 655, 657, 665, 666, 673, 674, 675, 676, 678, 679, 686, 709, 711, 712, 713, 716, 717, 718, 719, 721, 722, 723, 724, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 748, 763, 764, 768, 793, 796, 798, 799, 800, 804, 806, 807, 810, 817, 820, 821, 829, 837], "int64": [5, 51, 60, 61, 63, 64, 71, 83, 84, 86, 87, 136, 149, 155, 158, 160, 162, 166, 167, 171, 178, 304, 352, 368, 370, 489, 497, 498, 601, 602, 616, 618, 619, 711, 716, 717, 718, 727, 729, 730, 735, 737, 748, 749, 798, 809, 812, 817], "enumer": [5, 39, 41, 753, 762, 783], "ndim": [5, 51, 56, 61, 74, 79, 84, 96, 100, 359, 361, 423, 424, 430, 440, 441, 442, 454, 462, 464, 472, 586, 606, 609, 616, 656, 659, 719, 796, 805, 812], "newaxi": [5, 599], "transpos": [5, 22, 25, 26, 43, 51, 55, 56, 68, 74, 78, 79, 96, 359, 405, 421, 423, 425, 495, 608, 609, 621, 623, 625, 627, 628, 629, 649, 653, 655, 661, 750, 764, 783, 808, 819, 822, 832], "255": [5, 22, 25, 26, 39, 40, 41, 43, 55, 74, 78, 228, 604, 630, 783, 832], "car": 5, "full_img": 5, "from_numpi": [5, 820], "fals": [5, 6, 8, 12, 16, 25, 28, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 95, 96, 97, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 117, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 139, 140, 141, 143, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 159, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 190, 191, 196, 198, 201, 202, 204, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 326, 328, 335, 336, 341, 342, 343, 344, 345, 346, 347, 348, 352, 355, 356, 358, 359, 360, 361, 364, 370, 372, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 393, 394, 395, 396, 399, 400, 401, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 488, 489, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 507, 510, 511, 513, 514, 517, 518, 519, 520, 521, 522, 525, 526, 528, 529, 531, 533, 534, 535, 537, 538, 539, 541, 542, 545, 549, 550, 551, 554, 557, 558, 560, 561, 563, 564, 565, 567, 569, 571, 572, 574, 579, 580, 582, 583, 585, 588, 589, 591, 595, 596, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 696, 700, 701, 702, 703, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 745, 746, 748, 749, 750, 751, 756, 760, 761, 762, 764, 765, 766, 768, 770, 773, 777, 778, 781, 783, 786, 789, 792, 794, 797, 798, 799, 800, 802, 808, 809, 810, 812, 814, 815, 817, 820, 821, 822, 831, 832], "permut": [5, 7, 39, 58, 81, 96, 368, 488, 611, 676, 683, 832], "img_numpi": 5, "cpu": [5, 6, 8, 25, 39, 40, 41, 43, 44, 47, 49, 51, 60, 70, 72, 74, 83, 120, 126, 129, 131, 132, 135, 136, 137, 143, 187, 188, 190, 191, 192, 193, 198, 201, 203, 205, 208, 209, 211, 213, 365, 482, 483, 485, 486, 601, 603, 609, 615, 648, 710, 711, 712, 713, 745, 763, 764, 765, 766, 767, 768, 769, 783, 786, 789, 790, 795, 798, 799, 809, 812, 823, 836, 838, 841, 843], "torch_unet": 5, "unet_carvana": 5, "when": [5, 7, 16, 18, 20, 21, 25, 26, 28, 30, 31, 32, 40, 42, 46, 47, 48, 50, 51, 56, 57, 60, 61, 64, 68, 70, 71, 73, 74, 79, 80, 83, 84, 87, 97, 135, 146, 217, 234, 239, 241, 257, 267, 285, 286, 292, 321, 322, 350, 355, 358, 359, 360, 364, 365, 370, 380, 393, 404, 411, 415, 424, 430, 435, 476, 478, 483, 503, 505, 535, 551, 559, 565, 601, 602, 604, 606, 608, 609, 610, 611, 613, 615, 616, 619, 621, 634, 652, 657, 668, 669, 670, 678, 701, 702, 711, 712, 713, 716, 717, 719, 720, 732, 734, 736, 738, 748, 751, 762, 763, 764, 765, 766, 767, 773, 784, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 812, 813, 814, 815, 817, 819, 820, 822, 823, 824, 827, 828, 831, 832, 836, 838, 841, 842, 843, 844], "ivy_unet": 5, "n_channel": 5, "n_class": 5, "forward": [5, 7, 12, 25, 26, 39, 41, 51, 74, 358, 380, 385, 386, 390, 391, 401, 402, 761, 763, 764, 765, 766, 768, 783, 789, 794, 801, 807, 812, 813, 815, 822, 823, 831, 838, 839], "effici": [5, 6, 7, 8, 14, 15, 17, 18, 25, 26, 27, 28, 51, 56, 74, 79, 359, 360, 419, 434, 558, 580, 606, 609, 652, 783, 789, 790, 796, 805, 806, 808, 812, 814, 817, 820, 823, 832, 838, 840, 841], "l62": 5, "mask_to_imag": 5, "ndarrai": [5, 47, 51, 52, 70, 74, 92, 121, 122, 134, 358, 359, 361, 370, 402, 424, 466, 502, 503, 571, 601, 606, 773, 777, 788, 793, 798, 799, 802, 804, 808, 809, 810, 813, 815, 817, 819, 822, 825], "isinst": [5, 23, 25, 26, 802, 809, 812, 813, 821, 822], "len": [5, 39, 41, 47, 51, 56, 74, 79, 133, 304, 312, 313, 352, 358, 359, 370, 391, 402, 413, 416, 424, 430, 505, 601, 609, 644, 664, 783, 796, 797, 802, 808, 809, 812, 819, 822, 831], "uint8": [5, 22, 25, 26, 41, 149, 156, 160, 171, 174, 179, 185, 602, 748, 749, 798, 812], "elif": [5, 6, 797, 802, 808, 809, 810], "bool": [5, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 121, 122, 123, 128, 129, 130, 131, 132, 133, 135, 137, 143, 146, 147, 149, 150, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 176, 182, 186, 190, 191, 193, 194, 196, 198, 201, 202, 207, 208, 210, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 311, 312, 313, 314, 316, 320, 321, 322, 323, 324, 326, 328, 335, 336, 341, 342, 344, 346, 347, 348, 352, 355, 356, 358, 359, 360, 361, 364, 370, 376, 377, 378, 380, 381, 382, 383, 393, 394, 395, 396, 399, 401, 404, 411, 415, 418, 421, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 445, 446, 447, 449, 450, 451, 452, 453, 456, 460, 464, 467, 469, 470, 474, 476, 478, 479, 480, 481, 483, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 507, 510, 511, 513, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 549, 550, 554, 563, 564, 565, 567, 569, 571, 572, 585, 588, 589, 591, 593, 594, 595, 596, 598, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 631, 632, 634, 637, 638, 639, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 656, 657, 658, 659, 663, 664, 666, 668, 669, 670, 671, 674, 675, 676, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 696, 697, 698, 700, 701, 702, 707, 708, 710, 711, 712, 713, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 745, 746, 748, 749, 750, 760, 764, 767, 768, 777, 781, 798, 800, 802, 808, 809, 812, 813, 815, 817, 822, 831, 832], "argmax": [5, 40, 41, 42, 61, 84, 361, 466, 616, 783, 809, 831], "fromarrai": [5, 22, 25, 26, 41], "interpol": [5, 39, 51, 74, 338, 355, 358, 370, 505, 608, 634, 815, 838], "mode": [5, 31, 43, 51, 56, 68, 74, 79, 90, 91, 92, 93, 94, 95, 204, 207, 212, 217, 234, 267, 314, 352, 358, 359, 361, 388, 393, 401, 402, 413, 415, 421, 423, 424, 430, 444, 454, 459, 461, 462, 464, 466, 469, 472, 551, 552, 553, 557, 558, 560, 561, 574, 575, 579, 580, 582, 583, 603, 604, 606, 609, 656, 756, 764, 765, 766, 780, 789, 790, 791, 796, 799, 800, 815, 823, 838, 841], "bilinear": [5, 51, 74, 358, 393, 815], "torch_mask": 5, "squeez": [5, 39, 58, 81, 611, 838], "torch_result": 5, "to_numpi": [5, 25, 26, 37, 40, 41, 44, 52, 75, 606, 783, 810, 820], "give": [5, 17, 27, 37, 51, 55, 74, 78, 173, 358, 400, 403, 602, 608, 611, 621, 622, 623, 624, 626, 628, 630, 678, 762, 763, 783, 789, 790, 791, 794, 797, 798, 800, 801, 803, 804, 812, 829, 838, 842], "img_tf": 5, "math": [5, 42, 92, 284, 604, 798, 808, 809, 810, 822, 836], "ve": [5, 14, 23, 25, 60, 83, 615, 710, 788, 789, 790, 812, 815, 816, 819, 825], "lot": [5, 797, 798, 806, 812, 823, 828, 829, 837], "far": [5, 25, 26, 613, 690, 701, 799, 800, 818, 843, 844], "space": [5, 47, 50, 51, 52, 70, 73, 74, 75, 120, 131, 132, 286, 334, 355, 360, 432, 518, 522, 601, 604, 606, 815, 828], "del": [5, 797], "empty_cach": 5, "permute_dim": [5, 58, 81, 611], "usr": [5, 39, 40, 41, 44, 789], "local": [5, 8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 30, 31, 32, 39, 40, 41, 44, 530, 606, 784, 789, 792, 795, 805, 810, 812], "lib": [5, 39, 40, 41, 44], "python3": [5, 7, 25, 39, 41, 44, 783, 789, 790], "dist": [5, 39, 40, 41, 44], "func_wrapp": [5, 45, 50, 51, 67, 73, 74, 104, 105, 106, 107, 108, 109, 110, 111, 112, 285, 289, 292, 293, 295, 350, 598, 604, 760, 799, 809, 814], "242": [5, 74], "userwarn": [5, 44], "creat": [5, 16, 17, 18, 20, 21, 25, 26, 27, 28, 30, 31, 32, 39, 40, 41, 43, 44, 47, 50, 51, 60, 68, 70, 73, 74, 79, 83, 92, 120, 121, 122, 124, 125, 126, 129, 130, 131, 132, 134, 135, 136, 137, 141, 142, 143, 268, 300, 301, 310, 312, 314, 315, 352, 358, 359, 361, 365, 376, 377, 378, 399, 415, 424, 430, 438, 445, 461, 466, 482, 483, 484, 485, 486, 553, 569, 586, 597, 601, 604, 606, 607, 615, 654, 710, 711, 712, 713, 715, 745, 756, 761, 763, 764, 765, 766, 767, 768, 769, 784, 789, 790, 793, 794, 795, 797, 798, 799, 802, 805, 806, 808, 809, 810, 812, 815, 817, 818, 821, 824, 825, 828, 831, 832, 833, 838, 839, 844], "mani": [5, 25, 26, 29, 58, 68, 81, 141, 315, 352, 601, 611, 680, 762, 783, 788, 789, 790, 793, 794, 796, 797, 798, 799, 800, 801, 804, 805, 806, 808, 809, 810, 812, 815, 817, 819, 820, 823, 827, 828, 829, 834, 838, 841, 844, 845], "view": [5, 51, 58, 74, 96, 127, 138, 361, 440, 441, 442, 447, 449, 451, 452, 453, 456, 460, 467, 474, 528, 601, 606, 611, 674, 675, 676, 678, 680, 681, 683, 685, 789, 790, 802, 838], "lead": [5, 56, 68, 79, 97, 241, 359, 419, 553, 604, 606, 609, 656, 659, 750, 797, 798, 800, 811, 813, 823, 828, 829], "overhead": [5, 18, 25, 26, 28, 823, 831, 841], "perform": [5, 18, 20, 22, 25, 26, 28, 30, 37, 39, 47, 51, 55, 56, 64, 65, 70, 74, 75, 78, 79, 87, 88, 107, 111, 131, 132, 204, 212, 234, 267, 288, 327, 348, 355, 356, 358, 359, 361, 368, 370, 380, 381, 382, 383, 385, 386, 390, 391, 399, 401, 424, 439, 489, 497, 498, 518, 519, 520, 533, 534, 535, 551, 561, 598, 601, 603, 604, 606, 608, 609, 612, 613, 619, 620, 631, 633, 659, 661, 666, 687, 688, 689, 697, 698, 729, 730, 739, 740, 743, 760, 764, 792, 793, 794, 796, 798, 799, 800, 804, 805, 806, 808, 809, 810, 812, 813, 815, 817, 820, 823, 829, 831, 832, 835, 838, 839, 840, 841, 842, 843, 845], "inplac": [5, 46, 52, 68, 75, 91, 94, 509, 511, 532, 535, 536, 553, 554, 606, 613, 697, 698, 702, 707, 708, 755, 756, 761, 768, 791, 793, 800, 804, 806, 809, 815, 819, 821], "17": [5, 21, 37, 39, 41, 44, 45, 51, 56, 67, 73, 74, 75, 76, 78, 79, 83, 97, 106, 107, 132, 217, 234, 259, 267, 300, 348, 352, 358, 361, 376, 377, 385, 386, 389, 390, 394, 395, 400, 403, 451, 519, 534, 587, 589, 598, 601, 604, 606, 607, 608, 609, 613, 615, 622, 631, 632, 642, 646, 698, 711, 712, 713, 715, 796], "factor": [5, 51, 53, 55, 56, 74, 76, 78, 79, 90, 91, 92, 93, 94, 205, 206, 207, 358, 359, 391, 402, 415, 416, 424, 427, 429, 430, 587, 588, 593, 594, 603, 607, 608, 609, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 638, 748, 750, 751, 763, 764, 768, 802, 828], "inc": 5, "unetdoubleconv": 5, "down1": 5, "unetdown": 5, "128": [5, 25, 26, 39, 48, 50, 55, 71, 73, 78, 97, 162, 238, 358, 379, 389, 518, 528, 602, 604, 606, 608, 609, 623, 625, 630, 654, 783], "down2": 5, "down3": 5, "down4": 5, "1024": [5, 39, 40, 783], "up1": 5, "unetup": 5, "up2": 5, "up3": 5, "up4": 5, "outc": 5, "unetoutconv": 5, "x1": [5, 16, 25, 26, 44, 48, 50, 51, 52, 56, 61, 71, 73, 74, 75, 79, 84, 86, 96, 97, 101, 147, 157, 173, 180, 200, 217, 222, 224, 226, 227, 228, 229, 234, 235, 241, 242, 243, 244, 245, 246, 252, 253, 254, 259, 260, 261, 263, 264, 265, 266, 267, 270, 272, 276, 283, 288, 301, 320, 325, 331, 332, 333, 335, 337, 342, 346, 352, 355, 359, 361, 370, 425, 455, 496, 507, 510, 602, 603, 604, 606, 609, 616, 618, 639, 646, 649, 654, 658, 661, 662, 665, 720, 727, 745, 770, 783, 792, 798, 800, 802, 804, 808, 809, 832, 833], "x2": [5, 16, 25, 26, 48, 50, 51, 52, 56, 61, 71, 73, 74, 75, 79, 84, 96, 97, 101, 147, 173, 180, 200, 217, 222, 224, 226, 227, 228, 229, 234, 235, 241, 242, 243, 244, 245, 246, 252, 253, 254, 259, 260, 261, 263, 264, 265, 266, 267, 270, 272, 276, 283, 288, 320, 325, 331, 332, 333, 335, 337, 342, 346, 355, 359, 361, 370, 413, 425, 455, 496, 507, 510, 602, 603, 604, 606, 609, 616, 639, 646, 649, 654, 658, 661, 662, 665, 720, 745, 770, 792, 798, 800, 802, 804, 808, 809], "x3": [5, 48, 52, 147, 507, 602, 606], "x4": 5, "x5": 5, "in_channel": 5, "out_channel": 5, "mid_channel": 5, "double_conv": 5, "with_bia": [5, 764, 783, 821, 832], "batchnorm2d": [5, 767], "downscal": [5, 52, 75, 513, 514, 535, 606], "maxpool": 5, "doubl": 5, "conv": [5, 608, 764, 815], "maxpool_conv": 5, "upscal": 5, "scale_factor": [5, 51, 74, 358, 393, 815], "align_corn": [5, 51, 74, 358, 393, 815], "conv2dtranspos": [5, 764], "valid": [5, 39, 41, 51, 55, 65, 74, 78, 88, 91, 92, 151, 358, 359, 376, 377, 378, 394, 395, 396, 397, 399, 400, 403, 422, 430, 538, 602, 606, 608, 611, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 674, 682, 739, 740, 748, 749, 764, 777, 789, 794, 798, 800, 803, 807, 810, 812, 831, 839], "bhwc": 5, "diff_h": 5, "diff_w": 5, "pad_width": [5, 51, 58, 74, 81, 361, 461, 611, 673, 686], "constant_pad": [5, 58, 81, 611], "concat": [5, 37, 42, 52, 58, 68, 81, 207, 522, 603, 606, 611, 686, 810, 815, 817, 831], "openmim": 6, "mim": 6, "0rc8": 6, "torch": [6, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 37, 39, 42, 43, 44, 47, 52, 56, 66, 75, 79, 123, 161, 188, 189, 203, 205, 210, 277, 321, 322, 355, 511, 535, 567, 601, 602, 603, 604, 606, 609, 612, 659, 688, 689, 745, 756, 761, 773, 783, 786, 789, 790, 792, 793, 794, 795, 797, 798, 799, 802, 804, 805, 806, 807, 808, 809, 810, 812, 813, 815, 817, 819, 820, 822, 823, 825, 831, 832, 833, 844], "request": [6, 8, 22, 25, 26, 39, 42, 51, 198, 365, 486, 603, 783, 784, 788, 800, 803, 813, 815, 829, 832], "get_model": 6, "list_model": 6, "mmengin": 6, "configdict": 6, "saniti": [6, 8, 25, 809], "checkpoint": [6, 42, 823], "correct": [6, 10, 12, 21, 31, 37, 39, 41, 64, 87, 180, 359, 426, 602, 611, 619, 671, 736, 738, 745, 748, 783, 786, 788, 790, 791, 796, 797, 798, 799, 802, 804, 805, 808, 810, 812, 832], "against": [6, 48, 51, 52, 56, 61, 71, 73, 74, 75, 79, 84, 147, 266, 285, 320, 323, 326, 336, 355, 370, 502, 503, 504, 505, 542, 602, 604, 606, 609, 616, 649, 650, 652, 655, 716, 812, 817, 823, 827, 838], "zoo": 6, "checkpoint_nam": [6, 8, 25], "convnext": 6, "tiny_32xb128": 6, "noema_in1k": 6, "openmmlab": 6, "dure": [6, 8, 18, 20, 25, 28, 30, 31, 49, 53, 64, 68, 72, 76, 87, 208, 358, 381, 382, 383, 553, 573, 587, 588, 593, 603, 606, 607, 608, 609, 612, 619, 631, 649, 687, 688, 689, 736, 738, 756, 762, 765, 766, 767, 768, 789, 796, 798, 799, 802, 805, 806, 808, 809, 810, 811, 812, 815, 823, 831, 838, 839, 844], "trace": [6, 8, 20, 22, 25, 26, 28, 30, 31, 43, 52, 56, 68, 75, 79, 537, 538, 541, 552, 561, 575, 583, 606, 609, 745, 756, 765, 766, 768, 783, 792, 796, 798, 809, 814, 815, 817, 822, 823, 830, 831, 832, 839, 844], "appropri": [6, 16, 25, 26, 52, 61, 66, 84, 89, 217, 234, 241, 267, 320, 336, 355, 604, 616, 716, 783, 788, 789, 790, 802, 806, 812], "get_scal": 6, "cfg": [6, 803], "kei": [6, 18, 19, 25, 26, 41, 43, 46, 51, 55, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 128, 130, 135, 137, 143, 147, 149, 162, 166, 167, 174, 208, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 295, 296, 297, 298, 299, 301, 320, 321, 322, 324, 326, 328, 335, 336, 342, 344, 346, 347, 348, 368, 381, 382, 383, 401, 431, 432, 433, 434, 435, 436, 437, 445, 446, 467, 470, 476, 478, 479, 480, 481, 483, 489, 496, 497, 498, 499, 507, 508, 510, 511, 513, 514, 515, 518, 519, 520, 521, 522, 525, 526, 529, 531, 533, 534, 535, 537, 538, 541, 549, 550, 564, 565, 567, 569, 571, 572, 585, 591, 596, 606, 608, 612, 613, 622, 623, 624, 625, 631, 632, 634, 637, 638, 639, 644, 645, 646, 647, 649, 650, 652, 654, 656, 657, 663, 668, 669, 670, 671, 675, 678, 679, 680, 681, 682, 685, 686, 687, 688, 693, 699, 703, 710, 711, 712, 713, 715, 718, 721, 722, 723, 724, 725, 729, 730, 733, 735, 736, 738, 739, 740, 748, 749, 755, 761, 762, 764, 768, 783, 795, 796, 797, 805, 808, 809, 810, 812, 820, 832, 838, 841, 845], "input_shap": [6, 12, 23, 25, 26, 358, 398, 783], "block": [6, 25, 26, 29, 30, 31, 32, 359, 417, 783, 790, 796, 798, 802, 805, 812, 816, 818, 822, 823, 825, 832, 843, 845], "url": [6, 8, 22, 25, 26, 39, 42, 783, 832], "cocodataset": [6, 8, 22, 25, 26, 42, 783, 832], "org": [6, 8, 22, 25, 26, 39, 41, 42, 44, 50, 51, 73, 74, 76, 141, 149, 237, 247, 248, 263, 315, 321, 322, 352, 355, 358, 370, 401, 496, 587, 588, 601, 602, 604, 607, 609, 611, 619, 657, 658, 686, 736, 783, 801, 832], "val2017": [6, 8, 25, 42], "000000039769": [6, 8, 25, 42], "stream": [6, 8, 22, 25, 26, 39, 42, 49, 72, 208, 603, 783, 832, 842], "_config": 6, "train_pipelin": 6, "tensor_imag": 6, "And": [6, 8, 10, 12, 17, 20, 25, 26, 27, 40, 71, 783, 792, 795, 803, 805, 812, 831], "final": [6, 8, 10, 12, 14, 22, 25, 26, 31, 37, 38, 47, 52, 74, 75, 91, 119, 131, 132, 358, 402, 522, 600, 601, 606, 608, 634, 788, 790, 792, 793, 794, 795, 797, 798, 800, 801, 805, 807, 808, 809, 811, 815, 816, 820, 831, 832, 834, 844], "transpiled_graph": [6, 8, 25], "what": [6, 8, 14, 19, 25, 26, 29, 30, 33, 38, 39, 358, 391, 402, 750, 783, 790, 791, 796, 797, 800, 801, 803, 804, 806, 807, 808, 809, 810, 812, 816, 817, 819, 820, 821, 822, 823, 828, 829, 834, 839, 840, 843], "improv": [6, 8, 25, 28, 790, 798, 804, 805, 815, 817, 825, 829, 831, 836, 838, 840, 841], "For": [6, 7, 8, 16, 18, 25, 26, 28, 31, 33, 47, 51, 56, 62, 74, 79, 120, 133, 214, 215, 216, 217, 219, 220, 221, 222, 223, 230, 231, 232, 234, 235, 237, 239, 240, 241, 248, 249, 250, 255, 256, 257, 258, 259, 262, 267, 269, 270, 272, 276, 277, 278, 279, 280, 281, 284, 285, 287, 317, 318, 321, 322, 324, 344, 352, 355, 359, 361, 421, 423, 442, 461, 464, 601, 604, 609, 611, 617, 619, 657, 659, 663, 671, 682, 721, 722, 723, 724, 732, 734, 735, 737, 749, 761, 788, 789, 790, 791, 793, 794, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 808, 809, 810, 811, 812, 813, 815, 817, 819, 820, 821, 822, 823, 824, 827, 828, 829, 831, 835, 836, 839, 844, 845], "origin": [6, 8, 23, 25, 26, 27, 28, 29, 31, 38, 39, 40, 44, 51, 56, 58, 64, 68, 74, 79, 81, 87, 91, 94, 96, 97, 222, 247, 274, 307, 352, 358, 359, 361, 370, 401, 424, 454, 460, 462, 465, 497, 498, 502, 503, 504, 505, 604, 609, 611, 619, 650, 678, 679, 730, 745, 750, 773, 774, 783, 785, 788, 789, 790, 794, 795, 797, 798, 806, 808, 809, 810, 817, 829, 831, 832, 838, 839], "_f": [6, 8, 25], "comp_model": [6, 8, 25], "equival": [6, 8, 25, 56, 79, 91, 92, 120, 228, 241, 262, 263, 276, 277, 361, 445, 473, 601, 604, 609, 652, 655, 658, 666, 773, 808, 809, 815, 820, 822, 824, 832], "just": [6, 8, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 37, 39, 41, 51, 56, 64, 79, 91, 94, 141, 315, 352, 359, 423, 601, 609, 619, 652, 731, 756, 764, 783, 786, 789, 790, 792, 794, 797, 798, 799, 800, 801, 805, 806, 808, 809, 810, 812, 817, 819, 820, 823, 828, 829, 832, 838, 839, 844], "np_imag": [6, 22, 25, 26], "jax_imag": 6, "hk": [6, 8, 25, 39, 43, 783, 822, 832], "rng_kei": [6, 8, 25, 783, 832], "random": [6, 8, 10, 12, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 30, 31, 32, 39, 41, 42, 51, 55, 68, 74, 78, 310, 311, 312, 313, 314, 352, 359, 360, 415, 424, 430, 435, 482, 483, 484, 485, 486, 608, 631, 710, 711, 712, 713, 714, 715, 748, 750, 763, 777, 783, 788, 799, 810, 812, 813, 822, 832, 833, 838], "prngkei": [6, 8, 18, 19, 25, 26, 39, 783, 822, 832], "42": [6, 8, 18, 19, 25, 26, 37, 39, 40, 45, 60, 67, 76, 83, 112, 228, 358, 379, 389, 587, 591, 598, 604, 607, 609, 614, 615, 619, 650, 654, 709, 710, 711, 712, 713, 714, 729, 731, 783, 817, 822, 832], "jax_mlp_forward": 6, "param": [6, 8, 25, 39, 40, 41, 43, 68, 74, 75, 97, 508, 525, 526, 606, 770, 783, 822, 832], "init": [6, 8, 25, 39, 41, 51, 74, 359, 415, 424, 430, 783, 792, 822, 832], "rng": [6, 8, 25, 39, 783, 822, 832], "appli": [6, 8, 22, 25, 26, 39, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 122, 123, 125, 127, 128, 130, 132, 133, 134, 135, 137, 139, 140, 143, 147, 148, 149, 162, 166, 167, 174, 191, 208, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 355, 356, 358, 359, 360, 361, 364, 370, 372, 373, 374, 376, 377, 378, 379, 381, 382, 383, 385, 389, 390, 391, 393, 394, 395, 396, 400, 401, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 417, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 513, 514, 517, 518, 519, 520, 521, 522, 525, 526, 529, 531, 533, 534, 535, 537, 538, 539, 541, 542, 544, 549, 550, 564, 565, 566, 567, 569, 571, 572, 585, 587, 588, 591, 593, 594, 595, 596, 598, 602, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 617, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 649, 650, 652, 654, 655, 656, 657, 659, 663, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 699, 702, 703, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 750, 751, 760, 764, 767, 783, 788, 789, 790, 793, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 812, 813, 815, 819, 820, 821, 822, 823, 831, 832, 839], "both": [6, 7, 8, 10, 12, 20, 22, 25, 26, 30, 31, 38, 40, 47, 50, 51, 52, 55, 56, 70, 73, 74, 75, 78, 79, 120, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 149, 165, 169, 172, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 237, 239, 240, 241, 245, 246, 247, 248, 249, 250, 254, 256, 257, 258, 259, 261, 262, 263, 264, 267, 269, 270, 271, 272, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 301, 316, 321, 322, 324, 325, 327, 331, 336, 352, 355, 358, 359, 361, 365, 370, 376, 377, 378, 379, 381, 382, 383, 389, 394, 395, 396, 401, 411, 455, 461, 471, 482, 496, 499, 525, 529, 531, 533, 542, 572, 596, 597, 601, 602, 604, 606, 607, 608, 609, 611, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 630, 631, 632, 634, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 665, 666, 667, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 709, 716, 717, 719, 720, 721, 722, 723, 724, 725, 728, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 764, 766, 783, 786, 788, 790, 794, 796, 797, 798, 799, 800, 801, 802, 804, 805, 808, 809, 812, 815, 817, 819, 820, 821, 822, 823, 831, 832, 838, 841, 843, 844, 845], "optim": [6, 8, 16, 25, 26, 39, 41, 42, 44, 51, 53, 74, 76, 300, 352, 360, 434, 435, 509, 595, 606, 607, 612, 687, 688, 689, 763, 783, 798, 808, 815, 818, 820, 822, 829, 832, 836, 837, 838, 839, 840, 841, 842, 845], "each": [6, 8, 18, 19, 20, 25, 26, 28, 29, 30, 32, 39, 45, 47, 48, 50, 51, 52, 53, 55, 56, 58, 61, 62, 64, 68, 71, 73, 74, 75, 76, 78, 79, 81, 84, 85, 87, 91, 92, 94, 96, 97, 105, 106, 108, 109, 110, 112, 116, 133, 147, 159, 162, 207, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 239, 240, 241, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 295, 296, 297, 298, 299, 304, 314, 317, 318, 324, 331, 335, 339, 344, 347, 350, 352, 355, 358, 359, 361, 365, 368, 370, 376, 377, 378, 381, 382, 383, 386, 394, 395, 396, 397, 400, 402, 403, 410, 411, 416, 423, 424, 428, 430, 440, 441, 442, 445, 446, 447, 452, 453, 455, 456, 458, 460, 461, 464, 466, 473, 474, 482, 489, 494, 495, 496, 497, 498, 499, 507, 510, 518, 525, 526, 542, 566, 586, 588, 589, 591, 593, 594, 595, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 611, 613, 615, 616, 617, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 638, 639, 640, 643, 644, 645, 649, 651, 652, 653, 655, 657, 658, 659, 664, 673, 677, 679, 680, 682, 684, 686, 696, 703, 710, 719, 721, 722, 724, 730, 731, 738, 748, 750, 764, 767, 768, 769, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 812, 813, 814, 815, 817, 819, 820, 822, 823, 827, 828, 829, 831, 832, 834, 835, 839, 841, 844], "timeit": [6, 8, 18, 25, 26, 42, 44], "06": [6, 41, 48, 60, 73, 76, 95, 104, 159, 216, 232, 358, 379, 389, 593, 598, 602, 607, 713, 743, 745, 812, 820], "m": [6, 7, 8, 25, 38, 40, 42, 44, 47, 51, 56, 60, 73, 74, 79, 83, 96, 133, 139, 140, 141, 261, 315, 316, 352, 358, 359, 360, 361, 365, 380, 410, 415, 416, 418, 431, 442, 452, 453, 467, 482, 483, 484, 485, 486, 601, 609, 613, 615, 638, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 698, 711, 712, 713, 783, 789, 790, 791, 797, 817], "per": [6, 8, 18, 39, 41, 51, 55, 74, 78, 307, 352, 358, 359, 361, 376, 377, 378, 394, 395, 396, 397, 423, 468, 608, 622, 624, 625, 626, 627, 630, 634, 764, 790, 797, 806, 809, 820], "loop": [6, 8, 18, 33, 66, 89, 116, 119, 600, 612, 687, 688, 689, 783, 794, 823, 831], "100": [6, 8, 37, 39, 41, 47, 50, 51, 70, 73, 74, 75, 78, 95, 132, 141, 228, 268, 281, 315, 336, 345, 352, 355, 358, 359, 361, 381, 382, 424, 430, 466, 526, 534, 550, 601, 604, 606, 609, 613, 647, 696, 783, 797, 798, 812, 820, 821, 822, 823, 828, 829, 831], "block_until_readi": 6, "08": [6, 51, 64, 74, 83, 220, 320, 336, 355, 358, 360, 379, 389, 435, 604, 712, 713, 738, 743, 748, 803], "\u00b5": [6, 8, 18], "made": [6, 8, 25, 51, 58, 74, 359, 361, 417, 440, 441, 442, 682, 788, 790, 792, 793, 796, 797, 802, 803, 805, 807, 808, 809, 813, 815, 817, 819, 828, 838], "significantli": [6, 8, 25, 51, 56, 74, 79, 359, 428, 609, 659, 797, 827, 836], "line": [6, 8, 14, 15, 18, 19, 22, 25, 26, 28, 29, 40, 41, 284, 604, 764, 766, 783, 789, 792, 793, 794, 797, 799, 800, 802, 809, 812, 815, 818, 819, 820, 821, 829, 832, 841], "even": [6, 22, 25, 26, 51, 74, 91, 234, 267, 272, 277, 361, 370, 461, 496, 604, 789, 790, 792, 797, 798, 799, 801, 804, 805, 808, 809, 810, 815, 819, 820, 821, 822, 823, 828, 829, 844], "better": [6, 28, 37, 43, 44, 788, 791, 809, 810, 813, 815, 816, 819, 820, 821, 829, 841], "v100": 6, "3x": 6, "increas": [6, 8, 18, 25, 28, 51, 56, 58, 74, 79, 81, 94, 361, 370, 461, 499, 609, 611, 664, 673, 686, 750, 798, 802, 809, 813, 815, 827, 831, 838], "execut": [6, 8, 16, 17, 18, 20, 25, 26, 28, 30, 33, 40, 42, 44, 117, 119, 573, 600, 603, 606, 789, 790, 795, 796, 797, 798, 799, 800, 802, 805, 806, 808, 812, 815, 817, 819, 822, 823, 825, 831, 834, 838, 839, 840, 841, 842, 844], "train2017": [6, 8, 22, 25, 26, 783, 832], "000000283921": [6, 8, 25], "out_torch": [6, 8, 25], "et": [6, 608, 609, 634, 659], "took": [6, 73, 274], "out_jax": [6, 8, 25], "1e": [6, 8, 10, 12, 25, 37, 41, 48, 51, 53, 56, 57, 59, 71, 74, 76, 79, 80, 82, 95, 159, 320, 336, 355, 360, 364, 435, 476, 477, 478, 555, 556, 564, 577, 578, 587, 588, 593, 595, 602, 606, 607, 609, 610, 614, 659, 668, 669, 670, 709, 743, 745, 765, 767, 768, 783, 786, 796, 805, 808, 810, 821, 822], "66m": 6, "53m": 6, "That": [6, 8, 10, 12, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 39, 276, 360, 434, 604, 777, 789, 790, 793, 812, 819, 820, 821, 839], "pretti": [6, 8, 25, 26, 39, 786, 820, 844], "much": [6, 8, 16, 17, 23, 25, 26, 27, 28, 39, 94, 320, 336, 355, 763, 788, 789, 790, 793, 796, 798, 805, 808, 809, 810, 813, 814, 815, 817, 819, 820, 828, 836, 838, 844, 845], "achiev": [6, 8, 25, 783, 797, 798, 805, 806, 812, 815, 820, 822, 825], "solid": [6, 8, 25], "associ": [7, 51, 56, 74, 79, 217, 267, 361, 370, 439, 499, 604, 609, 652, 655, 667, 745, 790, 798, 805, 806, 809, 810, 812, 823], "python": [7, 10, 16, 28, 33, 37, 39, 40, 41, 43, 44, 51, 60, 74, 83, 120, 201, 213, 241, 276, 365, 482, 483, 484, 485, 486, 586, 601, 603, 604, 606, 615, 710, 711, 712, 713, 715, 773, 777, 787, 789, 790, 792, 795, 796, 797, 802, 809, 811, 812, 817, 819, 820, 823, 825, 826, 827, 828, 831, 835, 838, 839, 840, 844, 845], "resnet34_weight": 7, "torch_resnet_34": 7, "resnet_34": 7, "ivy_resnet_34": 7, "comparison": [7, 51, 74, 235, 270, 323, 355, 360, 434, 435, 604, 609, 660, 743, 802], "shown": [7, 23, 25, 66, 68, 89, 251, 274, 324, 355, 604, 788, 789, 790, 792, 795, 797, 798, 800, 802, 803, 804, 809, 810, 812, 813, 814, 817, 819, 823], "8507": 7, "1351": 7, "0069": 7, "85072654": 7, "13506058": 7, "00688287": 7, "resnet50_weight": 7, "torch_resnet_50": 7, "imagenet1k_v2": 7, "resnet_50": 7, "ivy_resnet_50": 7, "3429": 7, "0408": 7, "0121": 7, "34288213": 7, "04077019": 7, "0121203": 7, "depend": [8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 30, 47, 48, 51, 52, 56, 62, 63, 71, 74, 79, 86, 87, 117, 123, 146, 214, 215, 216, 219, 220, 221, 222, 231, 232, 234, 237, 239, 255, 256, 257, 258, 267, 269, 272, 279, 280, 284, 285, 344, 355, 359, 410, 426, 567, 600, 601, 602, 604, 606, 609, 616, 618, 643, 644, 656, 657, 658, 659, 720, 725, 728, 738, 783, 785, 786, 788, 789, 790, 795, 798, 799, 801, 806, 808, 809, 810, 811, 812, 815, 817, 823, 824, 828, 831, 836, 838, 839], "yet": [8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 26, 41, 351, 353, 354, 362, 363, 367, 788, 789, 823, 831, 832, 833], "doc": [8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 40, 41, 74, 141, 315, 321, 322, 352, 355, 498, 601, 783, 784, 787, 788, 791, 800, 801, 803, 804, 812, 817, 820, 821, 831, 832, 833], "autofeatureextractor": [8, 25], "extractor": [8, 10, 12, 25, 41, 783], "hug": [8, 25, 831], "face": [8, 25, 784, 789, 792, 803, 807, 815, 817, 831, 838, 844], "arch_nam": [8, 25], "microsoft": [8, 25, 828, 831, 832, 838, 843, 845], "50": [8, 25, 26, 37, 41, 51, 64, 73, 74, 75, 233, 273, 342, 355, 358, 359, 361, 386, 409, 417, 466, 520, 526, 533, 534, 550, 564, 604, 606, 609, 613, 616, 619, 647, 654, 665, 691, 693, 719, 731, 748, 751, 807, 819, 831, 832], "feature_extractor": [8, 25], "inputs_jax": [8, 25], "last_hidden_st": [8, 25], "jax_forward": [8, 25], "jit_appli": 8, "67": [8, 37, 50, 52, 56, 73, 75, 78, 83, 96, 232, 237, 277, 278, 280, 287, 370, 400, 497, 518, 519, 564, 590, 592, 604, 606, 607, 609, 646, 713], "28": [8, 23, 25, 26, 37, 39, 41, 44, 50, 51, 55, 59, 73, 74, 75, 78, 79, 83, 87, 233, 236, 257, 273, 358, 359, 379, 389, 409, 503, 533, 587, 604, 606, 607, 608, 609, 614, 619, 623, 625, 627, 630, 632, 654, 709, 711, 712, 713, 731, 735, 783], "09": [8, 39, 45, 50, 76, 83, 112, 272, 282, 587, 598, 604, 607, 712], "48": [8, 37, 41, 50, 51, 73, 74, 75, 76, 83, 106, 216, 239, 281, 358, 377, 378, 379, 389, 395, 396, 399, 533, 587, 591, 598, 604, 606, 607, 609, 613, 619, 654, 691, 712, 731], "2x": [8, 25], "build": [9, 13, 14, 16, 23, 25, 26, 29, 30, 31, 32, 37, 39, 44, 62, 68, 97, 617, 721, 722, 723, 724, 764, 765, 766, 783, 784, 789, 791, 797, 798, 805, 807, 816, 818, 821, 822, 823, 825, 828, 832, 836, 838, 840, 843, 844, 845], "timm": [9, 10, 14, 25, 26, 783, 832], "tensorflow": [9, 10, 14, 16, 17, 20, 21, 23, 25, 26, 27, 30, 31, 32, 37, 43, 50, 51, 52, 73, 74, 141, 188, 218, 315, 352, 359, 411, 567, 601, 603, 606, 743, 756, 773, 783, 786, 787, 788, 789, 790, 792, 794, 797, 798, 799, 804, 808, 809, 810, 812, 813, 815, 817, 822, 823, 825, 828, 829, 832, 833, 836, 839, 841, 842, 844, 845], "kera": [9, 10, 12, 14, 15, 23, 25, 26, 42, 43, 761, 783, 829, 832, 844], "seen": [10, 12, 17, 23, 25, 359, 365, 416, 484, 530, 606, 773, 797, 798, 800, 802, 809, 812, 817, 819, 820, 827, 828, 844], "veri": [10, 18, 25, 26, 28, 50, 73, 268, 320, 336, 355, 604, 609, 657, 750, 787, 788, 789, 790, 795, 796, 798, 799, 800, 802, 804, 805, 808, 809, 810, 812, 813, 815, 818, 820, 821, 822, 823, 827, 828, 834, 835, 836, 838, 839, 840, 843, 844, 845], "guid": [10, 23, 783, 784, 788, 789, 790, 795, 803, 809, 811, 844], "focu": [10, 23, 788, 807, 836, 837, 840, 845], "more": [10, 13, 14, 16, 17, 18, 21, 23, 25, 26, 27, 28, 37, 39, 40, 41, 45, 50, 51, 56, 58, 62, 67, 73, 74, 79, 81, 85, 104, 105, 106, 107, 108, 109, 110, 111, 112, 120, 147, 239, 241, 257, 272, 285, 289, 292, 293, 295, 348, 350, 356, 359, 360, 361, 405, 407, 419, 422, 434, 440, 441, 442, 446, 467, 553, 598, 601, 602, 604, 606, 609, 611, 617, 642, 648, 649, 652, 655, 657, 659, 666, 675, 682, 721, 722, 723, 724, 750, 760, 783, 785, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 832, 833, 836, 837, 838, 839, 840, 841, 844, 845], "involv": [10, 13, 14, 21, 23, 48, 71, 174, 217, 234, 241, 267, 272, 602, 604, 784, 791, 797, 798, 800, 810, 815, 822, 828, 838, 844], "develop": [10, 24, 25, 26, 783, 784, 785, 786, 787, 788, 789, 790, 792, 795, 797, 811, 813, 823, 825, 827, 828, 829, 831, 832, 836, 837, 838, 839, 840, 843, 844, 845], "usual": [10, 12, 42, 234, 267, 604, 777, 789, 792, 798, 809, 812, 815], "instead": [10, 12, 16, 25, 32, 39, 44, 50, 51, 56, 73, 74, 79, 92, 188, 276, 304, 352, 358, 370, 394, 395, 396, 496, 499, 603, 604, 609, 652, 748, 788, 789, 790, 792, 795, 797, 798, 800, 801, 802, 804, 805, 806, 808, 809, 810, 812, 815, 817, 819, 820, 823, 831, 832, 833, 836, 838, 844, 845], "own": [10, 12, 16, 25, 26, 31, 764, 766, 783, 789, 792, 797, 798, 801, 802, 808, 809, 813, 817, 823, 825, 828, 829, 834, 837, 838, 843, 844], "directli": [10, 12, 16, 19, 23, 25, 26, 29, 359, 416, 613, 702, 783, 789, 790, 792, 793, 796, 797, 798, 799, 801, 803, 805, 806, 808, 809, 810, 813, 814, 817, 819, 821, 822, 823, 824, 829, 831, 832, 833, 842, 843, 844], "case": [10, 12, 18, 20, 25, 26, 28, 29, 30, 31, 39, 46, 47, 51, 52, 58, 64, 68, 70, 74, 75, 81, 91, 92, 97, 122, 133, 160, 161, 188, 193, 194, 201, 209, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 230, 231, 232, 234, 235, 237, 239, 240, 241, 242, 248, 249, 250, 255, 256, 257, 258, 259, 262, 267, 270, 272, 276, 277, 278, 279, 280, 281, 284, 285, 287, 321, 322, 332, 334, 344, 355, 358, 361, 364, 365, 371, 381, 382, 383, 440, 441, 442, 447, 449, 451, 452, 453, 456, 460, 466, 467, 474, 476, 478, 484, 506, 523, 524, 528, 535, 549, 550, 551, 601, 602, 603, 604, 606, 609, 611, 613, 619, 657, 663, 674, 675, 676, 678, 680, 681, 683, 685, 693, 699, 732, 733, 734, 735, 736, 737, 738, 748, 749, 765, 766, 768, 783, 786, 788, 789, 790, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 812, 813, 815, 817, 819, 821, 822, 823, 828, 831, 832, 833, 837, 841], "mlp": 10, "mixer": 10, "onli": [10, 12, 25, 26, 31, 37, 39, 41, 43, 47, 50, 51, 56, 58, 60, 68, 70, 73, 74, 79, 81, 83, 91, 94, 96, 112, 132, 172, 173, 202, 262, 263, 268, 274, 300, 328, 334, 352, 355, 358, 359, 361, 365, 370, 380, 393, 411, 416, 428, 430, 440, 441, 442, 451, 482, 483, 499, 512, 598, 601, 602, 603, 604, 606, 608, 609, 611, 613, 615, 616, 618, 619, 634, 649, 656, 659, 675, 678, 690, 691, 697, 698, 700, 701, 702, 707, 708, 711, 712, 713, 716, 717, 727, 733, 736, 746, 748, 749, 751, 764, 766, 768, 777, 783, 784, 785, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 804, 805, 807, 808, 809, 810, 812, 813, 814, 815, 817, 819, 820, 821, 822, 823, 827, 831, 832, 837, 838, 839, 844, 845], "retriev": [10, 12, 16, 508, 530, 606, 790, 809], "mlp_encod": [10, 25, 26, 783, 832], "create_model": [10, 25, 26, 783, 832], "mixer_b16_224": [10, 25, 26, 783, 832], "nois": [10, 12, 25, 26, 783, 831, 832], "randn": [10, 12, 25, 26, 783, 832], "tf_mlp_encod": [10, 25, 26], "been": [10, 12, 20, 22, 25, 26, 51, 52, 60, 74, 75, 83, 190, 277, 361, 468, 518, 519, 520, 603, 604, 606, 615, 710, 777, 788, 790, 792, 794, 796, 797, 798, 799, 801, 802, 804, 805, 808, 812, 817, 819, 823, 824, 831, 838, 845], "within": [10, 12, 16, 25, 26, 46, 51, 74, 120, 320, 336, 355, 358, 394, 395, 396, 401, 403, 440, 441, 442, 601, 615, 713, 766, 788, 790, 793, 797, 798, 809, 810, 811, 812, 821, 823, 832, 834, 835, 839], "astyp": [10, 12, 17, 39, 40, 41, 48, 55, 71, 78, 602, 608, 624, 626, 627, 630, 783, 798, 808, 809, 815, 833], "output_torch": [10, 12], "output_tf": [10, 12], "constant": [10, 12, 17, 20, 21, 27, 30, 32, 37, 51, 58, 59, 74, 81, 82, 91, 92, 360, 361, 434, 435, 461, 611, 613, 614, 673, 696, 709, 763, 765, 766, 767, 783, 805, 810, 813, 821, 822, 823, 831, 833], "output_dens": [10, 25, 26, 783], "layer": [10, 12, 16, 22, 23, 25, 26, 37, 42, 51, 59, 74, 82, 614, 633, 634, 709, 761, 762, 763, 765, 766, 767, 768, 769, 783, 801, 809, 813, 815, 817, 818, 821, 827, 832, 836, 838, 842, 845], "dens": [10, 23, 25, 26, 304, 352, 764, 783], "unit": [10, 25, 26, 51, 67, 74, 91, 92, 104, 106, 107, 108, 109, 110, 111, 112, 289, 290, 291, 295, 296, 297, 298, 299, 350, 479, 480, 598, 783, 789, 792, 798, 809, 810, 812, 823, 839, 842], "activ": [10, 23, 25, 26, 51, 52, 55, 66, 74, 78, 89, 104, 105, 106, 107, 108, 109, 110, 111, 112, 289, 290, 291, 295, 296, 297, 298, 299, 567, 608, 634, 637, 763, 764, 783, 789, 790, 798, 803, 813, 814, 821, 832, 838, 841], "mention": [10, 12, 25, 26, 31, 788, 789, 790, 793, 794, 800, 804, 805, 808, 809, 812, 815, 828, 833, 838], "learn": [10, 12, 16, 17, 18, 19, 21, 23, 25, 26, 27, 28, 29, 30, 37, 39, 53, 76, 359, 426, 518, 588, 591, 593, 594, 595, 606, 607, 612, 687, 688, 689, 768, 783, 784, 787, 788, 789, 791, 792, 798, 803, 805, 807, 816, 825, 827, 828, 836, 840, 841, 842, 843, 844, 845], "basic": [10, 12, 16, 19, 23, 25, 26, 29, 32, 361, 468, 783, 784, 788, 800, 812], "fulli": [10, 12, 14, 15, 18, 23, 25, 26, 39, 51, 74, 370, 503, 764, 783, 793, 798, 804, 807, 815, 817, 818, 819, 820, 821, 822, 823, 829, 833, 836, 837, 838, 844, 845], "trainabl": [10, 12, 16, 22, 23, 25, 26, 43, 761, 765, 766, 769, 783, 801, 818, 820, 821, 832, 833], "target": [10, 12, 18, 20, 21, 23, 25, 26, 28, 29, 30, 31, 32, 41, 51, 74, 189, 360, 431, 432, 433, 434, 435, 436, 437, 603, 743, 764, 766, 772, 783, 786, 789, 791, 794, 803, 810, 811, 816, 820, 821, 822, 832, 833, 834, 836, 837, 838, 841, 843, 844], "fine": [10, 12, 25, 26, 789, 790, 798, 800, 809, 819, 822, 844], "tune": [10, 12, 25, 26, 843, 844], "train": [10, 12, 23, 25, 26, 42, 51, 53, 55, 74, 76, 78, 94, 358, 359, 364, 381, 382, 383, 427, 476, 478, 587, 588, 593, 607, 608, 631, 634, 637, 763, 764, 765, 766, 767, 783, 796, 799, 805, 820, 821, 822, 823, 829, 832, 836, 837, 842, 844, 845], "ground": [10, 12, 360, 431, 743, 745, 756, 786, 809, 812, 827], "ret": [10, 12, 25, 26, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 368, 370, 371, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 389, 390, 391, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 412, 417, 420, 422, 425, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 549, 550, 554, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 696, 697, 698, 699, 700, 701, 702, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 745, 748, 749, 750, 751, 761, 762, 766, 768, 773, 779, 783, 798, 799, 801, 802, 807, 808, 809, 810, 813, 817, 822, 832], "op": [10, 16, 37, 760, 773, 813, 817, 823], "eagertensor": [10, 16, 37, 773, 810], "readi": [10, 12, 17, 18, 19, 27, 28, 29, 30, 31, 32, 39, 41, 788, 789], "explor": [10, 12, 16, 20, 21, 22, 25, 26, 31, 32, 33, 788, 789, 790, 798, 815, 818, 822, 838, 841], "deepmind": [11, 829], "perceiverio": [11, 829], "backbon": [11, 39, 783, 817, 820], "TO": [11, 13, 24], "replac": [11, 13, 24, 40, 50, 51, 52, 58, 60, 68, 73, 74, 75, 81, 83, 126, 268, 301, 352, 361, 466, 549, 550, 554, 601, 604, 606, 611, 615, 671, 710, 748, 790, 795, 796, 798, 799, 806, 809, 812, 819, 822, 823, 828, 832, 845], "efficientnet": 12, "include_top": [12, 783], "eff_encod": [12, 783], "applic": [12, 14, 39, 41, 44, 51, 55, 74, 78, 94, 359, 430, 608, 609, 613, 619, 634, 637, 663, 696, 697, 698, 702, 703, 735, 737, 783, 789, 797, 798, 799, 806, 821, 835, 836, 838, 840, 842, 844], "efficientnet_v2": [12, 783], "efficientnetv2b0": [12, 783], "data": [12, 22, 26, 31, 39, 41, 44, 45, 47, 50, 51, 52, 55, 56, 58, 60, 61, 62, 63, 64, 65, 67, 68, 70, 73, 74, 75, 78, 79, 81, 83, 84, 85, 86, 87, 88, 96, 97, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 151, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 180, 186, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 237, 239, 240, 241, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 267, 269, 270, 271, 272, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 292, 293, 294, 295, 300, 301, 302, 303, 304, 305, 306, 316, 317, 318, 319, 321, 322, 323, 339, 344, 350, 352, 355, 358, 359, 361, 365, 369, 370, 381, 382, 383, 399, 401, 408, 410, 428, 444, 466, 469, 471, 482, 483, 484, 485, 486, 492, 496, 497, 498, 502, 504, 505, 522, 535, 537, 538, 541, 567, 598, 601, 603, 604, 606, 608, 609, 611, 613, 615, 616, 618, 619, 620, 621, 622, 624, 625, 626, 628, 629, 631, 632, 638, 639, 640, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 665, 666, 672, 675, 676, 678, 679, 681, 682, 686, 694, 711, 712, 713, 715, 716, 717, 719, 720, 725, 727, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 745, 746, 748, 749, 750, 751, 756, 760, 763, 764, 766, 770, 783, 789, 791, 792, 793, 794, 795, 796, 799, 801, 804, 805, 806, 808, 810, 813, 815, 817, 819, 825, 826, 828, 838, 839, 840, 842, 843, 844], "storag": [12, 39, 40, 820, 828], "googleapi": [12, 39, 40], "efficientnetv2": 12, "b0_notop": 12, "h5": [12, 68], "24274472": 12, "0u": 12, "paramet": [12, 23, 25, 26, 39, 41, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 200, 201, 202, 203, 205, 206, 207, 208, 209, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 368, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 389, 390, 391, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 533, 534, 535, 537, 538, 539, 540, 541, 542, 544, 545, 546, 549, 550, 553, 554, 555, 556, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 745, 748, 749, 750, 751, 756, 761, 762, 763, 764, 765, 766, 767, 768, 769, 773, 774, 777, 779, 783, 788, 793, 801, 802, 804, 809, 810, 812, 813, 817, 819, 820, 831, 832, 833, 839], "torch_eff_encod": [12, 783], "fc": [12, 39, 783, 821, 832], "1280": [12, 518, 606, 783], "state": [13, 24, 39, 55, 78, 94, 181, 182, 183, 184, 185, 267, 574, 576, 579, 581, 582, 602, 604, 606, 608, 633, 746, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 783, 786, 789, 795, 798, 799, 801, 802, 803, 804, 809, 812, 816, 817, 818, 820, 828, 832, 844, 845], "api": [13, 18, 23, 24, 28, 41, 43, 50, 51, 56, 73, 74, 120, 121, 122, 124, 125, 126, 127, 129, 130, 131, 133, 136, 137, 138, 139, 140, 142, 143, 149, 159, 162, 172, 174, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 237, 239, 240, 241, 245, 246, 247, 248, 249, 250, 254, 256, 257, 258, 259, 261, 262, 263, 264, 267, 269, 270, 271, 272, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 321, 322, 324, 355, 358, 370, 401, 496, 601, 602, 604, 609, 611, 616, 617, 618, 619, 620, 638, 639, 640, 641, 642, 644, 645, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 666, 672, 674, 675, 676, 678, 679, 681, 682, 686, 716, 717, 719, 720, 721, 722, 723, 724, 725, 728, 732, 733, 734, 735, 736, 737, 738, 739, 740, 783, 786, 789, 790, 791, 793, 795, 798, 799, 800, 801, 802, 804, 806, 808, 809, 810, 812, 815, 816, 818, 820, 823, 825, 826, 827, 834, 836, 838, 840, 843, 845], "welcom": [14, 40, 783, 784, 789, 790, 811], "goal": [14, 39, 241, 604, 783, 788, 828, 838, 844], "provid": [14, 16, 20, 23, 25, 26, 30, 31, 37, 43, 47, 51, 52, 56, 58, 61, 64, 65, 68, 70, 74, 75, 79, 81, 84, 87, 88, 116, 133, 135, 152, 153, 154, 155, 156, 164, 174, 186, 190, 286, 358, 359, 361, 364, 370, 401, 404, 409, 413, 424, 425, 429, 430, 445, 447, 456, 474, 476, 478, 505, 517, 549, 550, 600, 601, 602, 603, 604, 606, 608, 609, 611, 613, 616, 619, 620, 634, 651, 654, 665, 674, 675, 682, 694, 716, 736, 738, 739, 740, 749, 764, 768, 773, 774, 783, 788, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 812, 813, 815, 819, 821, 823, 827, 831, 832, 833, 836, 837, 838, 839, 840, 841, 842, 845], "experi": [14, 41, 789, 802, 812, 818, 820, 823], "varieti": [14, 792, 797, 798, 799, 812, 814, 834, 836, 840, 841, 844, 845], "organ": [14, 793, 796, 805, 809, 811, 813, 825, 828], "main": [14, 26, 47, 51, 56, 74, 79, 126, 139, 140, 141, 301, 315, 316, 352, 359, 361, 408, 450, 601, 609, 641, 642, 663, 783, 788, 789, 790, 792, 795, 796, 806, 808, 836, 838, 839, 844], "find": [14, 40, 41, 44, 56, 62, 68, 79, 609, 613, 617, 652, 692, 721, 722, 723, 724, 777, 783, 784, 785, 787, 788, 789, 790, 792, 795, 797, 807, 812, 815, 817, 820, 824, 825, 827, 831], "exactli": [14, 18, 28, 37, 38, 42, 284, 604, 796, 797, 798, 799, 800, 802, 812, 815, 827, 829], "rush": [14, 829], "jump": [14, 810], "straight": [14, 783, 797, 809, 812, 819], "quickstart": 14, "introduct": [14, 16, 23, 25, 26, 838], "capabl": [14, 22, 26, 812, 815], "point": [14, 23, 48, 50, 51, 56, 60, 62, 64, 71, 73, 74, 79, 83, 87, 120, 121, 122, 124, 126, 129, 136, 137, 142, 146, 159, 163, 167, 174, 214, 215, 216, 217, 219, 220, 221, 222, 223, 230, 231, 232, 234, 235, 237, 239, 240, 241, 247, 248, 249, 250, 255, 256, 257, 258, 259, 267, 269, 270, 272, 274, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 300, 301, 303, 321, 322, 338, 339, 342, 344, 352, 355, 358, 359, 360, 365, 370, 381, 382, 383, 401, 410, 428, 431, 482, 483, 484, 485, 486, 496, 497, 498, 505, 599, 601, 602, 604, 609, 615, 616, 617, 618, 619, 638, 640, 643, 644, 645, 647, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 663, 666, 712, 713, 719, 721, 722, 723, 724, 727, 729, 730, 732, 733, 734, 735, 736, 737, 738, 773, 774, 783, 786, 788, 789, 790, 792, 793, 794, 795, 797, 798, 800, 801, 804, 808, 809, 812, 813, 815, 817, 819, 820, 829, 831, 844], "those": [14, 38, 39, 56, 58, 68, 74, 79, 81, 120, 173, 234, 267, 469, 586, 601, 602, 604, 606, 609, 611, 613, 616, 656, 659, 671, 692, 719, 788, 789, 790, 793, 796, 797, 798, 806, 808, 809, 810, 812, 815, 827, 835], "who": [14, 791, 802, 816, 823, 838, 840], "dive": [14, 16, 25, 37, 784, 785, 787, 788, 790, 792, 796, 798, 803, 810, 816, 819, 820, 823, 844], "deeper": [14, 16, 26, 46, 613, 701, 702, 790, 791, 812, 816, 827], "project": [14, 19, 25, 26, 29, 92, 608, 634, 764, 783, 785, 788, 789, 790, 793, 794, 795, 812, 821, 823, 827, 828, 829, 832, 834, 836, 838, 841, 845], "showcas": [14, 783], "real": [14, 22, 50, 51, 64, 73, 74, 87, 96, 106, 109, 112, 136, 137, 214, 215, 216, 217, 219, 220, 221, 222, 223, 232, 234, 235, 237, 239, 241, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 264, 267, 269, 270, 272, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 321, 322, 328, 329, 339, 355, 358, 359, 380, 401, 402, 410, 411, 598, 601, 604, 609, 616, 619, 643, 644, 645, 650, 657, 659, 660, 663, 666, 719, 732, 734, 735, 736, 737, 796, 840], "world": [14, 22, 790, 840], "whether": [14, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 92, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 119, 121, 122, 128, 130, 135, 137, 143, 146, 147, 149, 152, 153, 154, 155, 156, 157, 160, 161, 162, 164, 165, 166, 167, 169, 170, 171, 172, 174, 186, 190, 191, 193, 194, 196, 198, 201, 202, 204, 207, 208, 210, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 295, 296, 297, 298, 299, 301, 316, 320, 321, 322, 323, 324, 326, 328, 335, 336, 342, 344, 346, 347, 348, 352, 355, 358, 359, 360, 361, 370, 376, 377, 378, 380, 381, 382, 383, 399, 401, 404, 419, 425, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 445, 446, 447, 449, 451, 452, 453, 456, 460, 467, 469, 470, 474, 476, 478, 479, 480, 481, 483, 496, 497, 498, 499, 507, 510, 511, 513, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 545, 549, 550, 551, 552, 554, 557, 558, 560, 561, 563, 564, 565, 567, 569, 571, 572, 579, 580, 583, 585, 588, 589, 591, 593, 594, 595, 596, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 615, 619, 620, 622, 623, 624, 625, 631, 632, 634, 637, 638, 639, 644, 645, 646, 647, 648, 649, 650, 652, 654, 656, 657, 658, 663, 668, 669, 670, 671, 674, 675, 676, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 696, 697, 698, 700, 701, 702, 703, 707, 708, 710, 711, 712, 713, 715, 718, 721, 722, 723, 724, 725, 729, 730, 733, 735, 736, 738, 739, 740, 743, 745, 748, 760, 761, 764, 765, 766, 767, 768, 777, 783, 784, 788, 789, 793, 796, 798, 800, 804, 808, 809, 812, 814, 815, 831, 832], "re": [14, 17, 18, 19, 25, 26, 27, 28, 29, 30, 31, 32, 39, 41, 42, 44, 51, 52, 61, 74, 84, 94, 207, 307, 352, 359, 361, 429, 462, 463, 518, 603, 606, 609, 611, 616, 661, 679, 718, 720, 764, 766, 784, 785, 788, 789, 790, 791, 792, 795, 798, 807, 808, 809, 810, 811, 813, 815, 819, 822, 823, 826, 827, 828, 838], "beginn": [14, 784, 838], "advanc": [14, 37, 789, 837], "user": [14, 25, 40, 41, 43, 268, 285, 361, 461, 553, 604, 606, 762, 764, 765, 766, 777, 783, 789, 790, 791, 793, 794, 796, 797, 798, 799, 802, 806, 807, 808, 809, 812, 814, 815, 816, 817, 823, 824, 827, 828, 836, 838, 844, 845], "got": [14, 37, 802], "cover": [14, 25, 51, 74, 358, 394, 395, 396, 788, 792, 793, 795, 798, 800, 801, 805, 806, 812, 815, 816], "write": [14, 15, 25, 26, 37, 41, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 91, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 142, 143, 146, 148, 208, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 316, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 335, 337, 338, 339, 340, 343, 344, 345, 350, 352, 355, 358, 359, 360, 361, 364, 365, 366, 368, 370, 371, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 389, 390, 391, 393, 394, 395, 396, 399, 401, 402, 404, 405, 407, 408, 416, 417, 420, 421, 422, 423, 429, 431, 432, 433, 434, 436, 437, 445, 446, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 462, 463, 464, 465, 467, 468, 469, 470, 472, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 513, 514, 518, 519, 520, 525, 526, 535, 549, 550, 587, 588, 591, 593, 594, 595, 596, 598, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 658, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 686, 709, 710, 711, 712, 713, 715, 717, 718, 720, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 746, 783, 787, 788, 790, 791, 792, 794, 795, 797, 798, 800, 801, 802, 805, 808, 810, 813, 817, 819, 822, 829, 838, 845], "familiar": [14, 15, 16, 783, 788, 789], "concept": [14, 15, 16], "agnost": [14, 15, 16, 17, 25, 26, 27, 31, 37, 783, 793, 798, 804, 817, 819, 822, 823, 844, 845], "unifi": [14, 15, 16, 18, 19, 25, 28, 29, 33, 40, 68, 207, 603, 791, 792, 793, 798, 802, 806, 807, 809, 815, 817, 823, 826, 828, 830, 832, 834, 835, 836, 838, 842, 845], "alongsid": [14, 15, 16, 17, 27, 608, 634, 828], "turn": [14, 15, 18, 28, 55, 78, 91, 92, 381, 382, 383, 608, 631, 764, 789, 795, 796, 799, 800, 809, 812, 829], "remov": [14, 15, 18, 25, 26, 28, 56, 68, 79, 609, 611, 612, 613, 642, 649, 663, 681, 687, 688, 704, 780, 783, 788, 794, 795, 797, 798, 801, 805, 811, 812, 815, 822, 831, 832, 838], "wrapper": [14, 15, 18, 756, 793, 795, 796, 798, 802, 805, 808, 809, 819, 825, 834, 838], "unus": [14, 15, 18, 800, 808], "part": [14, 15, 18, 47, 50, 51, 73, 74, 79, 96, 106, 109, 112, 139, 140, 141, 247, 251, 274, 315, 316, 340, 352, 355, 358, 359, 361, 370, 401, 411, 461, 505, 598, 601, 604, 609, 644, 645, 745, 765, 766, 783, 788, 789, 790, 792, 795, 798, 803, 805, 808, 809, 812, 813, 815, 817, 818, 822, 823, 831, 832, 833, 836, 838, 843, 844, 845], "lazi": [14, 15, 18, 21, 28, 31, 32, 43], "eager": [14, 15, 18, 21, 23, 28, 31, 32, 43, 796, 823, 838], "understand": [14, 15, 16, 20, 37, 43, 786, 787, 788, 789, 790, 791, 792, 795, 800, 801, 804, 810, 811, 816, 829, 834, 844], "between": [14, 15, 20, 30, 31, 32, 37, 50, 51, 52, 55, 56, 57, 58, 62, 68, 73, 74, 78, 79, 80, 81, 97, 120, 159, 222, 235, 270, 286, 320, 336, 338, 355, 358, 359, 360, 361, 370, 381, 382, 383, 394, 395, 396, 403, 409, 413, 431, 432, 433, 434, 435, 436, 437, 461, 505, 601, 602, 604, 608, 610, 611, 613, 615, 617, 631, 654, 668, 669, 670, 674, 682, 696, 711, 722, 723, 724, 749, 756, 768, 783, 793, 794, 798, 800, 804, 805, 806, 808, 809, 810, 811, 812, 815, 816, 818, 819, 820, 822, 827, 831, 832, 834, 835, 837, 838, 839, 844], "decor": [14, 15, 20, 31, 43, 512, 606, 748, 750, 756, 786, 792, 793, 796, 798, 799, 805, 808, 809, 810, 815], "wai": [14, 15, 16, 19, 21, 25, 29, 31, 37, 91, 94, 783, 785, 787, 789, 792, 793, 794, 795, 797, 798, 799, 808, 809, 810, 812, 815, 819, 820, 821, 822, 823, 824, 827, 828, 833, 840, 844, 845], "kornia": [14, 15, 22, 25, 26, 39, 43, 783, 832], "video": [16, 17, 18, 19, 20, 21, 22, 26, 783, 784, 789, 790, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 815, 824, 836], "tutori": [16, 17, 18, 19, 20, 21, 22, 23, 26, 783, 790, 809, 824], "roundup": 16, "over": [16, 23, 26, 28, 39, 51, 56, 64, 65, 66, 71, 74, 78, 79, 87, 88, 89, 91, 116, 308, 309, 321, 322, 334, 341, 352, 355, 358, 359, 361, 368, 370, 372, 373, 374, 377, 386, 391, 395, 399, 400, 401, 402, 403, 423, 439, 451, 466, 469, 489, 499, 504, 553, 586, 600, 606, 609, 614, 615, 619, 620, 639, 650, 661, 663, 665, 666, 709, 713, 732, 733, 734, 735, 736, 737, 738, 739, 740, 764, 767, 773, 777, 783, 789, 790, 794, 800, 801, 807, 808, 810, 813, 817, 819, 823, 827, 829, 836, 838], "indep": [16, 25], "futur": [16, 25, 39, 609, 644, 645, 783, 789, 790, 797, 798, 812, 813, 815, 819, 823, 827, 829, 844], "proof": [16, 25], "delv": [16, 26, 783], "theori": [16, 785, 795], "deep": [16, 23, 25, 37, 68, 518, 606, 783, 784, 785, 787, 788, 790, 792, 795, 796, 798, 803, 807, 810, 816, 819, 820, 827, 836, 838, 841, 842, 844, 845], "esenti": [16, 25], "abstract": [16, 25, 26, 763, 768, 783, 796, 798, 808, 809, 812, 815, 821, 827, 836, 838, 840, 841, 845], "multipl": [16, 25, 50, 51, 56, 59, 64, 65, 68, 73, 74, 75, 76, 79, 81, 82, 87, 88, 128, 228, 252, 259, 265, 266, 267, 269, 321, 322, 355, 358, 359, 361, 368, 379, 386, 389, 391, 422, 447, 456, 474, 489, 507, 545, 587, 588, 591, 593, 594, 595, 596, 601, 604, 606, 607, 608, 609, 611, 614, 616, 619, 620, 623, 624, 625, 626, 638, 647, 649, 650, 671, 674, 679, 680, 709, 716, 717, 732, 733, 734, 735, 736, 737, 738, 739, 740, 764, 783, 788, 790, 793, 794, 796, 800, 802, 803, 805, 808, 809, 810, 812, 815, 817, 823, 829, 831, 836, 837, 838, 845], "specif": [16, 17, 22, 23, 25, 26, 27, 29, 31, 39, 49, 51, 52, 72, 74, 75, 174, 205, 208, 241, 262, 263, 272, 321, 322, 355, 365, 486, 518, 519, 520, 546, 602, 603, 604, 606, 609, 611, 612, 615, 618, 619, 644, 645, 661, 682, 687, 688, 689, 710, 727, 732, 733, 734, 736, 743, 745, 765, 766, 773, 774, 779, 783, 786, 788, 789, 790, 792, 793, 794, 795, 796, 798, 799, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 815, 817, 818, 819, 821, 822, 823, 824, 825, 827, 831, 832, 833, 834, 836, 837, 839, 840, 841, 845], "quirk": [16, 25], "perk": [16, 25, 783, 793, 796], "manag": [16, 23, 25, 553, 576, 606, 783, 784, 794, 798, 799, 808, 811, 823, 829, 840, 842], "under": [16, 25, 26, 51, 360, 434, 435, 777, 783, 788, 789, 791, 792, 799, 800, 801, 803, 809, 810, 812, 815, 816, 817, 820, 822, 823, 831, 832, 838, 841, 845], "hood": [16, 25, 26, 783, 791, 799, 800, 803, 809, 812, 815, 816, 817, 820, 822, 831, 832, 845], "simpli": [16, 25, 26, 28, 37, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 122, 123, 125, 127, 128, 130, 132, 133, 134, 135, 137, 139, 140, 143, 147, 148, 149, 162, 166, 167, 174, 191, 208, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 358, 361, 370, 376, 377, 378, 379, 381, 382, 383, 385, 389, 390, 391, 394, 395, 396, 400, 401, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 417, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 513, 514, 517, 518, 519, 520, 521, 522, 525, 526, 529, 531, 533, 535, 537, 538, 539, 541, 542, 544, 549, 550, 564, 565, 566, 567, 569, 571, 572, 585, 587, 588, 591, 593, 594, 595, 596, 604, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 649, 650, 655, 656, 657, 659, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 783, 788, 789, 790, 793, 794, 795, 797, 798, 799, 800, 801, 804, 805, 808, 809, 810, 812, 815, 817, 821, 822, 823, 825, 839, 844], "appropi": 16, "string": [16, 25, 26, 41, 51, 52, 55, 68, 74, 78, 144, 145, 157, 164, 186, 187, 188, 189, 190, 192, 201, 208, 209, 213, 358, 359, 361, 400, 403, 411, 461, 471, 498, 516, 602, 603, 606, 608, 609, 621, 622, 623, 624, 626, 628, 630, 645, 743, 745, 749, 762, 764, 766, 777, 794, 795, 797, 798, 799, 802, 809, 817, 820], "simplest": [16, 789, 800, 812, 815], "interact": [16, 25, 40, 43, 788, 837, 838, 843], "submodul": [16, 25, 39, 41, 96, 97, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 760, 761, 762, 763, 764, 766, 767, 768, 769, 788, 789, 790, 792, 795, 797, 799, 805, 806, 812, 816, 817, 821, 825], "track": [16, 25, 26, 38, 39, 530, 606, 762, 765, 766, 789, 790, 792, 807, 808, 831, 838], "current": [16, 25, 26, 39, 40, 51, 52, 68, 74, 97, 116, 160, 161, 164, 181, 182, 183, 184, 185, 186, 192, 193, 194, 195, 200, 202, 359, 361, 409, 410, 461, 523, 524, 527, 530, 532, 536, 547, 548, 567, 600, 602, 603, 606, 609, 613, 643, 690, 700, 701, 745, 749, 762, 766, 773, 774, 780, 783, 785, 788, 789, 790, 792, 794, 796, 797, 798, 799, 802, 803, 805, 808, 809, 810, 811, 812, 815, 817, 822, 823, 829, 831, 838, 844, 845], "object": [16, 21, 23, 25, 39, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 100, 101, 123, 127, 128, 138, 150, 159, 162, 170, 173, 208, 266, 483, 530, 589, 601, 602, 603, 606, 607, 613, 615, 693, 694, 695, 697, 698, 699, 705, 706, 707, 708, 715, 743, 745, 746, 753, 754, 755, 761, 764, 765, 766, 773, 777, 783, 793, 794, 796, 797, 805, 806, 809, 810, 812, 815, 819, 822, 830, 831, 832, 833, 838, 844], "ones": [16, 23, 25, 37, 43, 47, 51, 53, 55, 60, 68, 70, 74, 78, 83, 126, 130, 135, 137, 143, 193, 194, 230, 301, 352, 370, 504, 587, 601, 603, 604, 607, 608, 626, 627, 711, 712, 713, 749, 783, 788, 793, 797, 800, 804, 805, 811, 812, 819, 820, 838], "likewis": [16, 21, 25, 32, 783, 790, 796, 798, 801, 804, 805, 809, 815, 820, 831, 832, 844], "nativearrai": [16, 25, 26, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 62, 64, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 96, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 117, 119, 121, 122, 123, 125, 130, 131, 132, 133, 134, 135, 137, 139, 140, 143, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 159, 162, 165, 166, 167, 169, 171, 173, 174, 180, 190, 191, 207, 208, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 301, 302, 305, 306, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 352, 355, 356, 358, 359, 360, 361, 364, 365, 366, 368, 370, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 389, 390, 391, 393, 394, 395, 396, 397, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 496, 497, 498, 499, 500, 507, 510, 511, 513, 514, 518, 519, 520, 522, 525, 526, 527, 528, 529, 531, 533, 534, 535, 538, 541, 542, 544, 549, 550, 551, 554, 563, 564, 565, 566, 567, 569, 571, 572, 574, 585, 587, 588, 589, 591, 593, 594, 595, 596, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 691, 692, 693, 697, 698, 699, 702, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 769, 793, 796, 800, 802, 804, 805, 806, 808, 809, 813, 814, 817, 819, 825], "alia": [16, 25, 321, 322, 355, 599, 788, 809, 830, 833], "select": [16, 25, 30, 43, 51, 64, 74, 87, 359, 361, 370, 411, 422, 469, 497, 498, 619, 729, 730, 788, 789, 790, 797, 808, 812, 817, 819, 822, 823, 838, 841, 842], "lastli": [16, 25, 793], "contain": [16, 25, 26, 40, 45, 46, 47, 48, 50, 51, 52, 55, 56, 57, 58, 61, 62, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 149, 157, 159, 160, 161, 162, 165, 166, 167, 169, 171, 174, 191, 193, 194, 195, 200, 208, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 355, 357, 358, 359, 360, 361, 364, 370, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 389, 390, 391, 393, 394, 395, 396, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 518, 519, 520, 521, 522, 523, 524, 525, 526, 529, 530, 531, 533, 534, 535, 537, 538, 539, 541, 542, 544, 549, 550, 554, 557, 559, 564, 565, 566, 567, 569, 571, 572, 579, 585, 586, 587, 588, 589, 591, 593, 594, 595, 596, 598, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 697, 698, 699, 702, 703, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 745, 748, 755, 756, 762, 764, 765, 766, 768, 769, 773, 777, 783, 785, 786, 788, 789, 791, 792, 793, 794, 795, 797, 798, 800, 801, 804, 805, 806, 807, 808, 810, 812, 814, 815, 816, 817, 818, 821, 823, 824, 825, 827, 831, 838, 839, 844], "subclass": [16, 25, 26, 806, 809, 815, 832], "dict": [16, 25, 26, 39, 43, 46, 52, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 117, 119, 128, 130, 135, 137, 143, 147, 149, 160, 161, 162, 166, 167, 174, 190, 193, 194, 208, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 294, 295, 296, 297, 298, 299, 301, 312, 320, 321, 322, 323, 324, 326, 328, 335, 336, 342, 344, 346, 347, 348, 352, 361, 380, 381, 382, 383, 401, 431, 432, 433, 434, 435, 436, 437, 440, 441, 442, 445, 446, 461, 467, 469, 470, 476, 478, 479, 480, 481, 483, 496, 497, 498, 499, 507, 508, 510, 511, 513, 514, 518, 519, 520, 521, 522, 523, 524, 525, 526, 529, 531, 533, 534, 535, 537, 538, 541, 545, 549, 550, 564, 565, 567, 569, 571, 572, 585, 596, 600, 602, 603, 606, 613, 622, 623, 624, 625, 631, 632, 637, 638, 639, 644, 645, 646, 647, 649, 650, 652, 654, 656, 657, 663, 668, 669, 670, 671, 675, 678, 679, 680, 681, 682, 685, 686, 690, 691, 693, 696, 697, 698, 699, 701, 702, 703, 707, 708, 710, 711, 712, 713, 715, 718, 721, 722, 723, 724, 725, 729, 730, 733, 735, 736, 738, 739, 740, 745, 746, 761, 764, 766, 773, 793, 796, 820, 821, 825, 831, 832, 833], "recurs": [16, 25, 26, 39, 41, 46, 68, 69, 160, 161, 193, 194, 359, 427, 523, 524, 530, 602, 603, 606, 613, 690, 691, 694, 700, 701, 702, 743, 789, 792, 795, 796, 805, 808, 821, 823], "oper": [16, 17, 22, 25, 26, 27, 31, 38, 41, 47, 48, 50, 51, 52, 55, 68, 70, 71, 73, 74, 75, 78, 97, 112, 131, 132, 174, 204, 212, 217, 219, 228, 231, 234, 241, 256, 258, 267, 268, 272, 276, 279, 284, 294, 317, 318, 349, 350, 352, 357, 358, 361, 372, 373, 374, 376, 377, 378, 384, 385, 386, 390, 394, 395, 396, 397, 399, 400, 402, 403, 404, 466, 468, 511, 518, 519, 520, 567, 598, 601, 602, 603, 604, 606, 608, 609, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 634, 661, 663, 735, 737, 748, 751, 764, 783, 788, 789, 791, 792, 793, 796, 798, 799, 800, 801, 802, 805, 808, 809, 812, 815, 817, 820, 821, 825, 827, 831, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845], "fashion": [16, 750, 812, 832], "native_arrai": [16, 25, 26, 47, 48, 50, 70, 72, 73, 74, 75, 79, 86, 104, 107, 130, 133, 135, 137, 143, 146, 147, 148, 149, 157, 162, 169, 191, 200, 208, 224, 228, 233, 234, 235, 237, 241, 245, 253, 254, 262, 267, 270, 273, 276, 281, 321, 322, 348, 355, 360, 361, 436, 461, 467, 470, 507, 510, 537, 538, 541, 571, 598, 601, 602, 603, 604, 606, 608, 609, 610, 611, 615, 616, 619, 620, 622, 623, 630, 637, 640, 644, 645, 651, 652, 656, 660, 661, 663, 666, 668, 670, 671, 678, 710, 719, 728, 734, 737, 739, 745, 755, 773, 786, 810, 812], "data_class": [16, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 377, 378, 518, 522, 659, 684], "doe": [16, 25, 38, 40, 50, 51, 52, 58, 68, 73, 74, 81, 91, 141, 268, 270, 278, 315, 352, 359, 360, 370, 371, 410, 434, 435, 502, 503, 506, 535, 601, 604, 606, 609, 611, 643, 680, 743, 786, 788, 790, 791, 794, 797, 798, 800, 801, 803, 804, 805, 808, 809, 810, 812, 815, 817, 819, 820, 823, 825, 828, 831, 834, 838, 839, 845], "implement": [16, 17, 25, 27, 31, 39, 42, 48, 49, 51, 62, 63, 71, 72, 74, 79, 86, 91, 146, 160, 161, 174, 193, 194, 208, 214, 215, 216, 219, 220, 221, 222, 231, 232, 234, 237, 239, 241, 255, 256, 257, 258, 267, 269, 272, 276, 279, 280, 284, 285, 321, 322, 344, 355, 359, 370, 409, 410, 502, 503, 523, 524, 602, 603, 604, 606, 608, 609, 617, 618, 619, 634, 643, 644, 645, 654, 663, 721, 722, 723, 724, 725, 728, 732, 733, 734, 735, 736, 737, 749, 751, 764, 766, 773, 783, 786, 788, 791, 792, 793, 794, 796, 798, 799, 801, 802, 804, 805, 806, 808, 810, 812, 813, 815, 817, 819, 820, 821, 822, 823, 825, 835, 836, 837, 838, 841, 844, 845], "low": [16, 25, 28, 44, 51, 55, 60, 74, 78, 83, 358, 400, 403, 608, 615, 621, 622, 623, 624, 626, 628, 630, 711, 713, 750, 796, 802, 808, 809, 815, 817, 834, 836, 838, 839, 840, 842, 844], "level": [16, 25, 26, 28, 51, 74, 75, 359, 427, 510, 762, 783, 784, 788, 789, 790, 796, 798, 802, 805, 807, 808, 809, 811, 814, 815, 816, 817, 820, 821, 822, 823, 825, 829, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845], "c": [16, 25, 31, 40, 41, 47, 51, 52, 53, 55, 58, 64, 70, 71, 73, 74, 75, 76, 78, 79, 81, 85, 87, 91, 92, 110, 121, 122, 132, 135, 159, 162, 217, 228, 234, 235, 255, 256, 258, 267, 270, 278, 285, 358, 359, 361, 364, 370, 372, 373, 374, 385, 390, 405, 407, 409, 410, 412, 422, 440, 441, 442, 451, 476, 477, 478, 498, 510, 518, 519, 520, 521, 529, 533, 534, 572, 587, 588, 591, 593, 594, 595, 598, 601, 602, 604, 606, 607, 608, 609, 611, 613, 616, 617, 619, 622, 623, 624, 625, 626, 627, 643, 645, 647, 678, 682, 690, 693, 697, 698, 699, 701, 702, 707, 708, 719, 724, 730, 731, 736, 738, 767, 777, 784, 789, 791, 794, 795, 796, 800, 805, 807, 816, 817, 818, 820, 823, 825, 826, 828, 829, 832, 834, 838, 842, 843, 845], "wrap": [16, 18, 25, 26, 28, 39, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 96, 97, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 122, 123, 125, 127, 128, 130, 132, 133, 134, 135, 137, 139, 140, 143, 147, 148, 149, 162, 166, 167, 174, 191, 208, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 358, 361, 370, 376, 377, 378, 379, 381, 382, 383, 385, 389, 390, 391, 394, 395, 396, 400, 401, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 417, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 512, 513, 514, 517, 518, 519, 520, 521, 522, 525, 526, 529, 531, 533, 534, 535, 537, 538, 539, 541, 542, 544, 549, 550, 561, 564, 565, 566, 567, 569, 571, 572, 583, 585, 587, 588, 591, 593, 594, 595, 596, 606, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 649, 650, 655, 656, 657, 659, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 745, 783, 791, 792, 793, 794, 796, 797, 798, 799, 801, 802, 804, 805, 808, 809, 812, 817, 819, 822, 823, 825, 831, 832, 834, 838, 839, 844, 845], "fundament": [16, 25, 797, 809, 815, 817, 827, 838], "common": [16, 19, 25, 29, 50, 51, 68, 73, 173, 244, 252, 325, 331, 355, 602, 604, 784, 786, 788, 789, 795, 798, 799, 800, 805, 806, 809, 813, 815, 823, 827, 835, 838, 845], "signatur": [16, 25, 361, 370, 461, 496, 798, 799, 800, 801, 804, 808, 812, 813, 815, 828, 835, 844], "matmul": [16, 25, 26, 42, 56, 79, 359, 425, 586, 606, 609, 659, 794, 812, 813, 817], "to_n": [16, 25, 26, 37, 46, 69, 817], "jaxlib": [16, 22, 40, 773, 789, 793, 798, 799, 804, 813, 817, 819], "xla_extens": [16, 22, 773, 793, 798, 799, 804, 813, 817, 819], "arrayimpl": [16, 22, 773], "abov": [16, 21, 25, 26, 31, 32, 47, 50, 51, 56, 60, 67, 73, 74, 79, 83, 92, 112, 120, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 149, 165, 169, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 237, 239, 240, 241, 245, 246, 247, 248, 249, 250, 251, 254, 256, 257, 258, 259, 261, 262, 263, 264, 267, 269, 270, 271, 272, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 299, 301, 315, 316, 321, 322, 324, 327, 350, 352, 355, 358, 359, 361, 370, 376, 377, 378, 379, 381, 382, 383, 389, 391, 394, 395, 396, 401, 402, 410, 411, 461, 496, 499, 525, 529, 531, 533, 535, 572, 596, 598, 601, 602, 604, 606, 607, 608, 609, 611, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 630, 631, 632, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 665, 666, 667, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 709, 711, 716, 717, 719, 720, 721, 722, 723, 724, 725, 728, 732, 733, 734, 735, 736, 737, 738, 739, 740, 783, 786, 788, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 807, 808, 809, 810, 812, 815, 817, 819, 820, 821, 822, 838, 843], "instanc": [16, 22, 25, 26, 39, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 149, 159, 162, 165, 166, 167, 169, 174, 191, 203, 208, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 355, 358, 359, 360, 361, 364, 370, 376, 377, 378, 379, 381, 382, 383, 385, 389, 390, 394, 395, 396, 400, 401, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 417, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 513, 514, 517, 518, 519, 520, 521, 522, 525, 526, 529, 531, 533, 534, 535, 537, 538, 539, 541, 542, 544, 549, 550, 560, 564, 565, 566, 567, 569, 571, 572, 585, 587, 588, 591, 593, 594, 595, 596, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 756, 761, 788, 789, 790, 792, 793, 794, 798, 800, 801, 802, 804, 805, 806, 807, 808, 812, 820, 821, 822, 825, 831, 839], "why": [16, 783, 790, 808, 819, 826, 828], "method": [16, 25, 41, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 122, 123, 125, 127, 128, 130, 132, 133, 134, 135, 137, 139, 140, 143, 146, 147, 148, 149, 159, 162, 166, 167, 174, 191, 208, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 355, 358, 359, 360, 361, 370, 376, 377, 378, 379, 381, 382, 383, 385, 389, 390, 391, 394, 395, 396, 400, 401, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 417, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 513, 514, 515, 517, 518, 519, 520, 521, 522, 525, 526, 529, 531, 533, 534, 535, 537, 538, 539, 541, 542, 544, 549, 550, 564, 565, 566, 567, 569, 571, 572, 585, 587, 588, 591, 593, 594, 595, 596, 601, 602, 604, 606, 607, 609, 610, 613, 616, 619, 620, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 649, 650, 652, 653, 654, 655, 656, 657, 659, 660, 663, 664, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 701, 702, 703, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 745, 756, 762, 763, 764, 765, 766, 788, 790, 792, 793, 794, 797, 798, 799, 800, 801, 804, 812, 813, 817, 818, 821, 822, 823, 831, 832, 833, 839, 845], "underli": [16, 25, 26, 37, 51, 58, 74, 81, 94, 224, 227, 229, 264, 360, 361, 435, 451, 604, 609, 611, 657, 678, 796, 808, 815, 831, 838], "howev": [16, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 56, 79, 241, 284, 285, 364, 476, 478, 553, 604, 606, 609, 657, 659, 773, 788, 789, 792, 793, 794, 796, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 812, 815, 817, 819, 820, 821, 822, 823, 828, 831, 837, 838, 844], "disabl": [16, 25, 795], "array_mod": [16, 25, 551, 574, 606, 814], "set_array_mod": [16, 25, 574, 606, 814], "composit": [16, 25, 160, 161, 193, 194, 286, 359, 417, 523, 524, 602, 603, 604, 606, 749, 751, 788, 791, 793, 794, 796, 798, 799, 806, 808, 809, 810, 812, 815, 817, 821, 822, 823, 825, 831, 839], "ultim": [16, 25, 831], "sigmoid": [16, 25, 26, 37, 45, 51, 67, 74, 293, 350, 365, 482, 598, 760, 817, 820, 821], "z": [16, 25, 26, 38, 39, 47, 50, 51, 52, 56, 57, 60, 62, 64, 70, 73, 74, 75, 79, 80, 81, 83, 87, 96, 97, 131, 132, 134, 135, 195, 217, 218, 222, 224, 227, 229, 234, 245, 246, 249, 250, 251, 253, 254, 259, 261, 263, 264, 265, 266, 274, 283, 292, 293, 321, 322, 324, 350, 355, 360, 370, 431, 433, 434, 435, 436, 437, 443, 446, 457, 495, 496, 499, 505, 510, 522, 525, 526, 533, 534, 550, 563, 564, 565, 573, 586, 601, 603, 604, 606, 609, 610, 611, 613, 615, 616, 617, 619, 639, 649, 654, 655, 659, 666, 668, 669, 670, 671, 693, 697, 699, 707, 711, 712, 713, 716, 721, 731, 732, 734, 735, 736, 763, 783, 794, 796, 799, 800, 817, 819, 831], "divid": [16, 21, 25, 26, 42, 50, 51, 52, 58, 68, 73, 74, 81, 96, 97, 241, 364, 432, 476, 477, 478, 564, 604, 606, 611, 680, 793, 796, 800, 803, 812], "exp": [16, 25, 26, 50, 51, 73, 74, 110, 112, 239, 259, 272, 293, 350, 358, 360, 385, 390, 435, 598, 604, 609, 657, 807, 809], "high": [16, 25, 26, 44, 51, 55, 60, 74, 78, 83, 358, 400, 403, 558, 606, 608, 615, 621, 622, 623, 624, 626, 628, 630, 711, 713, 750, 788, 802, 807, 809, 820, 825, 829, 834, 835, 836, 837, 838, 842, 844, 845], "network": [16, 23, 25, 26, 37, 39, 44, 608, 632, 760, 762, 763, 764, 765, 766, 783, 796, 805, 817, 821, 828, 832, 834, 836, 837, 838, 842, 844, 845], "most": [16, 25, 26, 68, 70, 91, 94, 135, 359, 410, 558, 580, 601, 606, 609, 643, 644, 780, 783, 787, 788, 789, 793, 796, 797, 798, 799, 804, 805, 807, 808, 809, 810, 812, 813, 814, 815, 817, 819, 820, 821, 823, 828, 838, 839, 841, 842, 844, 845], "entir": [16, 25, 26, 28, 41, 51, 64, 65, 68, 74, 75, 87, 88, 207, 237, 239, 279, 280, 321, 322, 355, 358, 361, 370, 381, 382, 383, 461, 499, 531, 603, 604, 619, 620, 732, 733, 734, 735, 736, 737, 738, 739, 740, 764, 788, 789, 790, 792, 793, 796, 798, 800, 802, 808, 809, 810, 812, 815, 817, 820, 821, 822, 823, 828, 829, 832, 838, 844, 845], "further": [16, 68, 97, 750, 790, 792, 793, 797, 800, 802, 804, 805, 808, 809, 811, 812, 816, 817, 820, 821, 828, 829, 843, 844], "congratul": [16, 22], "There": [16, 23, 26, 31, 91, 351, 353, 354, 362, 363, 367, 750, 783, 788, 789, 790, 792, 793, 794, 795, 796, 798, 799, 800, 802, 803, 805, 807, 809, 810, 814, 817, 820, 823, 827, 831, 839, 840, 844, 845], "come": [16, 39, 788, 789, 790, 793, 797, 809, 814, 815, 821, 825, 838], "independ": [16, 26, 51, 60, 74, 83, 217, 234, 267, 277, 365, 482, 604, 609, 615, 639, 658, 710, 783, 792, 798, 800, 806, 817, 822, 832, 836], "good": [16, 25, 26, 783, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 812, 813, 815, 817, 818, 821], "foundat": [16, 828, 841], "tool": [16, 25, 26, 783, 789, 790, 800, 803, 818, 822, 823, 826, 829, 832, 836, 837, 838, 839, 841, 844, 845], "power": [16, 25, 26, 50, 51, 52, 56, 73, 74, 75, 79, 96, 97, 228, 237, 238, 272, 319, 331, 352, 355, 358, 404, 555, 565, 577, 604, 606, 609, 613, 651, 664, 696, 763, 814, 819, 820, 821, 838, 840, 844], "defin": [17, 23, 25, 26, 27, 47, 51, 52, 56, 70, 74, 75, 79, 94, 110, 135, 139, 140, 141, 217, 234, 241, 267, 268, 276, 278, 281, 292, 302, 305, 306, 307, 315, 316, 317, 318, 321, 322, 324, 350, 352, 355, 358, 359, 361, 370, 393, 409, 461, 467, 499, 533, 534, 554, 598, 601, 604, 606, 609, 619, 639, 644, 645, 658, 732, 733, 734, 736, 783, 788, 789, 793, 794, 797, 798, 801, 804, 807, 809, 810, 812, 813, 819, 821, 823, 825, 833, 835, 836, 837, 838, 839, 842, 844, 845], "div": [17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 833], "sub": [17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 51, 56, 58, 68, 69, 73, 74, 75, 79, 81, 97, 266, 359, 361, 370, 411, 447, 456, 474, 502, 503, 530, 606, 609, 611, 612, 642, 680, 687, 688, 689, 762, 788, 790, 791, 796, 802, 809, 810, 812, 819, 820, 821, 833, 834], "By": [17, 37, 44, 51, 57, 58, 64, 65, 74, 80, 81, 87, 88, 281, 319, 321, 322, 334, 341, 352, 355, 358, 360, 368, 370, 380, 434, 435, 489, 496, 499, 553, 604, 606, 609, 610, 611, 619, 620, 639, 665, 668, 677, 729, 732, 733, 734, 735, 736, 737, 738, 739, 740, 789, 794, 798, 800, 802, 805, 807, 808, 809, 817, 821, 822, 831], "uniform": [17, 18, 19, 20, 21, 25, 26, 27, 28, 30, 31, 32, 39, 51, 60, 74, 83, 370, 499, 615, 710, 711, 713, 763, 783, 811, 821, 832, 833, 845], "x_": [17, 27, 92, 278, 604, 833], "82997245": 17, "44733784": 17, "32163444": 17, "93330479": 17, "52438271": 17, "20438017": 17, "252316": 17, "0827222": 17, "26017165": 17, "88881904": 17, "compat": [17, 23, 27, 31, 37, 44, 50, 51, 56, 58, 61, 64, 65, 73, 74, 79, 81, 84, 87, 88, 96, 97, 148, 217, 222, 224, 226, 227, 228, 229, 234, 235, 241, 245, 246, 253, 254, 259, 261, 263, 264, 267, 270, 272, 276, 283, 288, 321, 322, 355, 602, 604, 609, 611, 616, 619, 620, 639, 652, 655, 658, 661, 665, 666, 678, 717, 732, 733, 734, 735, 736, 737, 738, 739, 740, 783, 789, 794, 804, 809, 810, 813, 817, 823, 828], "sever": [17, 18, 27, 28, 30, 31, 32, 51, 74, 91, 358, 359, 372, 373, 374, 423, 748, 789, 790, 813, 823, 836, 842], "pro": [17, 18, 19, 27, 28, 29, 30, 31, 32], "pick": [18, 28, 763], "off": [18, 28, 55, 56, 78, 79, 381, 382, 383, 608, 609, 631, 642, 663, 763, 764, 789, 816, 829, 831, 844], "last": [18, 23, 25, 28, 47, 51, 55, 56, 57, 58, 61, 63, 64, 65, 68, 70, 74, 78, 79, 80, 81, 86, 87, 88, 92, 96, 131, 132, 135, 190, 301, 327, 352, 355, 358, 359, 360, 361, 368, 370, 386, 391, 401, 402, 413, 434, 451, 461, 463, 489, 497, 498, 601, 603, 608, 609, 610, 611, 616, 618, 619, 620, 633, 634, 639, 642, 654, 663, 665, 669, 670, 672, 675, 678, 679, 680, 682, 716, 717, 725, 727, 728, 729, 730, 739, 740, 764, 773, 783, 790, 792, 794, 795, 798, 800, 808, 810, 812, 815, 817, 823, 829, 832, 838], "purpos": [18, 25, 26, 28, 39, 41, 141, 239, 257, 315, 352, 601, 604, 609, 657, 790, 791, 793, 796, 797, 799, 800, 802, 804, 805, 806, 809, 811, 812, 815, 816, 819, 825, 837, 839, 842, 843, 844], "illustr": [18, 28, 794, 817], "trigger": [18, 28, 766, 788, 803], "unif": [18, 20, 21, 28, 30, 784, 819, 828, 834, 844], "detail": [18, 28, 41, 45, 50, 51, 56, 58, 62, 67, 73, 74, 75, 79, 81, 85, 104, 105, 106, 107, 108, 109, 110, 111, 112, 127, 138, 285, 289, 292, 293, 295, 350, 359, 407, 446, 521, 598, 601, 604, 617, 642, 649, 655, 659, 682, 721, 722, 723, 724, 760, 783, 788, 790, 792, 794, 795, 796, 797, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 817, 819, 820, 821, 840, 844], "55563945": 18, "65538704": 18, "14150524": 18, "46951997": 18, "30220294": 18, "14739668": 18, "57017946": 18, "91962677": 18, "51029003": 18, "59644395": 18, "stack": [18, 28, 37, 41, 51, 56, 58, 68, 74, 79, 81, 96, 139, 140, 316, 352, 359, 361, 410, 445, 446, 448, 457, 475, 552, 561, 583, 601, 606, 609, 611, 613, 640, 642, 643, 644, 645, 647, 649, 651, 652, 653, 655, 656, 657, 659, 660, 663, 690, 700, 701, 764, 783, 787, 792, 794, 808, 817, 834, 836, 843, 844], "arbitrari": [18, 28, 47, 48, 51, 68, 71, 133, 147, 174, 360, 432, 440, 441, 442, 589, 601, 602, 607, 804, 805, 807, 808, 809, 812, 821, 823, 831, 833, 839, 844], "constitu": [18, 28, 68, 822], "comp": [18, 28], "due": [18, 25, 26, 28, 42, 44, 267, 277, 604, 789, 792, 797, 802, 808, 809, 828, 831, 832, 838], "manner": [18, 26, 28, 38, 46, 69, 613, 702, 789, 798, 799, 801, 805, 809, 813, 820, 823, 827, 834, 836, 844, 845], "non": [18, 28, 48, 50, 51, 56, 60, 61, 64, 65, 71, 73, 74, 79, 83, 84, 87, 88, 128, 146, 164, 173, 242, 262, 263, 268, 321, 322, 326, 332, 345, 355, 358, 359, 361, 370, 401, 411, 415, 419, 441, 442, 499, 502, 601, 602, 604, 609, 613, 615, 616, 619, 620, 639, 640, 650, 652, 659, 661, 665, 666, 703, 712, 716, 717, 718, 719, 732, 733, 734, 735, 736, 738, 739, 740, 748, 763, 765, 766, 768, 793, 796, 800, 817, 831, 832, 833, 838], "5556394": 18, "655387": 18, "1415051": 18, "4695197": 18, "3022028": 18, "1473966": 18, "5701794": 18, "91962665": 18, "51028997": 18, "5964439": 18, "assess": [18, 28, 788, 815], "985": 18, "76": [18, 37, 50, 64, 71, 73, 74, 83, 162, 216, 232, 280, 389, 602, 604, 609, 613, 619, 661, 698, 712, 731], "000": [18, 73, 268, 748, 786, 797], "69": [18, 37, 44, 50, 76, 83, 215, 257, 358, 379, 389, 591, 604, 607, 609, 650, 651, 712, 812, 820], "24": [18, 37, 39, 50, 51, 56, 64, 73, 74, 75, 78, 79, 83, 96, 229, 237, 252, 254, 267, 277, 278, 281, 334, 337, 355, 358, 370, 376, 378, 379, 389, 394, 395, 396, 400, 403, 497, 518, 519, 604, 606, 609, 613, 619, 622, 642, 650, 654, 691, 702, 711, 712, 713, 729, 731, 745, 802, 820], "slower": [18, 809], "On": [18, 25, 26, 789, 798, 799, 803, 809, 812, 815, 818, 822], "hand": [18, 50, 359, 425, 748, 783, 792, 798, 799, 803, 805, 812, 823], "singl": [18, 28, 37, 42, 50, 60, 68, 73, 83, 92, 286, 336, 355, 359, 365, 422, 483, 572, 585, 589, 604, 606, 607, 608, 615, 617, 634, 711, 712, 713, 721, 748, 764, 766, 788, 789, 790, 792, 797, 800, 804, 805, 806, 807, 808, 809, 810, 812, 813, 815, 817, 820, 821, 822, 823, 829], "learnt": [19, 29], "two": [19, 29, 31, 37, 47, 51, 56, 62, 74, 75, 79, 96, 97, 117, 120, 126, 133, 139, 140, 141, 172, 180, 228, 242, 243, 277, 315, 316, 320, 332, 333, 335, 336, 338, 340, 347, 352, 355, 358, 359, 360, 361, 370, 386, 408, 409, 410, 422, 432, 436, 441, 461, 467, 470, 496, 505, 510, 600, 601, 602, 604, 606, 609, 611, 617, 638, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 665, 683, 721, 722, 723, 724, 748, 750, 756, 764, 788, 789, 792, 793, 798, 799, 800, 801, 805, 809, 810, 812, 815, 816, 820, 822, 829, 835, 843], "workflow": [19, 29, 40, 788, 790, 794, 798, 807, 809, 820, 825, 829, 837, 844, 845], "ivy_norm": 19, "jax_norm": [19, 25, 26], "wider": [19, 29, 558, 580, 606, 798, 814, 844], "avoid": [19, 29, 31, 51, 58, 74, 234, 239, 241, 257, 267, 360, 361, 364, 432, 440, 441, 442, 447, 449, 451, 452, 453, 456, 460, 467, 474, 476, 477, 478, 512, 528, 530, 553, 558, 580, 604, 606, 611, 674, 675, 676, 678, 680, 681, 683, 685, 750, 751, 789, 790, 794, 795, 796, 797, 798, 802, 806, 809, 812, 813, 814, 815, 838], "conveni": [19, 29, 788, 798, 799, 804, 810, 818, 820, 821, 825, 844], "act": [19, 29, 51, 74, 348, 356, 790, 800, 814, 823, 845], "shorthand": [19, 29, 31, 812], "pair": [19, 29, 39, 51, 55, 74, 78, 222, 241, 308, 347, 352, 355, 358, 391, 400, 402, 403, 604, 608, 609, 621, 622, 623, 624, 626, 628, 630, 637, 639], "93968587": 19, "26075466": 19, "22723222": 19, "06276492": 19, "47426987": 19, "72835908": 19, "71737559": 19, "50411096": 19, "65419174": 19, "15576624": 19, "still": [19, 21, 22, 25, 26, 28, 29, 32, 56, 68, 79, 609, 659, 748, 788, 789, 790, 793, 794, 798, 801, 802, 803, 805, 808, 809, 812, 815, 821, 823, 828, 831, 832, 835, 838, 844], "variou": [19, 29, 31, 37, 783, 789, 790, 792, 797, 798, 801, 802, 804, 806, 807, 809, 810, 811, 812, 824, 834, 836, 837, 838, 841, 844], "implic": [19, 29, 30, 33, 796], "either": [20, 21, 30, 31, 32, 33, 37, 43, 50, 51, 52, 55, 64, 68, 73, 74, 75, 78, 79, 106, 109, 112, 117, 127, 128, 138, 214, 215, 216, 217, 222, 232, 234, 235, 237, 239, 241, 248, 249, 255, 256, 257, 258, 259, 267, 276, 278, 279, 281, 284, 285, 323, 344, 355, 358, 370, 379, 389, 399, 400, 403, 497, 498, 517, 537, 545, 546, 554, 573, 598, 600, 601, 604, 606, 608, 609, 612, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 634, 649, 654, 657, 661, 687, 688, 689, 729, 730, 735, 737, 750, 762, 764, 765, 766, 773, 785, 788, 789, 790, 794, 795, 796, 798, 799, 800, 801, 802, 803, 805, 808, 809, 810, 811, 812, 815, 817, 820, 823, 824, 832, 838], "eagerli": [20, 21, 25, 26, 30, 31, 32, 39, 783, 831, 832, 833], "lazili": [20, 21, 22, 25, 26, 30, 32, 43, 783, 831, 832, 833], "actual": [20, 30, 786, 790, 791, 797, 805, 806, 808, 809, 810, 812, 815, 816, 821, 823, 839, 844], "occur": [20, 25, 26, 30, 43, 48, 50, 62, 71, 73, 85, 149, 268, 284, 602, 604, 616, 617, 716, 717, 721, 722, 723, 724, 792, 797, 799, 802, 814], "becaus": [20, 28, 30, 40, 51, 358, 380, 743, 789, 790, 792, 793, 794, 795, 796, 798, 799, 801, 802, 804, 805, 806, 807, 808, 809, 810, 812, 815, 817, 821, 822, 823, 838, 841, 844], "requir": [20, 30, 39, 40, 41, 44, 50, 51, 68, 73, 74, 268, 281, 285, 359, 361, 410, 411, 461, 604, 609, 611, 643, 644, 645, 682, 748, 756, 761, 785, 788, 789, 793, 795, 797, 798, 799, 800, 801, 802, 803, 804, 806, 809, 810, 811, 812, 813, 815, 817, 819, 823, 832, 838, 844], "argument": [20, 22, 23, 25, 26, 28, 30, 31, 32, 37, 39, 41, 43, 46, 47, 50, 51, 52, 56, 68, 69, 73, 74, 75, 91, 92, 97, 120, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 149, 165, 169, 174, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 237, 239, 240, 241, 245, 246, 247, 248, 249, 250, 254, 256, 257, 258, 259, 261, 262, 263, 264, 267, 269, 270, 271, 272, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 301, 315, 316, 321, 322, 324, 327, 329, 352, 355, 358, 359, 361, 370, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 389, 390, 391, 394, 395, 396, 401, 404, 411, 461, 496, 499, 503, 508, 509, 511, 512, 517, 519, 520, 525, 529, 531, 533, 535, 545, 549, 550, 567, 572, 573, 586, 596, 601, 602, 604, 606, 607, 608, 609, 611, 612, 613, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 630, 631, 632, 634, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 689, 696, 709, 716, 717, 719, 720, 721, 722, 723, 724, 725, 728, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 745, 748, 749, 756, 761, 764, 765, 766, 773, 777, 779, 783, 788, 791, 792, 793, 794, 795, 796, 800, 801, 803, 805, 810, 812, 813, 815, 817, 819, 820, 825, 827, 831, 832, 833, 838], "altern": [20, 30, 40, 51, 74, 79, 91, 92, 320, 328, 329, 333, 335, 336, 337, 338, 340, 341, 342, 346, 347, 355, 783, 788, 789, 795, 808, 820, 841], "consid": [20, 30, 31, 51, 56, 62, 74, 79, 112, 141, 262, 263, 315, 320, 325, 336, 352, 355, 359, 370, 411, 415, 424, 496, 598, 601, 604, 609, 617, 641, 652, 721, 722, 723, 724, 750, 763, 793, 794, 797, 798, 805, 807, 813, 815, 818, 819, 820, 827, 828, 831, 835, 839, 843, 845], "dummi": [20, 21, 30, 31, 32, 38, 790], "assum": [20, 21, 30, 31, 32, 47, 50, 51, 52, 55, 56, 57, 73, 74, 75, 78, 79, 80, 120, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 142, 143, 149, 165, 169, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 237, 239, 240, 241, 245, 246, 247, 248, 249, 250, 251, 254, 256, 257, 258, 259, 261, 262, 263, 264, 267, 269, 270, 271, 272, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 301, 316, 321, 322, 324, 327, 344, 352, 355, 358, 359, 361, 370, 376, 377, 378, 379, 381, 382, 383, 389, 394, 395, 396, 401, 411, 423, 425, 461, 496, 499, 525, 529, 531, 533, 542, 572, 596, 601, 602, 604, 606, 607, 608, 609, 610, 611, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 630, 631, 632, 634, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 668, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 709, 716, 717, 719, 720, 721, 722, 723, 724, 725, 728, 732, 733, 734, 735, 736, 737, 738, 739, 740, 764, 777, 783, 789, 792, 794, 797, 798, 801, 810, 812, 815, 819, 820, 823], "slowli": [20, 30], "norm": [20, 30, 31, 51, 52, 56, 74, 75, 79, 90, 91, 358, 359, 379, 380, 384, 385, 386, 389, 390, 391, 401, 402, 407, 411, 479, 480, 481, 513, 514, 535, 606, 609, 650, 666, 709, 764, 768, 813], "slow": [20, 30, 785, 789, 795], "54320029": 20, "30825614": 20, "17176882": 20, "14351968": 20, "98934778": 20, "82910388": 20, "89044143": 20, "71881472": 20, "1666683": 20, "14417601": 20, "norm_comp": [20, 30, 31], "float64": [20, 21, 48, 51, 60, 64, 70, 71, 73, 74, 75, 83, 87, 120, 128, 129, 146, 149, 153, 154, 159, 160, 163, 164, 169, 170, 174, 176, 177, 183, 186, 268, 331, 355, 360, 370, 435, 496, 544, 601, 602, 606, 609, 615, 644, 645, 650, 666, 712, 713, 730, 745, 748, 749, 798, 810, 812], "norm_tran": [20, 30], "know": [20, 21, 30, 31, 32, 62, 617, 721, 722, 723, 724, 785, 788, 790, 799, 806, 810, 812, 815, 829, 833, 839], "happen": [21, 25, 26, 286, 604, 783, 789, 790, 799, 808, 812, 820, 829, 831, 832], "09422972": 21, "46009917": 21, "0881108": 21, "86487021": 21, "83629996": 21, "10654466": 21, "89883457": 21, "02893805": 21, "15644584": 21, "41495672": 21, "wherea": [21, 32, 790, 793, 794, 796, 798, 799, 800, 804, 805, 812, 822, 835], "subtract": [21, 25, 26, 50, 73, 96, 97, 128, 361, 461, 601, 604, 793, 796, 800], "begin": [21, 51, 74, 278, 361, 445, 461, 462, 463, 464, 465, 604, 613, 690, 701, 748, 762, 789, 792, 797, 810], "demonstr": [22, 25, 26, 40, 798, 800, 802, 819], "scenario": [22, 798, 807], "often": [22, 787, 792, 802, 804, 805, 809, 812, 823, 829, 839, 842, 845], "fortun": [22, 23, 792], "everyth": [22, 40, 777, 783, 788, 789, 790, 791, 797, 800, 808, 809, 810, 812, 818, 823, 824, 829], "practic": [22, 790, 794, 797, 809, 811, 841], "specifi": [22, 23, 25, 26, 30, 31, 32, 43, 45, 47, 48, 50, 51, 52, 55, 56, 57, 58, 60, 61, 62, 64, 65, 67, 68, 71, 73, 74, 75, 78, 79, 80, 81, 83, 84, 87, 88, 91, 104, 105, 106, 107, 108, 109, 110, 111, 112, 120, 124, 129, 131, 136, 139, 140, 142, 146, 148, 195, 200, 202, 206, 207, 208, 276, 285, 289, 292, 293, 295, 316, 320, 336, 341, 350, 352, 355, 358, 359, 360, 361, 365, 370, 376, 377, 378, 380, 386, 391, 401, 402, 403, 411, 421, 423, 428, 434, 435, 436, 438, 451, 454, 463, 464, 466, 467, 483, 494, 496, 497, 498, 501, 502, 505, 508, 525, 526, 528, 530, 531, 544, 554, 586, 598, 601, 602, 603, 604, 606, 608, 609, 610, 611, 613, 615, 616, 617, 618, 619, 620, 634, 637, 639, 641, 642, 644, 645, 650, 658, 661, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 679, 681, 682, 685, 686, 694, 695, 697, 698, 705, 706, 707, 708, 711, 712, 713, 715, 716, 717, 719, 722, 723, 724, 725, 729, 730, 731, 735, 737, 739, 740, 748, 751, 760, 762, 764, 765, 766, 789, 791, 795, 798, 799, 804, 805, 806, 808, 809, 810, 812, 817, 820, 821, 831, 832, 833, 844], "everi": [22, 25, 26, 31, 39, 47, 51, 52, 74, 75, 129, 130, 293, 321, 322, 334, 350, 355, 358, 361, 394, 395, 396, 473, 507, 601, 606, 788, 790, 792, 794, 795, 797, 798, 800, 803, 804, 805, 806, 808, 809, 810, 812, 817, 819, 821, 831, 832, 833, 838], "jax_kornia": [22, 25, 26, 783, 832], "though": [22, 787, 788, 790, 798, 799, 801, 805, 808, 809, 815, 820, 823], "comput": [22, 23, 25, 26, 32, 33, 38, 39, 41, 45, 50, 51, 52, 53, 55, 56, 57, 62, 64, 67, 68, 73, 74, 75, 76, 78, 79, 80, 87, 91, 92, 94, 107, 111, 207, 217, 224, 227, 229, 234, 235, 236, 241, 242, 243, 245, 246, 252, 253, 254, 261, 262, 263, 264, 266, 267, 270, 275, 276, 292, 302, 305, 306, 317, 318, 321, 322, 324, 328, 332, 334, 335, 339, 341, 346, 347, 348, 349, 350, 352, 355, 356, 357, 358, 359, 360, 361, 364, 368, 370, 376, 377, 378, 379, 380, 385, 386, 389, 390, 391, 394, 395, 396, 397, 400, 401, 402, 404, 405, 407, 409, 410, 411, 412, 414, 415, 417, 420, 422, 424, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 455, 458, 470, 476, 478, 488, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 512, 513, 514, 558, 580, 587, 589, 590, 592, 596, 597, 603, 604, 606, 607, 608, 609, 610, 611, 613, 617, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 638, 639, 643, 644, 645, 648, 649, 650, 652, 654, 656, 658, 659, 661, 663, 665, 666, 668, 669, 670, 674, 696, 721, 722, 723, 724, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 745, 750, 764, 767, 783, 789, 796, 797, 798, 805, 807, 809, 812, 814, 815, 817, 820, 823, 825, 828, 829, 831, 832, 834, 836, 838, 839, 841, 842, 844], "000000000034": [22, 25, 26, 783, 832], "raw_img": [22, 25, 26, 783, 832], "expand_dim": [22, 25, 26, 41, 43, 58, 81, 608, 611, 630, 783, 809, 817, 820, 832], "enhanc": [22, 25, 26, 783, 811, 832], "sharp": [22, 25, 26, 783], "verifi": [22, 312, 313, 352, 788, 798, 799, 809, 812, 813], "prefer": [22, 25, 26, 241, 604, 783, 789, 796, 802, 806, 809, 824, 838], "leverag": [22, 25, 26, 783, 789, 808, 832, 836, 838], "whole": [23, 51, 74, 361, 364, 468, 479, 480, 481, 790, 795, 803], "machin": [23, 28, 29, 37, 43, 51, 56, 74, 79, 159, 162, 359, 411, 602, 609, 652, 655, 783, 789, 792, 805, 825, 828, 836, 838, 840, 841, 842, 843, 844], "allow": [23, 25, 26, 37, 51, 74, 131, 272, 359, 370, 427, 499, 503, 545, 601, 604, 606, 618, 727, 748, 749, 750, 751, 762, 765, 766, 781, 783, 788, 790, 793, 794, 797, 798, 802, 803, 805, 806, 807, 808, 809, 810, 812, 815, 817, 819, 823, 825, 828, 831, 832, 833, 836, 838, 842, 843], "full": [23, 51, 56, 74, 78, 79, 91, 92, 94, 159, 246, 254, 310, 311, 312, 313, 314, 352, 359, 360, 361, 428, 429, 434, 435, 462, 465, 552, 561, 575, 583, 601, 602, 604, 606, 608, 609, 623, 625, 626, 627, 652, 656, 658, 659, 749, 756, 783, 789, 790, 795, 798, 801, 802, 804, 805, 809, 812, 815, 817, 823, 828, 829, 836, 838, 844], "advantag": [23, 25, 26, 783, 789, 790, 798, 808, 809, 824, 832, 838], "complex": [23, 25, 26, 39, 45, 50, 51, 56, 67, 71, 73, 74, 79, 104, 105, 106, 107, 108, 109, 110, 111, 112, 136, 137, 152, 166, 175, 181, 214, 215, 216, 217, 218, 219, 220, 223, 231, 232, 234, 235, 237, 239, 247, 248, 249, 250, 251, 255, 256, 257, 258, 267, 269, 270, 272, 274, 277, 278, 279, 280, 281, 284, 285, 289, 292, 293, 295, 324, 329, 350, 355, 358, 359, 370, 380, 391, 401, 402, 405, 410, 411, 412, 421, 423, 504, 564, 565, 598, 601, 602, 604, 606, 609, 616, 619, 643, 644, 645, 650, 657, 659, 661, 663, 666, 719, 735, 737, 749, 760, 788, 795, 798, 800, 806, 809, 812, 813, 815, 820, 821, 822, 823, 825, 832, 834, 836, 838, 840, 844, 845], "neccessari": 23, "convolut": [23, 51, 55, 74, 78, 358, 378, 396, 608, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 750, 764, 832, 836, 838], "32": [23, 25, 26, 37, 39, 40, 41, 50, 51, 60, 73, 74, 78, 79, 83, 96, 97, 106, 158, 216, 228, 229, 238, 252, 258, 274, 277, 278, 324, 355, 358, 359, 361, 370, 377, 378, 379, 389, 399, 400, 409, 413, 444, 497, 518, 534, 598, 602, 604, 606, 608, 609, 615, 616, 619, 623, 625, 626, 627, 630, 632, 649, 654, 665, 711, 712, 713, 720, 731, 748, 751, 783, 797, 798, 807, 820, 843], "kernel_s": [23, 25, 26, 41, 51, 74, 358, 376, 377, 378, 397, 403, 764, 770], "flatten": [23, 25, 26, 39, 41, 44, 51, 52, 56, 58, 61, 62, 74, 75, 79, 81, 84, 85, 326, 341, 355, 359, 361, 370, 408, 450, 460, 464, 469, 473, 494, 501, 502, 503, 504, 505, 518, 522, 606, 609, 611, 616, 617, 646, 654, 666, 672, 677, 679, 716, 717, 721, 722, 723, 724, 743, 745, 762, 783, 808, 815], "keyword": [23, 25, 26, 41, 43, 46, 47, 51, 68, 74, 97, 133, 268, 358, 361, 370, 404, 461, 496, 509, 512, 545, 573, 601, 604, 606, 613, 619, 696, 737, 743, 745, 749, 765, 766, 777, 788, 793, 796, 798, 799, 806, 808, 809, 810, 812, 813, 815, 820, 831, 832, 833], "input_arrai": [23, 25, 26, 808], "torch_model": [23, 25, 26, 43], "thank": [23, 820, 828], "fledg": [23, 789, 817, 818], "rand": [23, 25, 26, 41, 777, 783, 831], "output_arrai": [23, 25, 26, 51, 432], "0768": [23, 111, 598], "0727": 23, "0942": 23, "1300": 23, "1350": [23, 51, 74, 359, 419], "0839": 23, "1511": 23, "1061": 23, "0606": 23, "0896": 23, "softmaxbackward0": 23, "furthermor": 23, "relat": [23, 241, 604, 783, 785, 787, 788, 789, 790, 795, 802, 809, 812, 813, 814, 815, 832, 841], "interest": [23, 25, 37, 234, 267, 604, 788, 790], "continu": [23, 25, 26, 41, 119, 281, 600, 604, 783, 787, 788, 789, 791, 792, 808, 811, 812, 823, 828, 829, 838], "regress": [24, 838, 845], "checkout": [25, 40, 790, 792, 812], "f705efe7cb5d18df17ce6c1e20f04d0eb4933f48": 25, "e": [25, 42, 43, 47, 51, 56, 60, 62, 63, 64, 66, 73, 74, 79, 83, 86, 87, 89, 91, 92, 96, 123, 132, 133, 136, 137, 141, 145, 174, 187, 214, 215, 216, 220, 222, 223, 226, 228, 230, 234, 235, 237, 240, 241, 247, 248, 255, 256, 257, 258, 265, 266, 267, 268, 270, 274, 276, 277, 280, 281, 285, 293, 315, 321, 322, 352, 355, 358, 359, 360, 365, 370, 371, 376, 377, 380, 394, 395, 396, 397, 401, 413, 416, 422, 435, 482, 483, 484, 485, 486, 497, 498, 506, 599, 601, 602, 603, 604, 608, 609, 611, 613, 615, 617, 618, 619, 634, 639, 644, 645, 649, 650, 652, 655, 658, 659, 660, 663, 666, 674, 682, 693, 697, 698, 699, 702, 707, 708, 711, 712, 713, 721, 722, 723, 724, 725, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 764, 777, 783, 784, 786, 788, 789, 790, 791, 792, 794, 796, 798, 802, 807, 809, 812, 817, 820, 823, 824, 825, 828, 829, 831, 834], "pyvi": [25, 26], "theoret": 25, "aspect": [25, 26, 784, 807, 820, 838], "switch": [25, 37, 756, 794, 802, 805, 806, 845], "easiest": [25, 783, 785, 789, 824], "defer": [25, 26, 788, 793, 798, 799, 805, 808, 809, 812, 844], "similarli": [25, 38, 133, 141, 217, 315, 321, 322, 352, 355, 601, 604, 794, 798, 809, 815, 819, 844], "obtain": [25, 26, 44, 51, 74, 307, 352, 358, 397, 608, 634, 750, 809, 831], "essenc": [25, 839, 844], "becom": [25, 51, 74, 91, 331, 355, 361, 442, 611, 671, 773, 790, 796, 798, 800, 802, 808, 823, 827, 829, 831], "regardless": [25, 26, 37, 68, 784, 798, 802, 819, 822, 829], "being": [25, 26, 37, 51, 68, 74, 89, 96, 100, 120, 359, 361, 419, 445, 461, 559, 601, 606, 609, 645, 745, 751, 762, 763, 783, 789, 790, 792, 793, 794, 796, 798, 799, 800, 804, 806, 808, 809, 810, 812, 813, 815, 817, 820, 823, 828, 829, 834, 836, 837, 838, 839, 844, 845], "slide": [25, 51, 55, 74, 78, 358, 376, 377, 378, 394, 395, 396, 397, 400, 403, 608, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 764], "A": [25, 26, 40, 47, 48, 51, 52, 58, 60, 64, 65, 68, 71, 73, 74, 75, 78, 79, 81, 83, 85, 88, 91, 92, 97, 116, 117, 119, 126, 134, 141, 147, 188, 207, 269, 271, 275, 301, 311, 315, 317, 318, 320, 333, 336, 340, 341, 352, 355, 358, 359, 360, 361, 364, 365, 370, 386, 400, 404, 411, 422, 425, 432, 436, 446, 449, 467, 470, 471, 476, 477, 478, 479, 482, 483, 484, 485, 486, 494, 503, 505, 510, 512, 521, 530, 533, 534, 564, 565, 566, 569, 597, 600, 601, 602, 603, 604, 606, 607, 608, 609, 611, 613, 615, 619, 620, 631, 634, 642, 644, 647, 648, 653, 654, 658, 659, 671, 674, 676, 680, 682, 690, 693, 695, 697, 698, 699, 700, 701, 705, 706, 707, 708, 710, 711, 712, 713, 715, 721, 731, 739, 740, 743, 745, 746, 748, 749, 750, 751, 756, 762, 763, 781, 783, 787, 788, 789, 791, 796, 798, 799, 802, 804, 805, 809, 810, 812, 817, 820, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 838, 839], "could": [25, 26, 31, 62, 617, 721, 722, 723, 724, 788, 789, 790, 792, 797, 798, 800, 806, 808, 809, 810, 812, 817, 819, 820, 821, 828, 829, 838, 843, 844], "regressor": [25, 26, 783], "input_dim": [25, 26, 40, 783], "output_dim": [25, 26, 40, 783], "linear0": [25, 26, 37, 783, 820, 821], "linear1": [25, 26, 37, 783, 820, 821], "instanti": [25, 26, 756, 801], "adam": [25, 26, 37, 41, 53, 76, 509, 587, 588, 593, 606, 607, 768, 783, 820, 821, 822, 838], "well": [25, 26, 39, 40, 41, 75, 360, 434, 531, 606, 609, 658, 750, 783, 785, 788, 790, 795, 797, 798, 802, 808, 809, 810, 812, 821, 822, 832, 837, 838, 839, 843], "n_training_exampl": [25, 26, 783], "2000": [25, 26, 74, 302, 352, 783], "random_norm": [25, 26, 55, 56, 60, 78, 79, 83, 518, 606, 608, 609, 615, 623, 625, 626, 627, 630, 633, 659, 783], "linspac": [25, 26, 47, 70, 120, 601, 783, 804, 815, 817, 845], "y": [25, 26, 37, 38, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 67, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 123, 126, 128, 130, 131, 132, 133, 134, 135, 136, 137, 143, 146, 147, 148, 157, 159, 162, 174, 187, 191, 195, 200, 201, 202, 206, 208, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 245, 246, 248, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 297, 298, 299, 301, 320, 321, 322, 328, 335, 336, 337, 338, 339, 344, 346, 348, 350, 352, 355, 358, 359, 360, 361, 364, 370, 377, 379, 381, 382, 386, 389, 391, 395, 401, 407, 411, 417, 422, 429, 431, 433, 434, 435, 436, 437, 446, 448, 457, 461, 469, 470, 475, 479, 480, 481, 489, 495, 496, 497, 498, 499, 502, 504, 505, 507, 510, 513, 514, 517, 518, 520, 521, 522, 525, 526, 527, 531, 533, 534, 535, 537, 538, 541, 542, 547, 554, 555, 556, 559, 562, 563, 564, 565, 567, 569, 571, 572, 573, 577, 578, 581, 584, 585, 586, 596, 598, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 623, 625, 627, 630, 631, 632, 638, 639, 640, 644, 645, 646, 647, 649, 650, 652, 653, 654, 655, 657, 659, 660, 661, 663, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 693, 696, 697, 699, 707, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 781, 783, 794, 796, 799, 800, 807, 809, 810, 812, 813, 815, 817, 819, 831], "loss_fn": [25, 26, 37, 39, 41, 783, 820, 821, 822], "pred": [25, 26, 40, 41, 51, 57, 74, 80, 360, 431, 434, 610, 668, 669, 670, 783, 796, 805, 808], "epoch": [25, 26, 39, 41, 783], "loss": [25, 26, 39, 41, 51, 74, 91, 431, 432, 433, 434, 435, 436, 437, 558, 580, 606, 668, 669, 670, 783, 797, 798, 805, 809, 813, 814, 820, 821, 822, 838, 845], "gradient": [25, 26, 39, 41, 51, 74, 91, 207, 349, 355, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 603, 612, 687, 688, 689, 745, 756, 768, 783, 791, 813, 820, 821, 823, 838], "grad": [25, 26, 37, 41, 587, 607, 768, 783, 807, 820, 821, 822], "execute_with_gradi": [25, 26, 37, 41, 607, 783, 820, 821, 822, 823], "lambda": [25, 26, 42, 44, 117, 119, 517, 589, 590, 592, 597, 600, 606, 607, 609, 613, 644, 697, 698, 702, 783, 788, 805, 806, 807, 810, 815, 817, 820], "2d": [25, 26, 41, 51, 74, 91, 301, 352, 358, 359, 361, 370, 373, 374, 381, 382, 421, 428, 441, 450, 496, 764, 783, 809, 815], "5f": [25, 26, 783], "nonetheless": [25, 26], "slight": [25, 26, 798, 812, 821], "introduc": [25, 26, 241, 604, 611, 617, 679, 721, 796, 797, 798, 806, 810, 812, 815, 820, 827], "address": [25, 26, 52, 571, 606, 788, 790, 792, 793, 804, 811, 817, 829, 834, 836, 838, 844], "extract": [25, 26, 33, 40, 51, 74, 92, 361, 444, 469, 809, 811, 813, 834, 838, 839, 844], "gc": [25, 26, 530, 606], "decompos": [25, 26, 51, 74, 91, 94, 310, 311, 312, 313, 314, 333, 340, 352, 355, 359, 419, 424, 427, 430, 809, 822], "said": [25, 26, 750, 813, 829, 831], "otherwis": [25, 26, 43, 46, 47, 48, 50, 51, 52, 55, 56, 61, 62, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 91, 104, 105, 106, 107, 108, 109, 110, 111, 112, 117, 120, 122, 123, 128, 130, 131, 132, 135, 137, 143, 146, 147, 149, 150, 152, 153, 154, 155, 156, 165, 169, 173, 174, 190, 208, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 299, 301, 310, 311, 312, 313, 314, 320, 321, 322, 323, 324, 326, 327, 328, 335, 336, 342, 344, 346, 347, 348, 350, 352, 355, 358, 359, 364, 376, 377, 378, 381, 382, 383, 401, 413, 426, 428, 431, 432, 433, 434, 435, 436, 437, 440, 441, 442, 445, 446, 447, 449, 451, 452, 453, 460, 467, 469, 470, 474, 476, 478, 479, 480, 481, 483, 495, 496, 497, 498, 499, 507, 510, 511, 513, 514, 518, 519, 520, 521, 522, 525, 526, 529, 531, 533, 534, 535, 537, 538, 541, 542, 549, 550, 564, 565, 567, 569, 571, 572, 573, 585, 589, 591, 596, 600, 601, 602, 603, 604, 606, 607, 608, 609, 612, 613, 616, 617, 618, 619, 620, 622, 623, 624, 625, 631, 632, 634, 637, 638, 639, 640, 644, 645, 646, 647, 649, 650, 652, 654, 656, 657, 659, 663, 665, 666, 668, 669, 670, 671, 674, 675, 676, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 703, 710, 711, 712, 713, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 748, 749, 764, 766, 767, 773, 783, 790, 793, 796, 798, 799, 800, 805, 806, 808, 812, 817, 824, 831, 832], "x0": [25, 26, 44, 75, 510, 606, 800], "normalize_comp": [25, 26], "html": [25, 26, 40, 50, 51, 73, 74, 141, 149, 237, 247, 248, 263, 315, 321, 322, 352, 355, 358, 370, 401, 496, 601, 602, 604, 609, 611, 619, 657, 658, 686, 736, 783, 801, 828], "fname": [25, 26, 42, 44, 766, 820], "anticip": [25, 26], "than": [25, 26, 28, 31, 50, 51, 52, 55, 56, 58, 60, 61, 62, 64, 68, 73, 74, 75, 78, 79, 81, 83, 84, 85, 87, 96, 97, 120, 128, 159, 207, 215, 216, 219, 220, 222, 223, 226, 228, 230, 234, 240, 241, 255, 256, 257, 258, 265, 267, 272, 276, 278, 280, 281, 285, 286, 287, 294, 300, 320, 323, 336, 343, 352, 355, 358, 359, 361, 370, 379, 380, 385, 386, 389, 390, 391, 401, 402, 405, 407, 424, 430, 452, 453, 497, 498, 499, 537, 538, 541, 558, 580, 601, 602, 603, 604, 606, 608, 609, 611, 615, 616, 617, 619, 637, 639, 649, 650, 651, 652, 655, 666, 671, 675, 681, 713, 719, 722, 723, 724, 729, 730, 735, 736, 737, 738, 764, 786, 790, 792, 796, 797, 798, 800, 802, 808, 809, 810, 812, 813, 814, 815, 817, 820, 821, 822, 823, 824, 828, 835, 836, 837, 838, 844, 845], "addition": [25, 26, 796, 808, 809, 844], "return_backend_compiled_fn": [25, 26], "normalize_native_comp": [25, 26], "immedi": [25, 26, 789], "built": [25, 26, 31, 39, 41, 44, 120, 601, 764, 765, 766, 783, 789, 790, 795, 796, 812, 818, 824, 831, 837, 838, 842], "summar": [25, 26, 91, 812], "eager_graph": [25, 26, 783, 831, 832], "lazy_graph": [25, 26, 783, 831, 832], "codebas": [25, 26, 205, 206, 603, 784, 791, 798, 803, 808, 809, 811, 812, 813, 816, 829], "thought": [25, 26, 789, 790, 804, 828, 836], "research": [25, 26, 39, 783, 827, 832, 838, 845], "wa": [25, 26, 31, 40, 51, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 94, 104, 105, 106, 107, 108, 109, 110, 111, 112, 128, 130, 135, 137, 143, 147, 149, 174, 208, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 295, 296, 297, 298, 299, 300, 301, 320, 321, 322, 323, 324, 326, 328, 335, 336, 342, 343, 344, 346, 347, 348, 352, 355, 359, 381, 382, 383, 401, 429, 431, 432, 433, 434, 435, 436, 437, 440, 441, 442, 445, 446, 467, 469, 470, 476, 478, 479, 480, 481, 483, 496, 497, 498, 499, 507, 510, 511, 513, 514, 518, 519, 520, 521, 522, 525, 526, 529, 531, 533, 534, 535, 537, 538, 541, 549, 550, 564, 565, 567, 569, 571, 572, 573, 585, 591, 596, 604, 606, 613, 619, 620, 622, 623, 624, 625, 631, 632, 637, 638, 639, 644, 645, 646, 647, 649, 650, 652, 654, 656, 657, 663, 668, 669, 670, 671, 675, 678, 679, 680, 681, 682, 685, 686, 703, 710, 711, 712, 713, 715, 718, 721, 722, 723, 724, 725, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 773, 783, 785, 790, 792, 795, 797, 800, 805, 807, 809, 817, 819, 828, 831, 832, 837, 838, 840], "No": [25, 26, 39, 51, 57, 74, 80, 360, 432, 433, 434, 436, 437, 610, 668, 790, 797, 798, 838], "matter": [25, 26, 31, 800, 827], "job": [25, 26, 783, 795, 797, 832], "haven": [25, 26, 31, 824, 838], "jax_out": [25, 26], "ideal": [25, 26, 797, 798, 809, 815, 820], "But": [25, 26, 750, 796, 797, 801, 803, 806, 815, 822], "bring": [25, 26, 792, 811, 812, 817, 818, 825, 828], "wise": [25, 45, 50, 51, 56, 67, 73, 74, 79, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 214, 215, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 233, 234, 235, 236, 238, 241, 242, 243, 244, 245, 246, 252, 253, 254, 259, 260, 261, 262, 263, 264, 265, 266, 267, 270, 272, 273, 275, 276, 283, 288, 289, 290, 291, 293, 295, 296, 297, 298, 299, 320, 323, 328, 330, 331, 332, 335, 336, 337, 338, 342, 343, 346, 347, 350, 355, 358, 359, 361, 381, 382, 383, 409, 416, 448, 455, 457, 458, 475, 598, 604, 611, 639, 671, 768, 815], "vision": [25, 26, 44, 834, 844], "worth": [25, 26], "differenti": [25, 26, 289, 350, 838], "chosen": [25, 26, 44, 94, 120, 222, 601, 604, 616, 720, 788, 797, 809], "while": [25, 26, 33, 51, 55, 68, 74, 78, 91, 92, 97, 119, 135, 173, 241, 242, 262, 263, 332, 355, 358, 359, 361, 402, 422, 463, 464, 495, 600, 601, 602, 604, 608, 617, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 721, 733, 736, 746, 786, 788, 789, 790, 793, 794, 795, 797, 798, 799, 800, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 815, 819, 821, 822, 823, 824, 827, 828, 831, 838, 844, 845], "plai": [25, 26, 360, 434, 783, 789, 793, 799, 809, 812, 822, 838, 841], "critic": [25, 26, 838, 844], "role": [25, 26, 783, 790, 799, 809, 818, 839, 841, 845], "dl": [25, 26], "cnn": [25, 26, 838], "effortlessli": [25, 26], "previous": [25, 26, 575, 606, 773, 789, 794, 805, 807, 812, 817], "pre": [25, 26, 783, 786, 788, 811, 812, 822, 823, 824, 838], "default_devic": [25, 26, 200, 203, 204, 205, 211, 212, 603, 799, 802], "as_n": [25, 26, 48, 49, 68, 71, 72, 152, 153, 154, 155, 156, 157, 163, 190, 191, 203, 602, 603, 798], "certainli": [25, 26, 783, 828, 844], "upon": [25, 26, 43, 790, 800, 808, 812, 815, 823, 837, 838], "unnecessari": [25, 26, 809], "consist": [25, 26, 64, 68, 234, 241, 267, 358, 359, 401, 410, 604, 609, 619, 643, 644, 731, 765, 766, 792, 793, 797, 798, 803, 808, 817, 827, 839], "extend": [25, 26, 51, 74, 361, 370, 461, 499, 794, 795, 798, 801, 802, 804, 809, 813, 823, 835, 838, 844], "infrastructur": [25, 26, 783, 834, 840, 841], "least": [25, 50, 51, 56, 73, 74, 234, 252, 267, 358, 361, 370, 385, 390, 440, 441, 442, 450, 452, 496, 604, 609, 616, 649, 719, 783, 790, 793, 797, 798, 799, 800, 805, 808, 812, 832], "coco": 25, "dataset": [25, 68, 783, 820, 831, 832], "extra": [26, 68, 97, 116, 586, 600, 606, 764, 766, 793, 798, 800, 806, 808, 809, 810, 815, 817, 831, 832, 835, 840], "choic": [26, 43, 51, 64, 74, 87, 359, 361, 426, 444, 619, 736, 738, 783, 789, 797, 808, 809, 820, 829, 832, 838, 845], "structur": [26, 68, 71, 97, 159, 162, 515, 606, 613, 694, 703, 762, 783, 788, 790, 793, 796, 805, 810, 811, 812, 813, 820, 821, 837, 838], "seamlessli": [26, 812], "benefit": [26, 783, 789, 793, 796, 808, 815, 819, 820, 823, 828, 829, 836, 840, 843], "through": [26, 31, 39, 51, 74, 94, 222, 370, 502, 503, 604, 613, 693, 699, 766, 777, 783, 784, 786, 787, 788, 790, 791, 794, 795, 796, 797, 799, 800, 802, 803, 805, 806, 808, 809, 810, 812, 814, 815, 816, 817, 820, 821, 822, 831, 836, 838, 839, 840], "therefor": [26, 31, 47, 50, 51, 56, 73, 74, 120, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 149, 165, 169, 173, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 237, 239, 240, 241, 245, 246, 247, 248, 249, 250, 254, 256, 257, 258, 259, 261, 262, 263, 264, 267, 269, 270, 271, 272, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 301, 315, 316, 321, 322, 324, 327, 352, 355, 358, 359, 361, 370, 376, 377, 378, 379, 381, 382, 383, 389, 394, 395, 396, 401, 411, 454, 461, 462, 464, 472, 496, 499, 503, 511, 519, 520, 525, 529, 531, 533, 535, 549, 567, 572, 596, 601, 602, 604, 606, 607, 608, 609, 611, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 630, 631, 632, 634, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 709, 716, 717, 719, 720, 721, 722, 723, 724, 725, 728, 732, 733, 734, 735, 736, 737, 738, 739, 740, 788, 790, 792, 793, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 808, 809, 810, 812, 813, 815, 817, 819, 821, 823, 827, 835, 838, 844], "wide": [26, 783, 790, 812, 836, 838], "prepar": [26, 39, 41, 44, 783, 797], "plenti": 26, "resourc": [26, 784, 788, 789, 797], "visit": [26, 789, 790, 797], "page": [26, 783, 788, 789, 790, 795, 797, 818, 819, 822, 824, 833], "newli": [27, 28, 40, 42, 48, 71, 146, 512, 602, 606, 790, 794, 797, 808, 812], "randon": [27, 28, 30, 31, 32], "mean_": 27, "std_": 27, "detect": [27, 31, 50, 68, 73, 249, 604, 613, 690, 701, 788, 789, 794, 796, 797, 803, 812, 820, 821], "inspect": [27, 31, 508, 606], "__": [27, 28, 29, 30, 31, 32, 68, 800, 820], "exhibit": [28, 844], "via": [28, 31, 241, 359, 424, 427, 430, 604, 613, 700, 701, 790, 792, 796, 798, 799, 808, 813, 815, 817, 819, 820, 838], "script": [28, 783, 789, 790, 797, 800, 817, 823, 838], "low_level": 28, "chain": [28, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 91, 104, 105, 106, 107, 108, 109, 110, 111, 112, 128, 130, 135, 137, 143, 147, 149, 162, 166, 167, 174, 208, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 295, 296, 297, 298, 299, 301, 320, 321, 322, 324, 326, 328, 335, 336, 342, 344, 346, 347, 348, 381, 382, 383, 401, 431, 432, 433, 434, 435, 436, 437, 445, 446, 467, 470, 476, 478, 479, 480, 481, 483, 496, 497, 498, 499, 507, 510, 511, 513, 514, 518, 519, 520, 521, 522, 525, 526, 529, 531, 533, 534, 535, 537, 538, 541, 549, 550, 564, 565, 567, 569, 571, 572, 585, 591, 596, 612, 613, 622, 623, 624, 625, 631, 632, 637, 638, 639, 644, 645, 646, 647, 649, 650, 652, 654, 656, 657, 663, 668, 669, 670, 671, 675, 678, 679, 680, 681, 682, 685, 686, 687, 688, 692, 703, 710, 711, 712, 713, 715, 718, 721, 722, 723, 724, 725, 729, 730, 733, 735, 736, 738, 739, 740, 762, 769, 793, 796, 807, 809, 821, 822, 823, 838], "un": [28, 164, 602, 798, 817], "partial_comp": 28, "time_funct": 28, "slowest": [28, 51, 58, 74, 81, 361, 451, 611, 678], "express": [28, 50, 51, 73, 74, 92, 215, 219, 221, 222, 231, 233, 273, 279, 284, 344, 355, 604, 770, 801, 809, 817, 822, 838, 839], "fastest": [28, 51, 58, 74, 81, 359, 361, 422, 451, 611, 678], "maxim": [28, 805, 808, 817, 835, 836, 840, 841, 842], "conclud": [29, 813], "collect": [29, 39, 41, 43, 44, 46, 68, 69, 598, 603, 606, 607, 608, 610, 613, 614, 615, 703, 760, 764, 765, 767, 768, 789, 797, 802, 806, 807, 810, 812, 836, 838, 841], "global": [30, 31, 41, 52, 68, 75, 97, 152, 153, 154, 155, 156, 205, 206, 207, 555, 556, 559, 564, 565, 577, 578, 581, 602, 603, 606, 756, 767, 773, 789, 793, 794, 797, 798, 799, 802, 805, 809, 817, 838], "approach": [30, 786, 788, 789, 790, 793, 796, 798, 799, 805, 809, 812, 813, 815, 819, 820, 823, 835, 842, 844], "b": [31, 45, 50, 51, 52, 55, 56, 64, 67, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 95, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 121, 122, 123, 128, 129, 130, 132, 135, 137, 143, 146, 147, 148, 149, 157, 167, 169, 174, 191, 208, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 346, 347, 348, 350, 352, 355, 358, 359, 360, 361, 365, 368, 370, 376, 377, 378, 379, 381, 382, 385, 389, 390, 391, 394, 395, 396, 400, 401, 403, 406, 409, 411, 413, 417, 422, 425, 430, 431, 433, 434, 435, 436, 440, 441, 442, 443, 445, 446, 447, 448, 451, 452, 453, 455, 456, 457, 458, 460, 461, 467, 469, 470, 471, 474, 475, 480, 481, 483, 484, 486, 487, 489, 496, 497, 498, 499, 501, 503, 505, 507, 510, 511, 513, 514, 517, 518, 519, 520, 521, 522, 525, 526, 529, 531, 533, 534, 535, 537, 538, 541, 542, 549, 550, 564, 565, 567, 571, 572, 585, 587, 588, 589, 591, 593, 594, 595, 596, 598, 601, 602, 604, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 637, 638, 639, 640, 642, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 693, 696, 697, 698, 699, 701, 702, 707, 708, 709, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 748, 777, 783, 784, 786, 790, 791, 792, 794, 796, 797, 800, 805, 807, 810, 816, 817, 818, 820, 821, 822, 826, 829, 831, 834], "option": [31, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 162, 164, 174, 186, 190, 202, 205, 206, 207, 208, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 352, 355, 358, 359, 360, 361, 364, 365, 366, 368, 370, 371, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 389, 390, 391, 393, 394, 395, 396, 397, 399, 401, 402, 404, 405, 407, 408, 409, 411, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440, 441, 442, 444, 445, 446, 447, 449, 451, 452, 453, 454, 455, 456, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 513, 514, 516, 518, 519, 520, 521, 522, 525, 526, 528, 529, 530, 531, 533, 534, 535, 537, 538, 541, 546, 549, 550, 554, 564, 565, 567, 569, 571, 572, 573, 585, 587, 588, 589, 591, 593, 594, 595, 596, 598, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 696, 697, 701, 702, 707, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 745, 749, 756, 760, 761, 763, 764, 766, 768, 769, 777, 781, 788, 789, 790, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 812, 813, 815, 817, 822, 823, 831, 832, 833, 838, 844], "prioriti": [31, 68, 773, 790, 799, 808], "normalize_via_oper": 31, "determin": [31, 50, 51, 56, 58, 62, 65, 68, 73, 74, 75, 79, 86, 88, 91, 94, 96, 97, 126, 149, 151, 158, 164, 165, 166, 167, 169, 170, 171, 186, 196, 198, 199, 210, 215, 216, 217, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 231, 232, 234, 237, 239, 241, 247, 248, 249, 250, 251, 255, 256, 257, 258, 259, 264, 267, 272, 276, 279, 280, 281, 282, 283, 284, 285, 288, 339, 344, 355, 358, 359, 360, 370, 393, 401, 411, 431, 496, 507, 510, 531, 532, 536, 537, 538, 539, 540, 541, 567, 585, 601, 602, 603, 604, 606, 609, 611, 612, 617, 620, 638, 639, 640, 642, 646, 647, 649, 651, 652, 654, 655, 657, 658, 663, 665, 666, 672, 687, 688, 689, 721, 722, 723, 724, 725, 739, 740, 750, 756, 763, 767, 796, 798, 799, 801, 805, 809, 812, 814, 815, 827], "might": [31, 52, 92, 173, 517, 602, 606, 786, 788, 789, 790, 797, 798, 800, 803, 806, 809, 812, 813, 815, 817, 819, 820, 825], "think": [31, 788, 790, 797, 800, 815, 839], "uniqu": [31, 41, 51, 52, 62, 74, 75, 85, 358, 359, 361, 404, 425, 460, 461, 473, 542, 606, 612, 613, 617, 687, 688, 689, 692, 696, 721, 722, 723, 724, 750, 783, 792, 796, 805, 809, 810, 811, 815, 823, 827, 841], "rule": [31, 48, 50, 51, 56, 71, 73, 74, 79, 146, 149, 172, 173, 174, 223, 234, 267, 269, 276, 278, 286, 288, 358, 361, 370, 401, 449, 496, 602, 604, 609, 611, 638, 639, 646, 651, 654, 658, 672, 750, 777, 792, 793, 796, 797, 798, 800, 803, 804, 805, 807, 812, 815, 839], "broadcast": [31, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 91, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 142, 143, 146, 147, 148, 208, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 294, 295, 296, 297, 298, 299, 300, 301, 316, 321, 322, 323, 324, 325, 326, 329, 331, 333, 335, 337, 338, 339, 340, 344, 350, 352, 355, 358, 359, 360, 361, 364, 365, 370, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 390, 391, 393, 394, 395, 396, 399, 401, 405, 407, 408, 416, 417, 420, 421, 423, 431, 432, 433, 434, 436, 437, 443, 446, 449, 454, 462, 463, 464, 465, 467, 470, 472, 476, 479, 480, 481, 482, 483, 485, 486, 496, 497, 498, 499, 502, 503, 504, 505, 513, 514, 518, 519, 520, 525, 526, 535, 549, 550, 587, 588, 591, 593, 594, 595, 596, 598, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 649, 650, 652, 653, 654, 655, 656, 658, 660, 661, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 686, 709, 710, 711, 712, 713, 715, 716, 717, 718, 720, 724, 725, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 748, 777, 796, 798, 800, 801, 802, 812, 813, 817], "elementwis": [31, 51, 59, 74, 82, 292, 294, 347, 350, 609, 614, 664, 709, 805, 813, 817], "must": [31, 39, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 94, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 146, 147, 148, 207, 208, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 294, 295, 296, 297, 298, 299, 300, 301, 303, 312, 313, 316, 317, 318, 321, 322, 323, 324, 325, 327, 329, 331, 333, 335, 337, 338, 339, 340, 344, 347, 350, 352, 355, 358, 359, 360, 361, 364, 365, 368, 370, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 389, 390, 391, 393, 394, 395, 396, 399, 401, 402, 403, 405, 407, 408, 410, 416, 417, 420, 421, 422, 423, 428, 431, 432, 433, 434, 436, 437, 440, 441, 442, 446, 447, 449, 451, 452, 453, 454, 456, 460, 462, 463, 464, 465, 467, 469, 470, 472, 474, 479, 480, 481, 482, 483, 485, 486, 489, 496, 497, 498, 499, 505, 513, 514, 518, 519, 520, 525, 526, 528, 535, 549, 550, 586, 587, 588, 591, 593, 594, 595, 596, 598, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 745, 763, 764, 768, 770, 787, 788, 789, 790, 792, 793, 797, 798, 799, 800, 801, 802, 804, 805, 806, 808, 809, 812, 813, 814, 815, 817, 821, 822, 827, 829, 832, 833, 839, 845], "taken": [31, 51, 56, 74, 79, 327, 355, 358, 402, 609, 642, 788, 797, 809, 813, 822, 839], "account": [31, 41, 43, 51, 58, 74, 81, 281, 361, 451, 604, 611, 678, 763, 777, 789, 797, 801, 809, 813, 831], "rather": [31, 52, 68, 75, 120, 207, 537, 538, 541, 601, 603, 606, 786, 790, 792, 796, 798, 801, 809, 810, 812, 813, 822, 823, 828, 834, 837, 838], "fact": [31, 91, 790, 792, 797, 809, 812, 817, 820], "pure": [31, 41, 783, 801, 804, 809, 815, 819, 822, 823, 838, 844, 845], "consum": [31, 745, 796, 797, 804, 810, 812], "conflict": [31, 789, 790, 797, 809, 820], "error": [31, 42, 44, 50, 51, 55, 68, 73, 74, 78, 104, 236, 284, 321, 322, 329, 355, 359, 360, 370, 371, 424, 430, 431, 433, 503, 506, 553, 598, 604, 606, 608, 609, 619, 637, 657, 660, 732, 734, 750, 765, 766, 768, 780, 784, 787, 789, 790, 792, 793, 794, 797, 798, 799, 800, 803, 804, 809, 812, 813, 814, 819, 823, 829, 838], "thrown": [31, 535, 606, 789, 793, 799, 802, 803, 823], "doesn": [31, 535, 553, 606, 743, 764, 789, 794, 796, 797, 798, 799, 800, 803, 805, 807, 812, 815, 817, 823, 831, 836], "consider": [31, 788, 800, 804, 815, 827, 835, 836], "combin": [31, 51, 68, 74, 97, 358, 370, 391, 402, 496, 523, 524, 606, 609, 639, 649, 790, 793, 796, 797, 798, 800, 802, 805, 812, 822, 838], "effect": [31, 47, 51, 53, 64, 74, 76, 87, 133, 358, 360, 393, 434, 587, 595, 601, 607, 608, 619, 634, 736, 738, 748, 751, 788, 793, 796, 797, 801, 804, 808, 810, 815, 823, 828], "explain": [31, 51, 74, 358, 391, 402, 783, 788, 789, 790, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 812, 813, 815, 817, 818, 819, 820, 821, 822, 834, 841, 844], "necessari": [31, 47, 51, 70, 74, 81, 122, 234, 267, 361, 440, 441, 442, 447, 449, 450, 451, 452, 453, 460, 474, 558, 580, 604, 606, 674, 675, 676, 678, 680, 681, 683, 685, 783, 789, 793, 794, 796, 798, 800, 808, 809, 812, 814, 815, 831, 832], "standalon": [32, 788, 793, 812, 825, 834, 839, 844, 845], "These": [32, 51, 74, 359, 361, 370, 410, 460, 496, 608, 609, 634, 643, 644, 783, 787, 788, 789, 790, 792, 796, 798, 800, 801, 804, 805, 808, 809, 812, 817, 818, 820, 821, 822, 823, 825, 827, 828, 829, 832, 838, 842, 844, 845], "dynam": [32, 611, 678, 773, 791, 797, 798, 799, 808, 809, 814, 817, 831, 838, 842], "static": [32, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 100, 101, 123, 307, 358, 378, 391, 396, 404, 424, 430, 467, 477, 567, 601, 608, 634, 654, 761, 766, 809, 814, 823, 837, 838, 839], "control": [33, 51, 74, 141, 290, 315, 350, 352, 358, 361, 381, 382, 383, 444, 469, 553, 601, 606, 609, 641, 762, 796, 798, 799, 807, 808, 809, 810, 815, 819, 820, 825, 831, 838, 844], "flow": [33, 796, 831, 838, 839], "statement": [33, 38, 797, 808, 812, 815, 823, 831, 832], "opposit": 33, "exclud": [33, 64, 74, 87, 120, 141, 315, 352, 497, 498, 601, 615, 713, 729, 748, 751, 773, 800, 817, 831], "todo": [34, 35, 36, 41, 44, 74, 498, 788, 798, 809], "aim": [37, 786, 790, 792, 806, 809, 812, 816, 836, 838, 841], "interfac": [37, 70, 128, 601, 819, 822, 823, 825, 828, 834, 835, 836, 837, 838, 842, 845], "set_framework": [37, 44], "44": [37, 41, 50, 51, 60, 73, 74, 83, 220, 267, 277, 281, 282, 325, 355, 358, 378, 379, 604, 608, 609, 613, 616, 619, 631, 654, 698, 711, 712, 720, 731], "45": [37, 39, 41, 50, 51, 64, 73, 74, 76, 78, 83, 97, 218, 222, 234, 277, 278, 329, 342, 355, 358, 370, 379, 389, 400, 497, 503, 587, 593, 604, 607, 609, 611, 619, 654, 680, 712, 713, 731, 748], "46": [37, 39, 41, 51, 60, 74, 78, 83, 132, 257, 278, 302, 352, 358, 377, 395, 396, 601, 604, 613, 691, 711, 712], "47": [37, 41, 50, 51, 56, 60, 73, 74, 75, 76, 78, 83, 223, 281, 358, 370, 377, 395, 396, 497, 518, 519, 591, 604, 606, 607, 608, 609, 615, 632, 646, 712, 713], "underneath": [37, 797, 836], "sai": [37, 788, 789, 806, 819, 829], "clip": [37, 50, 51, 58, 73, 74, 75, 81, 265, 266, 361, 444, 469, 513, 514, 604, 606, 611, 796, 805, 807, 808, 820, 822], "a_min": 37, "a_max": 37, "tensforflow": 37, "clip_by_valu": [37, 822], "clip_value_min": 37, "clip_value_max": 37, "clamp": [37, 51, 74, 292, 350, 822], "min": [37, 41, 48, 51, 52, 56, 64, 71, 74, 75, 79, 87, 139, 141, 159, 162, 266, 315, 317, 322, 352, 355, 359, 361, 411, 466, 519, 549, 550, 564, 601, 602, 604, 606, 609, 619, 650, 656, 659, 660, 666, 783], "max": [37, 39, 48, 51, 52, 56, 64, 71, 74, 75, 79, 87, 159, 162, 265, 321, 355, 358, 359, 361, 376, 377, 378, 394, 395, 396, 397, 399, 401, 411, 466, 468, 513, 514, 519, 535, 549, 550, 602, 604, 606, 609, 619, 650, 652, 655, 748, 764, 768, 797, 809], "n": [37, 40, 41, 42, 44, 47, 50, 51, 55, 56, 58, 60, 61, 64, 65, 73, 74, 78, 79, 81, 83, 84, 87, 88, 91, 96, 133, 139, 140, 141, 214, 284, 286, 315, 316, 327, 352, 355, 358, 359, 361, 364, 365, 368, 370, 372, 373, 374, 379, 380, 385, 386, 389, 390, 391, 399, 400, 401, 402, 403, 411, 412, 421, 423, 425, 430, 442, 447, 450, 454, 456, 467, 474, 476, 477, 478, 482, 483, 484, 485, 486, 489, 496, 505, 601, 604, 608, 609, 611, 613, 615, 616, 619, 620, 621, 622, 623, 624, 626, 628, 630, 634, 639, 642, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 663, 664, 665, 666, 673, 674, 676, 682, 686, 698, 711, 712, 713, 719, 733, 735, 736, 737, 738, 739, 740, 764, 767, 777, 783, 791, 795, 797, 812, 824, 832], "sole": [37, 804, 813, 837, 838, 839], "49": [37, 41, 51, 60, 74, 78, 79, 281, 358, 359, 370, 379, 389, 400, 422, 497, 604, 619, 664, 712, 731], "51": [37, 41, 50, 51, 73, 74, 75, 83, 229, 267, 280, 359, 379, 430, 604, 713, 748], "93": [37, 51, 73, 75, 83, 192, 281, 345, 355, 518, 519, 603, 606, 712, 713], "devicearrai": [37, 793, 809, 817, 819], "concaten": [37, 51, 52, 58, 74, 79, 361, 446, 518, 522, 606, 608, 611, 634, 654, 672, 748, 810, 815, 817, 820], "accept": [37, 46, 47, 50, 51, 56, 69, 73, 74, 120, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 149, 165, 169, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 237, 239, 240, 241, 245, 246, 247, 248, 249, 250, 251, 254, 256, 257, 258, 259, 261, 262, 263, 264, 267, 269, 270, 271, 272, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 301, 315, 316, 321, 322, 324, 327, 328, 349, 352, 355, 357, 358, 359, 361, 370, 376, 377, 378, 379, 381, 382, 383, 389, 394, 395, 396, 401, 411, 461, 496, 499, 503, 511, 519, 520, 525, 529, 531, 533, 535, 549, 567, 572, 596, 601, 602, 604, 606, 607, 608, 609, 611, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 630, 631, 632, 634, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 709, 716, 717, 719, 720, 721, 722, 723, 724, 725, 728, 732, 733, 734, 735, 736, 737, 738, 739, 740, 764, 766, 783, 788, 789, 790, 793, 796, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 812, 813, 815, 819, 825, 836], "jax_concat": 37, "tf_concat": 37, "np_concat": 37, "torch_concat": 37, "85": [37, 45, 51, 60, 67, 73, 74, 76, 78, 83, 97, 106, 219, 228, 229, 273, 289, 290, 291, 350, 370, 497, 564, 591, 598, 604, 606, 607, 608, 615, 632, 711, 712, 713], "86": [37, 60, 74, 83, 358, 370, 389, 497, 587, 607, 712, 713], "mymodel": [37, 820], "87": [37, 76, 78, 228, 257, 358, 370, 400, 401, 497, 587, 604, 607, 748], "88": [37, 76, 83, 106, 370, 497, 591, 598, 607, 609, 615, 619, 654, 713, 731], "x_in": [37, 820, 821, 822], "90": [37, 39, 41, 50, 51, 73, 74, 233, 273, 277, 345, 355, 361, 370, 467, 497, 604, 609, 619, 654, 731, 828], "reduce_mean": [37, 783, 820, 821, 822], "91": [37, 51, 78, 83, 345, 355, 400, 608, 609, 615, 619, 632, 654, 712, 731], "49040043354034424": 37, "48975786566734314": 37, "4892795979976654": 37, "48886892199516296": 37, "4884953498840332": 37, "4881443977355957": 37, "4878086447715759": 37, "48748287558555603": 37, "48716384172439575": 37, "48684927821159363": 37, "48653748631477356": 37, "48622724413871765": 37, "4859171509742737": 37, "48560672998428345": 37, "48529526591300964": 37, "4849821627140045": 37, "48466697335243225": 37, "4843493402004242": 37, "4840289056301117": 37, "4837053418159485": 37, "4833785891532898": 37, "4830484390258789": 37, "22": [37, 39, 41, 44, 45, 50, 51, 52, 60, 64, 67, 74, 75, 78, 83, 107, 112, 229, 237, 358, 359, 361, 366, 370, 376, 377, 379, 394, 395, 396, 400, 403, 409, 444, 487, 497, 519, 550, 585, 598, 604, 608, 609, 613, 616, 619, 631, 632, 642, 647, 654, 658, 698, 708, 711, 712, 713, 720, 730, 731, 789, 796, 802], "48271444439888": 37, "23": [37, 39, 41, 50, 51, 56, 60, 70, 73, 74, 75, 78, 83, 130, 229, 232, 249, 250, 251, 274, 276, 277, 278, 280, 287, 324, 325, 355, 358, 361, 370, 376, 377, 379, 389, 394, 395, 396, 400, 403, 444, 497, 503, 601, 604, 608, 609, 613, 616, 627, 642, 646, 650, 658, 660, 661, 691, 698, 702, 711, 712, 713, 720, 783, 797, 812, 817], "48237672448158264": 37, "48203518986701965": 37, "25": [37, 39, 40, 41, 50, 51, 52, 56, 57, 60, 64, 67, 73, 74, 75, 78, 79, 82, 83, 87, 96, 97, 112, 131, 217, 218, 228, 234, 236, 247, 252, 267, 272, 275, 277, 280, 281, 282, 287, 303, 352, 360, 370, 400, 431, 434, 436, 497, 505, 533, 534, 550, 564, 601, 604, 606, 609, 610, 613, 614, 619, 622, 638, 642, 647, 664, 669, 691, 698, 702, 709, 711, 712, 713, 730, 731, 733, 738, 796, 807], "48168954253196716": 37, "26": [37, 39, 41, 44, 50, 51, 59, 60, 74, 75, 76, 83, 229, 234, 280, 358, 359, 379, 414, 422, 533, 587, 604, 606, 607, 608, 609, 613, 614, 619, 630, 642, 654, 661, 691, 709, 711, 712, 731], "4813397228717804": 37, "27": [37, 39, 44, 50, 51, 56, 60, 73, 74, 78, 79, 83, 87, 228, 229, 232, 272, 280, 281, 331, 355, 358, 379, 389, 534, 604, 606, 609, 613, 619, 649, 654, 664, 691, 698, 712, 731, 735, 748], "4809857904911041": 37, "48062753677368164": 37, "29": [37, 39, 41, 44, 56, 73, 75, 76, 78, 83, 222, 370, 400, 497, 518, 519, 589, 593, 604, 606, 607, 609, 646, 711, 712, 713], "48026490211486816": 37, "30": [37, 39, 50, 51, 74, 75, 83, 87, 97, 267, 334, 342, 355, 358, 361, 379, 389, 400, 444, 466, 487, 518, 520, 525, 526, 533, 534, 550, 559, 564, 604, 606, 609, 613, 619, 647, 654, 699, 711, 712, 730, 731, 735, 750, 763, 797], "479898065328598": 37, "31": [37, 39, 40, 44, 45, 50, 51, 73, 74, 75, 78, 83, 107, 112, 132, 228, 259, 267, 358, 361, 370, 378, 379, 444, 497, 513, 598, 601, 604, 606, 712, 713, 820], "47952669858932495": 37, "4791509211063385": 37, "33": [37, 39, 40, 50, 60, 64, 73, 75, 76, 78, 220, 221, 228, 277, 358, 359, 361, 370, 377, 399, 400, 427, 444, 497, 514, 564, 591, 604, 606, 607, 608, 609, 613, 619, 631, 632, 654, 708, 711, 731, 738, 748, 751], "4787706732749939": 37, "34": [37, 39, 73, 74, 75, 83, 162, 232, 259, 280, 358, 370, 400, 503, 518, 519, 602, 604, 606, 608, 609, 615, 632, 651, 712, 713, 799], "47838595509529114": 37, "35": [37, 45, 55, 56, 67, 73, 74, 78, 79, 83, 107, 222, 281, 358, 379, 389, 604, 608, 609, 616, 619, 632, 639, 646, 712, 720, 731], "4779967665672302": 37, "36": [37, 41, 50, 51, 55, 64, 74, 75, 79, 222, 277, 278, 334, 355, 358, 359, 370, 379, 389, 414, 497, 518, 519, 565, 604, 606, 609, 613, 619, 632, 651, 654, 664, 701, 731], "47760307788848877": 37, "37": [37, 45, 50, 51, 67, 73, 74, 78, 96, 107, 220, 228, 277, 280, 284, 366, 400, 487, 604, 608, 609, 613, 615, 632, 651, 698, 712, 797], "4772048890590668": 37, "38": [37, 39, 41, 44, 48, 51, 73, 74, 83, 159, 284, 342, 355, 358, 370, 377, 396, 399, 400, 497, 602, 604, 609, 651, 748, 800], "47680220007896423": 37, "47639501094818115": 37, "40": [37, 39, 41, 51, 52, 73, 74, 75, 83, 87, 97, 228, 232, 252, 281, 334, 355, 358, 361, 377, 379, 389, 395, 466, 518, 520, 525, 526, 550, 564, 586, 589, 604, 606, 607, 609, 613, 619, 647, 654, 699, 712, 731, 735, 783, 797], "47598329186439514": 37, "41": [37, 39, 44, 50, 51, 56, 73, 74, 75, 78, 79, 107, 221, 229, 236, 267, 281, 358, 359, 366, 370, 377, 395, 400, 419, 487, 497, 513, 514, 598, 604, 606, 609, 619, 638, 646, 737], "4755673110485077": 37, "4751465618610382": 37, "4747215211391449": 37, "4742920398712158": 37, "47385817766189575": 37, "47341999411582947": 37, "47297725081443787": 37, "4725303053855896": 37, "47207894921302795": 37, "47162333130836487": 37, "47116345167160034": 37, "52": [37, 50, 73, 75, 76, 83, 222, 232, 234, 370, 497, 518, 519, 534, 587, 604, 606, 607, 608, 609, 619, 632, 654, 713, 731, 777], "470699280500412": 37, "53": [37, 56, 60, 73, 78, 153, 209, 239, 400, 590, 592, 602, 603, 607, 609, 614, 646, 709, 713], "47023090720176697": 37, "54": [37, 48, 50, 55, 73, 74, 78, 83, 162, 231, 232, 237, 252, 281, 287, 302, 352, 358, 370, 379, 389, 497, 604, 608, 609, 619, 632, 651, 654, 711, 712, 713, 731, 797, 800], "4697583019733429": 37, "55": [37, 45, 74, 83, 112, 228, 287, 370, 497, 533, 604, 606, 609, 615, 619, 647, 654, 712, 713, 731, 792], "46928152441978455": 37, "56": [37, 39, 50, 51, 55, 60, 73, 74, 78, 132, 267, 281, 284, 287, 358, 379, 389, 587, 601, 604, 607, 608, 609, 613, 619, 623, 625, 627, 632, 654, 690, 712, 731, 800], "46880054473876953": 37, "57": [37, 39, 50, 51, 73, 74, 192, 215, 216, 219, 220, 222, 232, 233, 273, 289, 290, 350, 603, 604], "4683155119419098": 37, "58": [37, 258, 513, 604, 606], "4678264260292053": 37, "59": [37, 50, 229, 370, 497], "46733325719833374": 37, "46683603525161743": 37, "61": [37, 39, 50, 51, 56, 73, 74, 76, 80, 83, 220, 255, 257, 282, 379, 587, 604, 607, 608, 609, 610, 630, 646, 668, 670, 713], "4663347601890564": 37, "62": [37, 39, 45, 67, 73, 83, 107, 252, 280, 604, 614, 615, 709, 711, 713], "4658295214176178": 37, "63": [37, 41, 50, 67, 73, 78, 79, 112, 273, 280, 281, 358, 370, 379, 389, 400, 497, 604, 609, 613, 619, 638, 654, 691, 702, 731], "465320348739624": 37, "4648073613643646": 37, "65": [37, 39, 41, 44, 73, 76, 83, 228, 267, 533, 587, 604, 606, 607, 609, 619, 654, 712, 713, 731, 797], "46429020166397095": 37, "66": [37, 39, 41, 64, 74, 75, 76, 358, 389, 518, 519, 591, 606, 607, 609, 619, 654, 731], "4637692868709564": 37, "46324464678764343": 37, "68": [37, 41, 44, 50, 83, 107, 129, 222, 358, 379, 389, 598, 601, 604, 609, 614, 665, 709, 712, 713], "4627160429954529": 37, "4621836841106415": 37, "70": [37, 39, 51, 74, 75, 358, 379, 389, 526, 550, 609, 619, 654, 731, 828], "4616474211215973": 37, "71": [37, 50, 73, 78, 233, 273, 400, 604], "46110764145851135": 37, "72": [37, 51, 60, 74, 76, 239, 334, 355, 358, 379, 389, 591, 604, 607, 609, 619, 654, 712, 731], "460563987493515": 37, "73": [37, 50, 79, 281, 370, 497, 609, 615, 638, 712, 812], "4600166976451874": 37, "74": [37, 39, 50, 83, 229, 259, 604, 609, 651], "45946577191352844": 37, "45891112089157104": 37, "45835286378860474": 37, "77": [37, 41, 75, 565, 609, 619, 654, 731], "4577910006046295": 37, "78": [37, 53, 278, 593, 604, 607, 609, 615, 619, 654, 712, 731], "45722562074661255": 37, "79": [37, 39, 51, 52, 74, 75, 78, 83, 96, 234, 358, 379, 389, 400, 513, 514, 604, 606, 713], "45665669441223145": 37, "80": [37, 51, 74, 334, 355, 359, 370, 422, 497, 609, 613, 619, 654, 701, 731, 828], "4560841917991638": 37, "81": [37, 41, 50, 56, 71, 73, 79, 83, 162, 232, 257, 258, 282, 370, 497, 602, 604, 609, 613, 615, 619, 646, 651, 664, 698, 713, 731, 812], "4555082619190216": 37, "82": [37, 39, 44, 45, 50, 76, 83, 107, 220, 370, 497, 587, 607, 712, 713, 786], "45492875576019287": 37, "83": [37, 56, 78, 83, 281, 358, 370, 379, 389, 400, 497, 604, 608, 609, 632, 646, 712], "45434585213661194": 37, "84": [37, 55, 64, 73, 83, 162, 192, 257, 602, 603, 609, 614, 619, 632, 654, 709, 712, 713, 731], "45375964045524597": 37, "4531698524951935": 37, "4525766670703888": 37, "45198020339012146": 37, "4513803720474243": 37, "4507772624492645": 37, "4501707851886749": 37, "4495610296726227": 37, "92": [37, 41, 51, 52, 83, 345, 355, 585, 595, 607, 609, 640, 712, 713], "4489481747150421": 37, "44833192229270935": 37, "94": [37, 50, 51, 53, 60, 73, 74, 76, 83, 201, 277, 278, 345, 355, 389, 591, 603, 607, 713], "4477125108242035": 37, "95": [37, 51, 53, 56, 60, 67, 76, 78, 83, 104, 345, 355, 400, 587, 591, 595, 598, 607, 609, 615, 646, 712, 713], "44708991050720215": 37, "96": [37, 51, 53, 73, 74, 75, 83, 231, 252, 284, 345, 355, 358, 379, 518, 519, 591, 604, 606, 607, 609, 619, 654, 713, 731], "44646409153938293": 37, "97": [37, 51, 53, 73, 76, 83, 220, 345, 355, 591, 604, 607, 712], "44583529233932495": 37, "98": [37, 45, 51, 53, 60, 67, 73, 76, 83, 107, 232, 280, 345, 355, 591, 598, 607, 609, 613, 616, 619, 654, 691, 702, 711, 713, 720, 731], "4452032148838043": 37, "99": [37, 50, 51, 53, 71, 73, 83, 129, 216, 231, 345, 355, 564, 591, 601, 604, 606, 607, 613, 619, 694, 702, 712, 731], "44456806778907776": 37, "4439": 37, "selectbackward0": 37, "hope": [37, 823, 828, 844], "short": [37, 51, 74, 404, 608, 633, 788, 790, 798, 817, 821], "ivy_compil": 38, "ic": 38, "produc": [38, 51, 52, 55, 74, 78, 294, 300, 303, 350, 352, 358, 404, 608, 637, 748, 788, 798, 803, 808, 810, 812, 813, 831, 839, 841], "numer": [38, 47, 48, 50, 51, 52, 56, 60, 61, 64, 71, 73, 74, 75, 79, 83, 84, 86, 96, 97, 133, 146, 214, 217, 230, 234, 239, 240, 241, 248, 249, 250, 253, 262, 263, 267, 269, 270, 271, 272, 276, 277, 278, 282, 283, 287, 288, 358, 360, 365, 370, 401, 432, 483, 496, 555, 556, 564, 565, 577, 578, 601, 602, 604, 606, 609, 615, 616, 619, 639, 646, 649, 654, 657, 659, 661, 663, 665, 711, 712, 713, 715, 716, 717, 719, 720, 725, 732, 735, 737, 748, 749, 750, 751, 763, 786, 798, 807, 809, 810, 812, 813, 814, 815, 817, 821, 835, 838, 844], "anyth": [38, 51, 74, 370, 502, 503, 790, 802, 812, 813, 838, 839], "affect": [38, 44, 51, 360, 435, 797, 809], "intermedi": [38, 836, 837, 838, 839, 844], "variabl": [38, 40, 41, 43, 51, 52, 53, 59, 68, 74, 75, 76, 82, 116, 117, 119, 359, 365, 370, 426, 484, 495, 496, 511, 535, 536, 537, 538, 541, 567, 588, 589, 591, 593, 594, 595, 600, 606, 607, 609, 612, 614, 658, 687, 688, 689, 709, 745, 756, 761, 762, 763, 764, 765, 766, 767, 768, 769, 790, 794, 798, 801, 804, 807, 808, 812, 813, 817, 820, 821, 822, 823, 824, 831, 839], "original_fn": 38, "100000": 38, "var": [38, 64, 87, 89, 116, 117, 118, 119, 600, 612, 619, 687, 688, 770, 789, 800, 817], "co": [38, 39, 50, 52, 73, 232, 237, 239, 280, 522, 604, 606, 787, 798, 817, 828], "sin": [38, 50, 52, 73, 232, 237, 239, 280, 522, 604, 606, 793, 817], "tan": [38, 50, 73, 509, 604, 606, 801, 804, 805, 808, 809, 817], "comp_fn": 38, "compile_graph": [38, 44], "expected_result": 38, "compiled_result": 38, "irrelev": [38, 797, 798, 800], "opeat": 38, "_layer": [38, 817], "net": [38, 43, 44, 817, 822, 828, 829], "compiled_net": 38, "proceed": 39, "latest": [39, 41, 50, 51, 73, 74, 149, 237, 247, 248, 263, 321, 322, 355, 358, 370, 401, 496, 602, 604, 609, 611, 619, 657, 658, 686, 736, 764, 783, 788, 789, 790, 792, 794, 797, 801, 813, 823, 824, 832, 843], "pypi": [39, 41, 44, 788, 789, 813, 823], "pkg": [39, 41, 44], "wheel": [39, 41, 44, 827], "public": [39, 41, 44, 515, 606, 797, 807, 819, 841], "revis": [39, 41, 790], "tmp": [39, 41, 562, 584, 606], "req": [39, 41], "tabqrujw": 39, "command": [39, 41, 783, 785, 789, 792, 795, 797, 803, 824], "filter": [39, 41, 43, 51, 55, 74, 78, 305, 306, 352, 358, 378, 396, 608, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 750, 764, 783, 794, 797], "quiet": [39, 41], "resolv": [39, 41, 51, 64, 241, 370, 497, 498, 604, 611, 619, 674, 729, 730, 735, 737, 790, 795, 798, 803, 817], "commit": [39, 41, 786, 788, 792, 800, 811, 812], "f3be3702c9fab1c9fa97c743813a4bdb39525705": 39, "metadata": [39, 41, 44, 808], "setup": [39, 41, 44, 789, 790, 795, 797], "done": [39, 41, 44, 609, 645, 787, 788, 789, 790, 792, 795, 797, 799, 800, 803, 808, 809, 812, 820, 831, 832, 838], "satisfi": [39, 41, 44, 51, 358, 359, 380, 411, 798, 800], "core": [39, 40, 41, 43, 44, 51, 74, 91, 94, 198, 359, 415, 424, 429, 430, 603, 789, 799, 812, 822, 827, 836, 837, 838, 839, 843, 845], "einop": [39, 41, 44, 52, 75, 518, 519, 520, 606, 798, 828], "py3": [39, 41, 44], "whl": [39, 40, 41, 44], "kb": [39, 41, 44], "psutil": [39, 41, 44], "cp39": [39, 41], "manylinux_2_12_x86_64": [39, 41], "manylinux2010_x86_64": [39, 41], "manylinux_2_17_x86_64": [39, 41, 789], "manylinux2014_x86_64": [39, 40, 41], "mb": [39, 41, 44, 797], "eta": [39, 41, 44], "00": [39, 41, 44, 51, 52, 56, 74, 75, 79, 239, 300, 329, 352, 358, 379, 385, 389, 390, 522, 565, 604, 606, 609, 610, 645, 656, 668, 748, 803, 812], "termcolor": [39, 41, 44, 68, 97], "tar": [39, 40, 41, 44], "gz": [39, 40, 41, 44], "colorama": [39, 41], "py2": [39, 41], "nvidia": [39, 41, 44, 842, 843], "495": [39, 41], "nvidia_ml_pi": [39, 41], "diskcach": 39, "pypars": [39, 41, 44], "ivy_cor": [39, 41, 44, 789], "1338326": 39, "sha256": [39, 41, 44], "e5c4205c80116b781373daf4502d61881235c5e3eb0d55096ab07dcc6eb66bec": 39, "store": [39, 41, 44, 48, 51, 52, 56, 58, 68, 71, 74, 75, 79, 81, 148, 358, 359, 402, 409, 413, 425, 429, 522, 606, 609, 611, 663, 680, 745, 746, 764, 765, 766, 785, 790, 793, 794, 796, 801, 806, 808, 809, 810, 817, 819, 820, 821, 825, 831], "directori": [39, 40, 41, 44, 562, 584, 603, 606, 785, 788, 789, 790, 795, 797, 809, 812, 824], "ephem": [39, 41], "cach": [39, 41, 44, 189, 512, 603, 606, 773, 803, 805, 808, 812], "njrc_e6b": 39, "07": [39, 41, 53, 57, 73, 76, 80, 83, 222, 255, 258, 259, 278, 358, 389, 577, 587, 588, 590, 591, 592, 593, 604, 606, 607, 610, 669, 670, 712, 765, 768, 821], "2e": [39, 41], "ae2d7c5ce8708e605368a33e08d57d1de8e107e3db157c3063": [39, 41], "4845": [39, 41], "a8cde63eca203d3bd7f900fa32f44dbd038476606a3836de14caf2b0a5ff7460": 39, "root": [39, 40, 41, 44, 50, 73, 281, 604, 762, 785, 789, 790, 795, 809, 820], "b6": [39, 41], "0d": [39, 41], "0d1bbd99855f99cb2f6c2e5ff96f8023fad8ec367695f7d72d": [39, 41], "successfulli": [39, 41, 44, 766, 789, 793], "attempt": [39, 41, 44, 789, 814, 823], "uninstal": [39, 41, 44], "found": [39, 41, 42, 44, 56, 58, 62, 68, 74, 79, 81, 85, 97, 195, 370, 446, 497, 603, 613, 642, 649, 682, 701, 721, 762, 788, 789, 790, 793, 794, 795, 796, 798, 799, 801, 803, 806, 808, 809, 824, 840], "cannot": [39, 40, 41, 44, 51, 284, 440, 441, 442, 604, 790, 792, 794, 798, 809, 817, 822, 844], "vnd": [39, 41, 44], "json": [39, 41, 44, 68, 789, 820], "psst": 39, "cv2": [39, 41, 43, 820], "pickl": [39, 40, 68, 766, 796, 820], "imageio": 39, "urllib": [39, 44], "_src": 39, "xla_bridg": 39, "tpu": [39, 188, 194, 205, 210, 603, 799, 838, 841], "fall": [39, 765, 766, 768, 788, 798, 816], "back": [39, 51, 58, 74, 81, 361, 451, 471, 551, 574, 606, 608, 611, 634, 678, 763, 765, 766, 768, 789, 793, 798, 799, 802, 806, 807, 814, 816, 823, 824, 828, 836, 840], "tf_cpp_min_log_level": 39, "rerun": 39, "info": [39, 780, 783, 795, 801, 803], "mkdir": [39, 40, 41, 789, 797], "perceiv": [39, 40], "touch": 39, "io_processor": 39, "position_encod": 39, "absl": 39, "jmp": 39, "tabul": 39, "2023": 39, "04": [39, 40, 47, 53, 67, 71, 74, 76, 106, 107, 132, 159, 239, 555, 587, 588, 593, 598, 601, 602, 604, 606, 607, 748, 789, 812], "185": [39, 67], "199": [39, 220, 604], "111": [39, 613, 708], "133": [39, 55, 514, 606, 632], "108": [39, 608, 619, 632, 731], "109": [39, 56, 609, 646], "connect": [39, 764, 783, 785, 789, 795, 811, 821, 822, 828, 836], "443": [39, 279, 604], "sent": 39, "await": 39, "respons": [39, 790, 797, 798], "200": [39, 75, 78, 228, 358, 381, 382, 526, 550, 604, 606, 777, 820], "ok": [39, 789], "length": [39, 40, 47, 51, 57, 58, 68, 74, 80, 81, 91, 92, 97, 120, 128, 133, 302, 305, 306, 319, 327, 352, 355, 358, 359, 361, 365, 368, 379, 380, 385, 386, 389, 390, 391, 401, 402, 404, 416, 423, 461, 469, 484, 489, 586, 601, 606, 608, 609, 610, 611, 617, 634, 659, 660, 668, 678, 721, 748, 762, 764, 812, 820], "29359": 39, "29k": 39, "plain": 39, "67k": 39, "002": 39, "110": 39, "30179": 39, "47k": 39, "8107": 39, "9k": 39, "92k": 39, "functool": [39, 802, 809, 819], "itertool": 39, "matplotlib": [39, 40, 41, 44], "pyplot": [39, 40, 41, 44], "plt": [39, 40, 41, 44], "preprocessor": 39, "vector": [39, 47, 51, 52, 55, 56, 74, 75, 78, 79, 91, 92, 94, 133, 358, 359, 361, 365, 370, 380, 410, 415, 421, 423, 428, 461, 463, 465, 484, 496, 514, 518, 535, 586, 601, 606, 608, 609, 632, 634, 639, 643, 644, 646, 649, 654, 659, 660, 664, 665, 666, 667, 748, 764, 838], "perceiverbackbon": 39, "input_preprocessor": 39, "_input_preprocessor": 39, "_encod": 39, "__call__": [39, 745, 764, 765, 766, 783, 832], "is_train": 39, "po": 39, "input_mask": 39, "network_input_is_1d": 39, "_input_is_1d": 39, "queri": [39, 40, 55, 68, 78, 192, 206, 528, 554, 603, 606, 608, 634, 637, 764, 796, 798, 819, 838], "decod": [39, 820], "cross": [39, 41, 56, 57, 79, 80, 92, 609, 610, 668, 669, 670, 783, 797, 798], "attend": [39, 608, 634], "encoder_queri": 39, "latent": [39, 612, 688, 689], "imagepreprocessor": 39, "deal": [39, 786, 799, 805, 807, 809, 823], "image_s": 39, "fourier_pos_config": 39, "position_encoding_typ": 39, "fourier": [39, 51, 74, 358, 380, 385, 386, 390, 391, 401, 402, 404, 522, 606], "fourier_position_encoding_kwarg": 39, "concat_po": 39, "max_resolut": 39, "num_band": [39, 52, 75, 522, 606], "sine_onli": 39, "prep_typ": 39, "spatial_downsampl": 39, "cross_attend_widening_factor": 39, "cross_attention_shape_for_attn": 39, "kv": 39, "dropout_prob": 39, "num_block": 39, "num_cross_attend_head": 39, "num_self_attend_head": 39, "num_self_attends_per_block": 39, "num_z_channel": 39, "self_attend_widening_factor": 39, "use_query_residu": 39, "z_index_dim": 39, "z_pos_enc_init_scal": 39, "02": [39, 47, 52, 53, 59, 60, 73, 76, 83, 132, 219, 220, 259, 358, 379, 389, 390, 564, 565, 587, 588, 593, 601, 604, 606, 607, 610, 614, 615, 668, 709, 712, 713, 810], "perceiver_backbon": [39, 783], "perceiverencod": 39, "At": [39, 788, 789, 790, 792, 812, 813, 828, 838], "almost": [39, 787, 796, 810, 818, 820, 827], "publish": [39, 783, 823, 829, 832], "thankfulli": [39, 812], "perceiver_io": [39, 40], "imagenet_fourier_position_encod": 39, "pystat": 39, "imagenet_checkpoint": 39, "rb": 39, "ckpt": 39, "read": [39, 41, 51, 58, 68, 70, 74, 81, 128, 361, 451, 601, 611, 678, 788, 789, 795, 797, 812, 814, 815, 838], "173": [39, 56, 609, 646], "194": 39, "217": [39, 802], "125": [39, 51, 56, 79, 228, 331, 355, 360, 431, 604, 609, 664], "177": [39, 41], "193776248": 39, "185m": 39, "octet": 39, "184": 39, "80m": 39, "144mb": 39, "144": 39, "mean_rgb": 39, "stddev_rgb": 39, "im": 39, "denorm": 39, "resize_and_center_crop": 39, "crop": [39, 51, 74, 358, 386, 391, 402], "center": [39, 763], "image_height": [39, 41, 783], "image_width": [39, 783], "padded_center_crop_s": 39, "minimum": [39, 50, 51, 52, 58, 61, 64, 73, 74, 75, 81, 84, 87, 214, 242, 269, 291, 317, 321, 322, 331, 350, 352, 355, 361, 370, 461, 494, 498, 555, 556, 564, 565, 577, 578, 604, 606, 611, 616, 619, 671, 717, 732, 734, 748, 750, 751, 756, 798, 814, 835, 841, 845], "offset_height": 39, "offset_width": 39, "crop_window": 39, "inter_cub": 39, "ye": [39, 823], "dummy_input": [39, 783], "transpili": 39, "torch_perceiver_backbon": 39, "quicker": 39, "params_v": [39, 783, 832], "perceiverioclassifi": [39, 783], "max_pool": [39, 783], "huggingfac": [39, 831, 832], "Of": [39, 793, 808, 809, 820, 843, 844], "cours": [39, 789, 790, 792, 793, 800, 808, 809, 815, 820, 823, 843, 844], "468": 39, "huggingface_hub": 39, "dill": 39, "multiprocess": [39, 68, 97, 606, 820, 823], "py39": 39, "132": [39, 74], "pyarrow": 39, "xxhash": 39, "212": [39, 51, 55, 74, 344, 355, 632], "panda": [39, 41, 828], "pyyaml": 39, "fsspec": 39, "2021": [39, 51, 74, 347, 355, 783], "aiohttp": 39, "tqdm": [39, 41, 783], "async": 39, "timeout": [39, 68, 97, 559, 581, 606, 814], "0a3": 39, "async_timeout": 39, "frozenlist": 39, "manylinux_2_5_x86_64": [39, 44], "manylinux1_x86_64": [39, 44], "158": 39, "attr": [39, 798], "aiosign": 39, "charset": 39, "multidict": 39, "114": [39, 358, 379, 389], "yarl": 39, "264": [39, 613, 690], "extens": [39, 50, 56, 73, 120, 121, 122, 124, 125, 126, 127, 129, 130, 131, 133, 136, 137, 138, 139, 140, 142, 143, 149, 159, 162, 174, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 237, 239, 240, 241, 245, 246, 247, 248, 249, 250, 254, 256, 257, 258, 259, 261, 262, 263, 264, 267, 269, 270, 271, 272, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 321, 322, 324, 355, 358, 370, 401, 496, 601, 602, 604, 609, 611, 616, 617, 618, 619, 620, 638, 639, 640, 641, 642, 644, 645, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 666, 672, 674, 675, 676, 678, 679, 681, 682, 686, 716, 717, 719, 720, 721, 722, 723, 724, 725, 728, 732, 733, 734, 735, 736, 737, 738, 739, 740, 787, 789, 790, 801, 803, 812, 835, 838, 845], "filelock": 39, "certifi": 39, "2017": [39, 608, 634], "2022": [39, 40], "idna": 39, "urllib3": 39, "pytz": 39, "2020": [39, 792, 838], "dateutil": [39, 44], "six": [39, 44, 789, 815], "wikiart": 39, "paint": [39, 783, 817, 827], "load_dataset": [39, 831, 832], "n_sampl": [39, 51, 74, 359, 361, 406, 414, 464], "10000": [39, 41, 47, 70, 132, 601], "huggan": 39, "split": [39, 40, 41, 45, 50, 51, 58, 67, 68, 73, 74, 81, 104, 105, 106, 107, 108, 109, 110, 111, 112, 205, 206, 207, 285, 289, 292, 293, 295, 333, 340, 350, 361, 447, 456, 474, 518, 545, 598, 603, 604, 606, 608, 611, 621, 628, 629, 683, 745, 760, 764, 783, 784, 790, 797, 816, 817, 823, 845], "wiki_art": 39, "gib": 39, "unknown": [39, 748], "total": [39, 41, 51, 64, 68, 74, 87, 97, 128, 209, 317, 318, 326, 352, 355, 601, 603, 616, 619, 719, 736, 738, 783, 784, 789, 790, 798, 799, 800, 812, 815, 820, 821, 823, 829], "huggan___parquet": 39, "36ee951979f9b56c": 39, "2a3b91fbd88a2c90d1dbbb32b460cf621d31bd5b05b934492fdef7d8d6f236ec": 39, "parquet": 39, "subsequ": [39, 773, 789, 793, 797, 798, 800, 804, 805, 808, 812, 821, 839], "reus": [39, 47, 70, 74, 81, 122, 440, 441, 447, 449, 451, 452, 453, 460, 474, 674, 675, 676, 678, 680, 681, 683, 685, 802, 812, 843], "curl": [39, 789], "server": [39, 783, 789, 790, 795, 824, 838], "row": [39, 51, 74, 92, 126, 141, 315, 352, 359, 361, 368, 370, 416, 426, 453, 459, 475, 489, 495, 496, 601, 609, 615, 616, 650, 658, 659, 664, 710, 719, 763], "2fwikiart": 39, "label": [39, 40, 41, 51, 57, 74, 80, 360, 431, 433, 434, 435, 436, 437, 610, 668, 669, 670, 783, 788, 792, 809, 816, 817, 818, 822, 824, 838], "receiv": [39, 43, 91, 509, 545, 606, 612, 687, 688, 689, 764, 789, 790, 798, 799, 812, 815], "xferd": 39, "averag": [39, 41, 51, 53, 57, 74, 76, 80, 358, 360, 370, 372, 373, 376, 377, 378, 432, 433, 434, 435, 436, 437, 496, 587, 588, 593, 607, 608, 610, 612, 634, 668, 687, 688, 763, 764], "dload": 39, "upload": [39, 812], "spent": [39, 829], "25936": 39, "278k": 39, "number": [39, 41, 42, 43, 44, 47, 48, 50, 51, 52, 55, 56, 57, 58, 60, 61, 62, 64, 65, 68, 70, 71, 73, 74, 75, 78, 79, 80, 81, 83, 84, 85, 87, 88, 91, 92, 94, 96, 97, 100, 120, 126, 128, 130, 131, 132, 133, 134, 135, 136, 137, 141, 147, 152, 153, 154, 155, 156, 158, 159, 162, 165, 166, 167, 169, 171, 174, 198, 199, 200, 214, 215, 216, 217, 218, 220, 222, 223, 230, 232, 234, 235, 237, 239, 240, 241, 247, 248, 249, 251, 255, 257, 265, 266, 267, 268, 269, 270, 272, 274, 276, 277, 278, 280, 281, 285, 287, 307, 310, 311, 312, 313, 314, 315, 317, 318, 320, 321, 322, 324, 325, 326, 327, 336, 341, 345, 352, 355, 358, 359, 361, 364, 370, 391, 402, 404, 407, 410, 414, 415, 416, 424, 428, 430, 440, 441, 442, 461, 462, 463, 464, 465, 467, 470, 473, 476, 477, 478, 494, 496, 497, 498, 499, 504, 522, 529, 547, 564, 565, 572, 585, 586, 599, 601, 602, 603, 604, 606, 608, 609, 610, 611, 612, 615, 616, 617, 619, 620, 621, 628, 629, 631, 634, 639, 643, 644, 645, 652, 657, 659, 663, 664, 665, 668, 671, 673, 674, 676, 677, 679, 680, 682, 684, 686, 687, 688, 689, 710, 714, 719, 721, 722, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 745, 748, 749, 750, 756, 762, 763, 764, 767, 783, 789, 790, 796, 797, 798, 799, 800, 806, 807, 808, 812, 813, 814, 815, 817, 820, 826, 827, 831], "abstract_expression": 39, "action_paint": 39, "analytical_cub": 39, "art_nouveau": 39, "baroqu": 39, "color_field_paint": 39, "contemporary_r": 39, "cubism": 39, "early_renaiss": 39, "expression": 39, "fauvism": 39, "high_renaiss": 39, "impression": 39, "mannerism_late_renaiss": 39, "minim": [39, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 122, 123, 125, 127, 128, 130, 132, 133, 134, 135, 137, 139, 140, 143, 147, 148, 149, 162, 166, 167, 174, 191, 208, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 358, 361, 370, 376, 377, 378, 379, 381, 382, 383, 385, 389, 390, 391, 394, 395, 396, 400, 401, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 417, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 513, 514, 517, 518, 519, 520, 521, 522, 525, 526, 529, 531, 533, 534, 535, 537, 538, 539, 541, 542, 544, 549, 550, 564, 565, 566, 567, 569, 571, 572, 585, 587, 588, 591, 593, 594, 595, 596, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 649, 650, 655, 656, 657, 659, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 801, 808, 810, 815, 817, 831, 836, 844], "naive_art_primitiv": 39, "new_real": 39, "northern_renaiss": 39, "pointil": 39, "pop_art": 39, "post_impression": 39, "realism": 39, "rococo": 39, "romantic": 39, "symbol": [39, 777, 788, 789, 838, 839], "synthetic_cub": 39, "ukiyo_": 39, "custom": [39, 51, 74, 291, 299, 349, 350, 357, 748, 764, 766, 777, 785, 791, 797, 802, 806, 810, 812, 815, 821, 828, 838, 842, 843, 844], "hugginfac": 39, "customdataset": 39, "__len__": [39, 796], "__getitem__": [39, 68, 796], "idx": [39, 40, 41, 508, 606, 783, 799, 819], "random_split": 39, "224x224": 39, "train_siz": 39, "val_siz": 39, "test_siz": 39, "dataset_train": 39, "dataset_v": 39, "dataset_test": 39, "dataloader_train": 39, "batch_siz": [39, 41, 44, 51, 55, 60, 74, 78, 83, 358, 360, 376, 377, 378, 394, 395, 396, 397, 437, 608, 615, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 634, 710, 783, 820], "dataloader_v": 39, "dataloader_test": 39, "batch": [39, 40, 41, 51, 52, 56, 68, 74, 75, 79, 205, 206, 358, 364, 372, 373, 374, 380, 393, 432, 476, 477, 478, 522, 525, 526, 586, 603, 606, 608, 609, 612, 614, 632, 634, 648, 666, 687, 688, 689, 709, 748, 764, 767, 783, 796, 805, 810, 820, 836], "iter": [39, 41, 46, 51, 52, 58, 66, 68, 74, 75, 81, 89, 94, 97, 116, 207, 308, 309, 352, 359, 361, 415, 424, 430, 445, 461, 507, 545, 600, 603, 606, 611, 613, 673, 677, 684, 686, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 705, 706, 708, 777, 792, 794, 796, 817, 820, 829, 831], "train_featur": 39, "train_label": 39, "imshow": [39, 40], "crossentropyloss": [39, 765], "sgd": [39, 768, 838], "lr": [39, 53, 76, 509, 588, 591, 593, 594, 595, 606, 607, 768, 820, 821], "001": [39, 50, 51, 59, 71, 74, 76, 159, 257, 274, 324, 336, 355, 588, 602, 604, 607, 614, 709, 748, 820, 821], "momentum": [39, 51, 74, 364, 476, 478, 767, 828], "train_step": 39, "running_loss": [39, 41, 783], "last_loss": 39, "training_load": 39, "intra": 39, "report": [39, 788, 812], "zero_grad": 39, "backward": [39, 51, 65, 74, 88, 276, 358, 380, 385, 386, 390, 391, 401, 402, 604, 609, 620, 639, 665, 739, 740, 764, 813, 823], "adjust": [39, 64, 87, 359, 426, 619, 736, 738, 773], "999": [39, 53, 73, 76, 285, 587, 588, 593, 595, 604, 607, 768, 821], "epoch_numb": 39, "best_vloss": 39, "1_000_000": 39, "avg_loss": 39, "running_vloss": 39, "vdata": 39, "vinput": 39, "vlabel": 39, "voutput": 39, "vloss": 39, "avg_vloss": 39, "best": [39, 545, 606, 783, 784, 786, 787, 788, 789, 790, 791, 797, 798, 802, 811, 812, 813, 824, 841, 842], "model_path": 39, "model_": 39, "state_dict": [39, 766], "highest": [39, 51, 60, 74, 83, 307, 352, 615, 711, 798], "energi": 39, "sum": [39, 41, 50, 51, 52, 55, 56, 57, 64, 68, 73, 74, 75, 78, 79, 80, 87, 91, 96, 97, 207, 217, 259, 283, 318, 341, 352, 355, 359, 360, 361, 370, 400, 409, 431, 432, 433, 434, 435, 436, 437, 466, 502, 503, 519, 549, 550, 603, 604, 606, 608, 609, 610, 619, 631, 637, 650, 659, 663, 666, 668, 730, 731, 763, 765, 777, 783, 796, 798, 805, 807, 808, 809, 817, 831, 832, 833], "accuraci": [39, 41, 44, 358, 401, 798], "augment": 39, "mayb": [39, 40, 46, 783, 789, 797, 817, 819], "meta": [39, 687, 688, 689, 793, 813, 838], "finetun": 39, "deploi": [39, 783, 797, 825, 832, 836, 837, 838, 840, 844], "present": [40, 51, 68, 74, 324, 355, 364, 476, 477, 478, 788, 789, 790, 796, 798, 799, 804, 808, 817, 827, 835, 836, 845], "percieverio": 40, "ai": [40, 836, 840], "contribut": [40, 51, 74, 370, 499, 787, 788, 789, 790, 795, 803, 809, 810, 817, 824, 831, 842], "highli": [40, 783, 838], "invit": [40, 788, 809, 815], "g4ar9q7dtn": 40, "step1": 40, "printf": 40, "8packag": 40, "share": [40, 68, 180, 602, 748, 749, 783, 794, 796, 800, 805, 807, 809, 810, 812, 815, 817, 828, 836, 837, 844], "googledr": 40, "10_wfp1u4rmzc20eignrdqa9v2s9byjwv": 40, "file_id": 40, "drive": [40, 41], "uc": 40, "export": [40, 797, 837, 844], "id": [40, 51, 74, 190, 317, 318, 352, 530, 603, 606, 765, 766, 783, 787, 789, 793, 795, 796, 803, 807, 812, 824], "tee": [40, 789], "file_id_wget_cmd": 40, "perl": 40, "pe": 40, "g": [40, 42, 43, 51, 60, 62, 64, 66, 74, 83, 89, 91, 145, 174, 187, 234, 247, 267, 274, 277, 321, 322, 355, 358, 359, 365, 370, 394, 396, 430, 482, 483, 484, 485, 486, 497, 498, 602, 603, 604, 609, 613, 615, 617, 619, 644, 645, 650, 657, 659, 660, 666, 693, 697, 699, 702, 707, 711, 712, 713, 721, 722, 723, 724, 729, 730, 732, 734, 735, 737, 763, 784, 788, 789, 791, 792, 794, 795, 796, 807, 809, 812, 817, 823, 825, 829, 834], "uuid": 40, "anywai": [40, 793, 806, 809], "bin": [40, 51, 74, 370, 494, 499, 789, 790, 792, 796], "bash": [40, 789, 790, 792], "step2": 40, "interpret": [40, 47, 51, 70, 74, 121, 122, 128, 134, 360, 370, 432, 496, 601, 797, 839], "sudo": [40, 789], "apt": [40, 789], "yf": 40, "step3": 40, "delet": [40, 790, 797], "xvzf": 40, "rm": [40, 42, 785, 790], "step4": 40, "symlink": 40, "unzip": [40, 41], "fr": 40, "l": [40, 56, 73, 79, 261, 359, 410, 608, 609, 634, 638, 643, 644, 645, 649, 663, 790, 791], "d": [40, 51, 52, 55, 56, 58, 70, 74, 75, 78, 79, 81, 94, 110, 132, 141, 174, 217, 234, 235, 267, 270, 315, 352, 358, 359, 361, 365, 368, 376, 377, 378, 385, 390, 394, 395, 396, 397, 399, 408, 422, 442, 447, 449, 452, 456, 469, 471, 474, 482, 488, 510, 521, 598, 601, 602, 604, 608, 609, 611, 613, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 641, 642, 646, 650, 654, 664, 680, 693, 697, 698, 699, 702, 707, 708, 749, 783, 784, 789, 791, 794, 795, 796, 807, 812, 815, 820, 828, 829, 834], "ln": 40, "sf": 40, "la": 40, "step5": 40, "regular": [40, 74, 359, 370, 422, 500, 609, 648, 789, 809, 838], "step6": 40, "ipkykernel": 40, "step7": 40, "engbjapanpython3": 40, "separ": [40, 51, 52, 74, 364, 477, 522, 606, 608, 634, 789, 790, 793, 796, 797, 800, 810, 811, 812, 817, 819, 820, 839, 843], "ipykernel": 40, "reconnect": 40, "sy": 40, "oct": 40, "gcc": [40, 836, 843], "lf": 40, "upgrad": 40, "cuda11": 40, "cudnn805": 40, "cp38": [40, 44, 789], "helper": [40, 743, 745, 746, 752, 754, 755, 783, 786, 795, 798, 802, 811, 820, 825], "feedforward": 40, "prenorm": 40, "perceiveriospec": 40, "fetch": [40, 530, 606, 789, 790, 792, 797], "ogbanugot": 40, "xmartlab": 40, "caffeflow": 40, "fetch_class": 40, "class_label": 40, "append": [40, 41, 51, 56, 68, 74, 226, 327, 355, 604, 609, 611, 642, 649, 674, 783, 797, 812, 817, 820], "ground_truth": 40, "127": [40, 48, 51, 56, 71, 74, 162, 344, 355, 602, 609, 646], "path_to_imag": 40, "get_imag": 40, "ax": [40, 45, 51, 56, 58, 61, 64, 65, 67, 74, 79, 81, 84, 87, 88, 96, 100, 107, 111, 207, 321, 322, 326, 327, 341, 348, 355, 356, 358, 359, 361, 364, 370, 386, 391, 402, 425, 460, 461, 467, 479, 501, 502, 503, 504, 505, 518, 586, 603, 606, 609, 611, 616, 619, 620, 639, 650, 658, 661, 662, 666, 673, 675, 676, 679, 681, 683, 686, 716, 717, 732, 733, 734, 735, 736, 737, 738, 739, 740, 748, 750, 764, 798, 800, 812, 813, 817, 819], "fig": [40, 41], "subplot": [40, 41], "spine": 40, "set_vis": 40, "right": [40, 51, 56, 68, 74, 79, 97, 114, 115, 226, 228, 281, 335, 355, 358, 359, 361, 392, 419, 425, 426, 428, 452, 518, 600, 604, 606, 609, 618, 659, 664, 727, 748, 784, 788, 789, 790, 791, 792, 800, 815, 820, 831], "bottom": [40, 518, 606, 788, 789, 797, 844], "tick_param": 40, "set_xticklabel": 40, "set_yticklabel": 40, "show_result": 40, "plot": [40, 783, 838], "along": [40, 45, 47, 50, 51, 52, 56, 57, 58, 60, 61, 63, 64, 65, 67, 68, 70, 73, 74, 75, 79, 80, 81, 83, 84, 86, 87, 88, 91, 92, 94, 107, 111, 116, 131, 132, 207, 281, 284, 286, 317, 318, 321, 322, 326, 327, 341, 348, 352, 355, 356, 358, 359, 360, 361, 364, 370, 379, 385, 386, 389, 390, 391, 401, 402, 424, 434, 446, 447, 448, 450, 452, 453, 461, 466, 470, 479, 480, 481, 497, 498, 499, 501, 502, 503, 504, 505, 518, 525, 600, 601, 603, 604, 606, 609, 610, 611, 612, 615, 616, 618, 619, 620, 639, 654, 663, 665, 666, 668, 669, 670, 672, 675, 676, 677, 679, 680, 682, 684, 685, 687, 688, 689, 715, 716, 717, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 745, 748, 764, 783, 788, 791, 800, 808, 811, 813, 815, 817, 838], "figur": [40, 814], "figsiz": [40, 41], "listdir": [40, 41], "endswith": 40, "jpeg": [40, 41], "this_dir": 40, "dirnam": 40, "join": [40, 41, 58, 68, 74, 81, 445, 446, 611, 672, 682, 783, 824], "add_subplot": 40, "xtick": 40, "ytick": 40, "set_titl": [40, 41], "color": [40, 68, 97, 782], "green": [40, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 97, 782, 788, 789, 790], "red": 40, "io": [40, 43, 789, 797], "perceiver_io_img_classif": 40, "normalize_imag": 40, "batch_shap": [40, 55, 60, 70, 78, 83, 126, 135, 601, 608, 609, 615, 633, 637, 667, 710, 764, 815, 817, 819], "img_dim": 40, "queries_dim": 40, "learn_queri": 40, "load_weight": 40, "num_input_ax": 40, "network_depth": 40, "num_lat_att_per_lay": 40, "query_shap": 40, "num_fourier_freq_band": 40, "weight_fpath": 40, "pretrained_weight": 40, "isfil": 40, "noinspect": [40, 819], "pybroadexcept": 40, "from_disk_as_pickl": 40, "except": [40, 41, 44, 51, 52, 58, 60, 65, 68, 74, 75, 79, 83, 88, 148, 321, 322, 327, 345, 355, 361, 365, 370, 445, 483, 502, 503, 517, 535, 552, 567, 573, 602, 606, 609, 611, 615, 616, 620, 655, 672, 674, 682, 711, 712, 713, 719, 739, 740, 743, 746, 766, 783, 790, 791, 792, 793, 797, 798, 799, 801, 804, 808, 809, 813, 814, 815, 819, 823], "larg": [40, 50, 51, 73, 74, 217, 234, 241, 267, 268, 370, 496, 604, 609, 657, 785, 789, 790, 795, 797, 820, 831, 838], "action": [40, 787, 797, 800, 803, 812], "fail": [40, 743, 786, 788, 789, 790, 792, 797, 798, 800, 803, 806, 808, 809, 810], "placehold": [40, 613, 697, 702, 707, 764, 790, 793, 804, 825], "rais": [40, 41, 47, 51, 52, 60, 62, 65, 68, 70, 74, 75, 81, 83, 85, 88, 122, 148, 237, 272, 321, 322, 331, 355, 358, 360, 365, 370, 391, 402, 435, 440, 441, 447, 449, 451, 452, 453, 460, 474, 483, 502, 503, 511, 535, 553, 555, 565, 567, 573, 577, 602, 604, 606, 609, 611, 615, 616, 617, 619, 620, 649, 651, 665, 674, 675, 676, 678, 680, 681, 682, 683, 685, 711, 712, 713, 719, 724, 732, 734, 739, 740, 743, 750, 765, 766, 768, 783, 790, 792, 794, 798, 799, 802, 808, 809, 813, 814, 817, 819, 824, 828], "pyunboundlocalvari": 40, "max_fourier_freq": 40, "random_uniform": [40, 44, 60, 83, 615, 799, 802, 812, 817, 821], "03": [40, 47, 50, 52, 53, 73, 74, 76, 83, 132, 232, 257, 329, 564, 565, 588, 593, 601, 604, 606, 607, 609, 610, 647, 668, 712], "817437": 40, "common_runtim": 40, "gpu_bfc_alloc": 40, "cc": 40, "orig_valu": 40, "tf_force_gpu_allow_growth": 40, "autograd": [40, 823], "declar": [40, 790, 811], "_3r2_73j": 41, "0edf8c1e8ea835f4c456bdf89737d89032f50b5a": 41, "1297564": 41, "05fcafac1e19fec835a9ac61270b3ac6039a5095f6b0f9fde20bacc2a5abba45": 41, "le3bu3_v": 41, "cc6508f5d7e25538c5df5fdae52a41d2bf17b9a517aedd125cfca913bb5b259b": 41, "third": [41, 91, 92, 361, 448, 473, 609, 617, 659, 721, 795, 798, 808, 823, 837, 838, 844], "parti": [41, 795, 798, 823, 828, 837, 838, 844], "csv": [41, 783], "pd": 41, "mount": [41, 785, 790], "mydriv": 41, "chdir": 41, "One": [41, 51, 52, 58, 60, 74, 75, 81, 83, 94, 361, 440, 441, 442, 444, 461, 469, 519, 606, 611, 615, 678, 711, 793, 796, 798, 800, 805, 810, 812, 817, 819, 820], "kaggl": 41, "medium": 41, "articl": [41, 783, 803], "insert": [41, 51, 61, 74, 84, 361, 437, 446, 611, 613, 616, 618, 674, 694, 695, 716, 727, 797, 803], "www": [41, 321, 322, 355], "your_kaggle_usernam": 41, "competit": 41, "digit": 41, "recogn": 41, "zip": [41, 817], "readabl": [41, 793, 796, 802, 803, 804, 812, 813, 819, 820], "system": [41, 359, 425, 609, 658, 748, 783, 789, 790, 794, 797, 798, 823, 832, 836, 838, 841, 843, 845], "chmod": [41, 789, 797], "600": [41, 75, 78, 358, 381, 382, 526, 797], "recent": [41, 780, 789, 790, 812, 827, 828], "modifi": [41, 51, 68, 74, 91, 361, 370, 458, 461, 466, 503, 748, 788, 789, 790, 792, 794, 795, 798, 799, 801, 803, 805, 808, 810, 812, 813, 817], "forc": [41, 795, 797, 799], "archiv": [41, 789], "inflat": [41, 798], "sample_submiss": 41, "frame": [41, 51, 74, 307, 352, 358, 404, 828, 838], "read_csv": 41, "later": [41, 68, 512, 606, 788, 803, 808, 812, 813, 838], "my": [41, 797], "df": 41, "label_df": 41, "mod_train": 41, "drop": [41, 51, 74, 317, 352, 360, 361, 434, 469, 763, 764, 789, 823], "column": [41, 51, 56, 74, 79, 91, 92, 126, 141, 315, 352, 359, 361, 368, 370, 410, 416, 426, 445, 450, 452, 453, 457, 459, 489, 495, 496, 601, 609, 643, 644, 650, 656, 658, 659, 664, 748, 763], "data_valu": 41, "test_data_valu": 41, "correct_label": 41, "train_path": 41, "str": [41, 43, 46, 47, 51, 52, 55, 56, 57, 58, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 104, 105, 106, 107, 108, 109, 110, 111, 112, 117, 119, 128, 130, 133, 135, 137, 143, 144, 147, 149, 151, 152, 153, 154, 158, 159, 162, 163, 164, 165, 166, 167, 169, 171, 174, 175, 176, 177, 178, 179, 186, 187, 207, 208, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 294, 295, 296, 297, 298, 299, 301, 320, 321, 322, 323, 324, 326, 328, 335, 336, 342, 344, 346, 347, 348, 358, 359, 360, 361, 364, 370, 376, 377, 378, 380, 381, 382, 383, 385, 386, 390, 391, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 407, 411, 424, 430, 431, 432, 433, 434, 435, 436, 437, 440, 441, 442, 444, 445, 446, 451, 467, 469, 470, 471, 476, 477, 478, 479, 480, 481, 483, 485, 496, 497, 498, 499, 505, 507, 508, 510, 511, 513, 514, 516, 518, 519, 520, 521, 522, 525, 526, 529, 531, 533, 534, 535, 537, 538, 541, 546, 549, 550, 552, 553, 562, 564, 565, 567, 569, 571, 572, 585, 589, 596, 600, 601, 602, 603, 606, 607, 608, 609, 610, 611, 612, 613, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 637, 638, 639, 644, 645, 646, 647, 649, 650, 652, 654, 656, 657, 663, 668, 669, 670, 671, 675, 678, 679, 680, 681, 682, 685, 686, 687, 688, 689, 696, 697, 702, 707, 710, 711, 712, 713, 715, 718, 721, 722, 723, 725, 729, 730, 731, 733, 735, 736, 738, 739, 740, 745, 746, 748, 749, 754, 756, 764, 766, 767, 777, 798, 799, 802, 805, 808, 809, 813, 817, 822, 831, 832, 833], "makedir": 41, "valid_path": 41, "28x28": 41, "pic": 41, "pictur": [41, 783, 788, 817, 827], "int8": [41, 48, 60, 70, 71, 83, 128, 155, 160, 162, 163, 167, 601, 602, 711, 748, 749, 798, 812], "new_img": [41, 43], "builder": [41, 785], "batchwis": 41, "subset": [41, 750, 793, 797, 801, 804, 807, 809, 812, 817, 838], "goe": [41, 361, 444, 791, 794, 803, 808, 815], "seed": [41, 42, 51, 55, 60, 62, 68, 74, 78, 83, 310, 311, 312, 313, 314, 352, 359, 365, 415, 424, 430, 482, 483, 484, 485, 486, 608, 615, 617, 631, 710, 711, 712, 713, 715, 721, 756, 761, 763, 806, 810, 812], "seed_valu": [41, 68, 615, 714], "randomize_dataset": 41, "shuffl": [41, 51, 60, 68, 74, 83, 484, 615], "create_dataset": 41, "num_examples_per_class": 41, "img_arrai": 41, "class_nam": [41, 745], "dir": [41, 820], "img_path": 41, "imread": [41, 43, 820], "imread_grayscal": 41, "generate_batch": [41, 783], "dataset_s": [41, 783], "y_train": [41, 783], "ivyerror": [41, 778, 783, 802], "smaller": [41, 51, 58, 64, 74, 81, 294, 320, 336, 350, 355, 358, 370, 386, 391, 402, 496, 497, 498, 518, 606, 611, 619, 671, 679, 729, 730, 735, 737, 783, 790, 802, 817], "yield": [41, 61, 308, 309, 352, 361, 461, 616, 720, 783, 797], "x_batch_inst": 41, "form": [41, 43, 46, 47, 51, 56, 68, 70, 79, 90, 91, 92, 121, 122, 134, 139, 140, 300, 303, 316, 324, 352, 355, 359, 361, 410, 419, 448, 457, 461, 475, 508, 568, 570, 601, 606, 608, 609, 613, 638, 640, 642, 643, 644, 645, 647, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 663, 691, 702, 748, 763, 784, 788, 789, 805, 812, 815, 821, 822, 828, 838, 839, 844], "intialis": 41, "num_epoch": [41, 783], "inherit": [41, 793, 796, 802, 819, 823, 825], "creation": [41, 51, 68, 74, 97, 795, 798, 799, 804, 806, 809, 810, 812, 813, 817, 831, 838, 840, 844], "inform": [41, 43, 48, 51, 53, 71, 76, 159, 162, 307, 352, 508, 596, 602, 606, 607, 612, 689, 764, 766, 783, 787, 788, 789, 790, 792, 796, 797, 802, 805, 806, 808, 810, 812, 841], "insid": [41, 56, 79, 97, 361, 470, 609, 652, 746, 789, 790, 793, 796, 798, 799, 805, 806, 812, 813, 831, 844], "ivynet": [41, 783], "h_w": [41, 783], "input_channel": [41, 764, 783, 817, 821], "output_channel": [41, 764, 783, 821], "gelu": [41, 42, 45, 67, 598, 760, 783], "image_widht": 41, "start_dim": [41, 51, 74, 361, 451, 783], "end_dim": [41, 51, 74, 361, 451, 783], "gpu_is_avail": [41, 603, 783], "120": [41, 64, 87, 97, 609, 654, 729, 783], "model_nam": [41, 783], "__name__": [41, 42, 44, 573, 606, 783, 802], "lower": [41, 47, 50, 51, 56, 60, 73, 74, 79, 83, 126, 139, 265, 301, 307, 315, 316, 352, 370, 499, 500, 505, 601, 604, 609, 615, 638, 644, 645, 652, 713, 750, 762, 763, 783, 790, 798, 800, 809, 812, 817, 823, 825, 834, 835, 836, 838, 839, 844, 845], "heavi": [41, 750, 789, 809, 810, 815, 839], "lift": [41, 810, 839], "num_correct": [41, 783], "y_pred": [41, 783], "cross_entropi": [41, 57, 80, 610, 670, 783, 796, 805, 808], "epoch_loss": [41, 783], "field": [41, 56, 62, 79, 85, 359, 361, 410, 473, 609, 617, 643, 644, 656, 657, 659, 721, 722, 723, 783, 797, 836, 844], "training_accuraci": [41, 783], "train_loss": [41, 783], "train_correct": [41, 783], "train_loop": [41, 783], "posit": [41, 43, 46, 50, 51, 52, 56, 57, 58, 73, 74, 75, 79, 80, 81, 91, 126, 128, 141, 159, 214, 215, 216, 220, 223, 234, 241, 248, 249, 255, 257, 267, 268, 275, 276, 280, 281, 285, 301, 315, 320, 325, 336, 352, 355, 359, 361, 408, 426, 436, 460, 512, 522, 586, 599, 601, 602, 604, 606, 609, 610, 611, 615, 616, 620, 638, 641, 663, 668, 674, 679, 714, 719, 739, 740, 745, 748, 756, 761, 783, 788, 790, 792, 796, 809, 812, 813, 820, 831, 840], "leav": [41, 46, 51, 69, 71, 73, 74, 75, 78, 79, 81, 87, 97, 159, 162, 234, 292, 293, 361, 445, 446, 451, 463, 464, 465, 479, 480, 481, 497, 498, 503, 522, 569, 611, 613, 627, 637, 642, 659, 673, 677, 682, 684, 685, 690, 691, 700, 701, 702, 703, 729, 730, 777, 783, 788, 796, 797, 798, 800, 801, 804, 805, 808, 809, 812, 820, 821], "xbatch": [41, 783], "ybatch": [41, 783], "to_devic": [41, 49, 72, 190, 603, 766, 783], "entropi": [41, 57, 80, 610, 668, 669, 670, 783], "hot": [41, 47, 70, 135, 601, 783], "ybatch_encod": [41, 783], "one_hot": [41, 47, 70, 601, 783, 822], "loss_prob": [41, 783], "ret_grad_idx": [41, 589, 607, 745, 807], "xs_grad_idx": [41, 589, 607, 745, 807], "batch_loss": [41, 783], "set_descript": [41, 783], "set_postfix": [41, 783], "accuracy_percentag": [41, 783], "naverag": [41, 783], "6f": [41, 783], "_train_summari": [41, 783], "writer": [41, 783], "writerow": [41, 783], "157it": 41, "01": [41, 47, 51, 52, 53, 56, 74, 75, 76, 79, 83, 132, 259, 277, 278, 300, 306, 329, 336, 352, 358, 379, 389, 390, 522, 564, 565, 587, 588, 593, 601, 604, 606, 607, 609, 612, 615, 645, 656, 688, 689, 712, 713, 748, 794, 822], "06it": 41, "475401": 41, "11it": 41, "081436": 41, "13it": 41, "0187": 41, "029279": 41, "0324": 41, "008382": 41, "07it": 41, "00456": 41, "003816": 41, "82it": 41, "00277": 41, "002179": 41, "05it": 41, "00175": 41, "001569": 41, "00147": 41, "001235": 41, "09it": 41, "00128": 41, "001005": 41, "106": 41, "10it": 41, "00112": 41, "000837": 41, "129": 41, "12it": 41, "000989": 41, "000709": 41, "145": 41, "000873": 41, "000606": 41, "168": [41, 513, 606, 613, 690], "08it": 41, "000774": 41, "000524": 41, "000688": 41, "000455": 41, "000613": 41, "000398": 41, "05": [41, 47, 50, 51, 53, 59, 73, 74, 76, 82, 132, 259, 306, 320, 329, 336, 352, 355, 364, 476, 477, 478, 533, 555, 577, 587, 588, 593, 601, 604, 606, 607, 609, 614, 650, 709, 743, 748, 763, 767, 810, 812], "000547": 41, "000350": 41, "205": 41, "000488": 41, "000308": 41, "218": 41, "000437": 41, "000273": 41, "000391": 41, "000243": 41, "238": [41, 241, 604], "98it": 41, "000351": 41, "000216": 41, "260": 41, "plot_summari": 41, "seaborn": 41, "whitegrid": 41, "ax1": 41, "ax2": 41, "nrow": 41, "ncol": 41, "legend": [41, 788], "fontweight": 41, "bold": 41, "set_xlabel": 41, "set_ylabel": 41, "tight_layout": 41, "savefig": 41, "summary_plot": 41, "png": [41, 43, 44, 820], "close": [41, 56, 239, 257, 277, 300, 352, 604, 609, 611, 659, 674, 786, 788, 789, 790, 798, 801, 809, 815, 838], "save_weight": [41, 766], "model_param": 41, "ivynet_weight": 41, "hdf5": [41, 68, 766, 820], "deitimageprocessor": 42, "tfdeitforimageclassif": 42, "tfdeitforimageclassificationwithteach": 42, "head": [42, 43, 608, 634, 764, 783, 787, 789, 797, 809], "distillation_classifi": 42, "cls_classifi": 42, "randomli": [42, 358, 381, 382, 383, 608, 631, 748, 749, 750, 751, 756, 764], "henc": [42, 62, 217, 324, 355, 604, 611, 617, 674, 721, 722, 723, 724, 773, 789, 796, 797, 798, 808, 812], "reproduc": [42, 55, 78, 608, 631, 748, 749, 750, 751, 756, 786, 792], "set_random_se": 42, "image_processor": [42, 831, 832], "facebook": 42, "distil": [42, 839], "patch16": 42, "outputs_from_original_model": 42, "predicted_class_idx": 42, "id2label": [42, 831], "architectur": [42, 783, 789, 822, 823, 836, 837, 838, 841, 842, 843], "bertforsequenceclassif": 42, "bertforpretrain": 42, "NOT": [42, 262, 604, 777, 788], "probabl": [42, 51, 55, 57, 60, 74, 78, 80, 83, 358, 360, 365, 370, 381, 382, 383, 432, 482, 496, 499, 503, 608, 610, 615, 631, 634, 637, 668, 710, 750, 763, 764, 783, 812, 824, 829], "ptarmigan": 42, "rf": [42, 790], "branch": [42, 222, 234, 237, 239, 267, 279, 280, 281, 284, 604, 789, 790, 792, 797, 803, 823, 831, 838], "moduleconvert": [42, 761, 766], "mc": 42, "from_keras_modul": [42, 761], "compiled_func": 42, "return_graph": [42, 44], "compiled_output": 42, "diverg": [42, 51, 74, 241, 360, 432, 604], "_all_funct": [42, 44], "convert_to_tensor_v2_with_dispatch": 42, "transpose_v2": 42, "convolution_v2": 42, "bias_add": 42, "binary_op_wrapp": 42, "cast": [42, 48, 50, 51, 56, 64, 71, 73, 79, 146, 149, 174, 268, 370, 497, 498, 602, 604, 609, 619, 666, 729, 730, 735, 737, 749, 805, 810, 817], "moments_v2": 42, "batch_norm": [42, 44, 51, 74, 364], "tensordot": [42, 56, 79, 609, 798], "softmax_v2": 42, "_slice_help": 42, "save_to_disk": [42, 44, 766], "12265048989200113": 42, "11038777417100028": 42, "1167045795539998": 42, "ivy_api_kei": 43, "obj": [43, 121, 122, 530, 601, 606, 831, 832, 833], "tupl": [43, 46, 47, 48, 50, 51, 52, 55, 56, 58, 61, 62, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 94, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 116, 121, 122, 128, 130, 134, 135, 137, 141, 143, 147, 148, 149, 160, 161, 162, 166, 167, 173, 174, 180, 190, 193, 194, 208, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 295, 296, 297, 298, 299, 301, 304, 309, 312, 315, 320, 321, 322, 323, 324, 326, 327, 328, 330, 331, 333, 334, 335, 336, 340, 341, 342, 343, 344, 346, 347, 348, 349, 352, 355, 357, 358, 359, 361, 364, 365, 366, 368, 370, 376, 377, 378, 380, 381, 382, 383, 385, 390, 391, 394, 395, 396, 397, 399, 400, 401, 402, 403, 410, 411, 415, 419, 424, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 440, 441, 442, 443, 445, 446, 456, 461, 467, 469, 470, 473, 476, 478, 479, 480, 481, 483, 484, 486, 487, 488, 496, 497, 498, 499, 501, 502, 503, 504, 507, 510, 511, 513, 514, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 531, 533, 534, 535, 537, 538, 541, 549, 550, 554, 564, 565, 566, 567, 569, 570, 571, 572, 585, 586, 587, 588, 589, 591, 593, 596, 600, 601, 602, 603, 604, 606, 607, 608, 609, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 637, 638, 639, 643, 644, 645, 646, 647, 648, 649, 650, 652, 654, 655, 656, 657, 659, 661, 662, 663, 666, 668, 669, 670, 671, 672, 673, 675, 676, 678, 679, 680, 681, 682, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 697, 698, 699, 701, 702, 705, 706, 707, 708, 710, 711, 712, 713, 715, 718, 719, 721, 722, 723, 724, 725, 726, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 748, 749, 750, 763, 764, 766, 777, 793, 798, 804, 805, 808, 810, 812, 817, 820, 821, 823, 831, 832, 833], "callabl": [43, 51, 52, 66, 74, 75, 78, 89, 116, 117, 119, 160, 161, 193, 194, 207, 348, 356, 358, 361, 400, 404, 439, 461, 508, 512, 517, 519, 523, 524, 545, 573, 586, 590, 592, 597, 600, 602, 603, 606, 607, 612, 613, 687, 688, 689, 696, 697, 698, 700, 701, 702, 703, 743, 746, 756, 768, 778, 796, 802, 807, 809, 817, 830, 831, 832, 833], "combo": [43, 820], "permit": [43, 793, 804, 809, 812, 815], "usabl": [43, 804, 813], "neither": [43, 217, 234, 241, 267, 604, 609, 661, 797, 809, 815], "nor": [43, 217, 234, 241, 267, 604, 797, 809, 842], "specifc": 43, "invoc": 43, "represent": [43, 51, 52, 68, 74, 75, 97, 144, 145, 159, 162, 187, 188, 214, 217, 224, 227, 229, 234, 241, 264, 267, 269, 284, 304, 333, 337, 342, 346, 352, 355, 508, 569, 599, 602, 603, 604, 606, 748, 750, 751, 764, 766, 798, 836, 837, 839, 843, 844], "opt": [43, 789, 794, 798, 808, 812, 815], "externally_link": 43, "logo": 43, "patch": [43, 285, 604, 798, 838], "cv2_imshow": 43, "envrion": 43, "canni": 43, "original_img": 43, "fn_arg": 43, "dilate_edg": 43, "edg": [43, 51, 58, 74, 81, 307, 352, 358, 361, 370, 393, 461, 499, 611, 671, 673, 686, 751, 792, 812, 832, 838, 840, 844], "morphologi": 43, "dilat": [43, 51, 55, 74, 78, 358, 361, 394, 395, 396, 399, 400, 403, 461, 608, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 764], "hk_model": 43, "resnet18": [43, 44], "keras_model": 43, "count": [43, 51, 58, 62, 65, 70, 74, 81, 85, 88, 128, 200, 326, 355, 361, 370, 473, 494, 499, 601, 603, 609, 611, 617, 620, 639, 665, 672, 675, 721, 722, 739, 740, 795, 796, 800, 820], "odsc": 43, "talk": [43, 843], "networkx": 44, "228": 44, "352": [44, 78, 608, 632, 802], "nvidia_ml_py3": 44, "19190": 44, "241af6b4a51197474b0da3ee7bfa32d847756c8f0d93b51448655d6458312714": 44, "b9": 44, "b1": [44, 609, 658], "cb4feab29709d4155310d29a421389665dcab9eb3b679b527b": 44, "cycler": 44, "fonttool": 44, "965": 44, "pillow": 44, "kiwisolv": 44, "show_graph": [44, 766], "to_ivy_modul": [44, 761, 822], "image_dim": 44, "v0": [44, 821], "urlerror": 44, "dev_str": 44, "comp_network": 44, "time_chronolog": 44, "ret0_nc": 44, "ret1_nc": 44, "ret0_c": 44, "ret1_c": 44, "pytorch_vision_v0": 44, "distribut": [44, 51, 57, 60, 74, 80, 83, 358, 359, 360, 365, 381, 382, 383, 415, 424, 430, 432, 434, 435, 437, 482, 483, 484, 485, 486, 610, 615, 668, 669, 670, 710, 711, 712, 713, 715, 763, 764, 765, 766, 788, 789, 797, 799, 823, 838, 841], "distributed_c10d": 44, "262": 44, "reduce_op": 44, "deprec": 44, "reduceop": 44, "004645566477999864": 44, "0044566806820000695": 44, "attribut": [44, 68, 159, 160, 161, 162, 193, 194, 202, 523, 524, 602, 603, 606, 746, 794, 795, 796, 801, 802, 805, 806, 808, 809, 815, 818, 819, 820, 821], "definit": [44, 50, 56, 73, 79, 286, 604, 609, 638, 783, 786, 790, 793, 798, 805, 819, 832], "max_pool2d": [44, 51, 74, 358, 377], "__iadd__": 44, "adaptive_avg_pool2d": [44, 51, 74, 358], "_arraywithactiv": [45, 96], "abc": [45, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 100, 521, 606, 613, 708, 762, 763, 768, 777, 819], "_abc_impl": [45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 100, 101], "_abc": [45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 100, 101], "_abc_data": [45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 100, 101], "approxim": [45, 50, 51, 56, 67, 73, 74, 79, 91, 94, 104, 215, 216, 219, 220, 221, 222, 231, 232, 237, 239, 241, 255, 256, 257, 258, 272, 279, 280, 284, 285, 286, 334, 344, 355, 360, 434, 435, 598, 604, 609, 652, 655, 760, 801, 809], "complex_mod": [45, 50, 51, 67, 73, 74, 104, 105, 106, 107, 108, 109, 110, 111, 112, 285, 289, 292, 293, 295, 350, 598, 604, 760, 806], "variant": [45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 122, 123, 125, 127, 128, 130, 132, 133, 134, 135, 137, 139, 140, 143, 147, 148, 149, 159, 162, 166, 167, 174, 191, 208, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 358, 361, 370, 376, 377, 378, 379, 381, 382, 383, 385, 389, 390, 391, 394, 395, 396, 400, 401, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 417, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 513, 514, 517, 518, 519, 520, 521, 522, 525, 526, 529, 531, 533, 534, 535, 537, 538, 539, 541, 542, 544, 549, 550, 564, 565, 566, 567, 569, 571, 572, 585, 587, 588, 591, 593, 594, 595, 596, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 649, 650, 652, 655, 656, 657, 659, 663, 664, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 793, 800, 801, 815], "docstr": [45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 147, 148, 149, 159, 162, 166, 167, 174, 191, 208, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 355, 358, 361, 370, 376, 377, 378, 379, 381, 382, 383, 385, 389, 390, 391, 394, 395, 396, 400, 401, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 417, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 513, 514, 517, 518, 519, 520, 521, 522, 525, 526, 529, 531, 533, 534, 535, 537, 538, 539, 541, 542, 544, 549, 550, 564, 565, 566, 567, 569, 571, 572, 585, 586, 587, 588, 591, 593, 594, 595, 596, 601, 602, 604, 606, 609, 611, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 787, 788, 791, 795, 803, 804, 805, 806, 809, 811, 813], "liter": [45, 50, 51, 56, 67, 73, 74, 79, 104, 105, 106, 107, 108, 109, 110, 111, 112, 285, 289, 292, 293, 295, 350, 358, 359, 361, 379, 389, 393, 401, 415, 419, 424, 427, 430, 461, 598, 604, 609, 618, 650, 666, 727, 760, 815], "magnitud": [45, 50, 51, 67, 73, 74, 104, 105, 106, 107, 108, 109, 110, 111, 112, 214, 217, 234, 241, 267, 285, 289, 292, 293, 295, 350, 598, 604, 609, 659, 660, 760, 798], "handle_complex_input": [45, 50, 51, 67, 73, 74, 104, 105, 106, 107, 108, 109, 110, 111, 112, 285, 289, 292, 293, 295, 350, 598, 604, 760, 806], "elementhardswish": [45, 67, 598, 760], "leaky_relu": [45, 67, 74, 289, 598, 749], "alpha": [45, 50, 51, 67, 73, 74, 101, 106, 217, 283, 289, 290, 302, 350, 352, 359, 365, 411, 483, 484, 485, 598, 604, 760, 804, 809, 810], "float": [45, 47, 48, 50, 51, 52, 53, 55, 56, 57, 59, 60, 62, 64, 67, 70, 71, 73, 74, 75, 76, 78, 79, 80, 82, 83, 87, 91, 94, 96, 106, 112, 120, 121, 122, 124, 126, 128, 129, 130, 131, 132, 136, 137, 142, 146, 150, 154, 159, 163, 167, 173, 174, 177, 183, 192, 201, 205, 206, 209, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 230, 231, 232, 234, 235, 237, 238, 239, 240, 241, 245, 247, 248, 249, 250, 251, 253, 255, 256, 257, 258, 259, 260, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 299, 300, 301, 302, 303, 305, 306, 307, 320, 321, 322, 323, 330, 331, 336, 338, 339, 342, 343, 344, 347, 348, 350, 352, 355, 356, 358, 359, 360, 361, 364, 365, 370, 381, 382, 383, 400, 401, 407, 410, 411, 413, 424, 428, 430, 431, 435, 436, 450, 468, 476, 477, 478, 481, 482, 483, 484, 485, 486, 496, 497, 498, 499, 504, 505, 512, 513, 514, 522, 531, 555, 556, 559, 564, 565, 585, 587, 588, 591, 593, 594, 595, 598, 599, 601, 602, 603, 604, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 619, 631, 634, 637, 638, 640, 643, 644, 645, 647, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 663, 666, 668, 669, 670, 687, 688, 689, 696, 709, 712, 713, 719, 721, 722, 723, 724, 729, 730, 732, 733, 734, 735, 736, 737, 738, 745, 748, 749, 751, 760, 763, 764, 767, 768, 786, 792, 796, 798, 801, 802, 804, 805, 807, 808, 810, 812, 813, 815, 817, 819, 821], "slope": [45, 51, 67, 74, 106, 289, 290, 294, 350, 598, 760], "neg": [45, 50, 51, 56, 58, 60, 65, 67, 73, 74, 79, 81, 83, 88, 91, 106, 109, 112, 120, 126, 128, 141, 234, 241, 248, 249, 267, 268, 276, 281, 289, 301, 315, 317, 350, 352, 359, 360, 365, 408, 415, 419, 435, 486, 598, 601, 604, 609, 611, 615, 620, 639, 641, 659, 663, 665, 666, 672, 674, 675, 679, 712, 739, 740, 748, 750, 760, 796, 808], "leaki": [45, 67, 106, 598, 760], "log_softmax": [45, 67, 598, 760], "0719": [45, 67, 107], "221": [45, 107], "mish": [45, 67, 598, 760], "30340147": [45, 108, 598], "86509842": [45, 67, 108, 598], "269": [45, 110], "731": [45, 110], "881": [45, 50, 73, 110, 220, 233, 273, 604], "422": [45, 111, 598], "155": [45, 78, 111, 598, 608, 632], "softplu": [45, 67, 598, 760, 815], "beta": [45, 51, 59, 67, 74, 82, 112, 302, 305, 306, 352, 359, 360, 365, 411, 436, 484, 485, 598, 614, 709, 760, 815], "threshold": [45, 50, 51, 67, 73, 74, 112, 265, 266, 299, 323, 350, 355, 360, 361, 431, 436, 468, 598, 604, 760, 815], "union": [45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 200, 201, 202, 203, 205, 206, 207, 208, 209, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 352, 355, 356, 358, 359, 360, 361, 364, 365, 366, 368, 370, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 389, 390, 391, 393, 394, 395, 396, 397, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 510, 511, 513, 514, 518, 519, 520, 521, 522, 525, 526, 527, 528, 529, 531, 533, 534, 535, 537, 538, 541, 542, 544, 545, 549, 550, 554, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 697, 698, 699, 701, 702, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 745, 748, 763, 768, 769, 793, 796, 798, 799, 800, 802, 804, 805, 808, 813, 815, 817, 822, 831, 832, 833], "3461": [45, 67, 112, 598], "6491": [45, 67, 112, 598], "535": [45, 67, 112, 598, 802], "_to_ivi": 46, "_to_n": 46, "to_ignor": [46, 66, 89, 613, 701, 702], "args_to_ivi": 46, "include_deriv": [46, 69, 613, 691, 702, 745], "nest": [46, 68, 69, 97, 100, 237, 540, 569, 586, 589, 604, 606, 607, 612, 687, 688, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 762, 765, 766, 768, 793, 795, 796, 805, 807, 813, 820, 821, 823, 825, 838], "unchang": [46, 50, 358, 361, 402, 451, 608, 631], "deriv": [46, 47, 51, 53, 69, 70, 74, 76, 125, 130, 137, 143, 301, 305, 328, 352, 355, 587, 588, 591, 592, 593, 594, 595, 601, 607, 612, 613, 689, 691, 702, 766, 768, 769, 798, 799, 819, 821], "word": [46, 120, 361, 454, 601, 615, 713, 761, 764, 796, 808, 809, 825], "args_to_n": [46, 808], "cont_inplac": 46, "decid": [46, 68, 613, 701, 702, 783, 788, 789, 798, 815], "to_ivi": [46, 69, 613, 703, 808], "leaf": [46, 68, 75, 87, 97, 521, 613, 700, 701, 703, 730, 796, 805, 820], "travers": [46, 69, 613, 694, 702, 796, 798, 802, 817], "lowest": [46, 51, 60, 69, 74, 83, 370, 499, 613, 615, 702, 711, 805, 823, 825, 835, 839, 843], "search": [46, 51, 69, 74, 716, 717, 756, 787, 789, 796, 800, 812, 813, 827], "_arraywithcr": [47, 96], "boolean": [47, 48, 50, 51, 52, 58, 61, 64, 68, 70, 71, 73, 74, 75, 81, 84, 87, 96, 97, 117, 119, 121, 122, 123, 129, 146, 162, 164, 166, 167, 170, 186, 196, 204, 210, 224, 225, 226, 227, 228, 229, 261, 262, 263, 264, 321, 322, 336, 355, 359, 361, 415, 424, 430, 440, 441, 442, 447, 449, 451, 452, 453, 456, 460, 467, 474, 507, 510, 521, 528, 531, 532, 536, 537, 538, 539, 540, 541, 542, 551, 554, 557, 558, 560, 561, 585, 600, 601, 602, 603, 604, 606, 608, 611, 612, 613, 616, 619, 634, 674, 675, 676, 678, 680, 681, 683, 685, 687, 688, 700, 718, 719, 720, 732, 734, 748, 749, 750, 751, 756, 767, 796, 798, 805, 809, 812, 815], "alwai": [47, 48, 51, 52, 58, 70, 71, 74, 81, 104, 122, 146, 217, 267, 331, 355, 359, 361, 426, 440, 441, 442, 447, 449, 451, 452, 453, 456, 460, 467, 474, 528, 535, 598, 602, 604, 606, 611, 674, 675, 676, 678, 680, 681, 683, 685, 750, 783, 788, 789, 790, 793, 794, 796, 798, 801, 803, 804, 805, 808, 809, 810, 811, 812, 813, 815, 817, 823, 831], "never": [47, 51, 58, 70, 74, 81, 122, 361, 440, 441, 442, 447, 449, 451, 452, 453, 456, 460, 467, 474, 528, 606, 611, 674, 675, 676, 678, 680, 681, 683, 685, 790, 798, 808, 809, 812], "valueerror": [47, 51, 58, 70, 74, 81, 85, 122, 358, 360, 391, 402, 435, 440, 441, 447, 449, 451, 452, 453, 460, 474, 611, 674, 675, 676, 678, 680, 681, 683, 685, 724, 778, 802], "buffer": [47, 70, 74, 81, 122, 128, 440, 441, 447, 449, 451, 452, 453, 460, 474, 601, 674, 675, 676, 678, 680, 681, 683, 685, 766, 808, 823], "nativedtyp": [47, 48, 51, 55, 56, 60, 61, 64, 70, 74, 79, 83, 84, 87, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 142, 143, 145, 146, 151, 152, 153, 154, 155, 156, 157, 158, 163, 164, 168, 170, 172, 176, 186, 300, 301, 302, 303, 304, 305, 306, 319, 326, 341, 352, 355, 365, 370, 482, 483, 484, 485, 486, 496, 497, 498, 499, 502, 504, 601, 602, 608, 609, 615, 616, 618, 619, 631, 666, 711, 712, 713, 716, 717, 727, 729, 730, 735, 737, 763, 798, 799, 804, 813, 817], "datatyp": [47, 51, 68, 70, 74, 122, 130, 134, 151, 172, 176, 358, 404, 601, 602, 743, 813, 831], "nativedevic": [47, 49, 51, 60, 70, 72, 74, 83, 120, 121, 122, 124, 125, 126, 129, 130, 131, 132, 134, 135, 136, 137, 141, 142, 143, 188, 189, 190, 191, 192, 195, 200, 201, 202, 203, 205, 206, 207, 208, 209, 213, 300, 301, 315, 352, 365, 482, 483, 485, 486, 601, 603, 615, 710, 711, 712, 713, 763, 768, 769, 798, 799, 802, 804, 813], "39999998": [47, 121, 122, 601, 617, 722], "5999999": [47, 51, 74, 78, 121, 122, 359, 406, 601, 608, 631, 637], "0999999": [47, 64, 121, 122, 338, 355, 601, 733], "10000038": [47, 121, 122, 601], "90786433e": [47, 121, 122, 601], "310": [47, 121, 122, 601], "copy_arrai": [47, 70, 601], "to_ivy_arrai": [47, 70, 123, 601], "empty_lik": [47, 51, 70, 74, 258, 359, 409, 601, 604], "uniniti": [47, 124, 125, 601, 803], "from_dlpack": [47, 70, 601], "full_lik": [47, 70, 601, 813], "fill_valu": [47, 51, 61, 70, 74, 84, 129, 130, 246, 254, 365, 486, 601, 604, 616, 719, 798, 810, 813], "scalar": [47, 50, 51, 52, 56, 67, 70, 73, 74, 75, 79, 91, 106, 130, 135, 217, 238, 283, 289, 324, 325, 327, 331, 334, 336, 338, 343, 355, 358, 359, 361, 404, 411, 440, 441, 442, 450, 455, 572, 585, 601, 604, 606, 609, 666, 798, 807, 809, 823, 838], "fill": [47, 50, 51, 60, 61, 68, 70, 73, 74, 83, 84, 124, 129, 130, 132, 135, 136, 137, 142, 143, 268, 301, 352, 359, 361, 365, 415, 419, 424, 430, 450, 469, 483, 485, 486, 601, 604, 615, 616, 711, 719, 763, 788, 810], "000123": [47, 130, 601], "stop": [47, 51, 53, 70, 74, 76, 120, 131, 132, 207, 359, 424, 430, 551, 588, 591, 593, 594, 595, 596, 601, 603, 606, 607, 612, 613, 687, 688, 689, 701, 768, 804, 807, 815, 817, 823, 838], "num": [47, 70, 131, 132, 601, 748, 790, 804, 817], "endpoint": [47, 70, 131, 132, 601, 763, 804], "logspac": [47, 70, 601, 817], "log": [47, 50, 51, 56, 70, 73, 74, 79, 112, 132, 257, 259, 272, 292, 293, 339, 346, 350, 355, 360, 365, 432, 434, 435, 482, 598, 601, 604, 657, 748, 750, 751, 760, 790, 796, 797, 800, 805, 808, 809, 810, 812, 814, 815, 817, 820], "sequenc": [47, 51, 55, 56, 58, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 126, 128, 130, 132, 135, 137, 143, 147, 149, 162, 166, 167, 174, 208, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 295, 296, 297, 298, 299, 301, 304, 310, 311, 312, 313, 314, 320, 321, 322, 323, 324, 326, 328, 335, 336, 342, 344, 346, 347, 348, 352, 355, 356, 358, 359, 361, 365, 370, 371, 373, 374, 381, 382, 383, 385, 386, 390, 391, 393, 400, 401, 402, 403, 406, 414, 415, 416, 418, 422, 423, 424, 427, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 445, 446, 447, 448, 454, 456, 457, 459, 460, 462, 465, 467, 469, 470, 474, 475, 476, 478, 479, 480, 481, 483, 484, 496, 497, 498, 499, 505, 506, 507, 510, 511, 513, 514, 518, 519, 520, 521, 522, 525, 526, 529, 531, 533, 534, 535, 537, 538, 541, 545, 549, 550, 564, 565, 567, 569, 571, 572, 585, 586, 589, 590, 591, 596, 601, 604, 606, 607, 608, 609, 611, 613, 619, 620, 621, 622, 623, 624, 625, 626, 628, 630, 631, 632, 634, 637, 638, 639, 644, 645, 646, 647, 649, 650, 652, 654, 656, 657, 663, 666, 668, 669, 670, 671, 672, 674, 675, 677, 678, 679, 680, 681, 682, 685, 686, 690, 697, 707, 710, 711, 712, 713, 715, 718, 721, 722, 723, 724, 725, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 764, 767, 769, 790, 797, 798, 799, 800, 802, 812, 813, 815, 817, 822, 841], "on_valu": [47, 70, 132, 135, 601], "off_valu": [47, 70, 132, 135, 601], "evenli": [47, 50, 51, 55, 58, 68, 70, 73, 74, 78, 81, 120, 131, 132, 286, 358, 400, 403, 601, 604, 608, 611, 621, 622, 623, 624, 626, 628, 630, 680], "hint": [47, 50, 51, 56, 73, 74, 120, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 142, 143, 149, 165, 169, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 237, 239, 240, 241, 245, 246, 247, 248, 249, 250, 251, 254, 256, 257, 258, 259, 261, 262, 263, 264, 267, 269, 270, 271, 272, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 301, 316, 321, 322, 324, 327, 352, 355, 358, 359, 361, 370, 376, 377, 378, 379, 381, 382, 383, 389, 394, 395, 396, 401, 411, 461, 496, 499, 525, 529, 531, 533, 572, 596, 601, 602, 604, 606, 607, 608, 609, 611, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 630, 631, 632, 634, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 709, 716, 717, 719, 720, 721, 722, 723, 724, 725, 728, 732, 733, 734, 735, 736, 737, 738, 739, 740, 788, 793, 801, 804, 805, 808, 809, 813], "simplic": [47, 50, 51, 56, 73, 74, 120, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 142, 143, 149, 165, 169, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 237, 239, 240, 241, 245, 246, 247, 248, 249, 250, 251, 254, 256, 257, 258, 259, 261, 262, 263, 264, 267, 269, 270, 271, 272, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 301, 316, 321, 322, 324, 327, 352, 355, 358, 359, 361, 370, 376, 377, 378, 379, 381, 382, 383, 389, 394, 395, 396, 401, 411, 461, 496, 499, 525, 529, 531, 533, 572, 596, 601, 602, 604, 606, 607, 608, 609, 611, 614, 616, 617, 618, 619, 622, 623, 624, 625, 626, 630, 631, 632, 634, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 709, 716, 717, 719, 720, 721, 722, 723, 724, 725, 728, 732, 733, 734, 735, 736, 737, 738, 801, 815, 821], "nestabl": [47, 50, 51, 56, 73, 74, 120, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 149, 165, 169, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 237, 239, 240, 241, 245, 246, 247, 248, 249, 250, 254, 256, 257, 258, 259, 261, 262, 263, 264, 267, 269, 270, 271, 272, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 301, 315, 316, 321, 322, 324, 327, 352, 355, 358, 359, 361, 370, 376, 377, 378, 379, 381, 382, 383, 389, 394, 395, 396, 401, 411, 461, 496, 499, 503, 511, 519, 520, 525, 529, 531, 533, 535, 549, 567, 572, 596, 601, 602, 604, 606, 607, 608, 609, 611, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 630, 631, 632, 634, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 709, 716, 717, 719, 720, 721, 722, 723, 724, 725, 728, 732, 733, 734, 735, 736, 737, 738, 739, 740, 788, 791, 800, 801, 808, 812, 825], "464": [47, 50, 83, 132, 221, 222, 604], "15888336": [47, 132], "2154": [47, 132], "43469003": [47, 132], "meshgrid": [47, 70, 601], "spars": [47, 51, 57, 70, 74, 80, 133, 304, 352, 359, 415, 424, 430, 601, 610, 670], "xy": [47, 70, 133, 601], "dimension": [47, 50, 51, 56, 58, 61, 64, 65, 68, 70, 73, 74, 79, 81, 87, 88, 96, 120, 126, 128, 133, 141, 286, 315, 321, 322, 352, 355, 358, 359, 361, 370, 385, 386, 390, 391, 401, 402, 408, 440, 441, 442, 445, 450, 451, 494, 505, 601, 604, 609, 611, 616, 619, 620, 639, 640, 646, 649, 652, 654, 655, 665, 666, 680, 716, 717, 719, 732, 733, 734, 735, 736, 737, 738, 739, 740, 805, 807, 812, 815, 817, 835, 838, 845], "repres": [47, 50, 51, 55, 56, 73, 74, 78, 79, 94, 119, 133, 135, 158, 216, 217, 220, 223, 232, 234, 241, 267, 280, 284, 285, 304, 317, 318, 334, 352, 355, 358, 359, 360, 361, 364, 365, 368, 400, 403, 417, 429, 435, 461, 471, 476, 477, 478, 482, 488, 495, 530, 600, 601, 602, 604, 606, 608, 609, 631, 632, 646, 654, 657, 658, 750, 763, 767, 789, 793, 798, 815, 819, 835, 836, 839], "coordin": [47, 50, 61, 73, 74, 84, 133, 141, 222, 284, 308, 309, 315, 334, 352, 366, 487, 601, 604, 616, 719], "conserv": [47, 133, 601], "cartesian": [47, 133, 601], "matrix": [47, 51, 52, 55, 56, 74, 75, 78, 79, 91, 92, 94, 96, 133, 139, 140, 141, 315, 316, 352, 359, 361, 370, 407, 410, 411, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 429, 430, 459, 496, 507, 513, 601, 606, 608, 609, 632, 638, 640, 642, 643, 644, 645, 647, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 663, 664, 667, 748, 750, 763, 764, 788, 798, 809, 836, 838], "ij": [47, 64, 133, 601, 619, 731], "respect": [47, 50, 51, 53, 56, 73, 74, 76, 79, 91, 133, 214, 217, 222, 224, 226, 227, 228, 229, 234, 235, 241, 245, 246, 253, 254, 259, 261, 263, 264, 267, 270, 276, 280, 283, 284, 292, 334, 349, 350, 355, 357, 359, 361, 364, 413, 428, 439, 476, 478, 530, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 601, 604, 606, 607, 608, 609, 612, 621, 628, 629, 634, 639, 656, 659, 687, 688, 689, 745, 748, 763, 787, 788, 789, 790, 793, 794, 796, 797, 798, 799, 800, 804, 805, 807, 808, 809, 812, 813, 814, 834, 844], "rank": [47, 51, 56, 58, 65, 74, 79, 81, 88, 91, 92, 93, 94, 95, 100, 133, 310, 311, 312, 313, 314, 352, 359, 361, 370, 415, 416, 424, 427, 430, 461, 505, 601, 609, 611, 616, 620, 639, 641, 650, 652, 656, 658, 663, 665, 666, 673, 674, 682, 685, 686, 719, 739, 740], "ni": [47, 133, 601], "xi": [47, 133, 601], "scatter": [47, 52, 70, 75, 135, 549, 550, 601, 606, 795, 808, 815, 845], "dimens": [47, 51, 52, 55, 56, 57, 58, 60, 61, 62, 64, 65, 68, 70, 74, 75, 78, 79, 80, 81, 83, 84, 85, 87, 88, 94, 96, 97, 100, 107, 111, 135, 139, 140, 304, 314, 316, 317, 318, 321, 322, 326, 327, 334, 341, 348, 352, 355, 356, 358, 359, 360, 361, 364, 365, 368, 370, 372, 373, 374, 376, 377, 378, 380, 385, 386, 390, 394, 395, 396, 397, 400, 401, 403, 405, 407, 410, 426, 434, 440, 441, 442, 445, 451, 462, 463, 464, 465, 467, 476, 477, 478, 484, 486, 489, 499, 501, 502, 503, 504, 505, 518, 519, 520, 522, 529, 563, 566, 586, 598, 601, 606, 608, 609, 610, 611, 612, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 638, 639, 640, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 665, 666, 669, 670, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 687, 688, 689, 715, 716, 717, 719, 721, 722, 723, 724, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 748, 750, 760, 764, 767, 800, 802, 807, 809, 810, 812, 815, 817, 820], "j": [47, 50, 51, 52, 56, 64, 70, 73, 74, 79, 91, 119, 135, 215, 216, 217, 218, 220, 223, 232, 234, 237, 239, 247, 255, 257, 261, 267, 278, 280, 281, 284, 285, 324, 355, 358, 359, 370, 385, 386, 390, 401, 402, 405, 410, 412, 421, 427, 505, 510, 600, 601, 604, 606, 609, 619, 643, 663, 731, 790, 791, 795, 831, 834], "unless": [47, 51, 56, 70, 74, 135, 267, 320, 336, 341, 355, 601, 604, 609, 652, 794, 799, 808, 823, 832, 833], "ones_lik": [47, 70, 601, 794, 822], "tril": [47, 70, 601], "whose": [47, 50, 51, 52, 56, 58, 62, 64, 70, 73, 74, 75, 79, 81, 85, 87, 92, 94, 96, 130, 139, 140, 216, 220, 223, 231, 232, 233, 272, 273, 279, 280, 284, 285, 286, 316, 329, 333, 337, 338, 340, 344, 352, 359, 361, 410, 429, 460, 473, 512, 567, 601, 604, 606, 609, 611, 617, 619, 638, 640, 642, 643, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 666, 675, 679, 721, 722, 723, 730, 731, 750, 801, 812], "innermost": [47, 51, 56, 79, 139, 140, 316, 352, 359, 410, 601, 609, 638, 640, 642, 643, 644, 645, 647, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 663], "mxn": [47, 51, 56, 79, 139, 140, 316, 352, 601, 609, 642, 650, 652, 653, 655, 656, 660, 663], "matric": [47, 51, 56, 74, 79, 91, 92, 96, 133, 139, 140, 316, 352, 359, 361, 410, 415, 416, 418, 422, 423, 428, 450, 601, 608, 609, 632, 638, 640, 642, 643, 644, 645, 646, 647, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 663, 664, 750, 786, 838], "diagon": [47, 51, 56, 74, 79, 92, 126, 139, 140, 141, 301, 315, 316, 352, 359, 361, 408, 411, 419, 425, 450, 601, 609, 641, 663], "triangular": [47, 51, 56, 79, 139, 140, 141, 315, 316, 352, 359, 425, 601, 609, 638, 644, 645, 652, 656], "alloc": [47, 48, 51, 71, 139, 140, 146, 316, 352, 601, 602, 788, 790, 823], "triu": [47, 70, 601], "upper": [47, 51, 56, 60, 74, 79, 83, 126, 140, 141, 301, 316, 352, 359, 370, 425, 499, 601, 609, 615, 638, 644, 645, 656, 713, 762, 798, 808, 812], "zeros_lik": [47, 70, 146, 263, 587, 588, 591, 593, 594, 595, 601, 602, 604, 607, 609, 611, 656, 671, 809, 815], "data_typ": [48, 51, 71, 74, 176, 602, 795, 798, 812, 813], "_arraywithdatatyp": [48, 96], "irrespect": [48, 56, 71, 79, 146, 602, 609, 659, 796, 808, 819, 845], "promot": [48, 50, 51, 56, 71, 73, 74, 79, 86, 96, 97, 146, 149, 172, 173, 174, 180, 215, 216, 217, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 231, 232, 234, 237, 239, 241, 255, 256, 257, 258, 259, 264, 267, 272, 276, 279, 280, 281, 282, 283, 284, 285, 288, 331, 339, 344, 355, 358, 370, 401, 496, 558, 580, 602, 604, 606, 609, 611, 619, 638, 639, 646, 647, 649, 650, 651, 652, 654, 655, 657, 658, 665, 666, 672, 682, 725, 733, 736, 748, 749, 792, 801, 802, 805, 814], "nan": [48, 50, 51, 52, 62, 64, 71, 73, 74, 75, 146, 214, 215, 216, 217, 219, 220, 221, 222, 223, 230, 231, 232, 233, 234, 235, 237, 239, 240, 241, 242, 243, 248, 249, 250, 255, 256, 257, 258, 259, 262, 267, 268, 270, 272, 273, 276, 277, 278, 279, 280, 281, 284, 285, 287, 292, 320, 321, 322, 332, 336, 341, 344, 350, 355, 370, 494, 495, 502, 503, 504, 531, 585, 599, 602, 604, 606, 617, 619, 620, 721, 722, 723, 724, 732, 733, 734, 736, 737, 738, 739, 740, 748, 751, 792, 798, 801, 807, 813, 814], "infin": [48, 50, 52, 56, 71, 73, 79, 146, 214, 215, 216, 217, 220, 221, 222, 223, 230, 231, 232, 234, 235, 237, 239, 240, 241, 248, 249, 255, 256, 257, 258, 259, 262, 267, 268, 270, 272, 276, 277, 279, 280, 281, 284, 285, 287, 321, 322, 344, 355, 531, 599, 602, 604, 606, 609, 619, 620, 657, 666, 732, 734, 739, 740, 792, 801], "desir": [48, 49, 51, 61, 68, 71, 72, 74, 84, 91, 146, 148, 149, 208, 307, 345, 352, 355, 361, 370, 459, 502, 504, 505, 602, 603, 609, 616, 661, 718, 763, 764, 790, 794, 797, 798, 799, 809, 817, 827, 831, 838], "broadcast_arrai": [48, 71, 602], "mix": [48, 50, 71, 73, 74, 75, 80, 83, 96, 97, 147, 160, 161, 174, 193, 194, 224, 227, 228, 229, 234, 235, 241, 245, 253, 254, 264, 267, 270, 276, 360, 370, 436, 503, 521, 523, 524, 525, 526, 535, 569, 572, 602, 603, 604, 606, 608, 609, 610, 611, 614, 619, 622, 624, 627, 630, 632, 637, 638, 661, 668, 670, 671, 709, 731, 733, 736, 749, 751, 788, 791, 798, 799, 800, 808, 815, 817, 825, 838, 842, 844], "broadcast_to": [48, 71, 602, 798], "can_cast": [48, 71, 602, 798, 805, 809], "accord": [48, 51, 52, 58, 64, 71, 81, 87, 149, 159, 217, 228, 234, 241, 267, 278, 307, 352, 358, 361, 402, 461, 525, 528, 549, 550, 602, 604, 606, 609, 611, 619, 665, 673, 686, 736, 738, 743, 750, 770, 777, 788, 789, 792, 798, 803, 805, 809, 812], "finfo": [48, 71, 602, 812], "resolut": [48, 71, 159, 602, 790], "4028235e": [48, 159, 602], "iinfo": [48, 71, 602], "integ": [48, 50, 51, 55, 56, 58, 60, 64, 65, 68, 73, 74, 75, 78, 79, 81, 83, 87, 88, 96, 97, 120, 129, 162, 163, 169, 173, 174, 178, 214, 224, 225, 226, 227, 228, 229, 230, 240, 241, 252, 264, 269, 272, 276, 277, 287, 288, 317, 318, 321, 322, 326, 330, 331, 352, 355, 358, 361, 365, 368, 370, 385, 390, 400, 403, 404, 447, 456, 461, 474, 482, 483, 484, 485, 486, 488, 489, 494, 496, 497, 498, 503, 505, 528, 544, 554, 586, 601, 602, 604, 606, 608, 609, 611, 615, 618, 619, 620, 621, 622, 623, 624, 626, 628, 630, 639, 641, 651, 665, 666, 680, 710, 711, 712, 713, 714, 715, 727, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 748, 749, 750, 751, 756, 764, 790, 796, 798, 807, 810, 812, 817, 819], "119": [48, 162], "122": [48, 162, 232, 604], "1220": [48, 162], "int16": [48, 51, 60, 64, 71, 83, 149, 153, 155, 160, 162, 169, 184, 370, 497, 498, 602, 619, 711, 729, 730, 735, 737, 748, 749, 798, 809, 812, 817], "32768": [48, 71, 162, 565, 606], "32767": [48, 71, 162], "is_bool_dtyp": [48, 71, 602], "is_float_dtyp": [48, 71, 602, 813], "is_int_dtyp": [48, 71, 602, 810, 813], "is_uint_dtyp": [48, 71, 602, 810, 813], "result_typ": [48, 71, 602, 798], "arrays_and_dtyp": [48, 71, 174, 602], "_arraywithdevic": [49, 96], "move": [49, 51, 72, 74, 141, 204, 208, 212, 315, 352, 361, 460, 601, 603, 783, 790, 799, 813], "addit": [49, 51, 52, 59, 72, 74, 75, 82, 117, 119, 208, 217, 277, 370, 495, 500, 518, 519, 520, 586, 600, 603, 604, 606, 608, 612, 614, 634, 689, 709, 764, 788, 789, 790, 794, 798, 800, 801, 803, 805, 807, 808, 809, 812, 813, 815, 819, 820, 822, 831, 838, 839, 840, 844], "__dlpack__": [49, 72, 127, 208, 601, 603], "caveat": [49, 72, 208, 360, 434, 603], "portabl": [49, 72, 208, 603, 783, 836], "_arraywithelementwis": [50, 96], "ab": [50, 56, 66, 73, 89, 96, 97, 272, 320, 336, 355, 361, 468, 604, 609, 613, 650, 660, 666, 698, 701, 745, 777, 786, 793, 798, 806, 809, 812], "absolut": [50, 51, 56, 66, 68, 73, 74, 79, 96, 214, 278, 320, 336, 339, 345, 355, 359, 360, 411, 426, 431, 433, 604, 609, 650, 651, 652, 657, 743, 745, 748, 750, 751, 784, 789], "aco": [50, 73, 604], "invers": [50, 51, 56, 73, 74, 79, 215, 216, 219, 220, 221, 222, 223, 358, 368, 380, 389, 391, 401, 488, 604, 609, 647, 651, 655, 770, 798], "cosin": [50, 73, 215, 216, 231, 232, 300, 303, 352, 358, 379, 389, 604, 764], "acosh": [50, 73, 160, 161, 602, 604, 786], "area": [50, 51, 73, 74, 78, 216, 220, 223, 358, 393, 400, 403, 604, 808, 815, 828, 834], "hyperbol": [50, 73, 216, 220, 223, 232, 280, 284, 285, 604], "sector": [50, 73, 216, 220, 223, 604, 828], "second": [50, 51, 53, 56, 58, 62, 73, 74, 75, 76, 79, 81, 85, 92, 96, 97, 117, 141, 172, 180, 217, 222, 224, 226, 227, 228, 229, 235, 241, 242, 243, 244, 245, 246, 252, 253, 254, 259, 260, 261, 263, 264, 267, 270, 272, 283, 307, 315, 320, 332, 334, 335, 336, 342, 346, 347, 352, 355, 359, 360, 361, 368, 370, 409, 410, 411, 413, 417, 436, 467, 473, 483, 485, 489, 496, 499, 510, 559, 581, 587, 588, 593, 600, 601, 602, 604, 606, 607, 609, 611, 612, 613, 617, 639, 642, 643, 644, 646, 649, 654, 656, 657, 659, 661, 665, 682, 683, 688, 691, 721, 722, 723, 768, 789, 792, 795, 798, 800, 803, 808, 809, 812, 814, 819, 829, 843], "multipli": [50, 51, 55, 64, 73, 74, 78, 91, 217, 283, 337, 358, 359, 393, 421, 422, 497, 498, 604, 608, 619, 631, 729, 735, 790, 793, 794, 796, 800], "angl": [50, 73, 222, 232, 280, 285, 335, 355, 604], "deg": [50, 73, 218, 604], "radian": [50, 51, 73, 74, 215, 218, 219, 221, 222, 231, 233, 273, 279, 284, 344, 355, 604, 801], "degre": [50, 51, 64, 73, 74, 87, 218, 233, 273, 361, 467, 604, 619, 736, 738, 837], "1j": [50, 73, 74, 218, 219, 231, 232, 237, 239, 251, 274, 279, 280, 284, 324, 564, 604, 606], "2j": [50, 51, 73, 74, 218, 247, 324, 358, 385, 390, 565, 604, 606], "3j": [50, 51, 73, 74, 218, 251, 274, 324, 355, 604], "35619449": [50, 218, 604], "78539816": [50, 218, 604], "135": [50, 218, 513, 604, 606], "asin": [50, 73, 604], "sine": [50, 73, 219, 220, 279, 280, 604], "927": [50, 73, 219], "asinh": [50, 73, 219, 604], "atan": [50, 73, 604], "tangent": [50, 73, 221, 222, 223, 284, 285, 604, 801], "785": [50, 73, 221, 222, 604], "atan2": [50, 73, 604], "quotient": [50, 73, 222, 234, 241, 604], "245": [50, 78, 222, 608, 631, 632], "588": [50, 222, 604], "inf": [50, 51, 52, 56, 73, 74, 75, 79, 222, 239, 248, 249, 250, 251, 255, 256, 258, 268, 292, 339, 350, 355, 359, 370, 407, 499, 531, 585, 599, 604, 606, 608, 609, 635, 650, 666, 748, 751, 786, 798, 807], "719": [50, 222, 604], "197": [50, 222, 604], "atanh": [50, 73, 604], "549": [50, 73, 78, 223, 604, 608, 632], "bitwise_and": [50, 73, 604], "bitwise_invert": [50, 73, 604], "bitiwse_invert": [50, 225], "bitwise_left_shift": [50, 73, 604], "bitwise_or": [50, 73, 604], "bitwise_right_shift": [50, 73, 96, 604], "bitwise_xor": [50, 73, 96, 604], "ceil": [50, 51, 73, 74, 91, 94, 120, 358, 376, 377, 378, 394, 395, 396, 399, 601, 604, 764, 808], "round": [50, 51, 73, 74, 91, 93, 94, 95, 217, 230, 234, 240, 241, 267, 281, 287, 288, 330, 355, 604, 786, 788, 789, 790, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 815, 817, 818, 819, 820, 821, 822, 827, 828, 829], "416": [50, 231, 604], "540": [50, 231], "990": [50, 231], "cosh": [50, 73, 231, 604], "deg2rad": [50, 73, 604], "convers": [50, 51, 74, 233, 273, 551, 561, 606, 788, 794, 816, 818, 822, 823, 825, 829, 837, 844], "180": [50, 73, 233, 273, 604], "270": [50, 73, 233, 273, 604], "360": [50, 73, 233, 273, 604, 797], "dividend": [50, 73, 234, 241, 276, 288, 604], "divisor": [50, 51, 53, 64, 73, 74, 76, 87, 234, 241, 244, 245, 276, 288, 358, 361, 376, 377, 378, 447, 456, 474, 587, 588, 593, 604, 607, 619, 736, 738, 764, 768], "375": [50, 235, 270], "erf": [50, 73, 329, 355, 604], "exponenti": [50, 51, 73, 74, 236, 237, 239, 259, 272, 289, 296, 350, 359, 420, 604], "gauss": [50, 73, 236, 604], "328": [50, 236, 284, 604], "677": [50, 236], "842": [50, 236, 284, 604], "71828198": [50, 73, 237], "38905573": [50, 73, 237], "08553696": [50, 73, 237, 604], "exp2": [50, 73, 604], "expm1": [50, 73, 604, 798], "244": [50, 239, 783], "918": [50, 239], "147": [50, 239, 604], "floor": [50, 51, 73, 74, 91, 94, 228, 241, 358, 376, 377, 378, 380, 394, 395, 396, 399, 604, 764, 808], "floor_divid": [50, 73, 604, 756, 798], "fmin": [50, 73, 604, 798], "gcd": [50, 73, 604, 798], "greater": [50, 51, 55, 58, 60, 73, 74, 78, 83, 96, 97, 128, 215, 216, 219, 220, 222, 223, 226, 228, 234, 240, 241, 255, 257, 272, 276, 278, 280, 281, 285, 286, 287, 323, 355, 358, 380, 385, 390, 401, 601, 604, 608, 609, 611, 615, 637, 639, 651, 681, 713, 750, 764, 790, 810], "greater_equ": [50, 73, 96, 97, 259, 604], "imaginari": [50, 73, 96, 106, 109, 112, 136, 137, 215, 216, 217, 232, 234, 235, 237, 239, 247, 267, 269, 270, 277, 280, 281, 285, 324, 355, 358, 359, 401, 411, 598, 601, 604, 616, 719, 800], "4j": [50, 73, 247, 358, 401, 565, 604, 606], "6j": [50, 51, 73, 247, 251, 324, 604], "isfinit": [50, 73, 604, 809], "out_i": [50, 73, 248, 249, 250, 251, 274, 604], "self_i": [50, 73, 248, 249, 250, 251, 274], "finit": [50, 73, 214, 215, 216, 217, 220, 222, 223, 232, 234, 235, 237, 239, 241, 248, 249, 255, 257, 267, 268, 270, 272, 276, 280, 281, 285, 604], "isinf": [50, 73, 604], "detect_posit": [50, 73, 249, 604], "detect_neg": [50, 73, 249, 604], "isnan": [50, 73, 604], "isreal": [50, 73, 604], "5j": [50, 73, 74, 251, 274, 324, 355, 604], "lcm": [50, 73, 604, 798], "less": [50, 51, 56, 60, 64, 73, 74, 79, 83, 96, 97, 215, 216, 219, 222, 223, 230, 234, 241, 255, 256, 257, 258, 272, 276, 278, 281, 343, 355, 358, 359, 370, 379, 380, 389, 401, 424, 430, 496, 499, 604, 609, 615, 619, 650, 651, 652, 655, 666, 713, 736, 738, 764, 789, 790, 796, 798, 800, 802, 804, 809, 812, 815, 816, 817, 828, 838, 840], "less_equ": [50, 73, 96, 97, 604, 802], "log10": [50, 51, 73, 307, 352, 604], "logarithm": [50, 73, 237, 255, 256, 257, 258, 259, 328, 339, 355, 604, 609, 657], "602": [50, 256, 604], "699": [50, 256, 604], "log1p": [50, 73, 604, 807], "693": [50, 73, 111, 220, 257, 598, 604, 610, 670], "0953": [50, 73, 255, 257, 604], "log2": [50, 73, 260, 604], "logaddexp": [50, 73, 604], "logaddexp2": [50, 73, 604, 786], "169925": [50, 73, 260, 604], "logical_and": [50, 73, 604, 809, 815, 845], "logical_not": [50, 73, 604, 798], "logical_or": [50, 73, 604, 845], "conform": [50, 56, 73, 120, 121, 122, 124, 125, 126, 127, 129, 130, 131, 133, 136, 137, 138, 139, 140, 142, 143, 149, 159, 162, 174, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 237, 239, 240, 241, 245, 246, 247, 248, 249, 250, 254, 256, 257, 258, 259, 261, 262, 263, 264, 267, 269, 270, 271, 272, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 321, 322, 324, 355, 358, 370, 401, 496, 601, 602, 604, 609, 611, 616, 617, 618, 619, 620, 638, 639, 640, 641, 642, 644, 645, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 666, 672, 674, 675, 676, 678, 679, 681, 682, 686, 716, 717, 719, 720, 721, 722, 723, 724, 725, 728, 732, 733, 734, 735, 736, 737, 738, 739, 740, 801, 803], "standard": [50, 56, 59, 60, 64, 73, 82, 83, 87, 120, 121, 122, 124, 125, 126, 127, 129, 130, 131, 133, 136, 137, 138, 139, 140, 142, 143, 149, 159, 162, 174, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 237, 239, 240, 241, 245, 246, 247, 248, 249, 250, 254, 256, 257, 258, 259, 261, 262, 263, 264, 267, 269, 270, 271, 272, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 321, 322, 324, 355, 358, 359, 370, 401, 428, 496, 586, 601, 602, 604, 606, 609, 611, 614, 615, 616, 617, 618, 619, 620, 638, 639, 640, 641, 642, 644, 645, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 666, 672, 674, 675, 676, 678, 679, 681, 682, 686, 709, 712, 716, 717, 719, 720, 721, 722, 723, 724, 725, 728, 732, 733, 734, 735, 736, 737, 738, 739, 740, 750, 763, 767, 777, 783, 791, 792, 793, 796, 798, 801, 804, 808, 811, 812, 813, 823, 826, 832, 834, 836, 837, 840, 841, 843], "api_specif": [50, 51, 73, 74, 149, 237, 247, 248, 263, 321, 322, 355, 358, 401, 602, 604, 611, 619, 686, 736, 801], "array_api": [50, 73, 149, 237, 247, 248, 263, 358, 401, 602, 604, 609, 611, 619, 657, 658, 686, 736, 801], "logical_xor": [50, 73, 604], "maximum": [50, 51, 52, 53, 58, 61, 64, 68, 73, 74, 75, 76, 81, 84, 87, 97, 207, 291, 321, 322, 332, 345, 350, 355, 358, 359, 361, 370, 374, 384, 424, 427, 430, 461, 497, 499, 513, 514, 522, 530, 593, 603, 604, 606, 607, 609, 611, 616, 619, 650, 671, 716, 717, 732, 734, 748, 750, 751, 756, 790, 798, 800, 808, 820, 845], "use_wher": [50, 73, 265, 266, 604], "formula": [50, 51, 73, 234, 256, 258, 265, 266, 267, 307, 338, 352, 355, 364, 476, 478, 604], "exce": [50, 51, 74, 266, 361, 470, 604], "product": [50, 51, 55, 56, 64, 73, 74, 78, 79, 87, 91, 92, 94, 267, 359, 370, 406, 409, 413, 416, 417, 418, 421, 422, 423, 497, 498, 504, 604, 608, 609, 619, 634, 637, 639, 646, 649, 654, 661, 665, 729, 730, 731, 735, 736, 788, 817, 838, 840], "nan_to_num": [50, 73, 604], "posinf": [50, 73, 268, 604], "neginf": [50, 73, 268, 604], "5e": [50, 53, 73, 74, 268, 342, 593, 604, 607], "not_equ": [50, 73, 96, 97, 604], "pow": [50, 73, 96, 97, 604, 792], "expon": [50, 51, 52, 74, 75, 272, 331, 333, 337, 355, 565, 604, 606, 609, 651], "rad2deg": [50, 73, 604], "286": [50, 74, 273], "458": [50, 273], "573": [50, 273, 604], "reciproc": [50, 73, 604], "333": [50, 73, 234, 275, 514, 604, 606], "remaind": [50, 51, 58, 68, 73, 74, 81, 243, 604, 611, 680, 792, 808], "modulu": [50, 73, 276, 604, 808], "sign": [50, 51, 56, 62, 64, 73, 74, 79, 91, 120, 214, 215, 216, 217, 220, 222, 223, 228, 232, 234, 237, 239, 241, 267, 269, 276, 280, 281, 285, 325, 355, 359, 361, 370, 426, 468, 497, 498, 601, 604, 609, 617, 619, 657, 721, 722, 723, 724, 729, 730, 735, 737, 789, 798, 817, 822, 828], "x2_i": [50, 73, 217, 222, 224, 226, 227, 228, 229, 234, 235, 241, 245, 246, 253, 254, 259, 261, 263, 264, 267, 270, 272, 276, 283, 604, 792], "decim": [50, 73, 277, 604, 814], "0001": [50, 51, 74, 277, 278, 359, 424, 430, 748, 751, 768], "678": [50, 277, 278], "np_variant": [50, 73, 278, 604], "841": [50, 67, 73, 104, 279, 598, 604], "909": [50, 73, 75, 279, 604], "141": [50, 73, 146, 279, 602, 604], "sinh": [50, 73, 279, 604], "232": [50, 73, 280, 604], "sqrt": [50, 51, 73, 74, 358, 380, 385, 386, 390, 391, 401, 604, 763, 764, 783], "squar": [50, 51, 56, 73, 74, 79, 281, 359, 360, 370, 410, 420, 431, 496, 589, 590, 592, 597, 604, 607, 609, 613, 638, 640, 641, 643, 644, 645, 647, 651, 657, 658, 659, 664, 696, 783], "tanh": [50, 73, 284, 604, 760, 817], "762": [50, 73, 285, 604], "964": [50, 73, 285, 604], "trapz": [50, 73, 604], "dx": [50, 73, 286, 604], "apart": [50, 73, 286, 604], "trapezoid": [50, 73, 286, 604], "trunc": [50, 73, 604], "025": [50, 287, 360, 436, 604, 612, 689], "trunc_divid": [50, 73, 604], "_arraywithactivationsexperiment": [51, 96], "celu": [51, 74, 350], "formul": [51, 67, 74, 92, 104, 289, 350, 760], "elu": [51, 74, 291, 350, 760], "scaler": [51, 74, 290, 350, 748, 751, 812], "hardtanh": [51, 74, 350], "max_val": [51, 74, 291, 350], "min_val": [51, 74, 291, 350], "region": [51, 74, 291, 350, 789], "ep": [51, 56, 59, 74, 79, 82, 159, 292, 350, 359, 360, 364, 411, 435, 476, 477, 478, 602, 609, 614, 652, 655, 709, 760, 767], "19722438": [51, 74, 292, 350], "38629448": [51, 74, 292, 350], "38629436": [51, 74, 292, 350], "logsigmoid": [51, 74, 350, 760], "31326175": [51, 67, 293, 350], "126928": [51, 74, 293], "01814993": [51, 293], "00004578": [51, 293], "57888985": [51, 293], "31326169": [51, 74, 293, 350], "69314718": [51, 56, 67, 74, 79, 293, 339, 350, 355, 609, 657], "01104775": [51, 293], "prelu": [51, 74, 350, 760], "unidirect": [51, 294, 350], "relu6": [51, 74, 350, 760], "rectifi": [51, 67, 74, 106, 108, 109, 295, 297, 299, 350, 598], "selu": [51, 74, 350, 760], "11133075": [51, 296, 350], "05070102": [51, 74, 296, 350], "10140204": [51, 296, 350], "15210295": [51, 296, 350], "20280409": [51, 296, 350], "25350523": [51, 296, 350], "30420589": [51, 296, 350], "35490704": [51, 296, 350], "silu": [51, 74, 350, 760], "26894143": [51, 297], "73105854": [51, 74, 297], "tanhshrink": [51, 74, 350], "23840582": [51, 74, 298, 350], "thresholded_relu": [51, 74, 350], "_arraywithconversionsexperiment": [51, 96], "_arraywithcreationexperiment": [51, 96], "blackman_window": [51, 74, 352], "period": [51, 74, 280, 284, 300, 302, 303, 305, 306, 352, 358, 392, 604, 790], "window": [51, 55, 74, 78, 300, 302, 303, 305, 306, 319, 352, 358, 376, 377, 378, 380, 394, 395, 396, 397, 399, 400, 403, 404, 608, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 764, 785, 790, 795, 843], "symmetr": [51, 56, 74, 79, 91, 92, 300, 302, 303, 305, 306, 352, 359, 361, 410, 461, 609, 638, 643, 644, 645, 667, 796], "38777878e": [51, 74, 300, 352], "40000000e": [51, 300, 352], "00000000e": [51, 56, 74, 75, 300, 329, 352, 358, 379, 385, 389, 390, 609, 656, 786], "30000000e": [51, 74, 300, 352], "eye_lik": [51, 74, 352], "elsewher": [51, 74, 126, 301, 352, 601, 616, 720, 789], "mel_weight_matrix": [51, 74, 352], "num_mel_bin": [51, 74, 307, 352], "dft_length": [51, 74, 307, 352, 358, 380], "sample_r": [51, 74, 307, 352], "lower_edge_hertz": [51, 74, 307, 352], "upper_edge_hertz": [51, 74, 307, 352], "3000": [51, 74, 307, 352], "melweightmatrix": [51, 74, 307, 352], "linearli": [51, 52, 75, 307, 352, 522, 606, 609, 658], "frequenc": [51, 52, 74, 75, 307, 352, 370, 496, 522, 606, 790], "spectra": [51, 307, 352], "dft": [51, 74, 307, 352, 358], "stft": [51, 74, 307, 352, 358], "mel": [51, 74, 307, 352], "term": [51, 74, 300, 307, 352, 360, 434, 435, 608, 633, 764, 783, 790, 796, 817, 825, 827, 838], "hertz": [51, 307, 352], "2595": [51, 307, 352], "700": [51, 75, 307, 352, 526], "band": [51, 52, 74, 75, 307, 352, 522, 606], "spectrum": [51, 74, 307, 352], "n_fft": [51, 74, 307, 352, 358, 380], "signal": [51, 74, 307, 352, 358, 372, 373, 374, 379, 380, 389, 404, 764, 837, 838], "bound": [51, 74, 307, 352, 361, 444, 469, 748, 798, 802, 809, 812, 817, 844], "8000": [51, 74, 302, 307, 352], "75694758": [51, 307, 352], "trilu": [51, 74, 352], "retain": [51, 141, 315, 316, 352, 589, 601, 607, 807, 811, 825], "unsorted_segment_min": [51, 74, 352], "segment_id": [51, 74, 317, 318, 352, 770], "num_seg": [51, 74, 317, 318, 352, 770], "th": [51, 74, 92, 317, 318, 327, 352, 355, 359, 370, 408, 415, 505], "identifi": [51, 74, 317, 318, 352, 792, 797, 798, 812, 815], "distinct": [51, 62, 74, 317, 318, 352, 617, 721, 722, 723, 724, 789, 796, 801, 807, 808, 809, 816, 828, 838], "unsorted_segment_sum": [51, 74, 352], "_arraywithdata_typeexperiment": [51, 96], "_arraywithdeviceexperiment": [51, 96], "_arraywithelementwiseexperiment": [51, 96], "equal_nan": [51, 74, 320, 336, 355], "rel": [51, 53, 56, 58, 63, 70, 74, 76, 79, 81, 86, 96, 130, 320, 336, 355, 360, 370, 434, 435, 496, 588, 591, 593, 594, 595, 607, 609, 611, 618, 642, 652, 655, 663, 675, 679, 725, 728, 743, 745, 790, 797, 810, 815, 838, 840], "toler": [51, 56, 74, 79, 320, 336, 355, 359, 411, 424, 430, 609, 652, 655, 743, 745, 792, 810, 838], "1e10": [51, 320, 336, 355], "00001e10": [51, 320, 336, 355], "00001e": [51, 320, 355], "amax": [51, 74, 355], "keepdim": [51, 56, 58, 61, 64, 65, 68, 74, 79, 81, 84, 87, 88, 321, 322, 326, 341, 348, 355, 356, 361, 370, 466, 501, 502, 503, 504, 505, 609, 611, 616, 619, 620, 650, 666, 685, 716, 717, 732, 733, 734, 735, 736, 737, 738, 739, 740, 802, 809, 817], "reduc": [51, 52, 56, 61, 64, 65, 68, 74, 75, 79, 84, 87, 88, 207, 321, 322, 341, 355, 356, 370, 501, 502, 503, 504, 505, 519, 603, 606, 609, 616, 619, 620, 656, 716, 717, 732, 733, 734, 735, 736, 737, 738, 739, 740, 777, 797, 802, 809, 815, 817, 819, 831, 836, 840, 841, 842], "singleton": [51, 56, 61, 64, 65, 74, 79, 84, 87, 88, 321, 322, 355, 609, 611, 616, 619, 620, 666, 674, 681, 717, 732, 733, 734, 735, 736, 737, 738, 739, 740, 817], "amin": [51, 74, 355], "binar": [51, 74, 355], "map": [51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 128, 130, 135, 137, 143, 147, 149, 162, 166, 167, 174, 208, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 295, 296, 297, 298, 299, 301, 320, 321, 322, 323, 324, 326, 328, 335, 336, 342, 344, 346, 347, 348, 355, 358, 381, 382, 383, 401, 431, 432, 433, 434, 435, 436, 437, 440, 441, 442, 445, 446, 467, 469, 470, 476, 478, 479, 480, 481, 483, 496, 497, 498, 499, 507, 510, 511, 513, 514, 518, 519, 520, 521, 522, 525, 526, 529, 531, 533, 534, 535, 537, 538, 541, 549, 550, 564, 565, 567, 569, 571, 572, 585, 586, 591, 596, 606, 613, 622, 623, 624, 625, 631, 632, 637, 638, 639, 644, 645, 646, 647, 649, 650, 652, 654, 656, 657, 663, 668, 669, 670, 671, 675, 678, 679, 680, 681, 682, 685, 686, 697, 698, 702, 703, 710, 711, 712, 713, 715, 718, 721, 722, 723, 724, 725, 729, 730, 733, 735, 736, 738, 739, 740, 793, 796, 798, 804, 805, 809, 812, 813, 820, 823, 825, 832, 839], "outcom": [51, 74, 323, 334, 355], "conj": [51, 74, 232, 237, 239, 280, 281, 285, 355, 604], "conjug": [51, 56, 74, 79, 324, 355, 358, 359, 365, 380, 405, 411, 421, 423, 425, 484, 609, 649, 653, 661], "copysign": [51, 74, 355], "unsign": [51, 64, 74, 325, 355, 370, 497, 498, 619, 729, 730, 735, 737, 749, 798, 817], "count_nonzero": [51, 74, 355], "diff": [51, 68, 74, 355, 800, 808], "prepend": [51, 74, 327, 355, 609, 611, 649, 674, 789], "differenc": [51, 74, 327, 355], "prior": [51, 74, 327, 355, 365, 484, 609, 661, 802, 813], "expand": [51, 52, 58, 74, 75, 327, 355, 361, 522, 606, 611, 674, 796, 811], "discret": [51, 74, 327, 355, 358, 379, 380, 385, 386, 389, 390, 391, 401, 402, 610, 669, 764], "digamma": [51, 74, 355], "7549271": [51, 328, 355], "92278427": [51, 74, 328, 355], "9988394": [51, 328, 355], "erfc": [51, 74, 355], "complementari": [51, 74, 319, 329, 352, 355, 836, 844], "84270084e": [51, 329], "80259693e": [51, 329], "toward": [51, 58, 74, 81, 241, 288, 330, 342, 355, 361, 370, 467, 499, 604, 611, 679, 783, 786, 789, 817, 834, 838], "float_pow": [51, 74, 355], "fmax": [51, 74, 355], "fmod": [51, 74, 604], "divis": [51, 52, 53, 74, 75, 76, 228, 234, 241, 243, 276, 278, 288, 361, 447, 556, 564, 578, 587, 588, 593, 604, 606, 607, 608, 621, 628, 629, 768, 805, 814], "frexp": [51, 74, 355], "edge_ord": [51, 74, 334, 355], "estim": [51, 74, 334, 355, 370, 496], "boundari": [51, 60, 74, 83, 94, 312, 313, 334, 352, 355, 358, 393, 615, 713, 838], "partial": [51, 68, 74, 160, 161, 193, 194, 334, 355, 358, 359, 361, 370, 404, 424, 462, 463, 464, 465, 503, 523, 524, 592, 602, 603, 606, 607, 609, 648, 749, 751, 765, 766, 790, 795, 815], "33333333": [51, 74, 275, 334, 355, 604], "hypot": [51, 74, 355], "hypotenus": [51, 335, 355], "4031": [51, 335, 355], "8102": [51, 335, 355], "isclos": [51, 74, 355, 792], "ldexp": [51, 74, 355], "lerp": [51, 74, 355], "lgamma": [51, 355], "45373654": [51, 339, 355], "6477685": [51, 339, 355], "modf": [51, 74, 355], "fraction": [51, 74, 340, 355, 370, 505, 608, 631], "nansum": [51, 74, 355], "accumul": [51, 74, 341, 355, 361, 466], "nextaft": [51, 74, 355], "0e": [51, 53, 74, 76, 342, 355, 593, 607], "4013e": [51, 74, 342, 355], "4028e": [51, 74, 342, 355], "signbit": [51, 74, 355], "637": [51, 74, 344, 355], "0909": [51, 74, 344, 355], "sparsify_tensor": [51, 74, 355], "sparsifi": [51, 74, 345, 355], "arang": [51, 56, 64, 74, 79, 131, 345, 355, 358, 359, 376, 377, 378, 385, 390, 394, 395, 396, 399, 407, 422, 453, 545, 586, 601, 606, 609, 612, 619, 650, 666, 688, 689, 731, 783, 798, 808, 845], "xlogi": [51, 74, 355], "0986": [51, 74, 346, 355], "3863": [51, 74, 346, 355], "0000": [51, 74, 302, 303, 306, 346, 352, 355, 359, 361, 420, 455], "zeta": [51, 74, 355], "0369": [51, 74, 347, 355], "_arraywithgeneralexperiment": [51, 96], "init_valu": [51, 74, 78, 348, 356, 358, 400], "reduct": [51, 52, 57, 65, 68, 74, 75, 78, 80, 88, 348, 356, 358, 360, 361, 400, 431, 432, 433, 434, 435, 436, 437, 466, 519, 549, 550, 606, 610, 620, 668, 669, 670, 739, 740, 765, 798, 805, 808, 812, 819], "_arraywithgradientsexperiment": [51, 96], "_arraywithimageexperiment": [51, 96], "_arraywithlayersexperiment": [51, 96], "adaptive_avg_pool1d": [51, 74, 358], "output_s": [51, 74, 358, 372, 373, 374, 608, 636, 764, 783, 832], "1d": [51, 74, 91, 92, 358, 359, 361, 370, 372, 379, 381, 383, 389, 421, 440, 444, 466, 469, 496, 748, 764], "adapt": [51, 74, 76, 358, 372, 373, 374, 594, 607, 764, 768, 828], "pool": [51, 74, 78, 358, 372, 373, 374, 376, 377, 378, 394, 395, 396, 397, 400, 764, 789], "plane": [51, 74, 234, 237, 239, 267, 279, 280, 281, 284, 358, 361, 372, 373, 374, 467, 604], "l_in": [51, 74, 358, 372], "spatial": [51, 55, 74, 78, 358, 364, 372, 373, 374, 393, 400, 403, 476, 477, 478, 608, 621, 622, 623, 624, 626, 628, 630, 767], "Will": [51, 74, 358, 372, 373, 374, 762, 773, 823], "l_out": [51, 74, 358, 372], "h_in": [51, 74, 358, 373, 374], "w_in": [51, 74, 358, 373, 374], "s_0": [51, 74, 358, 373, 374], "s_1": [51, 74, 358, 373, 374], "adaptive_max_pool2d": [51, 74, 358], "avg_pool1d": [51, 74, 358], "kernel": [51, 55, 74, 78, 358, 376, 377, 378, 394, 395, 396, 397, 608, 633, 817, 823, 838, 841, 842], "stride": [51, 55, 74, 75, 78, 96, 358, 361, 376, 377, 378, 394, 395, 396, 397, 399, 400, 403, 438, 606, 608, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 764, 808, 813, 838], "nwc": [51, 55, 74, 78, 358, 376, 381, 394, 397, 608, 621, 622, 623, 628, 629, 764], "count_include_pad": [51, 74, 358, 376, 377, 378, 764], "ceil_mod": [51, 74, 358, 376, 377, 378, 394, 395, 396, 399, 764], "d_in": [51, 55, 74, 78, 358, 376, 377, 378, 380, 385, 386, 390, 394, 395, 396, 397, 608, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630], "algorithm": [51, 55, 67, 74, 78, 104, 358, 359, 376, 377, 378, 393, 394, 395, 396, 397, 424, 426, 430, 609, 622, 624, 625, 626, 627, 630, 657, 760, 764, 798, 809, 815, 823, 838, 840, 842], "ncw": [51, 55, 74, 78, 358, 376, 381, 382, 394, 397, 608, 621, 622, 623, 628, 629, 764], "avg_pool2d": [51, 74, 358], "nhwc": [51, 55, 74, 78, 358, 377, 382, 395, 399, 608, 621, 624, 625, 628, 629, 630, 764], "divisor_overrid": [51, 74, 358, 377, 378, 764], "avg_pool3d": [51, 74, 358], "ndhwc": [51, 55, 74, 78, 358, 378, 383, 396, 608, 621, 626, 627, 628, 629, 764], "volum": [51, 55, 74, 78, 358, 378, 380, 385, 386, 390, 396, 608, 626, 627], "ncdhw": [51, 55, 74, 78, 358, 378, 383, 396, 608, 621, 626, 627, 628, 629, 764], "dct": [51, 74, 358, 764, 820], "truncat": [51, 74, 358, 359, 379, 385, 389, 390, 391, 402, 428, 552, 606, 762, 764, 802, 820], "larger": [51, 58, 64, 74, 81, 87, 159, 358, 379, 386, 389, 391, 402, 602, 611, 619, 671, 679, 736, 738, 764, 812, 815, 845], "ortho": [51, 74, 358, 379, 380, 385, 386, 389, 390, 391, 401, 402, 764], "onesid": [51, 74, 358, 380], "fft": [51, 74, 358, 380, 386, 401, 402, 404, 764, 788, 838], "symmetri": [51, 358, 380], "rfft": [51, 74, 358, 380, 402], "invok": [51, 358, 380, 783, 803, 831, 832], "batch_idx": [51, 358, 380], "signal_dim1": [51, 358, 380], "signal_dim2": [51, 358, 380], "signal_dimn": [51, 358, 380], "signal_dim": [51, 358, 380], "embed": [51, 74, 358, 608, 634, 750, 764, 838], "max_norm": [51, 52, 74, 75, 358, 384, 513, 514, 606, 764], "ifft": [51, 74, 358, 385, 391, 764], "pi": [51, 74, 280, 284, 358, 360, 385, 390, 435, 599, 604], "44509285e": [51, 74, 358, 385], "14423775e": [51, 74, 358, 385], "17j": [51, 74, 358, 385, 390], "11483250e": [51, 74, 358, 385], "16j": [51, 74, 358, 385, 390], "33486982e": [51, 74, 358, 385], "22464680e": [51, 74, 358, 385], "95799250e": [51, 74, 358, 385], "66951701e": [51, 74, 358, 385], "fft2": [51, 358], "vari": [51, 62, 91, 92, 285, 386, 518, 604, 606, 609, 617, 656, 722, 723, 724, 796, 800, 809, 812, 819], "20477401j": [51, 358, 386], "0614962j": [51, 358, 386], "idct": [51, 74, 358], "49862671": [51, 74, 358, 379, 389], "37691498": [51, 74, 358, 379, 389], "00390816": [51, 74, 358, 379, 389], "58938599": [51, 74, 358, 379, 389], "92713165": [51, 74, 358, 379, 389], "078475": [51, 74, 358, 379, 389], "19664812": [51, 74, 358, 379, 389], "95411837": [51, 74, 358, 379, 389], "30636606e": [51, 74, 358, 390], "43029718e": [51, 74, 358, 390], "18j": [51, 74, 358, 385, 390], "53080850e": [51, 74, 358, 390], "58689626e": [51, 74, 358, 390], "24474906e": [51, 74, 358, 390], "91858728e": [51, 74, 358, 390], "01435406e": [51, 74, 358, 390], "ifftn": [51, 74, 358], "24730653": [51, 74, 358, 391], "90832391j": [51, 74, 358, 391], "49495562": [51, 74, 358, 391], "9039565j": [51, 74, 358, 391], "98193269": [51, 74, 358, 391], "49560517j": [51, 74, 358, 391], "93280757": [51, 74, 358, 391], "48075343j": [51, 74, 358, 391], "28526384": [51, 74, 358, 391], "3351205j": [51, 74, 358, 391], "2343787": [51, 74, 358, 391], "83528011j": [51, 74, 358, 391], "18791352": [51, 74, 358, 391], "30690572j": [51, 74, 358, 391], "82115787": [51, 74, 358, 391], "96195183j": [51, 74, 358, 391], "44719226": [51, 74, 358, 391], "72654048j": [51, 74, 358, 391], "51476765": [51, 358, 391], "66160417j": [51, 358, 391], "04319742": [51, 358, 391], "05411636j": [51, 358, 391], "015561": [51, 358, 391], "04216015j": [51, 358, 391], "06310689": [51, 358, 391], "05347854j": [51, 358, 391], "13392983": [51, 358, 391], "16052352j": [51, 358, 391], "08371392": [51, 358, 391], "17252843j": [51, 358, 391], "0031429": [51, 358, 391], "05421245j": [51, 358, 391], "10446617": [51, 358, 391], "17747098j": [51, 358, 391], "05344324": [51, 358, 391], "07972424j": [51, 358, 391], "8344667": [51, 74, 358, 391], "98222595j": [51, 74, 358, 391], "48472244": [51, 74, 358, 391], "30233797j": [51, 74, 358, 391], "recompute_scale_factor": [51, 74, 358, 393, 815], "antialia": [51, 74, 358, 393, 815], "height": [51, 52, 55, 74, 75, 78, 358, 393, 518, 606, 608, 624, 625, 626, 627, 630, 762, 820], "width": [51, 52, 55, 74, 75, 78, 358, 359, 361, 370, 393, 411, 461, 499, 518, 606, 608, 622, 623, 624, 625, 626, 627, 630, 634], "trilinear": [51, 74, 358, 393, 815], "nearest_exact": [51, 74, 358, 393, 815], "tf_area": [51, 74, 358, 393, 815], "mitchellcub": [51, 74, 358, 393, 815], "lanczos3": [51, 74, 358, 393, 815], "lanczos5": [51, 74, 358, 393, 815], "gaussian": [51, 74, 104, 358, 393, 598, 815], "overwrit": [51, 68, 74, 207, 358, 393, 603, 790, 808, 809, 817], "align": [51, 68, 74, 358, 359, 393, 408, 608, 636, 789, 797, 809, 811, 817, 819, 825, 844], "thu": [51, 74, 228, 241, 276, 284, 285, 358, 359, 393, 410, 604, 609, 643, 644, 788, 797, 802, 806, 809, 813], "preserv": [51, 52, 53, 68, 74, 75, 76, 97, 358, 359, 361, 370, 393, 424, 440, 441, 442, 452, 453, 471, 503, 535, 596, 606, 607, 611, 675, 748, 811, 812, 822, 823, 832], "antialias": [51, 74, 358, 393], "downsampl": [51, 74, 358, 393], "max_pool1d": [51, 74, 358], "dilaton": [51, 74, 394, 395, 396], "max_pool3d": [51, 74, 358], "max_unpool1d": [51, 74, 358], "unpool": [51, 74, 358, 397], "reduce_window": [51, 78, 358], "window_dimens": [51, 78, 358, 400], "window_strid": [51, 78, 358, 400], "base_dil": [51, 78, 358, 400], "window_dil": [51, 78, 358, 400], "trim": [51, 68, 74, 358, 361, 401, 471], "orthonorm": [51, 56, 74, 79, 358, 401, 609, 656, 659], "8660254j": [51, 74, 358, 401], "rfftn": [51, 74, 358], "sliding_window": [51, 74, 358], "window_s": [51, 74, 358, 403], "frame_length": [51, 74, 358, 404], "frame_step": [51, 74, 358, 404], "fft_length": [51, 74, 358, 404], "window_fn": [51, 74, 358, 404], "pad_end": [51, 74, 358, 404], "smallest": [51, 68, 74, 159, 162, 230, 358, 361, 404, 470, 602, 604, 609, 650, 748, 750, 751], "enclos": [51, 74, 358, 404, 839], "window_length": [51, 74, 300, 302, 305, 306, 319, 352, 358, 404], "li": [51, 74, 358, 359, 370, 404, 411, 505, 827], "past": [51, 74, 358, 404, 790, 792, 810, 812, 824, 838], "fft_unique_bin": [51, 74, 358, 404], "complex64": [51, 71, 74, 152, 166, 175, 181, 247, 274, 358, 401, 404, 602, 604, 609, 657, 659, 660, 749, 798], "complex128": [51, 74, 75, 152, 153, 166, 175, 181, 358, 404, 544, 602, 606, 609, 644, 645, 650, 666, 748, 749, 786, 798], "compon": [51, 74, 136, 137, 215, 216, 217, 220, 223, 232, 234, 235, 237, 239, 267, 269, 270, 277, 280, 281, 284, 285, 310, 314, 324, 352, 355, 358, 359, 404, 415, 424, 601, 604, 616, 719, 783, 811, 817, 828, 834, 839, 841], "linear_algebra": [51, 56, 74, 79, 609, 813], "_arraywithlinearalgebraexperiment": [51, 96], "adjoint": [51, 56, 74, 79, 359, 425, 609, 647, 658, 659, 748], "batched_out": [51, 74, 359], "j1": [51, 74, 359, 406], "jn": [51, 74, 359, 406], "k1": [51, 74, 359, 406], "km": [51, 74, 359, 406], "outer": [51, 56, 74, 79, 91, 359, 406, 609, 612, 687, 688, 689, 788], "30000001": [51, 74, 359, 406, 518, 606, 617, 722], "40000001": [51, 55, 67, 74, 96, 97, 106, 109, 290, 350, 359, 406, 598, 608, 617, 637, 722], "60000002": [51, 74, 87, 97, 359, 364, 406, 480, 481, 733], "80000001": [51, 74, 359, 364, 406, 480, 481], "60000001": [51, 74, 359, 406], "90000004": [51, 74, 359, 406, 619, 733], "20000002": [51, 74, 359, 406], "20000005": [51, 53, 74, 290, 350, 359, 406, 587], "00000012": [51, 74, 359, 406], "49999994": [51, 74, 359, 406], "00000006": [51, 74, 359, 406], "60000014": [51, 74, 359, 406], "19999993": [51, 74, 359, 406], "80000007": [51, 74, 359, 406], "20000017": [51, 74, 359, 406], "89999992": [51, 74, 359, 406], "60000008": [51, 74, 359, 406], "80000019": [51, 74, 338, 355, 359, 406], "4000001": [51, 74, 78, 359, 406, 608, 631, 637], "cond": [51, 74, 117, 359, 600, 823], "933034373659268": [51, 407], "diagflat": [51, 74, 359, 417, 420], "offset": [51, 56, 59, 70, 74, 79, 82, 128, 359, 364, 408, 476, 477, 478, 601, 609, 614, 642, 663, 709, 755], "padding_valu": [51, 74, 359, 408], "right_left": [51, 74, 359, 408], "num_row": [51, 74, 359, 408], "num_col": [51, 74, 359, 408], "dot": [51, 55, 74, 78, 91, 359, 422, 608, 609, 634, 637, 665, 783, 789, 797], "eig": [51, 56, 74, 359, 609, 644, 645], "37228132": [51, 74, 359, 410, 412, 643], "82456484": [51, 410, 643], "41597356": [51, 410, 643], "56576746": [51, 410, 643], "90937671": [51, 410, 643], "eigh_tridiagon": [51, 74, 359], "eigvals_onli": [51, 74, 359, 411], "select_rang": [51, 74, 359, 411], "tol": [51, 74, 95, 359, 411, 424, 430], "eigenvalu": [51, 56, 74, 79, 91, 92, 359, 410, 411, 412, 609, 643, 644, 645, 652], "eigenvector": [51, 74, 359, 410, 411, 609, 643, 644], "interv": [51, 60, 65, 74, 83, 88, 120, 131, 132, 139, 359, 370, 411, 499, 601, 609, 611, 615, 620, 639, 665, 671, 674, 682, 711, 713, 739, 740], "togeth": [51, 68, 74, 320, 336, 355, 359, 411, 769, 783, 793, 796, 798, 808, 809, 812, 813, 815, 821, 822, 823, 828, 836, 838, 839, 844], "cluster": [51, 74, 359, 411, 823, 838], "converg": [51, 74, 359, 411, 829], "_2": [51, 74, 359, 411], "precis": [51, 56, 74, 79, 159, 247, 267, 274, 281, 331, 355, 359, 370, 411, 496, 558, 580, 602, 604, 606, 609, 644, 645, 650, 657, 659, 660, 666, 756, 797, 809, 814, 815, 842], "eig_val": [51, 74, 359, 411], "decreas": [51, 74, 359, 411, 750], "eig_vector": [51, 74, 359, 411], "38196": [51, 411], "61803": [51, 411], "eigval": [51, 74, 359], "general_inner_product": [51, 79, 359], "n_mode": [51, 79, 359, 413], "tradit": [51, 79, 359, 413], "inner": [51, 56, 70, 79, 100, 135, 359, 410, 413, 601, 609, 612, 643, 644, 649, 687, 688, 689, 788, 808], "higher_order_mo": [51, 74, 359], "n_featur": [51, 74, 359, 414], "d1": [51, 74, 359, 414], "dn": [51, 74, 359, 414], "higher": [51, 74, 359, 361, 370, 414, 424, 430, 440, 441, 442, 505, 763, 798, 808, 816, 817, 822, 823, 835, 838, 839, 842, 844, 845], "initialize_tuck": [51, 74, 359], "svd": [51, 56, 74, 79, 94, 359, 415, 419, 424, 426, 427, 428, 430, 609, 660], "truncated_svd": [51, 74, 359, 415, 424, 427, 430], "non_neg": [51, 74, 314, 352, 359, 415], "mask": [51, 55, 74, 78, 91, 359, 361, 415, 416, 424, 430, 468, 528, 606, 608, 631, 634, 637, 815], "svd_mask_repeat": [51, 74, 359, 415, 424, 430], "tuckertensor": [51, 74, 95, 314, 352, 359, 415, 424, 430], "scheme": [51, 74, 359, 415, 424, 792, 821, 838], "tucker": [51, 74, 314, 352, 359, 415, 424], "decomposit": [51, 56, 74, 79, 91, 92, 94, 310, 311, 312, 313, 314, 352, 359, 415, 424, 427, 429, 430, 609, 638, 644, 648, 656, 659, 788, 845], "miss": [51, 74, 359, 361, 415, 424, 430, 468, 768, 788, 789, 793, 796, 797, 800, 809, 812, 815], "everywher": [51, 74, 359, 415, 424, 430], "imput": [51, 74, 359, 415, 424, 430], "kron": [51, 74, 359, 420, 845], "make_svd_non_neg": [51, 74, 359, 428], "nntype": [51, 74, 359, 419], "nndsvd": [51, 74, 359, 419], "singular": [51, 56, 74, 79, 359, 415, 419, 426, 428, 609, 650, 652, 655, 659, 660, 748, 750, 798], "nndsvda": [51, 74, 359, 419], "boutsidi": [51, 74, 359, 419], "gallopoulo": [51, 74, 359, 419], "pattern": [51, 52, 74, 75, 359, 419, 518, 519, 520, 606, 798, 801, 811, 829], "recognit": [51, 74, 359, 419], "1362": [51, 74, 359, 419], "2008": [51, 74, 359, 419, 838], "matrix_exp": [51, 74, 359], "7183": [51, 74, 359, 420], "3891": [51, 74, 359, 420], "mode_dot": [51, 74, 90, 91, 95, 359], "matrix_or_vector": [51, 74, 91, 95, 359, 421], "i_1": [51, 74, 91, 92, 359, 421], "i_k": [51, 74, 91, 359, 421], "i_n": [51, 74, 91, 359, 421], "i_": [51, 74, 91, 359, 370, 421, 499], "multi_dot": [51, 74, 359], "148": [51, 73, 74, 237, 359, 422], "multi_mode_dot": [51, 74, 359], "mat_or_vec_list": [51, 74, 359, 423], "times_0": [51, 359, 423], "vec": [51, 359, 423], "times_1": [51, 359, 423], "cdot": [51, 267, 359, 423, 604], "times_n": [51, 359, 423], "noqa": [51, 91, 94, 214, 281, 358, 359, 394, 423, 604, 610, 668, 764, 773, 810], "partial_tuck": [51, 74, 359], "n_iter_max": [51, 74, 359, 424, 430], "verbos": [51, 74, 359, 424, 427, 430, 812, 817], "return_error": [51, 74, 359, 424, 430], "variat": [51, 74, 359, 424, 430, 800, 809, 812], "reconstruct": [51, 56, 62, 74, 85, 94, 359, 361, 424, 430, 473, 609, 617, 659, 721, 723, 810], "return_erro": [51, 359, 424, 430], "svd_flip": [51, 74, 359], "u_based_decis": [51, 74, 359, 426], "basi": [51, 74, 359, 426, 790, 792, 820], "flip": [51, 58, 74, 81, 91, 225, 359, 361, 426, 452, 453, 604, 611, 808, 819, 820, 822], "decis": [51, 74, 359, 426, 783, 792, 798, 815, 817, 819, 838], "u_adjust": [51, 74, 359, 426], "v_adjust": [51, 74, 359, 426], "tensor_train": [51, 74, 359], "tt": [51, 74, 313, 352, 359, 427, 429], "kth": [51, 359, 427], "tttensor": [51, 94, 313, 352, 359, 427], "compute_uv": [51, 56, 74, 79, 359, 428, 609, 659], "n_eigenvec": [51, 74, 359, 428], "returnedv": [51, 428], "vh": [51, 56, 74, 79, 359, 428, 609, 659], "eigen": [51, 74, 359, 428], "namedtupl": [51, 56, 62, 74, 79, 85, 359, 361, 410, 428, 473, 609, 617, 643, 644, 656, 657, 659, 721, 722, 723], "tt_matrix_to_tensor": [51, 74, 359], "4d": [51, 74, 358, 359, 382, 383, 429], "known": [51, 74, 278, 359, 427, 429, 604, 763, 792, 797, 798, 809, 812], "rank_k": [51, 74, 359, 429], "left_dim_k": [51, 74, 359, 429], "right_dim_k": [51, 74, 359, 429], "rank_": [51, 74, 359, 429], "49671414": [51, 74, 359, 429, 615, 712], "1382643": [51, 74, 359, 429, 615, 712], "64768857": [51, 74, 359, 429, 615, 712], "5230298": [51, 74, 359, 429, 615, 712], "23415337": [51, 74, 359, 429, 615, 712], "23413695": [51, 74, 359, 429, 615, 712], "57921278": [51, 74, 359, 429], "76743472": [51, 74, 359, 429], "1163073": [51, 74, 359, 429], "11629914": [51, 74, 359, 429], "03237505": [51, 74, 359, 429], "03237278": [51, 74, 359, 429], "78441733": [51, 74, 359, 429], "38119566": [51, 74, 359, 429], "21834874": [51, 74, 359, 429], "10610882": [51, 74, 359, 429], "15165846": [51, 74, 359, 429], "15164782": [51, 74, 359, 429], "35662258": [51, 74, 359, 429], "35659757": [51, 74, 359, 429], "02283812": [51, 74, 359, 429], "49705869": [51, 74, 359, 429], "40518808": [51, 74, 359, 429], "16882598": [51, 74, 359, 429], "fixed_factor": [51, 74, 359, 430], "tl": [51, 74, 359, 430], "kolda": [51, 74, 359, 430], "bader": [51, 74, 359, 430], "siam": [51, 74, 359, 427, 430], "review": [51, 74, 359, 430, 785, 788, 790, 795, 797, 800, 809, 813], "vol": [51, 74, 359, 430], "pp": [51, 74, 359, 430], "455": [51, 74, 359, 430], "500": [51, 74, 75, 78, 358, 359, 381, 382, 430, 526, 606], "2009": [51, 74, 359, 430], "_arraywithlossesexperiment": [51, 96], "huber_loss": [51, 74, 360], "delta": [51, 53, 74, 76, 360, 431, 587, 607], "transit": [51, 74, 360, 431, 838], "huber": [51, 74, 360, 431], "kl_div": [51, 74, 360], "log_target": [51, 74, 360, 432], "contai": [51, 432], "batchmean": [51, 360, 432], "kullback": [51, 74, 360, 432], "leibler": [51, 74, 360, 432], "0916": [51, 432], "l1_loss": [51, 74, 360, 434], "l1": [51, 56, 74, 79, 360, 364, 431, 433, 434, 436, 479, 609, 666, 796, 820], "targetict": [51, 74, 360, 433, 434, 436, 437], "20000000000000004": [51, 433], "log_poisson_loss": [51, 74, 360], "compute_full_loss": [51, 74, 360, 434, 765], "favor": [51, 74, 360, 434], "likelihood": [51, 74, 360, 434, 435], "binari": [51, 52, 55, 57, 78, 80, 224, 227, 229, 264, 284, 360, 434, 437, 604, 608, 610, 631, 634, 668], "28402555": [51, 360, 434], "03402555": [51, 360, 434], "1573164": [51, 360, 434], "poisson_nll_loss": [51, 74, 360], "log_input": [51, 74, 360, 435], "poisson": [51, 74, 360, 365, 434, 435], "assumpt": [51, 360, 434, 435], "minu": [51, 360, 434, 435], "omiss": [51, 360, 435], "signific": [51, 360, 435, 814, 823, 827, 828, 838], "stirl": [51, 74, 360, 434, 435], "factori": [51, 360, 434, 435], "describ": [51, 64, 74, 92, 217, 234, 235, 267, 270, 272, 360, 365, 368, 435, 486, 489, 604, 608, 619, 634, 731, 735, 737, 785, 788, 789, 790, 795, 797, 808, 809, 812, 817, 822, 838], "prevent": [51, 53, 74, 76, 360, 435, 530, 587, 588, 593, 606, 607, 608, 619, 631, 737, 763, 768, 788, 790, 797, 798, 802, 808, 809, 813], "input_tensor": [51, 74, 359, 360, 427, 435, 809], "target_tensor": [51, 360, 435], "1978": [51, 435], "smooth_l1_loss": [51, 74, 360], "smooth": [51, 57, 74, 80, 360, 431, 436, 610, 668, 669, 670, 807], "8125": [51, 436], "soft_margin_loss": [51, 74, 360], "soft": [51, 74, 360, 361, 437, 468, 799], "margin": [51, 74, 360, 437, 809], "35667497": [51, 437, 610, 669], "22314353": [51, 437], "60943791": [51, 437], "manipul": [51, 74, 808, 809, 813, 815, 817, 822, 827, 838], "_arraywithmanipulationexperiment": [51, 96], "as_strid": [51, 74, 361], "nativeshap": [51, 55, 58, 60, 74, 81, 83, 121, 122, 124, 129, 136, 142, 361, 365, 438, 449, 454, 462, 465, 482, 483, 484, 485, 486, 550, 563, 568, 570, 601, 606, 608, 611, 615, 621, 623, 625, 627, 629, 678, 711, 712, 713, 804, 806], "byte": [51, 52, 70, 74, 75, 96, 128, 361, 438, 544, 601, 606, 843, 844], "associative_scan": [51, 74, 361], "revers": [51, 52, 56, 64, 74, 79, 87, 96, 97, 359, 361, 370, 418, 439, 452, 453, 497, 498, 517, 606, 609, 611, 619, 664, 675, 729, 730, 788, 796, 797, 798, 800, 801, 808, 809, 815, 822, 823], "scan": [51, 74, 361, 439, 823], "atleast_1d": [51, 74, 361], "ari": [51, 74, 361, 440, 441, 442, 447, 456, 474], "a1": [51, 75, 361, 440, 441, 442, 445, 510], "a2": [51, 75, 361, 440, 441, 442, 445, 510], "atleast_2d": [51, 74, 361], "atleast_3d": [51, 74, 361], "column_stack": [51, 74, 361], "concat_from_sequ": [51, 74, 361], "input_sequ": [51, 74, 361, 446], "new_axi": [51, 74, 361, 446, 822], "dsplit": [51, 74, 361], "indices_or_sect": [51, 74, 361, 447, 456, 474], "3rd": [51, 74, 361, 447], "dstack": [51, 74, 361], "fill_diagon": [51, 74, 361], "fill_diag": [51, 450], "fortran": [51, 58, 74, 81, 361, 451, 611, 678, 838, 842], "layout": [51, 58, 74, 81, 361, 451, 611, 678, 794, 808, 809, 815], "fliplr": [51, 74, 361, 808], "diag": [51, 56, 74, 79, 92, 361, 452, 453, 609, 644, 817], "flipud": [51, 74, 361, 808], "fold": [51, 74, 361, 462, 463, 797], "unfold": [51, 74, 91, 92, 94, 359, 361, 415, 454, 462, 464], "folded_tensor": [51, 361, 454], "heavisid": [51, 74, 361], "5000": [51, 361, 455, 609, 647], "hsplit": [51, 74, 361], "horizont": [51, 74, 361, 445, 456, 518, 606], "hstack": [51, 74, 361, 445], "vstack": [51, 74, 361, 457], "i0": [51, 74, 361, 370, 499], "bessel": [51, 64, 74, 87, 305, 352, 361, 458, 619, 736, 738], "kind": [51, 64, 74, 159, 162, 163, 370, 458, 497, 498, 503, 602, 619, 729, 730, 735, 737, 748, 749, 787, 809, 812, 815, 817, 823], "26606588": [51, 74, 361, 458], "2795853": [51, 74, 361, 458], "88079259": [51, 74, 361, 458], "row_mod": [51, 74, 361, 459], "column_mod": [51, 74, 361, 459], "ascend": [51, 63, 74, 86, 361, 368, 459, 489, 618, 725, 727], "prod": [51, 52, 64, 75, 87, 359, 361, 416, 418, 459, 504, 519, 606, 619, 748, 798, 800, 817], "moveaxi": [51, 74, 361], "destin": [51, 74, 361, 460], "unstack": [51, 58, 68, 81, 460, 611, 796, 817, 820, 845], "reorder": [51, 58, 74, 81, 361, 460, 518, 606, 611, 675, 811], "stat_length": [51, 74, 361, 461], "constant_valu": [51, 74, 361, 461], "end_valu": [51, 74, 361, 461], "reflect_typ": [51, 74, 361, 461], "partial_fold": [51, 74, 361], "skip_begin": [51, 74, 361, 462, 463, 464, 465], "untouch": [51, 74, 361, 462, 463, 464, 465], "partial_tensor_to_vec": [51, 74, 361], "skip_end": [51, 74, 361, 463, 464], "vectoris": [51, 74, 91, 361, 463, 465], "partial_unfold": [51, 74, 361], "ravel_tensor": [51, 74, 361, 464], "n_1": [51, 74, 361, 464], "n_2": [51, 74, 361, 464], "n_i": [51, 74, 359, 361, 416, 464], "partial_vec_to_tensor": [51, 74, 361], "put_along_axi": [51, 74, 361], "rot90": [51, 74, 361, 808], "rotat": [51, 74, 361, 467], "soft_threshold": [51, 74, 361], "take_along_axi": [51, 74, 361], "arr": [51, 52, 71, 74, 167, 361, 444, 466, 469, 550, 602, 794, 798, 799], "top_k": [51, 74, 361], "largest": [51, 68, 74, 159, 162, 359, 361, 426, 470, 602, 609, 650, 659], "sort": [51, 62, 68, 74, 85, 97, 286, 359, 361, 370, 410, 470, 489, 503, 604, 609, 617, 643, 644, 659, 660, 721, 725, 726, 727, 750, 783, 787, 797, 811, 813], "trim_zero": [51, 74, 361], "fb": [51, 74, 361, 471], "front": [51, 74, 361, 471, 809, 816, 817, 820, 827, 836, 838], "unfolded_tensor": [51, 361, 472], "unique_consecut": [51, 74, 361], "vsplit": [51, 74, 361], "vertic": [51, 74, 361, 474, 475, 518, 606, 790], "_arraywithnormsexperiment": [51, 96], "varianc": [51, 64, 74, 87, 364, 476, 478, 619, 738, 763, 767], "nsc": [51, 74, 364, 476, 477, 478, 767], "braodcast": [51, 74, 364, 476], "ad": [51, 58, 74, 81, 89, 234, 267, 320, 336, 355, 364, 476, 477, 478, 564, 565, 604, 606, 608, 609, 611, 634, 644, 645, 674, 764, 769, 783, 786, 787, 788, 789, 790, 792, 793, 795, 796, 797, 798, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 812, 813, 815, 817, 821, 823, 828, 831, 837, 838], "running_mean": [51, 74, 364, 476, 478, 767], "running_var": [51, 74, 364, 476, 478, 767], "nc": [51, 74, 364, 476, 477, 478, 767], "group_norm": [51, 74, 364], "num_group": [51, 74, 364, 477], "group": [51, 74, 361, 364, 473, 477, 608, 613, 621, 628, 629, 692, 792, 796, 798, 805, 809, 810, 834, 837, 843], "instance_norm": [51, 74, 364], "l1_normal": [51, 74, 364], "33333334": [51, 364, 479, 481, 589, 607, 608, 609, 630, 666], "33333337": [51, 131, 364, 479, 589, 601, 607], "28571439": [51, 364, 479], "l2_normal": [51, 74, 364, 481], "l2": [51, 56, 79, 90, 91, 364, 480, 481, 609, 666, 764, 796], "44721359": [51, 74, 364, 480, 481], "89442718": [51, 74, 364, 480, 481], "lp_normal": [51, 74, 364], "lp": [51, 364, 481], "_arraywithrandomexperiment": [51, 96], "bernoulli": [51, 74, 358, 365, 381, 382, 383], "event": [51, 74, 365, 482, 812], "entri": [51, 58, 68, 74, 81, 85, 92, 131, 359, 361, 365, 425, 450, 452, 453, 482, 601, 611, 613, 680, 703, 721, 789, 797, 812, 838], "parameter": [51, 60, 74, 83, 365, 482, 483, 485, 486, 615, 710, 712, 713], "odd": [51, 74, 272, 361, 365, 461, 482, 604, 787, 792], "drawn": [51, 60, 74, 83, 365, 482, 483, 484, 485, 486, 615, 710, 711, 712, 713, 748, 749, 750, 763, 812], "dirichlet": [51, 74, 365], "10598304": [51, 365, 484], "21537054": [51, 365, 484], "67864642": [51, 365, 484], "48006698": [51, 365, 484], "07472073": [51, 365, 484], "44521229": [51, 365, 484], "55479872": [51, 365, 484], "05426367": [51, 365, 484], "39093761": [51, 365, 484], "19531053": [51, 365, 484], "51675832": [51, 365, 484], "28793114": [51, 365, 484], "12315625": [51, 365, 484], "29823365": [51, 365, 484], "5786101": [51, 365, 484], "15564976": [51, 365, 484], "50542368": [51, 365, 484], "33892656": [51, 365, 484], "1325352": [51, 365, 484], "44439589": [51, 365, 484], "42306891": [51, 365, 484], "gamma": [51, 59, 74, 82, 328, 339, 355, 365, 370, 500, 614, 709], "rate": [51, 53, 74, 76, 358, 365, 399, 486, 588, 591, 593, 594, 595, 607, 612, 687, 688, 689, 768, 797], "lam": [51, 74, 365, 486], "_arraywithsearchingexperiment": [51, 96], "unravel_index": [51, 74, 366], "unravel": [51, 74, 366, 487], "_arraywithsetexperiment": [51, 96], "_arraywithsortingexperiment": [51, 96], "lexsort": [51, 74, 368], "indirectli": [51, 74, 368, 489], "statist": [51, 74, 89, 361, 461, 767, 781, 788, 798, 812, 813, 838], "_arraywithstatisticalexperiment": [51, 96], "bincount": [51, 74, 370], "minlength": [51, 74, 370, 494], "corrcoef": [51, 74, 370], "rowvar": [51, 74, 370, 495, 496], "observ": [51, 74, 370, 495, 496, 790, 798, 802, 817, 831, 840], "relationship": [51, 74, 495, 763, 811], "cov": [51, 74, 370], "bia": [51, 55, 74, 78, 82, 370, 496, 545, 606, 608, 614, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 633, 634, 709, 764, 805, 812, 817, 821], "ddof": [51, 74, 370, 496], "fweight": [51, 74, 370, 496], "aweight": [51, 74, 370, 496], "overridden": [51, 74, 370, 496, 768, 793], "unbias": [51, 64, 74, 87, 370, 496, 619, 738], "typic": [51, 74, 320, 336, 355, 370, 496, 618, 727, 764, 792, 805, 837, 845], "assign": [51, 74, 91, 370, 496, 788, 790, 794, 798, 808, 811, 819], "covari": [51, 74, 370, 496], "cummax": [51, 74, 370], "exclus": [51, 52, 64, 68, 74, 75, 87, 120, 359, 370, 424, 497, 498, 537, 538, 541, 601, 606, 615, 619, 711, 729, 730, 796, 798, 805, 822, 842, 844], "cumul": [51, 64, 74, 87, 370, 497, 498, 619, 729, 730], "uint64": [51, 64, 156, 161, 163, 164, 174, 176, 179, 370, 497, 498, 602, 619, 729, 730, 735, 737, 748, 749, 798, 812, 817], "uint16": [51, 64, 151, 156, 161, 162, 171, 370, 497, 498, 602, 619, 729, 730, 735, 737, 748, 749, 798, 809, 812, 817], "bit": [51, 64, 158, 159, 162, 225, 226, 228, 370, 497, 498, 602, 604, 619, 729, 730, 735, 737, 783, 787, 788, 789, 796, 797, 798, 800, 805, 817, 819, 844], "uint32": [51, 64, 156, 161, 162, 163, 185, 370, 497, 498, 602, 619, 729, 730, 735, 737, 748, 749, 798, 812, 817], "cummin": [51, 74, 370], "histogram": [51, 74, 370], "extend_lower_interv": [51, 74, 370, 499], "extend_upper_interv": [51, 74, 370, 499], "densiti": [51, 74, 370, 499], "monoton": [51, 74, 370, 499], "rightmost": [51, 74, 370, 499], "c1": [51, 74, 370, 499, 796], "ff": [51, 74, 370, 499], "c_": [51, 74, 92, 370, 499], "igamma": [51, 74, 370], "incomplet": [51, 74, 370, 500, 790], "3614": [51, 74, 370, 500], "2085": [51, 74, 370, 500], "median": [51, 74, 361, 370, 461, 503], "nanmean": [51, 74, 370], "6666666666666665": [51, 74, 370, 502], "nanmedian": [51, 74, 370], "overwrite_input": [51, 74, 370, 503], "treat": [51, 68, 74, 97, 272, 341, 355, 361, 370, 469, 503, 504, 604, 745, 807, 812, 818, 822], "undefin": [51, 74, 361, 370, 371, 461, 503, 506, 798, 802, 807], "nanprod": [51, 74, 370], "Not": [51, 74, 341, 355, 359, 370, 412, 504, 599, 794, 802, 810, 820, 821, 823], "quantil": [51, 74, 370], "inclus": [51, 74, 120, 370, 505, 601, 615, 711, 784, 794, 808, 815], "midpoint": [51, 74, 370, 505], "surround": [51, 74, 370, 505, 815], "whichev": [51, 74, 370, 505], "_arraywithutilityexperiment": [51, 96], "optional_get_el": [51, 74, 371], "empti": [51, 52, 68, 75, 120, 361, 371, 461, 506, 513, 550, 601, 606, 609, 613, 619, 620, 663, 666, 704, 735, 737, 739, 740, 788, 789, 793, 795, 798, 799, 808], "_arraywithgener": [52, 96], "all_equ": [52, 75, 606], "equality_matrix": [52, 75, 507, 606], "array_equ": [52, 75, 606], "assert_supports_inplac": [52, 75, 606], "ivybackendexcept": [52, 75, 511, 535, 606, 778, 793, 799, 802], "clip_matrix_norm": [52, 75, 606], "894": [52, 75, 513, 514, 606, 614, 709], "clip_vector_norm": [52, 75, 606], "default_v": [52, 517, 606], "catch_except": [52, 517, 606], "rev": [52, 517, 606], "with_cal": [52, 517, 606], "catch": [52, 517, 606, 806, 812], "einops_rearrang": [52, 75, 606], "axes_length": [52, 75, 518, 519, 520, 606], "arrang": [52, 518, 606], "rearrang": [52, 75, 518, 520, 606, 811], "einops_reduc": [52, 75, 606, 798], "einops_repeat": [52, 75, 606], "fourier_encod": [52, 75, 606], "max_freq": [52, 75, 522, 606], "oppos": [52, 75, 522, 606, 798], "geometr": [52, 75, 522, 606, 609, 664], "0000000e": [52, 75, 522, 606], "2246468e": [52, 75, 522, 606], "4492936e": [52, 522, 606], "6739404e": [52, 75, 522, 606], "batch_dim": [52, 75, 525, 526, 606, 770], "gather_nd": [52, 75, 606], "get_num_dim": [52, 75, 606], "as_arrai": [52, 75, 529, 563, 606, 770], "has_nan": [52, 75, 606], "include_inf": [52, 75, 531, 585, 606], "inplace_decr": [52, 75, 606], "val": [52, 68, 73, 75, 247, 361, 450, 533, 534, 535, 554, 555, 556, 604, 606, 798, 808, 819], "decrement": [52, 75, 533, 606], "inplace_incr": [52, 75, 606], "increment": [52, 75, 534, 606, 790, 838], "inplace_upd": [52, 75, 553, 606, 761, 808], "ensure_in_backend": [52, 75, 535, 606, 808], "keep_input_dtyp": [52, 75, 535, 606, 808], "is_arrai": [52, 75, 606, 808, 809], "is_ivy_arrai": [52, 75, 606, 808, 819], "is_ivy_contain": [52, 606], "is_native_arrai": [52, 75, 170, 538, 602, 606, 819], "isin": [52, 75, 606], "test_el": [52, 75, 542, 606], "assume_uniqu": [52, 75, 542, 606], "invert": [52, 75, 225, 542, 604, 606, 609, 651], "scatter_flat": [52, 75, 606], "occupi": [52, 159, 162, 549, 550, 602, 606], "scatter_nd": [52, 75, 606, 815, 819], "stable_divid": [52, 75, 606, 805], "denomin": [52, 59, 75, 82, 556, 564, 578, 606, 614, 709, 767, 805, 814, 823, 835], "min_denomin": [52, 75, 556, 564, 578, 606, 814], "_min_denomin": [52, 564, 606], "stable_pow": [52, 75, 606], "min_bas": [52, 75, 555, 565, 577, 606, 767, 814], "stabl": [52, 63, 75, 86, 141, 315, 321, 322, 352, 355, 368, 489, 555, 556, 564, 565, 577, 578, 601, 606, 618, 725, 728, 750, 789, 794, 798, 809, 814, 817, 823], "00004": [52, 75, 565, 606], "00008": [52, 75, 565, 606], "00004000e": [52, 565], "56002560e": [52, 565], "60001200e": [52, 565], "09602048e": [52, 565], "supports_inplace_upd": [52, 75, 606], "to_fil": 52, "fid": 52, "sep": 52, "format_": 52, "recov": [52, 802, 809], "to_scalar": [52, 75, 606], "value_is_nan": [52, 75, 606], "_arraywithgradi": [53, 96], "adam_step": [53, 76, 607], "mw": [53, 76, 587, 588, 607, 821], "vw": [53, 76, 587, 588, 607, 821], "beta1": [53, 76, 509, 587, 588, 593, 606, 607, 768, 821], "beta2": [53, 76, 509, 587, 588, 593, 606, 607, 768, 821], "epsilon": [53, 56, 57, 76, 79, 80, 509, 587, 588, 593, 606, 607, 609, 610, 652, 655, 668, 669, 670, 760, 765, 767, 768, 796, 805, 808, 821], "dc": [53, 76, 587, 588, 591, 593, 594, 595, 607], "dw": [53, 76, 587, 588, 591, 593, 594, 595, 607], "forget": [53, 76, 587, 588, 593, 607, 768, 783, 798], "dcdw": [53, 76, 587, 588, 591, 593, 594, 607], "adam_step_delta": [53, 76, 587, 607], "2020105": [53, 587, 607], "22187898": [53, 587, 607], "24144873": [53, 587, 607], "10000002": [53, 87, 290, 350, 587, 733], "00300002": [53, 587], "00800002": [53, 587], "adam_upd": [53, 76, 607, 821], "mw_tm1": [53, 76, 588, 593, 607], "vw_tm1": [53, 76, 588, 593, 607], "stop_gradi": [53, 76, 207, 509, 588, 591, 593, 594, 595, 603, 606, 607, 612, 687, 688, 689, 768, 821], "ws_new": [53, 76, 588, 593, 594, 595, 607], "updated_weight": [53, 76, 588, 607], "92558753": [53, 588], "92558873": [53, 588, 607], "92558718": [53, 588, 607], "00000063e": [53, 76, 588, 607], "00000016e": [53, 76, 588, 607], "00000086e": [53, 76, 588, 607], "gradient_descent_upd": [53, 76, 607, 612, 687, 688, 689], "descent": [53, 76, 591, 607, 768, 821, 838], "new_weight": [53, 76, 591, 593, 594, 607, 820], "lamb_upd": [53, 76, 607], "max_trust_ratio": [53, 76, 593, 607, 768], "decay_lambda": [53, 76, 593, 594, 607, 768], "trust": [53, 76, 593, 607, 768], "ratio": [53, 76, 593, 607, 768], "decai": [53, 76, 593, 594, 607, 768], "lamb": [53, 76, 593, 607, 768, 821], "784": [53, 593, 607], "lars_upd": [53, 76, 607], "lar": [53, 76, 594, 607, 768, 821], "34077978": [53, 594, 607], "78025991": [53, 594, 607], "56051969": [53, 594, 607], "78026009": [53, 594, 607], "56051981": [53, 594, 607], "12103939": [53, 594, 607], "optimizer_upd": [53, 76, 607], "effective_grad": [53, 76, 595, 607], "3e": [53, 76, 595, 607], "preserve_typ": [53, 76, 596, 607], "_arraywithimag": [54, 96], "_arraywithlay": [55, 96], "conv1d": [55, 78, 608, 764], "filter_format": [55, 78, 608, 621, 622, 624, 625, 626, 628], "channel_last": [55, 78, 608, 621, 622, 624, 625, 626, 628, 629, 748], "x_dilat": [55, 78, 608, 621, 622, 624, 625, 626, 628], "fw": [55, 78, 370, 496, 608, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 745, 789, 812], "d_out": [55, 78, 608, 621, 622, 623, 624, 625, 626, 627, 628, 629], "channel_first": [55, 78, 608, 621, 622, 624, 625, 626, 628, 629], "wio": [55, 608, 621, 622, 623, 628], "conv1d_transpos": [55, 78, 608], "output_shap": [55, 78, 608, 621, 623, 625, 627, 629, 764], "fh": [55, 78, 608, 613, 621, 624, 625, 626, 627, 628, 629, 630, 702], "hwio": [55, 608, 621, 622, 624, 628], "conv2d_transpos": [55, 78, 608], "conv3d": [55, 78, 608, 627, 764], "fd": [55, 78, 608, 621, 626, 627, 628, 629], "conv3d_transpos": [55, 78, 608], "depthwise_conv2d": [55, 78, 608], "randint": [55, 60, 62, 78, 83, 615, 617, 630, 633, 721, 798, 831], "noise_shap": [55, 78, 608, 631], "42857146": [55, 608, 631], "85714293": [55, 608, 631], "28571415": [55, 78, 608, 631], "71428585": [55, 78, 608, 631], "14285755": [55, 78, 608, 631], "5714283": [55, 608, 631], "4285717": [55, 78, 608, 631], "8571434": [55, 78, 608, 631], "2857151": [55, 608, 631], "dropout1d": [55, 78, 358], "droput1d": [55, 381, 382], "dropout2d": [55, 78, 358], "dropout3d": [55, 78, 358], "droput3d": [55, 383], "outer_batch_shap": [55, 78, 608, 632], "inner_batch_shap": [55, 78, 608, 632], "in_featur": [55, 78, 608, 632, 812], "out_featur": [55, 78, 608, 632, 812], "134": [55, 609, 632, 651], "lstm_updat": [55, 78, 608, 817], "init_h": [55, 78, 608, 633, 817], "init_c": [55, 78, 608, 633, 817], "recurrent_kernel": [55, 78, 608, 633, 817], "recurrent_bia": [55, 78, 608, 633, 817], "hidden": [55, 78, 608, 633, 764, 795, 802, 817, 821], "recurr": [55, 78, 608, 633, 817, 838, 842], "timestep": [55, 78, 608, 633, 634, 764, 817], "h_i": [55, 78, 633], "c_i": [55, 78, 633], "rc": [55, 78, 633], "multi_head_attent": [55, 78, 608, 808], "num_head": [55, 78, 608, 634, 764], "in_proj_weight": [55, 78, 608, 634], "q_proj_weight": [55, 78, 608, 634], "k_proj_weight": [55, 78, 608, 634], "v_proj_weight": [55, 78, 608, 634], "out_proj_weight": [55, 78, 608, 634], "in_proj_bia": [55, 78, 608, 634], "out_proj_bia": [55, 78, 608, 634], "is_caus": [55, 78, 608, 634, 637], "key_padding_mask": [55, 78, 608, 634], "bias_k": [55, 78, 608, 634], "bias_v": [55, 78, 608, 634], "static_k": [55, 78, 608, 634], "static_v": [55, 78, 608, 634], "add_zero_attn": [55, 78, 608, 634], "return_attention_weight": [55, 78, 608, 634], "average_attention_weight": [55, 78, 608, 634], "scaled_dot_product_attent": [55, 78, 608], "dropout_p": [55, 78, 608, 637], "num_queri": [55, 78, 608, 637], "feat_dim": [55, 78, 608, 637], "num_kei": [55, 78, 608, 637], "causal": [55, 78, 608, 634, 637], "attent": [55, 78, 608, 634, 637, 764, 790, 793, 828], "score": [55, 78, 360, 437, 608, 635, 637, 783], "29999995": [55, 290, 350, 608, 617, 637, 722], "19994521": [55, 608, 637], "09994531": [55, 608, 637], "30000019": [55, 361, 445, 608, 637], "_arraywithlinearalgebra": [56, 96], "choleski": [56, 79, 609, 808], "625": [56, 74, 333, 609, 638], "vif": [56, 79, 639], "det": [56, 79, 609, 657, 797], "axis1": [56, 58, 79, 81, 609, 611, 642, 663, 683], "axis2": [56, 79, 609, 642, 663], "eigh": [56, 79, 359, 410, 609, 643], "uplo": [56, 79, 609, 644, 645], "eigvalsh": [56, 79, 609], "array_lik": [56, 79, 358, 360, 361, 402, 431, 432, 436, 437, 466, 609, 646, 654], "3d": [56, 74, 358, 381, 382, 442, 609, 646, 764, 815], "105": [56, 78, 608, 609, 610, 631, 632, 646, 654, 668], "149": [56, 609, 646], "171": [56, 609, 646, 748], "143": [56, 73, 97, 284, 604, 609, 646, 800], "203": [56, 73, 223, 609, 614, 646, 709], "233": [56, 609, 646], "inv": [56, 79, 609], "transpose_a": [56, 79, 609, 649], "transpose_b": [56, 79, 609, 649], "adjoint_a": [56, 79, 609, 649], "adjoint_b": [56, 79, 609, 649], "matrix_norm": [56, 79, 609], "ord": [56, 79, 609, 650, 666], "fro": [56, 79, 360, 431, 609, 650], "nuc": [56, 79, 609, 650], "matrix_pow": [56, 79, 609], "matrix_rank": [56, 79, 609], "hermitian": [56, 79, 359, 410, 411, 609, 643, 644, 645, 652, 659], "largest_singular_valu": [56, 79, 609, 652, 655], "defici": [56, 609, 652], "matrix_transpos": [56, 79, 609, 819], "pinv": [56, 79, 609], "pseudo": [56, 79, 609, 655, 807], "99999988": [56, 79, 609, 655], "qr": [56, 79, 609, 810], "complet": [56, 68, 79, 609, 656, 749, 788, 789, 790, 792, 793, 796, 797, 800, 802, 805, 809, 810, 812, 815, 819, 820, 828, 836], "12309149": [56, 609, 656], "90453403": [56, 609, 656], "40824829": [56, 609, 656], "49236596": [56, 609, 656], "30151134": [56, 609, 656], "81649658": [56, 609, 656], "86164044": [56, 609, 656], "12403841e": [56, 609, 656], "60113630e": [56, 609, 656], "10782342e": [56, 609, 656], "04534034e": [56, 609, 656], "80906807e": [56, 609, 656], "88178420e": [56, 79, 609, 645, 656], "slogdet": [56, 79, 609], "logabsdet": [56, 79, 609, 657], "natur": [56, 79, 237, 255, 256, 257, 258, 277, 339, 355, 604, 609, 657, 793, 800, 802, 810, 828], "098611": [56, 609, 657], "solv": [56, 79, 359, 419, 609, 748, 783, 789, 792, 809, 818, 840], "full_matric": [56, 79, 609, 659], "svf": [56, 659], "reconstructed_x": [56, 609, 659], "svdval": [56, 79, 609], "tensorsolv": [56, 79, 609], "vander": [56, 79, 609], "vandermond": [56, 79, 609, 664], "vecdot": [56, 79, 609], "vector_norm": [56, 79, 609], "mathemat": [56, 79, 217, 222, 234, 239, 241, 257, 267, 599, 604, 609, 650, 666, 798, 809, 815, 838, 844], "manhattan": [56, 79, 609, 666], "euclidean": [56, 79, 91, 92, 609, 666], "7416575": [56, 79, 609, 666], "vector_to_skew_symmetric_matrix": [56, 79, 609], "_arraywithloss": [57, 96], "binary_cross_entropi": [57, 80, 610, 797], "from_logit": [57, 80, 610, 668, 765], "pos_weight": [57, 80, 610, 668], "amount": [57, 80, 209, 603, 610, 668, 669, 670, 789, 797, 799, 810], "crossentropi": [57, 80, 610, 668], "357": [57, 80, 610, 668, 670], "223": [57, 80, 610, 668, 670], "3862944": [57, 610, 669], "sparse_cross_entropi": [57, 80, 610], "_arraywithmanipul": [58, 96], "x_min": [58, 81, 611, 671, 822], "x_max": [58, 81, 611, 671, 822], "before_1": [58, 81, 361, 461, 611, 673, 686], "after_1": [58, 81, 361, 461, 611, 673, 686], "before_n": [58, 81, 361, 461, 611, 673, 686], "after_n": [58, 81, 361, 461, 611, 673, 686], "repetit": [58, 81, 611, 677, 684, 815], "fit": [58, 81, 611, 677, 788, 809, 817, 834, 835, 838], "flat": [58, 68, 81, 366, 487, 549, 606, 611, 677, 762], "allowzero": [58, 81, 611, 678], "remain": [58, 61, 74, 81, 84, 217, 234, 235, 241, 249, 250, 267, 270, 276, 278, 358, 381, 382, 383, 402, 604, 611, 613, 616, 678, 696, 719, 789, 790, 797, 800, 802, 805, 813, 815, 823], "roll": [58, 81, 611, 804], "shift": [58, 70, 81, 97, 130, 141, 226, 228, 315, 352, 601, 604, 611, 679, 789, 790, 799, 800, 804, 811], "restor": [58, 81, 611, 679, 803], "num_or_size_split": [58, 68, 81, 611, 680, 817], "with_remaind": [58, 68, 81, 611, 680], "squeezabl": [58, 611, 681], "swapax": [58, 81, 611], "axis0": [58, 81, 611, 683], "swap_ax": [58, 683], "swap": [58, 81, 611, 683, 773, 832], "tile": [58, 75, 81, 520, 611], "unpack": [58, 81, 611, 685, 810, 812], "zero_pad": [58, 81, 611], "_arraywithnorm": [59, 96], "layer_norm": [59, 82, 614], "normalized_idx": [59, 82, 614, 709], "new_std": [59, 82, 614, 709, 767], "learnabl": [59, 82, 612, 614, 689, 709, 764, 767, 822], "deviat": [59, 60, 64, 82, 83, 87, 614, 615, 619, 709, 712, 736, 750, 763, 767, 792, 829], "0976": [59, 614, 709], "3452": [59, 614, 709], "2740": [59, 614, 709], "1047": [59, 614, 709], "5886": [59, 614, 709], "2732": [59, 614, 709], "7696": [59, 614, 709, 748], "7024": [59, 614, 709], "2518": [59, 614, 709], "826": [59, 614, 709], "178": [59, 614, 709], "981": [59, 614, 709], "831": [59, 614, 709], "421": [59, 614, 709], "_arraywithrandom": [60, 96], "multinomi": [60, 83, 365, 484, 615], "population_s": [60, 83, 615, 710], "num_sampl": [60, 83, 615, 710], "unnorm": [60, 83, 615, 710, 812], "popul": [60, 64, 68, 83, 87, 615, 619, 710, 736, 738, 798, 799, 808, 812, 817, 844], "draw": [60, 83, 365, 482, 484, 486, 615, 710, 712, 713, 748, 749, 750, 751, 756, 763, 788, 792, 810, 812], "half": [60, 83, 120, 281, 601, 604, 615, 711, 713, 786, 815], "235": [60, 712], "float16": [60, 71, 83, 128, 151, 153, 154, 159, 161, 331, 355, 601, 602, 609, 666, 712, 713, 748, 749, 786, 798, 809, 812], "807": [60, 712], "_arraywithsearch": [61, 96], "select_last_index": [61, 84, 616, 716, 717], "occurr": [61, 361, 370, 473, 494, 616, 617, 716, 717, 721], "argmin": [61, 84, 616], "output_dtyp": [61, 84, 616, 717], "argwher": [61, 84, 616], "nonzero": [61, 84, 92, 215, 216, 217, 220, 223, 232, 234, 237, 239, 241, 267, 280, 285, 604, 616], "as_tupl": [61, 84, 616, 719], "fewer": [61, 84, 616, 719], "condit": [61, 74, 84, 117, 312, 313, 352, 359, 407, 600, 613, 616, 700, 701, 720, 750, 792, 798, 800, 802, 805, 806, 808, 812, 831], "_arraywithset": [62, 96], "unique_al": [62, 85, 617], "by_valu": [62, 85, 617, 721], "inverse_indic": [62, 85, 361, 473, 617, 721, 723], "unique_count": [62, 85, 617], "unique_invers": [62, 85, 617], "unique_valu": [62, 85, 617], "admonit": [62, 724], "dask": [62, 617, 721, 722, 723, 724, 828], "difficult": [62, 617, 721, 722, 723, 724, 790, 792, 798, 812, 823], "omit": [62, 277, 604, 617, 721, 722, 723, 724, 804, 808, 809], "x_i": [62, 64, 73, 92, 214, 215, 216, 219, 220, 221, 223, 225, 230, 231, 232, 237, 239, 240, 247, 248, 249, 250, 251, 255, 256, 257, 258, 262, 269, 274, 277, 278, 279, 280, 281, 282, 284, 285, 287, 321, 322, 324, 344, 355, 604, 617, 619, 721, 722, 723, 724, 732, 733, 734, 736, 737, 738, 763, 801], "x_j": [62, 617, 721, 722, 723, 724], "impli": [62, 617, 721, 722, 723, 724, 812], "typeerror": [62, 85, 617, 724, 819], "_arraywithsort": [63, 96], "stabil": [63, 86, 564, 565, 606, 618, 725, 728, 798, 807, 813, 815], "maintain": [63, 86, 618, 725, 728, 789, 790, 792, 803, 808, 810, 811, 812, 827, 837], "msort": [63, 86, 618], "searchsort": [63, 86, 618, 749], "side": [63, 86, 335, 355, 359, 425, 618, 727, 748, 764, 777, 789, 790, 795], "sorter": [63, 86, 618, 727], "ret_dtyp": [63, 86, 618, 727], "_arraywithstatist": [64, 96], "cumprod": [64, 87, 619, 809, 822], "cumsum": [64, 87, 619, 798], "einsum": [64, 87, 619], "equat": [64, 74, 87, 302, 352, 359, 425, 609, 619, 658, 731, 748, 777, 797, 838], "operand": [64, 74, 78, 214, 215, 216, 217, 219, 220, 221, 222, 223, 230, 231, 232, 234, 235, 237, 239, 240, 241, 248, 249, 250, 255, 256, 257, 258, 259, 267, 270, 272, 276, 277, 278, 279, 280, 281, 284, 285, 287, 321, 322, 344, 348, 355, 356, 358, 400, 604, 609, 619, 657, 663, 731, 732, 734, 735, 737, 777, 793, 796, 801, 809], "contract": [64, 609, 619, 661, 731], "seq": [64, 619, 731, 748], "ii": [64, 87, 619, 731, 790], "jk": [64, 619, 731], "ik": [64, 619, 731], "126": [64, 104, 273, 598, 604, 609, 619, 651, 731], "510": [64, 619, 731], "special": [64, 79, 91, 92, 96, 97, 214, 215, 216, 217, 219, 220, 221, 222, 223, 230, 231, 232, 234, 235, 237, 239, 240, 241, 248, 249, 250, 255, 256, 257, 258, 259, 262, 267, 270, 272, 276, 277, 278, 279, 280, 281, 284, 285, 287, 321, 322, 344, 355, 604, 609, 619, 657, 663, 732, 733, 734, 735, 736, 737, 738, 748, 749, 750, 751, 756, 763, 788, 792, 793, 795, 797, 800, 801, 802, 804, 808, 810, 811, 812, 813, 815, 838, 839, 840], "arithmet": [64, 87, 228, 234, 267, 604, 619, 733, 809], "propag": [64, 228, 321, 322, 355, 604, 619, 732, 733, 734, 736, 737, 738, 807], "04999995": [64, 733], "freedom": [64, 87, 619, 736, 738, 794], "constitut": [64, 87, 619, 736, 738, 805, 817, 839], "commonli": [64, 87, 619, 736, 738, 802, 805, 807], "81649661": [64, 619, 736], "6666665": [64, 738, 820], "667": [64, 75, 234, 514, 564, 604, 606, 738], "_arraywithutil": [65, 96], "logic": [65, 88, 198, 234, 235, 261, 262, 263, 267, 270, 603, 604, 620, 739, 740, 788, 793, 797, 798, 799, 802, 805, 806, 807, 808, 809, 811, 812, 815, 819, 832], "AND": [65, 88, 224, 235, 261, 604, 620, 739], "invalid": [65, 88, 609, 611, 620, 665, 674, 739, 740, 748, 789, 798], "OR": [65, 88, 227, 263, 270, 604, 620, 740, 789, 790, 807], "_wrap_funct": [66, 89, 795, 805, 806], "function_nam": [66, 89, 788, 813], "new_funct": [66, 89, 795], "add_ivy_array_instance_method": 66, "cl": [66, 89], "moduletyp": [66, 89, 831, 832, 833], "toi": [66, 89], "arrayexampl": 66, "hasattr": [66, 89], "_containerwithactiv": [67, 97], "dict_in": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 97], "queue": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 97, 559, 581, 606, 814, 820], "queue_load_s": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 97], "container_combine_method": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 97], "list_join": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 97], "queue_timeout": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 97, 559, 581, 606, 814], "print_limit": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 97], "key_length_limit": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 97], "print_ind": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 97], "print_line_spac": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 97], "ivyh": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 97], "default_key_color": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 97], "keyword_color_dict": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 97], "rebuild_child_contain": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 97], "types_to_iteratively_nest": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 97], "alphabetical_kei": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 97], "dynamic_backend": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 96, 97, 766, 794, 814], "build_cal": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 97], "containerbas": [67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 796], "_static_gelu": 67, "key_chain": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 104, 105, 106, 107, 108, 109, 110, 111, 112, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 137, 139, 140, 141, 143, 146, 147, 148, 149, 157, 159, 162, 165, 166, 167, 169, 171, 174, 208, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 301, 302, 305, 306, 315, 316, 319, 320, 321, 322, 323, 324, 326, 328, 335, 336, 342, 344, 345, 346, 347, 348, 372, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 393, 394, 395, 396, 400, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440, 441, 442, 445, 446, 448, 457, 459, 461, 462, 463, 465, 466, 467, 468, 469, 470, 473, 475, 476, 477, 478, 479, 480, 481, 483, 488, 489, 496, 497, 498, 499, 505, 507, 510, 511, 513, 514, 518, 519, 520, 521, 522, 525, 526, 529, 531, 533, 534, 535, 537, 538, 541, 549, 550, 564, 565, 567, 569, 571, 572, 585, 591, 596, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 710, 711, 712, 713, 715, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740], "to_appli": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 104, 105, 106, 107, 108, 109, 110, 111, 112, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 137, 139, 140, 141, 143, 146, 147, 148, 149, 157, 159, 162, 165, 166, 167, 169, 171, 174, 208, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 301, 302, 305, 306, 315, 316, 319, 320, 321, 322, 323, 324, 326, 328, 335, 336, 342, 344, 345, 346, 347, 348, 372, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 393, 394, 395, 396, 400, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440, 441, 442, 445, 446, 448, 457, 459, 461, 462, 463, 465, 466, 467, 468, 469, 470, 473, 475, 476, 477, 478, 479, 480, 481, 483, 488, 489, 496, 497, 498, 499, 505, 507, 510, 511, 513, 514, 518, 519, 520, 521, 522, 525, 526, 529, 531, 533, 534, 535, 537, 538, 541, 549, 550, 564, 565, 567, 569, 571, 572, 585, 591, 596, 613, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 703, 710, 711, 712, 713, 715, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740], "prune_unappli": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 104, 105, 106, 107, 108, 109, 110, 111, 112, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 137, 139, 140, 141, 143, 146, 147, 148, 149, 157, 159, 162, 165, 166, 167, 169, 171, 174, 208, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 301, 302, 305, 306, 315, 316, 319, 320, 321, 322, 323, 324, 326, 328, 335, 336, 342, 344, 345, 346, 347, 348, 372, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 393, 394, 395, 396, 400, 401, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 419, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440, 441, 442, 445, 446, 448, 457, 459, 461, 462, 463, 465, 466, 467, 468, 469, 470, 473, 475, 476, 477, 478, 479, 480, 481, 483, 488, 489, 496, 497, 498, 499, 505, 507, 510, 511, 513, 514, 518, 519, 520, 521, 522, 525, 526, 529, 531, 533, 534, 535, 537, 538, 541, 549, 550, 564, 565, 567, 569, 571, 572, 585, 591, 596, 613, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 703, 710, 711, 712, 713, 715, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740], "map_sequ": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 104, 105, 106, 107, 108, 109, 110, 111, 112, 122, 123, 125, 127, 128, 130, 131, 132, 133, 134, 135, 137, 139, 140, 141, 143, 146, 147, 148, 149, 157, 159, 162, 165, 166, 167, 169, 171, 174, 208, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 301, 302, 305, 306, 315, 316, 319, 320, 321, 322, 323, 324, 326, 328, 335, 336, 342, 344, 345, 346, 347, 348, 372, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 393, 394, 395, 396, 400, 401, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 419, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440, 441, 442, 445, 446, 448, 457, 459, 461, 462, 463, 465, 466, 467, 468, 469, 470, 473, 475, 476, 477, 478, 479, 480, 481, 483, 488, 489, 496, 497, 498, 499, 505, 507, 510, 511, 513, 514, 518, 519, 520, 521, 522, 525, 526, 529, 531, 533, 534, 535, 537, 538, 541, 549, 550, 564, 565, 567, 569, 571, 572, 585, 591, 596, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 710, 711, 712, 713, 715, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740], "prune": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 104, 105, 106, 107, 108, 109, 110, 111, 112, 128, 130, 135, 137, 143, 147, 149, 162, 166, 167, 174, 208, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 295, 296, 297, 298, 299, 301, 320, 321, 322, 323, 324, 326, 328, 335, 336, 342, 344, 346, 347, 348, 381, 382, 383, 401, 431, 432, 433, 434, 435, 436, 437, 440, 441, 442, 445, 446, 467, 469, 470, 476, 478, 479, 480, 481, 483, 496, 497, 498, 499, 507, 510, 511, 513, 514, 518, 519, 520, 521, 522, 525, 526, 529, 531, 533, 534, 535, 537, 538, 541, 549, 550, 564, 565, 567, 569, 571, 572, 585, 591, 596, 613, 622, 623, 624, 625, 631, 632, 637, 638, 639, 644, 645, 646, 647, 649, 650, 652, 654, 656, 657, 663, 668, 669, 670, 671, 675, 678, 679, 680, 681, 682, 685, 686, 703, 704, 705, 706, 710, 711, 712, 713, 715, 718, 721, 722, 723, 724, 725, 729, 730, 733, 735, 736, 738, 739, 740, 746, 749, 797], "static_gelu": 67, "046": 67, "_static_hardswish": 67, "_static_leaky_relu": 67, "static_leaky_relu": 67, "38999999": [67, 74, 106, 289, 290, 350], "_static_log_softmax": 67, "static_log_softmax": 67, "371": [67, 107], "_static_mish": 67, "static_mish": 67, "30883577": [67, 108, 598], "28903052": [67, 108, 598], "10714479": [67, 108, 598], "_static_relu": 67, "static_relu": 67, "_static_sigmoid": 67, "static_sigmoid": 67, "2689414": [67, 110, 111, 598], "7310586": [67, 110, 111, 598], "88079703": [67, 110, 598], "62245935": [67, 110], "4750208": [67, 110], "_static_softmax": 67, "static_softmax": 67, "72844321": [67, 111], "19852395": [67, 111], "07303288": [67, 111], "_static_softplu": 67, "revert": [67, 112, 598], "static_softplu": 67, "53499615": 67, "42036411": 67, "948": [67, 112, 613, 690], "166": [67, 104, 598], "159": [67, 104, 598, 608, 632], "slice": [68, 75, 92, 141, 315, 352, 361, 444, 466, 469, 525, 526, 528, 554, 601, 606, 613, 699, 838], "dictionari": [68, 85, 97, 206, 573, 589, 603, 606, 607, 724, 743, 745, 793, 797, 798, 805, 809, 810, 820, 823], "asynchron": [68, 97, 838], "wait": [68, 97, 559, 606, 783, 788, 790, 797, 809], "arriv": [68, 97, 559, 606, 815], "cont_list_join": [68, 97], "limit": [68, 97, 159, 162, 513, 514, 530, 602, 606, 611, 671, 748, 750, 751, 763, 770, 783, 789, 790, 795, 797, 800, 802, 809, 812, 815, 820, 823, 837, 838, 839], "whitespac": [68, 97], "indent": [68, 97, 820], "newlin": [68, 97, 801], "termin": [68, 97, 789, 790, 796, 803, 817, 820], "rebuild": [68, 97], "constructor": [68, 97, 509, 606, 745, 761, 769, 798, 799, 801, 819], "kept": [68, 97, 612, 687, 688, 790, 808, 813], "encount": [68, 97, 764, 786, 788, 798, 802, 812], "node": [68, 75, 97, 511, 521, 567, 613, 700, 701, 763, 772, 795, 796, 809, 828, 831, 832, 839], "instruct": [68, 97, 783, 788, 789, 792, 802, 803, 810, 812, 824, 836, 839, 842, 844], "alphabet": [68, 97], "__setitem__": [68, 793, 796, 819], "_cont_at_key_chains_input_as_dict": 68, "current_chain": 68, "ignore_key_error": 68, "_cont_at_key_chains_input_as_seq": 68, "_cont_call_static_method_with_flexible_arg": 68, "static_method": 68, "kw": 68, "self_idx": 68, "_cont_concat_unifi": 68, "_cont_get_dev": 68, "_cont_get_dtyp": 68, "_cont_get_shap": 68, "properti": [68, 91, 92, 93, 94, 95, 96, 100, 766, 768, 792, 796, 805, 810, 812, 819, 820, 821, 844], "_cont_ivi": 68, "_cont_mean_unifi": 68, "_1": 68, "_cont_prune_key_chains_input_as_dict": 68, "return_cont": 68, "_cont_prune_key_chains_input_as_seq": 68, "_cont_slice_kei": 68, "key_slic": 68, "_cont_sum_unifi": 68, "_get_queue_item": 68, "cont_all_fals": 68, "assert_is_bool": 68, "cont_all_key_chain": 68, "include_empti": 68, "cont_all_tru": [68, 796, 820], "cont_as_bool": 68, "cont_assert_contains_sub_contain": 68, "sub_cont": 68, "screen": [68, 788, 789, 820], "cont_assert_contains_sub_structur": 68, "check_shap": [68, 770], "cont_assert_ident": 68, "check_typ": 68, "same_arrai": [68, 820], "arrays_equ": 68, "cont_assert_identical_structur": 68, "assert_and_assign": 68, "congruent": 68, "cont_at_key_chain": 68, "ignore_non": 68, "cont_at_kei": 68, "substr": 68, "cont_combin": 68, "duplic": [68, 361, 466, 530, 606, 613, 692, 794, 801, 806, 807, 810, 821, 844], "configur": [68, 206, 603, 613, 703, 789, 790, 795, 797, 798, 803], "container_rightmost": 68, "cont_common_key_chain": 68, "cont_config": 68, "cont_contains_sub_contain": 68, "cont_contains_sub_structur": 68, "cont_copi": [68, 820], "cont_create_if_abs": 68, "noth": [68, 815, 844], "cont_cutoff_at_depth": 68, "depth_cutoff": 68, "summari": [68, 163, 515, 602, 606, 789, 790, 812], "cont_cutoff_at_height": 68, "height_cutoff": 68, "cont_deep_copi": [68, 820, 831], "cont_dev": 68, "belong": [68, 788, 792, 821], "cont_dev_str": 68, "cont_diff": [68, 820], "diff_kei": 68, "detect_key_diff": 68, "detect_value_diff": 68, "detect_shape_diff": 68, "among": [68, 796, 797, 812, 815, 829, 838], "flag": [68, 190, 360, 370, 432, 496, 603, 608, 634, 745, 756, 767, 790, 798, 799, 808, 809, 810, 812, 831, 832], "container0": 68, "cont_dtyp": 68, "cont_duplicate_array_keychain": 68, "cont_find_sub_contain": 68, "sub_cont_to_find": 68, "cont_find_sub_structur": 68, "sub_struc_to_find": 68, "cont_flatten_key_chain": [68, 820], "above_height": [68, 820], "below_depth": [68, 820], "cont_format_key_chain": 68, "format_fn": 68, "cont_from_disk_as_hdf5": [68, 820], "h5_obj_or_filepath": 68, "slice_obj": 68, "disk": [68, 766, 820, 837], "h5py": 68, "filepath": [68, 620, 741, 742, 790, 792], "cont_from_disk_as_json": [68, 820], "json_filepath": 68, "cont_from_disk_as_pickl": [68, 820], "pickle_filepath": 68, "cont_from_flat_list": 68, "flat_list": 68, "hierarchi": [68, 788, 811, 820, 834, 844], "cont_handle_inplac": 68, "prime": [68, 798], "overwritten": [68, 793, 794], "cont_has_kei": 68, "query_kei": 68, "somewher": [68, 797], "cont_has_key_chain": 68, "cont_ident": [68, 820], "cont_identical_array_shap": 68, "cont_identical_config": 68, "cont_identical_structur": 68, "cont_if_exist": 68, "cont_inplace_upd": 68, "cont_ivi": 68, "cont_key_chains_contain": 68, "sub_str": 68, "cont_list_stack": [68, 820], "cont_load": 68, "cont_map": [68, 796, 820], "func": [68, 91, 207, 349, 357, 512, 586, 589, 590, 592, 597, 603, 606, 607, 613, 703, 745, 788, 792, 793, 800, 802, 807], "cont_map_sub_cont": 68, "include_self": 68, "possibli": [68, 569, 606, 748, 812, 823], "cont_max_depth": 68, "cont_multi_map": 68, "map_nest": 68, "assert_ident": 68, "leftmost": [68, 613, 703], "cont_multi_map_in_funct": 68, "cont_num_arrai": 68, "cont_overwrite_at_key_chain": 68, "target_dict": 68, "return_dict": 68, "cont_prune_empti": 68, "keep_non": 68, "cont_prune_key_chain": 68, "key1": [68, 783, 821], "key2": [68, 783], "key3": 68, "cont_prune_key_from_key_chain": 68, "certain": [68, 120, 131, 132, 360, 432, 601, 789, 790, 792, 798, 805, 811, 812, 815, 823, 824, 831, 832, 833, 842], "cont_prune_kei": 68, "cont_prune_keys_from_key_chain": 68, "cont_reduc": 68, "cont_remove_key_length_limit": 68, "cont_remove_print_limit": 68, "cont_reshape_lik": 68, "leading_shap": 68, "cont_restructur": 68, "keep_orig": 68, "old": [68, 789, 794, 808], "cont_restructure_key_chain": 68, "keychain_map": 68, "cont_sav": 68, "cont_set_at_key_chain": 68, "cont_set_at_kei": 68, "cont_shap": [68, 608, 626], "cont_show": 68, "cont_show_sub_contain": 68, "sub_cont_or_keychain": 68, "cont_size_ordered_arrai": 68, "keychain": [68, 74, 323, 440, 441, 442, 469], "cont_slice_kei": 68, "all_depth": 68, "cont_slice_via_kei": 68, "slice_kei": 68, "cont_sort_by_kei": 68, "cont_structural_diff": 68, "cont_to_dict": 68, "cont_to_disk_as_hdf5": [68, 820], "starting_index": 68, "max_batch_s": 68, "cont_to_disk_as_json": [68, 820], "cont_to_disk_as_pickl": [68, 820], "cont_to_flat_list": 68, "cont_to_iter": [68, 796], "leaf_keys_onli": 68, "cont_to_iterator_kei": 68, "cont_to_iterator_valu": 68, "cont_to_json": 68, "cont_to_nested_list": 68, "cont_to_raw": 68, "cont_trim_kei": 68, "cont_try_kc": 68, "cont_unifi": 68, "concatten": [68, 207, 603], "cont_unstack_cont": 68, "dim_siz": 68, "cont_update_config": 68, "cont_with_default_key_color": 68, "cont_with_entries_as_list": 68, "cont_with_ivy_backend": 68, "ivy_backend": [68, 810], "cont_with_key_length_limit": [68, 820], "cont_with_print_ind": [68, 820], "cont_with_print_limit": [68, 820], "cont_with_print_line_spac": 68, "h5_file_s": 68, "shuffle_h5_fil": 68, "split_cont": 68, "_is_json": 68, "_repr": 68, "_containerwithconvers": [69, 97], "_static_to_ivi": 69, "_static_to_n": 69, "_containerwithcr": [70, 97], "_static_arang": 70, "_static_asarrai": 70, "_static_copy_arrai": 70, "_static_empti": 70, "_static_empty_lik": 70, "_static_ey": 70, "n_row": [70, 74, 126, 141, 315, 352, 359, 418, 601], "n_col": [70, 74, 126, 141, 315, 352, 601], "_static_from_dlpack": 70, "_static_ful": 70, "_static_full_lik": 70, "static_full_lik": 70, "2324": [70, 130, 601], "234": [70, 73, 130, 153, 236, 287, 601, 602, 604, 608, 632, 748], "123": [70, 71, 130, 162, 521, 601, 606, 812], "_static_linspac": 70, "_static_logspac": 70, "static_logspac": 70, "15443469": [70, 132], "64158883": [70, 132], "_static_meshgrid": 70, "_static_native_arrai": 70, "_static_one_hot": 70, "static_one_hot": 70, "_static_on": 70, "_static_ones_lik": 70, "_static_tril": 70, "_static_triu": 70, "_static_zero": 70, "_static_zeros_lik": 70, "frombuff": [70, 601], "expos": [70, 128, 515, 601, 606, 783, 797, 817, 821, 827], "x00": [70, 128, 601], "xf0": [70, 128, 601], "x01": [70, 128, 601], "x02": [70, 128, 601], "x03": [70, 128, 601], "x04": [70, 128, 601], "x05": [70, 128], "5443469": [70, 132, 601], "static_frombuff": 70, "static_triu_indic": 70, "triu_indic": [70, 601], "_containerwithdatatyp": [71, 97], "_static_astyp": 71, "718": [71, 73, 146, 263, 602], "618": [71, 73, 146, 263, 602], "static_astyp": 71, "_static_broadcast_arrai": 71, "static_broadcast_arrai": 71, "_static_broadcast_to": 71, "static_broadcast_to": 71, "_static_can_cast": 71, "from_": [71, 149, 602], "static_can_cast": 71, "_static_default_complex_dtyp": 71, "complex_dtyp": [71, 152, 175, 602], "_static_default_float_dtyp": 71, "float_dtyp": [71, 154, 177, 602], "_static_dtyp": 71, "_static_finfo": 71, "inquir": [71, 159, 162], "static_finfo": 71, "55040e": [71, 159, 602], "7976931348623157e": [71, 159, 602], "308": [71, 159, 602, 748, 812], "_static_function_supported_dtyp": 71, "_static_function_unsupported_dtyp": 71, "_static_iinfo": 71, "1800": [71, 162, 602], "1084": 71, "40000": 71, "static_iinfo": 71, "2147483648": [71, 162, 602], "2147483647": [71, 162, 602], "_static_is_bool_dtyp": 71, "dtype_in": [71, 144, 145, 158, 164, 165, 166, 167, 168, 169, 170, 171, 186, 602], "_static_is_complex_dtyp": 71, "is_complex_dtyp": [71, 602, 813], "roughli": [71, 789, 792, 841], "static_is_complex_dtyp": 71, "_static_is_float_dtyp": 71, "static_is_float_dtyp": 71, "_static_is_int_dtyp": 71, "_static_is_uint_dtyp": 71, "_static_result_typ": 71, "static_result_typ": 71, "broadcats": [71, 147], "_containerwithdevic": [72, 97], "_static_dev": 72, "static_dev": 72, "_static_to_devic": 72, "static_to_devic": 72, "contaion": [72, 191], "_containerwithelementwis": [73, 97], "_static_ab": 73, "static_ab": 73, "_static_aco": 73, "static_aco": 73, "_static_acosh": 73, "static_acosh": 73, "_static_add": 73, "static_add": [73, 101], "_static_asin": 73, "static_asin": 73, "524": [73, 219, 604], "412": [73, 78, 219, 604, 613, 690], "201": [73, 74, 219, 379, 604], "_static_asinh": 73, "static_asinh": 73, "_static_atan": 73, "static_atan": 73, "_static_atan2": 73, "static_atan2": 73, "915": [73, 222, 604], "983": [73, 222, 604], "978": [73, 222, 604], "696": [73, 83, 222, 604, 712], "993": [73, 222, 604], "_static_atanh": 73, "static_atanh": 73, "_static_bitwise_and": 73, "static_bitwise_and": 73, "_static_bitwise_invert": 73, "static_bitwise_invert": 73, "_static_bitwise_left_shift": 73, "_static_bitwise_or": 73, "static_bitwise_or": 73, "_static_bitwise_right_shift": 73, "static_bitwise_right_shift": 73, "_static_bitwise_xor": 73, "static_bitwise_xor": 73, "_static_ceil": 73, "static_ceil": 73, "_static_co": 73, "static_co": 73, "_static_cosh": 73, "static_cosh": 73, "_static_deg2rad": 73, "static_deg2rad": 73, "0262": [73, 233, 273, 604], "873": [73, 233, 273, 604], "_static_divid": 73, "static_divid": 73, "_static_equ": 73, "static_equ": 73, "_static_erf": 73, "static_erf": 73, "27632612": [73, 236], "934008": [73, 236, 604], "99999928": [73, 236], "91903949": [73, 236], "_static_exp": 73, "static_exp": 73, "59814835": [73, 237, 604], "4131622": [73, 237], "_static_expm1": 73, "thefunct": [73, 236], "areal": 73, "static_expm1": 73, "71828175": [73, 237, 604], "38905621": [73, 237, 604], "59815216": 73, "_static_floor": 73, "static_floor": 73, "_static_floor_divid": 73, "static_floor_divid": 73, "_static_great": 73, "static_great": 73, "_static_greater_equ": 73, "static_greater_equ": 73, "_static_isfinit": 73, "999999999999": [73, 248, 604], "static_isfinit": 73, "_static_isinf": 73, "static_isinf": 73, "_static_isnan": 73, "static_isnan": 73, "_static_isr": 73, "0j": [73, 74, 136, 137, 215, 216, 217, 220, 223, 232, 237, 239, 251, 255, 257, 274, 278, 280, 281, 285, 324, 355, 601, 604, 609, 657], "23j": [73, 74], "9j": [73, 74], "static_isr": 73, "_static_lcm": 73, "1080": [73, 252], "1550": [73, 252], "130": [73, 252, 361, 466], "_static_less": 73, "static_less": 73, "_static_less_equ": 73, "static_less_equ": 73, "_static_log": 73, "static_log": 73, "_static_log10": 73, "static_log10": 73, "898": [73, 256, 604], "0414": [73, 256, 604], "_static_log1p": 73, "static_log1p": 73, "_static_log2": 73, "static_log2": 73, "_static_logaddexp": 73, "static_logaddexp": 73, "_static_logical_and": 73, "static_logical_and": 73, "_static_logical_not": 73, "static_logical_not": 73, "_static_logical_or": 73, "static_logical_or": 73, "_static_logical_xor": 73, "static_logical_xor": 73, "_static_maximum": 73, "static_maximum": 73, "_static_minimum": 73, "static_minimum": 73, "_static_multipli": 73, "static_multipli": 73, "_static_neg": 73, "static_neg": 73, "_static_not_equ": 73, "static_not_equ": 73, "_static_posit": 73, "static_posit": 73, "_static_pow": 73, "static_pow": 73, "_static_rad2deg": 73, "static_rad2deg": 73, "5160": 73, "10300": [73, 273, 604], "15500": 73, "20600": 73, "2860": [73, 273], "_static_reciproc": 73, "recirpoc": [73, 275], "static_reciproc": 73, "_static_remaind": 73, "static_remaind": 73, "_static_round": 73, "thevfunct": 73, "300": [73, 75, 78, 277, 358, 381, 382, 526, 550, 604, 606, 609, 647, 812], "527": [73, 277, 604], "static_round": 73, "301": [73, 277, 604], "_static_sign": 73, "static_sign": 73, "_static_sin": 73, "static_sin": 73, "757": [73, 279, 604], "959": [73, 239, 279, 604], "279": [73, 279, 358, 379, 389, 513, 604, 606], "_static_sinh": 73, "static_sinh": 73, "835": [73, 280], "347": [73, 280], "721": [73, 280], "_static_sqrt": 73, "static_sqrt": 73, "_static_squar": 73, "static_squar": 73, "_static_subtract": 73, "static_subtract": 73, "_static_tan": 73, "static_tan": 73, "_static_tanh": 73, "static_tanh": 73, "995": [73, 285, 604], "9999": 73, "_static_trapz": 73, "static_trapz": 73, "_static_trunc": 73, "static_trunc": 73, "_static_trunc_divid": 73, "75j": [73, 218, 247], "01317055": [73, 218], "05634501": [73, 218], "115": [73, 218, 273, 604], "3461759": [73, 218], "524111": [73, 218], "644": [73, 219, 604, 821], "305": [73, 78, 219, 604], "351": [73, 233, 273], "00613": [73, 233], "0154": [73, 233], "403": [73, 237], "428772": [73, 237], "649": [73, 239], "220": [73, 239], "865": [73, 239], "metho": [73, 246, 258], "7j": [73, 74, 251, 274, 324, 355, 604], "956": [73, 257], "08746284": [73, 260], "32192809": [73, 260], "nuner": [73, 267], "413": [73, 273], "335": [73, 74, 274, 324], "345j": [73, 74, 274, 324], "static_angl": 73, "static_exp2": 73, "static_fmin": 73, "static_gcd": 73, "static_imag": 73, "static_logaddexp2": 73, "static_nan_to_num": 73, "static_r": 73, "_containerwithactivationexperiment": [74, 97], "_static_celu": 74, "formlat": 74, "static_celu": 74, "_static_elu": 74, "static_elu": 74, "_static_hardtanh": 74, "static_hardtanh": [74, 291], "_static_silu": 74, "static_silu": 74, "27777028": [74, 297], "23947507": [74, 297], "0900332": [74, 297], "_static_tanhshrink": 74, "static_tanhshrink": 74, "36634541": [74, 298], "02005103": [74, 298], "00262468": [74, 298], "19722462": [74, 292], "84729779": [74, 292], "31326163": [74, 293], "46328258": [74, 293], "51301527": [74, 293], "79813886": [74, 293], "22856998": [74, 296], "42028043": [74, 296], "31868932": [74, 296], "static_logit": 74, "static_logsigmoid": 74, "34115386": 74, "64439666": 74, "24115384": 74, "55435526": 74, "07888974": 74, "00741899": 74, "26328245": 74, "00012302": 74, "static_prelu": 74, "static_relu6": 74, "static_selu": 74, "static_thresholded_relu": 74, "_containerwithconversionexperiment": [74, 97], "_containerwithcreationexperiment": [74, 97], "_static_trilu": 74, "blackman": [74, 300, 352], "00770143e": [74, 300], "49229857e": [74, 300], "hamming_window": [74, 352], "coeffici": [74, 302, 352, 359, 425, 609, 658, 768], "ham": [74, 302, 352], "4180": [74, 302], "8180": [74, 302], "hann_window": [74, 352], "hann": [74, 303, 352], "7500": [74, 303], "3455": [74, 303], "9045": [74, 303], "kaiser_bessel_derived_window": [74, 352], "suitabl": [74, 305, 306, 352, 618, 727, 750, 789, 790, 796, 813, 838], "spectral": [74, 305, 306, 352], "analysi": [74, 305, 306, 352, 838, 839], "kaiser": [74, 300, 305, 306, 352], "70710677": [74, 305, 480, 481], "18493208": [74, 305, 352], "9827513": [74, 305, 352], "kaiser_window": [74, 352], "static_kaiser_window": [74, 306], "2049": [74, 306], "8712": [74, 306], "0367": [74, 306, 352], "7753": [74, 306], "static_blackman_window": 74, "static_eye_lik": 74, "static_hamming_window": 74, "static_hann_window": 74, "static_hann": 74, "static_kaiser_bessel_derived_window": 74, "static_mel_weight_matrix": 74, "static_tril_indic": 74, "static_unsorted_segment_min": 74, "static_unsorted_segment_sum": 74, "static_vorbis_window": 74, "vorbis_window": [74, 352], "vorbi": [74, 319, 352], "38268343": [74, 319, 609, 644], "92387953": [74, 319], "14943586": [74, 319, 352], "51644717": [74, 319], "85631905": [74, 319], "98877142": [74, 319], "tril_indic": [74, 352], "_containerwithdata_typeexperiment": [74, 97], "_containerwithdeviceexperiment": [74, 97], "_containerwithelementwiseexperiment": [74, 97], "0003": [74, 320, 609, 647, 748, 751], "0006": [74, 320, 347], "2345j": [74, 324], "5772": [74, 328], "9635": [74, 328], "4228": [74, 328], "9228": [74, 328], "57299206e": [74, 329], "67773480e": [74, 329], "20904985e": [74, 329], "84270084": [74, 329, 355], "99532223": [74, 329], "99997795": [74, 329], "mantissa": [74, 333, 355, 798], "frist": [74, 334, 355], "coord": [74, 334], "6055": [74, 335], "160": [74, 337, 361, 466], "10240": [74, 337], "60000038": [74, 338, 355, 609, 665], "0707": [74, 344, 355], "0579": [74, 344, 355], "static_allclos": 74, "static_amax": 74, "static_amin": 74, "static_binar": 74, "static_conj": 74, "static_copysign": 74, "static_count_nonzero": 74, "static_diff": 74, "static_digamma": 74, "57721537": 74, "96351004": 74, "static_erfc": 74, "15729921": 74, "00467773": [74, 329, 355], "static_fix": 74, "static_float_pow": 74, "static_fmax": 74, "static_fmod": 74, "static_frexp": 74, "static_gradi": 74, "static_hypot": 74, "static_isclos": 74, "static_ldexp": 74, "static_lerp": 74, "90000057": [74, 338, 355], "70000076": [74, 338, 355], "55000019": [74, 338, 355], "05000019": [74, 338, 355], "static_modf": 74, "static_nansum": 74, "static_nextaft": 74, "static_signbit": 74, "static_sinc": 74, "636": 74, "090": 74, "070": 74, "057": 74, "static_sparsify_tensor": 74, "static_xlogi": 74, "static_zeta": 74, "0244": [74, 347], "_containerwithgeneralexperiment": [74, 97], "_static_reduc": 74, "static_reduc": 74, "_containerwithgradientsexperiment": [74, 97], "_containerwithimageexperiment": [74, 97], "_containerwithlayersexperiment": [74, 97], "_static_fft": 74, "static_fft": 74, "_static_sliding_window": 74, "673": [74, 379], "0507": [74, 379], "79711437": [74, 358, 379, 389], "94867325": [74, 358, 379, 389], "74089146": [74, 358, 379, 389], "25980937": [74, 358, 379, 389], "64958102": [74, 358, 379, 389], "2442648": [74, 358, 379, 389], "247306": [74, 391], "908323j": [74, 391], "494955": [74, 391], "90395j": [74, 391], "static_adaptive_avg_pool1d": 74, "static_adaptive_avg_pool2d": 74, "static_adaptive_max_pool2d": 74, "static_avg_pool1d": 74, "static_avg_pool2d": 74, "static_avg_pool3d": 74, "static_dct": 74, "182": 74, "253": [74, 280, 604], "515": [74, 615, 712], "467": 74, "static_dft": 74, "static_embed": 74, "static_idct": 74, "93732834": [74, 358, 379], "75048852": [74, 358, 379], "29723358": [74, 358, 389], "6950531": 74, "93914509": 74, "88008738": 74, "18951225": 74, "06697273": [74, 358, 389], "57439804": 74, "68861485": [74, 358, 389], "41308832": [74, 358, 389], "0700836": 74, "2449036": 74, "6711426": 74, "514": 74, "501709": 74, "4924011": 74, "static_ifft": 74, "static_ifftn": 74, "static_interpol": 74, "static_max_pool1d": 74, "static_max_pool2d": 74, "max_pool2dd": 74, "static_max_pool3d": 74, "static_max_unpool1d": 74, "static_rfft": 74, "static_rfftn": 74, "static_stft": 74, "_containerwithlinearalgebraexperiment": [74, 97], "933034": [74, 359, 407], "eigenvealu": [74, 410, 643], "xx": [74, 410, 412, 643], "37228107": [74, 410, 643], "3722816": [74, 410, 643], "8245648": [74, 410, 643], "41597357": [74, 410, 643], "56576747": [74, 410, 643], "9093767": [74, 410, 643], "56155": [74, 411], "82842": [74, 411], "450": [74, 417], "static_adjoint": 74, "static_batched_out": 74, "static_cond": 74, "static_diagflat": 74, "static_dot": 74, "static_eig": 74, "static_eigh_tridiagon": 74, "static_eigv": 74, "static_higher_order_mo": 74, "static_initialize_tuck": 74, "static_kron": 74, "kroneck": [74, 359, 416, 417], "static_make_svd_non_neg": 74, "static_matrix_exp": 74, "static_mode_dot": 74, "static_multi_dot": 74, "static_multi_mode_dot": 74, "static_partial_tuck": 74, "static_svd_flip": 74, "static_tensor_train": 74, "static_truncated_svd": 74, "static_tt_matrix_to_tensor": 74, "tt_matrix": [74, 359, 429], "output_tensor": [74, 94, 359, 429], "static_tuck": 74, "_containerwithlossesexperiment": [74, 97], "_static_huber_loss": 74, "static_huber_loss": 74, "0575": [74, 431], "_static_kl_div": 74, "_static_l1_loss": 74, "static_l1_loss": 74, "_static_log_poisson_loss": 74, "static_log_poisson_loss": 74, "_static_poisson_nll_loss": 74, "simplywrap": 74, "06446016": 74, "55611551": 74, "30244565": [74, 435], "_static_smooth_l1_loss": 74, "static_smooth_l1_loss": 74, "_static_soft_margin_loss": 74, "06429195": [74, 435], "_containerwithmanipulationexperiment": [74, 97], "_static_fill_diagon": 74, "_static_put_along_axi": 74, "_static_trim_zero": 74, "_static_unique_consecut": 74, "ary1": [74, 361, 440, 441, 442], "ary2": [74, 361, 440, 441, 442], "broadcast_shap": [74, 100, 361, 748], "static_concat_from_sequ": [74, 446], "30192195": [74, 458], "static_as_strid": 74, "static_atleast_1d": 74, "static_atleast_2d": 74, "static_atleast_3d": 74, "static_broadcast_shap": 74, "static_column_stack": 74, "static_dsplit": 74, "static_dstack": 74, "static_expand": 74, "static_flatten": 74, "static_fliplr": 74, "static_flipud": 74, "static_fold": 74, "static_heavisid": 74, "static_hsplit": 74, "static_hstack": 74, "static_i0": 74, "static_matric": 74, "static_moveaxi": 74, "static_pad": 74, "static_partial_fold": 74, "static_partial_tensor_to_vec": 74, "static_partial_unfold": 74, "static_partial_vec_to_tensor": 74, "static_rot90": 74, "static_soft_threshold": 74, "static_take_along_axi": 74, "static_top_k": 74, "static_unfold": 74, "static_vsplit": 74, "static_vstack": 74, "_containerwithnormsexperiment": [74, 97], "16903085": [74, 480, 481], "50709254": [74, 480, 481], "84515423": [74, 480, 481], "44183609": [74, 480, 481], "56807494": [74, 480, 481], "69431382": [74, 480, 481], "static_batch_norm": 74, "static_group_norm": 74, "static_instance_norm": 74, "static_l1_norm": 74, "static_l2_norm": 74, "static_lp_norm": 74, "12500000": 74, "37500000": 74, "62500000": 74, "27500000": 74, "35000000": 74, "42500000": 74, "0000000": 74, "5000000": 74, "2500000": 74, "_containerwithrandomexperiment": [74, 97], "43643127": [74, 484], "32325703": [74, 484], "24031169": [74, 484], "34251311": [74, 484], "31692529": [74, 484], "3405616": [74, 484], "5319725": [74, 484], "22458365": [74, 484], "24344385": [74, 484], "26588406": [74, 484], "61075421": [74, 484], "12336174": [74, 484], "51142915": [74, 484], "25041268": [74, 484], "23815817": [74, 484], "64042903": [74, 484], "25763214": [74, 484], "10193883": [74, 484], "31624692": [74, 484], "46567987": [74, 484], "21807321": [74, 484], "37677699": [74, 484], "39914594": [74, 484], "22407707": [74, 484], "static_bernoulli": 74, "static_beta": 74, "static_dirichlet": 74, "static_gamma": 74, "static_poisson": 74, "_containerwithsearchingexperiment": [74, 97], "static_unravel_index": 74, "_containerwithsetexperiment": [74, 97], "_containerwithsortingexperiment": [74, 97], "invert_permut": [74, 368], "static_invert_permut": 74, "static_lexsort": [74, 86], "_containerwithstatisticalexperiment": [74, 97], "_static_cummax": 74, "static_cummax": 74, "_static_cummin": 74, "static_cummin": 74, "func_nam": [74, 499, 788, 800, 801, 805, 809], "static_bincount": 74, "static_corrcoef": 74, "static_cov": [74, 370, 496], "static_histogram": 74, "static_igamma": 74, "static_median": 74, "static_nanmean": 74, "static_nanmedian": 74, "static_nanprod": 74, "static_quantil": 74, "_containerwithutilityexperiment": [74, 97], "static_optional_get_el": 74, "_containerwithgener": [75, 97], "_static_all_equ": 75, "static_all_equ": 75, "_static_array_equ": 75, "a0": [75, 361, 445], "static_array_equ": 75, "_static_assert_supports_inplac": 75, "_static_clip_matrix_norm": 75, "static_clip_matrix_norm": 75, "849": [75, 513, 514, 606], "_static_clip_vector_norm": 75, "static_clip_vector_norm": 75, "_static_einops_rearrang": 75, "static_einops_rearrang": 75, "_static_einops_reduc": 75, "static_einops_reduc": 75, "29333329": [75, 519, 606], "53000069": [75, 519, 606], "39666676": [75, 519, 606], "20666695": [75, 519, 606], "_static_einops_repeat": 75, "static_einops_repeat": 75, "_static_exist": 75, "_static_fourier_encod": 75, "static_fourier_encod": 75, "classivi": [75, 611, 617, 680, 722], "89858720e": 75, "79717439e": 75, "_static_gath": 75, "static_gath": 75, "_static_gather_nd": 75, "400": [75, 78, 358, 381, 382, 526, 550, 606, 609, 647], "static_gather_nd": 75, "_static_get_num_dim": 75, "static_get_num_dim": 75, "_static_has_nan": 75, "leafwis": 75, "static_has_nan": 75, "_static_inplace_decr": 75, "_static_inplace_incr": 75, "_static_inplace_upd": 75, "_static_is_arrai": 75, "static_is_arrai": 75, "_static_is_ivy_arrai": 75, "static_is_ivy_arrai": 75, "_static_is_native_arrai": 75, "static_is_native_arrai": 75, "_static_scatter_flat": 75, "_static_scatter_nd": 75, "static_scatter_nd": 75, "_static_stable_divid": 75, "22222222": 75, "11111111": 75, "857": [75, 564, 606], "444": 75, "_static_stable_pow": 75, "00012": [75, 565, 606], "00016": [75, 76, 565, 593, 606, 607], "00001": [75, 565, 606, 748], "00032": [75, 565], "00256": [75, 565], "1679638": [75, 565], "395": [75, 565], "16777383": [75, 565], "_static_supports_inplace_upd": 75, "_static_to_list": 75, "static_to_list": 75, "_static_to_numpi": 75, "static_to_numpi": 75, "_static_to_scalar": 75, "static_to_scalar": 75, "_static_value_is_nan": 75, "452": 75, "static_value_is_nan": 75, "833": [75, 514], "items": [75, 96, 606], "static_isin": 75, "static_items": 75, "static_strid": 75, "425": [75, 585], "_containerwithgradi": [76, 97], "_static_stop_gradi": 76, "static_stop_gradi": 76, "976": [76, 285, 587, 604, 607], "49e": [76, 587, 607], "74e": [76, 587, 607], "95e": [76, 587, 607], "024": [76, 587, 607], "096": [76, 587, 607], "216": [76, 79, 587, 607, 664], "626": [76, 587, 607], "en": [76, 587, 588, 607, 797], "wikipedia": [76, 587, 588, 607], "wiki": [76, 587, 588, 607], "stochastic_gradient_desc": [76, 587, 588, 607], "01099": [76, 588], "01003": [76, 588, 607], "01015": [76, 588, 607], "99936122": [76, 588, 607], "99936116": [76, 588, 607], "99936128": [76, 588, 607], "99936104": [76, 588, 607], "w_new": [76, 591, 607], "708": [76, 593, 607], "445": [76, 593, 607], "6e": [76, 593, 607], "00036": [76, 593, 607], "00049": [76, 593, 607], "layerwis": [76, 594, 607], "01132035": [76, 594, 607], "22264051": [76, 594, 607], "2056601": [76, 594, 607], "1324538": [76, 594, 607], "56490755": [76, 594, 607], "96622658": [76, 594, 607], "90848625": [76, 594, 607], "93616199": [76, 594, 607], "77232409": [76, 594, 607], "_containerwithimag": [77, 97], "_containerwithlay": [78, 97], "_static_conv1d": 78, "static_conv1d": 78, "_static_conv1d_transpos": 78, "static_conv1d_transpos": 78, "112": [78, 609, 619, 623, 654, 731], "_static_conv2d": 78, "ey": [78, 601, 608, 624, 630, 815, 822], "static_conv2d": 78, "_static_conv2d_transpos": 78, "static_conv2d_transpos": 78, "_static_conv3d": 78, "fdfh": [78, 626], "static_conv3d": 78, "_static_conv3d_transpos": 78, "static_conv3d_transpos": 78, "_static_depthwise_conv2d": 78, "inp": [78, 608, 630], "static_depthwise_conv2d": 78, "_static_dropout": 78, "static_dropout": 78, "_static_dropout1d": 78, "static_dropout1d": 78, "_static_dropout2d": 78, "_static_dropout3d": 78, "_static_linear": 78, "278": [78, 608, 631, 632], "static_linear": 78, "195": 78, "_static_lstm_upd": 78, "_static_multi_head_attent": 78, "_static_reduce_window": 78, "_static_scaled_dot_product_attent": 78, "static_scaled_dot_product_attent": 78, "39999962": [78, 608, 631, 632], "19999695": [78, 632], "11600018": [78, 632], "88399887": [78, 632], "196": [78, 608, 632], "306": [78, 608, 632], "19999981": [78, 608, 631, 637], "59249449": [78, 608, 637], "68226194": [78, 608, 637], "19603825": [78, 608, 637], "9960382": [78, 608, 637], "26894283": [78, 608, 637], "40236187": [78, 608, 637], "39999437": [78, 608, 637], "59999037": [78, 608, 637], "35046196": [78, 608, 637], "54282808": [78, 608, 637], "39989519": [78, 608, 637], "5998764": [78, 608, 637], "_containerwithlinearalgebra": [79, 97], "_static_choleski": 79, "static_choleski": 79, "577": [79, 609, 638], "707": [79, 609, 638], "static_rol": [79, 81], "_static_cross": 79, "static_cross": 79, "_static_det": 79, "_static_diag": 79, "_static_diagon": 79, "static_diagon": 79, "_static_eigh": 79, "_static_eigvalsh": 79, "static_eigvalsh": 79, "51572949": [79, 609, 645], "17091519": [79, 609, 645], "3448143": [79, 609, 645], "35898387e": [79, 609, 645], "46410179e": [79, 609, 645], "_static_inn": 79, "static_inn": 79, "_static_inv": 79, "static_inv": 79, "_static_matmul": 79, "matul": 79, "static_matmul": 79, "_static_matrix_norm": 79, "deimens": 79, "static_matrix_norm": 79, "_static_matrix_pow": 79, "_static_matrix_rank": 79, "static_matrix_rank": 79, "_static_matrix_transpos": 79, "static_matrix_transpos": 79, "_static_out": 79, "n1": [79, 133, 601], "n2": [79, 133, 601], "static_out": [79, 654], "_static_pinv": 79, "static_pinv": 79, "0426": 79, "0964": 79, "0605": 79, "1368": 79, "_static_qr": 79, "static_qr": 79, "31622777": [79, 609, 656], "9486833": [79, 609, 656], "4472136": [79, 609, 656], "89442719": [79, 609, 656], "16227766": [79, 609, 656], "42718872": [79, 609, 656], "63245553": [79, 609, 656], "47213595": [79, 609, 656], "81377674": [79, 609, 656], "_static_slogdet": 79, "static_slogdet": 79, "6931472": 79, "0986123": 79, "_static_solv": 79, "_static_svd": 79, "static_svd": 79, "au": 79, "aS": 79, "avh": 79, "bu": [79, 828], "bvh": 79, "_static_svdv": 79, "_static_tensordot": 79, "_static_tensorsolv": 79, "_static_trac": 79, "static_trac": 79, "_static_vand": 79, "static_vand": 79, "343": [79, 277, 604, 664], "729": [79, 664, 821], "_static_vecdot": 79, "_static_vector_norm": 79, "static_vector_norm": 79, "77359247": [79, 666], "_static_vector_to_skew_symmetric_matrix": 79, "09861231": [79, 609, 657], "static_general_inner_product": 79, "3475602": [79, 659], "93765765": [79, 659], "58776021": [79, 659], "10416126": [79, 659], "80644298": [79, 659], "87024701": [79, 659], "48127627": [79, 659], "79101127": [79, 659], "98288572": [79, 659], "68917423": [79, 659], "_containerwithloss": [80, 97], "_static_binary_cross_entropi": 80, "static_binary_cross_entropi": 80, "511": [80, 610, 668, 670], "_static_cross_entropi": 80, "static_cross_entropi": 80, "20397282": 80, "83258148": 80, "60943794": [80, 609, 657], "_static_sparse_cross_entropi": 80, "static_sparse_cross_entropi": 80, "5108256": [80, 669], "609438": [80, 669], "_containerwithmanipul": [81, 97], "_static_clip": 81, "static_clip": 81, "_static_concat": 81, "_static_constant_pad": 81, "static_constant_pad": 81, "_static_expand_dim": 81, "static_expand_dim": 81, "container_axi": [81, 611, 674], "_static_flip": 81, "static_flip": 81, "_static_permute_dim": 81, "static_permute_dim": 81, "_static_repeat": 81, "static_repeat": 81, "_static_reshap": 81, "static_reshap": 81, "_static_rol": 81, "positivclip": 81, "_static_split": 81, "static_split": 81, "_static_squeez": 81, "static_squeez": 81, "_static_stack": 81, "leavv": 81, "static_stack": 81, "_static_swapax": 81, "_static_til": 81, "static_til": 81, "_static_unstack": 81, "static_unstack": 81, "_static_zero_pad": 81, "repreat": [81, 677], "_containerwithnorm": [82, 97], "34198591": [82, 614, 709], "04274819": [82, 614, 709], "29923761": [82, 614, 709], "24053511": [82, 614, 709], "62221265": [82, 709], "20277636": [82, 709], "41943574": [82, 709], "83710337": [82, 709], "_containerwithrandom": [83, 97], "_static_multinomi": 83, "_static_randint": 83, "static_randint": 83, "_static_random_norm": 83, "static_random_norm": 83, "651": 83, "_static_random_uniform": 83, "static_random_uniform": 83, "481": 83, "0999": 83, "_static_shuffl": 83, "static_shuffl": 83, "431": [83, 712], "274": [83, 712], "_containerwithsearch": [84, 97], "_static_argmax": 84, "static_argmax": 84, "_static_argmin": 84, "static_argmin": 84, "_static_argwher": 84, "static_argwher": 84, "_static_nonzero": 84, "_static_wher": 84, "static_wher": 84, "_containerwithset": [85, 97], "_static_unique_al": 85, "static_unique_al": 85, "_static_unique_count": 85, "static_unique_count": 85, "_static_unique_invers": 85, "static_unique_invers": 85, "_static_unique_valu": 85, "_containerwithsort": [86, 97], "_static_argsort": 86, "static_argsort": 86, "_static_searchsort": 86, "_static_sort": 86, "static_sort": 86, "static_msort": 86, "_containerwithstatist": [87, 97], "_static_cumprod": 87, "static_cumprod": 87, "_static_cumsum": 87, "static_cumsum": 87, "_static_prod": 87, "static_prod": 87, "11000001": [87, 735], "23100001": [87, 735], "30800003": [87, 619, 735], "_static_sum": 87, "_static_var": 87, "static_var": 87, "12666667": [87, 619, 738], "11555555": [87, 619, 738], "rtype": [87, 731, 777], "respectv": [87, 736], "81649649": [87, 736], "94280904": [87, 736], "509902": [87, 619, 736], "2472192": [87, 736], "44948983": [87, 736], "41421354": [87, 736], "6666667": [87, 738], "_containerwithutil": [88, 97], "_static_al": 88, "static_al": 88, "_static_ani": 88, "static_ani": 88, "add_ivy_container_instance_method": 89, "containerexampl": 89, "factorized_tensor": [90, 91, 92, 93, 94, 95], "factorizedtensor": [90, 91, 92, 93, 94, 95], "matrix_or_tensor": 90, "to_tensor": [90, 91, 92, 93, 94, 95], "to_unfold": [90, 91, 92, 93, 94, 95], "to_vec": [90, 91, 92, 93, 94, 95], "cp_tensor": [91, 92], "cptensor": [91, 92, 310, 352], "cp_copi": 91, "cp_flip_sign": 91, "s_i": [91, 92], "normalisation_weight": [91, 92], "normalised_factor": [91, 92], "cp_lstsq_grad": 91, "return_loss": 91, "nabla": 91, "mathcal": 91, "mathbf": 91, "factor_matric": 91, "cp_gradient": 91, "quantiti": 91, "cp_mode_dot": 91, "keep_dim": [91, 95], "cp_multi_mode_dot": 91, "cp_n_param": 91, "tensor_shap": [91, 93, 94, 95], "n_param": [91, 92, 93, 94, 95], "cp_norm": 91, "cp_to_tensor": 91, "khatria": 91, "rao": [91, 359, 416], "khatri": [91, 359, 416], "cp_normal": 91, "normalis": [91, 92], "u_1": [91, 92], "u_n": [91, 92], "v_1": [91, 92], "v_n": [91, 92], "v_k": [91, 92], "u_k": [91, 92], "absorb": [91, 92], "refold": [91, 361, 454, 465], "cp_to_unfold": 91, "ie": 91, "s_u_i": 91, "exploit": [91, 841], "khatri_rao": [91, 359], "cp_to_vec": 91, "ravel": [91, 815], "unfolding_dot_khatri_rao": 91, "mttkrp": 91, "validate_cp_rank": 91, "percent": [91, 94], "validate_cp_tensor": 91, "parafac2_tensor": 92, "parafac2tensor": [92, 311, 352], "apply_parafac2_project": 92, "evolv": [92, 827, 838], "b_i": 92, "ijk": 92, "sum_r": 92, "a_": 92, "ir": [92, 836, 839, 844], "jr": 92, "kr": 92, "coupl": [92, 789, 793, 819, 821, 838], "factoris": 92, "i1": [92, 370, 499], "classmethod": [92, 99, 100, 753], "from_cptensor": 92, "parafac2_tensor_ok": 92, "parafac2_normalis": 92, "normalised_project": 92, "parafac2_to_slic": 92, "slice_idx": 92, "frontal": 92, "a_i": 92, "j_i": 92, "b_": 92, "reformul": 92, "p_i": 92, "orthogon": [92, 310, 314, 352, 359, 410, 424, 430, 609, 643, 644], "sum_": 92, "ijr": 92, "constraint": [92, 797, 798, 807], "projection_matric": 92, "parafac2_to_tensor": 92, "construct": [92, 611, 684, 764, 767, 768, 769, 811, 817, 821, 822, 836, 838, 845], "uneven": 92, "parafac2_to_unfold": 92, "parafac2_to_vec": 92, "validate_parafac2_tensor": 92, "cp": [92, 310, 352, 790], "tr_tensor": 93, "trtensor": [93, 312, 352], "tr_n_param": 93, "tr_to_tensor": 93, "tr_to_unfold": 93, "tr_to_vec": 93, "validate_tr_rank": 93, "validate_tr_tensor": 93, "tt_tensor": 94, "_tt_n_param": 94, "mp": [94, 313, 352], "index_upd": 94, "pad_tt_rank": 94, "factor_list": 94, "n_pad": 94, "pad_boundari": 94, "ring": 94, "bond": 94, "padded_factor_list": 94, "tt_to_tensor": 94, "assembl": [94, 359, 429], "e501": [94, 610, 668, 764], "tt_to_unfold": 94, "reassembl": 94, "tt_to_vec": 94, "validate_tt_rank": 94, "constant_rank": 94, "allow_overparametr": 94, "proport": [94, 763], "realiz": [94, 838], "validate_tt_tensor": 94, "tucker_tensor": 95, "tucker_copi": 95, "tucker_mode_dot": [95, 845], "tucker_n_param": 95, "tucker_norm": 95, "tucker_to_tensor": 95, "skip_factor": 95, "transpose_factor": 95, "tucker_to_unfold": 95, "tucker_to_vec": 95, "validate_tucker_rank": 95, "fixed_mod": 95, "validate_tucker_tensor": 95, "_bisection_root_find": 95, "fun": [95, 586, 606, 613, 701, 797], "max_it": 95, "__abs__": [96, 97], "__add__": [96, 97, 793, 796, 800, 801, 804, 809, 810, 819], "__eq__": [96, 97], "__ge__": [96, 97], "__gt__": [96, 97, 815], "__le__": [96, 97], "__lt__": [96, 97], "__ne__": [96, 97], "__pow__": [96, 97, 819], "69678056": 96, "59876156": 96, "82660675": 96, "__radd__": [96, 97, 800, 801, 809], "__rrshift__": [96, 97], "__rshift__": [96, 97], "__rsub__": [96, 97], "__sub__": [96, 97, 793, 796, 800, 804, 819], "__truediv__": [96, 97, 793, 796, 800], "__xor__": [96, 97], "referenc": [96, 802, 808], "resid": [96, 100, 611, 674, 809, 817, 821], "mt": [96, 819], "hopefulli": [96, 97, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 760, 761, 763, 764, 766, 767, 768, 769, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 815, 817, 818, 819, 820, 821, 822, 827, 828, 829], "overview": [96, 97, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 760, 761, 763, 764, 766, 767, 768, 769, 783, 795, 797, 810, 812, 816], "reach": [96, 97, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 760, 761, 763, 764, 766, 767, 768, 769, 786, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 815, 817, 818, 819, 820, 821, 822, 827, 828, 829, 837, 838], "eq": 97, "ge": 97, "le": 97, "ne": 97, "75979435": 97, "52153397": 97, "13532257": 97, "rshift": 97, "truediv": 97, "66666669": [97, 364, 481, 589, 607], "nested_arrai": [99, 100, 101, 795], "nestedarrai": 99, "nested_rank": [99, 100, 101], "inner_shap": [99, 100, 101], "nestedarraybas": [99, 100, 101], "from_row_length": 99, "row_length": 99, "from_row_split": 99, "row_split": 99, "ragged_map": 100, "ragged_multi_map": 100, "ragged_arrai": 100, "ragged_multi_map_in_funct": 100, "replace_ivy_arrai": 100, "unbind": 100, "nestedarrayelementwis": 101, "strictli": [106, 109, 112, 241, 598, 604, 804, 808], "behaviour": [106, 109, 268, 598, 604, 787, 790, 791, 792, 793, 796, 798, 799, 801, 802, 804, 805, 806, 808, 809, 812, 813, 819], "24000001": [106, 598], "703": [107, 598], "683": [107, 598], "408": [107, 598], "313": [107, 598], "437": [107, 598], "40337825": [108, 598], "56114835": [108, 598], "20788449": [108, 598], "231": [111, 598], "\u03b2": [112, 598], "66666667": [113, 370, 496, 598], "body_fn": [116, 117, 119, 600], "bodi": [116, 119, 600, 792, 812], "lst": [116, 600], "orelse_fn": [117, 600], "body1": [118, 600], "body2": [118, 600], "test_fn": [119, 600, 746, 783, 832, 833], "repeatedli": [119, 600, 613, 699, 797, 812], "ml_framework": [120, 601], "distanc": [120, 601], "adjac": [120, 601], "nestedsequ": [121, 122, 601], "typevar": [121, 122, 601], "supportsbufferprotocol": [121, 122, 601], "static_copy_arrai": [123, 601], "intdtyp": [126, 137, 143, 155, 166, 171, 178, 184, 601, 602], "interchang": [127, 138, 601, 611, 683], "plu": [128, 601], "x00b": [128, 601], "x00d": [128, 601], "x00e": [128, 601], "66666663": [131, 601], "41588834": [132, 601], "7827941": [132, 601], "6227766": [132, 601], "23413252": [132, 601], "n3": [133, 601], "xv": [133, 601], "yv": [133, 601], "x_nativ": [134, 601, 808], "y_nativ": [134, 601], "z_nativ": [134, 601], "d_type": [136, 601], "pycapsul": [138, 601], "col": [141, 315, 352, 601], "primari": [141, 160, 161, 193, 194, 315, 352, 368, 489, 523, 524, 601, 602, 603, 606, 749, 751, 788, 791, 794, 798, 806, 808, 809, 811, 812, 815, 823, 825], "upward": [141, 315, 352, 601], "downward": [141, 315, 352, 601], "2xn": [141, 315, 352, 601], "subarrai": [141, 315, 352, 601], "incompat": [148, 602], "closest": [151, 230, 240, 241, 277, 287, 602, 604, 812, 815], "xtype": [151, 602], "ytype": [151, 602], "native_uint16": [151, 602], "complexdtyp": [152, 166, 175, 602], "set_default_complex_dtyp": [152, 181, 602], "4294": [152, 154, 602], "967346": [152, 154, 602], "set_default_dtyp": [153, 182, 602, 798, 805], "floatdtyp": [154, 177, 602], "set_default_float_dtyp": [154, 163, 175, 183, 602, 798], "int_dtyp": [155, 178, 602], "set_default_int_dtyp": [155, 163, 184, 602, 798], "4294967346": [155, 156, 602], "uint_dtyp": [156, 179, 602], "uint": [156, 171, 179, 185, 602, 798, 810], "uintdtyp": [156, 171, 179, 185, 602], "set_default_uint_dtyp": [156, 163, 185, 602], "native_bool": [158, 602], "ieee": [159, 217, 234, 239, 257, 267, 276, 281, 284, 599, 602, 604, 828], "754": [159, 217, 234, 239, 257, 267, 276, 281, 284, 599, 602, 604, 828], "smallest_norm": [159, 602], "bfloat16": [160, 602, 748, 749, 798, 809, 812, 813], "unsupport": [161, 194, 524, 602, 603, 606, 743, 746, 786, 789, 809], "encapsul": [162, 602, 797], "314": [162, 274, 324, 355, 602, 604], "9223372036854775808": [162, 602], "9223372036854775807": [162, 602], "65535": [162, 602], "4294967295": [162, 602], "native_uint8": [164, 602], "hashabl": [168, 602], "type1": [172, 602], "type2": [172, 602], "array_api_promot": [172, 173, 602, 748, 749], "unexpect": [173, 241, 602, 604, 798], "default_complex_dtyp": [175, 602], "default_dtype_stack": [176, 182, 602], "unset_default_dtyp": [176, 602], "native_uint64": [176, 602], "default_float_dtyp": [177, 602, 798], "default_int_dtyp": [178, 184, 602, 798], "default_uint_dtyp": [179, 185, 602], "ret1": [180, 602], "ret2": [180, 602], "reset": [181, 182, 183, 184, 185, 211, 212, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 602, 603, 606, 799], "default_complex_dtype_stack": [181, 602], "default_float_dtype_stack": [183, 602], "native_float16": [186, 602], "unmodifi": [188, 603, 794, 798], "clear": [189, 603, 788, 790, 794, 798, 799, 800, 809, 815, 817, 819, 827, 828, 829, 838], "aliv": [195, 200, 202, 527, 547, 548, 603, 606, 799], "139740789224448": [195, 603], "physic": [198, 603], "process_specif": [201, 213, 603], "percentag": [201, 603], "ram": [201, 209, 213, 603], "alon": [201, 213, 603, 783, 803, 812], "036902561555": [201, 603], "7024003467681645": [201, 603], "as_native_dev": [201, 603], "7095597456708771": [201, 603], "attr_onli": [202, 603], "soft_device_mod": [204, 212, 603], "chunk": [205, 206, 207, 603], "split_factor": [205, 603, 802], "max_chunk_s": [207, 603], "chunk_siz": [207, 603], "input_ax": [207, 603], "output_ax": [207, 603], "usag": [207, 603, 798, 805, 808, 812, 817, 823, 828, 841], "fed": [207, 603, 821], "fist": [207, 603], "gb": [209, 213, 603, 789], "66700032": [209, 603], "589934592": [209, 603], "set_default_devic": [211, 603, 799], "set_soft_device_mod": [212, 603, 799], "219563008": [213, 603], "902400346": [213, 603], "525205504": [213, 603], "na": [214, 604, 812], "princip": [215, 219, 221, 344, 355, 604], "domain": [215, 216, 219, 220, 221, 222, 231, 232, 237, 239, 255, 256, 258, 279, 280, 281, 284, 285, 344, 355, 604, 801, 836, 838], "codomain": [215, 216, 219, 220, 221, 222, 231, 232, 237, 239, 255, 256, 258, 279, 280, 281, 284, 285, 344, 355, 604, 801], "\u03c0": [215, 219, 221, 222, 599, 604], "3\u03c0": [215, 222, 604], "unspecifi": [215, 216, 220, 223, 232, 237, 239, 241, 276, 280, 281, 285, 359, 410, 604, 609, 611, 643, 644, 682, 808], "\u03c0j": [216, 220, 223, 255, 257, 604], "3\u03c0j": [216, 255, 257, 604], "x1_i": [217, 222, 224, 226, 227, 228, 229, 234, 235, 241, 245, 246, 253, 254, 259, 261, 263, 264, 267, 270, 272, 276, 283, 604, 792], "2019": [217, 234, 239, 257, 267, 604, 838, 841], "overflow": [217, 234, 241, 604, 609, 619, 657, 737, 787, 798], "commut": [217, 604], "tabl": [217, 234, 267, 558, 580, 604, 606, 748, 749, 764, 809, 814, 838], "dj": [217, 234, 267, 604], "bj": [217, 234, 267, 324, 355, 604], "z1": [217, 604], "z2": [217, 604], "yj": [218, 604], "nanj": [220, 604], "809": [220, 604], "569": [220, 604], "733": [220, 604], "notat": [222, 604, 619, 731, 797], "denot": [222, 604, 766], "quadrant": [222, 604], "rai": [222, 604, 828], "bitwis": [224, 227, 229, 264, 604], "170": [228, 604], "243": [228, 604], "xor": [229, 264, 604], "654": [231, 604], "ci": [232, 237, 239, 280, 604, 792, 798, 803, 810, 812, 823], "368": [232, 604], "670": [232, 604], "202": [232, 604, 792], "548": [232, 604], "1490": [232, 604], "57079633": [233, 604], "14159265": [233, 604], "71238898": [233, 604], "28318531": [233, 604], "02617994": [233, 604], "87266463": [233, 604], "01919862": [233, 604], "03839725": [233, 604], "05759586": [233, 604], "07679449": [233, 604], "09599311": [233, 604], "11519173": [233, 604], "35081118": [233, 604], "88139129": [233, 604], "underflow": [234, 241, 604, 609, 657, 798], "textbook": [234, 267, 604], "frac": [234, 256, 258, 278, 280, 284, 358, 364, 385, 386, 390, 391, 476, 478, 604], "ac": [234, 267, 604, 777], "bd": [234, 267, 604], "bc": [234, 267, 604, 777], "versu": [234, 267, 604], "riemann": [234, 267, 604], "sphere": [234, 267, 604], "c99": [234, 267, 604], "infinit": [234, 267, 281, 604], "unlik": [234, 267, 604, 792, 797, 800, 828, 843, 845], "698": [234, 604], "truth": [235, 245, 246, 253, 254, 270, 360, 431, 604, 743, 745, 756, 786, 809, 812], "32862675": [236, 604], "67780113": [236, 604], "11246294": [236, 604], "42839241": [236, 604], "52050018": [236, 604], "16799599": [236, 604], "30787992": [236, 604], "43796915": [236, 604], "98667163": [236, 604], "79690808": [236, 604], "88020504": [236, 604], "91031402": [236, 604], "95228523": [236, 604], "96610528": [236, 604], "cut": [237, 239, 279, 280, 281, 284, 604, 827, 844], "08553692": [237, 604], "567": [237, 604], "00344786": [237, 604], "76297021": [237, 604], "197948": [237, 604], "53253174": [237, 604], "accur": [239, 257, 604, 609, 657, 806], "fdlibm": [239, 257, 604], "compliant": [239, 257, 262, 263, 321, 322, 355, 604, 619, 732, 733, 734, 736], "potenti": [239, 257, 604, 783, 788, 789, 797, 798, 809, 816, 841], "632": [239, 604], "20e": [239, 604], "72e": [239, 604, 748], "greatest": [240, 241, 244, 604], "pep": [241, 604, 804], "disambigu": [241, 604, 807], "former": [241, 604, 789, 798, 801, 809], "latter": [241, 604, 789, 792, 794, 798, 801, 809], "overload": [241, 604, 812], "led": [241, 604, 792, 840], "subtl": [241, 604, 798, 844], "bug": [241, 604, 783, 788, 790, 795, 803, 809, 812, 824], "ambigu": [241, 604], "semant": [241, 276, 604, 798, 817, 822, 827, 839], "ill": [241, 604, 750], "surpris": [241, 604, 823], "arrau": [247, 604], "log_": [256, 258, 604], "742": [257, 604], "recommend": [262, 263, 276, 360, 432, 604, 619, 733, 736, 785, 789, 794, 795, 803, 806, 807, 831], "negat": [269, 324, 355, 604], "52095687": [272, 604], "92457771": [272, 604], "49372482": [272, 604], "22738838": [272, 604], "156": [272, 604, 748], "5877228": [272, 604], "189": [273, 604, 613, 690], "252": [273, 604], "315": [273, 604], "378": [273, 604], "1150": [273, 604], "2890": [273, 604], "172": [273, 604], "487": [273, 604, 608, 632], "344": [273, 604], "355j": [274, 324, 355, 604], "55j": [274, 324, 355, 604], "primarili": [276, 604, 788, 796, 838], "reason": [276, 285, 604, 788, 790, 792, 793, 796, 797, 798, 800, 805, 808, 809, 812, 813, 815, 817, 819, 828, 844], "counterpart": [277, 604, 796, 806], "deliber": [277, 604, 815], "imprecis": [277, 604], "5654": [277, 604], "034": [277, 604], "433": [277, 590, 592, 604, 607], "signum": [278, 604], "operatornam": [278, 280, 604, 609, 644], "textrm": [278, 604], "932": [279, 604], "746": [279, 604], "657": [279, 514, 604, 606], "indistinguish": [281, 604], "convent": [281, 604, 609, 619, 649, 731, 790, 794, 804, 813, 827, 844], "infti": [281, 604], "32455532": [281, 604], "89897949": [281, 604], "169": [281, 604], "analyt": [284, 604, 838, 840, 844], "pole": [284, 604], "546": [284, 604, 608, 632], "916": [284, 604, 610, 668], "996": [284, 604], "histor": [285, 604], "stem": [285, 604, 808], "older": [285, 604], "advis": [285, 604, 809], "462": [285, 604], "604": [285, 604], "984": [285, 604], "997": [285, 604], "0375": [287, 604], "032": [287, 604], "contin": [289, 350], "57258511": [290, 350], "69999999": [290, 350, 597, 607], "90928203": [290, 350], "98772264": [290, 350], "99591321": [290, 350], "99863964": [290, 350], "69880581": [290, 350], "18126924": [290, 350], "hardtanhx": [291, 350], "20141329": [293, 350], "40318608": [293, 350], "48683619": [293, 350], "46328247": [293, 350], "59813893": [293, 350], "43748799": [293, 350], "parametr": [294, 350, 792, 812, 838], "6705687": [296, 350], "52016652": [296, 350], "40560818": [296, 350], "45630932": [296, 350], "2689": [297, 350], "7310": [297, 350], "7615": [297, 350], "2784": [297, 350], "7168": [297, 350], "8708": [297, 350], "4374": [297, 350], "1379": [297, 350], "0089": [297, 350], "03597236": [298, 350], "43827677": [298, 350], "80100036": [298, 350], "12954807": [298, 350], "76459098": [298, 350], "20044947": [298, 350], "60000372": [298, 350], "taper": [300, 303, 352], "summat": [300, 352, 619, 731, 777], "leakag": [300, 352], "slightli": [300, 352, 796, 809, 812, 817, 821], "wors": [300, 352, 828], "y1": [301, 352], "0800": [302, 352], "3979": [302, 352], "9121": [302, 352], "5400": [302, 352], "han": [303, 352], "ith": [304, 352], "00726415": [305, 352], "9999736": [305, 352], "2773e": [306, 352], "0172e": [306, 352], "9294e": [306, 352], "4149": [306, 352], "9138": [306, 352], "5529": [306, 352], "multidimension": [308, 309, 352, 838], "normalise_factor": [310, 311, 352], "parafac2": [311, 352], "tr": [312, 352], "context": [312, 352, 546, 606, 789, 790, 794, 798, 799, 800], "38268346": [319, 352], "38268352": [319, 352], "8563191": [319, 352], "14943568": [319, 352], "behav": [321, 322, 355, 359, 410, 609, 643, 792, 802, 806, 808, 809, 810, 819, 839], "paddlepaddl": [321, 322, 355, 789], "cn": [321, 322, 355], "zh": [321, 322, 355], "paddl": [321, 322, 355, 761, 773, 788, 789, 798], "amax_cn": [321, 355], "sentinel": [321, 322, 355, 619, 732, 734], "amin_cn": [322, 355], "position": [331, 355], "inexact": [331, 355], "triangl": [335, 355], "999999e": [336, 355], "65999985": [338, 355], "52000046": [338, 355], "1500001": [338, 355, 519, 606], "11259177": [339, 355], "3574118": [339, 355], "20097363": [339, 355], "suppli": [343, 355, 361, 461, 777, 793, 795, 812], "217234": [344, 355], "hurwitz": [347, 355], "custom_grad_func": [349, 357], "bind": [349, 357, 788, 807, 837, 838], "upstream": [349, 357, 789, 790, 792, 807], "ndenumer": 352, "ndindex": 352, "random_cp": 352, "random_parafac2": 352, "random_tr": 352, "random_tt": 352, "random_tuck": 352, "bind_custom_gradient_funct": [357, 807], "area_interpol": 358, "division_overrid": [358, 376], "avg": [358, 376, 378, 399], "dimensio": [358, 377], "01823380e": [358, 379, 389], "15385818e": [358, 379, 389], "36371466e": [358, 379, 389], "38763905e": [358, 379, 389], "60722279e": [358, 379, 389], "80319249e": [358, 379, 389], "05617893e": [358, 379, 389], "21500000e": [358, 379, 389], "24000015e": [358, 379, 389], "90734863e": [358, 379, 389], "10000420e": [358, 379, 389], "15899994e": [358, 379, 389], "24000053e": [358, 379, 389], "81469727e": [358, 379, 389], "09999847e": [358, 379, 389], "4135742": [358, 379, 389], "6779785": [358, 379, 389], "3770599": [358, 379, 389], "8719864": [358, 379, 389], "72109985": [358, 379, 389], "52869415": [358, 379, 389], "79182434": [358, 379, 389], "72489166": [358, 379, 389], "container_n": [358, 379, 389], "container_typ": [358, 379, 389, 606], "container_norm": [358, 379, 389], "1580677": [358, 379], "89422607": [358, 379], "86190414": [358, 379], "00041008": [358, 379], "75149155": [358, 379], "97056389": [358, 379], "87819386": [358, 379], "89381361": [358, 379], "50000000e": [358, 379, 389, 748], "22044605e": [358, 379, 389], "ed": [358, 381, 382, 383], "rest": [358, 361, 381, 382, 383, 447, 789, 795, 797, 812, 822, 840], "5d": [358, 383, 764], "emb": [358, 384], "51285338": [358, 384], "87183261": [358, 384], "2308116": [358, 384], "02733949e": [358, 385], "00j": [358, 385], "49660576e": [358, 385], "68178638e": [358, 385], "01j": [358, 385, 390], "98912367e": [358, 385], "21802426e": [358, 385, 390], "04549134e": [358, 385, 390], "82842712e": [358, 385, 390], "86902654e": [358, 385, 390], "25501143e": [358, 385, 390], "32978028e": [358, 385, 390], "52068201e": [358, 385, 390], "71158374e": [358, 385, 390], "generate_einsum_equ": 358, "get_interpolate_kernel": 358, "27279224e": [358, 389], "44232273e": [358, 389], "70464332e": [358, 389], "73454881e": [358, 389], "00902849e": [358, 389], "10039906e": [358, 389], "07022366e": [358, 389], "69506073": [358, 389], "93914604": [358, 389], "88008881": [358, 389], "18951607": [358, 389], "57439613": [358, 389], "15318303e": [358, 390], "15148591e": [358, 390], "19j": [358, 390], "25000000e": [358, 390], "35378602e": [358, 390], "02j": [358, 390], "65404249e": [358, 390], "17611649e": [358, 390], "24320230e": [358, 390], "79344813e": [358, 390], "22374531e": [358, 390], "45929364e": [358, 390], "14208718e": [358, 390], "07177031e": [358, 390], "indexerror": [358, 391, 402, 611, 674, 778, 802], "interp": [358, 815], "xp": [358, 392, 792], "fp": [358, 392], "nd": [358, 393], "bicubic_tensorflow": [358, 393, 815], "nearest_interpol": 358, "window_shap": [358, 399], "pool_typ": [358, 399], "irfft": [358, 401], "silent": [358, 401], "discard": [358, 401, 797], "639999": [358, 401], "516063j": [358, 401], "3999999": [358, 401], "3999996": [358, 401], "99038106j": [358, 402], "33012702": [358, 402], "23205081j": [358, 402], "33012702j": [358, 402], "superdiagon": [359, 408, 609, 641], "subdiagon": [359, 408, 609, 641], "eigendecomposit": [359, 410, 609, 643, 644], "qlq\u1d40": [359, 410, 609, 643, 644], "tridiagon": [359, 411], "38196602": [359, 411], "61803389": [359, 411], "35048741": [359, 411], "56710052": [359, 411], "06693714": [359, 411], "74234426": [359, 411], "56155282": [359, 411], "56155276": [359, 411], "82842714": [359, 411], "82842731": [359, 411, 609, 644], "necessarili": [359, 412, 793, 796], "generalis": [359, 413], "random_st": [359, 415], "skip_matrix": [359, 416, 418], "khatri_rao_product": [359, 416], "kronecker_product": [359, 418], "n_column": [359, 418], "nnmf": [359, 419], "hoi": [359, 424, 430], "solve_triangular": 359, "unit_diagon": [359, 425], "solut": [359, 425, 609, 658, 748, 783, 786, 789, 790, 796, 798, 810, 812, 815, 836, 840], "determinist": [359, 426], "borrow": [359, 426, 791], "scikit": [359, 426, 828], "extmath": [359, 426], "ivan": [359, 427], "oseledet": [359, 427], "scientif": [359, 427, 838], "2295": [359, 427], "2317": [359, 427], "2011": [359, 427], "convention": [360, 432, 841], "issu": [360, 432, 763, 784, 785, 786, 787, 789, 792, 794, 795, 797, 798, 799, 800, 802, 809, 812, 813, 815, 817, 821, 823, 829, 831], "caus": [360, 432, 789, 790, 792, 794, 796, 797, 798, 800, 808, 810, 812, 823], "explicit": [360, 432, 762, 789, 796, 798, 807, 808, 809, 817, 823, 838], "555969": [360, 432], "223876": [360, 432], "111938": [360, 432], "42649534": [360, 432], "68651628": [360, 432], "51119184": [360, 432], "59967244": [360, 432], "mae": [360, 433], "91097307": [360, 435], "3467": [360, 436], "0133": [360, 436], "0250": [360, 436], "0056": [360, 436], "0025": [360, 436], "0675": [360, 436], "hing": [360, 437], "6987": [360, 437], "1606": [360, 437], "3711": [360, 437], "4032": [360, 437], "6931": [360, 437], "whilst": [361, 440, 441, 442, 822, 825, 838], "ary3": [361, 442], "mod": [361, 444, 792], "69999981": [361, 445], "tall": [361, 450], "appear": [361, 452, 453, 586, 606, 789, 790, 792, 809, 815, 831], "horizot": [361, 457], "shortcut": [361, 461, 789], "linear_ramp": [361, 461], "reflect": [361, 461, 790, 793, 808, 812], "ramp": [361, 461], "mirror": [361, 461, 788, 838], "padding_func": [361, 461], "iaxis_pad_width": [361, 461], "iaxi": [361, 461], "unalt": [361, 461], "put": [361, 466, 783, 788, 812, 823, 844], "mul": [361, 466, 808, 819], "shrinkag": [361, 468], "elimin": [361, 473, 789], "consecut": [361, 473], "batch_mean": [364, 476, 478], "batch_var": [364, 476, 478], "running_vari": [364, 476, 478], "42857143": [364, 481], "5714286": [364, 481], "multivari": [365, 484], "bayesian": [365, 484], "supposedli": [368, 488], "indirect": [368, 489], "secondari": [368, 489], "is_ivy_sparse_arrai": 369, "is_native_sparse_arrai": 369, "native_sparse_arrai": 369, "coo_indic": [369, 492], "crow_indic": [369, 492], "col_indic": [369, 492], "ccol_indic": [369, 492], "row_indic": [369, 492], "dense_shap": [369, 492], "native_sparse_array_to_indices_values_and_shap": 369, "nativesparsearrai": 369, "sparsearrai": 369, "linalg": [370, 496, 609, 657, 658, 788, 808, 810], "aw": [370, 496, 828], "48447205": [370, 496], "c0": [370, 499], "ck": [370, 499], "c2": [370, 499], "nearest_jax": [370, 505], "trace_on_next_step": [509, 606, 765, 766, 768, 821], "recalcul": [512, 606], "my_sum": [512, 606], "val1": [512, 606], "val2": [512, 606], "cached_sum": [512, 606], "line_eq": [512, 606], "slp": [512, 606], "itc": [512, 606], "cached_line_eq": [512, 606], "0353": [513, 606], "424": [513, 606], "176": [513, 606], "339": [513, 606], "271": [513, 606], "391": [513, 606], "417": [514, 606], "583": [514, 606], "0667": [514, 606], "267": [514, 606], "131": [514, 606], "263": [514, 606], "394": [514, 606, 615, 715], "526": [514, 606], "788": [514, 606], "default_str": [517, 606], "46999979": [518, 606], "66000009": [518, 606], "93000001": [518, 606], "29000092": [518, 606], "33999991": [518, 606], "6400001": [518, 606], "96000004": [518, 606], "36000013": [518, 606], "51999998": [518, 606], "67000008": [518, 606], "suppos": [518, 606, 798, 812], "960": [518, 606], "3600": [518, 606], "h1": [518, 606], "w1": [518, 606], "40499985": [519, 606], "61000061": [519, 606], "max_depth": [530, 606], "seen_set": [530, 606], "local_set": [530, 606], "referr": [530, 606], "redund": [530, 606, 783, 798, 802, 809, 831], "example_funct": [530, 606], "ref_id_1": [530, 606], "ref_id_2": [530, 606], "ref_id_3": [530, 606], "ivyexcept": [535, 567, 606, 778, 799, 802, 806, 808, 809, 813], "allow_dupl": [545, 606], "fork": [546, 606, 784, 792, 797], "forkserv": [546, 606], "spawn": [546, 606], "consol": [548, 606, 790, 803, 812, 819], "garbag": [548, 606], "collector": [548, 606], "get_all_arrays_in_memori": [548, 606], "frontend": [552, 606, 745, 746, 749, 753, 756, 783, 787, 790, 791, 797, 798, 802, 807, 811, 812, 815, 816, 818, 825, 832, 838], "exception_trace_mod": [552, 575, 606, 814], "lenient": [553, 576, 606], "inplace_mod": [553, 576, 606], "break": [553, 606, 783, 794, 798, 804, 813, 823], "strict": [553, 576, 606], "infus": [554, 606], "nestable_mod": [557, 579, 606, 814], "precise_mod": [558, 580, 606, 814], "shape_array_mod": [560, 582, 606, 814], "show_func_wrapper_trace_mod": [561, 583, 606, 814], "tmp_dr": [562, 606], "tmp_dir": [562, 584, 606, 814], "my_tmp": [562, 606], "49999999999975": [564, 606], "5015015015010504": [564, 606], "000444502911705e": [564, 606], "9999999999995j": [564, 606], "00000262": [565, 606], "15605032": [565, 606], "01208451j": [565, 606], "00048": [565, 606], "1296": [565, 606], "00864": [565, 606], "2048": [565, 606], "isn": [567, 606, 790, 806, 808, 820, 823, 840], "100000023841858": [569, 606], "200000047683716": [569, 606], "299999952316284": [569, 606], "400000095367432": [569, 606], "599999904632568": [569, 606], "hemant": [573, 606], "unset_shape_array_mod": [574, 606], "set_exception_trace_mod": [575, 606, 802], "set_inplace_mod": [576, 606], "set_min_bas": [577, 606], "set_min_denomin": [578, 606], "set_nestable_mod": [579, 606], "set_precise_mod": [580, 606], "set_queue_timeout": [581, 606], "set_shape_array_mod": [582, 606], "set_show_func_wrapper_trace_mod": [583, 606, 802], "set_tmp_dir": [584, 606], "my_dir": [584, 606], "451": [585, 606], "in_ax": [586, 606], "out_ax": [586, 606], "thereof": [586, 606], "summaris": [586, 606], "99999998": [587, 607], "09999998": [587, 607], "19999998": [587, 607], "00000001": [587, 607], "00300001": [587, 607], "00800001": [587, 607], "0125": [587, 607], "17294501": [587, 607], "15770318": [587, 607], "20863818": [587, 607], "90000075": [588, 607], "90000164": [588, 607], "9000032": [588, 607], "50000012e": [588, 607], "92558754": [588, 607], "92558694": [588, 607], "92558682": [588, 607], "92558861": [588, 607], "60000025e": [588, 607], "01024": [588, 607], "retain_grad": [589, 607], "func_ret": [589, 607, 807], "666666": [589, 607], "333332": [589, 607], "66666675": [589, 597, 607], "argnum": [590, 607], "933": [590, 592, 607], "jacobian": [592, 607, 823, 838], "jac_fn": [592, 607], "639": [593, 607], "361": [593, 607], "52565837": [594, 607], "8418861": [594, 607], "68377209": [594, 607], "value_grad": [597, 607], "42333412": [597, 607], "5333333": [597, 607], "93333334": [597, 607], "43333334": [597, 607], "0666666": [597, 607], "softsign": 598, "718281828459045": 599, "euler": 599, "141592653589793": 599, "cmp_i": 600, "cmp_isnot": 600, "for_loop": 600, "if_els": 600, "try_except": 600, "while_loop": 600, "to_dlpack": 601, "as_ivy_dtyp": [602, 809], "as_native_dtyp": 602, "check_float": 602, "closest_valid_dtyp": 602, "default_dtyp": [602, 798, 805], "dtype_bit": 602, "function_supported_dtyp": [602, 798, 812], "function_unsupported_dtyp": [602, 798], "infer_default_dtyp": 602, "invalid_dtyp": [602, 798], "is_hashable_dtyp": 602, "is_native_dtyp": 602, "promote_typ": [602, 798], "promote_types_of_input": [602, 798, 808], "type_promote_arrai": [602, 798], "unset_default_complex_dtyp": 602, "unset_default_float_dtyp": 602, "unset_default_int_dtyp": 602, "unset_default_uint_dtyp": 602, "valid_dtyp": 602, "defaultcomplexdtyp": 602, "defaultdtyp": 602, "defaultfloatdtyp": 602, "defaultintdtyp": 602, "defaultuintdtyp": 602, "as_ivy_dev": [603, 819], "clear_cached_mem_on_dev": 603, "dev_util": [603, 799], "function_supported_devic": 603, "function_unsupported_devic": 603, "get_all_ivy_arrays_on_dev": [603, 799], "handle_soft_device_vari": [603, 799], "num_cpu_cor": [603, 799], "num_gpu": [603, 799, 812], "num_ivy_arrays_on_dev": 603, "percent_used_mem_on_dev": 603, "print_all_ivy_arrays_on_dev": 603, "set_split_factor": [603, 802], "split_func_cal": 603, "total_mem_on_dev": [603, 799], "tpu_is_avail": 603, "unset_default_devic": [603, 799], "unset_soft_device_mod": [603, 799], "used_mem_on_dev": 603, "defaultdevic": [603, 799], "profil": 603, "save_dir": 603, "arg_info": 606, "arg_nam": 606, "cache_fn": [606, 805], "current_backend_str": [606, 812, 817, 819], "function_supported_devices_and_dtyp": 606, "function_unsupported_devices_and_dtyp": 606, "get_item": [606, 808], "get_referrers_recurs": 606, "inplace_arrays_support": 606, "inplace_variables_support": 606, "is_ivy_nested_arrai": 606, "isscalar": 606, "match_kwarg": 606, "num_arrays_in_memori": 606, "print_all_arrays_in_memori": 606, "set_item": 606, "to_ivy_shap": 606, "to_native_shap": 606, "try_else_non": 606, "unset_array_mod": [606, 814], "unset_exception_trace_mod": 606, "unset_inplace_mod": 606, "unset_min_bas": 606, "unset_min_denomin": 606, "unset_nestable_mod": 606, "unset_precise_mod": 606, "unset_queue_timeout": 606, "unset_show_func_wrapper_trace_mod": 606, "unset_tmp_dir": 606, "vmap": [606, 823, 838], "arraymod": 606, "precisemod": [606, 798], "jac": 607, "value_and_grad": [607, 807], "neural": [608, 760, 764, 783, 832, 834, 836, 837, 838, 842, 844, 845], "feature_group_count": [608, 621, 628, 629], "oiw": [608, 621, 622, 628], "oihw": [608, 621, 624, 628], "oidhw": [608, 621, 625, 626, 628], "dhwio": [608, 621, 622, 625, 626, 628], "conv_general_dil": [608, 809], "conv_general_transpos": 608, "depthwis": [608, 630, 750, 764], "overfit": [608, 631], "overal": [608, 631, 796, 798, 799, 801, 822, 831, 834, 836, 837, 838], "1428566": [608, 631], "49000001": [608, 631], "55599999": [608, 631], "21000004": [608, 631], "incom": [608, 632], "666": [608, 609, 632, 650], "4269": [608, 632], "911": [608, 632, 802], "157": [608, 632], "753": [608, 632], "545": [608, 615, 632, 713], "547": [608, 632, 799], "124": [608, 632], "852": [608, 632], "963": [608, 632], "98495483": [608, 632], "0293808": [608, 632], "0159359": [608, 632], "74752808": [608, 632], "20942307": [608, 632], "3205719": [608, 632], "long": [608, 633, 789, 790, 797, 798, 800, 802, 809, 817, 838], "unrol": [608, 633, 817, 820], "lstm": [608, 633, 764, 817, 838], "batch_first": [608, 634], "multi": [608, 609, 634, 639, 750, 764, 766, 800, 816, 823, 834, 836, 838, 842], "paper": [608, 634, 783, 829], "vaswani": [608, 634], "al": [608, 634], "num_attention_head": [608, 634], "key_dim": [608, 634, 764], "value_dim": [608, 634, 764], "measur": [608, 634, 764], "attention_weight": [608, 634], "unbatch": [608, 634], "nm": 608, "box": [608, 635, 636, 789], "iou_threshold": [608, 635], "max_output_s": [608, 635], "score_threshold": [608, 635], "roi_align": 608, "spatial_scal": [608, 636], "sampling_ratio": [608, 636], "23333359": [608, 637], "03946018": [608, 637], "0280633": [608, 637], "29981947": [608, 637], "29981089": [608, 637], "06345534": [608, 637], "9634552": [608, 637], "19336844": [608, 637], "09336829": [608, 637], "axisa": [609, 639], "axisb": [609, 639], "axisc": [609, 639], "293": [609, 640], "46997": [609, 640], "explicitli": [609, 644, 645, 661, 745, 764, 765, 766, 786, 792, 793, 794, 796, 798, 801, 802, 805, 806, 807, 808, 810, 812, 817, 823, 832, 838], "17157288": [609, 644], "9238795": [609, 644], "78930789": [609, 644], "59803128": [609, 644], "19127655": [609, 644], "31213903": [609, 644], "63418275": [609, 644], "84632206": [609, 644], "70548367": [609, 644], "70223427": [609, 644], "09570674": [609, 644], "63116378": [609, 644], "56109613": [609, 644], "53554028": [609, 644], "32237405": [609, 644], "43822157": [609, 644], "83906901": [609, 644], "50766778": [609, 644], "71475857": [609, 644], "48103389": [609, 644], "3676433": [609, 644], "68466955": [609, 644], "62933773": [609, 644], "77917379": [609, 644], "14264561": [609, 644], "61036086": [609, 644], "45033181e": [609, 645], "02829754e": [609, 645], "54220343e": [609, 645], "12647155e": [609, 645], "38447177e": [609, 645], "56155300e": [609, 645], "26794919": [609, 645], "7320509": [609, 645], "0012": [609, 647], "00342": [609, 647], "000565": [609, 647], "0104": [609, 647], "000981": [609, 647], "00282": [609, 647], "000766": [609, 647], "0322": [609, 647], "00237": [609, 647], "000151": [609, 647], "00101": [609, 647], "00019": [609, 647], "0214": [609, 647], "00171": [609, 647], "0107": [609, 647], "0167": [609, 647], "0472": [609, 647], "0536": [609, 647], "0177": [609, 647], "000429": [609, 647], "00762": [609, 647], "lu_factor": 609, "pivot": [609, 648], "lu": [609, 648], "frobeniu": [609, 650], "nuclear": [609, 650], "induc": [609, 650], "ranl": [609, 650], "47722558": [609, 650], "776": [609, 650], "6000004": [609, 650], "118": [609, 651], "moor": [609, 655], "penros": [609, 655], "31622776": [609, 656], "94868332": [609, 656], "1622777": [609, 656], "42718887": [609, 656], "deteremin": [609, 657], "logsabsdet": [609, 657], "although": [609, 657, 783, 785, 793, 795, 796, 809, 815, 836, 838], "subject": [609, 657], "ordin": [609, 658], "b2": [609, 658], "usvh": [609, 659], "cetera": [609, 659], "86217213": [609, 660], "31816804": [609, 660], "615": [609, 660], "ss": [609, 660], "25994301": [609, 660], "16403675": [609, 660], "61529762": [609, 660], "51231241": [609, 660], "39777088": [609, 660], "15413129": [609, 660], "1029852": [609, 660], "01383495": [609, 660], "86647356": [609, 660], "7786541": [609, 660], "55970621": [609, 660], "16857576": [609, 660], "86412698": [609, 660], "37566757": [609, 660], "88477993": [609, 660], "95925522": [609, 660], "6444726": [609, 660], "54687881": [609, 660], "16134834": [609, 660], "35037804": [609, 660], "31025076": [609, 660], "35769391": [609, 660], "transposit": [609, 661], "success": [609, 619, 663, 735, 737, 789, 797, 828], "0x": [609, 664], "Such": [609, 664, 805, 812], "progress": [609, 664, 789, 790, 822], "alexandr": [609, 664], "theophil": [609, 664], "dot_product": [609, 665], "9000001": [609, 666], "64158917": [609, 666], "skew": [609, 667], "6666193": [610, 668], "67164493e": [610, 668], "05471958e": [610, 668], "32684899e": [610, 668], "30496836e": [610, 668], "05393649": [610, 668], "49992943": [610, 668], "83330965": [610, 668], "35667494": [610, 670], "79329094": [610, 670], "512926": [610, 670], "outsid": [611, 671, 682, 798, 799, 805, 819, 843], "honor": [611, 678], "beyond": [611, 679, 801, 809, 844], "famili": [611, 682], "intxx": [611, 682], "floatxx": [611, 682], "rep": [611, 684], "fomaml_step": 612, "inner_cost_fn": [612, 687, 688, 689], "outer_cost_fn": [612, 687, 688], "inner_grad_step": [612, 687, 688, 689], "inner_learning_r": [612, 687, 688, 689], "inner_optimization_step": [612, 687, 688, 689], "inner_batch_fn": [612, 687, 688], "outer_batch_fn": [612, 687, 688], "average_across_step": [612, 687, 688], "inner_v": [612, 687, 688], "keep_inner_v": [612, 687, 688], "outer_v": [612, 687, 688], "keep_outer_v": [612, 687, 688], "return_inner_v": [612, 687, 688, 689], "num_task": [612, 687, 688, 689], "maml": [612, 687, 688], "0x7f9594992f80": [612, 687, 688, 689], "maml_step": 612, "vanilla": [612, 688, 821, 838], "_variabl": [612, 688, 689], "sub_batch": [612, 688], "40069818": [612, 688], "13723135": [612, 688], "reptile_step": 612, "cost_fn": [612, 689], "reptil": [612, 689], "batch_in": [612, 689], "4485182": [612, 689], "139": [612, 689], "9569855": [612, 689], "9880483": [612, 689], "01766968": [612, 689], "02197957": [612, 689], "02197981": [612, 689], "all_nested_indic": 613, "include_nest": [613, 690], "_index": [613, 690, 701], "_base": [613, 690, 700, 701, 808], "themselv": [613, 690, 796, 798, 799, 801, 805, 809, 821, 835, 844], "863": [613, 690, 799], "672": [613, 690], "482": [613, 690], "674": [613, 690], "341": [613, 690], "copy_nest": 613, "to_mut": [613, 691, 702], "deepli": [613, 691, 823, 838], "mutabl": [613, 691, 697, 698, 702, 707, 708, 794], "copied_nest": [613, 691], "1337": [613, 691, 702], "duplicate_array_index_chain": 613, "index_nest": [613, 805], "insert_into_nest_at_index": 613, "insert_into_nest_at_indic": 613, "onto": [613, 696, 702, 826, 827, 838], "special_squar": [613, 696], "6666666666666667": [613, 696], "special_pow": [613, 696], "linear_model": [613, 696], "map_nest_at_index": 613, "shallow": [613, 697, 698, 702, 707, 708], "_result": [613, 697, 707], "hh": [613, 697, 702], "map_nest_at_indic": 613, "ub": [613, 698], "tb": [613, 698], "multi_index_nest": 613, "nested_ani": 613, "check_nest": [613, 700, 701], "nested_argwher": 613, "stop_after_n_found": [613, 701], "nested_indic": [613, 701], "nested_map": [613, 799, 805], "_tuple_check_fn": [613, 702], "_list_check_fn": [613, 702], "_dict_check_fn": [613, 702], "wherebi": [613, 702, 788, 835], "ah": [613, 702], "bh": [613, 702], "ch": [613, 702], "dh": [613, 702, 792], "eh": [613, 702], "gh": [613, 702, 789], "ih": [613, 702], "1338": [613, 702], "nested_multi_map": 613, "index_chain": [613, 703], "nest0": [613, 703], "ivy_arrai": [613, 703, 793, 809], "unappli": [613, 703], "prune_empti": 613, "prune_nest_at_index": 613, "prune_nest_at_indic": 613, "set_nest_at_index": 613, "set_nest_at_indic": 613, "xyz": [613, 708], "pqr": [613, 708], "mini": [614, 709, 764, 767], "uniformli": [615, 711, 713], "22346112": [615, 712], "0922": [615, 712], "9213753": [615, 712], "12818667": [615, 712], "799": [615, 712], "469": [615, 712], "287": [615, 712], "0366": [615, 712], "26431865": [615, 713], "475": [615, 713], "878": [615, 713], "861": [615, 713], "929": [615, 713], "789": [615, 713], "519": [615, 713], "0435": [615, 713], "381": [615, 713], "4608004": [615, 713], "8458502": [615, 713], "67270088": [615, 713], "31128597": [615, 713], "zeroel": [616, 719], "guarante": [617, 721, 723, 793, 798, 808, 823, 829], "aggreg": [617, 721, 797], "fourth": [617, 721], "1141": [617, 721], "8101": [617, 721], "9298": [617, 721], "8460": [617, 721], "2119": [617, 721], "3519": [617, 721], "6252": [617, 721], "4033": [617, 721], "7443": [617, 721], "2577": [617, 721], "3707": [617, 721], "0545": [617, 721], "3238": [617, 721], "5944": [617, 721], "0775": [617, 721], "4327": [617, 721], "62519997": [617, 721], "40329999": [617, 721], "59439999": [617, 721], "74430001": [617, 721], "81010002": [617, 721], "84600002": [617, 721], "92979997": [617, 721], "einstein": [619, 731, 777], "117": [619, 731], "intend": [619, 737, 746, 763, 792, 804, 807, 836, 838, 842, 843], "07472222": [619, 738], "00666667": [619, 738], "08966666": [619, 738], "simplicit": [620, 739, 740], "ivy_test": [743, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 788, 789, 790, 792, 795, 797, 810], "test_ivi": [743, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 788, 789, 790, 795, 797, 810, 812], "assert_all_clos": [743, 810], "ret_np": [743, 745, 810], "ret_from_gt_np": [743, 810], "ground_truth_backend": [743, 745, 746, 755, 756, 786, 810], "mark": [743, 788, 790, 792, 812, 817], "assert_same_typ": 743, "ret_from_target": 743, "ret_from_gt": 743, "backend_to_test": [743, 745, 786, 810], "gt_backend": 743, "with_backend": [743, 773], "assert_same_type_and_shap": 743, "this_key_chain": 743, "check_unsupported_devic": 743, "input_devic": 743, "all_as_kwargs_np": [743, 745], "presenc": [743, 796, 808], "check_unsupported_device_and_dtyp": 743, "input_dtyp": [743, 745, 755, 786, 810, 812], "check_unsupported_dtyp": 743, "test_unsupported_funct": 743, "value_test": 743, "ret_np_flat": 743, "ret_np_from_gt_flat": 743, "specific_tolerance_dict": 743, "ret_from_np_gt_flat": 743, "function_test": 745, "args_to_contain": 745, "array_arg": [745, 805], "args_to_frontend": 745, "frontend_array_fn": 745, "arrays_to_frontend": 745, "as_list": 745, "convtru": 745, "nativeclass": 745, "counter": [745, 821], "create_args_kwarg": 745, "args_np": 745, "arg_np_val": 745, "args_idx": 745, "kwargs_np": 745, "kwarg_np_val": 745, "kwargs_idx": 745, "test_flag": [745, 786, 810, 812], "on_devic": [745, 755, 786, 810], "flatten_and_to_np": 745, "flatten_frontend": 745, "flatten_frontend_fw_to_np": 745, "frontend_ret": [745, 810], "isscalar_func": 745, "is_native_array_func": 745, "to_numpy_func": 745, "flatten_frontend_to_np": 745, "get_frontend_ret": 745, "frontend_fn": 745, "frontend_array_funct": 745, "precision_mod": [745, 755, 756], "test_trac": [745, 755, 756, 786, 792], "get_ret_and_flattened_np_arrai": 745, "gradient_incompatible_funct": 745, "gradient_test": [745, 812], "rtol_": [745, 786], "atol_": [745, 786, 810], "tolerance_dict": 745, "gradient_unsupported_dtyp": 745, "kwargs_to_args_n_kwarg": 745, "num_positional_arg": [745, 755, 756, 786, 810, 812], "port": [745, 829], "test_frontend_funct": [745, 810], "fn_tree": [745, 746, 756, 786, 809, 810, 812], "gt_fn_tree": [745, 756], "test_valu": [745, 810, 812], "frontend_function_flag": [745, 755], "functiontestflag": [745, 755, 786], "with_out": [745, 755, 786, 810, 812], "instance_method": [745, 755, 786, 812], "as_vari": [745, 755, 786, 810, 812], "namespac": [745, 788, 798, 806, 809, 810, 813, 817, 822], "test_frontend_method": [745, 810], "init_input_dtyp": [745, 810], "method_input_dtyp": [745, 810], "init_flag": [745, 810, 812], "method_flag": [745, 755, 810, 812], "init_all_as_kwargs_np": [745, 810], "method_all_as_kwargs_np": [745, 810], "frontend_method_data": [745, 810], "init_as_variable_flag": [745, 756], "dictat": [745, 793, 800, 804, 808], "init_num_positional_arg": [745, 756], "init_native_array_flag": 745, "with_v": 745, "ret_gt": 745, "test_funct": [745, 786, 789, 790, 797, 810, 812], "fn_name": [745, 746, 756, 786, 794, 810, 812], "return_flat_np_arrai": 745, "as_variable_flag": [745, 756, 812], "native_array_flag": [745, 756, 812], "container_flag": [745, 755, 756, 812], "test_function_backend_comput": 745, "test_function_ground_truth_comput": 745, "arg_np_arrai": 745, "arrays_args_indic": 745, "arrays_kwargs_indic": 745, "kwarg_np_arrai": 745, "test_gradient_backend_comput": 745, "test_gradient_ground_truth_comput": 745, "test_method": 745, "method_nam": [745, 754, 756, 810], "init_with_v": 745, "method_with_v": 745, "test_gradi": [745, 755, 756, 786, 812], "method_as_variable_flag": [745, 756], "method_num_positional_arg": [745, 756], "method_native_array_flag": 745, "method_container_flag": [745, 756], "test_method_backend_comput": 745, "test_method_ground_truth_comput": 745, "org_con_data": 745, "args_np_method": 745, "met_arg_np_v": 745, "met_args_idx": 745, "kwargs_np_method": 745, "met_kwarg_np_v": 745, "met_kwargs_idx": 745, "v_np": 745, "traced_if_requir": 745, "wrap_frontend_function_arg": 745, "holder": 746, "current_frontend_config": 746, "0x7f9589bbd970": 746, "interruptedtest": 746, "test_interrup": 746, "baseexcept": 746, "tri": [746, 798], "testdata": 746, "supported_device_dtyp": 746, "is_method": 746, "setup_api_test": 746, "test_data": 746, "setup_frontend_test": 746, "teardown_api_test": 746, "teardown_frontend_test": 746, "hypothesis_help": [748, 749, 750, 751], "array_help": 748, "array_and_broadcastable_shap": 748, "searchstrategi": [748, 749, 750, 751, 755, 756, 812], "array_bool": [748, 812], "min_valu": [748, 749, 750, 751, 786, 810, 812], "max_valu": [748, 749, 750, 751, 810, 812], "ex": [748, 749, 750, 751, 756, 797, 832], "strategi": [748, 749, 750, 751, 755, 756, 788, 810], "array_helpers_dtype_info_help": 748, "kind_dtyp": [748, 750], "array_indices_axi": 748, "array_dtyp": [748, 749, 812], "indices_dtyp": 748, "get_dtyp": [748, 749, 786, 810, 812], "disable_random_axi": 748, "axis_zero": 748, "allow_inf": [748, 751, 810, 812], "min_num_dim": [748, 750, 810, 812], "max_num_dim": [748, 750, 810, 812], "min_dim_s": [748, 750, 810, 812], "max_dim_s": [748, 750, 810], "first_dimension_onli": 748, "indices_same_dim": 748, "valid_bound": 748, "hypothesi": [748, 750, 756, 788, 790, 792, 797, 806], "65536": 748, "44758124e": [748, 812], "array_indices_put_along_axi": 748, "values_dtyp": 748, "array_valu": [748, 812], "abs_smallest_v": [748, 750, 751], "allow_nan": [748, 751, 812], "allow_subnorm": [748, 751, 812], "exclude_min": [748, 751, 812], "exclude_max": [748, 751], "large_abs_safety_factor": [748, 750, 751, 786, 810, 812], "small_abs_safety_factor": [748, 750, 751, 786, 810], "safety_factor_scal": [748, 750, 751, 810, 812], "subnorm": [748, 751], "safeti": [748, 750, 751, 838], "0002": [748, 751], "get_shap": [748, 750, 810, 812], "1806": 748, "36912": 748, "6955": 748, "59576": 748, "1025": 748, "arrays_and_ax": 748, "available_dtyp": [748, 749, 786, 810, 812], "allow_non": [748, 750, 810, 812], "return_dtyp": 748, "force_int_axi": 748, "26e": 748, "10e": 748, "24322108": 748, "26446279e": 748, "96046448e": 748, "008": 748, "17549435e": 748, "038": 748, "06541027e": 748, "13725760e": 748, "07143888": 748, "arrays_for_pool": 748, "min_dim": 748, "max_dim": 748, "min_sid": 748, "max_sid": 748, "explicit_or_str_pad": 748, "only_explicit_pad": 748, "return_dil": 748, "mixed_fn_compo": [748, 749, 750, 751, 812], "return_data_format": 748, "cond_data_gen_help": 748, "create_concatenable_arrays_dtyp": 748, "min_num_arrai": 748, "max_num_arrai": 748, "concat_dim": 748, "common_shap": [748, 812], "stackabl": 748, "given_common_shap": 748, "create_nested_input": 748, "leaf_valu": 748, "dtype_and_valu": [748, 786, 810, 812], "num_arrai": [748, 749, 810, 812], "shared_dtyp": [748, 749, 810], "ret_shap": 748, "array_api_dtyp": [748, 749], "shape_kei": 748, "37915": 748, "6322": 748, "26765": 748, "12413": 748, "26986": 748, "34665": 748, "000e": 748, "711e": 748, "100e": 748, "955e": [748, 812], "40817": 748, "56193": 748, "29200": 748, "5851": 748, "9746": 748, "9604645e": 748, "103": 748, "41795": 748, "1170789994": 748, "44251": 748, "44209": 748, "433075925": 748, "24791": 748, "24691": 748, "24892": 748, "16711": 748, "972": 748, "15357": 748, "72057594037927936": 748, "dtype_array_queri": 748, "allow_mask": 748, "allow_neg_step": 748, "dtype_array_query_v": 748, "dtype_values_axi": [748, 812], "min_axi": 748, "max_axi": 748, "valid_axi": 748, "allow_neg_ax": 748, "min_axes_s": 748, "max_axes_s": 748, "force_tuple_axi": 748, "29788": 748, "62222885e": 748, "68281172e": 748, "257j": 748, "40129846e": 748, "90000000e": 748, "63426649e": 748, "91931887e": 748, "29488e": 748, "14361019e": 748, "12445": 748, "einsum_help": 748, "get_first_solve_batch_matrix": 748, "choose_adjoint": 748, "get_second_solve_batch_matrix": 748, "get_first_solve_matrix": 748, "allow_simplifi": 748, "choose_sid": 748, "xa": 748, "get_second_solve_matrix": 748, "list_of_s": 748, "sampled_from": [748, 810, 812], "min_siz": [748, 750, 756, 812], "max_siz": [748, 750, 756, 812], "size_bound": [748, 812], "999999999999999": 748, "9394938006792373": 748, "mutually_broadcastable_shap": 748, "num_shap": 748, "base_shap": 748, "dtype_help": 749, "univers": [749, 809, 827], "cast_filt": 749, "cast_filter_help": 749, "current_backend": [749, 773, 788, 794, 802, 805, 810, 813, 817], "get_castable_dtyp": 749, "castabl": 749, "prune_funct": 749, "intersect": [749, 797, 812], "signed_integ": 749, "real_and_complex": 749, "float_and_complex": 749, "general_help": 750, "apply_safety_factor": 750, "embedding_help": 750, "general_helpers_dtype_info_help": 750, "get_axi": [750, 812], "allow_neg": 750, "sort_valu": 750, "force_tupl": 750, "force_int": 750, "assertionerror": [750, 786, 792, 802, 810, 812], "get_bound": [750, 812], "get_mean_std": 750, "matrix_is_st": 750, "cond_limit": 750, "instabl": [750, 786, 798], "computation": [750, 789], "prone": [750, 798], "thumb": 750, "perfectli": [750, 829], "gradual": 750, "strong": [750, 823, 828, 838], "collinear": 750, "reshape_shap": [750, 812], "x_and_filt": 750, "number_help": 751, "arbitrarili": [751, 820], "safety_factor": 751, "backend_proc": 752, "input_queu": 752, "output_queu": 752, "frontend_proc": 752, "pipeline_help": 753, "backendhandl": 753, "update_backend": [753, 810], "backendhandlermod": 753, "enum": 753, "setbackend": 753, "withbackend": 753, "withbackendcontext": 753, "get_frontend_config": 753, "frontendmethoddata": 754, "ivy_init_modul": 754, "framework_init_modul": 754, "init_nam": 754, "test_parameter_flag": 755, "dynamicflag": [755, 756], "frontendfunctiontestflag": 755, "generate_frontend_arrai": [755, 756], "testflag": 755, "apply_flag": 755, "args_to_iter": 755, "frontendinittestflag": 755, "frontendmethodtestflag": 755, "initmethodtestflag": 755, "methodtestflag": 755, "build_flag": 755, "frontend_init_flag": 755, "frontend_method_flag": 755, "function_flag": 755, "init_method_flag": 755, "testing_help": 756, "handle_frontend_method": [756, 810, 812], "class_tre": [756, 810], "init_tre": [756, 810], "init_native_arrai": 756, "_as_varaible_strategi": 756, "method_native_arrai": 756, "test_inplac": [756, 812], "_given_kwarg": 756, "test_compil": 756, "handle_frontend_test": [756, 810, 812], "alias": [756, 788, 809, 810], "number_positional_arg": [756, 810], "test_with_out": [756, 810, 812], "handle_method": [756, 812], "method_tre": [756, 810, 812], "_gradient_strategi": 756, "handle_test": [756, 786, 812], "test_instance_method": [756, 812], "num_positional_args_help": 756, "num_positional_args_method": 756, "geglu": 760, "leakyrelu": 760, "logsoftmax": 760, "from_flax_modul": 761, "native_modul": 761, "params_fx": 761, "rng_seed": 761, "constructor_arg": 761, "constructor_kwarg": 761, "instance_arg": 761, "instance_kwarg": 761, "flax": [761, 822, 823, 829, 838], "from_haiku_modul": 761, "params_hk": 761, "from_paddle_modul": 761, "from_torch_modul": 761, "dedic": [761, 804, 815, 819, 821], "native_module_class": 761, "modulehelp": [762, 766], "check_submod_ret": 762, "expected_submod_ret": [762, 766], "get_mod_kei": 762, "top_mod": 762, "mod_depth": 762, "mod_height": 762, "mod_with_top_mod_key_chain": 762, "flatten_key_chain": 762, "iimedi": 762, "parent": [762, 788, 797, 819], "show_mod_in_top_mod": 762, "upper_depth": 762, "lower_depth": 762, "coverag": [762, 798, 812], "prompt": [762, 788, 790], "show_structur": 762, "this_repr": 762, "show_v_in_top_v": 762, "perspect": 762, "top_v": 762, "sub_mod": 762, "show_v": 762, "comopos": 762, "track_submod_call_ord": [762, 766], "track_submod_ret": [762, 766], "v_with_top_v_key_chain": 762, "create_vari": [763, 821], "var_shap": [763, 821], "fan_out": [763, 821], "fan_in": [763, 821], "rectangular": 763, "firstlayersiren": 763, "siren": 763, "glorotuniform": [763, 764, 821], "glorot": 763, "xavier": 763, "neuron": 763, "w_1x_1": 763, "w_2x_2": 763, "w_nx_n": 763, "w_i": 763, "vanish": 763, "explod": [763, 826, 827], "kaimingnorm": 763, "fan_mod": [763, 821], "kaim": 763, "he": 763, "negative_slop": 763, "fan": 763, "propog": 763, "fan_sum": [763, 821], "Ones": 763, "randomnorm": 763, "stddev": 763, "w0": 763, "gain": [763, 790, 792, 816, 821, 838], "wlim": 763, "predefin": 763, "fan_avg": 763, "adaptiveavgpool1d": 764, "extra_repr": [764, 766], "avgpool1d": 764, "implicit": [764, 796, 801, 809, 812, 817, 838], "avgpool2d": 764, "avgpool3d": 764, "filter_s": 764, "weight_initi": [764, 821], "bias_initi": [764, 821], "0x7f95945edc00": 764, "0x7f95945edbd0": 764, "conv1dtranspos": 764, "0x7f95945edb40": 764, "0x7f95945edb10": 764, "filter_shap": 764, "0x7f95945eda80": 764, "0x7f95945eda50": 764, "0x7f95945ed9c0": 764, "0x7f95945ed990": 764, "0x7f95945ed840": 764, "0x7f95945ed810": 764, "conv3dtranspos": 764, "0x7f95945ed780": 764, "0x7f95945ed750": 764, "depthwiseconv2d": 764, "num_channel": 764, "0x7f95945ed900": 764, "0x7f95945ed8d0": 764, "bernoul": 764, "num_embed": 764, "embedding_dim": 764, "padding_idx": 764, "lookup": 764, "num_embeddingss": 764, "whenev": [764, 790, 794, 797, 798, 802, 808, 811, 812, 814, 820], "renorm": 764, "insensit": 764, "num_lay": 764, "return_sequ": 764, "return_st": 764, "0x7f95945ed6c0": 764, "get_initial_st": 764, "0x7f95945edcf0": 764, "0x7f95945edc90": 764, "maxpool1d": 764, "maxpool3d": 764, "multiheadattent": 764, "embed_dim": 764, "head_dim": 764, "dropout_r": 764, "use_proj_bia": 764, "attention_ax": 764, "build_mod": [764, 765, 766], "on_init": [764, 766], "parallel": [764, 795, 838, 842, 843], "binarycrossentropyloss": 765, "store_var": [765, 766], "arg_stateful_idx": [765, 766, 831], "kwarg_stateful_idx": [765, 766, 831], "fallback_to_non_trac": [765, 766, 768], "with_partial_v": [765, 766], "logpoissonloss": 765, "modulemeta": 766, "submod_depth": 766, "submods_to_track": 766, "temporarili": [766, 786, 792], "from_cal": 766, "built_": 766, "register_buff": 766, "var_nam": 766, "weights_path": 766, "randomness_factor": 766, "with_edge_label": 766, "with_arg_label": 766, "with_output_label": 766, "output_connected_onli": 766, "highlight_subgraph": 766, "trace_graph": [766, 783, 817, 822, 830], "trace_kwarg": 766, "_unified_ivy_graph": 766, "_call": 766, "num_featur": 767, "affin": 767, "track_running_stat": 767, "trail": 767, "layernorm": 767, "normalized_shap": 767, "elementwise_affin": 767, "set_stat": [768, 821], "adamw": 768, "weight_decai": 768, "init_on_first_step": 768, "ignore_miss": 768, "privat": [768, 809, 812], "_step": [768, 821], "stochast": [768, 838], "sub_modul": 769, "check_al": 770, "messag": [770, 778, 782, 789, 790, 797, 800, 802, 803, 809, 817, 819, 828], "check_all_or_any_fn": 770, "check_ani": 770, "check_dev_correct_format": 770, "check_dimens": 770, "check_elem_in_list": [770, 805, 808, 809], "elem": 770, "check_equ": [770, 809], "check_exist": 770, "check_fals": 770, "check_gather_input_valid": 770, "check_gather_nd_input_valid": 770, "check_great": 770, "allow_equ": [770, 802], "check_inplace_sizes_valid": [770, 808], "check_isinst": 770, "allowed_typ": 770, "check_kernel_padding_s": 770, "padding_s": 770, "check_less": [770, 802], "check_one_way_broadcast": 770, "check_same_dtyp": 770, "check_shapes_broadcast": 770, "check_tru": 770, "check_unsorted_segment_min_valid_param": 770, "ast_help": 772, "importtransform": 772, "nodetransform": 772, "impersonate_import": 772, "tree": [772, 798], "local_ivy_id": 772, "visit_import": 772, "visit_importfrom": 772, "ivyload": 772, "loader": [772, 820, 823], "exec_modul": 772, "ivypathfind": 772, "metapathfind": 772, "find_spec": 772, "fullnam": 772, "contextmanag": 773, "choose_random_backend": 773, "convert_from_numpy_to_target_backend": 773, "variable_id": 773, "numpy_obj": 773, "convert_from_source_backend_to_numpi": 773, "global_backend": 773, "prevent_access_loc": 773, "previous_backend": [773, 794], "unset": [773, 794, 817], "Or": [773, 783, 785, 808, 820], "set_backend_to_specific_vers": 773, "set_jax_backend": 773, "set_mxnet_backend": 773, "mxnet": [773, 788, 789, 828, 845], "mx": 773, "set_numpy_backend": 773, "set_paddle_backend": 773, "set_tensorflow_backend": 773, "set_torch_backend": 773, "unset_backend": [773, 794], "sub_backend_handl": 774, "clear_sub_backend": 774, "find_available_sub_backend": 774, "sub_backends_loc": 774, "fn_name_from_version_specific_fn_nam": 774, "fn_name_from_version_specific_fn_name_sub_backend": 774, "sub_backend_vers": 774, "backend_vers": [774, 786, 798], "set_sub_backend": 774, "sub_backend_str": 774, "set_sub_backend_to_specific_vers": 774, "sub_backend": 774, "unset_sub_backend": 774, "check_for_binari": 775, "cleanup_and_fetch_binari": [775, 789], "clean": [775, 790, 813, 817, 818, 820], "dynamic_import": 776, "import_modul": [776, 817], "einsum_pars": 777, "convert_interleaved_input": 777, "interleav": 777, "convert_subscript": 777, "old_sub": 777, "symbol_map": 777, "subscript": 777, "oe": 777, "ellipsi": 777, "find_output_shap": 777, "find_output_str": 777, "canon": 777, "gen_unused_symbol": 777, "abd": 777, "get_symbol": 777, "letter": 777, "resort": 777, "unicod": 777, "charact": [777, 809, 828], "chr": 777, "surrog": 777, "\u0155": 777, "20000": 777, "\u4eac": 777, "has_valid_einsum_chars_onli": 777, "einsum_str": 777, "abaz": 777, "\u00f6ver": 777, "is_valid_einsum_char": 777, "\u01f5": 777, "legalise_einsum_expr": 777, "reproduct": 777, "pars": [777, 795, 800, 823], "intak": 777, "contract_path": 777, "parse_einsum_input": 777, "einsum_eqn": 777, "legalis": 777, "simplifi": [777, 802, 809, 817, 818, 821, 828, 831, 834, 836, 837, 838, 841, 844, 845], "legalise_einsum_eqn": 777, "za": 777, "xza": 777, "xz": 777, "possibly_convert_to_numpi": 777, "myshap": 777, "__main__": 777, "0x10f850710": 777, "inplaceupdateexcept": 778, "include_backend": [778, 802], "ivyattributeerror": [778, 802], "attributeerror": [778, 802, 819], "ivybroadcastshapeerror": [778, 802], "ivydeviceerror": 778, "ivydtypepromotionerror": [778, 802], "ivyindexerror": [778, 802], "ivyinvalidbackendexcept": 778, "ivynotimplementedexcept": [778, 802], "notimplementederror": 778, "ivyvalueerror": [778, 802], "handle_except": [778, 804, 806], "add_array_spec": 779, "fn_array_spec": 779, "set_logging_mod": 780, "debug": [780, 789, 790, 796, 797, 807, 812, 815, 820, 838], "unset_logging_mod": 780, "print_stat": 781, "viz": 781, "snakeviz": 781, "bonu": 781, "cprofil": 781, "cprint": [782, 817], "grant": [783, 824], "pilot": [783, 787, 824], "tracer": [783, 809, 816, 818, 823, 825, 832, 833, 834], "waitlist": [783, 824], "autotun": [783, 842], "grow": [783, 838], "peopl": [783, 787, 789, 790, 791, 838, 840], "wip": [783, 831], "docker": [783, 786, 787], "pull": [783, 784, 788, 789, 792, 800, 803, 813, 815, 823, 824, 829], "sweat_smil": 783, "setting_up": 783, "awai": [783, 836, 838], "jax_fn": 783, "jax_x": 783, "torch_x": 783, "torch_fn": 783, "motiv": [783, 819, 828], "contextu": 783, "problem": [783, 790, 792, 793, 794, 799, 809, 819, 828, 834, 840, 844], "explos": [783, 826, 828], "adher": [783, 792, 798, 801, 804, 815, 817, 822, 827, 828, 834, 835, 844], "focus": [783, 798, 813, 836, 837, 838, 844, 845], "orient": 783, "contributor": [783, 784, 786, 788, 789, 790, 809, 816, 838], "shorter": [783, 819], "ensp": 783, "customiz": [783, 795], "deepmind_perceiver_io": 783, "sm_framework": 783, "segmentation_model": 783, "sm": 783, "torch_sm": 783, "metric": [783, 823], "iou_scor": 783, "rax": 783, "torch_rax": 783, "poly1_softmax_loss": 783, "madmom": 783, "madmon": 783, "torch_madmom": 783, "freq": 783, "audio": 783, "hz2midi": 783, "torch_loss": 783, "maxpooling1d": 783, "pool_siz": 783, "tf_kornia": 783, "tf_rax": 783, "tf_madmom": 783, "tf_loss": 783, "_forward_classifi": [783, 832], "forward_classifi": [783, 832], "hk_eff_encod": 783, "dummy_x": 783, "jax_sm": 783, "jax_madmom": 783, "jax_loss": 783, "np_kornia": 783, "np_sm": 783, "np_rax": 783, "np_loss": 783, "yourself": [783, 788, 790, 803, 812, 815], "favourit": [783, 789], "pipelin": [783, 785, 791, 792, 793, 810, 813, 822, 825, 827, 832, 838, 839, 844], "hyperparam": 783, "idea": [783, 788, 811, 813, 818, 829, 837], "instantli": [783, 832], "essenti": [783, 788, 794, 796, 799, 800, 805, 808, 809, 810, 827, 828, 844], "mainli": [783, 788, 791, 807, 809, 812, 818, 820, 825, 838], "handler": [783, 816, 818, 822, 825], "scene": [783, 791, 816, 818, 826, 827, 838], "facilit": 783, "mse_loss": 783, "jax_ms": 783, "tf_mse": 783, "np_mse": 783, "torch_ms": 783, "someth": [783, 786, 790, 794, 803, 813, 820, 821, 823, 824, 844], "favorit": 783, "flexibl": [783, 796, 798, 804, 807, 813, 815, 838], "everyon": [783, 784, 788, 789, 790, 823, 829], "plan": [783, 824], "interoper": [783, 828, 835, 836, 838, 841], "believ": [783, 790, 828], "feedback": [783, 797], "appreci": 783, "amaz": 783, "journei": [783, 784], "ambiti": 783, "season": 783, "perfect": 783, "ask": [783, 788, 789, 800, 817, 819, 823, 824, 829], "fellow": 783, "twitter": 783, "sneak": 783, "peek": 783, "stai": [783, 797], "proper": [783, 788, 809, 832], "credit": 783, "accompani": 783, "lenton2021ivi": 783, "inter": 783, "author": [783, 788, 790, 836, 840], "lenton": 783, "daniel": 783, "pardo": 783, "fabio": 783, "falck": 783, "fabian": 783, "jame": 783, "stephen": 783, "clark": 783, "ronald": 783, "journal": 783, "arxiv": 783, "preprint": 783, "2102": 783, "02886": 783, "year": [783, 792, 823, 827, 829, 838], "strongli": [784, 789, 809, 844, 845], "engag": [784, 790, 828], "skill": [784, 840], "veteran": 784, "effort": [784, 788, 823, 828, 834, 838, 844], "board": [784, 795], "stage": [784, 790, 791, 792, 795, 812, 828, 838], "excit": [784, 791, 828], "Be": [785, 795], "awar": [785, 795, 802, 803], "linux": [785, 789, 790, 795, 841, 843], "regularli": [785, 795, 797], "internet": [785, 795], "codespac": [785, 795], "make_doc": 785, "sh": [785, 789, 790, 792, 797], "host": [785, 797, 823, 828, 843], "pwd": 785, "ssh": [785, 797], "make_docs_without_dock": [785, 795], "assist": 786, "navig": [786, 789, 790, 791], "runtimeerror": 786, "logaddexp2_cpu": 786, "falsifi": [786, 792, 812], "test_logaddexp2": 786, "backend_fw": [786, 810], "dtype_and_x": [786, 810, 812], "reproduce_failur": [786, 792, 806, 812], "axicy2bkaamobaar2waaaacvaai": 786, "decoartor": 786, "with_unsupported_dtyp": [786, 798, 809], "25830078125": 786, "258544921875": 786, "test_acosh": 786, "axicy2baabyqwqgiaabdaai": 786, "quit": [786, 790, 793, 800, 801, 805, 806, 812, 815, 838, 844], "41421356": 786, "41421356e": 786, "34078079e": 786, "154": 786, "test_ab": [786, 789, 812], "000j": 786, "154j": 786, "axicy2zkyaiibibgziaaxqhexsaab7juqaaamteazq": 786, "experiment": [786, 790, 798, 809, 813, 817, 838], "pycharm": [786, 810, 812], "few": [787, 788, 790, 796, 798, 799, 804, 805, 807, 808, 810, 812, 815, 817, 818, 819, 820, 821, 829, 838, 840], "climb": 787, "steep": 787, "curv": 787, "realpython": 787, "pyn": 787, "regard": [787, 796, 809, 810, 815, 828], "exchang": [787, 828, 834, 836], "stuck": [787, 788], "spell": 787, "sound": [787, 797, 816], "frequent": [788, 790, 794, 838], "outlin": [788, 789, 790, 791, 796, 798, 801, 805, 808, 809, 812], "broad": [788, 840], "individu": [788, 790, 792, 794, 798, 805, 809, 838, 841, 844, 845], "clearli": [788, 790, 800, 810, 812, 828, 842], "aforement": 788, "arraywithelementwis": [788, 793, 819], "containerwithmanipul": 788, "thorough": [788, 801, 804, 812], "comment": [788, 789, 790, 792, 798, 803, 809, 811, 815], "add_reformatting_checklist_": 788, "category_nam": [788, 798, 799, 801, 804, 805], "pr": [788, 790, 792, 803, 809, 810, 812], "autom": [788, 797, 803, 812, 825, 840], "bot": [788, 803], "markdown": [788, 795], "patient": [788, 789], "statu": [788, 797, 803, 829], "checkbox": [788, 789], "proce": [788, 789], "elabor": 788, "struggl": 788, "assigne": 788, "status": 788, "refrain": 788, "scipi": [788, 828, 840, 845], "mindspor": 788, "simpler": [788, 790, 803, 831, 839, 845], "member": [788, 790, 809, 824, 828], "merg": [788, 790, 792, 797, 809, 838], "composition": 788, "feasibl": [788, 797, 828, 831], "pend": 788, "helpfulli": [788, 815, 836], "problemat": [788, 789], "unimpl": 788, "issue_link": 788, "alias_nam": 788, "notic": [788, 793, 797, 803, 812, 815, 831], "push": [788, 790, 792, 810, 812, 844], "liner": 788, "meanwhil": [788, 797], "reselect": 788, "placement": 788, "categoris": [788, 792, 809], "faithfulli": 788, "creation_routin": [788, 810], "indexing_routin": 788, "ma": 788, "manipulation_routin": 788, "mathematical_funct": [788, 809], "sorting_searching_count": 788, "ufunc": [788, 809], "matrix_and_vector_product": 788, "matrix_eigenvalu": 788, "norms_and_other_numb": 788, "solving_equations_and_inverting_matric": 788, "seem": [788, 789, 815, 821, 822, 823, 838], "gleam": 788, "uncom": 788, "test_numpy_inn": 788, "test_frontend": [788, 797, 810], "unsur": [788, 812], "central": [788, 803, 815, 828, 844], "analyz": [788, 825], "relevant_submodul": 788, "roadmap": [788, 797], "soon": [788, 790, 797, 798, 823, 831], "deem": [788, 809], "subtask": 788, "clearer": [788, 802, 810, 820], "backend_nam": [788, 794, 798, 799, 801, 804, 805, 806], "sometim": [788, 789, 790, 792, 798, 805, 809, 812, 815], "rare": [788, 799, 823, 843], "button": [788, 789, 790], "centr": 788, "predetermin": 788, "superset": [788, 791, 805, 808, 823], "reserv": 788, "submit": [788, 803], "happi": [789, 823, 829], "your_usernam": 789, "your_fold": 789, "enter": [789, 790, 793, 798, 799, 804, 806], "sync": [789, 792], "remot": [789, 792, 803], "nutshel": [789, 804], "hook": [789, 803, 811], "lint": [789, 791], "succe": [789, 831], "properli": [789, 791, 802, 803, 809, 812], "whatev": [789, 796, 823], "elig": 789, "student": 789, "licens": [789, 841], "remind": 789, "expir": 789, "won": [789, 790, 796, 798, 822, 824, 828, 829, 831, 832, 833], "profession": 789, "trial": 789, "jetbrain": 789, "month": [789, 827], "bui": [789, 844], "paid": 789, "rapid": [789, 827, 828, 838], "pace": 789, "person": [789, 790], "abil": [789, 815, 818, 823, 838], "perhap": [789, 819, 820, 821, 823, 844], "conda": [789, 828, 840], "ivy_dev": [789, 790], "icon": [789, 790], "panel": 789, "vscode": 789, "palett": 789, "ctrl": [789, 790], "mac": [789, 790], "intel": [789, 828, 836, 843], "m1": 789, "optional_apple_silicon_1": 789, "optional_apple_silicon_2": 789, "array_api_test": [789, 790, 792], "test_array_api": [789, 790, 792, 812], "suit": [789, 791, 792, 797, 811, 812, 820, 828, 838, 844], "builtin": [789, 819, 821], "cmd": 789, "bat": [789, 790], "virtualenv": 789, "tick": [789, 790, 797], "nz2": 789, "openssl": 789, "libssl1": 789, "1_1": 789, "1f": 789, "1ubuntu2": 789, "19_amd64": 789, "deb": 789, "dpkg": 789, "mitig": [789, 844], "desktop": 789, "powershel": 789, "admin": 789, "deploy": [789, 832, 837, 840, 841, 844, 845], "menu": 789, "introspect": 789, "dialog": 789, "persist": 789, "earlier": [789, 790, 798, 813], "virtualis": 789, "bio": [789, 828], "dropdown": [789, 797], "dockerfil": 789, "ca": 789, "certif": 789, "gnupg": 789, "lsb": 789, "keyr": 789, "fssl": 789, "gpg": 789, "dearmor": 789, "echo": [789, 797, 824], "arch": 789, "lsb_releas": 789, "null": 789, "ce": 789, "cli": 789, "containerd": 789, "plugin": 789, "systemctl": 789, "permiss": [789, 797], "softwar": [789, 790, 827, 828, 836, 841, 842, 843], "press": [789, 790, 820], "4a": 789, "socket": 789, "rwx": 789, "sock": 789, "pid": 789, "editor": 789, "pytest": [789, 790, 792, 797, 806, 812], "keyboard": 789, "screenshot": 789, "pop": [789, 828], "test_elementwis": 789, "bar": 789, "shell": [789, 790], "run_tests_cli": [789, 792], "run_ivy_core_test": 789, "run_ivy_nn_test": 789, "run_ivy_stateful_test": 789, "run_test": [789, 797], "test_depend": 789, "test_ivy_cor": 789, "test_ivy_nn": 789, "test_ivy_st": 789, "unix": 789, "test_": [789, 810], "test_cor": [789, 790, 810], "offici": [789, 798, 817], "wish": [789, 809], "ivy_nn": 789, "ivy_st": 789, "header": [789, 790, 811], "arrow": 789, "test_stat": 789, "test_submodule_nam": 789, "test_function_nam": 789, "debugg": 789, "studio": [789, 812], "especi": [789, 794, 803, 827, 838], "afterward": [789, 820], "background": [789, 795, 838, 840], "overlap": [789, 797, 813, 815, 839], "test_file_path": 789, "test_fn_nam": 789, "engin": [789, 838, 840, 841], "devcontain": 789, "comma": 789, "postcreatecommand": 789, "post_create_command": 789, "poststartcommand": 789, "safe": [789, 809], "containerworkspacefold": 789, "reopen": 789, "test_fle_path": 789, "slash": 789, "comfort": [789, 802], "isol": [789, 790, 839, 844], "container": 789, "intens": 789, "headach": 789, "arm": [789, 790], "vm": [789, 797], "azur": 789, "cloud": [789, 797, 840], "longer": [789, 798, 808, 812, 838], "theme": [789, 795], "ipad": 789, "browser": [789, 795], "quota": 789, "requisit": 789, "pane": [789, 790, 797], "dockerfilegpu": 789, "ivv": 789, "multiv": 789, "multivers": [789, 813], "dockerfilemultivers": 789, "dockerhub": 789, "upto": [789, 790], "minut": [789, 797], "launch": 789, "quickli": [789, 790, 797, 820, 821, 827, 829, 838, 845], "kindli": [789, 811], "guidelin": 789, "colour": 789, "chanc": 789, "troubleshoot": 789, "ever": 789, "flask": 789, "toolbar": [789, 790], "_array_modul": [789, 792], "refresh": 789, "workspac": 789, "pytestarg": 789, "unittesten": 789, "pytesten": 789, "autotestdiscoveronsaveen": 789, "conftest": 789, "serv": [789, 790, 793, 796, 804, 805, 809, 810, 812, 815, 816, 825, 836], "aren": [789, 798], "record": [789, 823, 839], "available_config": 789, "cp310": 789, "x86": [789, 843], "newer": [789, 812], "_compil": 789, "meantim": 789, "suffici": [789, 800, 809, 812], "bear": [789, 793, 796, 798, 809], "tendenc": 790, "land": 790, "unrel": [790, 828], "fly": [790, 838], "hard": [790, 819, 838], "internship": 790, "suspect": 790, "iii": 790, "issue_numb": 790, "12345": 790, "rememb": 790, "respond": 790, "dai": [790, 803], "freed": 790, "situat": [790, 797, 822], "unabl": [790, 815], "obvious": [790, 797], "qualiti": 790, "hypothet": 790, "frustrat": 790, "delai": [790, 831], "busi": 790, "inact": 790, "unfairli": 790, "investig": 790, "regist": [790, 831], "name_of_your_branch": 790, "date": [790, 792], "complic": [790, 810, 817], "merge_with_upstream": 790, "abort": 790, "tediou": [790, 800, 815], "stash": [790, 803], "reinstat": 790, "uncommit": 790, "unstag": [790, 803], "untrack": 790, "atlassian": 790, "wrote": 790, "piec": [790, 793, 805, 806, 817, 831, 834, 836], "blame": 790, "eg": 790, "week": [790, 829], "grep": 790, "commit_id": 790, "handi": 790, "histori": 790, "toggl": 790, "highlight": [790, 797, 800, 809, 811], "approv": 790, "someon": [790, 823], "hash": [790, 820], "cancel": 790, "speedup": 790, "unavail": 790, "tickbox": 790, "substanti": [790, 793, 798, 812, 828, 838], "span": [790, 836, 844], "intent": [790, 808], "discourag": 790, "adopt": [790, 793, 804, 815, 828, 837, 838, 843], "philosophi": 790, "valuabl": 790, "infrequ": 790, "earli": [790, 838], "wast": [790, 797], "spot": [790, 800, 805], "mistak": 790, "propos": [790, 809, 815, 838], "mountain": 790, "advoc": [790, 823], "session": [790, 838], "beauti": 790, "particularli": [790, 820, 823, 831, 836], "care": [790, 799, 809, 815, 822, 828], "concern": [790, 791, 796, 798, 800, 808, 815, 816, 844], "undo": 790, "stress": 790, "nifti": 790, "reassur": 790, "local_path_to_ivi": 790, "subfold": [790, 810, 812, 813], "dep": 790, "fresh": 790, "arsen": 790, "exec": 790, "ivy_contain": 790, "test_imag": 790, "test_random_crop": 790, "test_creation_funct": 790, "test_arang": 790, "virtual": [790, 809, 828, 841, 842], "cursor": 790, "alt": 790, "blog": 790, "breakpoint": 790, "gutter": 790, "caret": 790, "f8": 790, "f9": 790, "Into": 790, "f7": 790, "smart": 790, "fragment": [790, 834, 836, 840], "wherein": [790, 805, 812], "failur": [790, 797, 810, 812], "weed": [791, 816], "tour": 791, "formatt": [791, 803], "conjunct": 792, "establish": [792, 840], "popular": [792, 838], "sens": [792, 798, 800, 809, 811, 819], "unconnect": 792, "initialis": [792, 809, 812], "strang": [792, 819], "thoroughli": 792, "test_linalg": [792, 810], "test_set_funct": 792, "test_signatur": 792, "excess": [792, 794, 800], "array_modul": 792, "vv": 792, "test_manipulation_funct": 792, "test_concat": [792, 812], "nb": 792, "liber": 792, "______________________": 792, "test_remaind": 792, "_______________________": 792, "test_operators_and_elementwise_funct": 792, "1264": 792, "1277": 792, "binary_param_assert_against_refimpl": 792, "ctx": 792, "620": 792, "binary_assert_against_refimpl": 792, "324": 792, "scalar_o": 792, "17304064": 792, "binaryparamcontext": 792, "axic42baaowcnp": 792, "rumwmabaear0": 792, "make_binary_param": 792, "numeric_dtyp": 792, "left_strat": 792, "left_sym": 792, "right_strat": 792, "right_sym": 792, "right_is_scalar": 792, "binary_param_assert_dtyp": 792, "binary_param_assert_shap": 792, "recreat": 792, "unexpectedli": 792, "discrep": [792, 810], "test_asarray_arrai": 792, "test_floor_divid": 792, "health": 792, "test_iop": 792, "__imod__": 792, "isequ": 792, "test_matrix_norm": 792, "alter": 792, "tweak": 792, "array_api_methods_to_test": 792, "test_special_cas": 792, "__ipow__": 792, "is_integ": 792, "easier": [792, 793, 794, 798, 810, 813, 825, 838, 840], "revisit": [792, 804], "_data": [793, 808, 809, 819], "organiz": [793, 796, 809], "underpin": [793, 796, 817], "programmat": [793, 796, 839], "backup": [793, 795, 796], "accident": [793, 796, 809], "absent": [793, 796], "auto": [793, 795, 796, 803, 820], "__mul__": [793, 796, 800, 804, 815, 819], "throw": [793, 798, 799, 802, 819, 838], "imposs": 793, "inputs_to_native_arrai": [793, 805, 806], "outputs_to_ivy_arrai": [793, 798, 799, 804, 805, 806], "secondli": [793, 798], "__ivy_array_function__": 793, "inspir": 793, "__torch_function__": 793, "myarrai": 793, "handled_funct": 793, "notimpl": 793, "issubclass": 793, "four": [793, 798, 800, 804, 805, 812, 815, 820], "enough": [793, 797, 798, 799, 812, 819, 820, 821], "ivy_funct": 793, "my_ab": 793, "my_arrai": 793, "implicit_backend": [794, 817], "__dict__": [794, 808, 817], "ivy_original_dict": [794, 817], "fallback": 794, "challeng": [794, 844], "live": [794, 795, 798, 828, 829, 834, 836], "scope": [794, 839, 843], "intermediari": 794, "set_dynamic_backend": 794, "unset_dynamic_backend": 794, "dynamic_backend_a": 794, "set_": 794, "unset_": 794, "technic": [794, 804, 808, 823, 838, 840], "setter": 794, "backend_handl": 794, "requires_grad": 794, "memory_format": 794, "preserve_format": 794, "weren": 794, "vast": [794, 798, 838], "minor": [794, 815, 823], "fn_name_v_1p12_and_abov": 794, "fn_name_v_1p01_to_1p1": 794, "heavili": [795, 806, 823], "characterist": 795, "conf": 795, "cleanup": 795, "readm": [795, 823], "maxdepth": 795, "caption": 795, "related_work": 795, "deep_div": 795, "faq": 795, "glossari": 795, "autosummari": 795, "top_functional_toc": 795, "restructuredtext": 795, "inlin": 795, "discov": [795, 798], "ivy_toctree_caption_map": 795, "stub": 795, "unfortun": [795, 803], "linker": 795, "foo": 795, "discussion_channel_map": 795, "1000043690254946374": 795, "1000043749088436315": 795, "forum": [795, 824], "seri": [795, 798, 809, 812, 838, 840], "discussion_paragraph": 795, "discord_link": 795, "channel_link": 795, "gg": 795, "zvqdvbznqj": 795, "799879767196958751": 795, "channel_id": 795, "autoskippablemethod": 795, "skippable_method_attribut": 795, "__qualname__": 795, "autodoc": 795, "__doc__": 795, "autoivydata": 795, "mutual": [796, 805], "containerwithelementwis": 796, "__repr__": 796, "__getattr__": [796, 831], "__setattr__": [796, 831], "__contains__": 796, "__getstate__": 796, "__setstate__": 796, "unpickl": 796, "num_dim": [796, 822], "restrict": [796, 797, 809, 817, 831, 835], "enforc": [796, 819], "extern": [796, 804, 809, 812, 813], "lefthand": 796, "righthand": 796, "handle_nest": [796, 804, 805, 806, 817], "absenc": [796, 804, 838], "implicitli": [796, 807, 812, 817], "log_pr": [796, 805, 808], "intuit": [796, 812, 820, 821, 834], "chronolog": 796, "concurr": [796, 797, 805, 838], "despit": [796, 798, 799, 810, 817, 828, 835, 838], "__list__": 796, "whatsoev": [796, 805, 825, 844], "children": 796, "shallowest": 796, "deepest": 796, "rollback": 797, "incorpor": [797, 810, 820, 838], "techniqu": 797, "triplet": 797, "test_torch": [797, 810], "test_tensor": [797, 810], "test_torch_instance_arctan_": 797, "12500": 797, "daili": 797, "huge": [797, 820, 826, 828, 838, 844], "shoot": 797, "impact": [797, 812, 821, 840], "_reduce_loss": [797, 805, 808], "test_nn": 797, "test_loss": 797, "test_binary_cross_entropy_with_logit": 797, "test_cross_entropi": 797, "test_binary_cross_entropi": 797, "test_sparse_cross_entropi": 797, "test_loss_funct": 797, "test_torch_binary_cross_entropi": 797, "test_torch_cross_entropi": 797, "binary_cross_entropy_with_logit": 797, "torch_binary_cross_entropi": 797, "torch_cross_entropi": 797, "magic": 797, "readthedoc": 797, "pedagog": 797, "f_1": 797, "t_1": 797, "t_3": 797, "t_7": 797, "t_": 797, "f_m": 797, "cyclic": 797, "intellig": [797, 812, 840], "tests_fil": 797, "file_nam": [797, 812, 813], "tests_lin": 797, "correspondingli": 797, "tests_to_run": 797, "determine_tests_lin": 797, "mongodb": 797, "databas": [797, 812], "mechan": [797, 823], "secret": 797, "db": 797, "ssh_deploy_kei": 797, "suffic": [797, 806, 812], "massiv": 797, "yml": 797, "felicit": 797, "clone_map": 797, "home": 797, "deploy_kei": 797, "user_email": 797, "rashul": 797, "chutani": 797, "gmail": [797, 828], "user_nam": 797, "target_branch": 797, "github_serv": 797, "deploy_key_fil": 797, "ssh_known_hosts_fil": 797, "known_host": 797, "keyscan": 797, "git_ssh_command": 797, "userknownhostsfil": 797, "email": [797, 828], "methodologi": 797, "master1": 797, "restructur": 797, "_map": 797, "t_2": 797, "t_n": 797, "index_map": 797, "test_map": 797, "snowbal": 797, "recalibr": 797, "workflow_dispatch": 797, "schedul": [797, 823, 838, 845], "cron": 797, "saturdai": 797, "night": 797, "pm": 797, "gut": 797, "lesser": [797, 802], "lol": 797, "hour": [797, 829], "cater": [797, 811], "master2": 797, "master32": 797, "synchron": 797, "runner2": 797, "corrupt": 797, "decoupl": [797, 821], "150": 797, "cycl": [797, 812], "rashulchutani": 797, "yellow": 797, "queu": 797, "redirect": 797, "book": 797, "onrend": 797, "jo": 797, "ran": 797, "badg": 797, "clickabl": 797, "all_dtyp": 798, "all_numeric_dtyp": 798, "all_int_dtyp": 798, "all_float_dtyp": 798, "replic": [798, 807, 808, 809], "thirdli": 798, "native_float32": 798, "importantli": [798, 819, 822], "arguabl": [798, 799, 809], "jaxarrai": [798, 799, 802, 804, 808, 813, 817], "_handle_0_dim_output": 798, "subtli": [798, 808], "promote_types_frontend_nam": 798, "promote_types_of_frontend_name_input": 798, "frontend_nam": 798, "upcast": 798, "nearli": [798, 804, 806, 838], "downcast": 798, "footprint": 798, "concret": 798, "aris": [798, 803, 823, 828], "utterli": 798, "meant": [798, 800, 808], "twice": 798, "disadvantag": 798, "relax": 798, "f64": 798, "unwant": 798, "primaci": 798, "resembl": 798, "compound": 798, "infer_dtyp": [798, 799, 804, 806], "settabl": [798, 799], "handle_out_argu": [798, 799, 804, 805, 806, 808, 817], "infer_devic": [798, 799, 804, 806], "deleg": [798, 845], "shape_to_tupl": 798, "with_supported_dtyp": 798, "unment": 798, "_cast_for_unary_op": [798, 805, 808], "target_typ": 798, "syntax": [798, 827, 828, 838], "unsupported_dtyp": 798, "supported_dtypes_and_devic": 798, "with_unsupported_device_and_dtyp": 798, "globals_getter_func": 798, "f1": 798, "f2": 798, "lack": [798, 808, 838, 845], "mandat": [798, 808, 812, 813, 828], "confus": [798, 802, 808, 815, 825, 829], "inconsist": [798, 802, 807], "is_nan": 798, "supported_dtyp": 798, "anytim": 798, "84530": 798, "unwarr": 798, "risk": [798, 844], "needlessli": 798, "bloat": 798, "undergo": [798, 823], "unsupported_devic": 798, "supported_devic": 798, "downsid": 798, "undesir": 798, "accomplish": 798, "upcast_data_typ": 798, "downcast_data_typ": 798, "crosscast_data_typ": 798, "cast_data_typ": 798, "downcast_data_dtyp": 798, "vice": 798, "versa": 798, "till": 798, "crosscast": 798, "exmp1": 798, "watch": [798, 809], "handle_numpy_arrays_in_specific_backend": [798, 804], "cate": 798, "understood": 798, "consumpt": [798, 842], "dual": 799, "categor": [799, 805, 809], "210": 799, "_handle_except": [799, 802], "1013": 799, "_handle_nest": [799, 802], "905": 799, "_handle_out_argu": [799, 802], "441": 799, "_inputs_to_native_arrai": [799, 802], "new_arg": [799, 802], "new_kwarg": [799, 802], "_outputs_to_ivy_arrai": [799, 802], "358": 799, "_handle_array_funct": [799, 802], "_handle_device_shift": 799, "handle_device_shift": [799, 806], "crucial": [799, 807], "device_shifting_dev": 799, "__enter__": 799, "__exit__": 799, "mostli": [799, 808, 812], "soft_devic": 799, "eight": [800, 816], "op_nam": 800, "__r": 800, "unsurprisingli": [800, 827], "recap": [800, 821], "combinatori": 800, "okai": [800, 815, 817], "spec": [800, 801], "my_func": [800, 813], "some_flag": 800, "another_flag": 800, "jointli": 800, "5574077": 800, "1850398": 800, "5463025": 800, "8422884": 800, "91601413": 800, "9647598": 800, "3738229": 800, "1597457": 800, "0963247": 800, "9955841": 800, "3278579": 800, "asid": 800, "increasingli": [800, 831], "14254655": 800, "1578213": 800, "380515": 800, "trivial": [800, 808], "failing_fn_nam": 800, "onlin": [800, 801], "minutest": 800, "fault": [800, 838], "contrast": [801, 804, 809, 844], "preview": 801, "incorrectli": [801, 831], "needless": [801, 810], "renam": [801, 809], "judgment": 801, "operator_nam": 801, "succinct": 801, "docst": 801, "native_error": 802, "_combine_messag": 802, "truli": [802, 819], "wrong": [802, 803, 806, 809, 815], "198": 802, "392": 802, "_handle_array_like_without_promot": 802, "805": 802, "432": 802, "349": 802, "other_test": 802, "523": 802, "_handle_numpy_out": 802, "396": [802, 821], "_outputs_to_numpy_arrai": 802, "_inputs_to_ivy_arrays_np": 802, "ivy_arg": 802, "ivy_kwarg": 802, "453": 802, "_from_zero_dim_arrays_to_scalar": 802, "truth_value_test": 802, "visibl": 802, "unwieldi": 802, "squash": 802, "hide": [802, 831], "cleaner": [802, 820], "caught": [802, 803], "rethrow": 802, "_print_traceback_histori": 802, "error_stack": 802, "axiserror": 802, "polici": [802, 806, 812, 814], "moreov": 802, "met": 802, "black": 803, "flake8": 803, "encourag": [803, 823, 828], "linter": 803, "autoflak": 803, "docformatt": 803, "pydocstyl": 803, "yaml": 803, "patch1687898304": 803, "8072": 803, "3516aed563": 803, "reformat": 803, "akshai": 803, "jain": 803, "gui": 803, "cryptic": 803, "garden": 803, "utc": 803, "didn": 803, "human": 803, "intervent": 803, "typo": 803, "ui": 803, "handle_array_like_without_promot": [804, 806], "to_native_arrays_and_back": [804, 806, 817], "handle_array_funct": [804, 806], "inputs_to_native_shap": [804, 806], "rational": [804, 808, 815], "__div__": [804, 815], "484": 804, "annot": 804, "brittl": 804, "freeli": 804, "inde": [804, 815, 823, 836], "original_typ": 804, "cumbersom": 804, "hinder": [804, 827], "venn": 805, "diagram": [805, 844], "light": [805, 813, 823, 825, 839, 844], "maximis": 805, "encompass": 805, "partial_mixed_handl": [805, 806, 815], "handle_partial_mixed_funct": [805, 806, 815], "fn_decor": 805, "mixed_backend_wrapp": [805, 808], "to_add": 805, "to_skip": 805, "inputs_to_ivy_arrai": [805, 806], "modif": [805, 838], "briefli": [805, 812, 820], "get_all_arrays_on_dev": 805, "get_backend": 805, "outputs_to_ivy_shap": 806, "outputs_to_native_arrai": 806, "handle_view_index": [806, 808], "handle_view": [806, 808], "handle_rag": 806, "handle_backend_invalid": 806, "handle_nan": 806, "to_native_shapes_and_back": 806, "modern": [807, 827, 828, 843], "inter_func": 807, "custom_grad_fn": 807, "args1": 807, "eas": [807, 838], "captur": [807, 812, 822, 839], "program": [808, 835, 836, 838, 841, 842, 845], "speak": 808, "val_n": 808, "base_idx": 808, "_manipulation_stack": 808, "base_flat": 808, "_view_ref": 808, "_update_view": 808, "contigu": 808, "c_contigu": 808, "ascontiguousarrai": 808, "copyto": 808, "_is_vari": 808, "tensor_scatter_nd_upd": 808, "is_vari": 808, "_update_torch_view": 808, "predominantli": [808, 813], "support_native_out": [808, 817], "_scalar_output_to_0d_arrai": 808, "_wrap_fn": 808, "dim0": 808, "dim1": 808, "res_floor": 808, "extent": [808, 809], "to_out_fn": 808, "add_wrapp": 808, "paradigm": [808, 823, 838], "expans": 808, "brief": [808, 812], "weak": 808, "_torch_bas": 808, "_torch_view_ref": 808, "_torch_manipul": 808, "weakli": 808, "adequ": 808, "exhaust": [808, 812, 835, 844], "tf_frontend": 809, "lax": [809, 810, 815, 822, 823], "torch_frontend": [809, 810], "numpy_frontend": 809, "jax_frontend": 809, "to_ivy_arrays_and_back": [809, 810], "fidel": 809, "algebra": [809, 836, 837, 838, 841, 845], "xla": [809, 823, 825, 838], "dynamic": 809, "mimic": 809, "arithmetic_oper": 809, "handle_numpy_out": 809, "handle_numpy_dtyp": 809, "handle_numpy_cast": 809, "from_zero_dim_arrays_to_scalar": 809, "_add": 809, "same_kind": 809, "subok": [809, 810, 815], "promote_types_of_numpy_input": 809, "underscor": 809, "unhandl": 809, "trigonometric_funct": 809, "_tan": 809, "check_tensorflow_cast": 809, "raw_op": [809, 810], "tackl": 809, "map_raw_ops_alia": 809, "output_typ": 809, "kwargs_to_upd": 809, "pointwise_op": 809, "sensibl": 809, "ahead": [809, 813, 838], "reduce_logsumexp": 809, "logsumexp": 809, "trick": 809, "max_input_tensor": 809, "meet": 809, "preferred_element_typ": 809, "languag": [809, 817, 825, 827, 829, 836, 839, 841, 842, 843, 844], "offer": [809, 821, 829, 838, 844, 845], "finer": 809, "logicaland": 809, "np_frontend": 809, "_ivy_arrai": 809, "radd": 809, "_init_data": 809, "_process_str_data": 809, "_dtype": [809, 810, 819], "_shape": [809, 819], "govern": 809, "promote_types_of_": 809, "_input": 809, "promote_types_of_torch_input": [809, 810], "handle_numpy_casting_speci": 809, "new_fn": 809, "equiv": 809, "unsaf": 809, "array_type_test": 809, "_isfinit": 809, "organis": 809, "grasp": 809, "youtub": 809, "knowledg": 810, "np_frontend_help": 810, "open_task": 810, "test_jax": 810, "test_lax": 810, "test_oper": 810, "test_jax_tan": 810, "test_numpi": 810, "test_mathematical_funct": 810, "test_trigonometric_funct": 810, "dtypes_values_cast": 810, "dtypes_values_casting_dtyp": 810, "arr_func": 810, "get_num_positional_args_ufunc": 810, "test_numpy_tan": 810, "handle_where_and_array_bool": 810, "test_tensorflow": 810, "test_math": 810, "test_tensorflow_tan": 810, "test_pointwise_op": 810, "test_torch_tan": 810, "_fill_valu": 810, "test_glob": 810, "test_jax_ful": 810, "test_from_shape_or_valu": 810, "_input_fill_and_dtyp": 810, "dtype_and_input": 810, "dtype_to_cast": 810, "input_fill_dtyp": 810, "test_numpy_ful": 810, "test_raw_op": 810, "test_tensorflow_fil": 810, "test_creation_op": 810, "with_arrai": 810, "test_torch_ful": 810, "add_nois": 810, "all_clos": 810, "_get_dtype_and_matrix": 810, "test_torch_qr": 810, "frontend_q": 810, "frontend_r": 810, "walkthrough": 810, "comparison_op": 810, "test_comparison_op": 810, "test_torch_great": 810, "all_alias": 810, "test_ndarrai": 810, "test_numpy_instance_add__": 810, "test_tensorflow_instance_add": 810, "1e04": 810, "allow_infin": 810, "test_torch_instance_add": 810, "_arrays_idx_n_dtyp": 810, "test_manipul": [810, 812], "surprisingli": 810, "closest_relevant_group": 810, "strive": [810, 812, 815, 823, 840], "craft": [811, 812], "tailor": 811, "priorit": [811, 815], "clariti": [811, 812, 815, 838], "weav": 811, "thrill": 811, "brim": 811, "stand": [811, 812], "testament": 811, "landscap": 811, "forese": 811, "refin": 811, "inquiri": 811, "fixtur": 812, "hit": [812, 817, 831], "eleg": [812, 838], "unexplor": 812, "artifact": 812, "bespok": 812, "_array_or_typ": 812, "rigor": [812, 827], "test_default_int_dtyp": 812, "print_hypothesis_exampl": 812, "custom_strategi": 812, "randomis": 812, "simplist": 812, "intricaci": 812, "glanc": 812, "one_of": 812, "datum": 812, "pipe": 812, "array_or_scal": 812, "len_of_arrai": 812, "test_add": 812, "test_gpu_is_avail": 812, "pretest": 812, "snippet": [812, 832], "criterion": 812, "valid_ax": 812, "hoc": 812, "11228": 812, "268": 812, "wherev": 812, "9622": 812, "28136": 812, "6375": 812, "12720": 812, "21354": 812, "900e": 812, "57384": 812, "25687": 812, "248": 812, "test_devic": 812, "array_shap": 812, "test_lay": 812, "some_sequ": 812, "arrays_valu": 812, "36418": 812, "213": 812, "21716926": 812, "none_or_list_of_float": 812, "get_prob": 812, "103515625e": 812, "099609375": 812, "probabilist": 812, "number_positional_argu": 812, "unreproduc": 812, "x_and_linear": 812, "is_torch_backend": 812, "x_shape": [812, 817], "weight_shap": 812, "bias_shap": 812, "ivy_np": 812, "valid_float_dtyp": 812, "test_demo": 812, "failing_test": 812, "traceback": 812, "shrink": 812, "prescrib": 812, "scratch": 812, "therebi": 812, "test_gelu": 812, "test_fil": 812, "phase": [812, 823, 838], "notabl": [812, 838], "max_exampl": 812, "deadlin": 812, "weird": 812, "systemat": 812, "safeguard": 812, "inabl": 812, "test_result_typ": 812, "9090909090909091": 812, "judgement": 813, "some_namespac": 813, "some_backend": 813, "another_backend": 813, "refactor": 813, "ongo": 813, "check_fill_value_and_dtype_are_compat": 813, "_assert_fill_value_and_dtype_are_compat": 813, "_to_devic": 813, "shouldn": [813, 831], "pin": 813, "unpinn": 813, "culmin": 813, "unsett": 814, "array_significant_figur": 814, "array_decimal_valu": 814, "warning_level": 814, "nan_polici": 814, "stablest": 814, "constantli": [815, 827], "answer": [815, 819, 823], "contradict": 815, "entail": 815, "sacrif": 815, "jacfwd": 815, "jacrev": 815, "banner": 815, "expens": 815, "incredibli": [815, 820, 823, 841], "price": 815, "pai": 815, "intrus": 815, "x_beta": 815, "equip": 815, "simplif": 815, "allevi": 815, "ineffici": [815, 823, 838], "fuse": 815, "hybrid": 815, "workaround": 815, "slip": 815, "radar": 815, "stumbl": 815, "gone": [816, 828], "fulfil": 816, "syntact": [817, 822], "power_seq": 817, "backend_stack": 817, "_determine_backend_from_arg": 817, "importlib": 817, "_backend_dict": 817, "x_flat": 817, "wi": 817, "wi_x": 817, "wii_x": 817, "wif_x": 817, "wig_x": 817, "wio_x": 817, "wh": 817, "ht": 817, "ct": 817, "hts_list": 817, "wii_xt": 817, "wif_xt": 817, "wig_xt": 817, "wio_xt": 817, "htm1": 817, "ctm1": 817, "wh_htm1": 817, "whi_htm1": 817, "whf_htm1": 817, "whg_htm1": 817, "who_htm1": 817, "ft": 817, "ot": 817, "reliabl": 817, "scalabl": [817, 827, 843, 844], "sacrific": 817, "hear": 817, "virtu": [817, 835], "pure_ivi": 817, "pure_torch": 817, "unclean": 817, "wx": 817, "temp": 817, "ivy_func": 817, "emphas": 817, "torchscript": [817, 825, 845], "example_input": 817, "static_argnum": [817, 831], "static_argnam": [817, 831], "primit": [818, 823, 836, 838], "upcom": 818, "hierarch": [818, 820, 821, 838], "arraywithactiv": 819, "arraywithcr": 819, "arraywithdatatyp": 819, "arraywithdevic": 819, "arraywithgener": 819, "arraywithgradi": 819, "arraywithimag": 819, "arraywithlay": 819, "arraywithlinearalgebra": 819, "arraywithloss": 819, "arraywithmanipul": 819, "arraywithnorm": 819, "arraywithrandom": 819, "arraywithsearch": 819, "arraywithset": 819, "arraywithsort": 819, "arraywithstatist": 819, "arraywithutil": 819, "_init": 819, "_size": 819, "_devic": 819, "_dev_str": 819, "_pre_repr": 819, "_post_repr": 819, "framework_str": 819, "pypep8nam": 819, "immut": 819, "claim": 819, "_native_wrapp": 819, "genuin": 819, "some_method": 819, "rewritten": 819, "littl": [819, 827, 840], "wonder": [819, 827, 829], "compartment": 819, "newshap": 819, "new_shap": 819, "tidi": 819, "crystal": 819, "ton": 820, "ado": [820, 821], "soup": 820, "walk": [820, 821], "cnt": 820, "3333335": 820, "delimit": 820, "autocomplet": 820, "midwai": 820, "agent": 820, "total_spe": 820, "total_height": 820, "total_width": 820, "ag": 820, "tot": 820, "total_": 820, "total_h": 820, "cnt0": 820, "cnt1": 820, "diff_0": 820, "diff_1": 820, "config0": 820, "config1": 820, "l0": 820, "decoder__l0": 820, "decoder__l1": 820, "encoder__l0": 820, "encoder__l1": 820, "l0__b": 820, "l0__w": 820, "l1__b": 820, "l1__w": 820, "printabl": 820, "obviou": [820, 838], "foresight": 820, "untidili": 820, "update_ag": 820, "normalize_img": 820, "img_max": 820, "reduce_max": 820, "img_min": 820, "reduce_min": 820, "img_rang": 820, "agent_posit": 820, "agent_veloc": 820, "agent_cam_front_rgb": 820, "agent_cam_front_depth": 820, "agent_cam_rear_rgb": 820, "agent_cam_rear_depth": 820, "agent_cam_lidar": 820, "camera": 820, "front_rgb": 820, "front_depth": 820, "rear_rgb": 820, "rear_depth": 820, "lidar": 820, "rgb": 820, "rear": 820, "veloc": 820, "cam": 820, "cam_max": 820, "cam_min": 820, "cam_rang": 820, "five": 820, "allud": [820, 828], "perman": 820, "thread": [820, 838], "straightforward": 820, "dataload": 820, "_cnt": 820, "img_": 820, "_dataset_s": 820, "_batch_siz": 820, "_count": [820, 821], "__next__": 820, "img_fnam": 820, "loaded_img": 820, "batch_slic": 820, "0145": 820, "addbackward0": 820, "_create_vari": 821, "_input_channel": 821, "_output_channel": 821, "_w_shape": 821, "_b_shape": 821, "_with_bia": 821, "764": 821, "872": 821, "211": 821, "439": 821, "nightmar": 821, "overcom": 821, "v1": 821, "key0": 821, "linear3": 821, "v2": 821, "preced": [821, 828], "_w_init": 821, "_b_init": 821, "misnom": 821, "saw": 821, "_beta1": 821, "_beta2": 821, "_epsilon": 821, "_mw": 821, "_vw": 821, "_first_pass": 821, "_should_trac": 821, "new_v": 821, "_lr": 821, "_inplac": 821, "_stop_gradi": 821, "sparse_funct": 822, "vital": [822, 827], "_linear": 822, "jax_graph": 822, "to_backend": 822, "thinli": 822, "to_haiku_modul": 822, "loss_fn_t": 822, "without_apply_rng": 822, "update_rul": 822, "tree_multimap": 822, "trax": [822, 829], "objax": [822, 829], "matur": [823, 828, 838], "doubt": 823, "grate": 823, "probe": 823, "remark": 823, "lock": 823, "gold": 823, "dex": 823, "tricki": [823, 825], "predictor": 823, "tight": 823, "driver": 823, "dispatch": [823, 838, 841], "ast": 823, "autodiff": 823, "shine": 823, "merci": 823, "compet": [823, 838], "parallelis": 823, "spmd": 823, "mixtur": 823, "expert": 823, "sophist": 823, "depart": 823, "hundr": 823, "thousand": 823, "broadli": [823, 844], "supplementari": 823, "reusabl": [823, 836, 838], "fanci": [823, 838], "fusion": [823, 842], "lose": 823, "pmap": 823, "eventu": 823, "supplement": 823, "backdoor": 823, "callback": 823, "door": 823, "somewhat": [823, 838], "outsourc": 823, "ivy_root": 824, "pem": 824, "api_kei": 824, "asap": 824, "nail": 825, "scientist": 825, "correl": 825, "collabor": [826, 827, 828], "consortium": [826, 828], "grown": 827, "rapidli": 827, "shareabl": 827, "outdat": 827, "newest": 827, "prototyp": [827, 838], "bottleneck": 827, "obsolet": [827, 829], "invent": 827, "simultan": [827, 829], "runner": 827, "principl": [827, 836, 838, 841], "2006": 827, "cloth": 827, "forgiven": 828, "eyebrow": 828, "somehow": 828, "industri": [828, 838, 840], "funni": 828, "comic": 828, "charger": 828, "instant": 828, "contrari": 828, "bumpi": 828, "road": 828, "technologi": [828, 836, 840], "pcie": 828, "motherboard": 828, "raid": 828, "bluetooth": 828, "wireless": 828, "btx": 828, "sata": 828, "tcp": 828, "ip": 828, "smtp": 828, "send": [828, 843], "outlook": 828, "innov": 828, "growth": [828, 841], "necess": 828, "2015": [828, 838], "aros": 828, "mission": [828, 840], "ourselv": [828, 844], "quansight": [828, 844], "compani": [828, 834], "apach": [828, 840, 844], "onnx": [828, 836, 844], "cupi": [828, 838, 845], "sympi": 828, "modin": 828, "spyder": 828, "octoml": [828, 844], "sponsor": 828, "lg": 828, "electron": 828, "shaw": 828, "pursuit": 828, "complianc": 828, "convinc": 828, "celebr": 828, "abund": 829, "streamlin": [829, 841], "awesom": 829, "love": 829, "slew": 829, "inevit": [829, 839], "erron": 829, "poor": 829, "spin": 829, "sake": 829, "wouldn": 829, "frantic": 829, "lucid": 829, "honk": 829, "hasn": 829, "spend": [829, 838], "sonnet": 829, "trainer": [829, 845], "quo": 829, "dopamin": 829, "ignit": 829, "catalyst": 829, "lightn": 829, "fastai": 829, "publicli": [831, 832, 833], "logger": 831, "include_gener": 831, "array_cach": 831, "return_backend_traced_fn": 831, "lazygraph": [831, 832, 833], "sum_j": 831, "traced_fn": 831, "impos": 831, "comp_func": 831, "trade": 831, "bake": 831, "cont": 831, "new_attribut": 831, "resnet50": 831, "breed": 831, "autoimageprocessor": [831, 832], "resnetforimageclassif": [831, 832], "traced_graph": 831, "predicted_label": 831, "debug_mod": 832, "rough": 832, "transformed_with_st": 832, "bigger": 832, "hf": 832, "tf_model": 832, "tf_input": 832, "transpile_kwarg": 833, "transpiled_func": 833, "unified_func": 833, "conceptu": [834, 839], "broken": [834, 838], "rwork": 834, "vendor": [834, 840], "complimentari": [834, 844], "acycl": [834, 839], "insert_numb": 835, "insert_t": 835, "scaffold": [836, 844], "heart": 836, "toolchain": [836, 841], "assembli": [836, 843, 844], "idl": 836, "middl": 836, "emit": 836, "gnu": [836, 841], "broader": 836, "heterogen": 836, "aid": 836, "coprocessor": 836, "programm": [836, 843], "gate": 836, "onednn": 836, "sit": [836, 839, 844], "tandem": 836, "possess": 836, "khrono": [837, 843], "appl": 837, "coremltool": 837, "albeit": 837, "promin": 838, "abbrevi": 838, "laboratori": 838, "proprietari": [838, 842, 843], "mathwork": 838, "commerci": 838, "1984": 838, "toolbox": 838, "mupad": 838, "simulink": 838, "graphic": [838, 842, 843], "simul": 838, "million": [838, 841], "worldwid": 838, "scienc": [838, 840], "econom": 838, "2001": 838, "od": 838, "solver": 838, "cython": 838, "friendli": 838, "2002": 838, "lua": 838, "luajit": 838, "idiap": 838, "epfl": 838, "2005": 838, "numarrai": 838, "cpython": 838, "partli": 838, "2007": 838, "forest": 838, "boost": 838, "dbscan": 838, "inbuilt": 838, "esqu": 838, "aesara": 838, "datafram": 838, "2012": 838, "Its": 838, "polymorph": 838, "mpi": 838, "openmp": 838, "glue": 838, "jaot": 838, "nasa": 838, "cern": 838, "climat": 838, "allianc": 838, "influenti": 838, "2014": 838, "scala": 838, "ship": 838, "forgiv": 838, "decemb": 838, "announc": 838, "mainten": 838, "v7": 838, "meaning": 838, "2016": 838, "imper": 838, "amazon": 838, "traction": 838, "cognit": [838, 845], "toolkit": [838, 839, 845], "grade": 838, "dnn": 838, "rnn": 838, "backpropag": 838, "succumb": 838, "came": 838, "monitor": 838, "practition": [838, 842, 843, 844], "hobbyist": 838, "tremend": 838, "ecosystem": 838, "gear": 838, "batteri": 838, "zygot": 838, "jl": 838, "workload": 838, "daggerflux": 838, "frontier": 838, "hessian": 838, "2018": 838, "lightweight": [838, 845], "shortcom": 838, "barrier": 838, "inexperienc": 838, "underdevelop": 838, "fanat": 838, "ounc": 838, "infanc": 838, "emerg": 838, "nich": 838, "mobil": 838, "lite": 838, "enterpris": 838, "reinvent": [838, 840], "inertia": 838, "creator": [838, 840], "paszk": 838, "hi": 838, "bulk": 838, "haskel": 838, "dataflow": 839, "trace_modul": 839, "scriptfunct": 839, "scriptmodul": 839, "fake": 839, "proxi": 839, "site": 839, "graphmodul": 839, "travi": 840, "oliph": 840, "leader": 840, "cornerston": 840, "numba": 840, "numfocu": 840, "pydata": 840, "confer": 840, "consult": 840, "servic": 840, "expertis": 840, "devop": 840, "mlop": 840, "dashboard": 840, "startup": 840, "mlir": [840, 841, 844], "Their": 840, "held": 840, "privileg": 840, "presum": 840, "llvm": [840, 843], "founder": 840, "tvm": [840, 844], "sustain": 840, "empow": 840, "har": 840, "burden": 840, "benchmark": 840, "precompil": 841, "executor": 841, "julia": [841, 844], "fsf": 841, "gpl": 841, "biggest": [841, 844], "conduct": 842, "throughput": 842, "gpgpu": 842, "classic": 843, "sycl": 843, "dpc": 843, "processor": 843, "maco": 843, "oneapi": 843, "ia": 843, "aka": 843, "xeon": 843, "gen9": 843, "xe": 843, "arria": 843, "gx": 843, "fpga": 843, "lofti": 844, "ambit": 844, "realm": 844, "bedrock": 844, "flux": 844, "bite": 844, "chew": 844, "eagerpi": 844, "tensorli": 844, "thinc": 844, "neuropod": 844, "emploi": 844, "fx": 844, "retrain": 844, "closer": 844, "greatli": 844, "modular": 844, "anywher": 844, "theano": 845, "plaidml": 845, "partial_svd": 845, "excel": 845, "subsystem": 845}, "objects": {"ivy.Array": [[214, 0, 1, "", "abs"], [215, 0, 1, "", "acos"], [216, 0, 1, "", "acosh"], [587, 0, 1, "", "adam_step"], [588, 0, 1, "", "adam_update"], [372, 0, 1, "", "adaptive_avg_pool1d"], [373, 0, 1, "", "adaptive_avg_pool2d"], [374, 0, 1, "", "adaptive_max_pool2d"], [217, 0, 1, "", "add"], [405, 0, 1, "", "adjoint"], [739, 0, 1, "", "all"], [507, 0, 1, "", "all_equal"], [320, 0, 1, "", "allclose"], [321, 0, 1, "", "amax"], [322, 0, 1, "", "amin"], [218, 0, 1, "", "angle"], [740, 0, 1, "", "any"], [716, 0, 1, "", "argmax"], [717, 0, 1, "", "argmin"], [725, 0, 1, "", "argsort"], [718, 0, 1, "", "argwhere"], [510, 0, 1, "", "array_equal"], [438, 0, 1, "", "as_strided"], [122, 0, 1, "", "asarray"], [219, 0, 1, "", "asin"], [220, 0, 1, "", "asinh"], [511, 0, 1, "", "assert_supports_inplace"], [439, 0, 1, "", "associative_scan"], [146, 0, 1, "", "astype"], [221, 0, 1, "", "atan"], [222, 0, 1, "", "atan2"], [223, 0, 1, "", "atanh"], [440, 0, 1, "", "atleast_1d"], [441, 0, 1, "", "atleast_2d"], [442, 0, 1, "", "atleast_3d"], [376, 0, 1, "", "avg_pool1d"], [377, 0, 1, "", "avg_pool2d"], [378, 0, 1, "", "avg_pool3d"], [476, 0, 1, "", "batch_norm"], [406, 0, 1, "", "batched_outer"], [482, 0, 1, "", "bernoulli"], [483, 0, 1, "", "beta"], [323, 0, 1, "", "binarizer"], [668, 0, 1, "", "binary_cross_entropy"], [494, 0, 1, "", "bincount"], [224, 0, 1, "", "bitwise_and"], [225, 0, 1, "", "bitwise_invert"], [226, 0, 1, "", "bitwise_left_shift"], [227, 0, 1, "", "bitwise_or"], [228, 0, 1, "", "bitwise_right_shift"], [229, 0, 1, "", "bitwise_xor"], [300, 0, 1, "", "blackman_window"], [147, 0, 1, "", "broadcast_arrays"], [148, 0, 1, "", "broadcast_to"], [149, 0, 1, "", "can_cast"], [230, 0, 1, "", "ceil"], [289, 0, 1, "", "celu"], [638, 0, 1, "", "cholesky"], [671, 0, 1, "", "clip"], [513, 0, 1, "", "clip_matrix_norm"], [514, 0, 1, "", "clip_vector_norm"], [445, 0, 1, "", "column_stack"], [672, 0, 1, "", "concat"], [446, 0, 1, "", "concat_from_sequence"], [407, 0, 1, "", "cond"], [324, 0, 1, "", "conj"], [673, 0, 1, "", "constant_pad"], [622, 0, 1, "", "conv1d"], [623, 0, 1, "", "conv1d_transpose"], [624, 0, 1, "", "conv2d"], [625, 0, 1, "", "conv2d_transpose"], [626, 0, 1, "", "conv3d"], [627, 0, 1, "", "conv3d_transpose"], [123, 0, 1, "", "copy_array"], [325, 0, 1, "", "copysign"], [495, 0, 1, "", "corrcoef"], [231, 0, 1, "", "cos"], [232, 0, 1, "", "cosh"], [326, 0, 1, "", "count_nonzero"], [496, 0, 1, "", "cov"], [639, 0, 1, "", "cross"], [669, 0, 1, "", "cross_entropy"], [497, 0, 1, "", "cummax"], [498, 0, 1, "", "cummin"], [729, 0, 1, "", "cumprod"], [730, 0, 1, "", "cumsum"], [379, 0, 1, "", "dct"], [517, 0, 1, "", "default"], [233, 0, 1, "", "deg2rad"], [630, 0, 1, "", "depthwise_conv2d"], [640, 0, 1, "", "det"], [191, 0, 1, "", "dev"], [380, 0, 1, "", "dft"], [641, 0, 1, "", "diag"], [408, 0, 1, "", "diagflat"], [642, 0, 1, "", "diagonal"], [327, 0, 1, "", "diff"], [328, 0, 1, "", "digamma"], [484, 0, 1, "", "dirichlet"], [234, 0, 1, "", "divide"], [409, 0, 1, "", "dot"], [631, 0, 1, "", "dropout"], [381, 0, 1, "", "dropout1d"], [382, 0, 1, "", "dropout2d"], [383, 0, 1, "", "dropout3d"], [447, 0, 1, "", "dsplit"], [448, 0, 1, "", "dstack"], [157, 0, 1, "", "dtype"], [643, 0, 1, "", "eig"], [644, 0, 1, "", "eigh"], [411, 0, 1, "", "eigh_tridiagonal"], [412, 0, 1, "", "eigvals"], [645, 0, 1, "", "eigvalsh"], [518, 0, 1, "", "einops_rearrange"], [519, 0, 1, "", "einops_reduce"], [520, 0, 1, "", "einops_repeat"], [731, 0, 1, "", "einsum"], [290, 0, 1, "", "elu"], [384, 0, 1, "", "embedding"], [125, 0, 1, "", "empty_like"], [235, 0, 1, "", "equal"], [236, 0, 1, "", "erf"], [329, 0, 1, "", "erfc"], [521, 0, 1, "", "exists"], [237, 0, 1, "", "exp"], [238, 0, 1, "", "exp2"], [449, 0, 1, "", "expand"], [674, 0, 1, "", "expand_dims"], [239, 0, 1, "", "expm1"], [301, 0, 1, "", "eye_like"], [385, 0, 1, "", "fft"], [386, 0, 1, "", "fft2"], [450, 0, 1, "", "fill_diagonal"], [159, 0, 1, "", "finfo"], [330, 0, 1, "", "fix"], [451, 0, 1, "", "flatten"], [675, 0, 1, "", "flip"], [452, 0, 1, "", "fliplr"], [453, 0, 1, "", "flipud"], [331, 0, 1, "", "float_power"], [240, 0, 1, "", "floor"], [241, 0, 1, "", "floor_divide"], [332, 0, 1, "", "fmax"], [242, 0, 1, "", "fmin"], [243, 0, 1, "", "fmod"], [454, 0, 1, "", "fold"], [522, 0, 1, "", "fourier_encode"], [333, 0, 1, "", "frexp"], [127, 0, 1, "", "from_dlpack"], [130, 0, 1, "", "full_like"], [485, 0, 1, "", "gamma"], [525, 0, 1, "", "gather"], [526, 0, 1, "", "gather_nd"], [244, 0, 1, "", "gcd"], [104, 0, 1, "", "gelu"], [413, 0, 1, "", "general_inner_product"], [529, 0, 1, "", "get_num_dims"], [334, 0, 1, "", "gradient"], [591, 0, 1, "", "gradient_descent_update"], [245, 0, 1, "", "greater"], [246, 0, 1, "", "greater_equal"], [477, 0, 1, "", "group_norm"], [105, 0, 1, "", "hardswish"], [291, 0, 1, "", "hardtanh"], [531, 0, 1, "", "has_nans"], [455, 0, 1, "", "heaviside"], [414, 0, 1, "", "higher_order_moment"], [499, 0, 1, "", "histogram"], [456, 0, 1, "", "hsplit"], [457, 0, 1, "", "hstack"], [431, 0, 1, "", "huber_loss"], [335, 0, 1, "", "hypot"], [458, 0, 1, "", "i0"], [389, 0, 1, "", "idct"], [390, 0, 1, "", "ifft"], [391, 0, 1, "", "ifftn"], [500, 0, 1, "", "igamma"], [162, 0, 1, "", "iinfo"], [247, 0, 1, "", "imag"], [415, 0, 1, "", "initialize_tucker"], [646, 0, 1, "", "inner"], [533, 0, 1, "", "inplace_decrement"], [534, 0, 1, "", "inplace_increment"], [535, 0, 1, "", "inplace_update"], [478, 0, 1, "", "instance_norm"], [393, 0, 1, "", "interpolate"], [647, 0, 1, "", "inv"], [537, 0, 1, "", "is_array"], [165, 0, 1, "", "is_bool_dtype"], [167, 0, 1, "", "is_float_dtype"], [169, 0, 1, "", "is_int_dtype"], [538, 0, 1, "", "is_ivy_array"], [539, 0, 1, "", "is_ivy_container"], [541, 0, 1, "", "is_native_array"], [171, 0, 1, "", "is_uint_dtype"], [336, 0, 1, "", "isclose"], [248, 0, 1, "", "isfinite"], [542, 0, 1, "", "isin"], [249, 0, 1, "", "isinf"], [250, 0, 1, "", "isnan"], [251, 0, 1, "", "isreal"], [544, 0, 1, "", "itemsize"], [432, 0, 1, "", "kl_div"], [417, 0, 1, "", "kron"], [433, 0, 1, "", "l1_loss"], [479, 0, 1, "", "l1_normalize"], [480, 0, 1, "", "l2_normalize"], [593, 0, 1, "", "lamb_update"], [594, 0, 1, "", "lars_update"], [709, 0, 1, "", "layer_norm"], [252, 0, 1, "", "lcm"], [337, 0, 1, "", "ldexp"], [106, 0, 1, "", "leaky_relu"], [338, 0, 1, "", "lerp"], [253, 0, 1, "", "less"], [254, 0, 1, "", "less_equal"], [489, 0, 1, "", "lexsort"], [339, 0, 1, "", "lgamma"], [632, 0, 1, "", "linear"], [131, 0, 1, "", "linspace"], [255, 0, 1, "", "log"], [256, 0, 1, "", "log10"], [257, 0, 1, "", "log1p"], [258, 0, 1, "", "log2"], [434, 0, 1, "", "log_poisson_loss"], [107, 0, 1, "", "log_softmax"], [259, 0, 1, "", "logaddexp"], [260, 0, 1, "", "logaddexp2"], [261, 0, 1, "", "logical_and"], [262, 0, 1, "", "logical_not"], [263, 0, 1, "", "logical_or"], [264, 0, 1, "", "logical_xor"], [292, 0, 1, "", "logit"], [293, 0, 1, "", "logsigmoid"], [132, 0, 1, "", "logspace"], [481, 0, 1, "", "lp_normalize"], [633, 0, 1, "", "lstm_update"], [419, 0, 1, "", "make_svd_non_negative"], [649, 0, 1, "", "matmul"], [459, 0, 1, "", "matricize"], [420, 0, 1, "", "matrix_exp"], [650, 0, 1, "", "matrix_norm"], [651, 0, 1, "", "matrix_power"], [652, 0, 1, "", "matrix_rank"], [653, 0, 1, "", "matrix_transpose"], [732, 0, 1, "", "max"], [394, 0, 1, "", "max_pool1d"], [395, 0, 1, "", "max_pool2d"], [396, 0, 1, "", "max_pool3d"], [397, 0, 1, "", "max_unpool1d"], [265, 0, 1, "", "maximum"], [733, 0, 1, "", "mean"], [501, 0, 1, "", "median"], [307, 0, 1, "", "mel_weight_matrix"], [133, 0, 1, "", "meshgrid"], [734, 0, 1, "", "min"], [266, 0, 1, "", "minimum"], [108, 0, 1, "", "mish"], [421, 0, 1, "", "mode_dot"], [340, 0, 1, "", "modf"], [460, 0, 1, "", "moveaxis"], [726, 0, 1, "", "msort"], [422, 0, 1, "", "multi_dot"], [634, 0, 1, "", "multi_head_attention"], [423, 0, 1, "", "multi_mode_dot"], [710, 0, 1, "", "multinomial"], [267, 0, 1, "", "multiply"], [268, 0, 1, "", "nan_to_num"], [502, 0, 1, "", "nanmean"], [503, 0, 1, "", "nanmedian"], [504, 0, 1, "", "nanprod"], [341, 0, 1, "", "nansum"], [134, 0, 1, "", "native_array"], [269, 0, 1, "", "negative"], [342, 0, 1, "", "nextafter"], [719, 0, 1, "", "nonzero"], [270, 0, 1, "", "not_equal"], [135, 0, 1, "", "one_hot"], [137, 0, 1, "", "ones_like"], [595, 0, 1, "", "optimizer_update"], [506, 0, 1, "", "optional_get_element"], [654, 0, 1, "", "outer"], [461, 0, 1, "", "pad"], [462, 0, 1, "", "partial_fold"], [463, 0, 1, "", "partial_tensor_to_vec"], [424, 0, 1, "", "partial_tucker"], [464, 0, 1, "", "partial_unfold"], [465, 0, 1, "", "partial_vec_to_tensor"], [676, 0, 1, "", "permute_dims"], [655, 0, 1, "", "pinv"], [486, 0, 1, "", "poisson"], [435, 0, 1, "", "poisson_nll_loss"], [271, 0, 1, "", "positive"], [272, 0, 1, "", "pow"], [294, 0, 1, "", "prelu"], [735, 0, 1, "", "prod"], [466, 0, 1, "", "put_along_axis"], [656, 0, 1, "", "qr"], [505, 0, 1, "", "quantile"], [273, 0, 1, "", "rad2deg"], [711, 0, 1, "", "randint"], [712, 0, 1, "", "random_normal"], [713, 0, 1, "", "random_uniform"], [274, 0, 1, "", "real"], [275, 0, 1, "", "reciprocal"], [348, 0, 1, "", "reduce"], [400, 0, 1, "", "reduce_window"], [109, 0, 1, "", "relu"], [295, 0, 1, "", "relu6"], [276, 0, 1, "", "remainder"], [677, 0, 1, "", "repeat"], [678, 0, 1, "", "reshape"], [174, 0, 1, "", "result_type"], [401, 0, 1, "", "rfft"], [402, 0, 1, "", "rfftn"], [679, 0, 1, "", "roll"], [467, 0, 1, "", "rot90"], [277, 0, 1, "", "round"], [637, 0, 1, "", "scaled_dot_product_attention"], [549, 0, 1, "", "scatter_flat"], [550, 0, 1, "", "scatter_nd"], [727, 0, 1, "", "searchsorted"], [296, 0, 1, "", "selu"], [563, 0, 1, "", "shape"], [715, 0, 1, "", "shuffle"], [110, 0, 1, "", "sigmoid"], [278, 0, 1, "", "sign"], [343, 0, 1, "", "signbit"], [297, 0, 1, "", "silu"], [279, 0, 1, "", "sin"], [344, 0, 1, "", "sinc"], [280, 0, 1, "", "sinh"], [403, 0, 1, "", "sliding_window"], [657, 0, 1, "", "slogdet"], [436, 0, 1, "", "smooth_l1_loss"], [437, 0, 1, "", "soft_margin_loss"], [468, 0, 1, "", "soft_thresholding"], [111, 0, 1, "", "softmax"], [112, 0, 1, "", "softplus"], [658, 0, 1, "", "solve"], [728, 0, 1, "", "sort"], [670, 0, 1, "", "sparse_cross_entropy"], [345, 0, 1, "", "sparsify_tensor"], [680, 0, 1, "", "split"], [281, 0, 1, "", "sqrt"], [282, 0, 1, "", "square"], [681, 0, 1, "", "squeeze"], [564, 0, 1, "", "stable_divide"], [565, 0, 1, "", "stable_pow"], [682, 0, 1, "", "stack"], [736, 0, 1, "", "std"], [404, 0, 1, "", "stft"], [596, 0, 1, "", "stop_gradient"], [566, 0, 1, "", "strides"], [283, 0, 1, "", "subtract"], [737, 0, 1, "", "sum"], [567, 0, 1, "", "supports_inplace_updates"], [659, 0, 1, "", "svd"], [426, 0, 1, "", "svd_flip"], [660, 0, 1, "", "svdvals"], [683, 0, 1, "", "swapaxes"], [469, 0, 1, "", "take_along_axis"], [284, 0, 1, "", "tan"], [285, 0, 1, "", "tanh"], [298, 0, 1, "", "tanhshrink"], [427, 0, 1, "", "tensor_train"], [661, 0, 1, "", "tensordot"], [662, 0, 1, "", "tensorsolve"], [299, 0, 1, "", "thresholded_relu"], [684, 0, 1, "", "tile"], [208, 0, 1, "", "to_device"], [569, 0, 1, "", "to_list"], [571, 0, 1, "", "to_numpy"], [572, 0, 1, "", "to_scalar"], [470, 0, 1, "", "top_k"], [663, 0, 1, "", "trace"], [286, 0, 1, "", "trapz"], [139, 0, 1, "", "tril"], [316, 0, 1, "", "trilu"], [471, 0, 1, "", "trim_zeros"], [140, 0, 1, "", "triu"], [287, 0, 1, "", "trunc"], [288, 0, 1, "", "trunc_divide"], [428, 0, 1, "", "truncated_svd"], [429, 0, 1, "", "tt_matrix_to_tensor"], [430, 0, 1, "", "tucker"], [472, 0, 1, "", "unfold"], [721, 0, 1, "", "unique_all"], [473, 0, 1, "", "unique_consecutive"], [722, 0, 1, "", "unique_counts"], [723, 0, 1, "", "unique_inverse"], [724, 0, 1, "", "unique_values"], [487, 0, 1, "", "unravel_index"], [317, 0, 1, "", "unsorted_segment_min"], [318, 0, 1, "", "unsorted_segment_sum"], [685, 0, 1, "", "unstack"], [585, 0, 1, "", "value_is_nan"], [664, 0, 1, "", "vander"], [738, 0, 1, "", "var"], [665, 0, 1, "", "vecdot"], [666, 0, 1, "", "vector_norm"], [667, 0, 1, "", "vector_to_skew_symmetric_matrix"], [474, 0, 1, "", "vsplit"], [475, 0, 1, "", "vstack"], [720, 0, 1, "", "where"], [346, 0, 1, "", "xlogy"], [686, 0, 1, "", "zero_pad"], [143, 0, 1, "", "zeros_like"], [347, 0, 1, "", "zeta"]], "ivy": [[606, 1, 1, "", "ArrayMode"], [602, 1, 1, "", "DefaultComplexDtype"], [603, 1, 1, "", "DefaultDevice"], [602, 1, 1, "", "DefaultDtype"], [602, 1, 1, "", "DefaultFloatDtype"], [602, 1, 1, "", "DefaultIntDtype"], [602, 1, 1, "", "DefaultUintDtype"], [369, 1, 1, "", "NativeSparseArray"], [601, 1, 1, "", "NestedSequence"], [606, 1, 1, "", "PreciseMode"], [603, 1, 1, "", "Profiler"], [369, 1, 1, "", "SparseArray"], [214, 2, 1, "", "abs"], [215, 2, 1, "", "acos"], [216, 2, 1, "", "acosh"], [607, 2, 1, "", "adam_step"], [607, 2, 1, "", "adam_update"], [372, 2, 1, "", "adaptive_avg_pool1d"], [373, 2, 1, "", "adaptive_avg_pool2d"], [374, 2, 1, "", "adaptive_max_pool2d"], [217, 2, 1, "", "add"], [359, 2, 1, "", "adjoint"], [620, 2, 1, "", "all"], [606, 2, 1, "", "all_equal"], [613, 2, 1, "", "all_nested_indices"], [355, 2, 1, "", "allclose"], [355, 2, 1, "", "amax"], [355, 2, 1, "", "amin"], [218, 2, 1, "", "angle"], [620, 2, 1, "", "any"], [601, 2, 1, "", "arange"], [375, 2, 1, "", "area_interpolate"], [606, 2, 1, "", "arg_info"], [606, 2, 1, "", "arg_names"], [616, 2, 1, "", "argmax"], [616, 2, 1, "", "argmin"], [618, 2, 1, "", "argsort"], [616, 2, 1, "", "argwhere"], [601, 2, 1, "", "array"], [606, 2, 1, "", "array_equal"], [187, 2, 1, "", "as_ivy_dev"], [144, 2, 1, "", "as_ivy_dtype"], [188, 2, 1, "", "as_native_dev"], [145, 2, 1, "", "as_native_dtype"], [361, 2, 1, "", "as_strided"], [601, 2, 1, "", "asarray"], [219, 2, 1, "", "asin"], [220, 2, 1, "", "asinh"], [606, 2, 1, "", "assert_supports_inplace"], [361, 2, 1, "", "associative_scan"], [146, 2, 1, "", "astype"], [221, 2, 1, "", "atan"], [222, 2, 1, "", "atan2"], [223, 2, 1, "", "atanh"], [361, 2, 1, "", "atleast_1d"], [361, 2, 1, "", "atleast_2d"], [361, 2, 1, "", "atleast_3d"], [376, 2, 1, "", "avg_pool1d"], [377, 2, 1, "", "avg_pool2d"], [378, 2, 1, "", "avg_pool3d"], [364, 2, 1, "", "batch_norm"], [359, 2, 1, "", "batched_outer"], [365, 2, 1, "", "bernoulli"], [365, 2, 1, "", "beta"], [355, 2, 1, "", "binarizer"], [610, 2, 1, "", "binary_cross_entropy"], [370, 2, 1, "", "bincount"], [357, 2, 1, "", "bind_custom_gradient_function"], [224, 2, 1, "", "bitwise_and"], [225, 2, 1, "", "bitwise_invert"], [226, 2, 1, "", "bitwise_left_shift"], [227, 2, 1, "", "bitwise_or"], [228, 2, 1, "", "bitwise_right_shift"], [229, 2, 1, "", "bitwise_xor"], [352, 2, 1, "", "blackman_window"], [147, 2, 1, "", "broadcast_arrays"], [361, 2, 1, "", "broadcast_shapes"], [148, 2, 1, "", "broadcast_to"], [606, 2, 1, "", "cache_fn"], [149, 2, 1, "", "can_cast"], [230, 2, 1, "", "ceil"], [350, 2, 1, "", "celu"], [150, 2, 1, "", "check_float"], [638, 2, 1, "", "cholesky"], [361, 2, 1, "", "choose"], [189, 2, 1, "", "clear_cached_mem_on_dev"], [611, 2, 1, "", "clip"], [606, 2, 1, "", "clip_matrix_norm"], [606, 2, 1, "", "clip_vector_norm"], [151, 2, 1, "", "closest_valid_dtype"], [600, 2, 1, "", "cmp_is"], [600, 2, 1, "", "cmp_isnot"], [361, 2, 1, "", "column_stack"], [611, 2, 1, "", "concat"], [361, 2, 1, "", "concat_from_sequence"], [359, 2, 1, "", "cond"], [355, 2, 1, "", "conj"], [611, 2, 1, "", "constant_pad"], [606, 2, 1, "", "container_types"], [621, 2, 1, "", "conv"], [622, 2, 1, "", "conv1d"], [623, 2, 1, "", "conv1d_transpose"], [624, 2, 1, "", "conv2d"], [625, 2, 1, "", "conv2d_transpose"], [626, 2, 1, "", "conv3d"], [627, 2, 1, "", "conv3d_transpose"], [628, 2, 1, "", "conv_general_dilated"], [629, 2, 1, "", "conv_general_transpose"], [601, 2, 1, "", "copy_array"], [613, 2, 1, "", "copy_nest"], [355, 2, 1, "", "copysign"], [370, 2, 1, "", "corrcoef"], [231, 2, 1, "", "cos"], [232, 2, 1, "", "cosh"], [355, 2, 1, "", "count_nonzero"], [370, 2, 1, "", "cov"], [639, 2, 1, "", "cross"], [610, 2, 1, "", "cross_entropy"], [370, 2, 1, "", "cummax"], [370, 2, 1, "", "cummin"], [619, 2, 1, "", "cumprod"], [619, 2, 1, "", "cumsum"], [606, 2, 1, "", "current_backend_str"], [379, 2, 1, "", "dct"], [606, 2, 1, "", "default"], [152, 2, 1, "", "default_complex_dtype"], [190, 2, 1, "", "default_device"], [153, 2, 1, "", "default_dtype"], [154, 2, 1, "", "default_float_dtype"], [155, 2, 1, "", "default_int_dtype"], [156, 2, 1, "", "default_uint_dtype"], [233, 2, 1, "", "deg2rad"], [630, 2, 1, "", "depthwise_conv2d"], [640, 2, 1, "", "det"], [191, 2, 1, "", "dev"], [192, 2, 1, "", "dev_util"], [380, 2, 1, "", "dft"], [641, 2, 1, "", "diag"], [359, 2, 1, "", "diagflat"], [642, 2, 1, "", "diagonal"], [355, 2, 1, "", "diff"], [355, 2, 1, "", "digamma"], [365, 2, 1, "", "dirichlet"], [234, 2, 1, "", "divide"], [359, 2, 1, "", "dot"], [631, 2, 1, "", "dropout"], [381, 2, 1, "", "dropout1d"], [382, 2, 1, "", "dropout2d"], [383, 2, 1, "", "dropout3d"], [361, 2, 1, "", "dsplit"], [361, 2, 1, "", "dstack"], [157, 2, 1, "", "dtype"], [158, 2, 1, "", "dtype_bits"], [613, 2, 1, "", "duplicate_array_index_chains"], [599, 6, 1, "", "e"], [359, 2, 1, "", "eig"], [644, 2, 1, "", "eigh"], [359, 2, 1, "", "eigh_tridiagonal"], [359, 2, 1, "", "eigvals"], [645, 2, 1, "", "eigvalsh"], [606, 2, 1, "", "einops_rearrange"], [606, 2, 1, "", "einops_reduce"], [606, 2, 1, "", "einops_repeat"], [619, 2, 1, "", "einsum"], [350, 2, 1, "", "elu"], [384, 2, 1, "", "embedding"], [601, 2, 1, "", "empty"], [601, 2, 1, "", "empty_like"], [235, 2, 1, "", "equal"], [236, 2, 1, "", "erf"], [355, 2, 1, "", "erfc"], [607, 2, 1, "", "execute_with_gradients"], [606, 2, 1, "", "exists"], [237, 2, 1, "", "exp"], [238, 2, 1, "", "exp2"], [361, 2, 1, "", "expand"], [611, 2, 1, "", "expand_dims"], [239, 2, 1, "", "expm1"], [601, 2, 1, "", "eye"], [352, 2, 1, "", "eye_like"], [385, 2, 1, "", "fft"], [386, 2, 1, "", "fft2"], [361, 2, 1, "", "fill_diagonal"], [159, 2, 1, "", "finfo"], [355, 2, 1, "", "fix"], [361, 2, 1, "", "flatten"], [611, 2, 1, "", "flip"], [361, 2, 1, "", "fliplr"], [361, 2, 1, "", "flipud"], [355, 2, 1, "", "float_power"], [240, 2, 1, "", "floor"], [241, 2, 1, "", "floor_divide"], [355, 2, 1, "", "fmax"], [242, 2, 1, "", "fmin"], [243, 2, 1, "", "fmod"], [361, 2, 1, "", "fold"], [612, 2, 1, "", "fomaml_step"], [600, 2, 1, "", "for_loop"], [606, 2, 1, "", "fourier_encode"], [355, 2, 1, "", "frexp"], [601, 2, 1, "", "from_dlpack"], [601, 2, 1, "", "frombuffer"], [601, 2, 1, "", "full"], [130, 2, 1, "", "full_like"], [193, 2, 1, "", "function_supported_devices"], [606, 2, 1, "", "function_supported_devices_and_dtypes"], [160, 2, 1, "", "function_supported_dtypes"], [194, 2, 1, "", "function_unsupported_devices"], [606, 2, 1, "", "function_unsupported_devices_and_dtypes"], [161, 2, 1, "", "function_unsupported_dtypes"], [365, 2, 1, "", "gamma"], [606, 2, 1, "", "gather"], [606, 2, 1, "", "gather_nd"], [244, 2, 1, "", "gcd"], [598, 2, 1, "", "gelu"], [359, 2, 1, "", "general_inner_product"], [387, 2, 1, "", "generate_einsum_equation"], [606, 2, 1, "", "get_all_arrays_in_memory"], [195, 2, 1, "", "get_all_ivy_arrays_on_dev"], [388, 2, 1, "", "get_interpolate_kernel"], [606, 2, 1, "", "get_item"], [606, 2, 1, "", "get_num_dims"], [606, 2, 1, "", "get_referrers_recursive"], [196, 2, 1, "", "gpu_is_available"], [607, 2, 1, "", "grad"], [355, 2, 1, "", "gradient"], [607, 2, 1, "", "gradient_descent_update"], [245, 2, 1, "", "greater"], [246, 2, 1, "", "greater_equal"], [364, 2, 1, "", "group_norm"], [352, 2, 1, "", "hamming_window"], [197, 2, 1, "", "handle_soft_device_variable"], [352, 2, 1, "", "hann_window"], [598, 2, 1, "", "hardswish"], [350, 2, 1, "", "hardtanh"], [606, 2, 1, "", "has_nans"], [361, 2, 1, "", "heaviside"], [359, 2, 1, "", "higher_order_moment"], [370, 2, 1, "", "histogram"], [361, 2, 1, "", "hsplit"], [361, 2, 1, "", "hstack"], [360, 2, 1, "", "huber_loss"], [355, 2, 1, "", "hypot"], [361, 2, 1, "", "i0"], [389, 2, 1, "", "idct"], [600, 2, 1, "", "if_else"], [358, 2, 1, "", "ifft"], [358, 2, 1, "", "ifftn"], [370, 2, 1, "", "igamma"], [162, 2, 1, "", "iinfo"], [247, 2, 1, "", "imag"], [613, 2, 1, "", "index_nest"], [352, 2, 1, "", "indices"], [599, 6, 1, "", "inf"], [163, 2, 1, "", "infer_default_dtype"], [359, 2, 1, "", "initialize_tucker"], [646, 2, 1, "", "inner"], [606, 2, 1, "", "inplace_arrays_supported"], [606, 2, 1, "", "inplace_decrement"], [606, 2, 1, "", "inplace_increment"], [606, 2, 1, "", "inplace_update"], [606, 2, 1, "", "inplace_variables_supported"], [613, 2, 1, "", "insert_into_nest_at_index"], [613, 2, 1, "", "insert_into_nest_at_indices"], [364, 2, 1, "", "instance_norm"], [358, 2, 1, "", "interp"], [358, 2, 1, "", "interpolate"], [647, 2, 1, "", "inv"], [164, 2, 1, "", "invalid_dtype"], [368, 2, 1, "", "invert_permutation"], [606, 2, 1, "", "is_array"], [165, 2, 1, "", "is_bool_dtype"], [166, 2, 1, "", "is_complex_dtype"], [167, 2, 1, "", "is_float_dtype"], [168, 2, 1, "", "is_hashable_dtype"], [169, 2, 1, "", "is_int_dtype"], [606, 2, 1, "", "is_ivy_array"], [606, 2, 1, "", "is_ivy_container"], [606, 2, 1, "", "is_ivy_nested_array"], [369, 2, 1, "", "is_ivy_sparse_array"], [606, 2, 1, "", "is_native_array"], [170, 2, 1, "", "is_native_dtype"], [369, 2, 1, "", "is_native_sparse_array"], [171, 2, 1, "", "is_uint_dtype"], [355, 2, 1, "", "isclose"], [248, 2, 1, "", "isfinite"], [606, 2, 1, "", "isin"], [249, 2, 1, "", "isinf"], [250, 2, 1, "", "isnan"], [251, 2, 1, "", "isreal"], [606, 2, 1, "", "isscalar"], [606, 2, 1, "", "itemsize"], [607, 2, 1, "", "jac"], [352, 2, 1, "", "kaiser_bessel_derived_window"], [352, 2, 1, "", "kaiser_window"], [359, 2, 1, "", "khatri_rao"], [360, 2, 1, "", "kl_div"], [359, 2, 1, "", "kron"], [359, 2, 1, "", "kronecker"], [360, 2, 1, "", "l1_loss"], [364, 2, 1, "", "l1_normalize"], [364, 2, 1, "", "l2_normalize"], [607, 2, 1, "", "lamb_update"], [607, 2, 1, "", "lars_update"], [614, 2, 1, "", "layer_norm"], [252, 2, 1, "", "lcm"], [355, 2, 1, "", "ldexp"], [598, 2, 1, "", "leaky_relu"], [355, 2, 1, "", "lerp"], [253, 2, 1, "", "less"], [254, 2, 1, "", "less_equal"], [368, 2, 1, "", "lexsort"], [355, 2, 1, "", "lgamma"], [632, 2, 1, "", "linear"], [131, 2, 1, "", "linspace"], [620, 2, 1, "", "load"], [255, 2, 1, "", "log"], [256, 2, 1, "", "log10"], [257, 2, 1, "", "log1p"], [258, 2, 1, "", "log2"], [360, 2, 1, "", "log_poisson_loss"], [598, 2, 1, "", "log_softmax"], [259, 2, 1, "", "logaddexp"], [260, 2, 1, "", "logaddexp2"], [261, 2, 1, "", "logical_and"], [262, 2, 1, "", "logical_not"], [263, 2, 1, "", "logical_or"], [264, 2, 1, "", "logical_xor"], [350, 2, 1, "", "logit"], [350, 2, 1, "", "logsigmoid"], [132, 2, 1, "", "logspace"], [364, 2, 1, "", "lp_normalize"], [633, 2, 1, "", "lstm_update"], [648, 2, 1, "", "lu_factor"], [359, 2, 1, "", "make_svd_non_negative"], [612, 2, 1, "", "maml_step"], [613, 2, 1, "", "map"], [613, 2, 1, "", "map_nest_at_index"], [613, 2, 1, "", "map_nest_at_indices"], [606, 2, 1, "", "match_kwargs"], [649, 2, 1, "", "matmul"], [361, 2, 1, "", "matricize"], [359, 2, 1, "", "matrix_exp"], [609, 2, 1, "", "matrix_norm"], [609, 2, 1, "", "matrix_power"], [609, 2, 1, "", "matrix_rank"], [609, 2, 1, "", "matrix_transpose"], [619, 2, 1, "", "max"], [358, 2, 1, "", "max_pool1d"], [358, 2, 1, "", "max_pool2d"], [358, 2, 1, "", "max_pool3d"], [358, 2, 1, "", "max_unpool1d"], [265, 2, 1, "", "maximum"], [619, 2, 1, "", "mean"], [370, 2, 1, "", "median"], [352, 2, 1, "", "mel_weight_matrix"], [133, 2, 1, "", "meshgrid"], [619, 2, 1, "", "min"], [266, 2, 1, "", "minimum"], [598, 2, 1, "", "mish"], [359, 2, 1, "", "mode_dot"], [355, 2, 1, "", "modf"], [361, 2, 1, "", "moveaxis"], [618, 2, 1, "", "msort"], [359, 2, 1, "", "multi_dot"], [634, 2, 1, "", "multi_head_attention"], [613, 2, 1, "", "multi_index_nest"], [359, 2, 1, "", "multi_mode_dot"], [615, 2, 1, "", "multinomial"], [267, 2, 1, "", "multiply"], [606, 2, 1, "", "multiprocessing"], [599, 6, 1, "", "nan"], [268, 2, 1, "", "nan_to_num"], [370, 2, 1, "", "nanmean"], [370, 2, 1, "", "nanmedian"], [370, 2, 1, "", "nanprod"], [355, 2, 1, "", "nansum"], [134, 2, 1, "", "native_array"], [369, 2, 1, "", "native_sparse_array"], [369, 2, 1, "", "native_sparse_array_to_indices_values_and_shape"], [352, 2, 1, "", "ndenumerate"], [352, 2, 1, "", "ndindex"], [358, 2, 1, "", "nearest_interpolate"], [269, 2, 1, "", "negative"], [613, 2, 1, "", "nested_any"], [613, 2, 1, "", "nested_argwhere"], [613, 2, 1, "", "nested_map"], [613, 2, 1, "", "nested_multi_map"], [599, 6, 1, "", "newaxis"], [355, 2, 1, "", "nextafter"], [635, 2, 1, "", "nms"], [616, 2, 1, "", "nonzero"], [270, 2, 1, "", "not_equal"], [606, 2, 1, "", "num_arrays_in_memory"], [198, 2, 1, "", "num_cpu_cores"], [199, 2, 1, "", "num_gpus"], [200, 2, 1, "", "num_ivy_arrays_on_dev"], [135, 2, 1, "", "one_hot"], [136, 2, 1, "", "ones"], [137, 2, 1, "", "ones_like"], [607, 2, 1, "", "optimizer_update"], [371, 2, 1, "", "optional_get_element"], [609, 2, 1, "", "outer"], [361, 2, 1, "", "pad"], [361, 2, 1, "", "partial_fold"], [361, 2, 1, "", "partial_tensor_to_vec"], [359, 2, 1, "", "partial_tucker"], [361, 2, 1, "", "partial_unfold"], [361, 2, 1, "", "partial_vec_to_tensor"], [201, 2, 1, "", "percent_used_mem_on_dev"], [611, 2, 1, "", "permute_dims"], [599, 6, 1, "", "pi"], [609, 2, 1, "", "pinv"], [365, 2, 1, "", "poisson"], [360, 2, 1, "", "poisson_nll_loss"], [358, 2, 1, "", "pool"], [271, 2, 1, "", "positive"], [272, 2, 1, "", "pow"], [350, 2, 1, "", "prelu"], [606, 2, 1, "", "print_all_arrays_in_memory"], [202, 2, 1, "", "print_all_ivy_arrays_on_dev"], [619, 2, 1, "", "prod"], [172, 2, 1, "", "promote_types"], [173, 2, 1, "", "promote_types_of_inputs"], [613, 2, 1, "", "prune_empty"], [613, 2, 1, "", "prune_nest_at_index"], [613, 2, 1, "", "prune_nest_at_indices"], [361, 2, 1, "", "put_along_axis"], [609, 2, 1, "", "qr"], [370, 2, 1, "", "quantile"], [273, 2, 1, "", "rad2deg"], [615, 2, 1, "", "randint"], [352, 2, 1, "", "random_cp"], [615, 2, 1, "", "random_normal"], [352, 2, 1, "", "random_parafac2"], [352, 2, 1, "", "random_tr"], [352, 2, 1, "", "random_tt"], [352, 2, 1, "", "random_tucker"], [615, 2, 1, "", "random_uniform"], [274, 2, 1, "", "real"], [275, 2, 1, "", "reciprocal"], [356, 2, 1, "", "reduce"], [358, 2, 1, "", "reduce_window"], [598, 2, 1, "", "relu"], [350, 2, 1, "", "relu6"], [276, 2, 1, "", "remainder"], [611, 2, 1, "", "repeat"], [612, 2, 1, "", "reptile_step"], [611, 2, 1, "", "reshape"], [174, 2, 1, "", "result_type"], [358, 2, 1, "", "rfft"], [358, 2, 1, "", "rfftn"], [636, 2, 1, "", "roi_align"], [611, 2, 1, "", "roll"], [361, 2, 1, "", "rot90"], [277, 2, 1, "", "round"], [620, 2, 1, "", "save"], [637, 2, 1, "", "scaled_dot_product_attention"], [606, 2, 1, "", "scatter_flat"], [606, 2, 1, "", "scatter_nd"], [618, 2, 1, "", "searchsorted"], [615, 2, 1, "", "seed"], [350, 2, 1, "", "selu"], [606, 2, 1, "", "set_array_mode"], [175, 2, 1, "", "set_default_complex_dtype"], [203, 2, 1, "", "set_default_device"], [176, 2, 1, "", "set_default_dtype"], [177, 2, 1, "", "set_default_float_dtype"], [178, 2, 1, "", "set_default_int_dtype"], [179, 2, 1, "", "set_default_uint_dtype"], [606, 2, 1, "", "set_exception_trace_mode"], [606, 2, 1, "", "set_inplace_mode"], [606, 2, 1, "", "set_item"], [606, 2, 1, "", "set_min_base"], [606, 2, 1, "", "set_min_denominator"], [613, 2, 1, "", "set_nest_at_index"], [613, 2, 1, "", "set_nest_at_indices"], [606, 2, 1, "", "set_nestable_mode"], [606, 2, 1, "", "set_precise_mode"], [606, 2, 1, "", "set_queue_timeout"], [606, 2, 1, "", "set_shape_array_mode"], [606, 2, 1, "", "set_show_func_wrapper_trace_mode"], [204, 2, 1, "", "set_soft_device_mode"], [205, 2, 1, "", "set_split_factor"], [606, 2, 1, "", "set_tmp_dir"], [606, 2, 1, "", "shape"], [615, 2, 1, "", "shuffle"], [598, 2, 1, "", "sigmoid"], [278, 2, 1, "", "sign"], [355, 2, 1, "", "signbit"], [350, 2, 1, "", "silu"], [279, 2, 1, "", "sin"], [355, 2, 1, "", "sinc"], [280, 2, 1, "", "sinh"], [358, 2, 1, "", "sliding_window"], [609, 2, 1, "", "slogdet"], [360, 2, 1, "", "smooth_l1_loss"], [360, 2, 1, "", "soft_margin_loss"], [361, 2, 1, "", "soft_thresholding"], [598, 2, 1, "", "softmax"], [598, 2, 1, "", "softplus"], [598, 2, 1, "", "softsign"], [609, 2, 1, "", "solve"], [359, 2, 1, "", "solve_triangular"], [618, 2, 1, "", "sort"], [610, 2, 1, "", "sparse_cross_entropy"], [355, 2, 1, "", "sparsify_tensor"], [611, 2, 1, "", "split"], [206, 2, 1, "", "split_factor"], [207, 2, 1, "", "split_func_call"], [281, 2, 1, "", "sqrt"], [282, 2, 1, "", "square"], [611, 2, 1, "", "squeeze"], [606, 2, 1, "", "stable_divide"], [606, 2, 1, "", "stable_pow"], [611, 2, 1, "", "stack"], [619, 2, 1, "", "std"], [358, 2, 1, "", "stft"], [607, 2, 1, "", "stop_gradient"], [606, 2, 1, "", "strides"], [283, 2, 1, "", "subtract"], [619, 2, 1, "", "sum"], [606, 2, 1, "", "supports_inplace_updates"], [609, 2, 1, "", "svd"], [359, 2, 1, "", "svd_flip"], [609, 2, 1, "", "svdvals"], [611, 2, 1, "", "swapaxes"], [361, 2, 1, "", "take_along_axis"], [284, 2, 1, "", "tan"], [285, 2, 1, "", "tanh"], [350, 2, 1, "", "tanhshrink"], [359, 2, 1, "", "tensor_train"], [609, 2, 1, "", "tensordot"], [609, 2, 1, "", "tensorsolve"], [350, 2, 1, "", "thresholded_relu"], [611, 2, 1, "", "tile"], [208, 2, 1, "", "to_device"], [138, 2, 1, "", "to_dlpack"], [606, 2, 1, "", "to_ivy_shape"], [606, 2, 1, "", "to_list"], [606, 2, 1, "", "to_native_shape"], [606, 2, 1, "", "to_numpy"], [606, 2, 1, "", "to_scalar"], [361, 2, 1, "", "top_k"], [209, 2, 1, "", "total_mem_on_dev"], [210, 2, 1, "", "tpu_is_available"], [609, 2, 1, "", "trace"], [831, 2, 1, "", "trace_graph"], [832, 2, 1, "", "transpile"], [286, 2, 1, "", "trapz"], [139, 2, 1, "", "tril"], [352, 2, 1, "", "tril_indices"], [352, 2, 1, "", "trilu"], [361, 2, 1, "", "trim_zeros"], [140, 2, 1, "", "triu"], [141, 2, 1, "", "triu_indices"], [287, 2, 1, "", "trunc"], [288, 2, 1, "", "trunc_divide"], [359, 2, 1, "", "truncated_svd"], [606, 2, 1, "", "try_else_none"], [600, 2, 1, "", "try_except"], [359, 2, 1, "", "tt_matrix_to_tensor"], [359, 2, 1, "", "tucker"], [180, 2, 1, "", "type_promote_arrays"], [361, 2, 1, "", "unfold"], [833, 2, 1, "", "unify"], [617, 2, 1, "", "unique_all"], [361, 2, 1, "", "unique_consecutive"], [617, 2, 1, "", "unique_counts"], [617, 2, 1, "", "unique_inverse"], [617, 2, 1, "", "unique_values"], [366, 2, 1, "", "unravel_index"], [606, 2, 1, "", "unset_array_mode"], [181, 2, 1, "", "unset_default_complex_dtype"], [211, 2, 1, "", "unset_default_device"], [182, 2, 1, "", "unset_default_dtype"], [183, 2, 1, "", "unset_default_float_dtype"], [184, 2, 1, "", "unset_default_int_dtype"], [185, 2, 1, "", "unset_default_uint_dtype"], [606, 2, 1, "", "unset_exception_trace_mode"], [606, 2, 1, "", "unset_inplace_mode"], [606, 2, 1, "", "unset_min_base"], [606, 2, 1, "", "unset_min_denominator"], [606, 2, 1, "", "unset_nestable_mode"], [606, 2, 1, "", "unset_precise_mode"], [606, 2, 1, "", "unset_queue_timeout"], [606, 2, 1, "", "unset_shape_array_mode"], [606, 2, 1, "", "unset_show_func_wrapper_trace_mode"], [212, 2, 1, "", "unset_soft_device_mode"], [606, 2, 1, "", "unset_tmp_dir"], [352, 2, 1, "", "unsorted_segment_min"], [352, 2, 1, "", "unsorted_segment_sum"], [611, 2, 1, "", "unstack"], [213, 2, 1, "", "used_mem_on_dev"], [186, 2, 1, "", "valid_dtype"], [607, 2, 1, "", "value_and_grad"], [606, 2, 1, "", "value_is_nan"], [609, 2, 1, "", "vander"], [619, 2, 1, "", "var"], [609, 2, 1, "", "vecdot"], [609, 2, 1, "", "vector_norm"], [609, 2, 1, "", "vector_to_skew_symmetric_matrix"], [606, 2, 1, "", "vmap"], [352, 2, 1, "", "vorbis_window"], [361, 2, 1, "", "vsplit"], [361, 2, 1, "", "vstack"], [616, 2, 1, "", "where"], [600, 2, 1, "", "while_loop"], [355, 2, 1, "", "xlogy"], [611, 2, 1, "", "zero_pad"], [142, 2, 1, "", "zeros"], [143, 2, 1, "", "zeros_like"], [355, 2, 1, "", "zeta"]], "ivy.Container": [[214, 0, 1, "", "abs"], [215, 0, 1, "", "acos"], [216, 0, 1, "", "acosh"], [587, 0, 1, "", "adam_step"], [588, 0, 1, "", "adam_update"], [372, 0, 1, "", "adaptive_avg_pool1d"], [373, 0, 1, "", "adaptive_avg_pool2d"], [374, 0, 1, "", "adaptive_max_pool2d"], [217, 0, 1, "", "add"], [405, 0, 1, "", "adjoint"], [739, 0, 1, "", "all"], [507, 0, 1, "", "all_equal"], [320, 0, 1, "", "allclose"], [321, 0, 1, "", "amax"], [322, 0, 1, "", "amin"], [218, 0, 1, "", "angle"], [740, 0, 1, "", "any"], [716, 0, 1, "", "argmax"], [717, 0, 1, "", "argmin"], [725, 0, 1, "", "argsort"], [718, 0, 1, "", "argwhere"], [510, 0, 1, "", "array_equal"], [438, 0, 1, "", "as_strided"], [122, 0, 1, "", "asarray"], [219, 0, 1, "", "asin"], [220, 0, 1, "", "asinh"], [511, 0, 1, "", "assert_supports_inplace"], [439, 0, 1, "", "associative_scan"], [146, 0, 1, "", "astype"], [221, 0, 1, "", "atan"], [222, 0, 1, "", "atan2"], [223, 0, 1, "", "atanh"], [440, 0, 1, "", "atleast_1d"], [441, 0, 1, "", "atleast_2d"], [442, 0, 1, "", "atleast_3d"], [376, 0, 1, "", "avg_pool1d"], [377, 0, 1, "", "avg_pool2d"], [378, 0, 1, "", "avg_pool3d"], [476, 0, 1, "", "batch_norm"], [406, 0, 1, "", "batched_outer"], [482, 0, 1, "", "bernoulli"], [483, 0, 1, "", "beta"], [323, 0, 1, "", "binarizer"], [668, 0, 1, "", "binary_cross_entropy"], [494, 0, 1, "", "bincount"], [224, 0, 1, "", "bitwise_and"], [225, 0, 1, "", "bitwise_invert"], [226, 0, 1, "", "bitwise_left_shift"], [227, 0, 1, "", "bitwise_or"], [228, 0, 1, "", "bitwise_right_shift"], [229, 0, 1, "", "bitwise_xor"], [300, 0, 1, "", "blackman_window"], [147, 0, 1, "", "broadcast_arrays"], [443, 0, 1, "", "broadcast_shapes"], [148, 0, 1, "", "broadcast_to"], [149, 0, 1, "", "can_cast"], [230, 0, 1, "", "ceil"], [289, 0, 1, "", "celu"], [638, 0, 1, "", "cholesky"], [671, 0, 1, "", "clip"], [513, 0, 1, "", "clip_matrix_norm"], [514, 0, 1, "", "clip_vector_norm"], [445, 0, 1, "", "column_stack"], [672, 0, 1, "", "concat"], [446, 0, 1, "", "concat_from_sequence"], [407, 0, 1, "", "cond"], [324, 0, 1, "", "conj"], [673, 0, 1, "", "constant_pad"], [622, 0, 1, "", "conv1d"], [623, 0, 1, "", "conv1d_transpose"], [624, 0, 1, "", "conv2d"], [625, 0, 1, "", "conv2d_transpose"], [626, 0, 1, "", "conv3d"], [627, 0, 1, "", "conv3d_transpose"], [123, 0, 1, "", "copy_array"], [325, 0, 1, "", "copysign"], [495, 0, 1, "", "corrcoef"], [231, 0, 1, "", "cos"], [232, 0, 1, "", "cosh"], [326, 0, 1, "", "count_nonzero"], [496, 0, 1, "", "cov"], [639, 0, 1, "", "cross"], [669, 0, 1, "", "cross_entropy"], [497, 0, 1, "", "cummax"], [498, 0, 1, "", "cummin"], [729, 0, 1, "", "cumprod"], [730, 0, 1, "", "cumsum"], [379, 0, 1, "", "dct"], [233, 0, 1, "", "deg2rad"], [630, 0, 1, "", "depthwise_conv2d"], [640, 0, 1, "", "det"], [191, 0, 1, "", "dev"], [380, 0, 1, "", "dft"], [641, 0, 1, "", "diag"], [408, 0, 1, "", "diagflat"], [642, 0, 1, "", "diagonal"], [327, 0, 1, "", "diff"], [328, 0, 1, "", "digamma"], [484, 0, 1, "", "dirichlet"], [234, 0, 1, "", "divide"], [409, 0, 1, "", "dot"], [631, 0, 1, "", "dropout"], [381, 0, 1, "", "dropout1d"], [382, 0, 1, "", "dropout2d"], [383, 0, 1, "", "dropout3d"], [447, 0, 1, "", "dsplit"], [448, 0, 1, "", "dstack"], [157, 0, 1, "", "dtype"], [643, 0, 1, "", "eig"], [644, 0, 1, "", "eigh"], [411, 0, 1, "", "eigh_tridiagonal"], [412, 0, 1, "", "eigvals"], [645, 0, 1, "", "eigvalsh"], [518, 0, 1, "", "einops_rearrange"], [519, 0, 1, "", "einops_reduce"], [520, 0, 1, "", "einops_repeat"], [731, 0, 1, "", "einsum"], [290, 0, 1, "", "elu"], [384, 0, 1, "", "embedding"], [125, 0, 1, "", "empty_like"], [235, 0, 1, "", "equal"], [236, 0, 1, "", "erf"], [329, 0, 1, "", "erfc"], [521, 0, 1, "", "exists"], [237, 0, 1, "", "exp"], [238, 0, 1, "", "exp2"], [449, 0, 1, "", "expand"], [674, 0, 1, "", "expand_dims"], [239, 0, 1, "", "expm1"], [301, 0, 1, "", "eye_like"], [385, 0, 1, "", "fft"], [450, 0, 1, "", "fill_diagonal"], [159, 0, 1, "", "finfo"], [330, 0, 1, "", "fix"], [451, 0, 1, "", "flatten"], [675, 0, 1, "", "flip"], [452, 0, 1, "", "fliplr"], [453, 0, 1, "", "flipud"], [331, 0, 1, "", "float_power"], [240, 0, 1, "", "floor"], [241, 0, 1, "", "floor_divide"], [332, 0, 1, "", "fmax"], [242, 0, 1, "", "fmin"], [243, 0, 1, "", "fmod"], [454, 0, 1, "", "fold"], [522, 0, 1, "", "fourier_encode"], [333, 0, 1, "", "frexp"], [127, 0, 1, "", "from_dlpack"], [128, 0, 1, "", "frombuffer"], [130, 0, 1, "", "full_like"], [485, 0, 1, "", "gamma"], [525, 0, 1, "", "gather"], [526, 0, 1, "", "gather_nd"], [244, 0, 1, "", "gcd"], [104, 0, 1, "", "gelu"], [413, 0, 1, "", "general_inner_product"], [529, 0, 1, "", "get_num_dims"], [334, 0, 1, "", "gradient"], [591, 0, 1, "", "gradient_descent_update"], [245, 0, 1, "", "greater"], [246, 0, 1, "", "greater_equal"], [477, 0, 1, "", "group_norm"], [302, 0, 1, "", "hamming_window"], [303, 0, 1, "", "hann_window"], [105, 0, 1, "", "hardswish"], [291, 0, 1, "", "hardtanh"], [531, 0, 1, "", "has_nans"], [455, 0, 1, "", "heaviside"], [414, 0, 1, "", "higher_order_moment"], [499, 0, 1, "", "histogram"], [456, 0, 1, "", "hsplit"], [457, 0, 1, "", "hstack"], [431, 0, 1, "", "huber_loss"], [335, 0, 1, "", "hypot"], [458, 0, 1, "", "i0"], [389, 0, 1, "", "idct"], [390, 0, 1, "", "ifft"], [391, 0, 1, "", "ifftn"], [500, 0, 1, "", "igamma"], [162, 0, 1, "", "iinfo"], [247, 0, 1, "", "imag"], [415, 0, 1, "", "initialize_tucker"], [646, 0, 1, "", "inner"], [533, 0, 1, "", "inplace_decrement"], [534, 0, 1, "", "inplace_increment"], [535, 0, 1, "", "inplace_update"], [478, 0, 1, "", "instance_norm"], [393, 0, 1, "", "interpolate"], [647, 0, 1, "", "inv"], [488, 0, 1, "", "invert_permutation"], [537, 0, 1, "", "is_array"], [165, 0, 1, "", "is_bool_dtype"], [166, 0, 1, "", "is_complex_dtype"], [167, 0, 1, "", "is_float_dtype"], [169, 0, 1, "", "is_int_dtype"], [538, 0, 1, "", "is_ivy_array"], [541, 0, 1, "", "is_native_array"], [171, 0, 1, "", "is_uint_dtype"], [336, 0, 1, "", "isclose"], [248, 0, 1, "", "isfinite"], [542, 0, 1, "", "isin"], [249, 0, 1, "", "isinf"], [250, 0, 1, "", "isnan"], [251, 0, 1, "", "isreal"], [544, 0, 1, "", "itemsize"], [305, 0, 1, "", "kaiser_bessel_derived_window"], [306, 0, 1, "", "kaiser_window"], [432, 0, 1, "", "kl_div"], [417, 0, 1, "", "kron"], [433, 0, 1, "", "l1_loss"], [479, 0, 1, "", "l1_normalize"], [480, 0, 1, "", "l2_normalize"], [593, 0, 1, "", "lamb_update"], [594, 0, 1, "", "lars_update"], [709, 0, 1, "", "layer_norm"], [252, 0, 1, "", "lcm"], [337, 0, 1, "", "ldexp"], [106, 0, 1, "", "leaky_relu"], [338, 0, 1, "", "lerp"], [253, 0, 1, "", "less"], [254, 0, 1, "", "less_equal"], [489, 0, 1, "", "lexsort"], [632, 0, 1, "", "linear"], [131, 0, 1, "", "linspace"], [255, 0, 1, "", "log"], [256, 0, 1, "", "log10"], [257, 0, 1, "", "log1p"], [258, 0, 1, "", "log2"], [434, 0, 1, "", "log_poisson_loss"], [107, 0, 1, "", "log_softmax"], [259, 0, 1, "", "logaddexp"], [260, 0, 1, "", "logaddexp2"], [261, 0, 1, "", "logical_and"], [262, 0, 1, "", "logical_not"], [263, 0, 1, "", "logical_or"], [264, 0, 1, "", "logical_xor"], [292, 0, 1, "", "logit"], [293, 0, 1, "", "logsigmoid"], [132, 0, 1, "", "logspace"], [481, 0, 1, "", "lp_normalize"], [633, 0, 1, "", "lstm_update"], [419, 0, 1, "", "make_svd_non_negative"], [649, 0, 1, "", "matmul"], [459, 0, 1, "", "matricize"], [420, 0, 1, "", "matrix_exp"], [650, 0, 1, "", "matrix_norm"], [651, 0, 1, "", "matrix_power"], [652, 0, 1, "", "matrix_rank"], [653, 0, 1, "", "matrix_transpose"], [732, 0, 1, "", "max"], [394, 0, 1, "", "max_pool1d"], [395, 0, 1, "", "max_pool2d"], [396, 0, 1, "", "max_pool3d"], [397, 0, 1, "", "max_unpool1d"], [265, 0, 1, "", "maximum"], [733, 0, 1, "", "mean"], [501, 0, 1, "", "median"], [307, 0, 1, "", "mel_weight_matrix"], [133, 0, 1, "", "meshgrid"], [734, 0, 1, "", "min"], [266, 0, 1, "", "minimum"], [108, 0, 1, "", "mish"], [421, 0, 1, "", "mode_dot"], [340, 0, 1, "", "modf"], [460, 0, 1, "", "moveaxis"], [726, 0, 1, "", "msort"], [422, 0, 1, "", "multi_dot"], [634, 0, 1, "", "multi_head_attention"], [423, 0, 1, "", "multi_mode_dot"], [710, 0, 1, "", "multinomial"], [267, 0, 1, "", "multiply"], [268, 0, 1, "", "nan_to_num"], [502, 0, 1, "", "nanmean"], [503, 0, 1, "", "nanmedian"], [504, 0, 1, "", "nanprod"], [341, 0, 1, "", "nansum"], [134, 0, 1, "", "native_array"], [269, 0, 1, "", "negative"], [342, 0, 1, "", "nextafter"], [719, 0, 1, "", "nonzero"], [270, 0, 1, "", "not_equal"], [135, 0, 1, "", "one_hot"], [137, 0, 1, "", "ones_like"], [595, 0, 1, "", "optimizer_update"], [506, 0, 1, "", "optional_get_element"], [654, 0, 1, "", "outer"], [461, 0, 1, "", "pad"], [462, 0, 1, "", "partial_fold"], [463, 0, 1, "", "partial_tensor_to_vec"], [424, 0, 1, "", "partial_tucker"], [464, 0, 1, "", "partial_unfold"], [465, 0, 1, "", "partial_vec_to_tensor"], [676, 0, 1, "", "permute_dims"], [655, 0, 1, "", "pinv"], [486, 0, 1, "", "poisson"], [435, 0, 1, "", "poisson_nll_loss"], [271, 0, 1, "", "positive"], [272, 0, 1, "", "pow"], [294, 0, 1, "", "prelu"], [735, 0, 1, "", "prod"], [466, 0, 1, "", "put_along_axis"], [656, 0, 1, "", "qr"], [505, 0, 1, "", "quantile"], [273, 0, 1, "", "rad2deg"], [711, 0, 1, "", "randint"], [712, 0, 1, "", "random_normal"], [713, 0, 1, "", "random_uniform"], [274, 0, 1, "", "real"], [275, 0, 1, "", "reciprocal"], [348, 0, 1, "", "reduce"], [400, 0, 1, "", "reduce_window"], [109, 0, 1, "", "relu"], [295, 0, 1, "", "relu6"], [276, 0, 1, "", "remainder"], [677, 0, 1, "", "repeat"], [678, 0, 1, "", "reshape"], [174, 0, 1, "", "result_type"], [401, 0, 1, "", "rfft"], [402, 0, 1, "", "rfftn"], [679, 0, 1, "", "roll"], [467, 0, 1, "", "rot90"], [277, 0, 1, "", "round"], [637, 0, 1, "", "scaled_dot_product_attention"], [549, 0, 1, "", "scatter_flat"], [550, 0, 1, "", "scatter_nd"], [727, 0, 1, "", "searchsorted"], [296, 0, 1, "", "selu"], [715, 0, 1, "", "shuffle"], [110, 0, 1, "", "sigmoid"], [278, 0, 1, "", "sign"], [343, 0, 1, "", "signbit"], [297, 0, 1, "", "silu"], [279, 0, 1, "", "sin"], [344, 0, 1, "", "sinc"], [280, 0, 1, "", "sinh"], [403, 0, 1, "", "sliding_window"], [657, 0, 1, "", "slogdet"], [436, 0, 1, "", "smooth_l1_loss"], [437, 0, 1, "", "soft_margin_loss"], [468, 0, 1, "", "soft_thresholding"], [111, 0, 1, "", "softmax"], [112, 0, 1, "", "softplus"], [658, 0, 1, "", "solve"], [728, 0, 1, "", "sort"], [670, 0, 1, "", "sparse_cross_entropy"], [345, 0, 1, "", "sparsify_tensor"], [680, 0, 1, "", "split"], [281, 0, 1, "", "sqrt"], [282, 0, 1, "", "square"], [681, 0, 1, "", "squeeze"], [564, 0, 1, "", "stable_divide"], [565, 0, 1, "", "stable_pow"], [682, 0, 1, "", "stack"], [736, 0, 1, "", "std"], [404, 0, 1, "", "stft"], [596, 0, 1, "", "stop_gradient"], [566, 0, 1, "", "strides"], [283, 0, 1, "", "subtract"], [737, 0, 1, "", "sum"], [567, 0, 1, "", "supports_inplace_updates"], [659, 0, 1, "", "svd"], [426, 0, 1, "", "svd_flip"], [660, 0, 1, "", "svdvals"], [683, 0, 1, "", "swapaxes"], [469, 0, 1, "", "take_along_axis"], [284, 0, 1, "", "tan"], [285, 0, 1, "", "tanh"], [298, 0, 1, "", "tanhshrink"], [427, 0, 1, "", "tensor_train"], [661, 0, 1, "", "tensordot"], [662, 0, 1, "", "tensorsolve"], [299, 0, 1, "", "thresholded_relu"], [684, 0, 1, "", "tile"], [208, 0, 1, "", "to_device"], [569, 0, 1, "", "to_list"], [571, 0, 1, "", "to_numpy"], [572, 0, 1, "", "to_scalar"], [470, 0, 1, "", "top_k"], [663, 0, 1, "", "trace"], [286, 0, 1, "", "trapz"], [139, 0, 1, "", "tril"], [315, 0, 1, "", "tril_indices"], [316, 0, 1, "", "trilu"], [471, 0, 1, "", "trim_zeros"], [140, 0, 1, "", "triu"], [141, 0, 1, "", "triu_indices"], [287, 0, 1, "", "trunc"], [288, 0, 1, "", "trunc_divide"], [428, 0, 1, "", "truncated_svd"], [429, 0, 1, "", "tt_matrix_to_tensor"], [430, 0, 1, "", "tucker"], [472, 0, 1, "", "unfold"], [721, 0, 1, "", "unique_all"], [473, 0, 1, "", "unique_consecutive"], [722, 0, 1, "", "unique_counts"], [723, 0, 1, "", "unique_inverse"], [724, 0, 1, "", "unique_values"], [487, 0, 1, "", "unravel_index"], [317, 0, 1, "", "unsorted_segment_min"], [318, 0, 1, "", "unsorted_segment_sum"], [685, 0, 1, "", "unstack"], [585, 0, 1, "", "value_is_nan"], [664, 0, 1, "", "vander"], [738, 0, 1, "", "var"], [665, 0, 1, "", "vecdot"], [666, 0, 1, "", "vector_norm"], [667, 0, 1, "", "vector_to_skew_symmetric_matrix"], [319, 0, 1, "", "vorbis_window"], [474, 0, 1, "", "vsplit"], [475, 0, 1, "", "vstack"], [720, 0, 1, "", "where"], [346, 0, 1, "", "xlogy"], [686, 0, 1, "", "zero_pad"], [143, 0, 1, "", "zeros_like"], [347, 0, 1, "", "zeta"]], "ivy.data_classes.array": [[45, 3, 0, "-", "activations"], [96, 3, 0, "-", "array"], [46, 3, 0, "-", "conversions"], [47, 3, 0, "-", "creation"], [48, 3, 0, "-", "data_type"], [49, 3, 0, "-", "device"], [50, 3, 0, "-", "elementwise"], [51, 3, 0, "-", "experimental"], [52, 3, 0, "-", "general"], [53, 3, 0, "-", "gradients"], [54, 3, 0, "-", "image"], [55, 3, 0, "-", "layers"], [56, 3, 0, "-", "linear_algebra"], [57, 3, 0, "-", "losses"], [58, 3, 0, "-", "manipulation"], [59, 3, 0, "-", "norms"], [60, 3, 0, "-", "random"], [61, 3, 0, "-", "searching"], [62, 3, 0, "-", "set"], [63, 3, 0, "-", "sorting"], [64, 3, 0, "-", "statistical"], [65, 3, 0, "-", "utility"], [66, 3, 0, "-", "wrapping"]], "ivy.data_classes.array.activations": [[45, 1, 1, "", "_ArrayWithActivations"]], "ivy.data_classes.array.activations._ArrayWithActivations": [[45, 4, 1, "", "_abc_impl"], [45, 0, 1, "", "gelu"], [45, 0, 1, "", "hardswish"], [45, 0, 1, "", "leaky_relu"], [45, 0, 1, "", "log_softmax"], [45, 0, 1, "", "mish"], [45, 0, 1, "", "relu"], [45, 0, 1, "", "sigmoid"], [45, 0, 1, "", "softmax"], [45, 0, 1, "", "softplus"]], "ivy.data_classes.array.array": [[96, 1, 1, "", "Array"]], "ivy.data_classes.array.array.Array": [[96, 5, 1, "", "T"], [96, 0, 1, "", "__abs__"], [96, 0, 1, "", "__add__"], [96, 0, 1, "", "__eq__"], [96, 0, 1, "", "__ge__"], [96, 0, 1, "", "__gt__"], [96, 0, 1, "", "__init__"], [96, 0, 1, "", "__le__"], [96, 0, 1, "", "__lt__"], [96, 0, 1, "", "__ne__"], [96, 0, 1, "", "__pow__"], [96, 0, 1, "", "__radd__"], [96, 0, 1, "", "__rrshift__"], [96, 0, 1, "", "__rshift__"], [96, 0, 1, "", "__rsub__"], [96, 0, 1, "", "__sub__"], [96, 0, 1, "", "__truediv__"], [96, 0, 1, "", "__xor__"], [96, 5, 1, "", "backend"], [96, 5, 1, "", "base"], [96, 5, 1, "", "data"], [96, 5, 1, "", "device"], [96, 5, 1, "", "dtype"], [96, 5, 1, "", "dynamic_backend"], [96, 5, 1, "", "imag"], [96, 5, 1, "", "itemsize"], [96, 5, 1, "", "mT"], [96, 5, 1, "", "ndim"], [96, 5, 1, "", "real"], [96, 5, 1, "", "shape"], [96, 5, 1, "", "size"], [96, 5, 1, "", "strides"]], "ivy.data_classes.array.conversions": [[46, 2, 1, "", "_to_ivy"], [46, 2, 1, "", "_to_native"], [46, 2, 1, "", "args_to_ivy"], [46, 2, 1, "", "args_to_native"], [46, 2, 1, "", "to_ivy"], [46, 2, 1, "", "to_native"]], "ivy.data_classes.array.creation": [[47, 1, 1, "", "_ArrayWithCreation"]], "ivy.data_classes.array.creation._ArrayWithCreation": [[47, 4, 1, "", "_abc_impl"], [47, 0, 1, "", "asarray"], [47, 0, 1, "", "copy_array"], [47, 0, 1, "", "empty_like"], [47, 0, 1, "", "from_dlpack"], [47, 0, 1, "", "full_like"], [47, 0, 1, "", "linspace"], [47, 0, 1, "", "logspace"], [47, 0, 1, "", "meshgrid"], [47, 0, 1, "", "native_array"], [47, 0, 1, "", "one_hot"], [47, 0, 1, "", "ones_like"], [47, 0, 1, "", "tril"], [47, 0, 1, "", "triu"], [47, 0, 1, "", "zeros_like"]], "ivy.data_classes.array.data_type": [[48, 1, 1, "", "_ArrayWithDataTypes"]], "ivy.data_classes.array.data_type._ArrayWithDataTypes": [[48, 4, 1, "", "_abc_impl"], [48, 0, 1, "", "astype"], [48, 0, 1, "", "broadcast_arrays"], [48, 0, 1, "", "broadcast_to"], [48, 0, 1, "", "can_cast"], [48, 0, 1, "", "dtype"], [48, 0, 1, "", "finfo"], [48, 0, 1, "", "iinfo"], [48, 0, 1, "", "is_bool_dtype"], [48, 0, 1, "", "is_float_dtype"], [48, 0, 1, "", "is_int_dtype"], [48, 0, 1, "", "is_uint_dtype"], [48, 0, 1, "", "result_type"]], "ivy.data_classes.array.device": [[49, 1, 1, "", "_ArrayWithDevice"]], "ivy.data_classes.array.device._ArrayWithDevice": [[49, 4, 1, "", "_abc_impl"], [49, 0, 1, "", "dev"], [49, 0, 1, "", "to_device"]], "ivy.data_classes.array.elementwise": [[50, 1, 1, "", "_ArrayWithElementwise"]], "ivy.data_classes.array.elementwise._ArrayWithElementwise": [[50, 4, 1, "", "_abc_impl"], [50, 0, 1, "", "abs"], [50, 0, 1, "", "acos"], [50, 0, 1, "", "acosh"], [50, 0, 1, "", "add"], [50, 0, 1, "", "angle"], [50, 0, 1, "", "asin"], [50, 0, 1, "", "asinh"], [50, 0, 1, "", "atan"], [50, 0, 1, "", "atan2"], [50, 0, 1, "", "atanh"], [50, 0, 1, "", "bitwise_and"], [50, 0, 1, "", "bitwise_invert"], [50, 0, 1, "", "bitwise_left_shift"], [50, 0, 1, "", "bitwise_or"], [50, 0, 1, "", "bitwise_right_shift"], [50, 0, 1, "", "bitwise_xor"], [50, 0, 1, "", "ceil"], [50, 0, 1, "", "cos"], [50, 0, 1, "", "cosh"], [50, 0, 1, "", "deg2rad"], [50, 0, 1, "", "divide"], [50, 0, 1, "", "equal"], [50, 0, 1, "", "erf"], [50, 0, 1, "", "exp"], [50, 0, 1, "", "exp2"], [50, 0, 1, "", "expm1"], [50, 0, 1, "", "floor"], [50, 0, 1, "", "floor_divide"], [50, 0, 1, "", "fmin"], [50, 0, 1, "", "gcd"], [50, 0, 1, "", "greater"], [50, 0, 1, "", "greater_equal"], [50, 0, 1, "", "imag"], [50, 0, 1, "", "isfinite"], [50, 0, 1, "", "isinf"], [50, 0, 1, "", "isnan"], [50, 0, 1, "", "isreal"], [50, 0, 1, "", "lcm"], [50, 0, 1, "", "less"], [50, 0, 1, "", "less_equal"], [50, 0, 1, "", "log"], [50, 0, 1, "", "log10"], [50, 0, 1, "", "log1p"], [50, 0, 1, "", "log2"], [50, 0, 1, "", "logaddexp"], [50, 0, 1, "", "logaddexp2"], [50, 0, 1, "", "logical_and"], [50, 0, 1, "", "logical_not"], [50, 0, 1, "", "logical_or"], [50, 0, 1, "", "logical_xor"], [50, 0, 1, "", "maximum"], [50, 0, 1, "", "minimum"], [50, 0, 1, "", "multiply"], [50, 0, 1, "", "nan_to_num"], [50, 0, 1, "", "negative"], [50, 0, 1, "", "not_equal"], [50, 0, 1, "", "positive"], [50, 0, 1, "", "pow"], [50, 0, 1, "", "rad2deg"], [50, 0, 1, "", "real"], [50, 0, 1, "", "reciprocal"], [50, 0, 1, "", "remainder"], [50, 0, 1, "", "round"], [50, 0, 1, "", "sign"], [50, 0, 1, "", "sin"], [50, 0, 1, "", "sinh"], [50, 0, 1, "", "sqrt"], [50, 0, 1, "", "square"], [50, 0, 1, "", "subtract"], [50, 0, 1, "", "tan"], [50, 0, 1, "", "tanh"], [50, 0, 1, "", "trapz"], [50, 0, 1, "", "trunc"], [50, 0, 1, "", "trunc_divide"]], "ivy.data_classes.array.experimental": [[51, 3, 0, "-", "activations"], [51, 3, 0, "-", "conversions"], [51, 3, 0, "-", "creation"], [51, 3, 0, "-", "data_type"], [51, 3, 0, "-", "device"], [51, 3, 0, "-", "elementwise"], [51, 3, 0, "-", "general"], [51, 3, 0, "-", "gradients"], [51, 3, 0, "-", "image"], [51, 3, 0, "-", "layers"], [51, 3, 0, "-", "linear_algebra"], [51, 3, 0, "-", "losses"], [51, 3, 0, "-", "manipulation"], [51, 3, 0, "-", "norms"], [51, 3, 0, "-", "random"], [51, 3, 0, "-", "searching"], [51, 3, 0, "-", "set"], [51, 3, 0, "-", "sorting"], [51, 3, 0, "-", "statistical"], [51, 3, 0, "-", "utility"]], "ivy.data_classes.array.experimental.activations": [[51, 1, 1, "", "_ArrayWithActivationsExperimental"]], "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "celu"], [51, 0, 1, "", "elu"], [51, 0, 1, "", "hardtanh"], [51, 0, 1, "", "logit"], [51, 0, 1, "", "logsigmoid"], [51, 0, 1, "", "prelu"], [51, 0, 1, "", "relu6"], [51, 0, 1, "", "selu"], [51, 0, 1, "", "silu"], [51, 0, 1, "", "tanhshrink"], [51, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.array.experimental.conversions": [[51, 1, 1, "", "_ArrayWithConversionsExperimental"]], "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental": [[51, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.creation": [[51, 1, 1, "", "_ArrayWithCreationExperimental"]], "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "blackman_window"], [51, 0, 1, "", "eye_like"], [51, 0, 1, "", "mel_weight_matrix"], [51, 0, 1, "", "trilu"], [51, 0, 1, "", "unsorted_segment_min"], [51, 0, 1, "", "unsorted_segment_sum"]], "ivy.data_classes.array.experimental.data_type": [[51, 1, 1, "", "_ArrayWithData_typeExperimental"]], "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental": [[51, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.device": [[51, 1, 1, "", "_ArrayWithDeviceExperimental"]], "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental": [[51, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.elementwise": [[51, 1, 1, "", "_ArrayWithElementWiseExperimental"]], "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "allclose"], [51, 0, 1, "", "amax"], [51, 0, 1, "", "amin"], [51, 0, 1, "", "binarizer"], [51, 0, 1, "", "conj"], [51, 0, 1, "", "copysign"], [51, 0, 1, "", "count_nonzero"], [51, 0, 1, "", "diff"], [51, 0, 1, "", "digamma"], [51, 0, 1, "", "erfc"], [51, 0, 1, "", "fix"], [51, 0, 1, "", "float_power"], [51, 0, 1, "", "fmax"], [51, 0, 1, "", "fmod"], [51, 0, 1, "", "frexp"], [51, 0, 1, "", "gradient"], [51, 0, 1, "", "hypot"], [51, 0, 1, "", "isclose"], [51, 0, 1, "", "ldexp"], [51, 0, 1, "", "lerp"], [51, 0, 1, "", "lgamma"], [51, 0, 1, "", "modf"], [51, 0, 1, "", "nansum"], [51, 0, 1, "", "nextafter"], [51, 0, 1, "", "signbit"], [51, 0, 1, "", "sinc"], [51, 0, 1, "", "sparsify_tensor"], [51, 0, 1, "", "xlogy"], [51, 0, 1, "", "zeta"]], "ivy.data_classes.array.experimental.general": [[51, 1, 1, "", "_ArrayWithGeneralExperimental"]], "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "reduce"]], "ivy.data_classes.array.experimental.gradients": [[51, 1, 1, "", "_ArrayWithGradientsExperimental"]], "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental": [[51, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.image": [[51, 1, 1, "", "_ArrayWithImageExperimental"]], "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental": [[51, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.layers": [[51, 1, 1, "", "_ArrayWithLayersExperimental"]], "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "adaptive_avg_pool1d"], [51, 0, 1, "", "adaptive_avg_pool2d"], [51, 0, 1, "", "adaptive_max_pool2d"], [51, 0, 1, "", "avg_pool1d"], [51, 0, 1, "", "avg_pool2d"], [51, 0, 1, "", "avg_pool3d"], [51, 0, 1, "", "dct"], [51, 0, 1, "", "dft"], [51, 0, 1, "", "embedding"], [51, 0, 1, "", "fft"], [51, 0, 1, "", "fft2"], [51, 0, 1, "", "idct"], [51, 0, 1, "", "ifft"], [51, 0, 1, "", "ifftn"], [51, 0, 1, "", "interpolate"], [51, 0, 1, "", "max_pool1d"], [51, 0, 1, "", "max_pool2d"], [51, 0, 1, "", "max_pool3d"], [51, 0, 1, "", "max_unpool1d"], [51, 0, 1, "", "reduce_window"], [51, 0, 1, "", "rfft"], [51, 0, 1, "", "rfftn"], [51, 0, 1, "", "sliding_window"], [51, 0, 1, "", "stft"]], "ivy.data_classes.array.experimental.linear_algebra": [[51, 1, 1, "", "_ArrayWithLinearAlgebraExperimental"]], "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "adjoint"], [51, 0, 1, "", "batched_outer"], [51, 0, 1, "", "cond"], [51, 0, 1, "", "diagflat"], [51, 0, 1, "", "dot"], [51, 0, 1, "", "eig"], [51, 0, 1, "", "eigh_tridiagonal"], [51, 0, 1, "", "eigvals"], [51, 0, 1, "", "general_inner_product"], [51, 0, 1, "", "higher_order_moment"], [51, 0, 1, "", "initialize_tucker"], [51, 0, 1, "", "kron"], [51, 0, 1, "", "make_svd_non_negative"], [51, 0, 1, "", "matrix_exp"], [51, 0, 1, "", "mode_dot"], [51, 0, 1, "", "multi_dot"], [51, 0, 1, "", "multi_mode_dot"], [51, 0, 1, "", "partial_tucker"], [51, 0, 1, "", "svd_flip"], [51, 0, 1, "", "tensor_train"], [51, 0, 1, "", "truncated_svd"], [51, 0, 1, "", "tt_matrix_to_tensor"], [51, 0, 1, "", "tucker"]], "ivy.data_classes.array.experimental.losses": [[51, 1, 1, "", "_ArrayWithLossesExperimental"]], "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "huber_loss"], [51, 0, 1, "", "kl_div"], [51, 0, 1, "", "l1_loss"], [51, 0, 1, "", "log_poisson_loss"], [51, 0, 1, "", "poisson_nll_loss"], [51, 0, 1, "", "smooth_l1_loss"], [51, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.array.experimental.manipulation": [[51, 1, 1, "", "_ArrayWithManipulationExperimental"]], "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "as_strided"], [51, 0, 1, "", "associative_scan"], [51, 0, 1, "", "atleast_1d"], [51, 0, 1, "", "atleast_2d"], [51, 0, 1, "", "atleast_3d"], [51, 0, 1, "", "column_stack"], [51, 0, 1, "", "concat_from_sequence"], [51, 0, 1, "", "dsplit"], [51, 0, 1, "", "dstack"], [51, 0, 1, "", "expand"], [51, 0, 1, "", "fill_diagonal"], [51, 0, 1, "", "flatten"], [51, 0, 1, "", "fliplr"], [51, 0, 1, "", "flipud"], [51, 0, 1, "", "fold"], [51, 0, 1, "", "heaviside"], [51, 0, 1, "", "hsplit"], [51, 0, 1, "", "hstack"], [51, 0, 1, "", "i0"], [51, 0, 1, "", "matricize"], [51, 0, 1, "", "moveaxis"], [51, 0, 1, "", "pad"], [51, 0, 1, "", "partial_fold"], [51, 0, 1, "", "partial_tensor_to_vec"], [51, 0, 1, "", "partial_unfold"], [51, 0, 1, "", "partial_vec_to_tensor"], [51, 0, 1, "", "put_along_axis"], [51, 0, 1, "", "rot90"], [51, 0, 1, "", "soft_thresholding"], [51, 0, 1, "", "take_along_axis"], [51, 0, 1, "", "top_k"], [51, 0, 1, "", "trim_zeros"], [51, 0, 1, "", "unfold"], [51, 0, 1, "", "unique_consecutive"], [51, 0, 1, "", "vsplit"], [51, 0, 1, "", "vstack"]], "ivy.data_classes.array.experimental.norms": [[51, 1, 1, "", "_ArrayWithNormsExperimental"]], "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "batch_norm"], [51, 0, 1, "", "group_norm"], [51, 0, 1, "", "instance_norm"], [51, 0, 1, "", "l1_normalize"], [51, 0, 1, "", "l2_normalize"], [51, 0, 1, "", "lp_normalize"]], "ivy.data_classes.array.experimental.random": [[51, 1, 1, "", "_ArrayWithRandomExperimental"]], "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "bernoulli"], [51, 0, 1, "", "beta"], [51, 0, 1, "", "dirichlet"], [51, 0, 1, "", "gamma"], [51, 0, 1, "", "poisson"]], "ivy.data_classes.array.experimental.searching": [[51, 1, 1, "", "_ArrayWithSearchingExperimental"]], "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "unravel_index"]], "ivy.data_classes.array.experimental.set": [[51, 1, 1, "", "_ArrayWithSetExperimental"]], "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental": [[51, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.sorting": [[51, 1, 1, "", "_ArrayWithSortingExperimental"]], "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "lexsort"]], "ivy.data_classes.array.experimental.statistical": [[51, 1, 1, "", "_ArrayWithStatisticalExperimental"]], "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "bincount"], [51, 0, 1, "", "corrcoef"], [51, 0, 1, "", "cov"], [51, 0, 1, "", "cummax"], [51, 0, 1, "", "cummin"], [51, 0, 1, "", "histogram"], [51, 0, 1, "", "igamma"], [51, 0, 1, "", "median"], [51, 0, 1, "", "nanmean"], [51, 0, 1, "", "nanmedian"], [51, 0, 1, "", "nanprod"], [51, 0, 1, "", "quantile"]], "ivy.data_classes.array.experimental.utility": [[51, 1, 1, "", "_ArrayWithUtilityExperimental"]], "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "optional_get_element"]], "ivy.data_classes.array.general": [[52, 1, 1, "", "_ArrayWithGeneral"]], "ivy.data_classes.array.general._ArrayWithGeneral": [[52, 4, 1, "", "_abc_impl"], [52, 0, 1, "", "all_equal"], [52, 0, 1, "", "array_equal"], [52, 0, 1, "", "assert_supports_inplace"], [52, 0, 1, "", "clip_matrix_norm"], [52, 0, 1, "", "clip_vector_norm"], [52, 0, 1, "", "default"], [52, 0, 1, "", "einops_rearrange"], [52, 0, 1, "", "einops_reduce"], [52, 0, 1, "", "einops_repeat"], [52, 0, 1, "", "exists"], [52, 0, 1, "", "fourier_encode"], [52, 0, 1, "", "gather"], [52, 0, 1, "", "gather_nd"], [52, 0, 1, "", "get_num_dims"], [52, 0, 1, "", "has_nans"], [52, 0, 1, "", "inplace_decrement"], [52, 0, 1, "", "inplace_increment"], [52, 0, 1, "", "inplace_update"], [52, 0, 1, "", "is_array"], [52, 0, 1, "", "is_ivy_array"], [52, 0, 1, "", "is_ivy_container"], [52, 0, 1, "", "is_native_array"], [52, 0, 1, "", "isin"], [52, 0, 1, "", "scatter_flat"], [52, 0, 1, "", "scatter_nd"], [52, 0, 1, "", "stable_divide"], [52, 0, 1, "", "stable_pow"], [52, 0, 1, "", "supports_inplace_updates"], [52, 0, 1, "", "to_file"], [52, 0, 1, "", "to_list"], [52, 0, 1, "", "to_numpy"], [52, 0, 1, "", "to_scalar"], [52, 0, 1, "", "value_is_nan"]], "ivy.data_classes.array.gradients": [[53, 1, 1, "", "_ArrayWithGradients"]], "ivy.data_classes.array.gradients._ArrayWithGradients": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "adam_step"], [53, 0, 1, "", "adam_update"], [53, 0, 1, "", "gradient_descent_update"], [53, 0, 1, "", "lamb_update"], [53, 0, 1, "", "lars_update"], [53, 0, 1, "", "optimizer_update"], [53, 0, 1, "", "stop_gradient"]], "ivy.data_classes.array.image": [[54, 1, 1, "", "_ArrayWithImage"]], "ivy.data_classes.array.image._ArrayWithImage": [[54, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.layers": [[55, 1, 1, "", "_ArrayWithLayers"]], "ivy.data_classes.array.layers._ArrayWithLayers": [[55, 4, 1, "", "_abc_impl"], [55, 0, 1, "", "conv1d"], [55, 0, 1, "", "conv1d_transpose"], [55, 0, 1, "", "conv2d"], [55, 0, 1, "", "conv2d_transpose"], [55, 0, 1, "", "conv3d"], [55, 0, 1, "", "conv3d_transpose"], [55, 0, 1, "", "depthwise_conv2d"], [55, 0, 1, "", "dropout"], [55, 0, 1, "", "dropout1d"], [55, 0, 1, "", "dropout2d"], [55, 0, 1, "", "dropout3d"], [55, 0, 1, "", "linear"], [55, 0, 1, "", "lstm_update"], [55, 0, 1, "", "multi_head_attention"], [55, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.array.linear_algebra": [[56, 1, 1, "", "_ArrayWithLinearAlgebra"]], "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra": [[56, 4, 1, "", "_abc_impl"], [56, 0, 1, "", "cholesky"], [56, 0, 1, "", "cross"], [56, 0, 1, "", "det"], [56, 0, 1, "", "diag"], [56, 0, 1, "", "diagonal"], [56, 0, 1, "", "eig"], [56, 0, 1, "", "eigh"], [56, 0, 1, "", "eigvalsh"], [56, 0, 1, "", "inner"], [56, 0, 1, "", "inv"], [56, 0, 1, "", "matmul"], [56, 0, 1, "", "matrix_norm"], [56, 0, 1, "", "matrix_power"], [56, 0, 1, "", "matrix_rank"], [56, 0, 1, "", "matrix_transpose"], [56, 0, 1, "", "outer"], [56, 0, 1, "", "pinv"], [56, 0, 1, "", "qr"], [56, 0, 1, "", "slogdet"], [56, 0, 1, "", "solve"], [56, 0, 1, "", "svd"], [56, 0, 1, "", "svdvals"], [56, 0, 1, "", "tensordot"], [56, 0, 1, "", "tensorsolve"], [56, 0, 1, "", "trace"], [56, 0, 1, "", "vander"], [56, 0, 1, "", "vecdot"], [56, 0, 1, "", "vector_norm"], [56, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.array.losses": [[57, 1, 1, "", "_ArrayWithLosses"]], "ivy.data_classes.array.losses._ArrayWithLosses": [[57, 4, 1, "", "_abc_impl"], [57, 0, 1, "", "binary_cross_entropy"], [57, 0, 1, "", "cross_entropy"], [57, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.array.manipulation": [[58, 1, 1, "", "_ArrayWithManipulation"]], "ivy.data_classes.array.manipulation._ArrayWithManipulation": [[58, 4, 1, "", "_abc_impl"], [58, 0, 1, "", "clip"], [58, 0, 1, "", "concat"], [58, 0, 1, "", "constant_pad"], [58, 0, 1, "", "expand_dims"], [58, 0, 1, "", "flip"], [58, 0, 1, "", "permute_dims"], [58, 0, 1, "", "repeat"], [58, 0, 1, "", "reshape"], [58, 0, 1, "", "roll"], [58, 0, 1, "", "split"], [58, 0, 1, "", "squeeze"], [58, 0, 1, "", "stack"], [58, 0, 1, "", "swapaxes"], [58, 0, 1, "", "tile"], [58, 0, 1, "", "unstack"], [58, 0, 1, "", "view"], [58, 0, 1, "", "zero_pad"]], "ivy.data_classes.array.norms": [[59, 1, 1, "", "_ArrayWithNorms"]], "ivy.data_classes.array.norms._ArrayWithNorms": [[59, 4, 1, "", "_abc_impl"], [59, 0, 1, "", "layer_norm"]], "ivy.data_classes.array.random": [[60, 1, 1, "", "_ArrayWithRandom"]], "ivy.data_classes.array.random._ArrayWithRandom": [[60, 4, 1, "", "_abc_impl"], [60, 0, 1, "", "multinomial"], [60, 0, 1, "", "randint"], [60, 0, 1, "", "random_normal"], [60, 0, 1, "", "random_uniform"], [60, 0, 1, "", "shuffle"]], "ivy.data_classes.array.searching": [[61, 1, 1, "", "_ArrayWithSearching"]], "ivy.data_classes.array.searching._ArrayWithSearching": [[61, 4, 1, "", "_abc_impl"], [61, 0, 1, "", "argmax"], [61, 0, 1, "", "argmin"], [61, 0, 1, "", "argwhere"], [61, 0, 1, "", "nonzero"], [61, 0, 1, "", "where"]], "ivy.data_classes.array.set": [[62, 1, 1, "", "_ArrayWithSet"]], "ivy.data_classes.array.set._ArrayWithSet": [[62, 4, 1, "", "_abc_impl"], [62, 0, 1, "", "unique_all"], [62, 0, 1, "", "unique_counts"], [62, 0, 1, "", "unique_inverse"], [62, 0, 1, "", "unique_values"]], "ivy.data_classes.array.sorting": [[63, 1, 1, "", "_ArrayWithSorting"]], "ivy.data_classes.array.sorting._ArrayWithSorting": [[63, 4, 1, "", "_abc_impl"], [63, 0, 1, "", "argsort"], [63, 0, 1, "", "msort"], [63, 0, 1, "", "searchsorted"], [63, 0, 1, "", "sort"]], "ivy.data_classes.array.statistical": [[64, 1, 1, "", "_ArrayWithStatistical"]], "ivy.data_classes.array.statistical._ArrayWithStatistical": [[64, 4, 1, "", "_abc_impl"], [64, 0, 1, "", "cumprod"], [64, 0, 1, "", "cumsum"], [64, 0, 1, "", "einsum"], [64, 0, 1, "", "max"], [64, 0, 1, "", "mean"], [64, 0, 1, "", "min"], [64, 0, 1, "", "prod"], [64, 0, 1, "", "std"], [64, 0, 1, "", "sum"], [64, 0, 1, "", "var"]], "ivy.data_classes.array.utility": [[65, 1, 1, "", "_ArrayWithUtility"]], "ivy.data_classes.array.utility._ArrayWithUtility": [[65, 4, 1, "", "_abc_impl"], [65, 0, 1, "", "all"], [65, 0, 1, "", "any"]], "ivy.data_classes.array.wrapping": [[66, 2, 1, "", "_wrap_function"], [66, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy.data_classes.container": [[67, 3, 0, "-", "activations"], [68, 3, 0, "-", "base"], [97, 3, 0, "-", "container"], [69, 3, 0, "-", "conversions"], [70, 3, 0, "-", "creation"], [71, 3, 0, "-", "data_type"], [72, 3, 0, "-", "device"], [73, 3, 0, "-", "elementwise"], [74, 3, 0, "-", "experimental"], [75, 3, 0, "-", "general"], [76, 3, 0, "-", "gradients"], [77, 3, 0, "-", "image"], [78, 3, 0, "-", "layers"], [79, 3, 0, "-", "linear_algebra"], [80, 3, 0, "-", "losses"], [81, 3, 0, "-", "manipulation"], [82, 3, 0, "-", "norms"], [83, 3, 0, "-", "random"], [84, 3, 0, "-", "searching"], [85, 3, 0, "-", "set"], [86, 3, 0, "-", "sorting"], [87, 3, 0, "-", "statistical"], [88, 3, 0, "-", "utility"], [89, 3, 0, "-", "wrapping"]], "ivy.data_classes.container.activations": [[67, 1, 1, "", "_ContainerWithActivations"]], "ivy.data_classes.container.activations._ContainerWithActivations": [[67, 4, 1, "", "_abc_impl"], [67, 0, 1, "", "_static_gelu"], [67, 0, 1, "", "_static_hardswish"], [67, 0, 1, "", "_static_leaky_relu"], [67, 0, 1, "", "_static_log_softmax"], [67, 0, 1, "", "_static_mish"], [67, 0, 1, "", "_static_relu"], [67, 0, 1, "", "_static_sigmoid"], [67, 0, 1, "", "_static_softmax"], [67, 0, 1, "", "_static_softplus"], [67, 0, 1, "", "gelu"], [67, 0, 1, "", "hardswish"], [67, 0, 1, "", "leaky_relu"], [67, 0, 1, "", "log_softmax"], [67, 0, 1, "", "mish"], [67, 0, 1, "", "relu"], [67, 0, 1, "", "sigmoid"], [67, 0, 1, "", "softmax"], [67, 0, 1, "", "softplus"]], "ivy.data_classes.container.base": [[68, 1, 1, "", "ContainerBase"], [68, 2, 1, "", "_is_jsonable"], [68, 2, 1, "", "_repr"]], "ivy.data_classes.container.base.ContainerBase": [[68, 0, 1, "", "__getitem__"], [68, 0, 1, "", "__init__"], [68, 0, 1, "", "__setitem__"], [68, 4, 1, "", "_abc_impl"], [68, 0, 1, "", "_cont_at_key_chains_input_as_dict"], [68, 0, 1, "", "_cont_at_key_chains_input_as_seq"], [68, 0, 1, "", "_cont_call_static_method_with_flexible_args"], [68, 0, 1, "", "_cont_concat_unify"], [68, 0, 1, "", "_cont_get_dev"], [68, 0, 1, "", "_cont_get_dtype"], [68, 0, 1, "", "_cont_get_shape"], [68, 0, 1, "", "_cont_get_shapes"], [68, 5, 1, "", "_cont_ivy"], [68, 0, 1, "", "_cont_mean_unify"], [68, 0, 1, "", "_cont_prune_key_chains_input_as_dict"], [68, 0, 1, "", "_cont_prune_key_chains_input_as_seq"], [68, 0, 1, "", "_cont_slice_keys"], [68, 0, 1, "", "_cont_sum_unify"], [68, 0, 1, "", "_get_queue_item"], [68, 0, 1, "", "cont_all_false"], [68, 0, 1, "", "cont_all_key_chains"], [68, 0, 1, "", "cont_all_true"], [68, 0, 1, "", "cont_as_bools"], [68, 0, 1, "", "cont_assert_contains_sub_container"], [68, 0, 1, "", "cont_assert_contains_sub_structure"], [68, 0, 1, "", "cont_assert_identical"], [68, 0, 1, "", "cont_assert_identical_structure"], [68, 0, 1, "", "cont_at_key_chain"], [68, 0, 1, "", "cont_at_key_chains"], [68, 0, 1, "", "cont_at_keys"], [68, 0, 1, "", "cont_combine"], [68, 0, 1, "", "cont_common_key_chains"], [68, 5, 1, "", "cont_config"], [68, 0, 1, "", "cont_contains_sub_container"], [68, 0, 1, "", "cont_contains_sub_structure"], [68, 0, 1, "", "cont_copy"], [68, 0, 1, "", "cont_create_if_absent"], [68, 0, 1, "", "cont_cutoff_at_depth"], [68, 0, 1, "", "cont_cutoff_at_height"], [68, 0, 1, "", "cont_deep_copy"], [68, 5, 1, "", "cont_dev"], [68, 5, 1, "", "cont_dev_str"], [68, 0, 1, "", "cont_diff"], [68, 5, 1, "", "cont_dtype"], [68, 0, 1, "", "cont_duplicate_array_keychains"], [68, 0, 1, "", "cont_find_sub_container"], [68, 0, 1, "", "cont_find_sub_structure"], [68, 0, 1, "", "cont_flatten_key_chain"], [68, 0, 1, "", "cont_flatten_key_chains"], [68, 0, 1, "", "cont_format_key_chains"], [68, 0, 1, "", "cont_from_disk_as_hdf5"], [68, 0, 1, "", "cont_from_disk_as_json"], [68, 0, 1, "", "cont_from_disk_as_pickled"], [68, 0, 1, "", "cont_from_flat_list"], [68, 0, 1, "", "cont_handle_inplace"], [68, 0, 1, "", "cont_has_key"], [68, 0, 1, "", "cont_has_key_chain"], [68, 0, 1, "", "cont_identical"], [68, 0, 1, "", "cont_identical_array_shapes"], [68, 0, 1, "", "cont_identical_configs"], [68, 0, 1, "", "cont_identical_structure"], [68, 0, 1, "", "cont_if_exists"], [68, 0, 1, "", "cont_inplace_update"], [68, 5, 1, "", "cont_ivy"], [68, 0, 1, "", "cont_key_chains_containing"], [68, 0, 1, "", "cont_list_join"], [68, 0, 1, "", "cont_list_stack"], [68, 0, 1, "", "cont_load"], [68, 0, 1, "", "cont_map"], [68, 0, 1, "", "cont_map_sub_conts"], [68, 5, 1, "", "cont_max_depth"], [68, 0, 1, "", "cont_multi_map"], [68, 0, 1, "", "cont_multi_map_in_function"], [68, 0, 1, "", "cont_num_arrays"], [68, 0, 1, "", "cont_overwrite_at_key_chain"], [68, 0, 1, "", "cont_overwrite_at_key_chains"], [68, 0, 1, "", "cont_prune_empty"], [68, 0, 1, "", "cont_prune_key_chain"], [68, 0, 1, "", "cont_prune_key_chains"], [68, 0, 1, "", "cont_prune_key_from_key_chains"], [68, 0, 1, "", "cont_prune_keys"], [68, 0, 1, "", "cont_prune_keys_from_key_chains"], [68, 0, 1, "", "cont_reduce"], [68, 0, 1, "", "cont_remove_key_length_limit"], [68, 0, 1, "", "cont_remove_print_limit"], [68, 0, 1, "", "cont_reshape_like"], [68, 0, 1, "", "cont_restructure"], [68, 0, 1, "", "cont_restructure_key_chains"], [68, 0, 1, "", "cont_save"], [68, 0, 1, "", "cont_set_at_key_chain"], [68, 0, 1, "", "cont_set_at_key_chains"], [68, 0, 1, "", "cont_set_at_keys"], [68, 5, 1, "", "cont_shape"], [68, 5, 1, "", "cont_shapes"], [68, 0, 1, "", "cont_show"], [68, 0, 1, "", "cont_show_sub_container"], [68, 0, 1, "", "cont_size_ordered_arrays"], [68, 0, 1, "", "cont_slice_keys"], [68, 0, 1, "", "cont_slice_via_key"], [68, 0, 1, "", "cont_sort_by_key"], [68, 0, 1, "", "cont_structural_diff"], [68, 0, 1, "", "cont_to_dict"], [68, 0, 1, "", "cont_to_disk_as_hdf5"], [68, 0, 1, "", "cont_to_disk_as_json"], [68, 0, 1, "", "cont_to_disk_as_pickled"], [68, 0, 1, "", "cont_to_flat_list"], [68, 0, 1, "", "cont_to_iterator"], [68, 0, 1, "", "cont_to_iterator_keys"], [68, 0, 1, "", "cont_to_iterator_values"], [68, 0, 1, "", "cont_to_jsonable"], [68, 0, 1, "", "cont_to_nested_list"], [68, 0, 1, "", "cont_to_raw"], [68, 0, 1, "", "cont_trim_key"], [68, 0, 1, "", "cont_try_kc"], [68, 0, 1, "", "cont_unify"], [68, 0, 1, "", "cont_unstack_conts"], [68, 0, 1, "", "cont_update_config"], [68, 0, 1, "", "cont_with_default_key_color"], [68, 0, 1, "", "cont_with_entries_as_lists"], [68, 0, 1, "", "cont_with_ivy_backend"], [68, 0, 1, "", "cont_with_key_length_limit"], [68, 0, 1, "", "cont_with_print_indent"], [68, 0, 1, "", "cont_with_print_limit"], [68, 0, 1, "", "cont_with_print_line_spacing"], [68, 5, 1, "", "dynamic_backend"], [68, 0, 1, "", "h5_file_size"], [68, 0, 1, "", "shuffle_h5_file"], [68, 0, 1, "", "split_conts"]], "ivy.data_classes.container.container": [[97, 1, 1, "", "Container"]], "ivy.data_classes.container.container.Container": [[97, 0, 1, "", "__abs__"], [97, 0, 1, "", "__add__"], [97, 0, 1, "", "__eq__"], [97, 0, 1, "", "__ge__"], [97, 0, 1, "", "__gt__"], [97, 0, 1, "", "__init__"], [97, 0, 1, "", "__le__"], [97, 0, 1, "", "__lt__"], [97, 0, 1, "", "__ne__"], [97, 0, 1, "", "__pow__"], [97, 0, 1, "", "__radd__"], [97, 0, 1, "", "__rrshift__"], [97, 0, 1, "", "__rshift__"], [97, 0, 1, "", "__rsub__"], [97, 0, 1, "", "__sub__"], [97, 0, 1, "", "__truediv__"], [97, 0, 1, "", "__xor__"]], "ivy.data_classes.container.conversions": [[69, 1, 1, "", "_ContainerWithConversions"]], "ivy.data_classes.container.conversions._ContainerWithConversions": [[69, 4, 1, "", "_abc_impl"], [69, 0, 1, "", "_static_to_ivy"], [69, 0, 1, "", "_static_to_native"], [69, 0, 1, "", "to_ivy"], [69, 0, 1, "", "to_native"]], "ivy.data_classes.container.creation": [[70, 1, 1, "", "_ContainerWithCreation"]], "ivy.data_classes.container.creation._ContainerWithCreation": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "_static_arange"], [70, 0, 1, "", "_static_asarray"], [70, 0, 1, "", "_static_copy_array"], [70, 0, 1, "", "_static_empty"], [70, 0, 1, "", "_static_empty_like"], [70, 0, 1, "", "_static_eye"], [70, 0, 1, "", "_static_from_dlpack"], [70, 0, 1, "", "_static_full"], [70, 0, 1, "", "_static_full_like"], [70, 0, 1, "", "_static_linspace"], [70, 0, 1, "", "_static_logspace"], [70, 0, 1, "", "_static_meshgrid"], [70, 0, 1, "", "_static_native_array"], [70, 0, 1, "", "_static_one_hot"], [70, 0, 1, "", "_static_ones"], [70, 0, 1, "", "_static_ones_like"], [70, 0, 1, "", "_static_tril"], [70, 0, 1, "", "_static_triu"], [70, 0, 1, "", "_static_zeros"], [70, 0, 1, "", "_static_zeros_like"], [70, 0, 1, "", "asarray"], [70, 0, 1, "", "copy_array"], [70, 0, 1, "", "empty_like"], [70, 0, 1, "", "from_dlpack"], [70, 0, 1, "", "frombuffer"], [70, 0, 1, "", "full_like"], [70, 0, 1, "", "linspace"], [70, 0, 1, "", "logspace"], [70, 0, 1, "", "meshgrid"], [70, 0, 1, "", "native_array"], [70, 0, 1, "", "one_hot"], [70, 0, 1, "", "ones_like"], [70, 0, 1, "", "static_frombuffer"], [70, 0, 1, "", "static_triu_indices"], [70, 0, 1, "", "tril"], [70, 0, 1, "", "triu"], [70, 0, 1, "", "triu_indices"], [70, 0, 1, "", "zeros_like"]], "ivy.data_classes.container.data_type": [[71, 1, 1, "", "_ContainerWithDataTypes"]], "ivy.data_classes.container.data_type._ContainerWithDataTypes": [[71, 4, 1, "", "_abc_impl"], [71, 0, 1, "", "_static_astype"], [71, 0, 1, "", "_static_broadcast_arrays"], [71, 0, 1, "", "_static_broadcast_to"], [71, 0, 1, "", "_static_can_cast"], [71, 0, 1, "", "_static_default_complex_dtype"], [71, 0, 1, "", "_static_default_float_dtype"], [71, 0, 1, "", "_static_dtype"], [71, 0, 1, "", "_static_finfo"], [71, 0, 1, "", "_static_function_supported_dtypes"], [71, 0, 1, "", "_static_function_unsupported_dtypes"], [71, 0, 1, "", "_static_iinfo"], [71, 0, 1, "", "_static_is_bool_dtype"], [71, 0, 1, "", "_static_is_complex_dtype"], [71, 0, 1, "", "_static_is_float_dtype"], [71, 0, 1, "", "_static_is_int_dtype"], [71, 0, 1, "", "_static_is_uint_dtype"], [71, 0, 1, "", "_static_result_type"], [71, 0, 1, "", "astype"], [71, 0, 1, "", "broadcast_arrays"], [71, 0, 1, "", "broadcast_to"], [71, 0, 1, "", "can_cast"], [71, 0, 1, "", "dtype"], [71, 0, 1, "", "finfo"], [71, 0, 1, "", "iinfo"], [71, 0, 1, "", "is_bool_dtype"], [71, 0, 1, "", "is_complex_dtype"], [71, 0, 1, "", "is_float_dtype"], [71, 0, 1, "", "is_int_dtype"], [71, 0, 1, "", "is_uint_dtype"], [71, 0, 1, "", "result_type"]], "ivy.data_classes.container.device": [[72, 1, 1, "", "_ContainerWithDevice"]], "ivy.data_classes.container.device._ContainerWithDevice": [[72, 4, 1, "", "_abc_impl"], [72, 0, 1, "", "_static_dev"], [72, 0, 1, "", "_static_to_device"], [72, 0, 1, "", "dev"], [72, 0, 1, "", "to_device"]], "ivy.data_classes.container.elementwise": [[73, 1, 1, "", "_ContainerWithElementwise"]], "ivy.data_classes.container.elementwise._ContainerWithElementwise": [[73, 4, 1, "", "_abc_impl"], [73, 0, 1, "", "_static_abs"], [73, 0, 1, "", "_static_acos"], [73, 0, 1, "", "_static_acosh"], [73, 0, 1, "", "_static_add"], [73, 0, 1, "", "_static_asin"], [73, 0, 1, "", "_static_asinh"], [73, 0, 1, "", "_static_atan"], [73, 0, 1, "", "_static_atan2"], [73, 0, 1, "", "_static_atanh"], [73, 0, 1, "", "_static_bitwise_and"], [73, 0, 1, "", "_static_bitwise_invert"], [73, 0, 1, "", "_static_bitwise_left_shift"], [73, 0, 1, "", "_static_bitwise_or"], [73, 0, 1, "", "_static_bitwise_right_shift"], [73, 0, 1, "", "_static_bitwise_xor"], [73, 0, 1, "", "_static_ceil"], [73, 0, 1, "", "_static_cos"], [73, 0, 1, "", "_static_cosh"], [73, 0, 1, "", "_static_deg2rad"], [73, 0, 1, "", "_static_divide"], [73, 0, 1, "", "_static_equal"], [73, 0, 1, "", "_static_erf"], [73, 0, 1, "", "_static_exp"], [73, 0, 1, "", "_static_expm1"], [73, 0, 1, "", "_static_floor"], [73, 0, 1, "", "_static_floor_divide"], [73, 0, 1, "", "_static_greater"], [73, 0, 1, "", "_static_greater_equal"], [73, 0, 1, "", "_static_isfinite"], [73, 0, 1, "", "_static_isinf"], [73, 0, 1, "", "_static_isnan"], [73, 0, 1, "", "_static_isreal"], [73, 0, 1, "", "_static_lcm"], [73, 0, 1, "", "_static_less"], [73, 0, 1, "", "_static_less_equal"], [73, 0, 1, "", "_static_log"], [73, 0, 1, "", "_static_log10"], [73, 0, 1, "", "_static_log1p"], [73, 0, 1, "", "_static_log2"], [73, 0, 1, "", "_static_logaddexp"], [73, 0, 1, "", "_static_logical_and"], [73, 0, 1, "", "_static_logical_not"], [73, 0, 1, "", "_static_logical_or"], [73, 0, 1, "", "_static_logical_xor"], [73, 0, 1, "", "_static_maximum"], [73, 0, 1, "", "_static_minimum"], [73, 0, 1, "", "_static_multiply"], [73, 0, 1, "", "_static_negative"], [73, 0, 1, "", "_static_not_equal"], [73, 0, 1, "", "_static_positive"], [73, 0, 1, "", "_static_pow"], [73, 0, 1, "", "_static_rad2deg"], [73, 0, 1, "", "_static_reciprocal"], [73, 0, 1, "", "_static_remainder"], [73, 0, 1, "", "_static_round"], [73, 0, 1, "", "_static_sign"], [73, 0, 1, "", "_static_sin"], [73, 0, 1, "", "_static_sinh"], [73, 0, 1, "", "_static_sqrt"], [73, 0, 1, "", "_static_square"], [73, 0, 1, "", "_static_subtract"], [73, 0, 1, "", "_static_tan"], [73, 0, 1, "", "_static_tanh"], [73, 0, 1, "", "_static_trapz"], [73, 0, 1, "", "_static_trunc"], [73, 0, 1, "", "_static_trunc_divide"], [73, 0, 1, "", "abs"], [73, 0, 1, "", "acos"], [73, 0, 1, "", "acosh"], [73, 0, 1, "", "add"], [73, 0, 1, "", "angle"], [73, 0, 1, "", "asin"], [73, 0, 1, "", "asinh"], [73, 0, 1, "", "atan"], [73, 0, 1, "", "atan2"], [73, 0, 1, "", "atanh"], [73, 0, 1, "", "bitwise_and"], [73, 0, 1, "", "bitwise_invert"], [73, 0, 1, "", "bitwise_left_shift"], [73, 0, 1, "", "bitwise_or"], [73, 0, 1, "", "bitwise_right_shift"], [73, 0, 1, "", "bitwise_xor"], [73, 0, 1, "", "ceil"], [73, 0, 1, "", "cos"], [73, 0, 1, "", "cosh"], [73, 0, 1, "", "deg2rad"], [73, 0, 1, "", "divide"], [73, 0, 1, "", "equal"], [73, 0, 1, "", "erf"], [73, 0, 1, "", "exp"], [73, 0, 1, "", "exp2"], [73, 0, 1, "", "expm1"], [73, 0, 1, "", "floor"], [73, 0, 1, "", "floor_divide"], [73, 0, 1, "", "fmin"], [73, 0, 1, "", "gcd"], [73, 0, 1, "", "greater"], [73, 0, 1, "", "greater_equal"], [73, 0, 1, "", "imag"], [73, 0, 1, "", "isfinite"], [73, 0, 1, "", "isinf"], [73, 0, 1, "", "isnan"], [73, 0, 1, "", "isreal"], [73, 0, 1, "", "lcm"], [73, 0, 1, "", "less"], [73, 0, 1, "", "less_equal"], [73, 0, 1, "", "log"], [73, 0, 1, "", "log10"], [73, 0, 1, "", "log1p"], [73, 0, 1, "", "log2"], [73, 0, 1, "", "logaddexp"], [73, 0, 1, "", "logaddexp2"], [73, 0, 1, "", "logical_and"], [73, 0, 1, "", "logical_not"], [73, 0, 1, "", "logical_or"], [73, 0, 1, "", "logical_xor"], [73, 0, 1, "", "maximum"], [73, 0, 1, "", "minimum"], [73, 0, 1, "", "multiply"], [73, 0, 1, "", "nan_to_num"], [73, 0, 1, "", "negative"], [73, 0, 1, "", "not_equal"], [73, 0, 1, "", "positive"], [73, 0, 1, "", "pow"], [73, 0, 1, "", "rad2deg"], [73, 0, 1, "", "real"], [73, 0, 1, "", "reciprocal"], [73, 0, 1, "", "remainder"], [73, 0, 1, "", "round"], [73, 0, 1, "", "sign"], [73, 0, 1, "", "sin"], [73, 0, 1, "", "sinh"], [73, 0, 1, "", "sqrt"], [73, 0, 1, "", "square"], [73, 0, 1, "", "static_angle"], [73, 0, 1, "", "static_exp2"], [73, 0, 1, "", "static_fmin"], [73, 0, 1, "", "static_gcd"], [73, 0, 1, "", "static_imag"], [73, 0, 1, "", "static_logaddexp2"], [73, 0, 1, "", "static_nan_to_num"], [73, 0, 1, "", "static_real"], [73, 0, 1, "", "subtract"], [73, 0, 1, "", "tan"], [73, 0, 1, "", "tanh"], [73, 0, 1, "", "trapz"], [73, 0, 1, "", "trunc"], [73, 0, 1, "", "trunc_divide"]], "ivy.data_classes.container.experimental": [[74, 3, 0, "-", "activations"], [74, 3, 0, "-", "conversions"], [74, 3, 0, "-", "creation"], [74, 3, 0, "-", "data_type"], [74, 3, 0, "-", "device"], [74, 3, 0, "-", "elementwise"], [74, 3, 0, "-", "general"], [74, 3, 0, "-", "gradients"], [74, 3, 0, "-", "image"], [74, 3, 0, "-", "layers"], [74, 3, 0, "-", "linear_algebra"], [74, 3, 0, "-", "losses"], [74, 3, 0, "-", "manipulation"], [74, 3, 0, "-", "norms"], [74, 3, 0, "-", "random"], [74, 3, 0, "-", "searching"], [74, 3, 0, "-", "set"], [74, 3, 0, "-", "sorting"], [74, 3, 0, "-", "statistical"], [74, 3, 0, "-", "utility"]], "ivy.data_classes.container.experimental.activations": [[74, 1, 1, "", "_ContainerWithActivationExperimental"]], "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "_static_celu"], [74, 0, 1, "", "_static_elu"], [74, 0, 1, "", "_static_hardtanh"], [74, 0, 1, "", "_static_silu"], [74, 0, 1, "", "_static_tanhshrink"], [74, 0, 1, "", "celu"], [74, 0, 1, "", "elu"], [74, 0, 1, "", "hardtanh"], [74, 0, 1, "", "logit"], [74, 0, 1, "", "logsigmoid"], [74, 0, 1, "", "prelu"], [74, 0, 1, "", "relu6"], [74, 0, 1, "", "selu"], [74, 0, 1, "", "silu"], [74, 0, 1, "", "static_logit"], [74, 0, 1, "", "static_logsigmoid"], [74, 0, 1, "", "static_prelu"], [74, 0, 1, "", "static_relu6"], [74, 0, 1, "", "static_selu"], [74, 0, 1, "", "static_thresholded_relu"], [74, 0, 1, "", "tanhshrink"], [74, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.container.experimental.conversions": [[74, 1, 1, "", "_ContainerWithConversionExperimental"]], "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental": [[74, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.creation": [[74, 1, 1, "", "_ContainerWithCreationExperimental"]], "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "_static_trilu"], [74, 0, 1, "", "blackman_window"], [74, 0, 1, "", "eye_like"], [74, 0, 1, "", "hamming_window"], [74, 0, 1, "", "hann_window"], [74, 0, 1, "", "kaiser_bessel_derived_window"], [74, 0, 1, "", "kaiser_window"], [74, 0, 1, "", "mel_weight_matrix"], [74, 0, 1, "", "static_blackman_window"], [74, 0, 1, "", "static_eye_like"], [74, 0, 1, "", "static_hamming_window"], [74, 0, 1, "", "static_hann_window"], [74, 0, 1, "", "static_kaiser_bessel_derived_window"], [74, 0, 1, "", "static_kaiser_window"], [74, 0, 1, "", "static_mel_weight_matrix"], [74, 0, 1, "", "static_tril_indices"], [74, 0, 1, "", "static_unsorted_segment_min"], [74, 0, 1, "", "static_unsorted_segment_sum"], [74, 0, 1, "", "static_vorbis_window"], [74, 0, 1, "", "tril_indices"], [74, 0, 1, "", "trilu"], [74, 0, 1, "", "unsorted_segment_min"], [74, 0, 1, "", "unsorted_segment_sum"], [74, 0, 1, "", "vorbis_window"]], "ivy.data_classes.container.experimental.data_type": [[74, 1, 1, "", "_ContainerWithData_typeExperimental"]], "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental": [[74, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.device": [[74, 1, 1, "", "_ContainerWithDeviceExperimental"]], "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental": [[74, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.elementwise": [[74, 1, 1, "", "_ContainerWithElementWiseExperimental"]], "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "allclose"], [74, 0, 1, "", "amax"], [74, 0, 1, "", "amin"], [74, 0, 1, "", "binarizer"], [74, 0, 1, "", "conj"], [74, 0, 1, "", "copysign"], [74, 0, 1, "", "count_nonzero"], [74, 0, 1, "", "diff"], [74, 0, 1, "", "digamma"], [74, 0, 1, "", "erfc"], [74, 0, 1, "", "fix"], [74, 0, 1, "", "float_power"], [74, 0, 1, "", "fmax"], [74, 0, 1, "", "fmod"], [74, 0, 1, "", "frexp"], [74, 0, 1, "", "gradient"], [74, 0, 1, "", "hypot"], [74, 0, 1, "", "isclose"], [74, 0, 1, "", "ldexp"], [74, 0, 1, "", "lerp"], [74, 0, 1, "", "modf"], [74, 0, 1, "", "nansum"], [74, 0, 1, "", "nextafter"], [74, 0, 1, "", "signbit"], [74, 0, 1, "", "sinc"], [74, 0, 1, "", "sparsify_tensor"], [74, 0, 1, "", "static_allclose"], [74, 0, 1, "", "static_amax"], [74, 0, 1, "", "static_amin"], [74, 0, 1, "", "static_binarizer"], [74, 0, 1, "", "static_conj"], [74, 0, 1, "", "static_copysign"], [74, 0, 1, "", "static_count_nonzero"], [74, 0, 1, "", "static_diff"], [74, 0, 1, "", "static_digamma"], [74, 0, 1, "", "static_erfc"], [74, 0, 1, "", "static_fix"], [74, 0, 1, "", "static_float_power"], [74, 0, 1, "", "static_fmax"], [74, 0, 1, "", "static_fmod"], [74, 0, 1, "", "static_frexp"], [74, 0, 1, "", "static_gradient"], [74, 0, 1, "", "static_hypot"], [74, 0, 1, "", "static_isclose"], [74, 0, 1, "", "static_ldexp"], [74, 0, 1, "", "static_lerp"], [74, 0, 1, "", "static_modf"], [74, 0, 1, "", "static_nansum"], [74, 0, 1, "", "static_nextafter"], [74, 0, 1, "", "static_signbit"], [74, 0, 1, "", "static_sinc"], [74, 0, 1, "", "static_sparsify_tensor"], [74, 0, 1, "", "static_xlogy"], [74, 0, 1, "", "static_zeta"], [74, 0, 1, "", "xlogy"], [74, 0, 1, "", "zeta"]], "ivy.data_classes.container.experimental.general": [[74, 1, 1, "", "_ContainerWithGeneralExperimental"]], "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "_static_reduce"], [74, 0, 1, "", "reduce"]], "ivy.data_classes.container.experimental.gradients": [[74, 1, 1, "", "_ContainerWithGradientsExperimental"]], "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental": [[74, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.image": [[74, 1, 1, "", "_ContainerWithImageExperimental"]], "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental": [[74, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.layers": [[74, 1, 1, "", "_ContainerWithLayersExperimental"]], "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "_static_fft"], [74, 0, 1, "", "_static_sliding_window"], [74, 0, 1, "", "adaptive_avg_pool1d"], [74, 0, 1, "", "adaptive_avg_pool2d"], [74, 0, 1, "", "adaptive_max_pool2d"], [74, 0, 1, "", "avg_pool1d"], [74, 0, 1, "", "avg_pool2d"], [74, 0, 1, "", "avg_pool3d"], [74, 0, 1, "", "dct"], [74, 0, 1, "", "dft"], [74, 0, 1, "", "embedding"], [74, 0, 1, "", "fft"], [74, 0, 1, "", "idct"], [74, 0, 1, "", "ifft"], [74, 0, 1, "", "ifftn"], [74, 0, 1, "", "interpolate"], [74, 0, 1, "", "max_pool1d"], [74, 0, 1, "", "max_pool2d"], [74, 0, 1, "", "max_pool3d"], [74, 0, 1, "", "max_unpool1d"], [74, 0, 1, "", "rfft"], [74, 0, 1, "", "rfftn"], [74, 0, 1, "", "sliding_window"], [74, 0, 1, "", "static_adaptive_avg_pool1d"], [74, 0, 1, "", "static_adaptive_avg_pool2d"], [74, 0, 1, "", "static_adaptive_max_pool2d"], [74, 0, 1, "", "static_avg_pool1d"], [74, 0, 1, "", "static_avg_pool2d"], [74, 0, 1, "", "static_avg_pool3d"], [74, 0, 1, "", "static_dct"], [74, 0, 1, "", "static_dft"], [74, 0, 1, "", "static_embedding"], [74, 0, 1, "", "static_idct"], [74, 0, 1, "", "static_ifft"], [74, 0, 1, "", "static_ifftn"], [74, 0, 1, "", "static_interpolate"], [74, 0, 1, "", "static_max_pool1d"], [74, 0, 1, "", "static_max_pool2d"], [74, 0, 1, "", "static_max_pool3d"], [74, 0, 1, "", "static_max_unpool1d"], [74, 0, 1, "", "static_rfft"], [74, 0, 1, "", "static_rfftn"], [74, 0, 1, "", "static_stft"], [74, 0, 1, "", "stft"]], "ivy.data_classes.container.experimental.linear_algebra": [[74, 1, 1, "", "_ContainerWithLinearAlgebraExperimental"]], "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "adjoint"], [74, 0, 1, "", "batched_outer"], [74, 0, 1, "", "cond"], [74, 0, 1, "", "diagflat"], [74, 0, 1, "", "dot"], [74, 0, 1, "", "eig"], [74, 0, 1, "", "eigh_tridiagonal"], [74, 0, 1, "", "eigvals"], [74, 0, 1, "", "higher_order_moment"], [74, 0, 1, "", "initialize_tucker"], [74, 0, 1, "", "kron"], [74, 0, 1, "", "make_svd_non_negative"], [74, 0, 1, "", "matrix_exp"], [74, 0, 1, "", "mode_dot"], [74, 0, 1, "", "multi_dot"], [74, 0, 1, "", "multi_mode_dot"], [74, 0, 1, "", "partial_tucker"], [74, 0, 1, "", "static_adjoint"], [74, 0, 1, "", "static_batched_outer"], [74, 0, 1, "", "static_cond"], [74, 0, 1, "", "static_diagflat"], [74, 0, 1, "", "static_dot"], [74, 0, 1, "", "static_eig"], [74, 0, 1, "", "static_eigh_tridiagonal"], [74, 0, 1, "", "static_eigvals"], [74, 0, 1, "", "static_higher_order_moment"], [74, 0, 1, "", "static_initialize_tucker"], [74, 0, 1, "", "static_kron"], [74, 0, 1, "", "static_make_svd_non_negative"], [74, 0, 1, "", "static_matrix_exp"], [74, 0, 1, "", "static_mode_dot"], [74, 0, 1, "", "static_multi_dot"], [74, 0, 1, "", "static_multi_mode_dot"], [74, 0, 1, "", "static_partial_tucker"], [74, 0, 1, "", "static_svd_flip"], [74, 0, 1, "", "static_tensor_train"], [74, 0, 1, "", "static_truncated_svd"], [74, 0, 1, "", "static_tt_matrix_to_tensor"], [74, 0, 1, "", "static_tucker"], [74, 0, 1, "", "svd_flip"], [74, 0, 1, "", "tensor_train"], [74, 0, 1, "", "truncated_svd"], [74, 0, 1, "", "tt_matrix_to_tensor"], [74, 0, 1, "", "tucker"]], "ivy.data_classes.container.experimental.losses": [[74, 1, 1, "", "_ContainerWithLossesExperimental"]], "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "_static_huber_loss"], [74, 0, 1, "", "_static_kl_div"], [74, 0, 1, "", "_static_l1_loss"], [74, 0, 1, "", "_static_log_poisson_loss"], [74, 0, 1, "", "_static_poisson_nll_loss"], [74, 0, 1, "", "_static_smooth_l1_loss"], [74, 0, 1, "", "_static_soft_margin_loss"], [74, 0, 1, "", "huber_loss"], [74, 0, 1, "", "kl_div"], [74, 0, 1, "", "l1_loss"], [74, 0, 1, "", "log_poisson_loss"], [74, 0, 1, "", "poisson_nll_loss"], [74, 0, 1, "", "smooth_l1_loss"], [74, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.container.experimental.manipulation": [[74, 1, 1, "", "_ContainerWithManipulationExperimental"], [74, 2, 1, "", "concat_from_sequence"]], "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "_static_fill_diagonal"], [74, 0, 1, "", "_static_put_along_axis"], [74, 0, 1, "", "_static_trim_zeros"], [74, 0, 1, "", "_static_unique_consecutive"], [74, 0, 1, "", "as_strided"], [74, 0, 1, "", "associative_scan"], [74, 0, 1, "", "atleast_1d"], [74, 0, 1, "", "atleast_2d"], [74, 0, 1, "", "atleast_3d"], [74, 0, 1, "", "broadcast_shapes"], [74, 0, 1, "", "column_stack"], [74, 0, 1, "", "concat_from_sequence"], [74, 0, 1, "", "dsplit"], [74, 0, 1, "", "dstack"], [74, 0, 1, "", "expand"], [74, 0, 1, "", "fill_diagonal"], [74, 0, 1, "", "flatten"], [74, 0, 1, "", "fliplr"], [74, 0, 1, "", "flipud"], [74, 0, 1, "", "fold"], [74, 0, 1, "", "heaviside"], [74, 0, 1, "", "hsplit"], [74, 0, 1, "", "hstack"], [74, 0, 1, "", "i0"], [74, 0, 1, "", "matricize"], [74, 0, 1, "", "moveaxis"], [74, 0, 1, "", "pad"], [74, 0, 1, "", "partial_fold"], [74, 0, 1, "", "partial_tensor_to_vec"], [74, 0, 1, "", "partial_unfold"], [74, 0, 1, "", "partial_vec_to_tensor"], [74, 0, 1, "", "put_along_axis"], [74, 0, 1, "", "rot90"], [74, 0, 1, "", "soft_thresholding"], [74, 0, 1, "", "static_as_strided"], [74, 0, 1, "", "static_atleast_1d"], [74, 0, 1, "", "static_atleast_2d"], [74, 0, 1, "", "static_atleast_3d"], [74, 0, 1, "", "static_broadcast_shapes"], [74, 0, 1, "", "static_column_stack"], [74, 0, 1, "", "static_concat_from_sequence"], [74, 0, 1, "", "static_dsplit"], [74, 0, 1, "", "static_dstack"], [74, 0, 1, "", "static_expand"], [74, 0, 1, "", "static_flatten"], [74, 0, 1, "", "static_fliplr"], [74, 0, 1, "", "static_flipud"], [74, 0, 1, "", "static_fold"], [74, 0, 1, "", "static_heaviside"], [74, 0, 1, "", "static_hsplit"], [74, 0, 1, "", "static_hstack"], [74, 0, 1, "", "static_i0"], [74, 0, 1, "", "static_matricize"], [74, 0, 1, "", "static_moveaxis"], [74, 0, 1, "", "static_pad"], [74, 0, 1, "", "static_partial_fold"], [74, 0, 1, "", "static_partial_tensor_to_vec"], [74, 0, 1, "", "static_partial_unfold"], [74, 0, 1, "", "static_partial_vec_to_tensor"], [74, 0, 1, "", "static_rot90"], [74, 0, 1, "", "static_soft_thresholding"], [74, 0, 1, "", "static_take_along_axis"], [74, 0, 1, "", "static_top_k"], [74, 0, 1, "", "static_unfold"], [74, 0, 1, "", "static_vsplit"], [74, 0, 1, "", "static_vstack"], [74, 0, 1, "", "take_along_axis"], [74, 0, 1, "", "top_k"], [74, 0, 1, "", "trim_zeros"], [74, 0, 1, "", "unfold"], [74, 0, 1, "", "unique_consecutive"], [74, 0, 1, "", "vsplit"], [74, 0, 1, "", "vstack"]], "ivy.data_classes.container.experimental.norms": [[74, 1, 1, "", "_ContainerWithNormsExperimental"]], "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "batch_norm"], [74, 0, 1, "", "group_norm"], [74, 0, 1, "", "instance_norm"], [74, 0, 1, "", "l1_normalize"], [74, 0, 1, "", "l2_normalize"], [74, 0, 1, "", "lp_normalize"], [74, 0, 1, "", "static_batch_norm"], [74, 0, 1, "", "static_group_norm"], [74, 0, 1, "", "static_instance_norm"], [74, 0, 1, "", "static_l1_normalize"], [74, 0, 1, "", "static_l2_normalize"], [74, 0, 1, "", "static_lp_normalize"]], "ivy.data_classes.container.experimental.random": [[74, 1, 1, "", "_ContainerWithRandomExperimental"]], "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "bernoulli"], [74, 0, 1, "", "beta"], [74, 0, 1, "", "dirichlet"], [74, 0, 1, "", "gamma"], [74, 0, 1, "", "poisson"], [74, 0, 1, "", "static_bernoulli"], [74, 0, 1, "", "static_beta"], [74, 0, 1, "", "static_dirichlet"], [74, 0, 1, "", "static_gamma"], [74, 0, 1, "", "static_poisson"]], "ivy.data_classes.container.experimental.searching": [[74, 1, 1, "", "_ContainerWithSearchingExperimental"]], "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "static_unravel_index"], [74, 0, 1, "", "unravel_index"]], "ivy.data_classes.container.experimental.set": [[74, 1, 1, "", "_ContainerWithSetExperimental"]], "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental": [[74, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.sorting": [[74, 1, 1, "", "_ContainerWithSortingExperimental"]], "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "invert_permutation"], [74, 0, 1, "", "lexsort"], [74, 0, 1, "", "static_invert_permutation"], [74, 0, 1, "", "static_lexsort"]], "ivy.data_classes.container.experimental.statistical": [[74, 1, 1, "", "_ContainerWithStatisticalExperimental"]], "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "_static_cummax"], [74, 0, 1, "", "_static_cummin"], [74, 0, 1, "", "bincount"], [74, 0, 1, "", "corrcoef"], [74, 0, 1, "", "cov"], [74, 0, 1, "", "cummax"], [74, 0, 1, "", "cummin"], [74, 0, 1, "", "histogram"], [74, 0, 1, "", "igamma"], [74, 0, 1, "", "median"], [74, 0, 1, "", "nanmean"], [74, 0, 1, "", "nanmedian"], [74, 0, 1, "", "nanprod"], [74, 0, 1, "", "quantile"], [74, 0, 1, "", "static_bincount"], [74, 0, 1, "", "static_corrcoef"], [74, 0, 1, "", "static_cov"], [74, 0, 1, "", "static_histogram"], [74, 0, 1, "", "static_igamma"], [74, 0, 1, "", "static_median"], [74, 0, 1, "", "static_nanmean"], [74, 0, 1, "", "static_nanmedian"], [74, 0, 1, "", "static_nanprod"], [74, 0, 1, "", "static_quantile"]], "ivy.data_classes.container.experimental.utility": [[74, 1, 1, "", "_ContainerWithUtilityExperimental"]], "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "optional_get_element"], [74, 0, 1, "", "static_optional_get_element"]], "ivy.data_classes.container.general": [[75, 1, 1, "", "_ContainerWithGeneral"]], "ivy.data_classes.container.general._ContainerWithGeneral": [[75, 4, 1, "", "_abc_impl"], [75, 0, 1, "", "_static_all_equal"], [75, 0, 1, "", "_static_array_equal"], [75, 0, 1, "", "_static_assert_supports_inplace"], [75, 0, 1, "", "_static_clip_matrix_norm"], [75, 0, 1, "", "_static_clip_vector_norm"], [75, 0, 1, "", "_static_einops_rearrange"], [75, 0, 1, "", "_static_einops_reduce"], [75, 0, 1, "", "_static_einops_repeat"], [75, 0, 1, "", "_static_exists"], [75, 0, 1, "", "_static_fourier_encode"], [75, 0, 1, "", "_static_gather"], [75, 0, 1, "", "_static_gather_nd"], [75, 0, 1, "", "_static_get_num_dims"], [75, 0, 1, "", "_static_has_nans"], [75, 0, 1, "", "_static_inplace_decrement"], [75, 0, 1, "", "_static_inplace_increment"], [75, 0, 1, "", "_static_inplace_update"], [75, 0, 1, "", "_static_is_array"], [75, 0, 1, "", "_static_is_ivy_array"], [75, 0, 1, "", "_static_is_native_array"], [75, 0, 1, "", "_static_scatter_flat"], [75, 0, 1, "", "_static_scatter_nd"], [75, 0, 1, "", "_static_stable_divide"], [75, 0, 1, "", "_static_stable_pow"], [75, 0, 1, "", "_static_supports_inplace_updates"], [75, 0, 1, "", "_static_to_list"], [75, 0, 1, "", "_static_to_numpy"], [75, 0, 1, "", "_static_to_scalar"], [75, 0, 1, "", "_static_value_is_nan"], [75, 0, 1, "", "all_equal"], [75, 0, 1, "", "array_equal"], [75, 0, 1, "", "assert_supports_inplace"], [75, 0, 1, "", "clip_matrix_norm"], [75, 0, 1, "", "clip_vector_norm"], [75, 0, 1, "", "einops_rearrange"], [75, 0, 1, "", "einops_reduce"], [75, 0, 1, "", "einops_repeat"], [75, 0, 1, "", "exists"], [75, 0, 1, "", "fourier_encode"], [75, 0, 1, "", "gather"], [75, 0, 1, "", "gather_nd"], [75, 0, 1, "", "get_num_dims"], [75, 0, 1, "", "has_nans"], [75, 0, 1, "", "inplace_decrement"], [75, 0, 1, "", "inplace_increment"], [75, 0, 1, "", "inplace_update"], [75, 0, 1, "", "is_array"], [75, 0, 1, "", "is_ivy_array"], [75, 0, 1, "", "is_native_array"], [75, 0, 1, "", "isin"], [75, 0, 1, "", "itemsize"], [75, 0, 1, "", "scatter_flat"], [75, 0, 1, "", "scatter_nd"], [75, 0, 1, "", "stable_divide"], [75, 0, 1, "", "stable_pow"], [75, 0, 1, "", "static_isin"], [75, 0, 1, "", "static_itemsize"], [75, 0, 1, "", "static_strides"], [75, 0, 1, "", "strides"], [75, 0, 1, "", "supports_inplace_updates"], [75, 0, 1, "", "to_list"], [75, 0, 1, "", "to_numpy"], [75, 0, 1, "", "to_scalar"], [75, 0, 1, "", "value_is_nan"]], "ivy.data_classes.container.gradients": [[76, 1, 1, "", "_ContainerWithGradients"]], "ivy.data_classes.container.gradients._ContainerWithGradients": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "_static_stop_gradient"], [76, 0, 1, "", "adam_step"], [76, 0, 1, "", "adam_update"], [76, 0, 1, "", "gradient_descent_update"], [76, 0, 1, "", "lamb_update"], [76, 0, 1, "", "lars_update"], [76, 0, 1, "", "optimizer_update"], [76, 0, 1, "", "stop_gradient"]], "ivy.data_classes.container.image": [[77, 1, 1, "", "_ContainerWithImage"]], "ivy.data_classes.container.image._ContainerWithImage": [[77, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.layers": [[78, 1, 1, "", "_ContainerWithLayers"]], "ivy.data_classes.container.layers._ContainerWithLayers": [[78, 4, 1, "", "_abc_impl"], [78, 0, 1, "", "_static_conv1d"], [78, 0, 1, "", "_static_conv1d_transpose"], [78, 0, 1, "", "_static_conv2d"], [78, 0, 1, "", "_static_conv2d_transpose"], [78, 0, 1, "", "_static_conv3d"], [78, 0, 1, "", "_static_conv3d_transpose"], [78, 0, 1, "", "_static_depthwise_conv2d"], [78, 0, 1, "", "_static_dropout"], [78, 0, 1, "", "_static_dropout1d"], [78, 0, 1, "", "_static_dropout2d"], [78, 0, 1, "", "_static_dropout3d"], [78, 0, 1, "", "_static_linear"], [78, 0, 1, "", "_static_lstm_update"], [78, 0, 1, "", "_static_multi_head_attention"], [78, 0, 1, "", "_static_reduce_window"], [78, 0, 1, "", "_static_scaled_dot_product_attention"], [78, 0, 1, "", "conv1d"], [78, 0, 1, "", "conv1d_transpose"], [78, 0, 1, "", "conv2d"], [78, 0, 1, "", "conv2d_transpose"], [78, 0, 1, "", "conv3d"], [78, 0, 1, "", "conv3d_transpose"], [78, 0, 1, "", "depthwise_conv2d"], [78, 0, 1, "", "dropout"], [78, 0, 1, "", "dropout1d"], [78, 0, 1, "", "dropout2d"], [78, 0, 1, "", "dropout3d"], [78, 0, 1, "", "linear"], [78, 0, 1, "", "lstm_update"], [78, 0, 1, "", "multi_head_attention"], [78, 0, 1, "", "reduce_window"], [78, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.container.linear_algebra": [[79, 1, 1, "", "_ContainerWithLinearAlgebra"]], "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra": [[79, 4, 1, "", "_abc_impl"], [79, 0, 1, "", "_static_cholesky"], [79, 0, 1, "", "_static_cross"], [79, 0, 1, "", "_static_det"], [79, 0, 1, "", "_static_diag"], [79, 0, 1, "", "_static_diagonal"], [79, 0, 1, "", "_static_eigh"], [79, 0, 1, "", "_static_eigvalsh"], [79, 0, 1, "", "_static_inner"], [79, 0, 1, "", "_static_inv"], [79, 0, 1, "", "_static_matmul"], [79, 0, 1, "", "_static_matrix_norm"], [79, 0, 1, "", "_static_matrix_power"], [79, 0, 1, "", "_static_matrix_rank"], [79, 0, 1, "", "_static_matrix_transpose"], [79, 0, 1, "", "_static_outer"], [79, 0, 1, "", "_static_pinv"], [79, 0, 1, "", "_static_qr"], [79, 0, 1, "", "_static_slogdet"], [79, 0, 1, "", "_static_solve"], [79, 0, 1, "", "_static_svd"], [79, 0, 1, "", "_static_svdvals"], [79, 0, 1, "", "_static_tensordot"], [79, 0, 1, "", "_static_tensorsolve"], [79, 0, 1, "", "_static_trace"], [79, 0, 1, "", "_static_vander"], [79, 0, 1, "", "_static_vecdot"], [79, 0, 1, "", "_static_vector_norm"], [79, 0, 1, "", "_static_vector_to_skew_symmetric_matrix"], [79, 0, 1, "", "cholesky"], [79, 0, 1, "", "cross"], [79, 0, 1, "", "det"], [79, 0, 1, "", "diag"], [79, 0, 1, "", "diagonal"], [79, 0, 1, "", "eigh"], [79, 0, 1, "", "eigvalsh"], [79, 0, 1, "", "general_inner_product"], [79, 0, 1, "", "inner"], [79, 0, 1, "", "inv"], [79, 0, 1, "", "matmul"], [79, 0, 1, "", "matrix_norm"], [79, 0, 1, "", "matrix_power"], [79, 0, 1, "", "matrix_rank"], [79, 0, 1, "", "matrix_transpose"], [79, 0, 1, "", "outer"], [79, 0, 1, "", "pinv"], [79, 0, 1, "", "qr"], [79, 0, 1, "", "slogdet"], [79, 0, 1, "", "solve"], [79, 0, 1, "", "static_general_inner_product"], [79, 0, 1, "", "svd"], [79, 0, 1, "", "svdvals"], [79, 0, 1, "", "tensordot"], [79, 0, 1, "", "tensorsolve"], [79, 0, 1, "", "trace"], [79, 0, 1, "", "vander"], [79, 0, 1, "", "vecdot"], [79, 0, 1, "", "vector_norm"], [79, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.container.losses": [[80, 1, 1, "", "_ContainerWithLosses"]], "ivy.data_classes.container.losses._ContainerWithLosses": [[80, 4, 1, "", "_abc_impl"], [80, 0, 1, "", "_static_binary_cross_entropy"], [80, 0, 1, "", "_static_cross_entropy"], [80, 0, 1, "", "_static_sparse_cross_entropy"], [80, 0, 1, "", "binary_cross_entropy"], [80, 0, 1, "", "cross_entropy"], [80, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.container.manipulation": [[81, 1, 1, "", "_ContainerWithManipulation"]], "ivy.data_classes.container.manipulation._ContainerWithManipulation": [[81, 4, 1, "", "_abc_impl"], [81, 0, 1, "", "_static_clip"], [81, 0, 1, "", "_static_concat"], [81, 0, 1, "", "_static_constant_pad"], [81, 0, 1, "", "_static_expand_dims"], [81, 0, 1, "", "_static_flip"], [81, 0, 1, "", "_static_permute_dims"], [81, 0, 1, "", "_static_repeat"], [81, 0, 1, "", "_static_reshape"], [81, 0, 1, "", "_static_roll"], [81, 0, 1, "", "_static_split"], [81, 0, 1, "", "_static_squeeze"], [81, 0, 1, "", "_static_stack"], [81, 0, 1, "", "_static_swapaxes"], [81, 0, 1, "", "_static_tile"], [81, 0, 1, "", "_static_unstack"], [81, 0, 1, "", "_static_zero_pad"], [81, 0, 1, "", "clip"], [81, 0, 1, "", "concat"], [81, 0, 1, "", "constant_pad"], [81, 0, 1, "", "expand_dims"], [81, 0, 1, "", "flip"], [81, 0, 1, "", "permute_dims"], [81, 0, 1, "", "repeat"], [81, 0, 1, "", "reshape"], [81, 0, 1, "", "roll"], [81, 0, 1, "", "split"], [81, 0, 1, "", "squeeze"], [81, 0, 1, "", "stack"], [81, 0, 1, "", "swapaxes"], [81, 0, 1, "", "tile"], [81, 0, 1, "", "unstack"], [81, 0, 1, "", "zero_pad"]], "ivy.data_classes.container.norms": [[82, 1, 1, "", "_ContainerWithNorms"]], "ivy.data_classes.container.norms._ContainerWithNorms": [[82, 4, 1, "", "_abc_impl"], [82, 0, 1, "", "layer_norm"]], "ivy.data_classes.container.random": [[83, 1, 1, "", "_ContainerWithRandom"]], "ivy.data_classes.container.random._ContainerWithRandom": [[83, 4, 1, "", "_abc_impl"], [83, 0, 1, "", "_static_multinomial"], [83, 0, 1, "", "_static_randint"], [83, 0, 1, "", "_static_random_normal"], [83, 0, 1, "", "_static_random_uniform"], [83, 0, 1, "", "_static_shuffle"], [83, 0, 1, "", "multinomial"], [83, 0, 1, "", "randint"], [83, 0, 1, "", "random_normal"], [83, 0, 1, "", "random_uniform"], [83, 0, 1, "", "shuffle"]], "ivy.data_classes.container.searching": [[84, 1, 1, "", "_ContainerWithSearching"]], "ivy.data_classes.container.searching._ContainerWithSearching": [[84, 4, 1, "", "_abc_impl"], [84, 0, 1, "", "_static_argmax"], [84, 0, 1, "", "_static_argmin"], [84, 0, 1, "", "_static_argwhere"], [84, 0, 1, "", "_static_nonzero"], [84, 0, 1, "", "_static_where"], [84, 0, 1, "", "argmax"], [84, 0, 1, "", "argmin"], [84, 0, 1, "", "argwhere"], [84, 0, 1, "", "nonzero"], [84, 0, 1, "", "where"]], "ivy.data_classes.container.set": [[85, 1, 1, "", "_ContainerWithSet"]], "ivy.data_classes.container.set._ContainerWithSet": [[85, 4, 1, "", "_abc_impl"], [85, 0, 1, "", "_static_unique_all"], [85, 0, 1, "", "_static_unique_counts"], [85, 0, 1, "", "_static_unique_inverse"], [85, 0, 1, "", "_static_unique_values"], [85, 0, 1, "", "unique_all"], [85, 0, 1, "", "unique_counts"], [85, 0, 1, "", "unique_inverse"], [85, 0, 1, "", "unique_values"]], "ivy.data_classes.container.sorting": [[86, 1, 1, "", "_ContainerWithSorting"]], "ivy.data_classes.container.sorting._ContainerWithSorting": [[86, 4, 1, "", "_abc_impl"], [86, 0, 1, "", "_static_argsort"], [86, 0, 1, "", "_static_searchsorted"], [86, 0, 1, "", "_static_sort"], [86, 0, 1, "", "argsort"], [86, 0, 1, "", "msort"], [86, 0, 1, "", "searchsorted"], [86, 0, 1, "", "sort"], [86, 0, 1, "", "static_msort"]], "ivy.data_classes.container.statistical": [[87, 1, 1, "", "_ContainerWithStatistical"]], "ivy.data_classes.container.statistical._ContainerWithStatistical": [[87, 4, 1, "", "_abc_impl"], [87, 0, 1, "", "_static_cumprod"], [87, 0, 1, "", "_static_cumsum"], [87, 0, 1, "", "_static_prod"], [87, 0, 1, "", "_static_sum"], [87, 0, 1, "", "_static_var"], [87, 0, 1, "", "cumprod"], [87, 0, 1, "", "cumsum"], [87, 0, 1, "", "einsum"], [87, 0, 1, "", "max"], [87, 0, 1, "", "mean"], [87, 0, 1, "", "min"], [87, 0, 1, "", "prod"], [87, 0, 1, "", "std"], [87, 0, 1, "", "sum"], [87, 0, 1, "", "var"]], "ivy.data_classes.container.utility": [[88, 1, 1, "", "_ContainerWithUtility"]], "ivy.data_classes.container.utility._ContainerWithUtility": [[88, 4, 1, "", "_abc_impl"], [88, 0, 1, "", "_static_all"], [88, 0, 1, "", "_static_any"], [88, 0, 1, "", "all"], [88, 0, 1, "", "any"]], "ivy.data_classes.container.wrapping": [[89, 2, 1, "", "_wrap_function"], [89, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.data_classes.factorized_tensor": [[90, 3, 0, "-", "base"], [91, 3, 0, "-", "cp_tensor"], [92, 3, 0, "-", "parafac2_tensor"], [93, 3, 0, "-", "tr_tensor"], [94, 3, 0, "-", "tt_tensor"], [95, 3, 0, "-", "tucker_tensor"]], "ivy.data_classes.factorized_tensor.base": [[90, 1, 1, "", "FactorizedTensor"]], "ivy.data_classes.factorized_tensor.base.FactorizedTensor": [[90, 0, 1, "", "__init__"], [90, 4, 1, "", "_abc_impl"], [90, 0, 1, "", "mode_dot"], [90, 0, 1, "", "norm"], [90, 0, 1, "", "to_tensor"], [90, 0, 1, "", "to_unfolded"], [90, 0, 1, "", "to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[91, 1, 1, "", "CPTensor"]], "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor": [[91, 0, 1, "", "__init__"], [91, 4, 1, "", "_abc_impl"], [91, 0, 1, "", "cp_copy"], [91, 0, 1, "", "cp_flip_sign"], [91, 0, 1, "", "cp_lstsq_grad"], [91, 0, 1, "", "cp_mode_dot"], [91, 0, 1, "", "cp_n_param"], [91, 0, 1, "", "cp_norm"], [91, 0, 1, "", "cp_normalize"], [91, 0, 1, "", "cp_to_tensor"], [91, 0, 1, "", "cp_to_unfolded"], [91, 0, 1, "", "cp_to_vec"], [91, 0, 1, "", "mode_dot"], [91, 5, 1, "", "n_param"], [91, 0, 1, "", "norm"], [91, 0, 1, "", "normalize"], [91, 0, 1, "", "to_tensor"], [91, 0, 1, "", "to_unfolded"], [91, 0, 1, "", "to_vec"], [91, 0, 1, "", "unfolding_dot_khatri_rao"], [91, 0, 1, "", "validate_cp_rank"], [91, 0, 1, "", "validate_cp_tensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor": [[92, 1, 1, "", "Parafac2Tensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor": [[92, 0, 1, "", "__init__"], [92, 4, 1, "", "_abc_impl"], [92, 0, 1, "", "apply_parafac2_projections"], [92, 0, 1, "", "from_CPTensor"], [92, 5, 1, "", "n_param"], [92, 0, 1, "", "parafac2_normalise"], [92, 0, 1, "", "parafac2_to_slice"], [92, 0, 1, "", "parafac2_to_slices"], [92, 0, 1, "", "parafac2_to_tensor"], [92, 0, 1, "", "parafac2_to_unfolded"], [92, 0, 1, "", "parafac2_to_vec"], [92, 0, 1, "", "to_tensor"], [92, 0, 1, "", "to_unfolded"], [92, 0, 1, "", "to_vec"], [92, 0, 1, "", "validate_parafac2_tensor"]], "ivy.data_classes.factorized_tensor.tr_tensor": [[93, 1, 1, "", "TRTensor"]], "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor": [[93, 0, 1, "", "__init__"], [93, 4, 1, "", "_abc_impl"], [93, 5, 1, "", "n_param"], [93, 0, 1, "", "to_tensor"], [93, 0, 1, "", "to_unfolded"], [93, 0, 1, "", "to_vec"], [93, 0, 1, "", "tr_n_param"], [93, 0, 1, "", "tr_to_tensor"], [93, 0, 1, "", "tr_to_unfolded"], [93, 0, 1, "", "tr_to_vec"], [93, 0, 1, "", "validate_tr_rank"], [93, 0, 1, "", "validate_tr_tensor"]], "ivy.data_classes.factorized_tensor.tt_tensor": [[94, 1, 1, "", "TTTensor"]], "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor": [[94, 0, 1, "", "__init__"], [94, 4, 1, "", "_abc_impl"], [94, 0, 1, "", "_tt_n_param"], [94, 0, 1, "", "index_update"], [94, 5, 1, "", "n_param"], [94, 0, 1, "", "pad_tt_rank"], [94, 0, 1, "", "to_tensor"], [94, 0, 1, "", "to_unfolding"], [94, 0, 1, "", "to_vec"], [94, 0, 1, "", "tt_to_tensor"], [94, 0, 1, "", "tt_to_unfolded"], [94, 0, 1, "", "tt_to_vec"], [94, 0, 1, "", "validate_tt_rank"], [94, 0, 1, "", "validate_tt_tensor"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[95, 1, 1, "", "TuckerTensor"], [95, 2, 1, "", "_bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor": [[95, 0, 1, "", "__init__"], [95, 4, 1, "", "_abc_impl"], [95, 0, 1, "", "mode_dot"], [95, 5, 1, "", "n_param"], [95, 0, 1, "", "to_tensor"], [95, 0, 1, "", "to_unfolded"], [95, 0, 1, "", "to_vec"], [95, 0, 1, "", "tucker_copy"], [95, 0, 1, "", "tucker_mode_dot"], [95, 0, 1, "", "tucker_n_param"], [95, 0, 1, "", "tucker_normalize"], [95, 0, 1, "", "tucker_to_tensor"], [95, 0, 1, "", "tucker_to_unfolded"], [95, 0, 1, "", "tucker_to_vec"], [95, 0, 1, "", "validate_tucker_rank"], [95, 0, 1, "", "validate_tucker_tensor"]], "ivy.data_classes.nested_array": [[100, 3, 0, "-", "base"], [101, 3, 0, "-", "elementwise"], [99, 3, 0, "-", "nested_array"]], "ivy.data_classes.nested_array.base": [[100, 1, 1, "", "NestedArrayBase"]], "ivy.data_classes.nested_array.base.NestedArrayBase": [[100, 0, 1, "", "__init__"], [100, 4, 1, "", "_abc_impl"], [100, 0, 1, "", "broadcast_shapes"], [100, 5, 1, "", "data"], [100, 5, 1, "", "device"], [100, 5, 1, "", "dtype"], [100, 5, 1, "", "inner_shape"], [100, 5, 1, "", "ndim"], [100, 0, 1, "", "nested_array"], [100, 5, 1, "", "nested_rank"], [100, 0, 1, "", "ragged_map"], [100, 0, 1, "", "ragged_multi_map"], [100, 0, 1, "", "ragged_multi_map_in_function"], [100, 0, 1, "", "replace_ivy_arrays"], [100, 5, 1, "", "shape"], [100, 0, 1, "", "unbind"]], "ivy.data_classes.nested_array.elementwise": [[101, 1, 1, "", "NestedArrayElementwise"]], "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise": [[101, 4, 1, "", "_abc_impl"], [101, 0, 1, "", "static_add"]], "ivy.data_classes.nested_array.nested_array": [[99, 1, 1, "", "NestedArray"]], "ivy.data_classes.nested_array.nested_array.NestedArray": [[99, 0, 1, "", "__init__"], [99, 0, 1, "", "from_row_lengths"], [99, 0, 1, "", "from_row_splits"]], "ivy.functional.ivy": [[598, 3, 0, "-", "activations"], [599, 3, 0, "-", "constants"], [600, 3, 0, "-", "control_flow_ops"], [601, 3, 0, "-", "creation"], [602, 3, 0, "-", "data_type"], [603, 3, 0, "-", "device"], [604, 3, 0, "-", "elementwise"], [605, 3, 0, "-", "experimental"], [606, 3, 0, "-", "general"], [607, 3, 0, "-", "gradients"], [608, 3, 0, "-", "layers"], [609, 3, 0, "-", "linear_algebra"], [610, 3, 0, "-", "losses"], [611, 3, 0, "-", "manipulation"], [612, 3, 0, "-", "meta"], [613, 3, 0, "-", "nest"], [614, 3, 0, "-", "norms"], [615, 3, 0, "-", "random"], [616, 3, 0, "-", "searching"], [617, 3, 0, "-", "set"], [618, 3, 0, "-", "sorting"], [619, 3, 0, "-", "statistical"], [620, 3, 0, "-", "utility"]], "ivy.functional.ivy.experimental": [[350, 3, 0, "-", "activations"], [351, 3, 0, "-", "constants"], [352, 3, 0, "-", "creation"], [353, 3, 0, "-", "data_type"], [354, 3, 0, "-", "device"], [355, 3, 0, "-", "elementwise"], [356, 3, 0, "-", "general"], [357, 3, 0, "-", "gradients"], [358, 3, 0, "-", "layers"], [359, 3, 0, "-", "linear_algebra"], [360, 3, 0, "-", "losses"], [361, 3, 0, "-", "manipulation"], [362, 3, 0, "-", "meta"], [363, 3, 0, "-", "nest"], [364, 3, 0, "-", "norms"], [365, 3, 0, "-", "random"], [366, 3, 0, "-", "searching"], [367, 3, 0, "-", "set"], [368, 3, 0, "-", "sorting"], [369, 3, 0, "-", "sparse_array"], [370, 3, 0, "-", "statistical"], [371, 3, 0, "-", "utility"]], "ivy.stateful": [[760, 3, 0, "-", "activations"], [761, 3, 0, "-", "converters"], [762, 3, 0, "-", "helpers"], [763, 3, 0, "-", "initializers"], [764, 3, 0, "-", "layers"], [765, 3, 0, "-", "losses"], [766, 3, 0, "-", "module"], [767, 3, 0, "-", "norms"], [768, 3, 0, "-", "optimizers"], [769, 3, 0, "-", "sequential"]], "ivy.stateful.activations": [[760, 1, 1, "", "ELU"], [760, 1, 1, "", "GEGLU"], [760, 1, 1, "", "GELU"], [760, 1, 1, "", "Hardswish"], [760, 1, 1, "", "LeakyReLU"], [760, 1, 1, "", "LogSigmoid"], [760, 1, 1, "", "LogSoftmax"], [760, 1, 1, "", "Logit"], [760, 1, 1, "", "Mish"], [760, 1, 1, "", "PReLU"], [760, 1, 1, "", "ReLU"], [760, 1, 1, "", "ReLU6"], [760, 1, 1, "", "SeLU"], [760, 1, 1, "", "SiLU"], [760, 1, 1, "", "Sigmoid"], [760, 1, 1, "", "Softmax"], [760, 1, 1, "", "Softplus"], [760, 1, 1, "", "Tanh"]], "ivy.stateful.activations.ELU": [[760, 0, 1, "", "__init__"]], "ivy.stateful.activations.GEGLU": [[760, 0, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[760, 0, 1, "", "__init__"]], "ivy.stateful.activations.Hardswish": [[760, 0, 1, "", "__init__"]], "ivy.stateful.activations.LeakyReLU": [[760, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSigmoid": [[760, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSoftmax": [[760, 0, 1, "", "__init__"]], "ivy.stateful.activations.Logit": [[760, 0, 1, "", "__init__"]], "ivy.stateful.activations.Mish": [[760, 0, 1, "", "__init__"]], "ivy.stateful.activations.PReLU": [[760, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU": [[760, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU6": [[760, 0, 1, "", "__init__"]], "ivy.stateful.activations.SeLU": [[760, 0, 1, "", "__init__"]], "ivy.stateful.activations.SiLU": [[760, 0, 1, "", "__init__"]], "ivy.stateful.activations.Sigmoid": [[760, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softmax": [[760, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softplus": [[760, 0, 1, "", "__init__"]], "ivy.stateful.activations.Tanh": [[760, 0, 1, "", "__init__"]], "ivy.stateful.converters": [[761, 1, 1, "", "ModuleConverters"], [761, 2, 1, "", "to_ivy_module"]], "ivy.stateful.converters.ModuleConverters": [[761, 0, 1, "", "from_flax_module"], [761, 0, 1, "", "from_haiku_module"], [761, 0, 1, "", "from_keras_module"], [761, 0, 1, "", "from_paddle_module"], [761, 0, 1, "", "from_torch_module"]], "ivy.stateful.helpers": [[762, 1, 1, "", "ModuleHelpers"]], "ivy.stateful.helpers.ModuleHelpers": [[762, 0, 1, "", "check_submod_rets"], [762, 0, 1, "", "get_mod_key"], [762, 0, 1, "", "mod_depth"], [762, 0, 1, "", "mod_height"], [762, 0, 1, "", "mod_with_top_mod_key_chain"], [762, 0, 1, "", "show_mod_in_top_mod"], [762, 0, 1, "", "show_structure"], [762, 0, 1, "", "show_v_in_top_v"], [762, 0, 1, "", "sub_mods"], [762, 0, 1, "", "track_submod_call_order"], [762, 0, 1, "", "track_submod_rets"], [762, 0, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.initializers": [[763, 1, 1, "", "Constant"], [763, 1, 1, "", "FirstLayerSiren"], [763, 1, 1, "", "GlorotUniform"], [763, 1, 1, "", "Initializer"], [763, 1, 1, "", "KaimingNormal"], [763, 1, 1, "", "Ones"], [763, 1, 1, "", "RandomNormal"], [763, 1, 1, "", "Siren"], [763, 1, 1, "", "Uniform"], [763, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[763, 0, 1, "", "__init__"], [763, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[763, 0, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[763, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Initializer": [[763, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.KaimingNormal": [[763, 0, 1, "", "__init__"], [763, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[763, 0, 1, "", "__init__"]], "ivy.stateful.initializers.RandomNormal": [[763, 0, 1, "", "__init__"], [763, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Siren": [[763, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[763, 0, 1, "", "__init__"], [763, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[763, 0, 1, "", "__init__"]], "ivy.stateful.layers": [[764, 1, 1, "", "AdaptiveAvgPool1d"], [764, 1, 1, "", "AdaptiveAvgPool2d"], [764, 1, 1, "", "AvgPool1D"], [764, 1, 1, "", "AvgPool2D"], [764, 1, 1, "", "AvgPool3D"], [764, 1, 1, "", "Conv1D"], [764, 1, 1, "", "Conv1DTranspose"], [764, 1, 1, "", "Conv2D"], [764, 1, 1, "", "Conv2DTranspose"], [764, 1, 1, "", "Conv3D"], [764, 1, 1, "", "Conv3DTranspose"], [764, 1, 1, "", "Dct"], [764, 1, 1, "", "DepthwiseConv2D"], [764, 1, 1, "", "Dropout"], [764, 1, 1, "", "Embedding"], [764, 1, 1, "", "FFT"], [764, 1, 1, "", "IFFT"], [764, 1, 1, "", "Identity"], [764, 1, 1, "", "LSTM"], [764, 1, 1, "", "Linear"], [764, 1, 1, "", "MaxPool1D"], [764, 1, 1, "", "MaxPool2D"], [764, 1, 1, "", "MaxPool3D"], [764, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.AdaptiveAvgPool1d": [[764, 0, 1, "", "__init__"], [764, 0, 1, "", "extra_repr"]], "ivy.stateful.layers.AdaptiveAvgPool2d": [[764, 0, 1, "", "__init__"], [764, 0, 1, "", "extra_repr"]], "ivy.stateful.layers.AvgPool1D": [[764, 0, 1, "", "__init__"], [764, 0, 1, "", "extra_repr"]], "ivy.stateful.layers.AvgPool2D": [[764, 0, 1, "", "__init__"], [764, 0, 1, "", "extra_repr"]], "ivy.stateful.layers.AvgPool3D": [[764, 0, 1, "", "__init__"], [764, 0, 1, "", "extra_repr"]], "ivy.stateful.layers.Conv1D": [[764, 0, 1, "", "__init__"], [764, 0, 1, "", "extra_repr"]], "ivy.stateful.layers.Conv1DTranspose": [[764, 0, 1, "", "__init__"], [764, 0, 1, "", "extra_repr"]], "ivy.stateful.layers.Conv2D": [[764, 0, 1, "", "__init__"], [764, 0, 1, "", "extra_repr"]], "ivy.stateful.layers.Conv2DTranspose": [[764, 0, 1, "", "__init__"], [764, 0, 1, "", "extra_repr"]], "ivy.stateful.layers.Conv3D": [[764, 0, 1, "", "__init__"], [764, 0, 1, "", "extra_repr"]], "ivy.stateful.layers.Conv3DTranspose": [[764, 0, 1, "", "__init__"], [764, 0, 1, "", "extra_repr"]], "ivy.stateful.layers.Dct": [[764, 0, 1, "", "__init__"], [764, 0, 1, "", "extra_repr"]], "ivy.stateful.layers.DepthwiseConv2D": [[764, 0, 1, "", "__init__"], [764, 0, 1, "", "extra_repr"]], "ivy.stateful.layers.Dropout": [[764, 0, 1, "", "__init__"], [764, 0, 1, "", "extra_repr"]], "ivy.stateful.layers.Embedding": [[764, 0, 1, "", "__init__"], [764, 0, 1, "", "extra_repr"]], "ivy.stateful.layers.FFT": [[764, 0, 1, "", "__init__"], [764, 0, 1, "", "extra_repr"]], "ivy.stateful.layers.IFFT": [[764, 0, 1, "", "__init__"]], "ivy.stateful.layers.Identity": [[764, 0, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[764, 0, 1, "", "__init__"], [764, 0, 1, "", "extra_repr"], [764, 0, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[764, 0, 1, "", "__init__"], [764, 0, 1, "", "extra_repr"]], "ivy.stateful.layers.MaxPool1D": [[764, 0, 1, "", "__init__"], [764, 0, 1, "", "extra_repr"]], "ivy.stateful.layers.MaxPool2D": [[764, 0, 1, "", "__init__"], [764, 0, 1, "", "extra_repr"]], "ivy.stateful.layers.MaxPool3D": [[764, 0, 1, "", "__init__"], [764, 0, 1, "", "extra_repr"]], "ivy.stateful.layers.MultiHeadAttention": [[764, 0, 1, "", "__init__"]], "ivy.stateful.losses": [[765, 1, 1, "", "BinaryCrossEntropyLoss"], [765, 1, 1, "", "CrossEntropyLoss"], [765, 1, 1, "", "LogPoissonLoss"]], "ivy.stateful.losses.BinaryCrossEntropyLoss": [[765, 0, 1, "", "__init__"]], "ivy.stateful.losses.CrossEntropyLoss": [[765, 0, 1, "", "__init__"]], "ivy.stateful.losses.LogPoissonLoss": [[765, 0, 1, "", "__init__"]], "ivy.stateful.module": [[766, 1, 1, "", "Module"], [766, 1, 1, "", "ModuleMeta"]], "ivy.stateful.module.Module": [[766, 0, 1, "", "__call__"], [766, 0, 1, "", "__init__"], [766, 0, 1, "", "build"], [766, 5, 1, "", "build_mode"], [766, 5, 1, "", "built_"], [766, 5, 1, "", "device"], [766, 0, 1, "", "eval"], [766, 0, 1, "", "extra_repr"], [766, 0, 1, "", "load"], [766, 0, 1, "", "register_buffer"], [766, 0, 1, "", "save"], [766, 0, 1, "", "save_weights"], [766, 0, 1, "", "show_graph"], [766, 0, 1, "", "state_dict"], [766, 0, 1, "", "to_device"], [766, 0, 1, "", "trace_graph"], [766, 0, 1, "", "train"]], "ivy.stateful.norms": [[767, 1, 1, "", "BatchNorm2D"], [767, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.BatchNorm2D": [[767, 0, 1, "", "__init__"]], "ivy.stateful.norms.LayerNorm": [[767, 0, 1, "", "__init__"]], "ivy.stateful.optimizers": [[768, 1, 1, "", "Adam"], [768, 1, 1, "", "AdamW"], [768, 1, 1, "", "LAMB"], [768, 1, 1, "", "LARS"], [768, 1, 1, "", "Optimizer"], [768, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[768, 0, 1, "", "__init__"], [768, 0, 1, "", "set_state"], [768, 5, 1, "", "state"]], "ivy.stateful.optimizers.AdamW": [[768, 0, 1, "", "__init__"]], "ivy.stateful.optimizers.LAMB": [[768, 0, 1, "", "__init__"], [768, 0, 1, "", "set_state"], [768, 5, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[768, 0, 1, "", "__init__"], [768, 0, 1, "", "set_state"], [768, 5, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[768, 0, 1, "", "__init__"], [768, 0, 1, "", "set_state"], [768, 0, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[768, 0, 1, "", "__init__"], [768, 0, 1, "", "set_state"], [768, 5, 1, "", "state"]], "ivy.stateful.sequential": [[769, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[769, 0, 1, "", "__init__"]], "ivy.utils": [[770, 3, 0, "-", "assertions"], [771, 3, 0, "-", "backend"], [775, 3, 0, "-", "binaries"], [776, 3, 0, "-", "dynamic_import"], [777, 3, 0, "-", "einsum_parser"], [778, 3, 0, "-", "exceptions"], [779, 3, 0, "-", "inspection"], [780, 3, 0, "-", "logging"], [781, 3, 0, "-", "profiler"], [782, 3, 0, "-", "verbosity"]], "ivy.utils.assertions": [[770, 2, 1, "", "check_all"], [770, 2, 1, "", "check_all_or_any_fn"], [770, 2, 1, "", "check_any"], [770, 2, 1, "", "check_dev_correct_formatting"], [770, 2, 1, "", "check_dimensions"], [770, 2, 1, "", "check_elem_in_list"], [770, 2, 1, "", "check_equal"], [770, 2, 1, "", "check_exists"], [770, 2, 1, "", "check_false"], [770, 2, 1, "", "check_gather_input_valid"], [770, 2, 1, "", "check_gather_nd_input_valid"], [770, 2, 1, "", "check_greater"], [770, 2, 1, "", "check_inplace_sizes_valid"], [770, 2, 1, "", "check_isinstance"], [770, 2, 1, "", "check_kernel_padding_size"], [770, 2, 1, "", "check_less"], [770, 2, 1, "", "check_one_way_broadcastable"], [770, 2, 1, "", "check_same_dtype"], [770, 2, 1, "", "check_shape"], [770, 2, 1, "", "check_shapes_broadcastable"], [770, 2, 1, "", "check_true"], [770, 2, 1, "", "check_unsorted_segment_min_valid_params"]], "ivy.utils.backend": [[772, 3, 0, "-", "ast_helpers"], [773, 3, 0, "-", "handler"], [774, 3, 0, "-", "sub_backend_handler"]], "ivy.utils.backend.ast_helpers": [[772, 1, 1, "", "ImportTransformer"], [772, 1, 1, "", "IvyLoader"], [772, 1, 1, "", "IvyPathFinder"]], "ivy.utils.backend.ast_helpers.ImportTransformer": [[772, 0, 1, "", "__init__"], [772, 0, 1, "", "impersonate_import"], [772, 0, 1, "", "visit_Import"], [772, 0, 1, "", "visit_ImportFrom"]], "ivy.utils.backend.ast_helpers.IvyLoader": [[772, 0, 1, "", "__init__"], [772, 0, 1, "", "exec_module"]], "ivy.utils.backend.ast_helpers.IvyPathFinder": [[772, 0, 1, "", "find_spec"]], "ivy.utils.backend.handler": [[773, 1, 1, "", "ContextManager"], [773, 2, 1, "", "choose_random_backend"], [773, 2, 1, "", "convert_from_numpy_to_target_backend"], [773, 2, 1, "", "convert_from_source_backend_to_numpy"], [773, 2, 1, "", "current_backend"], [773, 2, 1, "", "prevent_access_locally"], [773, 2, 1, "", "previous_backend"], [773, 2, 1, "", "set_backend"], [773, 2, 1, "", "set_backend_to_specific_version"], [773, 2, 1, "", "set_jax_backend"], [773, 2, 1, "", "set_mxnet_backend"], [773, 2, 1, "", "set_numpy_backend"], [773, 2, 1, "", "set_paddle_backend"], [773, 2, 1, "", "set_tensorflow_backend"], [773, 2, 1, "", "set_torch_backend"], [773, 2, 1, "", "unset_backend"], [773, 2, 1, "", "with_backend"]], "ivy.utils.backend.handler.ContextManager": [[773, 0, 1, "", "__init__"]], "ivy.utils.backend.sub_backend_handler": [[774, 2, 1, "", "clear_sub_backends"], [774, 2, 1, "", "find_available_sub_backends"], [774, 2, 1, "", "fn_name_from_version_specific_fn_name"], [774, 2, 1, "", "fn_name_from_version_specific_fn_name_sub_backend"], [774, 2, 1, "", "set_sub_backend"], [774, 2, 1, "", "set_sub_backend_to_specific_version"], [774, 2, 1, "", "unset_sub_backend"]], "ivy.utils.binaries": [[775, 2, 1, "", "check_for_binaries"], [775, 2, 1, "", "cleanup_and_fetch_binaries"]], "ivy.utils.dynamic_import": [[776, 2, 1, "", "import_module"]], "ivy.utils.einsum_parser": [[777, 2, 1, "", "convert_interleaved_input"], [777, 2, 1, "", "convert_subscripts"], [777, 2, 1, "", "find_output_shape"], [777, 2, 1, "", "find_output_str"], [777, 2, 1, "", "gen_unused_symbols"], [777, 2, 1, "", "get_symbol"], [777, 2, 1, "", "has_valid_einsum_chars_only"], [777, 2, 1, "", "is_valid_einsum_char"], [777, 2, 1, "", "legalise_einsum_expr"], [777, 2, 1, "", "possibly_convert_to_numpy"]], "ivy.utils.exceptions": [[778, 7, 1, "", "InplaceUpdateException"], [778, 7, 1, "", "IvyAttributeError"], [778, 7, 1, "", "IvyBackendException"], [778, 7, 1, "", "IvyBroadcastShapeError"], [778, 7, 1, "", "IvyDeviceError"], [778, 7, 1, "", "IvyDtypePromotionError"], [778, 7, 1, "", "IvyError"], [778, 7, 1, "", "IvyException"], [778, 7, 1, "", "IvyIndexError"], [778, 7, 1, "", "IvyInvalidBackendException"], [778, 7, 1, "", "IvyNotImplementedException"], [778, 7, 1, "", "IvyValueError"], [778, 2, 1, "", "handle_exceptions"]], "ivy.utils.exceptions.InplaceUpdateException": [[778, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyAttributeError": [[778, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBackendException": [[778, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBroadcastShapeError": [[778, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDeviceError": [[778, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDtypePromotionError": [[778, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyError": [[778, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyException": [[778, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyIndexError": [[778, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyInvalidBackendException": [[778, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyNotImplementedException": [[778, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyValueError": [[778, 0, 1, "", "__init__"]], "ivy.utils.inspection": [[779, 2, 1, "", "add_array_specs"], [779, 2, 1, "", "fn_array_spec"]], "ivy.utils.logging": [[780, 2, 1, "", "set_logging_mode"], [780, 2, 1, "", "unset_logging_mode"]], "ivy.utils.profiler": [[781, 1, 1, "", "Profiler"]], "ivy.utils.profiler.Profiler": [[781, 0, 1, "", "__init__"], [781, 4, 1, "", "print_stats"], [781, 4, 1, "", "viz"]], "ivy.utils.verbosity": [[782, 2, 1, "", "cprint"]], "ivy_tests.test_ivy.helpers": [[743, 3, 0, "-", "assertions"], [744, 3, 0, "-", "available_frameworks"], [745, 3, 0, "-", "function_testing"], [746, 3, 0, "-", "globals"], [747, 3, 0, "-", "hypothesis_helpers"], [752, 3, 0, "-", "multiprocessing"], [753, 3, 0, "-", "pipeline_helper"], [754, 3, 0, "-", "structs"], [755, 3, 0, "-", "test_parameter_flags"], [756, 3, 0, "-", "testing_helpers"]], "ivy_tests.test_ivy.helpers.assertions": [[743, 2, 1, "", "assert_all_close"], [743, 2, 1, "", "assert_same_type"], [743, 2, 1, "", "assert_same_type_and_shape"], [743, 2, 1, "", "check_unsupported_device"], [743, 2, 1, "", "check_unsupported_device_and_dtype"], [743, 2, 1, "", "check_unsupported_dtype"], [743, 2, 1, "", "test_unsupported_function"], [743, 2, 1, "", "value_test"]], "ivy_tests.test_ivy.helpers.function_testing": [[745, 2, 1, "", "args_to_container"], [745, 2, 1, "", "args_to_frontend"], [745, 2, 1, "", "arrays_to_frontend"], [745, 2, 1, "", "as_lists"], [745, 2, 1, "", "convtrue"], [745, 2, 1, "", "create_args_kwargs"], [745, 2, 1, "", "flatten"], [745, 2, 1, "", "flatten_and_to_np"], [745, 2, 1, "", "flatten_frontend"], [745, 2, 1, "", "flatten_frontend_fw_to_np"], [745, 2, 1, "", "flatten_frontend_to_np"], [745, 2, 1, "", "get_frontend_ret"], [745, 2, 1, "", "get_ret_and_flattened_np_array"], [745, 2, 1, "", "gradient_incompatible_function"], [745, 2, 1, "", "gradient_test"], [745, 2, 1, "", "gradient_unsupported_dtypes"], [745, 2, 1, "", "kwargs_to_args_n_kwargs"], [745, 2, 1, "", "test_frontend_function"], [745, 2, 1, "", "test_frontend_method"], [745, 2, 1, "", "test_function"], [745, 2, 1, "", "test_function_backend_computation"], [745, 2, 1, "", "test_function_ground_truth_computation"], [745, 2, 1, "", "test_gradient_backend_computation"], [745, 2, 1, "", "test_gradient_ground_truth_computation"], [745, 2, 1, "", "test_method"], [745, 2, 1, "", "test_method_backend_computation"], [745, 2, 1, "", "test_method_ground_truth_computation"], [745, 2, 1, "", "traced_if_required"], [745, 2, 1, "", "wrap_frontend_function_args"]], "ivy_tests.test_ivy.helpers.globals": [[746, 6, 1, "", "CURRENT_FRONTEND_CONFIG"], [746, 7, 1, "", "InterruptedTest"], [746, 1, 1, "", "TestData"], [746, 2, 1, "", "setup_api_test"], [746, 2, 1, "", "setup_frontend_test"], [746, 2, 1, "", "teardown_api_test"], [746, 2, 1, "", "teardown_frontend_test"]], "ivy_tests.test_ivy.helpers.globals.InterruptedTest": [[746, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.globals.TestData": [[746, 0, 1, "", "__init__"], [746, 4, 1, "", "fn_name"], [746, 4, 1, "", "fn_tree"], [746, 4, 1, "", "is_method"], [746, 4, 1, "", "supported_device_dtypes"], [746, 4, 1, "", "test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[748, 3, 0, "-", "array_helpers"], [749, 3, 0, "-", "dtype_helpers"], [750, 3, 0, "-", "general_helpers"], [751, 3, 0, "-", "number_helpers"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[748, 2, 1, "", "array_and_broadcastable_shape"], [748, 2, 1, "", "array_bools"], [748, 2, 1, "", "array_helpers_dtype_info_helper"], [748, 2, 1, "", "array_indices_axis"], [748, 2, 1, "", "array_indices_put_along_axis"], [748, 2, 1, "", "array_values"], [748, 2, 1, "", "arrays_and_axes"], [748, 2, 1, "", "arrays_for_pooling"], [748, 2, 1, "", "broadcast_shapes"], [748, 2, 1, "", "cond_data_gen_helper"], [748, 2, 1, "", "create_concatenable_arrays_dtypes"], [748, 2, 1, "", "create_nested_input"], [748, 2, 1, "", "dtype_and_values"], [748, 2, 1, "", "dtype_array_query"], [748, 2, 1, "", "dtype_array_query_val"], [748, 2, 1, "", "dtype_values_axis"], [748, 2, 1, "", "einsum_helper"], [748, 2, 1, "", "get_first_solve_batch_matrix"], [748, 2, 1, "", "get_first_solve_matrix"], [748, 2, 1, "", "get_second_solve_batch_matrix"], [748, 2, 1, "", "get_second_solve_matrix"], [748, 2, 1, "", "list_of_size"], [748, 2, 1, "", "lists"], [748, 2, 1, "", "mutually_broadcastable_shapes"], [748, 2, 1, "", "prod"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[749, 2, 1, "", "array_dtypes"], [749, 2, 1, "", "cast_filter"], [749, 2, 1, "", "cast_filter_helper"], [749, 2, 1, "", "get_castable_dtype"], [749, 2, 1, "", "get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[750, 2, 1, "", "apply_safety_factor"], [750, 2, 1, "", "embedding_helper"], [750, 2, 1, "", "general_helpers_dtype_info_helper"], [750, 2, 1, "", "get_axis"], [750, 2, 1, "", "get_bounds"], [750, 2, 1, "", "get_mean_std"], [750, 2, 1, "", "get_shape"], [750, 2, 1, "", "matrix_is_stable"], [750, 2, 1, "", "reshape_shapes"], [750, 2, 1, "", "subsets"], [750, 2, 1, "", "x_and_filters"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[751, 2, 1, "", "floats"], [751, 2, 1, "", "ints"], [751, 2, 1, "", "number"]], "ivy_tests.test_ivy.helpers.multiprocessing": [[752, 2, 1, "", "backend_proc"], [752, 2, 1, "", "frontend_proc"]], "ivy_tests.test_ivy.helpers.pipeline_helper": [[753, 1, 1, "", "BackendHandler"], [753, 1, 1, "", "BackendHandlerMode"], [753, 1, 1, "", "WithBackendContext"], [753, 2, 1, "", "get_frontend_config"]], "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler": [[753, 0, 1, "", "update_backend"]], "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode": [[753, 4, 1, "", "SetBackend"], [753, 4, 1, "", "WithBackend"]], "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext": [[753, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.structs": [[754, 1, 1, "", "FrontendMethodData"]], "ivy_tests.test_ivy.helpers.structs.FrontendMethodData": [[754, 0, 1, "", "__init__"], [754, 4, 1, "", "framework_init_module"], [754, 4, 1, "", "init_name"], [754, 4, 1, "", "ivy_init_module"], [754, 4, 1, "", "method_name"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[755, 1, 1, "", "DynamicFlag"], [755, 1, 1, "", "FrontendFunctionTestFlags"], [755, 1, 1, "", "FrontendInitTestFlags"], [755, 1, 1, "", "FrontendMethodTestFlags"], [755, 1, 1, "", "FunctionTestFlags"], [755, 1, 1, "", "InitMethodTestFlags"], [755, 1, 1, "", "MethodTestFlags"], [755, 1, 1, "", "TestFlags"], [755, 2, 1, "", "build_flag"], [755, 2, 1, "", "frontend_function_flags"], [755, 2, 1, "", "frontend_init_flags"], [755, 2, 1, "", "frontend_method_flags"], [755, 2, 1, "", "function_flags"], [755, 2, 1, "", "init_method_flags"], [755, 2, 1, "", "method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag": [[755, 0, 1, "", "__init__"], [755, 4, 1, "", "strategy"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags": [[755, 0, 1, "", "__init__"], [755, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags": [[755, 0, 1, "", "__init__"], [755, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags": [[755, 0, 1, "", "__init__"], [755, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags": [[755, 0, 1, "", "__init__"], [755, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags": [[755, 0, 1, "", "__init__"], [755, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags": [[755, 0, 1, "", "__init__"], [755, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags": [[755, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[756, 2, 1, "", "handle_frontend_method"], [756, 2, 1, "", "handle_frontend_test"], [756, 2, 1, "", "handle_method"], [756, 2, 1, "", "handle_test"], [756, 2, 1, "", "num_positional_args"], [756, 2, 1, "", "num_positional_args_helper"], [756, 2, 1, "", "num_positional_args_method"], [756, 2, 1, "", "seed"]]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:function", "3": "py:module", "4": "py:attribute", "5": "py:property", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "module", "Python module"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"demo": [0, 2, 3, 4, 14, 25, 39, 40], "creat": [0, 37, 38, 788], "notebook": 0, "TO": 1, "replac": 1, "titl": 1, "exampl": [2, 5, 7, 14, 33, 783, 800, 804, 807, 810, 815, 831, 832, 833], "ivi": [3, 4, 5, 7, 13, 16, 24, 25, 26, 37, 38, 40, 41, 43, 783, 788, 790, 793, 795, 797, 800, 802, 807, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 824, 831, 832, 833, 844], "alexnet": 3, "instal": [3, 4, 7, 16, 37, 38, 40, 783, 824], "data": [3, 4, 5, 7, 16, 25, 37, 48, 71, 102, 353, 602, 617, 721, 722, 723, 724, 798, 809, 812, 820, 823], "prepar": [3, 4, 5, 7], "infer": [3, 4, 5, 7, 806], "torch": [3, 4, 5, 7, 33, 40, 838, 839], "tensorflow": [3, 4, 5, 12, 33, 40, 41, 42, 838], "jax": [3, 4, 5, 6, 8, 33, 40, 838], "appendix": [3, 5], "code": [3, 16, 17, 18, 19, 26, 37, 803, 811, 813], "implement": [3, 5, 797, 807, 809, 829], "bert": 4, "dependeci": 4, "import": [4, 5, 7, 16, 37, 38, 41, 776], "modul": [4, 766, 798, 799, 821, 832], "sequenc": [4, 804], "classif": 4, "model": [4, 5, 6, 7, 8, 10, 11, 12, 23, 24, 25, 26, 37, 38, 39, 40, 41, 43, 822, 823], "imag": [5, 7, 54, 77, 247, 785, 795], "segment": 5, "unet": 5, "custom": [5, 793, 795, 807, 811, 820, 823], "preprocess": 5, "load": [5, 7, 741, 820], "visualis": [5, 7], "initi": [5, 7, 763, 821], "nativ": [5, 7, 793, 815], "pretrain": [5, 7], "weight": [5, 7, 820], "mask": 5, "function": [5, 16, 25, 26, 37, 38, 39, 41, 43, 103, 745, 788, 796, 798, 799, 802, 804, 805, 806, 807, 809, 810, 812, 813, 814, 815, 817, 822, 823, 832], "us": [5, 7, 13, 21, 24, 41, 43, 783, 785, 788, 789, 792, 807, 810, 820, 824, 831, 832], "your": [5, 7, 790, 812], "backend": [5, 16, 25, 37, 38, 40, 41, 771, 774, 788, 794, 798, 807, 813, 817, 823], "acceler": [6, 8], "mmpretrain": 6, "resnet": [7, 44], "set": [7, 33, 37, 38, 62, 85, 367, 617, 789, 794, 814, 824], "label": 7, "resnet34": 7, "classifi": 7, "resnet50": 7, "pytorch": [8, 10, 39, 838], "guid": [9, 14], "transpil": [10, 11, 12, 19, 20, 21, 22, 23, 25, 26, 29, 30, 31, 32, 33, 39, 43, 783, 822, 824, 832], "build": [10, 11, 12, 41, 785, 795, 817], "top": [10, 11, 12, 797], "round": [10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 39, 277, 811], "up": [10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 39, 789, 811, 824], "haiku": 11, "develop": 13, "convolut": 13, "network": [13, 38, 41, 820, 822], "tutori": [14, 41], "And": 14, "learn": [14, 15, 838], "basic": [14, 15, 37, 38, 790, 809], "write": [16, 24, 809, 812], "content": [16, 39], "handler": [16, 25, 773, 774, 817], "structur": [16, 25, 795, 807, 823], "api": [16, 25, 26, 788, 792, 796, 797, 807, 813, 817, 819, 821, 822, 824, 828, 831, 832, 833, 835, 842, 844], "state": [16, 25, 26, 821, 823, 831], "unifi": [17, 20, 21, 27, 30, 31, 32, 37, 783, 819, 829, 833, 840, 844], "compil": [18, 20, 21, 25, 26, 28, 30, 31, 32, 38, 831, 836, 841, 843, 844], "lazi": [20, 30, 831], "v": [20, 30, 33, 803, 823, 828, 831], "eager": [20, 30, 831], "how": [21, 795, 811, 812], "decor": [21, 32, 802, 806, 812], "ani": [22, 23, 25, 26, 740], "librari": [22, 25, 26, 41, 43, 832], "odsc": 25, "framework": [25, 31, 37, 744, 757, 807, 810, 818, 838, 841, 844, 845], "graph": [25, 42, 839, 844], "quickstart": 26, "get": [26, 783, 790, 824], "familiar": 26, "0": [27, 28, 29, 30, 34, 35], "1": [28, 30, 31, 32, 33, 36, 43, 838], "2": [29, 32, 34, 43, 838], "select": 31, "As": 32, "3": [33, 35, 36, 43], "dynam": [33, 41, 776, 794, 823], "static": 33, "todo": [33, 790], "explain": 33, "via": 33, "why": [33, 812, 829], "mode": [33, 798, 802, 814], "i": [33, 783, 795, 815], "true": 33, "default": [33, 517], "when": [33, 783], "from": [33, 40, 824], "numpi": [33, 40, 809, 838], "fals": 33, "kornia": 34, "perceiv": 35, "stabl": 36, "diffus": 36, "oper": [37, 804, 814, 819, 823], "ml": [37, 827, 840, 844], "chang": 37, "one": 37, "line": [37, 790], "No": [37, 789, 829], "need": [37, 812], "worri": 37, "about": 37, "type": [37, 48, 71, 353, 602, 798, 805, 809, 823], "differ": 37, "them": 37, "all": [37, 739], "standalon": [37, 805], "defin": [37, 38, 39, 41], "optim": [37, 768, 821], "input": [37, 38, 804], "target": 37, "loss": [37, 57, 80, 360, 610, 765], "train": [37, 39, 41], "loop": [37, 41], "sampl": 38, "check": [38, 803, 823], "result": 38, "simpl": 38, "neural": 38, "deepmind": [39, 40], "": [39, 41, 788, 795, 811, 824], "perceiverio": [39, 40], "tabl": [39, 795, 798], "construct": [39, 820], "some": 39, "helper": [39, 747, 748, 749, 750, 751, 753, 756, 762, 772, 810, 812, 813], "pipelin": [39, 41, 753, 795, 797, 812, 823], "dataset": [39, 41], "download": 39, "dataload": 39, "test": [39, 745, 755, 756, 759, 789, 790, 792, 797, 810, 812], "gpu": [40, 823], "introduct": [40, 43, 809, 810], "python3": 40, "8": 40, "setup": [40, 803], "kernel": 40, "clone": [40, 789, 797], "repo": [40, 789], "ivy_model": 40, "run": [40, 790, 792, 795, 812], "end": 41, "let": 41, "we": [41, 812], "ar": 41, "mnist": 41, "thi": 41, "temporari": 41, "loader": 41, "util": [41, 65, 88, 371, 620, 758], "plot": 41, "metric": 41, "save": [41, 742, 820], "huggingfac": 42, "deit": 42, "can": 42, "visual": 42, "displai": 42, "html": 42, "file": 42, "browser": [42, 790], "To": [43, 790], "interfac": 43, "telemetri": 43, "18": 44, "activ": [45, 67, 350, 598, 760], "convers": [46, 69, 806], "creation": [47, 70, 352, 601], "devic": [49, 72, 354, 603, 799, 804, 809], "elementwis": [50, 73, 101, 355, 604], "experiment": [51, 74, 605, 788], "gener": [52, 75, 356, 606, 750, 807, 812, 815, 831], "gradient": [53, 76, 334, 357, 607, 807], "layer": [55, 78, 358, 608, 764], "linear": [56, 79, 359, 609, 632], "algebra": [56, 79, 359, 609], "manipul": [58, 81, 361, 611], "norm": [59, 82, 364, 614, 767], "random": [60, 83, 365, 615], "search": [61, 84, 366, 616], "sort": [63, 86, 368, 618, 728], "statist": [64, 87, 370, 619], "wrap": [66, 89, 806], "base": [68, 90, 100], "cp": 91, "tensor": [91, 92, 93, 94, 95, 98], "parafac2": 92, "tr": 93, "tt": 94, "tucker": [95, 430], "arrai": [96, 99, 121, 369, 748, 792, 793, 797, 804, 819, 828, 831, 835], "contain": [97, 790, 796, 820], "factor": 98, "nest": [99, 363, 613], "class": [102, 757, 793, 802, 809, 819], "gelu": 104, "hardswish": 105, "leaky_relu": 106, "log_softmax": 107, "mish": 108, "relu": 109, "sigmoid": 110, "softmax": 111, "softplu": 112, "softsign": 113, "cmp_i": 114, "cmp_isnot": 115, "for_loop": 116, "if_els": 117, "try_except": 118, "while_loop": 119, "arang": 120, "asarrai": 122, "copy_arrai": 123, "empti": 124, "empty_lik": 125, "ey": 126, "from_dlpack": 127, "note": [127, 138, 601], "frombuff": 128, "full": [129, 810], "full_lik": 130, "linspac": 131, "logspac": 132, "meshgrid": 133, "native_arrai": 134, "one_hot": 135, "ones": 136, "ones_lik": 137, "to_dlpack": 138, "tril": 139, "triu": 140, "triu_indic": 141, "zero": 142, "zeros_lik": 143, "as_ivy_dtyp": 144, "as_native_dtyp": 145, "astyp": 146, "broadcast_arrai": 147, "broadcast_to": 148, "can_cast": 149, "check_float": 150, "closest_valid_dtyp": 151, "default_complex_dtyp": 152, "default_dtyp": 153, "default_float_dtyp": 154, "default_int_dtyp": 155, "default_uint_dtyp": 156, "dtype": [157, 749, 804], "dtype_bit": 158, "finfo": 159, "function_supported_dtyp": 160, "function_unsupported_dtyp": 161, "iinfo": 162, "infer_default_dtyp": 163, "invalid_dtyp": 164, "is_bool_dtyp": 165, "is_complex_dtyp": 166, "is_float_dtyp": 167, "is_hashable_dtyp": 168, "is_int_dtyp": 169, "is_native_dtyp": 170, "is_uint_dtyp": 171, "promote_typ": 172, "promote_types_of_input": 173, "result_typ": 174, "set_default_complex_dtyp": 175, "set_default_dtyp": 176, "set_default_float_dtyp": 177, "set_default_int_dtyp": 178, "set_default_uint_dtyp": 179, "type_promote_arrai": 180, "unset_default_complex_dtyp": 181, "unset_default_dtyp": 182, "unset_default_float_dtyp": 183, "unset_default_int_dtyp": 184, "unset_default_uint_dtyp": 185, "valid_dtyp": 186, "as_ivy_dev": 187, "as_native_dev": 188, "clear_cached_mem_on_dev": 189, "default_devic": 190, "dev": 191, "dev_util": 192, "function_supported_devic": 193, "function_unsupported_devic": 194, "get_all_ivy_arrays_on_dev": 195, "gpu_is_avail": 196, "handle_soft_device_vari": 197, "num_cpu_cor": 198, "num_gpu": 199, "num_ivy_arrays_on_dev": 200, "percent_used_mem_on_dev": 201, "print_all_ivy_arrays_on_dev": 202, "set_default_devic": 203, "set_soft_device_mod": 204, "paramet": [204, 551, 552, 557, 558, 560, 561, 603, 606, 755, 760, 814], "set_split_factor": 205, "split_factor": 206, "split_func_cal": 207, "to_devic": 208, "total_mem_on_dev": 209, "tpu_is_avail": 210, "unset_default_devic": 211, "unset_soft_device_mod": 212, "used_mem_on_dev": 213, "ab": 214, "aco": 215, "acosh": 216, "add": [217, 800, 810, 844], "angl": 218, "asin": 219, "asinh": 220, "atan": 221, "atan2": 222, "atanh": 223, "bitwise_and": 224, "bitwise_invert": 225, "bitwise_left_shift": 226, "bitwise_or": 227, "bitwise_right_shift": 228, "bitwise_xor": 229, "ceil": 230, "co": 231, "cosh": 232, "deg2rad": 233, "divid": 234, "equal": 235, "erf": 236, "exp": 237, "exp2": 238, "expm1": 239, "floor": 240, "floor_divid": 241, "fmin": 242, "fmod": 243, "gcd": 244, "greater": 245, "greater_equ": 246, "isfinit": 248, "isinf": 249, "isnan": 250, "isreal": 251, "lcm": 252, "less": 253, "less_equ": 254, "log": [255, 780, 789], "log10": 256, "log1p": 257, "log2": 258, "logaddexp": 259, "logaddexp2": 260, "logical_and": 261, "logical_not": 262, "logical_or": 263, "logical_xor": 264, "maximum": 265, "minimum": 266, "multipli": 267, "nan_to_num": 268, "neg": 269, "not_equ": 270, "posit": [271, 804], "pow": 272, "rad2deg": 273, "real": 274, "reciproc": 275, "remaind": 276, "sign": 278, "sin": 279, "sinh": 280, "sqrt": 281, "squar": 282, "subtract": 283, "tan": [284, 800, 810], "tanh": 285, "trapz": 286, "trunc": 287, "trunc_divid": 288, "celu": 289, "elu": 290, "hardtanh": 291, "logit": 292, "logsigmoid": 293, "prelu": 294, "relu6": 295, "selu": 296, "silu": 297, "tanhshrink": 298, "thresholded_relu": 299, "blackman_window": 300, "eye_lik": 301, "hamming_window": 302, "hann_window": 303, "indic": 304, "kaiser_bessel_derived_window": 305, "kaiser_window": 306, "mel_weight_matrix": 307, "ndenumer": 308, "ndindex": 309, "random_cp": 310, "random_parafac2": 311, "random_tr": 312, "random_tt": 313, "random_tuck": 314, "tril_indic": 315, "trilu": 316, "unsorted_segment_min": 317, "unsorted_segment_sum": 318, "vorbis_window": 319, "allclos": 320, "amax": 321, "amin": 322, "binar": 323, "conj": 324, "copysign": 325, "count_nonzero": 326, "diff": 327, "digamma": 328, "erfc": 329, "fix": 330, "float_pow": 331, "fmax": 332, "frexp": 333, "hypot": 335, "isclos": 336, "ldexp": 337, "lerp": 338, "lgamma": 339, "modf": 340, "nansum": 341, "nextaft": 342, "signbit": 343, "sinc": 344, "sparsify_tensor": 345, "xlogi": 346, "zeta": 347, "reduc": 348, "bind_custom_gradient_funct": 349, "constant": [351, 599], "meta": [362, 612], "spars": 369, "adaptive_avg_pool1d": 372, "adaptive_avg_pool2d": 373, "adaptive_max_pool2d": 374, "area_interpol": 375, "avg_pool1d": 376, "avg_pool2d": 377, "avg_pool3d": 378, "dct": 379, "dft": 380, "dropout1d": 381, "dropout2d": 382, "dropout3d": 383, "embed": 384, "fft": 385, "fft2": 386, "generate_einsum_equ": 387, "get_interpolate_kernel": 388, "idct": 389, "ifft": 390, "ifftn": 391, "interp": 392, "interpol": 393, "max_pool1d": 394, "max_pool2d": 395, "max_pool3d": 396, "max_unpool1d": 397, "nearest_interpol": 398, "pool": 399, "reduce_window": 400, "rfft": 401, "rfftn": 402, "sliding_window": 403, "stft": 404, "adjoint": 405, "batched_out": 406, "cond": 407, "diagflat": 408, "dot": 409, "eig": [410, 643], "eigh_tridiagon": 411, "eigval": 412, "general_inner_product": 413, "higher_order_mo": 414, "initialize_tuck": 415, "khatri_rao": 416, "kron": 417, "kroneck": 418, "make_svd_non_neg": 419, "matrix_exp": 420, "mode_dot": 421, "multi_dot": 422, "multi_mode_dot": 423, "partial_tuck": 424, "solve_triangular": 425, "svd_flip": 426, "tensor_train": 427, "truncated_svd": 428, "tt_matrix_to_tensor": 429, "huber_loss": 431, "kl_div": 432, "l1_loss": 433, "log_poisson_loss": 434, "poisson_nll_loss": 435, "smooth_l1_loss": 436, "soft_margin_loss": 437, "as_strid": 438, "associative_scan": 439, "atleast_1d": 440, "atleast_2d": 441, "atleast_3d": 442, "broadcast_shap": 443, "choos": 444, "column_stack": 445, "concat_from_sequ": 446, "dsplit": 447, "dstack": 448, "expand": 449, "fill_diagon": 450, "flatten": 451, "fliplr": 452, "flipud": 453, "fold": 454, "heavisid": 455, "hsplit": 456, "hstack": 457, "i0": 458, "matric": 459, "moveaxi": 460, "pad": 461, "partial_fold": 462, "partial_tensor_to_vec": 463, "partial_unfold": 464, "partial_vec_to_tensor": 465, "put_along_axi": 466, "rot90": 467, "soft_threshold": 468, "take_along_axi": 469, "top_k": 470, "trim_zero": 471, "unfold": 472, "unique_consecut": 473, "vsplit": 474, "vstack": 475, "batch_norm": 476, "group_norm": 477, "instance_norm": 478, "l1_normal": 479, "l2_normal": 480, "lp_normal": 481, "bernoulli": 482, "beta": 483, "dirichlet": 484, "gamma": 485, "poisson": 486, "unravel_index": 487, "invert_permut": 488, "lexsort": 489, "is_ivy_sparse_arrai": 490, "is_native_sparse_arrai": 491, "native_sparse_arrai": 492, "native_sparse_array_to_indices_values_and_shap": 493, "bincount": 494, "corrcoef": 495, "cov": 496, "cummax": 497, "cummin": 498, "histogram": 499, "igamma": 500, "median": 501, "nanmean": 502, "nanmedian": 503, "nanprod": 504, "quantil": 505, "optional_get_el": 506, "all_equ": 507, "arg_info": 508, "arg_nam": 509, "array_equ": 510, "assert_supports_inplac": 511, "cache_fn": 512, "clip_matrix_norm": 513, "clip_vector_norm": 514, "container_typ": 515, "current_backend_str": 516, "einops_rearrang": 518, "einops_reduc": 519, "einops_repeat": 520, "exist": [521, 785, 811], "fourier_encod": 522, "function_supported_devices_and_dtyp": 523, "function_unsupported_devices_and_dtyp": 524, "gather": 525, "gather_nd": 526, "get_all_arrays_in_memori": 527, "get_item": 528, "get_num_dim": 529, "get_referrers_recurs": 530, "has_nan": 531, "inplace_arrays_support": 532, "inplace_decr": 533, "inplace_incr": 534, "inplace_upd": 535, "inplace_variables_support": 536, "is_arrai": 537, "is_ivy_arrai": 538, "is_ivy_contain": 539, "is_ivy_nested_arrai": 540, "is_native_arrai": 541, "isin": 542, "isscalar": 543, "items": 544, "match_kwarg": 545, "multiprocess": [546, 752], "num_arrays_in_memori": 547, "print_all_arrays_in_memori": 548, "scatter_flat": 549, "scatter_nd": 550, "set_array_mod": 551, "set_exception_trace_mod": 552, "set_inplace_mod": 553, "set_item": 554, "set_min_bas": 555, "set_min_denomin": 556, "set_nestable_mod": 557, "set_precise_mod": 558, "set_queue_timeout": 559, "set_shape_array_mod": 560, "set_show_func_wrapper_trace_mod": 561, "set_tmp_dir": 562, "shape": [563, 617, 721, 722, 723, 724, 806, 823], "stable_divid": 564, "stable_pow": 565, "stride": 566, "supports_inplace_upd": 567, "to_ivy_shap": 568, "to_list": 569, "to_native_shap": 570, "to_numpi": 571, "to_scalar": 572, "try_else_non": 573, "unset_array_mod": 574, "unset_exception_trace_mod": 575, "unset_inplace_mod": 576, "unset_min_bas": 577, "unset_min_denomin": 578, "unset_nestable_mod": 579, "unset_precise_mod": 580, "unset_queue_timeout": 581, "unset_shape_array_mod": 582, "unset_show_func_wrapper_trace_mod": 583, "unset_tmp_dir": 584, "value_is_nan": 585, "vmap": 586, "adam_step": 587, "adam_upd": 588, "execute_with_gradi": [589, 807], "grad": 590, "gradient_descent_upd": 591, "jac": 592, "lamb_upd": 593, "lars_upd": 594, "optimizer_upd": 595, "stop_gradi": 596, "value_and_grad": 597, "control": [600, 823], "flow": [600, 823], "op": 600, "depend": [617, 721, 722, 723, 724], "output": [617, 721, 722, 723, 724], "conv": 621, "conv1d": 622, "conv1d_transpos": 623, "conv2d": 624, "conv2d_transpos": 625, "conv3d": 626, "conv3d_transpos": 627, "conv_general_dil": 628, "conv_general_transpos": 629, "depthwise_conv2d": 630, "dropout": 631, "lstm_updat": 633, "multi_head_attent": 634, "nm": 635, "roi_align": 636, "scaled_dot_product_attent": 637, "choleski": 638, "cross": 639, "det": 640, "diag": 641, "diagon": 642, "eigh": 644, "eigvalsh": 645, "inner": 646, "inv": 647, "lu_factor": 648, "matmul": 649, "matrix_norm": 650, "matrix_pow": 651, "matrix_rank": 652, "matrix_transpos": 653, "outer": 654, "pinv": 655, "qr": 656, "slogdet": 657, "solv": 658, "svd": 659, "svdval": 660, "tensordot": 661, "tensorsolv": 662, "trace": [663, 802], "vander": 664, "vecdot": 665, "vector_norm": 666, "vector_to_skew_symmetric_matrix": 667, "binary_cross_entropi": 668, "cross_entropi": 669, "sparse_cross_entropi": 670, "clip": 671, "concat": 672, "constant_pad": 673, "expand_dim": 674, "flip": 675, "permute_dim": 676, "repeat": 677, "reshap": 678, "roll": [679, 800], "split": 680, "squeez": 681, "stack": [682, 802], "swapax": 683, "tile": 684, "unstack": 685, "zero_pad": 686, "fomaml_step": 687, "maml_step": 688, "reptile_step": 689, "all_nested_indic": 690, "copy_nest": 691, "duplicate_array_index_chain": 692, "index_nest": 693, "insert_into_nest_at_index": 694, "insert_into_nest_at_indic": 695, "map": [696, 797], "map_nest_at_index": 697, "map_nest_at_indic": 698, "multi_index_nest": 699, "nested_ani": 700, "nested_argwher": 701, "nested_map": 702, "nested_multi_map": 703, "prune_empti": 704, "prune_nest_at_index": 705, "prune_nest_at_indic": 706, "set_nest_at_index": 707, "set_nest_at_indic": 708, "layer_norm": 709, "multinomi": 710, "randint": 711, "random_norm": 712, "random_uniform": 713, "seed": 714, "shuffl": 715, "argmax": 716, "argmin": 717, "argwher": 718, "nonzero": 719, "where": [720, 788], "unique_al": 721, "unique_count": 722, "unique_invers": 723, "unique_valu": 724, "argsort": 725, "msort": 726, "searchsort": 727, "cumprod": 729, "cumsum": 730, "einsum": [731, 777], "max": 732, "mean": 733, "min": 734, "prod": 735, "std": 736, "sum": 737, "var": 738, "assert": [743, 770, 802], "avail": 744, "global": [746, 814], "hypothesi": [747, 789, 810, 812], "number": [751, 804], "struct": 754, "flag": 755, "convert": [761, 822], "sequenti": 769, "ast": 772, "sub": 774, "binari": [775, 789], "parser": 777, "except": [778, 802, 806], "inspect": 779, "profil": 781, "verbos": 782, "statu": 783, "ai": 783, "start": [783, 824], "pip": [783, 824], "document": 783, "dive": [783, 791], "deeper": 783, "should": 783, "contribut": [783, 784, 811], "commun": 783, "citat": 783, "doc": [785, 795], "docker": [785, 789, 790, 795, 824], "conveni": [785, 795, 805], "script": [785, 795], "hub": 785, "local": [785, 790, 803], "without": [785, 810], "error": [786, 802], "handl": [786, 793, 799, 802, 806, 823], "help": [787, 790], "resourc": 787, "open": 788, "task": 788, "format": [788, 803, 837, 844], "checklist": 788, "frontend": [788, 794, 809, 810, 822], "place": 788, "extend": [788, 812, 815], "an": [788, 807], "issu": [788, 790, 803, 824], "github": [788, 789], "templat": 788, "fork": [789, 790], "pre": [789, 803], "commit": [789, 790, 797, 803], "pycharm": [789, 790, 803], "virtual": 789, "environ": 789, "miniconda": 789, "venv": 789, "interpret": 789, "window": 789, "maco": 789, "ubuntu": 789, "more": [789, 815, 829], "detail": 789, "free": 789, "wsl": 789, "codespac": 789, "The": [789, 790, 795, 807, 809, 819, 823, 828], "list": 790, "manag": 790, "who": 790, "ask": 790, "With": 790, "command": 790, "pull": [790, 797], "request": [790, 797], "small": 790, "often": 790, "interact": 790, "most": 790, "out": [790, 804, 806, 808], "id": [790, 792], "deep": 791, "termin": 792, "regener": 792, "failur": 792, "skip": 792, "integr": [793, 797, 803, 811, 812], "version": [794, 813, 823], "support": [794, 798, 806, 809, 823], "builder": 795, "being": 795, "option": 795, "index": 795, "rst": 795, "partial_conf": 795, "py": 795, "prebuild": 795, "sh": 795, "extens": 795, "custom_autosummari": 795, "hide": 795, "discussion_link": 795, "skippable_funct": 795, "ivy_data": 795, "instanc": [796, 809, 810, 819], "method": [796, 809, 810, 819, 820], "special": [796, 798, 809], "nestabl": [796, 804, 805, 806], "continu": [797, 803], "push": 797, "pr": 797, "trigger": 797, "A": [797, 815], "down": 797, "view": [797, 806, 808], "store": 797, "retriev": 797, "repositori": 797, "nitti": 797, "gritti": 797, "storag": 797, "space": 797, "unifyai": 797, "determin": 797, "coverag": 797, "workflow": 797, "multipl": 797, "runner": 797, "race": 797, "condit": 797, "period": 797, "manual": 797, "dispatch": 797, "ci": 797, "dashboard": 797, "promot": [798, 809], "precis": 798, "non": [798, 815], "argument": [798, 799, 804, 806, 808, 809], "other": [798, 799], "unsupport": 798, "attribut": [798, 814], "case": [798, 820], "bug": 798, "cast": [798, 809], "superset": [798, 815], "docstr": [800, 801], "configur": [802, 810, 820], "func_wrapp": 802, "prune": 802, "handle_except": 802, "consist": [802, 812], "lint": [803, 811], "common": 803, "keyword": 804, "integ": 804, "primari": 805, "composit": 805, "mix": [805, 806, 812], "partial": [805, 806, 812], "order": 806, "wrapper": [806, 844, 845], "miscellan": 806, "overview": [807, 811], "usag": [807, 811, 815, 833], "signatur": 807, "design": [807, 813, 816], "our": 807, "polici": [807, 809], "specif": [807, 842, 843, 844], "consider": 807, "inplac": 808, "updat": 808, "copi": 808, "short": 809, "unus": 809, "rule": 809, "duplic": [809, 815], "valu": 810, "alia": 810, "formatt": 811, "functionorderingformatt": 811, "work": [811, 828, 834], "own": 812, "strategi": 812, "do": [812, 828], "effect": 812, "bonu": 812, "featur": 812, "self": 812, "explicit": 812, "test_array_funct": 812, "re": [812, 829], "fail": 812, "navig": 813, "categor": 813, "submodul": 813, "unpin": 813, "properti": 814, "getter": 814, "setter": 814, "set_": 814, "unset_": 814, "behaviour": 815, "standard": [815, 828, 835, 844], "what": [815, 844], "balanc": 815, "effici": 815, "maxim": 815, "block": 817, "tracer": [817, 822, 824, 831, 839, 844], "monkei": 819, "patch": 819, "represent": 820, "recurs": 820, "built": 820, "ins": 820, "access": 820, "comparison": 820, "compartment": 820, "role": 822, "faq": 823, "maintain": 823, "size": 823, "deploy": 823, "auto": 823, "differenti": 823, "replica": 823, "parallel": 823, "altern": 823, "sourc": 824, "folder": 824, "kei": 824, "question": 824, "glossari": 825, "motiv": 826, "explos": 827, "skeptic": 828, "complimentari": 828, "competit": 828, "infinit": 829, "shelf": 829, "life": 829, "One": 830, "liner": 830, "trace_graph": 831, "cach": 831, "sharp": [831, 832, 833], "bit": [831, 832, 833], "relat": 834, "infrastructur": [836, 844], "llvm": 836, "mlir": 836, "oneapi": 836, "exchang": [837, 844], "onnx": 837, "nnef": 837, "coreml": 837, "matlab": 838, "scipi": 838, "scikit": 838, "theano": 838, "panda": 838, "julia": 838, "apach": [838, 841], "spark": 838, "mllib": 838, "caff": 838, "chainer": 838, "mxnet": 838, "cntk": 838, "flux": 838, "dex": 838, "languag": 838, "tf": 839, "jaxpr": 839, "jit": 839, "fx": 839, "compani": [840, 844], "quansight": 840, "modular": 840, "octoml": 840, "multi": [841, 844], "vendor": [841, 842, 843, 844], "tvm": 841, "xla": 841, "gcc": 841, "tensorrt": 842, "cuda": 842, "icc": 843, "icx": 843, "nvcc": 843, "doe": 844, "eagerpi": 845, "kera": 845, "thinc": 845, "tensorli": 845, "neuropod": 845}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"Data classes": [[102, "data-classes"]], "if_else": [[117, "if-else"]], "softsign": [[113, "softsign"]], "General": [[75, "module-ivy.data_classes.container.general"], [52, "module-ivy.data_classes.array.general"], [606, "general"], [356, "general"]], "Random": [[83, "module-ivy.data_classes.container.random"], [60, "module-ivy.data_classes.array.random"], [615, "random"], [365, "random"]], "while_loop": [[119, "while-loop"]], "Base": [[100, "module-ivy.data_classes.nested_array.base"], [90, "module-ivy.data_classes.factorized_tensor.base"], [68, "module-ivy.data_classes.container.base"]], "log_softmax": [[107, "log-softmax"]], "arange": [[120, "arange"]], "cmp_isnot": [[115, "cmp-isnot"]], "copy_array": [[123, "copy-array"]], "relu": [[109, "relu"]], "empty_like": [[125, "empty-like"]], "for_loop": [[116, "for-loop"]], "mish": [[108, "mish"]], "softplus": [[112, "softplus"]], "sigmoid": [[110, "sigmoid"]], "Gradients": [[76, "module-ivy.data_classes.container.gradients"], [807, "gradients"], [53, "module-ivy.data_classes.array.gradients"], [607, "gradients"], [357, "gradients"]], "leaky_relu": [[106, "leaky-relu"]], "Elementwise": [[101, "module-ivy.data_classes.nested_array.elementwise"], [73, "module-ivy.data_classes.container.elementwise"], [50, "module-ivy.data_classes.array.elementwise"], [604, "elementwise"], [355, "elementwise"]], "Factorized tensor": [[98, "factorized-tensor"]], "array": [[121, "array"]], "Container": [[97, "container"]], "Experimental": [[74, "module-ivy.data_classes.container.experimental"], [51, "module-ivy.data_classes.array.experimental"], [605, "experimental"]], "eye": [[126, "eye"]], "full": [[129, "full"]], "Utility": [[88, "module-ivy.data_classes.container.utility"], [65, "module-ivy.data_classes.array.utility"], [620, "utility"], [371, "utility"]], "Nested array": [[99, "nested-array"]], "Conversions": [[69, "module-ivy.data_classes.container.conversions"], [46, "module-ivy.data_classes.array.conversions"]], "Linear algebra": [[79, "module-ivy.data_classes.container.linear_algebra"], [56, "module-ivy.data_classes.array.linear_algebra"], [609, "linear-algebra"], [359, "linear-algebra"]], "Wrapping": [[89, "module-ivy.data_classes.container.wrapping"], [66, "module-ivy.data_classes.array.wrapping"]], "Parafac2 tensor": [[92, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"]], "softmax": [[111, "softmax"]], "Creation": [[70, "module-ivy.data_classes.container.creation"], [47, "module-ivy.data_classes.array.creation"], [601, "creation"], [352, "creation"]], "asarray": [[122, "asarray"]], "Searching": [[84, "module-ivy.data_classes.container.searching"], [61, "module-ivy.data_classes.array.searching"], [616, "searching"], [366, "searching"]], "Activations": [[67, "module-ivy.data_classes.container.activations"], [760, "module-ivy.stateful.activations"], [45, "module-ivy.data_classes.array.activations"], [598, "activations"], [350, "activations"]], "Losses": [[80, "module-ivy.data_classes.container.losses"], [765, "module-ivy.stateful.losses"], [57, "module-ivy.data_classes.array.losses"], [610, "losses"], [360, "losses"]], "Statistical": [[87, "module-ivy.data_classes.container.statistical"], [64, "module-ivy.data_classes.array.statistical"], [619, "statistical"], [370, "statistical"]], "Tr tensor": [[93, "module-ivy.data_classes.factorized_tensor.tr_tensor"]], "Device": [[72, "module-ivy.data_classes.container.device"], [49, "module-ivy.data_classes.array.device"], [603, "device"], [354, "module-ivy.functional.ivy.experimental.device"]], "hardswish": [[105, "hardswish"]], "empty": [[124, "empty"]], "Tt tensor": [[94, "module-ivy.data_classes.factorized_tensor.tt_tensor"]], "Array": [[96, "array"]], "try_except": [[118, "try-except"]], "Image": [[77, "module-ivy.data_classes.container.image"], [54, "module-ivy.data_classes.array.image"]], "from_dlpack": [[127, "from-dlpack"]], "Note": [[127, null], [601, null], [601, null], [138, null]], "Set": [[85, "module-ivy.data_classes.container.set"], [62, "module-ivy.data_classes.array.set"], [617, "set"], [367, "module-ivy.functional.ivy.experimental.set"]], "Cp tensor": [[91, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "gelu": [[104, "gelu"]], "cmp_is": [[114, "cmp-is"]], "frombuffer": [[128, "frombuffer"]], "Sorting": [[86, "module-ivy.data_classes.container.sorting"], [63, "module-ivy.data_classes.array.sorting"], [618, "sorting"], [368, "sorting"]], "Functions": [[103, "functions"]], "Data type": [[71, "module-ivy.data_classes.container.data_type"], [48, "module-ivy.data_classes.array.data_type"], [602, "data-type"], [353, "module-ivy.functional.ivy.experimental.data_type"]], "Layers": [[78, "module-ivy.data_classes.container.layers"], [764, "module-ivy.stateful.layers"], [55, "module-ivy.data_classes.array.layers"], [608, "layers"], [358, "layers"]], "Manipulation": [[81, "module-ivy.data_classes.container.manipulation"], [58, "module-ivy.data_classes.array.manipulation"], [611, "manipulation"], [361, "manipulation"]], "Norms": [[82, "module-ivy.data_classes.container.norms"], [767, "module-ivy.stateful.norms"], [59, "module-ivy.data_classes.array.norms"], [614, "norms"], [364, "norms"]], "Tucker tensor": [[95, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "Wrapper Frameworks": [[845, "wrapper-frameworks"], [844, "wrapper-frameworks"]], "EagerPy eagerpy": [[845, "eagerpy-eagerpy"]], "Keras keras": [[845, "keras-keras"]], "Thinc thinc": [[845, "thinc-thinc"]], "TensorLy tensorly": [[845, "tensorly-tensorly"]], "NeuroPod": [[845, "id1"]], "Ivy as a Framework": [[818, "ivy-as-a-framework"], [25, "Ivy-as-a-Framework"]], "Arrays": [[793, "arrays"]], "Native Array": [[793, "native-array"]], "Ivy Array": [[793, "ivy-array"], [819, "ivy-array"]], "Array Handling": [[793, "array-handling"]], "Integrating custom classes with Ivy": [[793, "integrating-custom-classes-with-ivy"]], "Open Tasks": [[788, "open-tasks"]], "Function Formatting": [[788, "function-formatting"]], "Formatting checklist": [[788, "formatting-checklist"]], "Frontend APIs": [[788, "frontend-apis"]], "Where to place a frontend function": [[788, "where-to-place-a-frontend-function"]], "Frontend checklist": [[788, "frontend-checklist"]], "Ivy Experimental API": [[788, "ivy-experimental-api"]], "Extending the Ivy API": [[788, "extending-the-ivy-api"]], "Where to place a backend function": [[788, "where-to-place-a-backend-function"]], "Creating an Issue on Ivy\u2019s GitHub using a Template": [[788, "creating-an-issue-on-ivy-s-github-using-a-template"]], "Why Unify?": [[829, "why-unify"]], "No More Re-implementations \ud83d\udea7": [[829, "no-more-re-implementations"]], "\u201cInfinite\u201d Shelf-Life \u2705": [[829, "infinite-shelf-life"]], "ivy.transpile()": [[832, "ivy-transpile"]], "Transpiler API": [[832, "transpiler-api"]], "Using the transpiler": [[832, "using-the-transpiler"]], "Transpiling functions": [[832, "transpiling-functions"]], "Transpiling Libraries": [[832, "transpiling-libraries"]], "Transpiling Modules": [[832, "transpiling-modules"]], "Sharp bits": [[832, "sharp-bits"], [833, "sharp-bits"], [831, "sharp-bits"]], "Examples": [[832, "examples"], [833, "examples"], [804, "examples"], [831, "examples"], [783, "examples"]], "Compiler Infrastructure": [[836, "compiler-infrastructure"], [844, "compiler-infrastructure"]], "LLVM": [[836, "id1"]], "MLIR": [[836, "id2"]], "OneAPI": [[836, "id3"]], "Frameworks": [[838, "frameworks"], [844, "frameworks"]], "MATLAB matlab": [[838, "matlab-matlab"]], "SciPy scipy": [[838, "scipy-scipy"]], "Torch torch": [[838, "torch-torch"]], "NumPy numpy": [[838, "numpy-numpy"]], "SciKit Learn scikit-learn": [[838, "scikit-learn-scikit-learn"]], "Theano theano": [[838, "theano-theano"]], "Pandas pandas": [[838, "pandas-pandas"]], "Julia julia": [[838, "julia-julia"]], "Apache Spark MLlib apache-spark-mllib": [[838, "apache-spark-mllib-apache-spark-mllib"]], "Caffe caffe": [[838, "caffe-caffe"]], "Chainer chainer": [[838, "chainer-chainer"]], "TensorFlow 1 tensorflow-1": [[838, "tensorflow-1-tensorflow-1"]], "MXNet mxnet": [[838, "mxnet-mxnet"]], "CNTK cntk": [[838, "cntk-cntk"]], "PyTorch pytorch": [[838, "pytorch-pytorch"]], "Flux flux": [[838, "flux-flux"]], "JAX jax": [[838, "jax-jax"]], "TensorFlow 2 tensorflow-2": [[838, "tensorflow-2-tensorflow-2"]], "DEX Language dex-language": [[838, "dex-language-dex-language"]], "Building Blocks": [[817, "building-blocks"]], "Backend Functional APIs \u2705": [[817, "backend-functional-apis"]], "Ivy Functional API \u2705": [[817, "ivy-functional-api"]], "Backend Handler \u2705": [[817, "backend-handler"]], "Tracer \ud83d\udea7": [[817, "tracer"]], "Inplace Updates": [[808, "inplace-updates"]], "out argument": [[808, "out-argument"]], "copy argument": [[808, "copy-argument"]], "Views": [[808, "views"]], "Ivy Container": [[820, "ivy-container"]], "Construction": [[820, "construction"]], "Representation": [[820, "representation"]], "Recursive Methods": [[820, "recursive-methods"]], "Built-ins": [[820, "built-ins"]], "Access": [[820, "access"]], "Saving and Loading": [[820, "saving-and-loading"]], "Comparisons": [[820, "comparisons"]], "Customized Representations": [[820, "customized-representations"]], "Use Cases": [[820, "use-cases"]], "Compartmentalization": [[820, "compartmentalization"]], "Configuration": [[820, "configuration"]], "Data loading": [[820, "data-loading"]], "Network weights": [[820, "network-weights"]], "Multi-Vendor Compiler Frameworks": [[841, "multi-vendor-compiler-frameworks"], [844, "multi-vendor-compiler-frameworks"]], "Apache TVM": [[841, "apache-tvm"]], "XLA": [[841, "xla"]], "GCC": [[841, "gcc"]], "Operating Modes": [[814, "operating-modes"]], "Global Parameter Properties": [[814, "global-parameter-properties"]], "Getter: ivy.<setting> attribute": [[814, "getter-ivy-setting-attribute"]], "Setter: ivy.set_<setting> and ivy.unset_<setting> functions": [[814, "setter-ivy-set-setting-and-ivy-unset-setting-functions"]], "Standardization": [[828, "standardization"]], "Skepticism": [[828, "skepticism"]], "Complimentary vs Competitive": [[828, "complimentary-vs-competitive"]], "Do Standards Work?": [[828, "do-standards-work"]], "The Array API Standard": [[828, "the-array-api-standard"]], "One liners": [[830, "one-liners"]], "Array API Tests": [[792, "array-api-tests"], [797, "array-api-tests"]], "Running the Tests": [[792, "running-the-tests"]], "Using Terminal": [[792, "using-terminal"]], "Using the IDE": [[792, "using-the-ide"]], "Regenerating Test Failures": [[792, "regenerating-test-failures"]], "Test Skipping": [[792, "test-skipping"]], "FAQ": [[823, "faq"]], "Maintaining Backend Versions": [[823, "maintaining-backend-versions"]], "Dynamic Sizes": [[823, "dynamic-sizes"]], "Type and Shape Checking": [[823, "type-and-shape-checking"]], "GPU handling": [[823, "gpu-handling"]], "Model Deployment": [[823, "model-deployment"]], "Dynamic Control Flow": [[823, "dynamic-control-flow"]], "Auto-Differentiation": [[823, "auto-differentiation"]], "Replicas, and Data vs Model Parallelism": [[823, "replicas-and-data-vs-model-parallelism"]], "Support for Functions": [[823, "support-for-functions"]], "Alternative Data Structures": [[823, "alternative-data-structures"]], "Custom Operations": [[823, "custom-operations"]], "The Pipeline": [[823, "the-pipeline"]], "State": [[823, "state"]], "Ivy as a Transpiler": [[822, "ivy-as-a-transpiler"], [25, "Ivy-as-a-Transpiler"], [26, "Ivy-as-a-Transpiler"]], "Frontend Functional APIs \ud83d\udea7": [[822, "frontend-functional-apis"]], "Role of the Tracer \ud83d\udea7": [[822, "role-of-the-tracer"]], "Converting Network Models \ud83d\udea7": [[822, "converting-network-models"]], "Ivy Frontend Tests": [[810, "ivy-frontend-tests"]], "Introduction": [[810, "introduction"], [809, "introduction"], [40, "Introduction"]], "Frontend Test Examples": [[810, "frontend-test-examples"]], "ivy.tan()": [[810, "ivy-tan"]], "ivy.full()": [[810, "ivy-full"]], "Testing Without Using Tests Values": [[810, "testing-without-using-tests-values"]], "Alias functions": [[810, "alias-functions"]], "Frontend Instance Method Tests": [[810, "frontend-instance-method-tests"]], "Frontend Instance Method Test Examples": [[810, "frontend-instance-method-test-examples"]], "ivy.add()": [[810, "ivy-add"]], "Hypothesis Helpers": [[810, "hypothesis-helpers"]], "Frontend Framework Testing Configuration": [[810, "frontend-framework-testing-configuration"]], "Ivy-Lint: Ivy\u2019s Custom Code Formatters": [[811, "ivy-lint-ivy-s-custom-code-formatters"]], "Overview": [[811, "overview"], [807, "overview"]], "Existing Formatters": [[811, "existing-formatters"]], "FunctionOrderingFormatter": [[811, "functionorderingformatter"]], "How the Formatter Works:": [[811, "how-the-formatter-works"]], "Integration and Usage": [[811, "integration-and-usage"]], "Contribution": [[811, "contribution"]], "Round Up": [[811, "round-up"], [21, "Round-Up"], [18, "Round-Up"], [12, "Round-Up"], [32, "Round-Up"], [19, "Round-Up"], [30, "Round-Up"], [28, "Round-Up"], [16, "Round-Up"], [17, "Round-Up"], [10, "Round-Up"], [27, "Round-Up"], [31, "Round-Up"], [29, "Round-Up"], [20, "Round-Up"], [22, "Round-Up"], [26, "Round-Up"], [39, "Round-Up"]], "Vendor-Specific Compilers": [[843, "vendor-specific-compilers"], [844, "vendor-specific-compilers"]], "ICC": [[843, "id1"]], "ICX": [[843, "icx"]], "NVCC": [[843, "nvcc"]], "API Standards": [[835, "api-standards"], [844, "api-standards"]], "Array API Standard": [[835, "id1"]], "Get Started": [[824, "get-started"]], "Installing using pip": [[824, "installing-using-pip"], [783, "installing-using-pip"]], "Docker": [[824, "docker"]], "Installing from source": [[824, "installing-from-source"]], "Ivy\u2019s tracer and transpiler": [[824, "ivy-s-tracer-and-transpiler"]], "Ivy Folder": [[824, "ivy-folder"]], "Setting Up the API key": [[824, "setting-up-the-api-key"]], "Issues and Questions": [[824, "issues-and-questions"]], "The Basics": [[790, "the-basics"]], "Getting Help": [[790, "getting-help"]], "ToDo List Issues": [[790, "todo-list-issues"]], "Managing Your Fork": [[790, "managing-your-fork"]], "Who To Ask": [[790, "who-to-ask"]], "With Command Line:": [[790, "with-command-line"]], "With Browser:": [[790, "with-browser"]], "Pull Requests": [[790, "pull-requests"]], "Small Commits Often": [[790, "small-commits-often"]], "Interactive Ivy Docker Container": [[790, "interactive-ivy-docker-container"]], "Running Tests Locally": [[790, "running-tests-locally"]], "With Docker": [[790, "with-docker"]], "Getting the most out of IDE": [[790, "getting-the-most-out-of-ide"]], "with PyCharm": [[790, "with-pycharm"]], "Logging": [[780, "module-ivy.utils.logging"]], "Building the Docs": [[785, "building-the-docs"]], "Building the Docs using Docker": [[785, "building-the-docs-using-docker"]], "Using convenience script": [[785, "using-convenience-script"]], "Using existing image on Docker Hub": [[785, "using-existing-image-on-docker-hub"]], "Building the image locally": [[785, "building-the-image-locally"]], "Building the Docs without Docker": [[785, "building-the-docs-without-docker"]], "Building the Docs Pipeline": [[795, "building-the-docs-pipeline"]], "How the doc-builder is being run": [[795, "how-the-doc-builder-is-being-run"]], "The convenience script": [[795, "the-convenience-script"]], "Options": [[795, "options"]], "The Docker image": [[795, "the-docker-image"]], "How Ivy\u2019s docs is structured": [[795, "how-ivy-s-docs-is-structured"]], "index.rst": [[795, "index-rst"]], "partial_conf.py": [[795, "partial-conf-py"]], "prebuild.sh": [[795, "prebuild-sh"]], "Custom Extensions": [[795, "custom-extensions"]], "custom_autosummary": [[795, "custom-autosummary"]], ":hide-table:": [[795, "hide-table"]], "discussion_linker": [[795, "discussion-linker"]], "skippable_function": [[795, "skippable-function"]], "ivy_data": [[795, "ivy-data"]], "Docstring Examples": [[800, "docstring-examples"]], "ivy.tan": [[800, "ivy-tan"]], "ivy.roll": [[800, "ivy-roll"]], "ivy.add": [[800, "ivy-add"]], "Profiler": [[781, "module-ivy.utils.profiler"]], "ivy.unify()": [[833, "ivy-unify"]], "Unify API": [[833, "unify-api"]], "Usage": [[833, "usage"]], "Error Handling": [[786, "error-handling"]], "Setting Up": [[789, "setting-up"]], "Forking and cloning the repo": [[789, "forking-and-cloning-the-repo"]], "Pre-Commit": [[789, "pre-commit"]], "PyCharm": [[789, "pycharm"], [803, "pycharm"]], "Virtual environments - No Docker": [[789, "virtual-environments-no-docker"]], "Using miniconda": [[789, "using-miniconda"]], "Using venv": [[789, "using-venv"]], "Docker Interpreter with PyCharm": [[789, "docker-interpreter-with-pycharm"]], "Windows": [[789, "windows"], [789, "id6"]], "MacOS": [[789, "macos"]], "Ubuntu": [[789, "ubuntu"], [789, "id8"]], "Setting Up Testing in PyCharm": [[789, "setting-up-testing-in-pycharm"]], "More Detailed Hypothesis Logs in PyCharm": [[789, "more-detailed-hypothesis-logs-in-pycharm"]], "Setting up for Free": [[789, "setting-up-for-free"]], "WSL": [[789, "wsl"]], "GitHub Codespaces": [[789, "github-codespaces"]], "The Binaries": [[789, "the-binaries"]], "Containers": [[796, "containers"]], "Container Instance Methods": [[796, "container-instance-methods"]], "API Instance Methods": [[796, "api-instance-methods"]], "API Special Methods": [[796, "api-special-methods"]], "Nestable Functions": [[796, "nestable-functions"], [804, "nestable-functions"], [805, "nestable-functions"]], "ML Explosion": [[827, "ml-explosion"]], "Navigating the Code": [[813, "navigating-the-code"]], "Categorization": [[813, "categorization"]], "Submodule Design": [[813, "submodule-design"]], "Ivy API": [[813, "ivy-api"]], "Backend API": [[813, "backend-api"]], "Submodule Helper Functions": [[813, "submodule-helper-functions"]], "Version Unpinning": [[813, "version-unpinning"]], "Ivy Frontends": [[809, "ivy-frontends"]], "The Frontend Basics": [[809, "the-frontend-basics"]], "Writing Frontend Functions": [[809, "writing-frontend-functions"]], "Short Frontend Implementations": [[809, "short-frontend-implementations"]], "Unused Arguments": [[809, "unused-arguments"]], "Supported Data Types and Devices": [[809, "supported-data-types-and-devices"]], "Classes and Instance Methods": [[809, "classes-and-instance-methods"]], "Frontend Data Type Promotion Rules": [[809, "frontend-data-type-promotion-rules"]], "NumPy Special Argument - Casting": [[809, "numpy-special-argument-casting"]], "Frontends Duplicate Policy": [[809, "frontends-duplicate-policy"]], "Design": [[816, "design"]], "Docstrings": [[801, "docstrings"]], "Contributing": [[784, "contributing"], [783, "contributing"]], "Devices": [[799, "devices"]], "Device Module": [[799, "device-module"]], "Arguments in other Functions": [[799, "arguments-in-other-functions"], [798, "arguments-in-other-functions"]], "Device handling": [[799, "device-handling"]], "Verbosity": [[782, "module-ivy.utils.verbosity"]], "Formatting": [[803, "formatting"]], "Lint Checks": [[803, "lint-checks"], [803, "id2"]], "Setup Formatting Locally": [[803, "setup-formatting-locally"]], "Pre-commit": [[803, "pre-commit"]], "VS Code": [[803, "vs-code"]], "Common Issues with Pre-Commit": [[803, "common-issues-with-pre-commit"]], "Continuous Integration": [[803, "continuous-integration"], [797, "continuous-integration"]], "Lint Formatting": [[803, "lint-formatting"]], "Vendor-Specific APIs": [[842, "vendor-specific-apis"], [844, "vendor-specific-apis"]], "TensorRT tensorrt": [[842, "tensorrt-tensorrt"]], "CUDA cuda": [[842, "cuda-cuda"]], "Ivy Tests": [[812, "ivy-tests"], [797, "ivy-tests"]], "Testing Pipeline": [[812, "testing-pipeline"]], "Hypothesis": [[812, "id1"]], "Data Generation": [[812, "id2"]], "Writing your own strategy": [[812, "writing-your-own-strategy"]], "Writing Hypothesis Tests": [[812, "writing-hypothesis-tests"]], "Ivy Test Decorators": [[812, "ivy-test-decorators"]], "Writing Ivy Tests": [[812, "writing-ivy-tests"]], "Integration of Strategies into Ivy Tests": [[812, "integration-of-strategies-into-ivy-tests"]], "Why do we need helper functions?": [[812, "why-do-we-need-helper-functions"]], "How to write Hypothesis Tests effectively": [[812, "how-to-write-hypothesis-tests-effectively"]], "Testing Partial Mixed Functions": [[812, "testing-partial-mixed-functions"]], "Bonus: Hypothesis\u2019 Extended Features": [[812, "bonus-hypothesis-extended-features"]], "Self-Consistent and Explicit Testing": [[812, "self-consistent-and-explicit-testing"]], "test_array_function": [[812, "id4"]], "Running Ivy Tests": [[812, "running-ivy-tests"]], "Re-Running Failed Ivy Tests": [[812, "re-running-failed-ivy-tests"]], "Related Work": [[834, "related-work"]], "Exchange Formats": [[837, "exchange-formats"], [844, "exchange-formats"]], "ONNX onnx": [[837, "onnx-onnx"]], "NNEF nnef": [[837, "nnef-nnef"]], "CoreML coreml": [[837, "coreml-coreml"]], "Data Types": [[798, "data-types"]], "Data Type Module": [[798, "data-type-module"]], "Data Type Promotion": [[798, "data-type-promotion"]], "Precise Mode": [[798, "precise-mode"]], "Precise Promotion Table": [[798, "precise-promotion-table"]], "Non-Precise Promotion Table": [[798, "non-precise-promotion-table"]], "Supported and Unsupported Data Types": [[798, "supported-and-unsupported-data-types"]], "Supported and Unsupported Data Types Attributes": [[798, "supported-and-unsupported-data-types-attributes"]], "Special Case": [[798, "special-case"]], "Backend Data Type Bugs": [[798, "backend-data-type-bugs"]], "Data Type Casting Modes": [[798, "data-type-casting-modes"]], "Superset Data Type Support": [[798, "superset-data-type-support"]], "Deep Dive": [[791, "deep-dive"]], "Function Wrapping": [[806, "function-wrapping"]], "Decorator order": [[806, "decorator-order"]], "Conversion Wrappers": [[806, "conversion-wrappers"]], "Inference Wrappers": [[806, "inference-wrappers"]], "Out Argument Support": [[806, "out-argument-support"]], "Nestable Support": [[806, "nestable-support"]], "Partial Mixed Function Support": [[806, "partial-mixed-function-support"]], "Shape Conversion": [[806, "shape-conversion"]], "View Handling": [[806, "view-handling"]], "Exception Handling": [[806, "exception-handling"], [802, "exception-handling"]], "Miscellaneous Wrappers": [[806, "miscellaneous-wrappers"]], "Ivy Stateful API": [[821, "ivy-stateful-api"], [16, "Ivy-Stateful-API"], [25, "Ivy-Stateful-API"]], "Modules": [[821, "modules"]], "Initializers": [[821, "initializers"], [763, "module-ivy.stateful.initializers"]], "Optimizers": [[821, "optimizers"], [768, "module-ivy.stateful.optimizers"]], "Graph Tracers": [[839, "graph-tracers"], [844, "graph-tracers"]], "tf.Graph": [[839, "tf-graph"]], "Jaxpr": [[839, "jaxpr"]], "torch.jit": [[839, "torch-jit"]], "torch.fx": [[839, "torch-fx"]], "Function Arguments": [[804, "function-arguments"]], "Positional and Keyword Arguments": [[804, "positional-and-keyword-arguments"]], "Input Arrays": [[804, "input-arrays"]], "out Argument": [[804, "out-argument"]], "dtype and device arguments": [[804, "dtype-and-device-arguments"]], "Numbers in Operator Functions": [[804, "numbers-in-operator-functions"]], "Integer Sequences": [[804, "integer-sequences"]], "Glossary": [[825, "glossary"]], "Backend Setting": [[794, "backend-setting"]], "Dynamic Backend Setting": [[794, "dynamic-backend-setting"]], "Backend and Frontend Version Support": [[794, "backend-and-frontend-version-support"]], "Superset Behaviour": [[815, "superset-behaviour"]], "Extending the Standard": [[815, "extending-the-standard"]], "What is the Superset?": [[815, "what-is-the-superset"]], "A Non-Duplicate Superset": [[815, "a-non-duplicate-superset"]], "What is not the Superset?": [[815, "what-is-not-the-superset"]], "Balancing Generalization with Efficiency": [[815, "balancing-generalization-with-efficiency"]], "More Examples": [[815, "more-examples"]], "Maximizing Usage of Native Functionality": [[815, "maximizing-usage-of-native-functionality"]], "ivy.trace_graph()": [[831, "ivy-trace-graph"]], "Tracer API": [[831, "tracer-api"]], "Using the tracer": [[831, "using-the-tracer"]], "Eager vs lazy Compilation": [[831, "eager-vs-lazy-compilation"]], "Array caching": [[831, "array-caching"]], "Generators": [[831, "generators"]], "Stateful": [[831, "stateful"]], "ML-Unifying Companies": [[840, "ml-unifying-companies"], [844, "ml-unifying-companies"]], "Quansight": [[840, "id1"]], "Modular": [[840, "id2"]], "OctoML": [[840, "id3"]], "Helpful Resources": [[787, "helpful-resources"]], "Commit (Push/PR) Triggered Testing": [[797, "commit-push-pr-triggered-testing"]], "Implementation": [[797, "implementation"]], "A Top-Down View": [[797, "a-top-down-view"]], "Storing (and retrieving) the Mapping": [[797, "storing-and-retrieving-the-mapping"]], "Cloning and Pushing to the Repository": [[797, "cloning-and-pushing-to-the-repository"]], "Implementational Nitty Gritties": [[797, "implementational-nitty-gritties"]], "Storage Space (unifyai/Mapping)": [[797, "storage-space-unifyai-mapping"]], "Determine Test Coverage Workflow": [[797, "determine-test-coverage-workflow"]], "Multiple Runners": [[797, "multiple-runners"]], "Race Condition": [[797, "race-condition"]], "Periodic Testing": [[797, "periodic-testing"]], "Manually Dispatched Workflows": [[797, "manually-dispatched-workflows"]], "CI Pipeline \u27a1\ufe0f": [[797, "ci-pipeline"]], "Push": [[797, "push"]], "Pull Request": [[797, "pull-request"]], "Dashboard": [[797, "dashboard"]], "Status": [[783, "status"]], "Unified AI": [[783, "unified-ai"]], "Getting started": [[783, "getting-started"]], "Installing ivy": [[783, "installing-ivy"]], "Using Ivy": [[783, "using-ivy"]], "Documentation": [[783, "documentation"]], "Diving deeper": [[783, "diving-deeper"]], "When should I use Ivy as a transpiler?": [[783, "when-should-i-use-ivy-as-a-transpiler"]], "Community": [[783, "community"]], "Citation": [[783, "citation"]], "Motivation": [[826, "motivation"]], "Function Types": [[805, "function-types"]], "Primary Functions": [[805, "primary-functions"]], "Compositional Functions": [[805, "compositional-functions"]], "Mixed Functions": [[805, "mixed-functions"]], "Partial Mixed Functions": [[805, "partial-mixed-functions"]], "Standalone Functions": [[805, "standalone-functions"]], "Convenience Functions": [[805, "convenience-functions"]], "What does Ivy Add?": [[844, "what-does-ivy-add"]], "Ivy Exception Class": [[802, "ivy-exception-class"]], "Configurable Mode for Stack Trace": [[802, "configurable-mode-for-stack-trace"]], "Ivy func_wrapper Pruning": [[802, "ivy-func-wrapper-pruning"]], "@handle_exceptions Decorator": [[802, "handle-exceptions-decorator"]], "Consistency in Errors": [[802, "consistency-in-errors"]], "Assertion Function": [[802, "assertion-function"]], "Example Usage of the Gradient API": [[807, "example-usage-of-the-gradient-api"]], "The ivy.execute_with_gradients() function signature": [[807, "the-ivy-execute-with-gradients-function-signature"]], "An example using ivy.execute_with_gradients()": [[807, "an-example-using-ivy-execute-with-gradients"]], "Custom Gradient Functions": [[807, "custom-gradient-functions"]], "Design of the Gradient API": [[807, "design-of-the-gradient-api"]], "Our policy on gradients": [[807, "our-policy-on-gradients"]], "Gradient APIs of frameworks": [[807, "gradient-apis-of-frameworks"]], "General Structure of Backend-specific implementations": [[807, "general-structure-of-backend-specific-implementations"]], "Framework-specific Considerations": [[807, "framework-specific-considerations"]], "The Array Class": [[819, "the-array-class"]], "Unifying Operators": [[819, "unifying-operators"]], "API Monkey Patching": [[819, "api-monkey-patching"]], "Instance Methods": [[819, "instance-methods"]], "all": [[739, "all"]], "Test parameter flags": [[755, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "Number helpers": [[751, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "Testing": [[759, "testing"], [39, "Testing"]], "Globals": [[746, "module-ivy_tests.test_ivy.helpers.globals"]], "any": [[740, "any"]], "Dtype helpers": [[749, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "Utils": [[758, "utils"]], "Module": [[766, "module-ivy.stateful.module"]], "msort": [[726, "msort"]], "Assertions": [[770, "module-ivy.utils.assertions"], [743, "module-ivy_tests.test_ivy.helpers.assertions"]], "mean": [[733, "mean"]], "unique_counts": [[722, "unique-counts"]], "Data-dependent output shape": [[722, null], [721, null], [723, null], [724, null], [617, null], [617, null], [617, null], [617, null]], "shuffle": [[715, "shuffle"]], "Hypothesis helpers": [[747, "hypothesis-helpers"]], "Testing helpers": [[756, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "Sub backend handler": [[774, "module-ivy.utils.backend.sub_backend_handler"]], "unique_all": [[721, "unique-all"]], "Einsum parser": [[777, "module-ivy.utils.einsum_parser"]], "cumsum": [[730, "cumsum"]], "save": [[742, "save"]], "prod": [[735, "prod"]], "Structs": [[754, "module-ivy_tests.test_ivy.helpers.structs"]], "Framework classes": [[757, "framework-classes"]], "Helpers": [[762, "module-ivy.stateful.helpers"]], "Function testing": [[745, "module-ivy_tests.test_ivy.helpers.function_testing"]], "Converters": [[761, "module-ivy.stateful.converters"]], "Multiprocessing": [[752, "module-ivy_tests.test_ivy.helpers.multiprocessing"]], "argmax": [[716, "argmax"]], "Backend": [[771, "backend"]], "einsum": [[731, "einsum"]], "unique_inverse": [[723, "unique-inverse"]], "cumprod": [[729, "cumprod"]], "min": [[734, "min"]], "argwhere": [[718, "argwhere"]], "Available frameworks": [[744, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "Array helpers": [[748, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "where": [[720, "where"]], "argsort": [[725, "argsort"]], "Dynamic import": [[776, "module-ivy.utils.dynamic_import"]], "var": [[738, "var"]], "max": [[732, "max"]], "Sequential": [[769, "module-ivy.stateful.sequential"]], "Ast helpers": [[772, "module-ivy.utils.backend.ast_helpers"]], "Exceptions": [[778, "module-ivy.utils.exceptions"]], "Parameter": [[760, "parameter"], [760, "id1"], [557, "parameter"], [561, "parameter"], [552, "parameter"], [558, "parameter"], [551, "parameter"], [560, "parameter"], [603, "parameter"], [606, "parameter"], [606, "id1"], [606, "id2"], [606, "id3"], [606, "id4"], [606, "id5"], [204, "parameter"]], "Inspection": [[779, "module-ivy.utils.inspection"]], "load": [[741, "load"]], "Pipeline helper": [[753, "module-ivy_tests.test_ivy.helpers.pipeline_helper"]], "searchsorted": [[727, "searchsorted"]], "unique_values": [[724, "unique-values"]], "std": [[736, "std"]], "sum": [[737, "sum"]], "nonzero": [[719, "nonzero"]], "Binaries": [[775, "module-ivy.utils.binaries"]], "General helpers": [[750, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "argmin": [[717, "argmin"]], "Handler": [[773, "module-ivy.utils.backend.handler"]], "sort": [[728, "sort"]], "End-to-End Training Pipeline in Ivy": [[41, "End-to-End-Training-Pipeline-in-Ivy"]], "Importing libraries": [[41, "Importing-libraries"]], "Let\u2019s build the pipeline with a Tensorflow backend": [[41, "Let's-build-the-pipeline-with-a-Tensorflow-backend"]], "We are using MNIST dataset for this Tutorial": [[41, "We-are-using-MNIST-dataset-for-this-Tutorial"]], "Temporary Dataset and Dynamic loader": [[41, "Temporary-Dataset-and-Dynamic-loader"]], "Defining the Ivy Network": [[41, "Defining-the-Ivy-Network"]], "Training Loop with utility functions": [[41, "Training-Loop-with-utility-functions"]], "Plotting the training metrics": [[41, "Plotting-the-training-metrics"]], "Save the trained Model": [[41, "Save-the-trained-Model"]], "How to use decorators": [[21, "How-to-use-decorators"]], "Unify": [[21, "Unify"], [32, "Unify"], [30, "Unify"], [31, "Unify"], [20, "Unify"]], "Compile": [[21, "Compile"], [32, "Compile"], [30, "Compile"], [31, "Compile"], [20, "Compile"]], "Transpile": [[21, "Transpile"], [32, "Transpile"], [30, "Transpile"], [31, "Transpile"], [20, "Transpile"]], "Examples and Demos": [[2, "examples-and-demos"], [14, "examples-and-demos"]], "Using Ivy ResNet": [[7, "Using-Ivy-ResNet"]], "Installation": [[7, "Installation"], [3, "Installation"]], "Imports": [[7, "Imports"], [5, "Imports"]], "Data Preparation": [[7, "Data-Preparation"], [4, "Data-Preparation"], [3, "Data-Preparation"], [5, "Data-Preparation"]], "Prepare the set of labels": [[7, "Prepare-the-set-of-labels"]], "Load the image example \ud83d\uddbc\ufe0f": [[7, "Load-the-image-example-\ud83d\uddbc\ufe0f"], [5, "Load-the-image-example-\ud83d\uddbc\ufe0f"]], "Visualise image": [[7, "Visualise-image"], [5, "Visualise-image"]], "Model Inference ResNet34": [[7, "Model-Inference-ResNet34"]], "Initializing Native Torch ResNet34": [[7, "Initializing-Native-Torch-ResNet34"]], "Initializing Ivy ResNet34 with Pretrained Weights \u2b07\ufe0f": [[7, "Initializing-Ivy-ResNet34-with-Pretrained-Weights-\u2b07\ufe0f"]], "Use the model to classify your images \ud83d\ude80": [[7, "Use-the-model-to-classify-your-images-\ud83d\ude80"], [7, "id1"]], "Model Inference ResNet50": [[7, "Model-Inference-ResNet50"]], "Initializing Native Torch ResNet50": [[7, "Initializing-Native-Torch-ResNet50"]], "Initializing Ivy ResNet50 with Pretrained Weights \u2b07\ufe0f": [[7, "Initializing-Ivy-ResNet50-with-Pretrained-Weights-\u2b07\ufe0f"]], "Ivy as a Transpiler Introduction": [[43, "Ivy-as-a-Transpiler-Introduction"]], "To use the transpiler:": [[43, "To-use-the-transpiler:"]], "Transpiler Interface": [[43, "Transpiler-Interface"]], "Telemetry": [[43, "Telemetry"]], "1. Transpile Functions \ud83d\udd22": [[43, "1.-Transpile-Functions-\ud83d\udd22"]], "2. Transpile Libraries \ud83d\udcda": [[43, "2.-Transpile-Libraries-\ud83d\udcda"]], "3. Transpile Models \ud83c\udf10": [[43, "3.-Transpile-Models-\ud83c\udf10"]], "Compile code": [[18, "Compile-code"]], "Accelerating PyTorch models with JAX": [[8, "Accelerating-PyTorch-models-with-JAX"]], "Transpiling a Tensorflow model to build on top": [[12, "Transpiling-a-Tensorflow-model-to-build-on-top"]], "Tutorials And Examples": [[14, "tutorials-and-examples"]], "Learn the basics": [[14, "learn-the-basics"], [15, "learn-the-basics"]], "Guides": [[14, "guides"], [9, "guides"]], "1.2: As a Decorator": [[32, "1.2:-As-a-Decorator"]], "Transpile code": [[19, "Transpile-code"]], "3.0: Perceiver": [[35, "3.0:-Perceiver"]], "Resnet 18": [[44, "Resnet-18"]], "Demos": [[0, "demos"]], "Creating a Notebook for Demo": [[0, "creating-a-notebook-for-demo"]], "1.0: Lazy vs Eager": [[30, "1.0:-Lazy-vs-Eager"]], "HuggingFace Tensorflow DeiT": [[42, "HuggingFace-Tensorflow-DeiT"]], "Graph can be visualized and displayed as html file on browser": [[42, "Graph-can-be-visualized-and-displayed-as-html-file-on-browser"]], "0.1: Compile": [[28, "0.1:-Compile"]], "Basic Operations with Ivy": [[37, "Basic-Operations-with-Ivy"]], "Installs \ud83d\udcbe": [[37, "Installs-\ud83d\udcbe"], [38, "Installs-\ud83d\udcbe"]], "Imports \ud83d\udec3": [[37, "Imports-\ud83d\udec3"], [38, "Imports-\ud83d\udec3"]], "Ivy as a Unified ML Framework \ud83d\udd00": [[37, "Ivy-as-a-Unified-ML-Framework-\ud83d\udd00"]], "Change frameworks by one line of code \u261d": [[37, "Change-frameworks-by-one-line-of-code-\u261d"]], "No need to worry about data types \ud83c\udfa8": [[37, "No-need-to-worry-about-data-types-\ud83c\udfa8"]], "No need to worry about framework differences \ud83d\udcb1": [[37, "No-need-to-worry-about-framework-differences-\ud83d\udcb1"]], "Unifying them all! \ud83c\udf72": [[37, "Unifying-them-all!-\ud83c\udf72"]], "Ivy as a standalone ML framework \ud83c\udf00": [[37, "Ivy-as-a-standalone-ML-framework-\ud83c\udf00"]], "Set Backend Framework": [[37, "Set-Backend-Framework"]], "Define Model": [[37, "Define-Model"], [38, "Define-Model"]], "Create Model": [[37, "Create-Model"]], "Create Optimizer": [[37, "Create-Optimizer"]], "Input and Target": [[37, "Input-and-Target"]], "Loss Function": [[37, "Loss-Function"]], "Training Loop": [[37, "Training-Loop"]], "Transpile any model": [[23, "Transpile-any-model"]], "Round up": [[23, "Round-up"]], "TO REPLACE: Title": [[1, "TO-REPLACE:-Title"]], "# Ivy Bert Demo": [[4, "#-Ivy-Bert-Demo"]], "Install the dependecies": [[4, "Install-the-dependecies"]], "Import the modules": [[4, "Import-the-modules"]], "Ivy inference with Sequence Classification": [[4, "Ivy-inference-with-Sequence-Classification"]], "Ivy model inference with tensorflow": [[4, "Ivy-model-inference-with-tensorflow"]], "Ivy model inference with Jax": [[4, "Ivy-model-inference-with-Jax"]], "Ivy model inference with torch": [[4, "Ivy-model-inference-with-torch"]], "Developing a convolutional network using Ivy": [[13, "Developing-a-convolutional-network-using-Ivy"]], "Ivy AlexNet demo": [[3, "Ivy-AlexNet-demo"]], "Ivy AlexNet inference in Torch": [[3, "Ivy-AlexNet-inference-in-Torch"]], "TensorFlow inference": [[3, "TensorFlow-inference"]], "JAX inference": [[3, "JAX-inference"]], "Appendix (Ivy code for AlexNet implementation)": [[3, "Appendix-(Ivy-code-for-AlexNet-implementation)"]], "Image Segmentation with Ivy UNet": [[5, "Image-Segmentation-with-Ivy-UNet"]], "Custom Preprocessing": [[5, "Custom-Preprocessing"]], "Model Inference": [[5, "Model-Inference"]], "Initializing Native Torch UNet": [[5, "Initializing-Native-Torch-UNet"]], "Initializing Ivy UNet with Pretrained Weights \u2b07\ufe0f": [[5, "Initializing-Ivy-UNet-with-Pretrained-Weights-\u2b07\ufe0f"]], "Custom masking function": [[5, "Custom-masking-function"]], "Use the model to segment your images \ud83d\ude80": [[5, "Use-the-model-to-segment-your-images-\ud83d\ude80"]], "TensorFlow backend": [[5, "TensorFlow-backend"]], "JAX": [[5, "JAX"]], "Appendix: the Ivy native implementation of UNet": [[5, "Appendix:-the-Ivy-native-implementation-of-UNet"]], "Write Ivy code": [[16, "Write-Ivy-code"]], "Contents": [[16, "Contents"]], "Installing Ivy": [[16, "Installing-Ivy"]], "Importing Ivy": [[16, "Importing-Ivy"]], "Ivy Backend Handler": [[16, "Ivy-Backend-Handler"], [25, "Ivy-Backend-Handler"]], "Data Structures": [[16, "Data-Structures"], [25, "Data-Structures"]], "Ivy Functional API": [[16, "Ivy-Functional-API"], [25, "Ivy-Functional-API"]], "Accelerating MMPreTrain models with JAX": [[6, "Accelerating-MMPreTrain-models-with-JAX"]], "1.3: Dynamic vs Static": [[33, "1.3:-Dynamic-vs-Static"]], "Dynamic": [[33, "Dynamic"]], "Static": [[33, "Static"]], "ToDo: explain via examples why dynamic mode is set to True by default when transpiling to and from numpy and torch, but set to False by default when transpiling to and from tensorflow and jax.": [[33, "ToDo:-explain-via-examples-why-dynamic-mode-is-set-to-True-by-default-when-transpiling-to-and-from-numpy-and-torch,-but-set-to-False-by-default-when-transpiling-to-and-from-tensorflow-and-jax."]], "3.1: Stable Diffusion": [[36, "3.1:-Stable-Diffusion"]], "Unify code": [[17, "Unify-code"]], "Transpiling a PyTorch model to build on top": [[10, "Transpiling-a-PyTorch-model-to-build-on-top"]], "ODSC Ivy Demo": [[25, "ODSC-Ivy-Demo"]], "Graph Compiler": [[25, "Graph-Compiler"]], "Any function": [[25, "Any-function"], [26, "Any-function"]], "Any library": [[25, "Any-library"], [26, "Any-library"]], "Any model": [[25, "Any-model"], [26, "Any-model"]], "0.0: Unify": [[27, "0.0:-Unify"]], "1.1: Framework Selection": [[31, "1.1:-Framework-Selection"]], "Compilation of a Basic Function": [[38, "Compilation-of-a-Basic-Function"]], "Import Ivy compiler": [[38, "Import-Ivy-compiler"]], "Function compilation \ud83d\udee0": [[38, "Function-compilation-\ud83d\udee0"]], "Set backend": [[38, "Set-backend"]], "Sample input": [[38, "Sample-input"]], "Define function to compile": [[38, "Define-function-to-compile"]], "Compile the function": [[38, "Compile-the-function"]], "Check results": [[38, "Check-results"], [38, "id1"]], "Compiling simple neural network \ud83e\udde0": [[38, "Compiling-simple-neural-network-\ud83e\udde0"]], "Create model": [[38, "Create-model"]], "Define input": [[38, "Define-input"]], "Compile network": [[38, "Compile-network"]], "Deepmind PerceiverIO on GPU": [[40, "Deepmind-PerceiverIO-on-GPU"]], "Install Python3.8 and setup the kernel": [[40, "Install-Python3.8-and-setup-the-kernel"]], "Clone the ivy and ivy-models repo": [[40, "Clone-the-ivy-and-ivy-models-repo"]], "Install ivy and ivy_models from the repos": [[40, "Install-ivy-and-ivy_models-from-the-repos"]], "Run the demo\u2026": [[40, "Run-the-demo..."]], "\u2026with torch backend": [[40, "...with-torch-backend"]], "\u2026.with tensorflow backend": [[40, "....with-tensorflow-backend"]], "\u2026with jax backend": [[40, "...with-jax-backend"]], "\u2026with numpy backend": [[40, "...with-numpy-backend"]], "0.2: Transpile": [[29, "0.2:-Transpile"]], "Write a model using Ivy": [[24, "Write-a-model-using-Ivy"]], "Lazy vs Eager": [[20, "Lazy-vs-Eager"]], "Transpiling a haiku model to build on top": [[11, "Transpiling-a-haiku-model-to-build-on-top"]], "Transpile any library": [[22, "Transpile-any-library"]], "2.0: Kornia": [[34, "2.0:-Kornia"]], "Quickstart": [[26, "Quickstart"]], "Get familiar with Ivy": [[26, "Get-familiar-with-Ivy"]], "Functional API": [[26, "Functional-API"]], "Stateful API": [[26, "Stateful-API"]], "Compiling code": [[26, "Compiling-code"]], "Demo: Transpiling DeepMind\u2019s PerceiverIO": [[39, "Demo:-Transpiling-DeepMind's-PerceiverIO"]], "Table of Contents": [[39, "Table-of-Contents"]], "Defining the model": [[39, "Defining-the-model"]], "Model construction": [[39, "Model-construction"]], "Some helper functions": [[39, "Some-helper-functions"]], "Transpiling the model": [[39, "Transpiling-the-model"]], "PyTorch pipeline": [[39, "PyTorch-pipeline"]], "Dataset download": [[39, "Dataset-download"]], "DataLoader": [[39, "DataLoader"]], "Training": [[39, "Training"]], "expand_dims": [[674, "expand-dims"]], "set_nest_at_index": [[707, "set-nest-at-index"]], "matrix_transpose": [[653, "matrix-transpose"]], "svd": [[659, "svd"]], "vector_norm": [[666, "vector-norm"]], "permute_dims": [[676, "permute-dims"]], "cross_entropy": [[669, "cross-entropy"]], "roll": [[679, "roll"]], "multi_index_nest": [[699, "multi-index-nest"]], "reshape": [[678, "reshape"]], "tile": [[684, "tile"]], "nested_argwhere": [[701, "nested-argwhere"]], "layer_norm": [[709, "layer-norm"]], "sparse_cross_entropy": [[670, "sparse-cross-entropy"]], "seed": [[714, "seed"]], "svdvals": [[660, "svdvals"]], "stack": [[682, "stack"]], "vector_to_skew_symmetric_matrix": [[667, "vector-to-skew-symmetric-matrix"]], "solve": [[658, "solve"]], "all_nested_indices": [[690, "all-nested-indices"]], "clip": [[671, "clip"]], "unstack": [[685, "unstack"]], "reptile_step": [[689, "reptile-step"]], "matrix_rank": [[652, "matrix-rank"]], "random_normal": [[712, "random-normal"]], "repeat": [[677, "repeat"]], "outer": [[654, "outer"]], "qr": [[656, "qr"]], "map": [[696, "map"]], "nested_map": [[702, "nested-map"]], "copy_nest": [[691, "copy-nest"]], "nested_multi_map": [[703, "nested-multi-map"]], "random_uniform": [[713, "random-uniform"]], "vander": [[664, "vander"]], "pinv": [[655, "pinv"]], "concat": [[672, "concat"]], "swapaxes": [[683, "swapaxes"]], "maml_step": [[688, "maml-step"]], "insert_into_nest_at_index": [[694, "insert-into-nest-at-index"]], "binary_cross_entropy": [[668, "binary-cross-entropy"]], "trace": [[663, "trace"]], "split": [[680, "split"]], "zero_pad": [[686, "zero-pad"]], "duplicate_array_index_chains": [[692, "duplicate-array-index-chains"]], "prune_nest_at_index": [[705, "prune-nest-at-index"]], "index_nest": [[693, "index-nest"]], "set_nest_at_indices": [[708, "set-nest-at-indices"]], "map_nest_at_indices": [[698, "map-nest-at-indices"]], "randint": [[711, "randint"]], "prune_nest_at_indices": [[706, "prune-nest-at-indices"]], "flip": [[675, "flip"]], "squeeze": [[681, "squeeze"]], "matrix_power": [[651, "matrix-power"]], "slogdet": [[657, "slogdet"]], "tensordot": [[661, "tensordot"]], "nested_any": [[700, "nested-any"]], "prune_empty": [[704, "prune-empty"]], "insert_into_nest_at_indices": [[695, "insert-into-nest-at-indices"]], "multinomial": [[710, "multinomial"]], "fomaml_step": [[687, "fomaml-step"]], "map_nest_at_index": [[697, "map-nest-at-index"]], "matrix_norm": [[650, "matrix-norm"]], "tensorsolve": [[662, "tensorsolve"]], "constant_pad": [[673, "constant-pad"]], "vecdot": [[665, "vecdot"]], "supports_inplace_updates": [[567, "supports-inplace-updates"]], "strides": [[566, "strides"]], "inplace_variables_supported": [[536, "inplace-variables-supported"]], "to_list": [[569, "to-list"]], "unset_queue_timeout": [[581, "unset-queue-timeout"]], "print_all_arrays_in_memory": [[548, "print-all-arrays-in-memory"]], "is_array": [[537, "is-array"]], "isscalar": [[543, "isscalar"]], "stable_divide": [[564, "stable-divide"]], "isin": [[542, "isin"]], "unset_min_denominator": [[578, "unset-min-denominator"]], "fourier_encode": [[522, "fourier-encode"]], "is_ivy_array": [[538, "is-ivy-array"]], "num_arrays_in_memory": [[547, "num-arrays-in-memory"]], "set_min_denominator": [[556, "set-min-denominator"]], "set_nestable_mode": [[557, "set-nestable-mode"]], "inplace_update": [[535, "inplace-update"]], "shape": [[563, "shape"]], "is_native_array": [[541, "is-native-array"]], "set_show_func_wrapper_trace_mode": [[561, "set-show-func-wrapper-trace-mode"]], "inplace_decrement": [[533, "inplace-decrement"]], "unset_array_mode": [[574, "unset-array-mode"]], "set_item": [[554, "set-item"]], "unset_tmp_dir": [[584, "unset-tmp-dir"]], "to_numpy": [[571, "to-numpy"]], "function_unsupported_devices_and_dtypes": [[524, "function-unsupported-devices-and-dtypes"]], "exists": [[521, "exists"]], "set_inplace_mode": [[553, "set-inplace-mode"]], "stable_pow": [[565, "stable-pow"]], "get_referrers_recursive": [[530, "get-referrers-recursive"]], "itemsize": [[544, "itemsize"]], "set_exception_trace_mode": [[552, "set-exception-trace-mode"]], "set_precise_mode": [[558, "set-precise-mode"]], "try_else_none": [[573, "try-else-none"]], "set_array_mode": [[551, "set-array-mode"]], "scatter_nd": [[550, "scatter-nd"]], "unset_nestable_mode": [[579, "unset-nestable-mode"]], "get_item": [[528, "get-item"]], "to_scalar": [[572, "to-scalar"]], "is_ivy_nested_array": [[540, "is-ivy-nested-array"]], "function_supported_devices_and_dtypes": [[523, "function-supported-devices-and-dtypes"]], "unset_show_func_wrapper_trace_mode": [[583, "unset-show-func-wrapper-trace-mode"]], "unset_shape_array_mode": [[582, "unset-shape-array-mode"]], "unset_min_base": [[577, "unset-min-base"]], "match_kwargs": [[545, "match-kwargs"]], "set_min_base": [[555, "set-min-base"]], "get_all_arrays_in_memory": [[527, "get-all-arrays-in-memory"]], "einops_repeat": [[520, "einops-repeat"]], "unset_inplace_mode": [[576, "unset-inplace-mode"]], "gather": [[525, "gather"]], "has_nans": [[531, "has-nans"]], "set_shape_array_mode": [[560, "set-shape-array-mode"]], "multiprocessing": [[546, "multiprocessing"]], "scatter_flat": [[549, "scatter-flat"]], "set_queue_timeout": [[559, "set-queue-timeout"]], "to_native_shape": [[570, "to-native-shape"]], "inplace_increment": [[534, "inplace-increment"]], "unset_exception_trace_mode": [[575, "unset-exception-trace-mode"]], "gather_nd": [[526, "gather-nd"]], "get_num_dims": [[529, "get-num-dims"]], "set_tmp_dir": [[562, "set-tmp-dir"]], "inplace_arrays_supported": [[532, "inplace-arrays-supported"]], "is_ivy_container": [[539, "is-ivy-container"]], "unset_precise_mode": [[580, "unset-precise-mode"]], "to_ivy_shape": [[568, "to-ivy-shape"]], "clip_matrix_norm": [[513, "clip-matrix-norm"]], "top_k": [[470, "top-k"]], "bernoulli": [[482, "bernoulli"]], "current_backend_str": [[516, "current-backend-str"]], "l2_normalize": [[480, "l2-normalize"]], "is_native_sparse_array": [[491, "is-native-sparse-array"]], "instance_norm": [[478, "instance-norm"]], "bincount": [[494, "bincount"]], "igamma": [[500, "igamma"]], "partial_tensor_to_vec": [[463, "partial-tensor-to-vec"]], "unique_consecutive": [[473, "unique-consecutive"]], "histogram": [[499, "histogram"]], "einops_rearrange": [[518, "einops-rearrange"]], "put_along_axis": [[466, "put-along-axis"]], "arg_names": [[509, "arg-names"]], "hsplit": [[456, "hsplit"]], "corrcoef": [[495, "corrcoef"]], "unfold": [[472, "unfold"]], "poisson": [[486, "poisson"]], "take_along_axis": [[469, "take-along-axis"]], "soft_thresholding": [[468, "soft-thresholding"]], "partial_vec_to_tensor": [[465, "partial-vec-to-tensor"]], "heaviside": [[455, "heaviside"]], "gamma": [[485, "gamma"]], "clip_vector_norm": [[514, "clip-vector-norm"]], "native_sparse_array_to_indices_values_and_shape": [[493, "native-sparse-array-to-indices-values-and-shape"]], "vstack": [[475, "vstack"]], "beta": [[483, "beta"]], "optional_get_element": [[506, "optional-get-element"]], "assert_supports_inplace": [[511, "assert-supports-inplace"]], "lexsort": [[489, "lexsort"]], "is_ivy_sparse_array": [[490, "is-ivy-sparse-array"]], "cummin": [[498, "cummin"]], "hstack": [[457, "hstack"]], "nanprod": [[504, "nanprod"]], "vsplit": [[474, "vsplit"]], "nanmean": [[502, "nanmean"]], "quantile": [[505, "quantile"]], "default": [[517, "default"]], "partial_fold": [[462, "partial-fold"]], "array_equal": [[510, "array-equal"]], "batch_norm": [[476, "batch-norm"]], "invert_permutation": [[488, "invert-permutation"]], "median": [[501, "median"]], "l1_normalize": [[479, "l1-normalize"]], "matricize": [[459, "matricize"]], "trim_zeros": [[471, "trim-zeros"]], "cov": [[496, "cov"]], "i0": [[458, "i0"]], "cummax": [[497, "cummax"]], "arg_info": [[508, "arg-info"]], "rot90": [[467, "rot90"]], "all_equal": [[507, "all-equal"]], "dirichlet": [[484, "dirichlet"]], "pad": [[461, "pad"]], "container_types": [[515, "container-types"]], "partial_unfold": [[464, "partial-unfold"]], "lp_normalize": [[481, "lp-normalize"]], "unravel_index": [[487, "unravel-index"]], "nanmedian": [[503, "nanmedian"]], "moveaxis": [[460, "moveaxis"]], "native_sparse_array": [[492, "native-sparse-array"]], "einops_reduce": [[519, "einops-reduce"]], "group_norm": [[477, "group-norm"]], "cache_fn": [[512, "cache-fn"]], "huber_loss": [[431, "huber-loss"]], "expand": [[449, "expand"]], "tt_matrix_to_tensor": [[429, "tt-matrix-to-tensor"]], "batched_outer": [[406, "batched-outer"]], "pool": [[399, "pool"]], "flatten": [[451, "flatten"]], "atleast_1d": [[440, "atleast-1d"]], "max_pool2d": [[395, "max-pool2d"]], "initialize_tucker": [[415, "initialize-tucker"]], "partial_tucker": [[424, "partial-tucker"]], "concat_from_sequence": [[446, "concat-from-sequence"]], "general_inner_product": [[413, "general-inner-product"]], "truncated_svd": [[428, "truncated-svd"]], "atleast_3d": [[442, "atleast-3d"]], "adjoint": [[405, "adjoint"]], "make_svd_non_negative": [[419, "make-svd-non-negative"]], "max_pool3d": [[396, "max-pool3d"]], "kronecker": [[418, "kronecker"]], "nearest_interpolate": [[398, "nearest-interpolate"]], "matrix_exp": [[420, "matrix-exp"]], "max_pool1d": [[394, "max-pool1d"]], "multi_mode_dot": [[423, "multi-mode-dot"]], "column_stack": [[445, "column-stack"]], "tensor_train": [[427, "tensor-train"]], "log_poisson_loss": [[434, "log-poisson-loss"]], "eigh_tridiagonal": [[411, "eigh-tridiagonal"]], "khatri_rao": [[416, "khatri-rao"]], "interpolate": [[393, "interpolate"]], "higher_order_moment": [[414, "higher-order-moment"]], "sliding_window": [[403, "sliding-window"]], "poisson_nll_loss": [[435, "poisson-nll-loss"]], "l1_loss": [[433, "l1-loss"]], "as_strided": [[438, "as-strided"]], "svd_flip": [[426, "svd-flip"]], "smooth_l1_loss": [[436, "smooth-l1-loss"]], "max_unpool1d": [[397, "max-unpool1d"]], "broadcast_shapes": [[443, "broadcast-shapes"]], "kl_div": [[432, "kl-div"]], "fliplr": [[452, "fliplr"]], "rfftn": [[402, "rfftn"]], "multi_dot": [[422, "multi-dot"]], "tucker": [[430, "tucker"]], "rfft": [[401, "rfft"]], "atleast_2d": [[441, "atleast-2d"]], "choose": [[444, "choose"]], "fill_diagonal": [[450, "fill-diagonal"]], "diagflat": [[408, "diagflat"]], "dot": [[409, "dot"]], "fold": [[454, "fold"]], "flipud": [[453, "flipud"]], "dstack": [[448, "dstack"]], "eig": [[410, "eig"], [643, "eig"]], "reduce_window": [[400, "reduce-window"]], "soft_margin_loss": [[437, "soft-margin-loss"]], "solve_triangular": [[425, "solve-triangular"]], "kron": [[417, "kron"]], "mode_dot": [[421, "mode-dot"]], "associative_scan": [[439, "associative-scan"]], "stft": [[404, "stft"]], "interp": [[392, "interp"]], "eigvals": [[412, "eigvals"]], "ifft": [[390, "ifft"]], "dsplit": [[447, "dsplit"]], "ifftn": [[391, "ifftn"]], "cond": [[407, "cond"]], "conv": [[621, "conv"]], "lstm_update": [[633, "lstm-update"]], "lars_update": [[594, "lars-update"]], "scaled_dot_product_attention": [[637, "scaled-dot-product-attention"]], "eigh": [[644, "eigh"]], "Nest": [[613, "nest"], [363, "module-ivy.functional.ivy.experimental.nest"]], "Meta": [[612, "meta"], [362, "module-ivy.functional.ivy.experimental.meta"]], "stop_gradient": [[596, "stop-gradient"]], "eigvalsh": [[645, "eigvalsh"]], "conv3d": [[626, "conv3d"]], "execute_with_gradients": [[589, "execute-with-gradients"]], "conv2d_transpose": [[625, "conv2d-transpose"]], "grad": [[590, "grad"]], "depthwise_conv2d": [[630, "depthwise-conv2d"]], "jac": [[592, "jac"]], "vmap": [[586, "vmap"]], "lamb_update": [[593, "lamb-update"]], "value_and_grad": [[597, "value-and-grad"]], "conv2d": [[624, "conv2d"]], "roi_align": [[636, "roi-align"]], "conv_general_transpose": [[629, "conv-general-transpose"]], "inner": [[646, "inner"]], "matmul": [[649, "matmul"]], "diagonal": [[642, "diagonal"]], "cholesky": [[638, "cholesky"]], "lu_factor": [[648, "lu-factor"]], "linear": [[632, "linear"]], "cross": [[639, "cross"]], "det": [[640, "det"]], "conv1d_transpose": [[623, "conv1d-transpose"]], "optimizer_update": [[595, "optimizer-update"]], "diag": [[641, "diag"]], "Constants": [[599, "module-ivy.functional.ivy.constants"], [351, "module-ivy.functional.ivy.experimental.constants"]], "dropout": [[631, "dropout"]], "adam_step": [[587, "adam-step"]], "conv3d_transpose": [[627, "conv3d-transpose"]], "Control flow ops": [[600, "control-flow-ops"]], "value_is_nan": [[585, "value-is-nan"]], "adam_update": [[588, "adam-update"]], "conv1d": [[622, "conv1d"]], "nms": [[635, "nms"]], "conv_general_dilated": [[628, "conv-general-dilated"]], "inv": [[647, "inv"]], "multi_head_attention": [[634, "multi-head-attention"]], "gradient_descent_update": [[591, "gradient-descent-update"]], "elu": [[290, "elu"]], "square": [[282, "square"]], "mel_weight_matrix": [[307, "mel-weight-matrix"]], "not_equal": [[270, "not-equal"]], "maximum": [[265, "maximum"]], "tanh": [[285, "tanh"]], "logical_or": [[263, "logical-or"]], "prelu": [[294, "prelu"]], "random_tucker": [[314, "random-tucker"]], "random_cp": [[310, "random-cp"]], "minimum": [[266, "minimum"]], "hann_window": [[303, "hann-window"]], "random_parafac2": [[311, "random-parafac2"]], "allclose": [[320, "allclose"]], "nan_to_num": [[268, "nan-to-num"]], "negative": [[269, "negative"]], "sign": [[278, "sign"]], "amin": [[322, "amin"]], "subtract": [[283, "subtract"]], "sinh": [[280, "sinh"]], "trunc_divide": [[288, "trunc-divide"]], "logit": [[292, "logit"]], "trapz": [[286, "trapz"]], "selu": [[296, "selu"]], "thresholded_relu": [[299, "thresholded-relu"]], "kaiser_bessel_derived_window": [[305, "kaiser-bessel-derived-window"]], "sqrt": [[281, "sqrt"]], "hardtanh": [[291, "hardtanh"]], "trunc": [[287, "trunc"]], "logaddexp2": [[260, "logaddexp2"]], "trilu": [[316, "trilu"]], "binarizer": [[323, "binarizer"]], "pow": [[272, "pow"]], "unsorted_segment_min": [[317, "unsorted-segment-min"]], "conj": [[324, "conj"]], "reciprocal": [[275, "reciprocal"]], "sin": [[279, "sin"]], "real": [[274, "real"]], "tan": [[284, "tan"]], "remainder": [[276, "remainder"]], "logsigmoid": [[293, "logsigmoid"]], "tril_indices": [[315, "tril-indices"]], "random_tt": [[313, "random-tt"]], "celu": [[289, "celu"]], "logical_and": [[261, "logical-and"]], "random_tr": [[312, "random-tr"]], "relu6": [[295, "relu6"]], "amax": [[321, "amax"]], "ndindex": [[309, "ndindex"]], "eye_like": [[301, "eye-like"]], "hamming_window": [[302, "hamming-window"]], "vorbis_window": [[319, "vorbis-window"]], "unsorted_segment_sum": [[318, "unsorted-segment-sum"]], "tanhshrink": [[298, "tanhshrink"]], "indices": [[304, "indices"]], "ndenumerate": [[308, "ndenumerate"]], "logical_not": [[262, "logical-not"]], "blackman_window": [[300, "blackman-window"]], "positive": [[271, "positive"]], "logical_xor": [[264, "logical-xor"]], "multiply": [[267, "multiply"]], "kaiser_window": [[306, "kaiser-window"]], "rad2deg": [[273, "rad2deg"]], "round": [[277, "round"]], "silu": [[297, "silu"]], "dropout1d": [[381, "dropout1d"]], "digamma": [[328, "digamma"]], "embedding": [[384, "embedding"]], "Sparse array": [[369, "sparse-array"]], "fft": [[385, "fft"]], "signbit": [[343, "signbit"]], "gradient": [[334, "gradient"]], "dft": [[380, "dft"]], "fmax": [[332, "fmax"]], "xlogy": [[346, "xlogy"]], "idct": [[389, "idct"]], "get_interpolate_kernel": [[388, "get-interpolate-kernel"]], "dropout3d": [[383, "dropout3d"]], "lerp": [[338, "lerp"]], "adaptive_avg_pool2d": [[373, "adaptive-avg-pool2d"]], "frexp": [[333, "frexp"]], "hypot": [[335, "hypot"]], "ldexp": [[337, "ldexp"]], "reduce": [[348, "reduce"]], "count_nonzero": [[326, "count-nonzero"]], "float_power": [[331, "float-power"]], "sparsify_tensor": [[345, "sparsify-tensor"]], "bind_custom_gradient_function": [[349, "bind-custom-gradient-function"]], "area_interpolate": [[375, "area-interpolate"]], "generate_einsum_equation": [[387, "generate-einsum-equation"]], "isclose": [[336, "isclose"]], "diff": [[327, "diff"]], "modf": [[340, "modf"]], "lgamma": [[339, "lgamma"]], "adaptive_avg_pool1d": [[372, "adaptive-avg-pool1d"]], "avg_pool2d": [[377, "avg-pool2d"]], "copysign": [[325, "copysign"]], "avg_pool1d": [[376, "avg-pool1d"]], "erfc": [[329, "erfc"]], "avg_pool3d": [[378, "avg-pool3d"]], "sinc": [[344, "sinc"]], "fft2": [[386, "fft2"]], "zeta": [[347, "zeta"]], "dct": [[379, "dct"]], "fix": [[330, "fix"]], "dropout2d": [[382, "dropout2d"]], "nextafter": [[342, "nextafter"]], "nansum": [[341, "nansum"]], "adaptive_max_pool2d": [[374, "adaptive-max-pool2d"]], "num_gpus": [[199, "num-gpus"]], "num_ivy_arrays_on_dev": [[200, "num-ivy-arrays-on-dev"]], "isnan": [[250, "isnan"]], "total_mem_on_dev": [[209, "total-mem-on-dev"]], "logaddexp": [[259, "logaddexp"]], "log2": [[258, "log2"]], "divide": [[234, "divide"]], "split_func_call": [[207, "split-func-call"]], "greater": [[245, "greater"]], "get_all_ivy_arrays_on_dev": [[195, "get-all-ivy-arrays-on-dev"]], "greater_equal": [[246, "greater-equal"]], "gpu_is_available": [[196, "gpu-is-available"]], "atanh": [[223, "atanh"]], "cosh": [[232, "cosh"]], "add": [[217, "add"]], "exp2": [[238, "exp2"]], "less_equal": [[254, "less-equal"]], "expm1": [[239, "expm1"]], "isreal": [[251, "isreal"]], "fmin": [[242, "fmin"]], "erf": [[236, "erf"]], "print_all_ivy_arrays_on_dev": [[202, "print-all-ivy-arrays-on-dev"]], "atan": [[221, "atan"]], "bitwise_xor": [[229, "bitwise-xor"]], "num_cpu_cores": [[198, "num-cpu-cores"]], "isinf": [[249, "isinf"]], "log10": [[256, "log10"]], "log1p": [[257, "log1p"]], "asinh": [[220, "asinh"]], "deg2rad": [[233, "deg2rad"]], "floor_divide": [[241, "floor-divide"]], "bitwise_invert": [[225, "bitwise-invert"]], "less": [[253, "less"]], "abs": [[214, "abs"]], "gcd": [[244, "gcd"]], "log": [[255, "log"]], "bitwise_right_shift": [[228, "bitwise-right-shift"]], "handle_soft_device_variable": [[197, "handle-soft-device-variable"]], "bitwise_and": [[224, "bitwise-and"]], "fmod": [[243, "fmod"]], "exp": [[237, "exp"]], "set_soft_device_mode": [[204, "set-soft-device-mode"]], "floor": [[240, "floor"]], "lcm": [[252, "lcm"]], "set_split_factor": [[205, "set-split-factor"]], "to_device": [[208, "to-device"]], "imag": [[247, "imag"]], "angle": [[218, "angle"]], "tpu_is_available": [[210, "tpu-is-available"]], "used_mem_on_dev": [[213, "used-mem-on-dev"]], "split_factor": [[206, "split-factor"]], "acos": [[215, "acos"]], "percent_used_mem_on_dev": [[201, "percent-used-mem-on-dev"]], "asin": [[219, "asin"]], "bitwise_left_shift": [[226, "bitwise-left-shift"]], "isfinite": [[248, "isfinite"]], "equal": [[235, "equal"]], "cos": [[231, "cos"]], "bitwise_or": [[227, "bitwise-or"]], "set_default_device": [[203, "set-default-device"]], "unset_default_device": [[211, "unset-default-device"]], "atan2": [[222, "atan2"]], "ceil": [[230, "ceil"]], "acosh": [[216, "acosh"]], "unset_soft_device_mode": [[212, "unset-soft-device-mode"]], "function_unsupported_devices": [[194, "function-unsupported-devices"]], "triu": [[140, "triu"]], "default_dtype": [[153, "default-dtype"]], "can_cast": [[149, "can-cast"]], "is_float_dtype": [[167, "is-float-dtype"]], "promote_types": [[172, "promote-types"]], "valid_dtype": [[186, "valid-dtype"]], "unset_default_uint_dtype": [[185, "unset-default-uint-dtype"]], "function_unsupported_dtypes": [[161, "function-unsupported-dtypes"]], "as_native_dtype": [[145, "as-native-dtype"]], "zeros": [[142, "zeros"]], "set_default_int_dtype": [[178, "set-default-int-dtype"]], "dtype_bits": [[158, "dtype-bits"]], "is_complex_dtype": [[166, "is-complex-dtype"]], "set_default_uint_dtype": [[179, "set-default-uint-dtype"]], "linspace": [[131, "linspace"]], "promote_types_of_inputs": [[173, "promote-types-of-inputs"]], "closest_valid_dtype": [[151, "closest-valid-dtype"]], "set_default_dtype": [[176, "set-default-dtype"]], "dev_util": [[192, "dev-util"]], "ones": [[136, "ones"]], "is_native_dtype": [[170, "is-native-dtype"]], "default_float_dtype": [[154, "default-float-dtype"]], "function_supported_devices": [[193, "function-supported-devices"]], "tril": [[139, "tril"]], "default_complex_dtype": [[152, "default-complex-dtype"]], "ones_like": [[137, "ones-like"]], "finfo": [[159, "finfo"]], "is_bool_dtype": [[165, "is-bool-dtype"]], "iinfo": [[162, "iinfo"]], "default_device": [[190, "default-device"]], "is_hashable_dtype": [[168, "is-hashable-dtype"]], "broadcast_to": [[148, "broadcast-to"]], "astype": [[146, "astype"]], "full_like": [[130, "full-like"]], "meshgrid": [[133, "meshgrid"]], "as_ivy_dtype": [[144, "as-ivy-dtype"]], "unset_default_complex_dtype": [[181, "unset-default-complex-dtype"]], "dtype": [[157, "dtype"]], "triu_indices": [[141, "triu-indices"]], "infer_default_dtype": [[163, "infer-default-dtype"]], "is_int_dtype": [[169, "is-int-dtype"]], "as_native_dev": [[188, "as-native-dev"]], "check_float": [[150, "check-float"]], "zeros_like": [[143, "zeros-like"]], "native_array": [[134, "native-array"]], "is_uint_dtype": [[171, "is-uint-dtype"]], "set_default_float_dtype": [[177, "set-default-float-dtype"]], "unset_default_dtype": [[182, "unset-default-dtype"]], "invalid_dtype": [[164, "invalid-dtype"]], "set_default_complex_dtype": [[175, "set-default-complex-dtype"]], "unset_default_int_dtype": [[184, "unset-default-int-dtype"]], "default_uint_dtype": [[156, "default-uint-dtype"]], "as_ivy_dev": [[187, "as-ivy-dev"]], "clear_cached_mem_on_dev": [[189, "clear-cached-mem-on-dev"]], "type_promote_arrays": [[180, "type-promote-arrays"]], "unset_default_float_dtype": [[183, "unset-default-float-dtype"]], "to_dlpack": [[138, "to-dlpack"]], "dev": [[191, "dev"]], "logspace": [[132, "logspace"]], "default_int_dtype": [[155, "default-int-dtype"]], "result_type": [[174, "result-type"]], "one_hot": [[135, "one-hot"]], "function_supported_dtypes": [[160, "function-supported-dtypes"]], "broadcast_arrays": [[147, "broadcast-arrays"]]}, "indexentries": {"_arraywithactivations (class in ivy.data_classes.array.activations)": [[45, "ivy.data_classes.array.activations._ArrayWithActivations"]], "_abc_impl (ivy.data_classes.array.activations._arraywithactivations attribute)": [[45, "ivy.data_classes.array.activations._ArrayWithActivations._abc_impl"]], "gelu() (ivy.data_classes.array.activations._arraywithactivations method)": [[45, "ivy.data_classes.array.activations._ArrayWithActivations.gelu"]], "hardswish() (ivy.data_classes.array.activations._arraywithactivations method)": [[45, "ivy.data_classes.array.activations._ArrayWithActivations.hardswish"]], "ivy.data_classes.array.activations": [[45, "module-ivy.data_classes.array.activations"]], "leaky_relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[45, "ivy.data_classes.array.activations._ArrayWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[45, "ivy.data_classes.array.activations._ArrayWithActivations.log_softmax"]], "mish() (ivy.data_classes.array.activations._arraywithactivations method)": [[45, "ivy.data_classes.array.activations._ArrayWithActivations.mish"]], "module": [[45, "module-ivy.data_classes.array.activations"], [46, "module-ivy.data_classes.array.conversions"], [47, "module-ivy.data_classes.array.creation"], [48, "module-ivy.data_classes.array.data_type"], [49, "module-ivy.data_classes.array.device"], [50, "module-ivy.data_classes.array.elementwise"], [51, "module-ivy.data_classes.array.experimental"], [51, "module-ivy.data_classes.array.experimental.activations"], [51, "module-ivy.data_classes.array.experimental.conversions"], [51, "module-ivy.data_classes.array.experimental.creation"], [51, "module-ivy.data_classes.array.experimental.data_type"], [51, "module-ivy.data_classes.array.experimental.device"], [51, "module-ivy.data_classes.array.experimental.elementwise"], [51, "module-ivy.data_classes.array.experimental.general"], [51, "module-ivy.data_classes.array.experimental.gradients"], [51, "module-ivy.data_classes.array.experimental.image"], [51, "module-ivy.data_classes.array.experimental.layers"], [51, "module-ivy.data_classes.array.experimental.linear_algebra"], [51, "module-ivy.data_classes.array.experimental.losses"], [51, "module-ivy.data_classes.array.experimental.manipulation"], [51, "module-ivy.data_classes.array.experimental.norms"], [51, "module-ivy.data_classes.array.experimental.random"], [51, "module-ivy.data_classes.array.experimental.searching"], [51, "module-ivy.data_classes.array.experimental.set"], [51, "module-ivy.data_classes.array.experimental.sorting"], [51, "module-ivy.data_classes.array.experimental.statistical"], [51, "module-ivy.data_classes.array.experimental.utility"], [52, "module-ivy.data_classes.array.general"], [53, "module-ivy.data_classes.array.gradients"], [54, "module-ivy.data_classes.array.image"], [55, "module-ivy.data_classes.array.layers"], [56, "module-ivy.data_classes.array.linear_algebra"], [57, "module-ivy.data_classes.array.losses"], [58, "module-ivy.data_classes.array.manipulation"], [59, "module-ivy.data_classes.array.norms"], [60, "module-ivy.data_classes.array.random"], [61, "module-ivy.data_classes.array.searching"], [62, "module-ivy.data_classes.array.set"], [63, "module-ivy.data_classes.array.sorting"], [64, "module-ivy.data_classes.array.statistical"], [65, "module-ivy.data_classes.array.utility"], [66, "module-ivy.data_classes.array.wrapping"], [67, "module-ivy.data_classes.container.activations"], [68, "module-ivy.data_classes.container.base"], [69, "module-ivy.data_classes.container.conversions"], [70, "module-ivy.data_classes.container.creation"], [71, "module-ivy.data_classes.container.data_type"], [72, "module-ivy.data_classes.container.device"], [73, "module-ivy.data_classes.container.elementwise"], [74, "module-ivy.data_classes.container.experimental"], [74, "module-ivy.data_classes.container.experimental.activations"], [74, "module-ivy.data_classes.container.experimental.conversions"], [74, "module-ivy.data_classes.container.experimental.creation"], [74, "module-ivy.data_classes.container.experimental.data_type"], [74, "module-ivy.data_classes.container.experimental.device"], [74, "module-ivy.data_classes.container.experimental.elementwise"], [74, "module-ivy.data_classes.container.experimental.general"], [74, "module-ivy.data_classes.container.experimental.gradients"], [74, "module-ivy.data_classes.container.experimental.image"], [74, "module-ivy.data_classes.container.experimental.layers"], [74, "module-ivy.data_classes.container.experimental.linear_algebra"], [74, "module-ivy.data_classes.container.experimental.losses"], [74, "module-ivy.data_classes.container.experimental.manipulation"], [74, "module-ivy.data_classes.container.experimental.norms"], [74, "module-ivy.data_classes.container.experimental.random"], [74, "module-ivy.data_classes.container.experimental.searching"], [74, "module-ivy.data_classes.container.experimental.set"], [74, "module-ivy.data_classes.container.experimental.sorting"], [74, "module-ivy.data_classes.container.experimental.statistical"], [74, "module-ivy.data_classes.container.experimental.utility"], [75, "module-ivy.data_classes.container.general"], [76, "module-ivy.data_classes.container.gradients"], [77, "module-ivy.data_classes.container.image"], [78, "module-ivy.data_classes.container.layers"], [79, "module-ivy.data_classes.container.linear_algebra"], [80, "module-ivy.data_classes.container.losses"], [81, "module-ivy.data_classes.container.manipulation"], [82, "module-ivy.data_classes.container.norms"], [83, "module-ivy.data_classes.container.random"], [84, "module-ivy.data_classes.container.searching"], [85, "module-ivy.data_classes.container.set"], [86, "module-ivy.data_classes.container.sorting"], [87, "module-ivy.data_classes.container.statistical"], [88, "module-ivy.data_classes.container.utility"], [89, "module-ivy.data_classes.container.wrapping"], [90, "module-ivy.data_classes.factorized_tensor.base"], [91, "module-ivy.data_classes.factorized_tensor.cp_tensor"], [92, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"], [93, "module-ivy.data_classes.factorized_tensor.tr_tensor"], [94, "module-ivy.data_classes.factorized_tensor.tt_tensor"], [95, "module-ivy.data_classes.factorized_tensor.tucker_tensor"], [96, "module-ivy.data_classes.array.array"], [97, "module-ivy.data_classes.container.container"], [99, "module-ivy.data_classes.nested_array.nested_array"], [100, "module-ivy.data_classes.nested_array.base"], [101, "module-ivy.data_classes.nested_array.elementwise"], [350, "module-ivy.functional.ivy.experimental.activations"], [351, "module-ivy.functional.ivy.experimental.constants"], [352, "module-ivy.functional.ivy.experimental.creation"], [353, "module-ivy.functional.ivy.experimental.data_type"], [354, "module-ivy.functional.ivy.experimental.device"], [355, "module-ivy.functional.ivy.experimental.elementwise"], [356, "module-ivy.functional.ivy.experimental.general"], [357, "module-ivy.functional.ivy.experimental.gradients"], [358, "module-ivy.functional.ivy.experimental.layers"], [359, "module-ivy.functional.ivy.experimental.linear_algebra"], [360, "module-ivy.functional.ivy.experimental.losses"], [361, "module-ivy.functional.ivy.experimental.manipulation"], [362, "module-ivy.functional.ivy.experimental.meta"], [363, "module-ivy.functional.ivy.experimental.nest"], [364, "module-ivy.functional.ivy.experimental.norms"], [365, "module-ivy.functional.ivy.experimental.random"], [366, "module-ivy.functional.ivy.experimental.searching"], [367, "module-ivy.functional.ivy.experimental.set"], [368, "module-ivy.functional.ivy.experimental.sorting"], [369, "module-ivy.functional.ivy.experimental.sparse_array"], [370, "module-ivy.functional.ivy.experimental.statistical"], [371, "module-ivy.functional.ivy.experimental.utility"], [598, "module-ivy.functional.ivy.activations"], [599, "module-ivy.functional.ivy.constants"], [600, "module-ivy.functional.ivy.control_flow_ops"], [601, "module-ivy.functional.ivy.creation"], [602, "module-ivy.functional.ivy.data_type"], [603, "module-ivy.functional.ivy.device"], [604, "module-ivy.functional.ivy.elementwise"], [605, "module-ivy.functional.ivy.experimental"], [606, "module-ivy.functional.ivy.general"], [607, "module-ivy.functional.ivy.gradients"], [608, "module-ivy.functional.ivy.layers"], [609, "module-ivy.functional.ivy.linear_algebra"], [610, "module-ivy.functional.ivy.losses"], [611, "module-ivy.functional.ivy.manipulation"], [612, "module-ivy.functional.ivy.meta"], [613, "module-ivy.functional.ivy.nest"], [614, "module-ivy.functional.ivy.norms"], [615, "module-ivy.functional.ivy.random"], [616, "module-ivy.functional.ivy.searching"], [617, "module-ivy.functional.ivy.set"], [618, "module-ivy.functional.ivy.sorting"], [619, "module-ivy.functional.ivy.statistical"], [620, "module-ivy.functional.ivy.utility"], [743, "module-ivy_tests.test_ivy.helpers.assertions"], [744, "module-ivy_tests.test_ivy.helpers.available_frameworks"], [745, "module-ivy_tests.test_ivy.helpers.function_testing"], [746, "module-ivy_tests.test_ivy.helpers.globals"], [747, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"], [748, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"], [749, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"], [750, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"], [751, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"], [752, "module-ivy_tests.test_ivy.helpers.multiprocessing"], [753, "module-ivy_tests.test_ivy.helpers.pipeline_helper"], [754, "module-ivy_tests.test_ivy.helpers.structs"], [755, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"], [756, "module-ivy_tests.test_ivy.helpers.testing_helpers"], [760, "module-ivy.stateful.activations"], [761, "module-ivy.stateful.converters"], [762, "module-ivy.stateful.helpers"], [763, "module-ivy.stateful.initializers"], [764, "module-ivy.stateful.layers"], [765, "module-ivy.stateful.losses"], [766, "module-ivy.stateful.module"], [767, "module-ivy.stateful.norms"], [768, "module-ivy.stateful.optimizers"], [769, "module-ivy.stateful.sequential"], [770, "module-ivy.utils.assertions"], [771, "module-ivy.utils.backend"], [772, "module-ivy.utils.backend.ast_helpers"], [773, "module-ivy.utils.backend.handler"], [774, "module-ivy.utils.backend.sub_backend_handler"], [775, "module-ivy.utils.binaries"], [776, "module-ivy.utils.dynamic_import"], [777, "module-ivy.utils.einsum_parser"], [778, "module-ivy.utils.exceptions"], [779, "module-ivy.utils.inspection"], [780, "module-ivy.utils.logging"], [781, "module-ivy.utils.profiler"], [782, "module-ivy.utils.verbosity"]], "relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[45, "ivy.data_classes.array.activations._ArrayWithActivations.relu"]], "sigmoid() (ivy.data_classes.array.activations._arraywithactivations method)": [[45, "ivy.data_classes.array.activations._ArrayWithActivations.sigmoid"]], "softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[45, "ivy.data_classes.array.activations._ArrayWithActivations.softmax"]], "softplus() (ivy.data_classes.array.activations._arraywithactivations method)": [[45, "ivy.data_classes.array.activations._ArrayWithActivations.softplus"]], "_to_ivy() (in module ivy.data_classes.array.conversions)": [[46, "ivy.data_classes.array.conversions._to_ivy"]], "_to_native() (in module ivy.data_classes.array.conversions)": [[46, "ivy.data_classes.array.conversions._to_native"]], "args_to_ivy() (in module ivy.data_classes.array.conversions)": [[46, "ivy.data_classes.array.conversions.args_to_ivy"]], "args_to_native() (in module ivy.data_classes.array.conversions)": [[46, "ivy.data_classes.array.conversions.args_to_native"]], "ivy.data_classes.array.conversions": [[46, "module-ivy.data_classes.array.conversions"]], "to_ivy() (in module ivy.data_classes.array.conversions)": [[46, "ivy.data_classes.array.conversions.to_ivy"]], "to_native() (in module ivy.data_classes.array.conversions)": [[46, "ivy.data_classes.array.conversions.to_native"]], "_arraywithcreation (class in ivy.data_classes.array.creation)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation"]], "_abc_impl (ivy.data_classes.array.creation._arraywithcreation attribute)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation._abc_impl"]], "asarray() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.asarray"]], "copy_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.copy_array"]], "empty_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.from_dlpack"]], "full_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.full_like"]], "ivy.data_classes.array.creation": [[47, "module-ivy.data_classes.array.creation"]], "linspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.linspace"]], "logspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.logspace"]], "meshgrid() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.meshgrid"]], "native_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.native_array"]], "one_hot() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.one_hot"]], "ones_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.ones_like"]], "tril() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.tril"]], "triu() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.triu"]], "zeros_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.zeros_like"]], "_arraywithdatatypes (class in ivy.data_classes.array.data_type)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes"]], "_abc_impl (ivy.data_classes.array.data_type._arraywithdatatypes attribute)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes._abc_impl"]], "astype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.dtype"]], "finfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_bool_dtype"]], "is_float_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_uint_dtype"]], "ivy.data_classes.array.data_type": [[48, "module-ivy.data_classes.array.data_type"]], "result_type() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.result_type"]], "_arraywithdevice (class in ivy.data_classes.array.device)": [[49, "ivy.data_classes.array.device._ArrayWithDevice"]], "_abc_impl (ivy.data_classes.array.device._arraywithdevice attribute)": [[49, "ivy.data_classes.array.device._ArrayWithDevice._abc_impl"]], "dev() (ivy.data_classes.array.device._arraywithdevice method)": [[49, "ivy.data_classes.array.device._ArrayWithDevice.dev"]], "ivy.data_classes.array.device": [[49, "module-ivy.data_classes.array.device"]], "to_device() (ivy.data_classes.array.device._arraywithdevice method)": [[49, "ivy.data_classes.array.device._ArrayWithDevice.to_device"]], "_arraywithelementwise (class in ivy.data_classes.array.elementwise)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise"]], "_abc_impl (ivy.data_classes.array.elementwise._arraywithelementwise attribute)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise._abc_impl"]], "abs() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.abs"]], "acos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acos"]], "acosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acosh"]], "add() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.add"]], "angle() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.angle"]], "asin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asin"]], "asinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asinh"]], "atan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan"]], "atan2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan2"]], "atanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.ceil"]], "cos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cos"]], "cosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.deg2rad"]], "divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.divide"]], "equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.equal"]], "erf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.erf"]], "exp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp"]], "exp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp2"]], "expm1() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.expm1"]], "floor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor"]], "floor_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.fmin"]], "gcd() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.gcd"]], "greater() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater"]], "greater_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater_equal"]], "imag() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.imag"]], "isfinite() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isfinite"]], "isinf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isinf"]], "isnan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isnan"]], "isreal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isreal"]], "ivy.data_classes.array.elementwise": [[50, "module-ivy.data_classes.array.elementwise"]], "lcm() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.lcm"]], "less() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less"]], "less_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less_equal"]], "log() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log"]], "log10() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log10"]], "log1p() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log1p"]], "log2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log2"]], "logaddexp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.maximum"]], "minimum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.minimum"]], "multiply() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.negative"]], "not_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.not_equal"]], "positive() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.positive"]], "pow() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.pow"]], "rad2deg() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.rad2deg"]], "real() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.real"]], "reciprocal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.remainder"]], "round() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.round"]], "sign() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sign"]], "sin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sin"]], "sinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sinh"]], "sqrt() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sqrt"]], "square() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.square"]], "subtract() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.subtract"]], "tan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tan"]], "tanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tanh"]], "trapz() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trapz"]], "trunc() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc_divide"]], "_arraywithactivationsexperimental (class in ivy.data_classes.array.experimental.activations)": [[51, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental"]], "_arraywithconversionsexperimental (class in ivy.data_classes.array.experimental.conversions)": [[51, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental"]], "_arraywithcreationexperimental (class in ivy.data_classes.array.experimental.creation)": [[51, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental"]], "_arraywithdata_typeexperimental (class in ivy.data_classes.array.experimental.data_type)": [[51, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental"]], "_arraywithdeviceexperimental (class in ivy.data_classes.array.experimental.device)": [[51, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental"]], "_arraywithelementwiseexperimental (class in ivy.data_classes.array.experimental.elementwise)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental"]], "_arraywithgeneralexperimental (class in ivy.data_classes.array.experimental.general)": [[51, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental"]], "_arraywithgradientsexperimental (class in ivy.data_classes.array.experimental.gradients)": [[51, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental"]], "_arraywithimageexperimental (class in ivy.data_classes.array.experimental.image)": [[51, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental"]], "_arraywithlayersexperimental (class in ivy.data_classes.array.experimental.layers)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental"]], "_arraywithlinearalgebraexperimental (class in ivy.data_classes.array.experimental.linear_algebra)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental"]], "_arraywithlossesexperimental (class in ivy.data_classes.array.experimental.losses)": [[51, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental"]], "_arraywithmanipulationexperimental (class in ivy.data_classes.array.experimental.manipulation)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental"]], "_arraywithnormsexperimental (class in ivy.data_classes.array.experimental.norms)": [[51, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental"]], "_arraywithrandomexperimental (class in ivy.data_classes.array.experimental.random)": [[51, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental"]], "_arraywithsearchingexperimental (class in ivy.data_classes.array.experimental.searching)": [[51, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental"]], "_arraywithsetexperimental (class in ivy.data_classes.array.experimental.set)": [[51, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental"]], "_arraywithsortingexperimental (class in ivy.data_classes.array.experimental.sorting)": [[51, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental"]], "_arraywithstatisticalexperimental (class in ivy.data_classes.array.experimental.statistical)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental"]], "_arraywithutilityexperimental (class in ivy.data_classes.array.experimental.utility)": [[51, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental attribute)": [[51, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.conversions._arraywithconversionsexperimental attribute)": [[51, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental attribute)": [[51, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.data_type._arraywithdata_typeexperimental attribute)": [[51, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.device._arraywithdeviceexperimental attribute)": [[51, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental attribute)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental attribute)": [[51, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.gradients._arraywithgradientsexperimental attribute)": [[51, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.image._arraywithimageexperimental attribute)": [[51, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental attribute)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental attribute)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental attribute)": [[51, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental attribute)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental attribute)": [[51, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.random._arraywithrandomexperimental attribute)": [[51, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental attribute)": [[51, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.set._arraywithsetexperimental attribute)": [[51, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental attribute)": [[51, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental attribute)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental attribute)": [[51, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental._abc_impl"]], "adaptive_avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_max_pool2d"]], "adjoint() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.allclose"]], "amax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.amax"]], "amin() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.amin"]], "as_strided() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[51, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.batch_norm"]], "batched_outer() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.batched_outer"]], "bernoulli() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[51, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[51, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[51, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.blackman_window"]], "celu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[51, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.celu"]], "column_stack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.column_stack"]], "concat_from_sequence() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dct"]], "dft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[51, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[51, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.elu"]], "embedding() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.embedding"]], "erfc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.erfc"]], "expand() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[51, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft"]], "fft2() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft2"]], "fill_diagonal() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[51, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.gamma"]], "general_inner_product() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.general_inner_product"]], "gradient() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[51, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.group_norm"]], "hardtanh() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[51, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardtanh"]], "heaviside() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.heaviside"]], "higher_order_moment() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.higher_order_moment"]], "histogram() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[51, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[51, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.interpolate"]], "isclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.isclose"]], "ivy.data_classes.array.experimental": [[51, "module-ivy.data_classes.array.experimental"]], "ivy.data_classes.array.experimental.activations": [[51, "module-ivy.data_classes.array.experimental.activations"]], "ivy.data_classes.array.experimental.conversions": [[51, "module-ivy.data_classes.array.experimental.conversions"]], "ivy.data_classes.array.experimental.creation": [[51, "module-ivy.data_classes.array.experimental.creation"]], "ivy.data_classes.array.experimental.data_type": [[51, "module-ivy.data_classes.array.experimental.data_type"]], "ivy.data_classes.array.experimental.device": [[51, "module-ivy.data_classes.array.experimental.device"]], "ivy.data_classes.array.experimental.elementwise": [[51, "module-ivy.data_classes.array.experimental.elementwise"]], "ivy.data_classes.array.experimental.general": [[51, "module-ivy.data_classes.array.experimental.general"]], "ivy.data_classes.array.experimental.gradients": [[51, "module-ivy.data_classes.array.experimental.gradients"]], "ivy.data_classes.array.experimental.image": [[51, "module-ivy.data_classes.array.experimental.image"]], "ivy.data_classes.array.experimental.layers": [[51, "module-ivy.data_classes.array.experimental.layers"]], "ivy.data_classes.array.experimental.linear_algebra": [[51, "module-ivy.data_classes.array.experimental.linear_algebra"]], "ivy.data_classes.array.experimental.losses": [[51, "module-ivy.data_classes.array.experimental.losses"]], "ivy.data_classes.array.experimental.manipulation": [[51, "module-ivy.data_classes.array.experimental.manipulation"]], "ivy.data_classes.array.experimental.norms": [[51, "module-ivy.data_classes.array.experimental.norms"]], "ivy.data_classes.array.experimental.random": [[51, "module-ivy.data_classes.array.experimental.random"]], "ivy.data_classes.array.experimental.searching": [[51, "module-ivy.data_classes.array.experimental.searching"]], "ivy.data_classes.array.experimental.set": [[51, "module-ivy.data_classes.array.experimental.set"]], "ivy.data_classes.array.experimental.sorting": [[51, "module-ivy.data_classes.array.experimental.sorting"]], "ivy.data_classes.array.experimental.statistical": [[51, "module-ivy.data_classes.array.experimental.statistical"]], "ivy.data_classes.array.experimental.utility": [[51, "module-ivy.data_classes.array.experimental.utility"]], "kl_div() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[51, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.kl_div"]], "kron() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[51, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[51, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[51, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental method)": [[51, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lgamma"]], "log_poisson_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[51, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.log_poisson_loss"]], "logit() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[51, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logit"]], "logsigmoid() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[51, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[51, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool3d"]], "max_unpool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_unpool1d"]], "median() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental static method)": [[51, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmedian"]], "nanprod() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental method)": [[51, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[51, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.poisson"]], "poisson_nll_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[51, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.poisson_nll_loss"]], "prelu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[51, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.prelu"]], "put_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.put_along_axis"]], "quantile() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental method)": [[51, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental.reduce"]], "reduce_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.reduce_window"]], "relu6() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[51, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.relu6"]], "rfft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfft"]], "rfftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.rot90"]], "selu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[51, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.selu"]], "signbit() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[51, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.silu"]], "sinc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sinc"]], "sliding_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.sliding_window"]], "smooth_l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[51, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[51, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.soft_thresholding"]], "sparsify_tensor() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sparsify_tensor"]], "stft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.stft"]], "svd_flip() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.svd_flip"]], "take_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take_along_axis"]], "tanhshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[51, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.tanhshrink"]], "tensor_train() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tensor_train"]], "thresholded_relu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[51, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.top_k"]], "trilu() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[51, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.trilu"]], "trim_zeros() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.trim_zeros"]], "truncated_svd() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.truncated_svd"]], "tt_matrix_to_tensor() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tt_matrix_to_tensor"]], "tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tucker"]], "unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental method)": [[51, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental.unravel_index"]], "unsorted_segment_min() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[51, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[51, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_sum"]], "vsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.zeta"]], "_arraywithgeneral (class in ivy.data_classes.array.general)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral"]], "_abc_impl (ivy.data_classes.array.general._arraywithgeneral attribute)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral._abc_impl"]], "all_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.clip_vector_norm"]], "default() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.default"]], "einops_rearrange() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.gather"]], "gather_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_array"]], "is_ivy_container() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_container"]], "is_native_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.is_native_array"]], "isin() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.isin"]], "ivy.data_classes.array.general": [[52, "module-ivy.data_classes.array.general"]], "scatter_flat() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.stable_pow"]], "supports_inplace_updates() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.supports_inplace_updates"]], "to_file() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.to_file"]], "to_list() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.value_is_nan"]], "_arraywithgradients (class in ivy.data_classes.array.gradients)": [[53, "ivy.data_classes.array.gradients._ArrayWithGradients"]], "_abc_impl (ivy.data_classes.array.gradients._arraywithgradients attribute)": [[53, "ivy.data_classes.array.gradients._ArrayWithGradients._abc_impl"]], "adam_step() (ivy.data_classes.array.gradients._arraywithgradients method)": [[53, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_step"]], "adam_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[53, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[53, "ivy.data_classes.array.gradients._ArrayWithGradients.gradient_descent_update"]], "ivy.data_classes.array.gradients": [[53, "module-ivy.data_classes.array.gradients"]], "lamb_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[53, "ivy.data_classes.array.gradients._ArrayWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[53, "ivy.data_classes.array.gradients._ArrayWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[53, "ivy.data_classes.array.gradients._ArrayWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.array.gradients._arraywithgradients method)": [[53, "ivy.data_classes.array.gradients._ArrayWithGradients.stop_gradient"]], "_arraywithimage (class in ivy.data_classes.array.image)": [[54, "ivy.data_classes.array.image._ArrayWithImage"]], "_abc_impl (ivy.data_classes.array.image._arraywithimage attribute)": [[54, "ivy.data_classes.array.image._ArrayWithImage._abc_impl"]], "ivy.data_classes.array.image": [[54, "module-ivy.data_classes.array.image"]], "_arraywithlayers (class in ivy.data_classes.array.layers)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers"]], "_abc_impl (ivy.data_classes.array.layers._arraywithlayers attribute)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers._abc_impl"]], "conv1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.dropout"]], "dropout1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.dropout3d"]], "ivy.data_classes.array.layers": [[55, "module-ivy.data_classes.array.layers"]], "linear() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.linear"]], "lstm_update() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.multi_head_attention"]], "scaled_dot_product_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.scaled_dot_product_attention"]], "_arraywithlinearalgebra (class in ivy.data_classes.array.linear_algebra)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra attribute)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra._abc_impl"]], "cholesky() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cross"]], "det() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.det"]], "diag() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diagonal"]], "eig() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eig"]], "eigh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inv"]], "ivy.data_classes.array.linear_algebra": [[56, "module-ivy.data_classes.array.linear_algebra"]], "matmul() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_arraywithlosses (class in ivy.data_classes.array.losses)": [[57, "ivy.data_classes.array.losses._ArrayWithLosses"]], "_abc_impl (ivy.data_classes.array.losses._arraywithlosses attribute)": [[57, "ivy.data_classes.array.losses._ArrayWithLosses._abc_impl"]], "binary_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[57, "ivy.data_classes.array.losses._ArrayWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[57, "ivy.data_classes.array.losses._ArrayWithLosses.cross_entropy"]], "ivy.data_classes.array.losses": [[57, "module-ivy.data_classes.array.losses"]], "sparse_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[57, "ivy.data_classes.array.losses._ArrayWithLosses.sparse_cross_entropy"]], "_arraywithmanipulation (class in ivy.data_classes.array.manipulation)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation"]], "_abc_impl (ivy.data_classes.array.manipulation._arraywithmanipulation attribute)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation._abc_impl"]], "clip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.clip"]], "concat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.concat"]], "constant_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.expand_dims"]], "flip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.flip"]], "ivy.data_classes.array.manipulation": [[58, "module-ivy.data_classes.array.manipulation"]], "permute_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.repeat"]], "reshape() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.reshape"]], "roll() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.roll"]], "split() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.split"]], "squeeze() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.squeeze"]], "stack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.stack"]], "swapaxes() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.swapaxes"]], "tile() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.tile"]], "unstack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.unstack"]], "view() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.view"]], "zero_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.zero_pad"]], "_arraywithnorms (class in ivy.data_classes.array.norms)": [[59, "ivy.data_classes.array.norms._ArrayWithNorms"]], "_abc_impl (ivy.data_classes.array.norms._arraywithnorms attribute)": [[59, "ivy.data_classes.array.norms._ArrayWithNorms._abc_impl"]], "ivy.data_classes.array.norms": [[59, "module-ivy.data_classes.array.norms"]], "layer_norm() (ivy.data_classes.array.norms._arraywithnorms method)": [[59, "ivy.data_classes.array.norms._ArrayWithNorms.layer_norm"]], "_arraywithrandom (class in ivy.data_classes.array.random)": [[60, "ivy.data_classes.array.random._ArrayWithRandom"]], "_abc_impl (ivy.data_classes.array.random._arraywithrandom attribute)": [[60, "ivy.data_classes.array.random._ArrayWithRandom._abc_impl"]], "ivy.data_classes.array.random": [[60, "module-ivy.data_classes.array.random"]], "multinomial() (ivy.data_classes.array.random._arraywithrandom method)": [[60, "ivy.data_classes.array.random._ArrayWithRandom.multinomial"]], "randint() (ivy.data_classes.array.random._arraywithrandom method)": [[60, "ivy.data_classes.array.random._ArrayWithRandom.randint"]], "random_normal() (ivy.data_classes.array.random._arraywithrandom method)": [[60, "ivy.data_classes.array.random._ArrayWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.array.random._arraywithrandom method)": [[60, "ivy.data_classes.array.random._ArrayWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.array.random._arraywithrandom method)": [[60, "ivy.data_classes.array.random._ArrayWithRandom.shuffle"]], "_arraywithsearching (class in ivy.data_classes.array.searching)": [[61, "ivy.data_classes.array.searching._ArrayWithSearching"]], "_abc_impl (ivy.data_classes.array.searching._arraywithsearching attribute)": [[61, "ivy.data_classes.array.searching._ArrayWithSearching._abc_impl"]], "argmax() (ivy.data_classes.array.searching._arraywithsearching method)": [[61, "ivy.data_classes.array.searching._ArrayWithSearching.argmax"]], "argmin() (ivy.data_classes.array.searching._arraywithsearching method)": [[61, "ivy.data_classes.array.searching._ArrayWithSearching.argmin"]], "argwhere() (ivy.data_classes.array.searching._arraywithsearching method)": [[61, "ivy.data_classes.array.searching._ArrayWithSearching.argwhere"]], "ivy.data_classes.array.searching": [[61, "module-ivy.data_classes.array.searching"]], "nonzero() (ivy.data_classes.array.searching._arraywithsearching method)": [[61, "ivy.data_classes.array.searching._ArrayWithSearching.nonzero"]], "where() (ivy.data_classes.array.searching._arraywithsearching method)": [[61, "ivy.data_classes.array.searching._ArrayWithSearching.where"]], "_arraywithset (class in ivy.data_classes.array.set)": [[62, "ivy.data_classes.array.set._ArrayWithSet"]], "_abc_impl (ivy.data_classes.array.set._arraywithset attribute)": [[62, "ivy.data_classes.array.set._ArrayWithSet._abc_impl"]], "ivy.data_classes.array.set": [[62, "module-ivy.data_classes.array.set"]], "unique_all() (ivy.data_classes.array.set._arraywithset method)": [[62, "ivy.data_classes.array.set._ArrayWithSet.unique_all"]], "unique_counts() (ivy.data_classes.array.set._arraywithset method)": [[62, "ivy.data_classes.array.set._ArrayWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.array.set._arraywithset method)": [[62, "ivy.data_classes.array.set._ArrayWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.array.set._arraywithset method)": [[62, "ivy.data_classes.array.set._ArrayWithSet.unique_values"]], "_arraywithsorting (class in ivy.data_classes.array.sorting)": [[63, "ivy.data_classes.array.sorting._ArrayWithSorting"]], "_abc_impl (ivy.data_classes.array.sorting._arraywithsorting attribute)": [[63, "ivy.data_classes.array.sorting._ArrayWithSorting._abc_impl"]], "argsort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[63, "ivy.data_classes.array.sorting._ArrayWithSorting.argsort"]], "ivy.data_classes.array.sorting": [[63, "module-ivy.data_classes.array.sorting"]], "msort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[63, "ivy.data_classes.array.sorting._ArrayWithSorting.msort"]], "searchsorted() (ivy.data_classes.array.sorting._arraywithsorting method)": [[63, "ivy.data_classes.array.sorting._ArrayWithSorting.searchsorted"]], "sort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[63, "ivy.data_classes.array.sorting._ArrayWithSorting.sort"]], "_arraywithstatistical (class in ivy.data_classes.array.statistical)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical"]], "_abc_impl (ivy.data_classes.array.statistical._arraywithstatistical attribute)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical._abc_impl"]], "cumprod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumsum"]], "einsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical.einsum"]], "ivy.data_classes.array.statistical": [[64, "module-ivy.data_classes.array.statistical"]], "max() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical.max"]], "mean() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical.mean"]], "min() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical.min"]], "prod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical.prod"]], "std() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical.std"]], "sum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical.sum"]], "var() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical.var"]], "_arraywithutility (class in ivy.data_classes.array.utility)": [[65, "ivy.data_classes.array.utility._ArrayWithUtility"]], "_abc_impl (ivy.data_classes.array.utility._arraywithutility attribute)": [[65, "ivy.data_classes.array.utility._ArrayWithUtility._abc_impl"]], "all() (ivy.data_classes.array.utility._arraywithutility method)": [[65, "ivy.data_classes.array.utility._ArrayWithUtility.all"]], "any() (ivy.data_classes.array.utility._arraywithutility method)": [[65, "ivy.data_classes.array.utility._ArrayWithUtility.any"]], "ivy.data_classes.array.utility": [[65, "module-ivy.data_classes.array.utility"]], "_wrap_function() (in module ivy.data_classes.array.wrapping)": [[66, "ivy.data_classes.array.wrapping._wrap_function"]], "add_ivy_array_instance_methods() (in module ivy.data_classes.array.wrapping)": [[66, "ivy.data_classes.array.wrapping.add_ivy_array_instance_methods"]], "ivy.data_classes.array.wrapping": [[66, "module-ivy.data_classes.array.wrapping"]], "_containerwithactivations (class in ivy.data_classes.container.activations)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations"]], "_abc_impl (ivy.data_classes.container.activations._containerwithactivations attribute)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations._abc_impl"]], "_static_gelu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations._static_gelu"]], "_static_hardswish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations._static_hardswish"]], "_static_leaky_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations._static_leaky_relu"]], "_static_log_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations._static_log_softmax"]], "_static_mish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations._static_mish"]], "_static_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations._static_relu"]], "_static_sigmoid() (ivy.data_classes.container.activations._containerwithactivations static method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations._static_sigmoid"]], "_static_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations._static_softmax"]], "_static_softplus() (ivy.data_classes.container.activations._containerwithactivations static method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations._static_softplus"]], "gelu() (ivy.data_classes.container.activations._containerwithactivations method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations.gelu"]], "hardswish() (ivy.data_classes.container.activations._containerwithactivations method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations.hardswish"]], "ivy.data_classes.container.activations": [[67, "module-ivy.data_classes.container.activations"]], "leaky_relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations.log_softmax"]], "mish() (ivy.data_classes.container.activations._containerwithactivations method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations.mish"]], "relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations.relu"]], "sigmoid() (ivy.data_classes.container.activations._containerwithactivations method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations.sigmoid"]], "softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations.softmax"]], "softplus() (ivy.data_classes.container.activations._containerwithactivations method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations.softplus"]], "containerbase (class in ivy.data_classes.container.base)": [[68, "ivy.data_classes.container.base.ContainerBase"]], "__getitem__() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.__getitem__"]], "__init__() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.__init__"]], "__setitem__() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.__setitem__"]], "_abc_impl (ivy.data_classes.container.base.containerbase attribute)": [[68, "ivy.data_classes.container.base.ContainerBase._abc_impl"]], "_cont_at_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_dict"]], "_cont_at_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_seq"]], "_cont_call_static_method_with_flexible_args() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_call_static_method_with_flexible_args"]], "_cont_concat_unify() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_concat_unify"]], "_cont_get_dev() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_get_dev"]], "_cont_get_dtype() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_get_dtype"]], "_cont_get_shape() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_get_shape"]], "_cont_get_shapes() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_get_shapes"]], "_cont_ivy (ivy.data_classes.container.base.containerbase property)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_ivy"]], "_cont_mean_unify() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_mean_unify"]], "_cont_prune_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_dict"]], "_cont_prune_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_seq"]], "_cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_slice_keys"]], "_cont_sum_unify() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_sum_unify"]], "_get_queue_item() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase._get_queue_item"]], "_is_jsonable() (in module ivy.data_classes.container.base)": [[68, "ivy.data_classes.container.base._is_jsonable"]], "_repr() (in module ivy.data_classes.container.base)": [[68, "ivy.data_classes.container.base._repr"]], "cont_all_false() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_all_false"]], "cont_all_key_chains() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_all_key_chains"]], "cont_all_true() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_all_true"]], "cont_as_bools() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_as_bools"]], "cont_assert_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_container"]], "cont_assert_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_structure"]], "cont_assert_identical() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical"]], "cont_assert_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical_structure"]], "cont_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chain"]], "cont_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chains"]], "cont_at_keys() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_at_keys"]], "cont_combine() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_combine"]], "cont_common_key_chains() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_common_key_chains"]], "cont_config (ivy.data_classes.container.base.containerbase property)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_config"]], "cont_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_container"]], "cont_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_structure"]], "cont_copy() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_copy"]], "cont_create_if_absent() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_create_if_absent"]], "cont_cutoff_at_depth() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_depth"]], "cont_cutoff_at_height() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_height"]], "cont_deep_copy() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_deep_copy"]], "cont_dev (ivy.data_classes.container.base.containerbase property)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_dev"]], "cont_dev_str (ivy.data_classes.container.base.containerbase property)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_dev_str"]], "cont_diff() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_diff"]], "cont_dtype (ivy.data_classes.container.base.containerbase property)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_dtype"]], "cont_duplicate_array_keychains() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_duplicate_array_keychains"]], "cont_find_sub_container() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_container"]], "cont_find_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_structure"]], "cont_flatten_key_chain() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chain"]], "cont_flatten_key_chains() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chains"]], "cont_format_key_chains() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_format_key_chains"]], "cont_from_disk_as_hdf5() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_hdf5"]], "cont_from_disk_as_json() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_json"]], "cont_from_disk_as_pickled() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_pickled"]], "cont_from_flat_list() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_from_flat_list"]], "cont_handle_inplace() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_handle_inplace"]], "cont_has_key() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_has_key"]], "cont_has_key_chain() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_has_key_chain"]], "cont_identical() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_identical"]], "cont_identical_array_shapes() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_identical_array_shapes"]], "cont_identical_configs() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_identical_configs"]], "cont_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_identical_structure"]], "cont_if_exists() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_if_exists"]], "cont_inplace_update() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_inplace_update"]], "cont_ivy (ivy.data_classes.container.base.containerbase property)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_ivy"]], "cont_key_chains_containing() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_key_chains_containing"]], "cont_list_join() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_list_join"]], "cont_list_stack() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_list_stack"]], "cont_load() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_load"]], "cont_map() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_map"]], "cont_map_sub_conts() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_map_sub_conts"]], "cont_max_depth (ivy.data_classes.container.base.containerbase property)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_max_depth"]], "cont_multi_map() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_multi_map"]], "cont_multi_map_in_function() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_multi_map_in_function"]], "cont_num_arrays() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_num_arrays"]], "cont_overwrite_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chain"]], "cont_overwrite_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chains"]], "cont_prune_empty() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_prune_empty"]], "cont_prune_key_chain() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chain"]], "cont_prune_key_chains() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chains"]], "cont_prune_key_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_from_key_chains"]], "cont_prune_keys() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys"]], "cont_prune_keys_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys_from_key_chains"]], "cont_reduce() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_reduce"]], "cont_remove_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_remove_key_length_limit"]], "cont_remove_print_limit() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_remove_print_limit"]], "cont_reshape_like() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_reshape_like"]], "cont_restructure() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_restructure"]], "cont_restructure_key_chains() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_restructure_key_chains"]], "cont_save() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_save"]], "cont_set_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chain"]], "cont_set_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chains"]], "cont_set_at_keys() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_set_at_keys"]], "cont_shape (ivy.data_classes.container.base.containerbase property)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_shape"]], "cont_shapes (ivy.data_classes.container.base.containerbase property)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_shapes"]], "cont_show() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_show"]], "cont_show_sub_container() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_show_sub_container"]], "cont_size_ordered_arrays() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_size_ordered_arrays"]], "cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_slice_keys"]], "cont_slice_via_key() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_slice_via_key"]], "cont_sort_by_key() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_sort_by_key"]], "cont_structural_diff() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_structural_diff"]], "cont_to_dict() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_to_dict"]], "cont_to_disk_as_hdf5() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_hdf5"]], "cont_to_disk_as_json() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_json"]], "cont_to_disk_as_pickled() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_pickled"]], "cont_to_flat_list() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_to_flat_list"]], "cont_to_iterator() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator"]], "cont_to_iterator_keys() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_keys"]], "cont_to_iterator_values() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_values"]], "cont_to_jsonable() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_to_jsonable"]], "cont_to_nested_list() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_to_nested_list"]], "cont_to_raw() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_to_raw"]], "cont_trim_key() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_trim_key"]], "cont_try_kc() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_try_kc"]], "cont_unify() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_unify"]], "cont_unstack_conts() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_unstack_conts"]], "cont_update_config() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_update_config"]], "cont_with_default_key_color() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_with_default_key_color"]], "cont_with_entries_as_lists() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_with_entries_as_lists"]], "cont_with_ivy_backend() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_with_ivy_backend"]], "cont_with_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_with_key_length_limit"]], "cont_with_print_indent() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_with_print_indent"]], "cont_with_print_limit() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_with_print_limit"]], "cont_with_print_line_spacing() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_with_print_line_spacing"]], "dynamic_backend (ivy.data_classes.container.base.containerbase property)": [[68, "ivy.data_classes.container.base.ContainerBase.dynamic_backend"]], "h5_file_size() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.h5_file_size"]], "ivy.data_classes.container.base": [[68, "module-ivy.data_classes.container.base"]], "shuffle_h5_file() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.shuffle_h5_file"]], "split_conts() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.split_conts"]], "_containerwithconversions (class in ivy.data_classes.container.conversions)": [[69, "ivy.data_classes.container.conversions._ContainerWithConversions"]], "_abc_impl (ivy.data_classes.container.conversions._containerwithconversions attribute)": [[69, "ivy.data_classes.container.conversions._ContainerWithConversions._abc_impl"]], "_static_to_ivy() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[69, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_ivy"]], "_static_to_native() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[69, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_native"]], "ivy.data_classes.container.conversions": [[69, "module-ivy.data_classes.container.conversions"]], "to_ivy() (ivy.data_classes.container.conversions._containerwithconversions method)": [[69, "ivy.data_classes.container.conversions._ContainerWithConversions.to_ivy"]], "to_native() (ivy.data_classes.container.conversions._containerwithconversions method)": [[69, "ivy.data_classes.container.conversions._ContainerWithConversions.to_native"]], "_containerwithcreation (class in ivy.data_classes.container.creation)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation"]], "_abc_impl (ivy.data_classes.container.creation._containerwithcreation attribute)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._abc_impl"]], "_static_arange() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_arange"]], "_static_asarray() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_asarray"]], "_static_copy_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_copy_array"]], "_static_empty() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty"]], "_static_empty_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty_like"]], "_static_eye() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_eye"]], "_static_from_dlpack() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_from_dlpack"]], "_static_full() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_full"]], "_static_full_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_full_like"]], "_static_linspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_linspace"]], "_static_logspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_logspace"]], "_static_meshgrid() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_meshgrid"]], "_static_native_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_native_array"]], "_static_one_hot() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_one_hot"]], "_static_ones() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones"]], "_static_ones_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones_like"]], "_static_tril() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_tril"]], "_static_triu() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_triu"]], "_static_zeros() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros"]], "_static_zeros_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros_like"]], "asarray() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.asarray"]], "copy_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.copy_array"]], "empty_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.from_dlpack"]], "frombuffer() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.frombuffer"]], "full_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.full_like"]], "ivy.data_classes.container.creation": [[70, "module-ivy.data_classes.container.creation"]], "linspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.linspace"]], "logspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.logspace"]], "meshgrid() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.meshgrid"]], "native_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.native_array"]], "one_hot() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.one_hot"]], "ones_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.ones_like"]], "static_frombuffer() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.static_frombuffer"]], "static_triu_indices() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.static_triu_indices"]], "tril() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.tril"]], "triu() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.triu"]], "triu_indices() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.triu_indices"]], "zeros_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.zeros_like"]], "_containerwithdatatypes (class in ivy.data_classes.container.data_type)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes"]], "_abc_impl (ivy.data_classes.container.data_type._containerwithdatatypes attribute)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._abc_impl"]], "_static_astype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_astype"]], "_static_broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_arrays"]], "_static_broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_to"]], "_static_can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_can_cast"]], "_static_default_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_complex_dtype"]], "_static_default_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_float_dtype"]], "_static_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_dtype"]], "_static_finfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_finfo"]], "_static_function_supported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_supported_dtypes"]], "_static_function_unsupported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_unsupported_dtypes"]], "_static_iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_iinfo"]], "_static_is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_bool_dtype"]], "_static_is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_complex_dtype"]], "_static_is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_float_dtype"]], "_static_is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_int_dtype"]], "_static_is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_uint_dtype"]], "_static_result_type() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_result_type"]], "astype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.dtype"]], "finfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_bool_dtype"]], "is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_complex_dtype"]], "is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_uint_dtype"]], "ivy.data_classes.container.data_type": [[71, "module-ivy.data_classes.container.data_type"]], "result_type() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.result_type"]], "_containerwithdevice (class in ivy.data_classes.container.device)": [[72, "ivy.data_classes.container.device._ContainerWithDevice"]], "_abc_impl (ivy.data_classes.container.device._containerwithdevice attribute)": [[72, "ivy.data_classes.container.device._ContainerWithDevice._abc_impl"]], "_static_dev() (ivy.data_classes.container.device._containerwithdevice static method)": [[72, "ivy.data_classes.container.device._ContainerWithDevice._static_dev"]], "_static_to_device() (ivy.data_classes.container.device._containerwithdevice static method)": [[72, "ivy.data_classes.container.device._ContainerWithDevice._static_to_device"]], "dev() (ivy.data_classes.container.device._containerwithdevice method)": [[72, "ivy.data_classes.container.device._ContainerWithDevice.dev"]], "ivy.data_classes.container.device": [[72, "module-ivy.data_classes.container.device"]], "to_device() (ivy.data_classes.container.device._containerwithdevice method)": [[72, "ivy.data_classes.container.device._ContainerWithDevice.to_device"]], "_containerwithelementwise (class in ivy.data_classes.container.elementwise)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise"]], "_abc_impl (ivy.data_classes.container.elementwise._containerwithelementwise attribute)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._abc_impl"]], "_static_abs() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_abs"]], "_static_acos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acos"]], "_static_acosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acosh"]], "_static_add() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_add"]], "_static_asin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asin"]], "_static_asinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asinh"]], "_static_atan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan"]], "_static_atan2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan2"]], "_static_atanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atanh"]], "_static_bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_and"]], "_static_bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_invert"]], "_static_bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_left_shift"]], "_static_bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_or"]], "_static_bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_right_shift"]], "_static_bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_xor"]], "_static_ceil() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_ceil"]], "_static_cos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cos"]], "_static_cosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cosh"]], "_static_deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_deg2rad"]], "_static_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_divide"]], "_static_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_equal"]], "_static_erf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_erf"]], "_static_exp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_exp"]], "_static_expm1() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_expm1"]], "_static_floor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor"]], "_static_floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor_divide"]], "_static_greater() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater"]], "_static_greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater_equal"]], "_static_isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isfinite"]], "_static_isinf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isinf"]], "_static_isnan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isnan"]], "_static_isreal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isreal"]], "_static_lcm() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_lcm"]], "_static_less() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less"]], "_static_less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less_equal"]], "_static_log() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log"]], "_static_log10() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log10"]], "_static_log1p() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log1p"]], "_static_log2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log2"]], "_static_logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logaddexp"]], "_static_logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_and"]], "_static_logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_not"]], "_static_logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_or"]], "_static_logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_xor"]], "_static_maximum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_maximum"]], "_static_minimum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_minimum"]], "_static_multiply() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_multiply"]], "_static_negative() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_negative"]], "_static_not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_not_equal"]], "_static_positive() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_positive"]], "_static_pow() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_pow"]], "_static_rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_rad2deg"]], "_static_reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_reciprocal"]], "_static_remainder() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_remainder"]], "_static_round() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_round"]], "_static_sign() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sign"]], "_static_sin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sin"]], "_static_sinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sinh"]], "_static_sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sqrt"]], "_static_square() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_square"]], "_static_subtract() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_subtract"]], "_static_tan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tan"]], "_static_tanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tanh"]], "_static_trapz() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trapz"]], "_static_trunc() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc"]], "_static_trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc_divide"]], "abs() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.abs"]], "acos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acos"]], "acosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acosh"]], "add() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.add"]], "angle() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.angle"]], "asin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asin"]], "asinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asinh"]], "atan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan"]], "atan2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan2"]], "atanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.ceil"]], "cos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cos"]], "cosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.deg2rad"]], "divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.divide"]], "equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.equal"]], "erf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.erf"]], "exp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp"]], "exp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp2"]], "expm1() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.expm1"]], "floor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor"]], "floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.fmin"]], "gcd() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.gcd"]], "greater() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater"]], "greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater_equal"]], "imag() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.imag"]], "isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isfinite"]], "isinf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isinf"]], "isnan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isnan"]], "isreal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isreal"]], "ivy.data_classes.container.elementwise": [[73, "module-ivy.data_classes.container.elementwise"]], "lcm() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.lcm"]], "less() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less"]], "less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less_equal"]], "log() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log"]], "log10() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log10"]], "log1p() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log1p"]], "log2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log2"]], "logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.maximum"]], "minimum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.minimum"]], "multiply() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.negative"]], "not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.not_equal"]], "positive() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.positive"]], "pow() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.pow"]], "rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.rad2deg"]], "real() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.real"]], "reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.remainder"]], "round() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.round"]], "sign() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sign"]], "sin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sin"]], "sinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sinh"]], "sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sqrt"]], "square() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.square"]], "static_angle() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_angle"]], "static_exp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_exp2"]], "static_fmin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_fmin"]], "static_gcd() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_gcd"]], "static_imag() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_imag"]], "static_logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_logaddexp2"]], "static_nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_nan_to_num"]], "static_real() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_real"]], "subtract() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.subtract"]], "tan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tan"]], "tanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tanh"]], "trapz() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trapz"]], "trunc() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc_divide"]], "_containerwithactivationexperimental (class in ivy.data_classes.container.experimental.activations)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental"]], "_containerwithconversionexperimental (class in ivy.data_classes.container.experimental.conversions)": [[74, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental"]], "_containerwithcreationexperimental (class in ivy.data_classes.container.experimental.creation)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental"]], "_containerwithdata_typeexperimental (class in ivy.data_classes.container.experimental.data_type)": [[74, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental"]], "_containerwithdeviceexperimental (class in ivy.data_classes.container.experimental.device)": [[74, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental"]], "_containerwithelementwiseexperimental (class in ivy.data_classes.container.experimental.elementwise)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental"]], "_containerwithgeneralexperimental (class in ivy.data_classes.container.experimental.general)": [[74, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental"]], "_containerwithgradientsexperimental (class in ivy.data_classes.container.experimental.gradients)": [[74, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental"]], "_containerwithimageexperimental (class in ivy.data_classes.container.experimental.image)": [[74, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental"]], "_containerwithlayersexperimental (class in ivy.data_classes.container.experimental.layers)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental"]], "_containerwithlinearalgebraexperimental (class in ivy.data_classes.container.experimental.linear_algebra)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental"]], "_containerwithlossesexperimental (class in ivy.data_classes.container.experimental.losses)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental"]], "_containerwithmanipulationexperimental (class in ivy.data_classes.container.experimental.manipulation)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental"]], "_containerwithnormsexperimental (class in ivy.data_classes.container.experimental.norms)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental"]], "_containerwithrandomexperimental (class in ivy.data_classes.container.experimental.random)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental"]], "_containerwithsearchingexperimental (class in ivy.data_classes.container.experimental.searching)": [[74, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental"]], "_containerwithsetexperimental (class in ivy.data_classes.container.experimental.set)": [[74, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental"]], "_containerwithsortingexperimental (class in ivy.data_classes.container.experimental.sorting)": [[74, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental"]], "_containerwithstatisticalexperimental (class in ivy.data_classes.container.experimental.statistical)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental"]], "_containerwithutilityexperimental (class in ivy.data_classes.container.experimental.utility)": [[74, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental attribute)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.conversions._containerwithconversionexperimental attribute)": [[74, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental attribute)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.data_type._containerwithdata_typeexperimental attribute)": [[74, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.device._containerwithdeviceexperimental attribute)": [[74, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental attribute)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental attribute)": [[74, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.gradients._containerwithgradientsexperimental attribute)": [[74, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.image._containerwithimageexperimental attribute)": [[74, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental attribute)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental attribute)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental attribute)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental attribute)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental attribute)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.random._containerwithrandomexperimental attribute)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental attribute)": [[74, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.set._containerwithsetexperimental attribute)": [[74, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental attribute)": [[74, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental attribute)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental attribute)": [[74, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental._abc_impl"]], "_static_celu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_celu"]], "_static_cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummax"]], "_static_cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummin"]], "_static_elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_elu"]], "_static_fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_fft"]], "_static_fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_fill_diagonal"]], "_static_hardtanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardtanh"]], "_static_huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_huber_loss"]], "_static_kl_div() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_kl_div"]], "_static_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_l1_loss"]], "_static_log_poisson_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_log_poisson_loss"]], "_static_poisson_nll_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_poisson_nll_loss"]], "_static_put_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_put_along_axis"]], "_static_reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental static method)": [[74, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._static_reduce"]], "_static_silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_silu"]], "_static_sliding_window() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_sliding_window"]], "_static_smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_smooth_l1_loss"]], "_static_soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_soft_margin_loss"]], "_static_tanhshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_tanhshrink"]], "_static_trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._static_trilu"]], "_static_trim_zeros() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_trim_zeros"]], "_static_unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_unique_consecutive"]], "adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_max_pool2d"]], "adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.allclose"]], "amax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.amax"]], "amin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.amin"]], "as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.batch_norm"]], "batched_outer() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.batched_outer"]], "bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.blackman_window"]], "broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.broadcast_shapes"]], "celu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.celu"]], "column_stack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.column_stack"]], "concat_from_sequence() (in module ivy.data_classes.container.experimental.manipulation)": [[74, "ivy.data_classes.container.experimental.manipulation.concat_from_sequence"]], "concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dct"]], "dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.elu"]], "embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.embedding"]], "erfc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.erfc"]], "expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.fft"]], "fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.gamma"]], "gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.group_norm"]], "hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hamming_window"]], "hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hann_window"]], "hardtanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardtanh"]], "heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.heaviside"]], "higher_order_moment() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.higher_order_moment"]], "histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.interpolate"]], "invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[74, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.invert_permutation"]], "isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.isclose"]], "ivy.data_classes.container.experimental": [[74, "module-ivy.data_classes.container.experimental"]], "ivy.data_classes.container.experimental.activations": [[74, "module-ivy.data_classes.container.experimental.activations"]], "ivy.data_classes.container.experimental.conversions": [[74, "module-ivy.data_classes.container.experimental.conversions"]], "ivy.data_classes.container.experimental.creation": [[74, "module-ivy.data_classes.container.experimental.creation"]], "ivy.data_classes.container.experimental.data_type": [[74, "module-ivy.data_classes.container.experimental.data_type"]], "ivy.data_classes.container.experimental.device": [[74, "module-ivy.data_classes.container.experimental.device"]], "ivy.data_classes.container.experimental.elementwise": [[74, "module-ivy.data_classes.container.experimental.elementwise"]], "ivy.data_classes.container.experimental.general": [[74, "module-ivy.data_classes.container.experimental.general"]], "ivy.data_classes.container.experimental.gradients": [[74, "module-ivy.data_classes.container.experimental.gradients"]], "ivy.data_classes.container.experimental.image": [[74, "module-ivy.data_classes.container.experimental.image"]], "ivy.data_classes.container.experimental.layers": [[74, "module-ivy.data_classes.container.experimental.layers"]], "ivy.data_classes.container.experimental.linear_algebra": [[74, "module-ivy.data_classes.container.experimental.linear_algebra"]], "ivy.data_classes.container.experimental.losses": [[74, "module-ivy.data_classes.container.experimental.losses"]], "ivy.data_classes.container.experimental.manipulation": [[74, "module-ivy.data_classes.container.experimental.manipulation"]], "ivy.data_classes.container.experimental.norms": [[74, "module-ivy.data_classes.container.experimental.norms"]], "ivy.data_classes.container.experimental.random": [[74, "module-ivy.data_classes.container.experimental.random"]], "ivy.data_classes.container.experimental.searching": [[74, "module-ivy.data_classes.container.experimental.searching"]], "ivy.data_classes.container.experimental.set": [[74, "module-ivy.data_classes.container.experimental.set"]], "ivy.data_classes.container.experimental.sorting": [[74, "module-ivy.data_classes.container.experimental.sorting"]], "ivy.data_classes.container.experimental.statistical": [[74, "module-ivy.data_classes.container.experimental.statistical"]], "ivy.data_classes.container.experimental.utility": [[74, "module-ivy.data_classes.container.experimental.utility"]], "kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_bessel_derived_window"]], "kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_window"]], "kl_div() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.kl_div"]], "kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[74, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.lexsort"]], "log_poisson_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.log_poisson_loss"]], "logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logit"]], "logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool3d"]], "max_unpool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_unpool1d"]], "median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmedian"]], "nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental method)": [[74, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.poisson"]], "poisson_nll_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.poisson_nll_loss"]], "prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.prelu"]], "put_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.put_along_axis"]], "quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental method)": [[74, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental.reduce"]], "relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.relu6"]], "rfft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfft"]], "rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.rot90"]], "selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.selu"]], "signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.silu"]], "sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sinc"]], "sliding_window() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.sliding_window"]], "smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.soft_thresholding"]], "sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sparsify_tensor"]], "static_adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool1d"]], "static_adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool2d"]], "static_adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_max_pool2d"]], "static_adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_adjoint"]], "static_allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_allclose"]], "static_amax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_amax"]], "static_amin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_amin"]], "static_as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_as_strided"]], "static_atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_1d"]], "static_atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_2d"]], "static_atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_3d"]], "static_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool1d"]], "static_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool2d"]], "static_avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool3d"]], "static_batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_batch_norm"]], "static_batched_outer() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_batched_outer"]], "static_bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_bernoulli"]], "static_beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_beta"]], "static_binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_binarizer"]], "static_bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_bincount"]], "static_blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_blackman_window"]], "static_broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_broadcast_shapes"]], "static_column_stack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_column_stack"]], "static_concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_concat_from_sequence"]], "static_cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_cond"]], "static_conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_conj"]], "static_copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_copysign"]], "static_corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_corrcoef"]], "static_count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_count_nonzero"]], "static_cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_cov"]], "static_dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dct"]], "static_dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dft"]], "static_diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_diagflat"]], "static_diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_diff"]], "static_digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_digamma"]], "static_dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_dirichlet"]], "static_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_dot"]], "static_dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dsplit"]], "static_dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dstack"]], "static_eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eig"]], "static_eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigh_tridiagonal"]], "static_eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigvals"]], "static_embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_embedding"]], "static_erfc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_erfc"]], "static_expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_expand"]], "static_eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_eye_like"]], "static_fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fix"]], "static_flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flatten"]], "static_fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fliplr"]], "static_flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flipud"]], "static_float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_float_power"]], "static_fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmax"]], "static_fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmod"]], "static_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fold"]], "static_frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_frexp"]], "static_gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_gamma"]], "static_gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_gradient"]], "static_group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_group_norm"]], "static_hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hamming_window"]], "static_hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hann_window"]], "static_heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_heaviside"]], "static_higher_order_moment() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_higher_order_moment"]], "static_histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_histogram"]], "static_hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hsplit"]], "static_hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hstack"]], "static_hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_hypot"]], "static_i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_i0"]], "static_idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_idct"]], "static_ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifft"]], "static_ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifftn"]], "static_igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_igamma"]], "static_initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_initialize_tucker"]], "static_instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_instance_norm"]], "static_interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_interpolate"]], "static_invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[74, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_invert_permutation"]], "static_isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_isclose"]], "static_kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_bessel_derived_window"]], "static_kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_window"]], "static_kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_kron"]], "static_l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l1_normalize"]], "static_l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l2_normalize"]], "static_ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_ldexp"]], "static_lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_lerp"]], "static_lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[74, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_lexsort"]], "static_logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logit"]], "static_logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logsigmoid"]], "static_lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_lp_normalize"]], "static_make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_make_svd_non_negative"]], "static_matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_matricize"]], "static_matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_matrix_exp"]], "static_max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool1d"]], "static_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool2d"]], "static_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool3d"]], "static_max_unpool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_unpool1d"]], "static_median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_median"]], "static_mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_mel_weight_matrix"]], "static_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_mode_dot"]], "static_modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_modf"]], "static_moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_moveaxis"]], "static_multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_dot"]], "static_multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_mode_dot"]], "static_nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmean"]], "static_nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmedian"]], "static_nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanprod"]], "static_nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nansum"]], "static_nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nextafter"]], "static_optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental static method)": [[74, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.static_optional_get_element"]], "static_pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_pad"]], "static_partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_fold"]], "static_partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_tensor_to_vec"]], "static_partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_partial_tucker"]], "static_partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_unfold"]], "static_partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_vec_to_tensor"]], "static_poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_poisson"]], "static_prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_prelu"]], "static_quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_quantile"]], "static_relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_relu6"]], "static_rfft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfft"]], "static_rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfftn"]], "static_rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_rot90"]], "static_selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_selu"]], "static_signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_signbit"]], "static_sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sinc"]], "static_soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_soft_thresholding"]], "static_sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sparsify_tensor"]], "static_stft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_stft"]], "static_svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_svd_flip"]], "static_take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_take_along_axis"]], "static_tensor_train() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tensor_train"]], "static_thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_thresholded_relu"]], "static_top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_top_k"]], "static_tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_tril_indices"]], "static_truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_truncated_svd"]], "static_tt_matrix_to_tensor() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tt_matrix_to_tensor"]], "static_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tucker"]], "static_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_unfold"]], "static_unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental static method)": [[74, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.static_unravel_index"]], "static_unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_min"]], "static_unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_sum"]], "static_vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_vorbis_window"]], "static_vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vsplit"]], "static_vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vstack"]], "static_xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_xlogy"]], "static_zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_zeta"]], "stft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.stft"]], "svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.svd_flip"]], "take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take_along_axis"]], "tanhshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.tanhshrink"]], "tensor_train() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tensor_train"]], "thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.top_k"]], "tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.tril_indices"]], "trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.trilu"]], "trim_zeros() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.trim_zeros"]], "truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.truncated_svd"]], "tt_matrix_to_tensor() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tt_matrix_to_tensor"]], "tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tucker"]], "unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental method)": [[74, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.unravel_index"]], "unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_sum"]], "vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.vorbis_window"]], "vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.zeta"]], "_containerwithgeneral (class in ivy.data_classes.container.general)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral"]], "_abc_impl (ivy.data_classes.container.general._containerwithgeneral attribute)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._abc_impl"]], "_static_all_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_all_equal"]], "_static_array_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_array_equal"]], "_static_assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_assert_supports_inplace"]], "_static_clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_matrix_norm"]], "_static_clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_vector_norm"]], "_static_einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_rearrange"]], "_static_einops_reduce() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_reduce"]], "_static_einops_repeat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_repeat"]], "_static_exists() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_exists"]], "_static_fourier_encode() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_fourier_encode"]], "_static_gather() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather"]], "_static_gather_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather_nd"]], "_static_get_num_dims() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_get_num_dims"]], "_static_has_nans() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_has_nans"]], "_static_inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_decrement"]], "_static_inplace_increment() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_increment"]], "_static_inplace_update() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_update"]], "_static_is_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_array"]], "_static_is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_ivy_array"]], "_static_is_native_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_native_array"]], "_static_scatter_flat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_flat"]], "_static_scatter_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_nd"]], "_static_stable_divide() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_divide"]], "_static_stable_pow() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_pow"]], "_static_supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_supports_inplace_updates"]], "_static_to_list() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_list"]], "_static_to_numpy() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_numpy"]], "_static_to_scalar() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_scalar"]], "_static_value_is_nan() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_value_is_nan"]], "all_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.clip_vector_norm"]], "einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.gather"]], "gather_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.is_ivy_array"]], "is_native_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.is_native_array"]], "isin() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.isin"]], "itemsize() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.itemsize"]], "ivy.data_classes.container.general": [[75, "module-ivy.data_classes.container.general"]], "scatter_flat() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.stable_pow"]], "static_isin() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.static_isin"]], "static_itemsize() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.static_itemsize"]], "static_strides() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.static_strides"]], "strides() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.strides"]], "supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.supports_inplace_updates"]], "to_list() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.value_is_nan"]], "_containerwithgradients (class in ivy.data_classes.container.gradients)": [[76, "ivy.data_classes.container.gradients._ContainerWithGradients"]], "_abc_impl (ivy.data_classes.container.gradients._containerwithgradients attribute)": [[76, "ivy.data_classes.container.gradients._ContainerWithGradients._abc_impl"]], "_static_stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients static method)": [[76, "ivy.data_classes.container.gradients._ContainerWithGradients._static_stop_gradient"]], "adam_step() (ivy.data_classes.container.gradients._containerwithgradients method)": [[76, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_step"]], "adam_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[76, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[76, "ivy.data_classes.container.gradients._ContainerWithGradients.gradient_descent_update"]], "ivy.data_classes.container.gradients": [[76, "module-ivy.data_classes.container.gradients"]], "lamb_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[76, "ivy.data_classes.container.gradients._ContainerWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[76, "ivy.data_classes.container.gradients._ContainerWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[76, "ivy.data_classes.container.gradients._ContainerWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients method)": [[76, "ivy.data_classes.container.gradients._ContainerWithGradients.stop_gradient"]], "_containerwithimage (class in ivy.data_classes.container.image)": [[77, "ivy.data_classes.container.image._ContainerWithImage"]], "_abc_impl (ivy.data_classes.container.image._containerwithimage attribute)": [[77, "ivy.data_classes.container.image._ContainerWithImage._abc_impl"]], "ivy.data_classes.container.image": [[77, "module-ivy.data_classes.container.image"]], "_containerwithlayers (class in ivy.data_classes.container.layers)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers"]], "_abc_impl (ivy.data_classes.container.layers._containerwithlayers attribute)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._abc_impl"]], "_static_conv1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d"]], "_static_conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d_transpose"]], "_static_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d"]], "_static_conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d_transpose"]], "_static_conv3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d"]], "_static_conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d_transpose"]], "_static_depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_depthwise_conv2d"]], "_static_dropout() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout"]], "_static_dropout1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout1d"]], "_static_dropout2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout2d"]], "_static_dropout3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout3d"]], "_static_linear() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_linear"]], "_static_lstm_update() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_lstm_update"]], "_static_multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_multi_head_attention"]], "_static_reduce_window() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_reduce_window"]], "_static_scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_scaled_dot_product_attention"]], "conv1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.dropout"]], "dropout1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.dropout3d"]], "ivy.data_classes.container.layers": [[78, "module-ivy.data_classes.container.layers"]], "linear() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.linear"]], "lstm_update() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.multi_head_attention"]], "reduce_window() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.reduce_window"]], "scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.scaled_dot_product_attention"]], "_containerwithlinearalgebra (class in ivy.data_classes.container.linear_algebra)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra attribute)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._abc_impl"]], "_static_cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cholesky"]], "_static_cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cross"]], "_static_det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_det"]], "_static_diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diag"]], "_static_diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diagonal"]], "_static_eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigh"]], "_static_eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigvalsh"]], "_static_inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inner"]], "_static_inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inv"]], "_static_matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matmul"]], "_static_matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_norm"]], "_static_matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_power"]], "_static_matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_rank"]], "_static_matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_transpose"]], "_static_outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_outer"]], "_static_pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_pinv"]], "_static_qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_qr"]], "_static_slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_slogdet"]], "_static_solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_solve"]], "_static_svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svd"]], "_static_svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svdvals"]], "_static_tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensordot"]], "_static_tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensorsolve"]], "_static_trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_trace"]], "_static_vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vander"]], "_static_vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vecdot"]], "_static_vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_norm"]], "_static_vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_to_skew_symmetric_matrix"]], "cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cross"]], "det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.det"]], "diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diagonal"]], "eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigvalsh"]], "general_inner_product() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.general_inner_product"]], "inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inv"]], "ivy.data_classes.container.linear_algebra": [[79, "module-ivy.data_classes.container.linear_algebra"]], "matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.solve"]], "static_general_inner_product() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.static_general_inner_product"]], "svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_containerwithlosses (class in ivy.data_classes.container.losses)": [[80, "ivy.data_classes.container.losses._ContainerWithLosses"]], "_abc_impl (ivy.data_classes.container.losses._containerwithlosses attribute)": [[80, "ivy.data_classes.container.losses._ContainerWithLosses._abc_impl"]], "_static_binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[80, "ivy.data_classes.container.losses._ContainerWithLosses._static_binary_cross_entropy"]], "_static_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[80, "ivy.data_classes.container.losses._ContainerWithLosses._static_cross_entropy"]], "_static_sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[80, "ivy.data_classes.container.losses._ContainerWithLosses._static_sparse_cross_entropy"]], "binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[80, "ivy.data_classes.container.losses._ContainerWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[80, "ivy.data_classes.container.losses._ContainerWithLosses.cross_entropy"]], "ivy.data_classes.container.losses": [[80, "module-ivy.data_classes.container.losses"]], "sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[80, "ivy.data_classes.container.losses._ContainerWithLosses.sparse_cross_entropy"]], "_containerwithmanipulation (class in ivy.data_classes.container.manipulation)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation"]], "_abc_impl (ivy.data_classes.container.manipulation._containerwithmanipulation attribute)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._abc_impl"]], "_static_clip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_clip"]], "_static_concat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_concat"]], "_static_constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_constant_pad"]], "_static_expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_expand_dims"]], "_static_flip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_flip"]], "_static_permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_permute_dims"]], "_static_repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_repeat"]], "_static_reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_reshape"]], "_static_roll() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_roll"]], "_static_split() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_split"]], "_static_squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_squeeze"]], "_static_stack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_stack"]], "_static_swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_swapaxes"]], "_static_tile() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_tile"]], "_static_unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_unstack"]], "_static_zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_zero_pad"]], "clip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.clip"]], "concat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.concat"]], "constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.expand_dims"]], "flip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.flip"]], "ivy.data_classes.container.manipulation": [[81, "module-ivy.data_classes.container.manipulation"]], "permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.repeat"]], "reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.reshape"]], "roll() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.roll"]], "split() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.split"]], "squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.squeeze"]], "stack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.stack"]], "swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.swapaxes"]], "tile() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.tile"]], "unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.unstack"]], "zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.zero_pad"]], "_containerwithnorms (class in ivy.data_classes.container.norms)": [[82, "ivy.data_classes.container.norms._ContainerWithNorms"]], "_abc_impl (ivy.data_classes.container.norms._containerwithnorms attribute)": [[82, "ivy.data_classes.container.norms._ContainerWithNorms._abc_impl"]], "ivy.data_classes.container.norms": [[82, "module-ivy.data_classes.container.norms"]], "layer_norm() (ivy.data_classes.container.norms._containerwithnorms method)": [[82, "ivy.data_classes.container.norms._ContainerWithNorms.layer_norm"]], "_containerwithrandom (class in ivy.data_classes.container.random)": [[83, "ivy.data_classes.container.random._ContainerWithRandom"]], "_abc_impl (ivy.data_classes.container.random._containerwithrandom attribute)": [[83, "ivy.data_classes.container.random._ContainerWithRandom._abc_impl"]], "_static_multinomial() (ivy.data_classes.container.random._containerwithrandom static method)": [[83, "ivy.data_classes.container.random._ContainerWithRandom._static_multinomial"]], "_static_randint() (ivy.data_classes.container.random._containerwithrandom static method)": [[83, "ivy.data_classes.container.random._ContainerWithRandom._static_randint"]], "_static_random_normal() (ivy.data_classes.container.random._containerwithrandom static method)": [[83, "ivy.data_classes.container.random._ContainerWithRandom._static_random_normal"]], "_static_random_uniform() (ivy.data_classes.container.random._containerwithrandom static method)": [[83, "ivy.data_classes.container.random._ContainerWithRandom._static_random_uniform"]], "_static_shuffle() (ivy.data_classes.container.random._containerwithrandom static method)": [[83, "ivy.data_classes.container.random._ContainerWithRandom._static_shuffle"]], "ivy.data_classes.container.random": [[83, "module-ivy.data_classes.container.random"]], "multinomial() (ivy.data_classes.container.random._containerwithrandom method)": [[83, "ivy.data_classes.container.random._ContainerWithRandom.multinomial"]], "randint() (ivy.data_classes.container.random._containerwithrandom method)": [[83, "ivy.data_classes.container.random._ContainerWithRandom.randint"]], "random_normal() (ivy.data_classes.container.random._containerwithrandom method)": [[83, "ivy.data_classes.container.random._ContainerWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.container.random._containerwithrandom method)": [[83, "ivy.data_classes.container.random._ContainerWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.container.random._containerwithrandom method)": [[83, "ivy.data_classes.container.random._ContainerWithRandom.shuffle"]], "_containerwithsearching (class in ivy.data_classes.container.searching)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching"]], "_abc_impl (ivy.data_classes.container.searching._containerwithsearching attribute)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching._abc_impl"]], "_static_argmax() (ivy.data_classes.container.searching._containerwithsearching static method)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmax"]], "_static_argmin() (ivy.data_classes.container.searching._containerwithsearching static method)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmin"]], "_static_argwhere() (ivy.data_classes.container.searching._containerwithsearching static method)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching._static_argwhere"]], "_static_nonzero() (ivy.data_classes.container.searching._containerwithsearching static method)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching._static_nonzero"]], "_static_where() (ivy.data_classes.container.searching._containerwithsearching static method)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching._static_where"]], "argmax() (ivy.data_classes.container.searching._containerwithsearching method)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching.argmax"]], "argmin() (ivy.data_classes.container.searching._containerwithsearching method)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching.argmin"]], "argwhere() (ivy.data_classes.container.searching._containerwithsearching method)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching.argwhere"]], "ivy.data_classes.container.searching": [[84, "module-ivy.data_classes.container.searching"]], "nonzero() (ivy.data_classes.container.searching._containerwithsearching method)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching.nonzero"]], "where() (ivy.data_classes.container.searching._containerwithsearching method)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching.where"]], "_containerwithset (class in ivy.data_classes.container.set)": [[85, "ivy.data_classes.container.set._ContainerWithSet"]], "_abc_impl (ivy.data_classes.container.set._containerwithset attribute)": [[85, "ivy.data_classes.container.set._ContainerWithSet._abc_impl"]], "_static_unique_all() (ivy.data_classes.container.set._containerwithset static method)": [[85, "ivy.data_classes.container.set._ContainerWithSet._static_unique_all"]], "_static_unique_counts() (ivy.data_classes.container.set._containerwithset static method)": [[85, "ivy.data_classes.container.set._ContainerWithSet._static_unique_counts"]], "_static_unique_inverse() (ivy.data_classes.container.set._containerwithset static method)": [[85, "ivy.data_classes.container.set._ContainerWithSet._static_unique_inverse"]], "_static_unique_values() (ivy.data_classes.container.set._containerwithset static method)": [[85, "ivy.data_classes.container.set._ContainerWithSet._static_unique_values"]], "ivy.data_classes.container.set": [[85, "module-ivy.data_classes.container.set"]], "unique_all() (ivy.data_classes.container.set._containerwithset method)": [[85, "ivy.data_classes.container.set._ContainerWithSet.unique_all"]], "unique_counts() (ivy.data_classes.container.set._containerwithset method)": [[85, "ivy.data_classes.container.set._ContainerWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.container.set._containerwithset method)": [[85, "ivy.data_classes.container.set._ContainerWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.container.set._containerwithset method)": [[85, "ivy.data_classes.container.set._ContainerWithSet.unique_values"]], "_containerwithsorting (class in ivy.data_classes.container.sorting)": [[86, "ivy.data_classes.container.sorting._ContainerWithSorting"]], "_abc_impl (ivy.data_classes.container.sorting._containerwithsorting attribute)": [[86, "ivy.data_classes.container.sorting._ContainerWithSorting._abc_impl"]], "_static_argsort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[86, "ivy.data_classes.container.sorting._ContainerWithSorting._static_argsort"]], "_static_searchsorted() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[86, "ivy.data_classes.container.sorting._ContainerWithSorting._static_searchsorted"]], "_static_sort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[86, "ivy.data_classes.container.sorting._ContainerWithSorting._static_sort"]], "argsort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[86, "ivy.data_classes.container.sorting._ContainerWithSorting.argsort"]], "ivy.data_classes.container.sorting": [[86, "module-ivy.data_classes.container.sorting"]], "msort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[86, "ivy.data_classes.container.sorting._ContainerWithSorting.msort"]], "searchsorted() (ivy.data_classes.container.sorting._containerwithsorting method)": [[86, "ivy.data_classes.container.sorting._ContainerWithSorting.searchsorted"]], "sort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[86, "ivy.data_classes.container.sorting._ContainerWithSorting.sort"]], "static_msort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[86, "ivy.data_classes.container.sorting._ContainerWithSorting.static_msort"]], "_containerwithstatistical (class in ivy.data_classes.container.statistical)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical"]], "_abc_impl (ivy.data_classes.container.statistical._containerwithstatistical attribute)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical._abc_impl"]], "_static_cumprod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumprod"]], "_static_cumsum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumsum"]], "_static_prod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_prod"]], "_static_sum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_sum"]], "_static_var() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_var"]], "cumprod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumsum"]], "einsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical.einsum"]], "ivy.data_classes.container.statistical": [[87, "module-ivy.data_classes.container.statistical"]], "max() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical.max"]], "mean() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical.mean"]], "min() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical.min"]], "prod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical.prod"]], "std() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical.std"]], "sum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical.sum"]], "var() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical.var"]], "_containerwithutility (class in ivy.data_classes.container.utility)": [[88, "ivy.data_classes.container.utility._ContainerWithUtility"]], "_abc_impl (ivy.data_classes.container.utility._containerwithutility attribute)": [[88, "ivy.data_classes.container.utility._ContainerWithUtility._abc_impl"]], "_static_all() (ivy.data_classes.container.utility._containerwithutility static method)": [[88, "ivy.data_classes.container.utility._ContainerWithUtility._static_all"]], "_static_any() (ivy.data_classes.container.utility._containerwithutility static method)": [[88, "ivy.data_classes.container.utility._ContainerWithUtility._static_any"]], "all() (ivy.data_classes.container.utility._containerwithutility method)": [[88, "ivy.data_classes.container.utility._ContainerWithUtility.all"]], "any() (ivy.data_classes.container.utility._containerwithutility method)": [[88, "ivy.data_classes.container.utility._ContainerWithUtility.any"]], "ivy.data_classes.container.utility": [[88, "module-ivy.data_classes.container.utility"]], "_wrap_function() (in module ivy.data_classes.container.wrapping)": [[89, "ivy.data_classes.container.wrapping._wrap_function"]], "add_ivy_container_instance_methods() (in module ivy.data_classes.container.wrapping)": [[89, "ivy.data_classes.container.wrapping.add_ivy_container_instance_methods"]], "ivy.data_classes.container.wrapping": [[89, "module-ivy.data_classes.container.wrapping"]], "factorizedtensor (class in ivy.data_classes.factorized_tensor.base)": [[90, "ivy.data_classes.factorized_tensor.base.FactorizedTensor"]], "__init__() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[90, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.base.factorizedtensor attribute)": [[90, "ivy.data_classes.factorized_tensor.base.FactorizedTensor._abc_impl"]], "ivy.data_classes.factorized_tensor.base": [[90, "module-ivy.data_classes.factorized_tensor.base"]], "mode_dot() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[90, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.mode_dot"]], "norm() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[90, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.norm"]], "to_tensor() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[90, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[90, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[90, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_vec"]], "cptensor (class in ivy.data_classes.factorized_tensor.cp_tensor)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor"]], "__init__() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.cp_tensor.cptensor attribute)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor._abc_impl"]], "cp_copy() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_copy"]], "cp_flip_sign() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_flip_sign"]], "cp_lstsq_grad() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_lstsq_grad"]], "cp_mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_mode_dot"]], "cp_n_param() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_n_param"]], "cp_norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_norm"]], "cp_normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_normalize"]], "cp_to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_tensor"]], "cp_to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_unfolded"]], "cp_to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[91, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.cp_tensor.cptensor property)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.n_param"]], "norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.norm"]], "normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.normalize"]], "to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_vec"]], "unfolding_dot_khatri_rao() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.unfolding_dot_khatri_rao"]], "validate_cp_rank() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_rank"]], "validate_cp_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_tensor"]], "parafac2tensor (class in ivy.data_classes.factorized_tensor.parafac2_tensor)": [[92, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor"]], "__init__() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[92, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor attribute)": [[92, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor._abc_impl"]], "apply_parafac2_projections() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[92, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.apply_parafac2_projections"]], "from_cptensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor class method)": [[92, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.from_CPTensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor": [[92, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"]], "n_param (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor property)": [[92, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.n_param"]], "parafac2_normalise() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[92, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_normalise"]], "parafac2_to_slice() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[92, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_slice"]], "parafac2_to_slices() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[92, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_slices"]], "parafac2_to_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[92, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_tensor"]], "parafac2_to_unfolded() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[92, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_unfolded"]], "parafac2_to_vec() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[92, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_vec"]], "to_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[92, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[92, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[92, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_vec"]], "validate_parafac2_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[92, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.validate_parafac2_tensor"]], "trtensor (class in ivy.data_classes.factorized_tensor.tr_tensor)": [[93, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[93, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tr_tensor.trtensor attribute)": [[93, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor._abc_impl"]], "ivy.data_classes.factorized_tensor.tr_tensor": [[93, "module-ivy.data_classes.factorized_tensor.tr_tensor"]], "n_param (ivy.data_classes.factorized_tensor.tr_tensor.trtensor property)": [[93, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.n_param"]], "to_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[93, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[93, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[93, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_vec"]], "tr_n_param() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[93, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_n_param"]], "tr_to_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[93, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_tensor"]], "tr_to_unfolded() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[93, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_unfolded"]], "tr_to_vec() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[93, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_vec"]], "validate_tr_rank() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[93, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.validate_tr_rank"]], "validate_tr_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[93, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.validate_tr_tensor"]], "tttensor (class in ivy.data_classes.factorized_tensor.tt_tensor)": [[94, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[94, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tt_tensor.tttensor attribute)": [[94, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor._abc_impl"]], "_tt_n_param() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[94, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor._tt_n_param"]], "index_update() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[94, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.index_update"]], "ivy.data_classes.factorized_tensor.tt_tensor": [[94, "module-ivy.data_classes.factorized_tensor.tt_tensor"]], "n_param (ivy.data_classes.factorized_tensor.tt_tensor.tttensor property)": [[94, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.n_param"]], "pad_tt_rank() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[94, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.pad_tt_rank"]], "to_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[94, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_tensor"]], "to_unfolding() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[94, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_unfolding"]], "to_vec() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[94, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_vec"]], "tt_to_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[94, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_tensor"]], "tt_to_unfolded() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[94, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_unfolded"]], "tt_to_vec() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[94, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_vec"]], "validate_tt_rank() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[94, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.validate_tt_rank"]], "validate_tt_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[94, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.validate_tt_tensor"]], "tuckertensor (class in ivy.data_classes.factorized_tensor.tucker_tensor)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor attribute)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor._abc_impl"]], "_bisection_root_finder() (in module ivy.data_classes.factorized_tensor.tucker_tensor)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor._bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[95, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor property)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.n_param"]], "to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_vec"]], "tucker_copy() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_copy"]], "tucker_mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_mode_dot"]], "tucker_n_param() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_n_param"]], "tucker_normalize() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_normalize"]], "tucker_to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_tensor"]], "tucker_to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_unfolded"]], "tucker_to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_vec"]], "validate_tucker_rank() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_rank"]], "validate_tucker_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_tensor"]], "array (class in ivy.data_classes.array.array)": [[96, "ivy.data_classes.array.array.Array"]], "t (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.T"]], "__abs__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__abs__"]], "__add__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__add__"]], "__eq__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__eq__"]], "__ge__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__ge__"]], "__gt__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__gt__"]], "__init__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__init__"]], "__le__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__le__"]], "__lt__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__lt__"]], "__ne__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__ne__"]], "__pow__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__pow__"]], "__radd__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__radd__"]], "__rrshift__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__rrshift__"]], "__rshift__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__rshift__"]], "__rsub__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__rsub__"]], "__sub__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__sub__"]], "__truediv__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__truediv__"]], "__xor__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__xor__"]], "backend (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.backend"]], "base (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.base"]], "data (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.data"]], "device (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.device"]], "dtype (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.dtype"]], "dynamic_backend (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.dynamic_backend"]], "imag (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.imag"]], "itemsize (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.itemsize"]], "ivy.data_classes.array.array": [[96, "module-ivy.data_classes.array.array"]], "mt (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.mT"]], "ndim (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.ndim"]], "real (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.real"]], "shape (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.shape"]], "size (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.size"]], "strides (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.strides"]], "container (class in ivy.data_classes.container.container)": [[97, "ivy.data_classes.container.container.Container"]], "__abs__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__abs__"]], "__add__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__add__"]], "__eq__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__eq__"]], "__ge__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__ge__"]], "__gt__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__gt__"]], "__init__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__init__"]], "__le__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__le__"]], "__lt__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__lt__"]], "__ne__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__ne__"]], "__pow__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__pow__"]], "__radd__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__radd__"]], "__rrshift__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__rrshift__"]], "__rshift__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__rshift__"]], "__rsub__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__rsub__"]], "__sub__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__sub__"]], "__truediv__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__truediv__"]], "__xor__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__xor__"]], "ivy.data_classes.container.container": [[97, "module-ivy.data_classes.container.container"]], "nestedarray (class in ivy.data_classes.nested_array.nested_array)": [[99, "ivy.data_classes.nested_array.nested_array.NestedArray"]], "__init__() (ivy.data_classes.nested_array.nested_array.nestedarray method)": [[99, "ivy.data_classes.nested_array.nested_array.NestedArray.__init__"]], "from_row_lengths() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[99, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_lengths"]], "from_row_splits() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[99, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_splits"]], "ivy.data_classes.nested_array.nested_array": [[99, "module-ivy.data_classes.nested_array.nested_array"]], "nestedarraybase (class in ivy.data_classes.nested_array.base)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase"]], "__init__() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.__init__"]], "_abc_impl (ivy.data_classes.nested_array.base.nestedarraybase attribute)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase._abc_impl"]], "broadcast_shapes() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.broadcast_shapes"]], "data (ivy.data_classes.nested_array.base.nestedarraybase property)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.data"]], "device (ivy.data_classes.nested_array.base.nestedarraybase property)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.device"]], "dtype (ivy.data_classes.nested_array.base.nestedarraybase property)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.dtype"]], "inner_shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.inner_shape"]], "ivy.data_classes.nested_array.base": [[100, "module-ivy.data_classes.nested_array.base"]], "ndim (ivy.data_classes.nested_array.base.nestedarraybase property)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.ndim"]], "nested_array() (ivy.data_classes.nested_array.base.nestedarraybase class method)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_array"]], "nested_rank (ivy.data_classes.nested_array.base.nestedarraybase property)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_rank"]], "ragged_map() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_map"]], "ragged_multi_map() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map"]], "ragged_multi_map_in_function() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map_in_function"]], "replace_ivy_arrays() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.replace_ivy_arrays"]], "shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.shape"]], "unbind() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.unbind"]], "nestedarrayelementwise (class in ivy.data_classes.nested_array.elementwise)": [[101, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise"]], "_abc_impl (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise attribute)": [[101, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise._abc_impl"]], "ivy.data_classes.nested_array.elementwise": [[101, "module-ivy.data_classes.nested_array.elementwise"]], "static_add() (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise static method)": [[101, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise.static_add"]], "gelu() (in module ivy)": [[104, "ivy.gelu"], [598, "ivy.gelu"]], "gelu() (ivy.array method)": [[104, "ivy.Array.gelu"]], "gelu() (ivy.container method)": [[104, "ivy.Container.gelu"]], "hardswish() (in module ivy)": [[105, "ivy.hardswish"], [598, "ivy.hardswish"]], "hardswish() (ivy.array method)": [[105, "ivy.Array.hardswish"]], "hardswish() (ivy.container method)": [[105, "ivy.Container.hardswish"]], "leaky_relu() (in module ivy)": [[106, "ivy.leaky_relu"], [598, "ivy.leaky_relu"]], "leaky_relu() (ivy.array method)": [[106, "ivy.Array.leaky_relu"]], "leaky_relu() (ivy.container method)": [[106, "ivy.Container.leaky_relu"]], "log_softmax() (in module ivy)": [[107, "ivy.log_softmax"], [598, "ivy.log_softmax"]], "log_softmax() (ivy.array method)": [[107, "ivy.Array.log_softmax"]], "log_softmax() (ivy.container method)": [[107, "ivy.Container.log_softmax"]], "mish() (in module ivy)": [[108, "ivy.mish"], [598, "ivy.mish"]], "mish() (ivy.array method)": [[108, "ivy.Array.mish"]], "mish() (ivy.container method)": [[108, "ivy.Container.mish"]], "relu() (in module ivy)": [[109, "ivy.relu"], [598, "ivy.relu"]], "relu() (ivy.array method)": [[109, "ivy.Array.relu"]], "relu() (ivy.container method)": [[109, "ivy.Container.relu"]], "sigmoid() (in module ivy)": [[110, "ivy.sigmoid"], [598, "ivy.sigmoid"]], "sigmoid() (ivy.array method)": [[110, "ivy.Array.sigmoid"]], "sigmoid() (ivy.container method)": [[110, "ivy.Container.sigmoid"]], "softmax() (in module ivy)": [[111, "ivy.softmax"], [598, "ivy.softmax"]], "softmax() (ivy.array method)": [[111, "ivy.Array.softmax"]], "softmax() (ivy.container method)": [[111, "ivy.Container.softmax"]], "softplus() (in module ivy)": [[112, "ivy.softplus"], [598, "ivy.softplus"]], "softplus() (ivy.array method)": [[112, "ivy.Array.softplus"]], "softplus() (ivy.container method)": [[112, "ivy.Container.softplus"]], "softsign() (in module ivy)": [[113, "ivy.softsign"], [598, "ivy.softsign"]], "cmp_is() (in module ivy)": [[114, "ivy.cmp_is"], [600, "ivy.cmp_is"]], "cmp_isnot() (in module ivy)": [[115, "ivy.cmp_isnot"], [600, "ivy.cmp_isnot"]], "for_loop() (in module ivy)": [[116, "ivy.for_loop"], [600, "ivy.for_loop"]], "if_else() (in module ivy)": [[117, "ivy.if_else"], [600, "ivy.if_else"]], "try_except() (in module ivy)": [[118, "ivy.try_except"], [600, "ivy.try_except"]], "while_loop() (in module ivy)": [[119, "ivy.while_loop"], [600, "ivy.while_loop"]], "arange() (in module ivy)": [[120, "ivy.arange"], [601, "ivy.arange"]], "array() (in module ivy)": [[121, "ivy.array"], [601, "ivy.array"]], "asarray() (in module ivy)": [[122, "ivy.asarray"], [601, "ivy.asarray"]], "asarray() (ivy.array method)": [[122, "ivy.Array.asarray"]], "asarray() (ivy.container method)": [[122, "ivy.Container.asarray"]], "copy_array() (in module ivy)": [[123, "ivy.copy_array"], [601, "ivy.copy_array"]], "copy_array() (ivy.array method)": [[123, "ivy.Array.copy_array"]], "copy_array() (ivy.container method)": [[123, "ivy.Container.copy_array"]], "empty() (in module ivy)": [[124, "ivy.empty"], [601, "ivy.empty"]], "empty_like() (in module ivy)": [[125, "ivy.empty_like"], [601, "ivy.empty_like"]], "empty_like() (ivy.array method)": [[125, "ivy.Array.empty_like"]], "empty_like() (ivy.container method)": [[125, "ivy.Container.empty_like"]], "eye() (in module ivy)": [[126, "ivy.eye"], [601, "ivy.eye"]], "from_dlpack() (in module ivy)": [[127, "ivy.from_dlpack"], [601, "ivy.from_dlpack"]], "from_dlpack() (ivy.array method)": [[127, "ivy.Array.from_dlpack"]], "from_dlpack() (ivy.container method)": [[127, "ivy.Container.from_dlpack"]], "frombuffer() (in module ivy)": [[128, "ivy.frombuffer"], [601, "ivy.frombuffer"]], "frombuffer() (ivy.container method)": [[128, "ivy.Container.frombuffer"]], "full() (in module ivy)": [[129, "ivy.full"], [601, "ivy.full"]], "full_like() (in module ivy)": [[130, "ivy.full_like"], [601, "ivy.full_like"]], "full_like() (ivy.array method)": [[130, "ivy.Array.full_like"]], "full_like() (ivy.container method)": [[130, "ivy.Container.full_like"]], "linspace() (in module ivy)": [[131, "ivy.linspace"], [601, "ivy.linspace"]], "linspace() (ivy.array method)": [[131, "ivy.Array.linspace"]], "linspace() (ivy.container method)": [[131, "ivy.Container.linspace"]], "logspace() (in module ivy)": [[132, "ivy.logspace"], [601, "ivy.logspace"]], "logspace() (ivy.array method)": [[132, "ivy.Array.logspace"]], "logspace() (ivy.container method)": [[132, "ivy.Container.logspace"]], "meshgrid() (in module ivy)": [[133, "ivy.meshgrid"], [601, "ivy.meshgrid"]], "meshgrid() (ivy.array method)": [[133, "ivy.Array.meshgrid"]], "meshgrid() (ivy.container method)": [[133, "ivy.Container.meshgrid"]], "native_array() (in module ivy)": [[134, "ivy.native_array"], [601, "ivy.native_array"]], "native_array() (ivy.array method)": [[134, "ivy.Array.native_array"]], "native_array() (ivy.container method)": [[134, "ivy.Container.native_array"]], "one_hot() (in module ivy)": [[135, "ivy.one_hot"], [601, "ivy.one_hot"]], "one_hot() (ivy.array method)": [[135, "ivy.Array.one_hot"]], "one_hot() (ivy.container method)": [[135, "ivy.Container.one_hot"]], "ones() (in module ivy)": [[136, "ivy.ones"], [601, "ivy.ones"]], "ones_like() (in module ivy)": [[137, "ivy.ones_like"], [601, "ivy.ones_like"]], "ones_like() (ivy.array method)": [[137, "ivy.Array.ones_like"]], "ones_like() (ivy.container method)": [[137, "ivy.Container.ones_like"]], "to_dlpack() (in module ivy)": [[138, "ivy.to_dlpack"], [601, "ivy.to_dlpack"]], "tril() (in module ivy)": [[139, "ivy.tril"], [601, "ivy.tril"]], "tril() (ivy.array method)": [[139, "ivy.Array.tril"]], "tril() (ivy.container method)": [[139, "ivy.Container.tril"]], "triu() (in module ivy)": [[140, "ivy.triu"], [601, "ivy.triu"]], "triu() (ivy.array method)": [[140, "ivy.Array.triu"]], "triu() (ivy.container method)": [[140, "ivy.Container.triu"]], "triu_indices() (in module ivy)": [[141, "ivy.triu_indices"], [601, "ivy.triu_indices"]], "triu_indices() (ivy.container method)": [[141, "ivy.Container.triu_indices"]], "zeros() (in module ivy)": [[142, "ivy.zeros"], [601, "ivy.zeros"]], "zeros_like() (in module ivy)": [[143, "ivy.zeros_like"], [601, "ivy.zeros_like"]], "zeros_like() (ivy.array method)": [[143, "ivy.Array.zeros_like"]], "zeros_like() (ivy.container method)": [[143, "ivy.Container.zeros_like"]], "as_ivy_dtype() (in module ivy)": [[144, "ivy.as_ivy_dtype"], [602, "ivy.as_ivy_dtype"]], "as_native_dtype() (in module ivy)": [[145, "ivy.as_native_dtype"], [602, "ivy.as_native_dtype"]], "astype() (in module ivy)": [[146, "ivy.astype"], [602, "ivy.astype"]], "astype() (ivy.array method)": [[146, "ivy.Array.astype"]], "astype() (ivy.container method)": [[146, "ivy.Container.astype"]], "broadcast_arrays() (in module ivy)": [[147, "ivy.broadcast_arrays"], [602, "ivy.broadcast_arrays"]], "broadcast_arrays() (ivy.array method)": [[147, "ivy.Array.broadcast_arrays"]], "broadcast_arrays() (ivy.container method)": [[147, "ivy.Container.broadcast_arrays"]], "broadcast_to() (in module ivy)": [[148, "ivy.broadcast_to"], [602, "ivy.broadcast_to"]], "broadcast_to() (ivy.array method)": [[148, "ivy.Array.broadcast_to"]], "broadcast_to() (ivy.container method)": [[148, "ivy.Container.broadcast_to"]], "can_cast() (in module ivy)": [[149, "ivy.can_cast"], [602, "ivy.can_cast"]], "can_cast() (ivy.array method)": [[149, "ivy.Array.can_cast"]], "can_cast() (ivy.container method)": [[149, "ivy.Container.can_cast"]], "check_float() (in module ivy)": [[150, "ivy.check_float"], [602, "ivy.check_float"]], "closest_valid_dtype() (in module ivy)": [[151, "ivy.closest_valid_dtype"], [602, "ivy.closest_valid_dtype"]], "default_complex_dtype() (in module ivy)": [[152, "ivy.default_complex_dtype"], [602, "ivy.default_complex_dtype"]], "default_dtype() (in module ivy)": [[153, "ivy.default_dtype"], [602, "ivy.default_dtype"]], "default_float_dtype() (in module ivy)": [[154, "ivy.default_float_dtype"], [602, "ivy.default_float_dtype"]], "default_int_dtype() (in module ivy)": [[155, "ivy.default_int_dtype"], [602, "ivy.default_int_dtype"]], "default_uint_dtype() (in module ivy)": [[156, "ivy.default_uint_dtype"], [602, "ivy.default_uint_dtype"]], "dtype() (in module ivy)": [[157, "ivy.dtype"], [602, "ivy.dtype"]], "dtype() (ivy.array method)": [[157, "ivy.Array.dtype"]], "dtype() (ivy.container method)": [[157, "ivy.Container.dtype"]], "dtype_bits() (in module ivy)": [[158, "ivy.dtype_bits"], [602, "ivy.dtype_bits"]], "finfo() (in module ivy)": [[159, "ivy.finfo"], [602, "ivy.finfo"]], "finfo() (ivy.array method)": [[159, "ivy.Array.finfo"]], "finfo() (ivy.container method)": [[159, "ivy.Container.finfo"]], "function_supported_dtypes() (in module ivy)": [[160, "ivy.function_supported_dtypes"], [602, "ivy.function_supported_dtypes"]], "function_unsupported_dtypes() (in module ivy)": [[161, "ivy.function_unsupported_dtypes"], [602, "ivy.function_unsupported_dtypes"]], "iinfo() (in module ivy)": [[162, "ivy.iinfo"], [602, "ivy.iinfo"]], "iinfo() (ivy.array method)": [[162, "ivy.Array.iinfo"]], "iinfo() (ivy.container method)": [[162, "ivy.Container.iinfo"]], "infer_default_dtype() (in module ivy)": [[163, "ivy.infer_default_dtype"], [602, "ivy.infer_default_dtype"]], "invalid_dtype() (in module ivy)": [[164, "ivy.invalid_dtype"], [602, "ivy.invalid_dtype"]], "is_bool_dtype() (in module ivy)": [[165, "ivy.is_bool_dtype"], [602, "ivy.is_bool_dtype"]], "is_bool_dtype() (ivy.array method)": [[165, "ivy.Array.is_bool_dtype"]], "is_bool_dtype() (ivy.container method)": [[165, "ivy.Container.is_bool_dtype"]], "is_complex_dtype() (in module ivy)": [[166, "ivy.is_complex_dtype"], [602, "ivy.is_complex_dtype"]], "is_complex_dtype() (ivy.container method)": [[166, "ivy.Container.is_complex_dtype"]], "is_float_dtype() (in module ivy)": [[167, "ivy.is_float_dtype"], [602, "ivy.is_float_dtype"]], "is_float_dtype() (ivy.array method)": [[167, "ivy.Array.is_float_dtype"]], "is_float_dtype() (ivy.container method)": [[167, "ivy.Container.is_float_dtype"]], "is_hashable_dtype() (in module ivy)": [[168, "ivy.is_hashable_dtype"], [602, "ivy.is_hashable_dtype"]], "is_int_dtype() (in module ivy)": [[169, "ivy.is_int_dtype"], [602, "ivy.is_int_dtype"]], "is_int_dtype() (ivy.array method)": [[169, "ivy.Array.is_int_dtype"]], "is_int_dtype() (ivy.container method)": [[169, "ivy.Container.is_int_dtype"]], "is_native_dtype() (in module ivy)": [[170, "ivy.is_native_dtype"], [602, "ivy.is_native_dtype"]], "is_uint_dtype() (in module ivy)": [[171, "ivy.is_uint_dtype"], [602, "ivy.is_uint_dtype"]], "is_uint_dtype() (ivy.array method)": [[171, "ivy.Array.is_uint_dtype"]], "is_uint_dtype() (ivy.container method)": [[171, "ivy.Container.is_uint_dtype"]], "promote_types() (in module ivy)": [[172, "ivy.promote_types"], [602, "ivy.promote_types"]], "promote_types_of_inputs() (in module ivy)": [[173, "ivy.promote_types_of_inputs"], [602, "ivy.promote_types_of_inputs"]], "result_type() (in module ivy)": [[174, "ivy.result_type"], [602, "ivy.result_type"]], "result_type() (ivy.array method)": [[174, "ivy.Array.result_type"]], "result_type() (ivy.container method)": [[174, "ivy.Container.result_type"]], "set_default_complex_dtype() (in module ivy)": [[175, "ivy.set_default_complex_dtype"], [602, "ivy.set_default_complex_dtype"]], "set_default_dtype() (in module ivy)": [[176, "ivy.set_default_dtype"], [602, "ivy.set_default_dtype"]], "set_default_float_dtype() (in module ivy)": [[177, "ivy.set_default_float_dtype"], [602, "ivy.set_default_float_dtype"]], "set_default_int_dtype() (in module ivy)": [[178, "ivy.set_default_int_dtype"], [602, "ivy.set_default_int_dtype"]], "set_default_uint_dtype() (in module ivy)": [[179, "ivy.set_default_uint_dtype"], [602, "ivy.set_default_uint_dtype"]], "type_promote_arrays() (in module ivy)": [[180, "ivy.type_promote_arrays"], [602, "ivy.type_promote_arrays"]], "unset_default_complex_dtype() (in module ivy)": [[181, "ivy.unset_default_complex_dtype"], [602, "ivy.unset_default_complex_dtype"]], "unset_default_dtype() (in module ivy)": [[182, "ivy.unset_default_dtype"], [602, "ivy.unset_default_dtype"]], "unset_default_float_dtype() (in module ivy)": [[183, "ivy.unset_default_float_dtype"], [602, "ivy.unset_default_float_dtype"]], "unset_default_int_dtype() (in module ivy)": [[184, "ivy.unset_default_int_dtype"], [602, "ivy.unset_default_int_dtype"]], "unset_default_uint_dtype() (in module ivy)": [[185, "ivy.unset_default_uint_dtype"], [602, "ivy.unset_default_uint_dtype"]], "valid_dtype() (in module ivy)": [[186, "ivy.valid_dtype"], [602, "ivy.valid_dtype"]], "as_ivy_dev() (in module ivy)": [[187, "ivy.as_ivy_dev"], [603, "ivy.as_ivy_dev"]], "as_native_dev() (in module ivy)": [[188, "ivy.as_native_dev"], [603, "ivy.as_native_dev"]], "clear_cached_mem_on_dev() (in module ivy)": [[189, "ivy.clear_cached_mem_on_dev"], [603, "ivy.clear_cached_mem_on_dev"]], "default_device() (in module ivy)": [[190, "ivy.default_device"], [603, "ivy.default_device"]], "dev() (in module ivy)": [[191, "ivy.dev"], [603, "ivy.dev"]], "dev() (ivy.array method)": [[191, "ivy.Array.dev"]], "dev() (ivy.container method)": [[191, "ivy.Container.dev"]], "dev_util() (in module ivy)": [[192, "ivy.dev_util"], [603, "ivy.dev_util"]], "function_supported_devices() (in module ivy)": [[193, "ivy.function_supported_devices"], [603, "ivy.function_supported_devices"]], "function_unsupported_devices() (in module ivy)": [[194, "ivy.function_unsupported_devices"], [603, "ivy.function_unsupported_devices"]], "get_all_ivy_arrays_on_dev() (in module ivy)": [[195, "ivy.get_all_ivy_arrays_on_dev"], [603, "ivy.get_all_ivy_arrays_on_dev"]], "gpu_is_available() (in module ivy)": [[196, "ivy.gpu_is_available"], [603, "ivy.gpu_is_available"]], "handle_soft_device_variable() (in module ivy)": [[197, "ivy.handle_soft_device_variable"], [603, "ivy.handle_soft_device_variable"]], "num_cpu_cores() (in module ivy)": [[198, "ivy.num_cpu_cores"], [603, "ivy.num_cpu_cores"]], "num_gpus() (in module ivy)": [[199, "ivy.num_gpus"], [603, "ivy.num_gpus"]], "num_ivy_arrays_on_dev() (in module ivy)": [[200, "ivy.num_ivy_arrays_on_dev"], [603, "ivy.num_ivy_arrays_on_dev"]], "percent_used_mem_on_dev() (in module ivy)": [[201, "ivy.percent_used_mem_on_dev"], [603, "ivy.percent_used_mem_on_dev"]], "print_all_ivy_arrays_on_dev() (in module ivy)": [[202, "ivy.print_all_ivy_arrays_on_dev"], [603, "ivy.print_all_ivy_arrays_on_dev"]], "set_default_device() (in module ivy)": [[203, "ivy.set_default_device"], [603, "ivy.set_default_device"]], "set_soft_device_mode() (in module ivy)": [[204, "ivy.set_soft_device_mode"], [603, "ivy.set_soft_device_mode"]], "set_split_factor() (in module ivy)": [[205, "ivy.set_split_factor"], [603, "ivy.set_split_factor"]], "split_factor() (in module ivy)": [[206, "ivy.split_factor"], [603, "ivy.split_factor"]], "split_func_call() (in module ivy)": [[207, "ivy.split_func_call"], [603, "ivy.split_func_call"]], "to_device() (in module ivy)": [[208, "ivy.to_device"], [603, "ivy.to_device"]], "to_device() (ivy.array method)": [[208, "ivy.Array.to_device"]], "to_device() (ivy.container method)": [[208, "ivy.Container.to_device"]], "total_mem_on_dev() (in module ivy)": [[209, "ivy.total_mem_on_dev"], [603, "ivy.total_mem_on_dev"]], "tpu_is_available() (in module ivy)": [[210, "ivy.tpu_is_available"], [603, "ivy.tpu_is_available"]], "unset_default_device() (in module ivy)": [[211, "ivy.unset_default_device"], [603, "ivy.unset_default_device"]], "unset_soft_device_mode() (in module ivy)": [[212, "ivy.unset_soft_device_mode"], [603, "ivy.unset_soft_device_mode"]], "used_mem_on_dev() (in module ivy)": [[213, "ivy.used_mem_on_dev"], [603, "ivy.used_mem_on_dev"]], "abs() (in module ivy)": [[214, "ivy.abs"], [604, "ivy.abs"]], "abs() (ivy.array method)": [[214, "ivy.Array.abs"]], "abs() (ivy.container method)": [[214, "ivy.Container.abs"]], "acos() (in module ivy)": [[215, "ivy.acos"], [604, "ivy.acos"]], "acos() (ivy.array method)": [[215, "ivy.Array.acos"]], "acos() (ivy.container method)": [[215, "ivy.Container.acos"]], "acosh() (in module ivy)": [[216, "ivy.acosh"], [604, "ivy.acosh"]], "acosh() (ivy.array method)": [[216, "ivy.Array.acosh"]], "acosh() (ivy.container method)": [[216, "ivy.Container.acosh"]], "add() (in module ivy)": [[217, "ivy.add"], [604, "ivy.add"]], "add() (ivy.array method)": [[217, "ivy.Array.add"]], "add() (ivy.container method)": [[217, "ivy.Container.add"]], "angle() (in module ivy)": [[218, "ivy.angle"], [604, "ivy.angle"]], "angle() (ivy.array method)": [[218, "ivy.Array.angle"]], "angle() (ivy.container method)": [[218, "ivy.Container.angle"]], "asin() (in module ivy)": [[219, "ivy.asin"], [604, "ivy.asin"]], "asin() (ivy.array method)": [[219, "ivy.Array.asin"]], "asin() (ivy.container method)": [[219, "ivy.Container.asin"]], "asinh() (in module ivy)": [[220, "ivy.asinh"], [604, "ivy.asinh"]], "asinh() (ivy.array method)": [[220, "ivy.Array.asinh"]], "asinh() (ivy.container method)": [[220, "ivy.Container.asinh"]], "atan() (in module ivy)": [[221, "ivy.atan"], [604, "ivy.atan"]], "atan() (ivy.array method)": [[221, "ivy.Array.atan"]], "atan() (ivy.container method)": [[221, "ivy.Container.atan"]], "atan2() (in module ivy)": [[222, "ivy.atan2"], [604, "ivy.atan2"]], "atan2() (ivy.array method)": [[222, "ivy.Array.atan2"]], "atan2() (ivy.container method)": [[222, "ivy.Container.atan2"]], "atanh() (in module ivy)": [[223, "ivy.atanh"], [604, "ivy.atanh"]], "atanh() (ivy.array method)": [[223, "ivy.Array.atanh"]], "atanh() (ivy.container method)": [[223, "ivy.Container.atanh"]], "bitwise_and() (in module ivy)": [[224, "ivy.bitwise_and"], [604, "ivy.bitwise_and"]], "bitwise_and() (ivy.array method)": [[224, "ivy.Array.bitwise_and"]], "bitwise_and() (ivy.container method)": [[224, "ivy.Container.bitwise_and"]], "bitwise_invert() (in module ivy)": [[225, "ivy.bitwise_invert"], [604, "ivy.bitwise_invert"]], "bitwise_invert() (ivy.array method)": [[225, "ivy.Array.bitwise_invert"]], "bitwise_invert() (ivy.container method)": [[225, "ivy.Container.bitwise_invert"]], "bitwise_left_shift() (in module ivy)": [[226, "ivy.bitwise_left_shift"], [604, "ivy.bitwise_left_shift"]], "bitwise_left_shift() (ivy.array method)": [[226, "ivy.Array.bitwise_left_shift"]], "bitwise_left_shift() (ivy.container method)": [[226, "ivy.Container.bitwise_left_shift"]], "bitwise_or() (in module ivy)": [[227, "ivy.bitwise_or"], [604, "ivy.bitwise_or"]], "bitwise_or() (ivy.array method)": [[227, "ivy.Array.bitwise_or"]], "bitwise_or() (ivy.container method)": [[227, "ivy.Container.bitwise_or"]], "bitwise_right_shift() (in module ivy)": [[228, "ivy.bitwise_right_shift"], [604, "ivy.bitwise_right_shift"]], "bitwise_right_shift() (ivy.array method)": [[228, "ivy.Array.bitwise_right_shift"]], "bitwise_right_shift() (ivy.container method)": [[228, "ivy.Container.bitwise_right_shift"]], "bitwise_xor() (in module ivy)": [[229, "ivy.bitwise_xor"], [604, "ivy.bitwise_xor"]], "bitwise_xor() (ivy.array method)": [[229, "ivy.Array.bitwise_xor"]], "bitwise_xor() (ivy.container method)": [[229, "ivy.Container.bitwise_xor"]], "ceil() (in module ivy)": [[230, "ivy.ceil"], [604, "ivy.ceil"]], "ceil() (ivy.array method)": [[230, "ivy.Array.ceil"]], "ceil() (ivy.container method)": [[230, "ivy.Container.ceil"]], "cos() (in module ivy)": [[231, "ivy.cos"], [604, "ivy.cos"]], "cos() (ivy.array method)": [[231, "ivy.Array.cos"]], "cos() (ivy.container method)": [[231, "ivy.Container.cos"]], "cosh() (in module ivy)": [[232, "ivy.cosh"], [604, "ivy.cosh"]], "cosh() (ivy.array method)": [[232, "ivy.Array.cosh"]], "cosh() (ivy.container method)": [[232, "ivy.Container.cosh"]], "deg2rad() (in module ivy)": [[233, "ivy.deg2rad"], [604, "ivy.deg2rad"]], "deg2rad() (ivy.array method)": [[233, "ivy.Array.deg2rad"]], "deg2rad() (ivy.container method)": [[233, "ivy.Container.deg2rad"]], "divide() (in module ivy)": [[234, "ivy.divide"], [604, "ivy.divide"]], "divide() (ivy.array method)": [[234, "ivy.Array.divide"]], "divide() (ivy.container method)": [[234, "ivy.Container.divide"]], "equal() (in module ivy)": [[235, "ivy.equal"], [604, "ivy.equal"]], "equal() (ivy.array method)": [[235, "ivy.Array.equal"]], "equal() (ivy.container method)": [[235, "ivy.Container.equal"]], "erf() (in module ivy)": [[236, "ivy.erf"], [604, "ivy.erf"]], "erf() (ivy.array method)": [[236, "ivy.Array.erf"]], "erf() (ivy.container method)": [[236, "ivy.Container.erf"]], "exp() (in module ivy)": [[237, "ivy.exp"], [604, "ivy.exp"]], "exp() (ivy.array method)": [[237, "ivy.Array.exp"]], "exp() (ivy.container method)": [[237, "ivy.Container.exp"]], "exp2() (in module ivy)": [[238, "ivy.exp2"], [604, "ivy.exp2"]], "exp2() (ivy.array method)": [[238, "ivy.Array.exp2"]], "exp2() (ivy.container method)": [[238, "ivy.Container.exp2"]], "expm1() (in module ivy)": [[239, "ivy.expm1"], [604, "ivy.expm1"]], "expm1() (ivy.array method)": [[239, "ivy.Array.expm1"]], "expm1() (ivy.container method)": [[239, "ivy.Container.expm1"]], "floor() (in module ivy)": [[240, "ivy.floor"], [604, "ivy.floor"]], "floor() (ivy.array method)": [[240, "ivy.Array.floor"]], "floor() (ivy.container method)": [[240, "ivy.Container.floor"]], "floor_divide() (in module ivy)": [[241, "ivy.floor_divide"], [604, "ivy.floor_divide"]], "floor_divide() (ivy.array method)": [[241, "ivy.Array.floor_divide"]], "floor_divide() (ivy.container method)": [[241, "ivy.Container.floor_divide"]], "fmin() (in module ivy)": [[242, "ivy.fmin"], [604, "ivy.fmin"]], "fmin() (ivy.array method)": [[242, "ivy.Array.fmin"]], "fmin() (ivy.container method)": [[242, "ivy.Container.fmin"]], "fmod() (in module ivy)": [[243, "ivy.fmod"], [604, "ivy.fmod"]], "fmod() (ivy.array method)": [[243, "ivy.Array.fmod"]], "fmod() (ivy.container method)": [[243, "ivy.Container.fmod"]], "gcd() (in module ivy)": [[244, "ivy.gcd"], [604, "ivy.gcd"]], "gcd() (ivy.array method)": [[244, "ivy.Array.gcd"]], "gcd() (ivy.container method)": [[244, "ivy.Container.gcd"]], "greater() (in module ivy)": [[245, "ivy.greater"], [604, "ivy.greater"]], "greater() (ivy.array method)": [[245, "ivy.Array.greater"]], "greater() (ivy.container method)": [[245, "ivy.Container.greater"]], "greater_equal() (in module ivy)": [[246, "ivy.greater_equal"], [604, "ivy.greater_equal"]], "greater_equal() (ivy.array method)": [[246, "ivy.Array.greater_equal"]], "greater_equal() (ivy.container method)": [[246, "ivy.Container.greater_equal"]], "imag() (in module ivy)": [[247, "ivy.imag"], [604, "ivy.imag"]], "imag() (ivy.array method)": [[247, "ivy.Array.imag"]], "imag() (ivy.container method)": [[247, "ivy.Container.imag"]], "isfinite() (in module ivy)": [[248, "ivy.isfinite"], [604, "ivy.isfinite"]], "isfinite() (ivy.array method)": [[248, "ivy.Array.isfinite"]], "isfinite() (ivy.container method)": [[248, "ivy.Container.isfinite"]], "isinf() (in module ivy)": [[249, "ivy.isinf"], [604, "ivy.isinf"]], "isinf() (ivy.array method)": [[249, "ivy.Array.isinf"]], "isinf() (ivy.container method)": [[249, "ivy.Container.isinf"]], "isnan() (in module ivy)": [[250, "ivy.isnan"], [604, "ivy.isnan"]], "isnan() (ivy.array method)": [[250, "ivy.Array.isnan"]], "isnan() (ivy.container method)": [[250, "ivy.Container.isnan"]], "isreal() (in module ivy)": [[251, "ivy.isreal"], [604, "ivy.isreal"]], "isreal() (ivy.array method)": [[251, "ivy.Array.isreal"]], "isreal() (ivy.container method)": [[251, "ivy.Container.isreal"]], "lcm() (in module ivy)": [[252, "ivy.lcm"], [604, "ivy.lcm"]], "lcm() (ivy.array method)": [[252, "ivy.Array.lcm"]], "lcm() (ivy.container method)": [[252, "ivy.Container.lcm"]], "less() (in module ivy)": [[253, "ivy.less"], [604, "ivy.less"]], "less() (ivy.array method)": [[253, "ivy.Array.less"]], "less() (ivy.container method)": [[253, "ivy.Container.less"]], "less_equal() (in module ivy)": [[254, "ivy.less_equal"], [604, "ivy.less_equal"]], "less_equal() (ivy.array method)": [[254, "ivy.Array.less_equal"]], "less_equal() (ivy.container method)": [[254, "ivy.Container.less_equal"]], "log() (in module ivy)": [[255, "ivy.log"], [604, "ivy.log"]], "log() (ivy.array method)": [[255, "ivy.Array.log"]], "log() (ivy.container method)": [[255, "ivy.Container.log"]], "log10() (in module ivy)": [[256, "ivy.log10"], [604, "ivy.log10"]], "log10() (ivy.array method)": [[256, "ivy.Array.log10"]], "log10() (ivy.container method)": [[256, "ivy.Container.log10"]], "log1p() (in module ivy)": [[257, "ivy.log1p"], [604, "ivy.log1p"]], "log1p() (ivy.array method)": [[257, "ivy.Array.log1p"]], "log1p() (ivy.container method)": [[257, "ivy.Container.log1p"]], "log2() (in module ivy)": [[258, "ivy.log2"], [604, "ivy.log2"]], "log2() (ivy.array method)": [[258, "ivy.Array.log2"]], "log2() (ivy.container method)": [[258, "ivy.Container.log2"]], "logaddexp() (in module ivy)": [[259, "ivy.logaddexp"], [604, "ivy.logaddexp"]], "logaddexp() (ivy.array method)": [[259, "ivy.Array.logaddexp"]], "logaddexp() (ivy.container method)": [[259, "ivy.Container.logaddexp"]], "logaddexp2() (in module ivy)": [[260, "ivy.logaddexp2"], [604, "ivy.logaddexp2"]], "logaddexp2() (ivy.array method)": [[260, "ivy.Array.logaddexp2"]], "logaddexp2() (ivy.container method)": [[260, "ivy.Container.logaddexp2"]], "logical_and() (in module ivy)": [[261, "ivy.logical_and"], [604, "ivy.logical_and"]], "logical_and() (ivy.array method)": [[261, "ivy.Array.logical_and"]], "logical_and() (ivy.container method)": [[261, "ivy.Container.logical_and"]], "logical_not() (in module ivy)": [[262, "ivy.logical_not"], [604, "ivy.logical_not"]], "logical_not() (ivy.array method)": [[262, "ivy.Array.logical_not"]], "logical_not() (ivy.container method)": [[262, "ivy.Container.logical_not"]], "logical_or() (in module ivy)": [[263, "ivy.logical_or"], [604, "ivy.logical_or"]], "logical_or() (ivy.array method)": [[263, "ivy.Array.logical_or"]], "logical_or() (ivy.container method)": [[263, "ivy.Container.logical_or"]], "logical_xor() (in module ivy)": [[264, "ivy.logical_xor"], [604, "ivy.logical_xor"]], "logical_xor() (ivy.array method)": [[264, "ivy.Array.logical_xor"]], "logical_xor() (ivy.container method)": [[264, "ivy.Container.logical_xor"]], "maximum() (in module ivy)": [[265, "ivy.maximum"], [604, "ivy.maximum"]], "maximum() (ivy.array method)": [[265, "ivy.Array.maximum"]], "maximum() (ivy.container method)": [[265, "ivy.Container.maximum"]], "minimum() (in module ivy)": [[266, "ivy.minimum"], [604, "ivy.minimum"]], "minimum() (ivy.array method)": [[266, "ivy.Array.minimum"]], "minimum() (ivy.container method)": [[266, "ivy.Container.minimum"]], "multiply() (in module ivy)": [[267, "ivy.multiply"], [604, "ivy.multiply"]], "multiply() (ivy.array method)": [[267, "ivy.Array.multiply"]], "multiply() (ivy.container method)": [[267, "ivy.Container.multiply"]], "nan_to_num() (in module ivy)": [[268, "ivy.nan_to_num"], [604, "ivy.nan_to_num"]], "nan_to_num() (ivy.array method)": [[268, "ivy.Array.nan_to_num"]], "nan_to_num() (ivy.container method)": [[268, "ivy.Container.nan_to_num"]], "negative() (in module ivy)": [[269, "ivy.negative"], [604, "ivy.negative"]], "negative() (ivy.array method)": [[269, "ivy.Array.negative"]], "negative() (ivy.container method)": [[269, "ivy.Container.negative"]], "not_equal() (in module ivy)": [[270, "ivy.not_equal"], [604, "ivy.not_equal"]], "not_equal() (ivy.array method)": [[270, "ivy.Array.not_equal"]], "not_equal() (ivy.container method)": [[270, "ivy.Container.not_equal"]], "positive() (in module ivy)": [[271, "ivy.positive"], [604, "ivy.positive"]], "positive() (ivy.array method)": [[271, "ivy.Array.positive"]], "positive() (ivy.container method)": [[271, "ivy.Container.positive"]], "pow() (in module ivy)": [[272, "ivy.pow"], [604, "ivy.pow"]], "pow() (ivy.array method)": [[272, "ivy.Array.pow"]], "pow() (ivy.container method)": [[272, "ivy.Container.pow"]], "rad2deg() (in module ivy)": [[273, "ivy.rad2deg"], [604, "ivy.rad2deg"]], "rad2deg() (ivy.array method)": [[273, "ivy.Array.rad2deg"]], "rad2deg() (ivy.container method)": [[273, "ivy.Container.rad2deg"]], "real() (in module ivy)": [[274, "ivy.real"], [604, "ivy.real"]], "real() (ivy.array method)": [[274, "ivy.Array.real"]], "real() (ivy.container method)": [[274, "ivy.Container.real"]], "reciprocal() (in module ivy)": [[275, "ivy.reciprocal"], [604, "ivy.reciprocal"]], "reciprocal() (ivy.array method)": [[275, "ivy.Array.reciprocal"]], "reciprocal() (ivy.container method)": [[275, "ivy.Container.reciprocal"]], "remainder() (in module ivy)": [[276, "ivy.remainder"], [604, "ivy.remainder"]], "remainder() (ivy.array method)": [[276, "ivy.Array.remainder"]], "remainder() (ivy.container method)": [[276, "ivy.Container.remainder"]], "round() (in module ivy)": [[277, "ivy.round"], [604, "ivy.round"]], "round() (ivy.array method)": [[277, "ivy.Array.round"]], "round() (ivy.container method)": [[277, "ivy.Container.round"]], "sign() (in module ivy)": [[278, "ivy.sign"], [604, "ivy.sign"]], "sign() (ivy.array method)": [[278, "ivy.Array.sign"]], "sign() (ivy.container method)": [[278, "ivy.Container.sign"]], "sin() (in module ivy)": [[279, "ivy.sin"], [604, "ivy.sin"]], "sin() (ivy.array method)": [[279, "ivy.Array.sin"]], "sin() (ivy.container method)": [[279, "ivy.Container.sin"]], "sinh() (in module ivy)": [[280, "ivy.sinh"], [604, "ivy.sinh"]], "sinh() (ivy.array method)": [[280, "ivy.Array.sinh"]], "sinh() (ivy.container method)": [[280, "ivy.Container.sinh"]], "sqrt() (in module ivy)": [[281, "ivy.sqrt"], [604, "ivy.sqrt"]], "sqrt() (ivy.array method)": [[281, "ivy.Array.sqrt"]], "sqrt() (ivy.container method)": [[281, "ivy.Container.sqrt"]], "square() (in module ivy)": [[282, "ivy.square"], [604, "ivy.square"]], "square() (ivy.array method)": [[282, "ivy.Array.square"]], "square() (ivy.container method)": [[282, "ivy.Container.square"]], "subtract() (in module ivy)": [[283, "ivy.subtract"], [604, "ivy.subtract"]], "subtract() (ivy.array method)": [[283, "ivy.Array.subtract"]], "subtract() (ivy.container method)": [[283, "ivy.Container.subtract"]], "tan() (in module ivy)": [[284, "ivy.tan"], [604, "ivy.tan"]], "tan() (ivy.array method)": [[284, "ivy.Array.tan"]], "tan() (ivy.container method)": [[284, "ivy.Container.tan"]], "tanh() (in module ivy)": [[285, "ivy.tanh"], [604, "ivy.tanh"]], "tanh() (ivy.array method)": [[285, "ivy.Array.tanh"]], "tanh() (ivy.container method)": [[285, "ivy.Container.tanh"]], "trapz() (in module ivy)": [[286, "ivy.trapz"], [604, "ivy.trapz"]], "trapz() (ivy.array method)": [[286, "ivy.Array.trapz"]], "trapz() (ivy.container method)": [[286, "ivy.Container.trapz"]], "trunc() (in module ivy)": [[287, "ivy.trunc"], [604, "ivy.trunc"]], "trunc() (ivy.array method)": [[287, "ivy.Array.trunc"]], "trunc() (ivy.container method)": [[287, "ivy.Container.trunc"]], "trunc_divide() (in module ivy)": [[288, "ivy.trunc_divide"], [604, "ivy.trunc_divide"]], "trunc_divide() (ivy.array method)": [[288, "ivy.Array.trunc_divide"]], "trunc_divide() (ivy.container method)": [[288, "ivy.Container.trunc_divide"]], "celu() (in module ivy)": [[289, "ivy.celu"], [350, "ivy.celu"]], "celu() (ivy.array method)": [[289, "ivy.Array.celu"]], "celu() (ivy.container method)": [[289, "ivy.Container.celu"]], "elu() (in module ivy)": [[290, "ivy.elu"], [350, "ivy.elu"]], "elu() (ivy.array method)": [[290, "ivy.Array.elu"]], "elu() (ivy.container method)": [[290, "ivy.Container.elu"]], "hardtanh() (in module ivy)": [[291, "ivy.hardtanh"], [350, "ivy.hardtanh"]], "hardtanh() (ivy.array method)": [[291, "ivy.Array.hardtanh"]], "hardtanh() (ivy.container method)": [[291, "ivy.Container.hardtanh"]], "logit() (in module ivy)": [[292, "ivy.logit"], [350, "ivy.logit"]], "logit() (ivy.array method)": [[292, "ivy.Array.logit"]], "logit() (ivy.container method)": [[292, "ivy.Container.logit"]], "logsigmoid() (in module ivy)": [[293, "ivy.logsigmoid"], [350, "ivy.logsigmoid"]], "logsigmoid() (ivy.array method)": [[293, "ivy.Array.logsigmoid"]], "logsigmoid() (ivy.container method)": [[293, "ivy.Container.logsigmoid"]], "prelu() (in module ivy)": [[294, "ivy.prelu"], [350, "ivy.prelu"]], "prelu() (ivy.array method)": [[294, "ivy.Array.prelu"]], "prelu() (ivy.container method)": [[294, "ivy.Container.prelu"]], "relu6() (in module ivy)": [[295, "ivy.relu6"], [350, "ivy.relu6"]], "relu6() (ivy.array method)": [[295, "ivy.Array.relu6"]], "relu6() (ivy.container method)": [[295, "ivy.Container.relu6"]], "selu() (in module ivy)": [[296, "ivy.selu"], [350, "ivy.selu"]], "selu() (ivy.array method)": [[296, "ivy.Array.selu"]], "selu() (ivy.container method)": [[296, "ivy.Container.selu"]], "silu() (in module ivy)": [[297, "ivy.silu"], [350, "ivy.silu"]], "silu() (ivy.array method)": [[297, "ivy.Array.silu"]], "silu() (ivy.container method)": [[297, "ivy.Container.silu"]], "tanhshrink() (in module ivy)": [[298, "ivy.tanhshrink"], [350, "ivy.tanhshrink"]], "tanhshrink() (ivy.array method)": [[298, "ivy.Array.tanhshrink"]], "tanhshrink() (ivy.container method)": [[298, "ivy.Container.tanhshrink"]], "thresholded_relu() (in module ivy)": [[299, "ivy.thresholded_relu"], [350, "ivy.thresholded_relu"]], "thresholded_relu() (ivy.array method)": [[299, "ivy.Array.thresholded_relu"]], "thresholded_relu() (ivy.container method)": [[299, "ivy.Container.thresholded_relu"]], "blackman_window() (in module ivy)": [[300, "ivy.blackman_window"], [352, "ivy.blackman_window"]], "blackman_window() (ivy.array method)": [[300, "ivy.Array.blackman_window"]], "blackman_window() (ivy.container method)": [[300, "ivy.Container.blackman_window"]], "eye_like() (in module ivy)": [[301, "ivy.eye_like"], [352, "ivy.eye_like"]], "eye_like() (ivy.array method)": [[301, "ivy.Array.eye_like"]], "eye_like() (ivy.container method)": [[301, "ivy.Container.eye_like"]], "hamming_window() (in module ivy)": [[302, "ivy.hamming_window"], [352, "ivy.hamming_window"]], "hamming_window() (ivy.container method)": [[302, "ivy.Container.hamming_window"]], "hann_window() (in module ivy)": [[303, "ivy.hann_window"], [352, "ivy.hann_window"]], "hann_window() (ivy.container method)": [[303, "ivy.Container.hann_window"]], "indices() (in module ivy)": [[304, "ivy.indices"], [352, "ivy.indices"]], "kaiser_bessel_derived_window() (in module ivy)": [[305, "ivy.kaiser_bessel_derived_window"], [352, "ivy.kaiser_bessel_derived_window"]], "kaiser_bessel_derived_window() (ivy.container method)": [[305, "ivy.Container.kaiser_bessel_derived_window"]], "kaiser_window() (in module ivy)": [[306, "ivy.kaiser_window"], [352, "ivy.kaiser_window"]], "kaiser_window() (ivy.container method)": [[306, "ivy.Container.kaiser_window"]], "mel_weight_matrix() (in module ivy)": [[307, "ivy.mel_weight_matrix"], [352, "ivy.mel_weight_matrix"]], "mel_weight_matrix() (ivy.array static method)": [[307, "ivy.Array.mel_weight_matrix"]], "mel_weight_matrix() (ivy.container method)": [[307, "ivy.Container.mel_weight_matrix"]], "ndenumerate() (in module ivy)": [[308, "ivy.ndenumerate"], [352, "ivy.ndenumerate"]], "ndindex() (in module ivy)": [[309, "ivy.ndindex"], [352, "ivy.ndindex"]], "random_cp() (in module ivy)": [[310, "ivy.random_cp"], [352, "ivy.random_cp"]], "random_parafac2() (in module ivy)": [[311, "ivy.random_parafac2"], [352, "ivy.random_parafac2"]], "random_tr() (in module ivy)": [[312, "ivy.random_tr"], [352, "ivy.random_tr"]], "random_tt() (in module ivy)": [[313, "ivy.random_tt"], [352, "ivy.random_tt"]], "random_tucker() (in module ivy)": [[314, "ivy.random_tucker"], [352, "ivy.random_tucker"]], "tril_indices() (in module ivy)": [[315, "ivy.tril_indices"], [352, "ivy.tril_indices"]], "tril_indices() (ivy.container method)": [[315, "ivy.Container.tril_indices"]], "trilu() (in module ivy)": [[316, "ivy.trilu"], [352, "ivy.trilu"]], "trilu() (ivy.array method)": [[316, "ivy.Array.trilu"]], "trilu() (ivy.container method)": [[316, "ivy.Container.trilu"]], "unsorted_segment_min() (in module ivy)": [[317, "ivy.unsorted_segment_min"], [352, "ivy.unsorted_segment_min"]], "unsorted_segment_min() (ivy.array method)": [[317, "ivy.Array.unsorted_segment_min"]], "unsorted_segment_min() (ivy.container method)": [[317, "ivy.Container.unsorted_segment_min"]], "unsorted_segment_sum() (in module ivy)": [[318, "ivy.unsorted_segment_sum"], [352, "ivy.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.array method)": [[318, "ivy.Array.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.container method)": [[318, "ivy.Container.unsorted_segment_sum"]], "vorbis_window() (in module ivy)": [[319, "ivy.vorbis_window"], [352, "ivy.vorbis_window"]], "vorbis_window() (ivy.container method)": [[319, "ivy.Container.vorbis_window"]], "allclose() (in module ivy)": [[320, "ivy.allclose"], [355, "ivy.allclose"]], "allclose() (ivy.array method)": [[320, "ivy.Array.allclose"]], "allclose() (ivy.container method)": [[320, "ivy.Container.allclose"]], "amax() (in module ivy)": [[321, "ivy.amax"], [355, "ivy.amax"]], "amax() (ivy.array method)": [[321, "ivy.Array.amax"]], "amax() (ivy.container method)": [[321, "ivy.Container.amax"]], "amin() (in module ivy)": [[322, "ivy.amin"], [355, "ivy.amin"]], "amin() (ivy.array method)": [[322, "ivy.Array.amin"]], "amin() (ivy.container method)": [[322, "ivy.Container.amin"]], "binarizer() (in module ivy)": [[323, "ivy.binarizer"], [355, "ivy.binarizer"]], "binarizer() (ivy.array method)": [[323, "ivy.Array.binarizer"]], "binarizer() (ivy.container method)": [[323, "ivy.Container.binarizer"]], "conj() (in module ivy)": [[324, "ivy.conj"], [355, "ivy.conj"]], "conj() (ivy.array method)": [[324, "ivy.Array.conj"]], "conj() (ivy.container method)": [[324, "ivy.Container.conj"]], "copysign() (in module ivy)": [[325, "ivy.copysign"], [355, "ivy.copysign"]], "copysign() (ivy.array method)": [[325, "ivy.Array.copysign"]], "copysign() (ivy.container method)": [[325, "ivy.Container.copysign"]], "count_nonzero() (in module ivy)": [[326, "ivy.count_nonzero"], [355, "ivy.count_nonzero"]], "count_nonzero() (ivy.array method)": [[326, "ivy.Array.count_nonzero"]], "count_nonzero() (ivy.container method)": [[326, "ivy.Container.count_nonzero"]], "diff() (in module ivy)": [[327, "ivy.diff"], [355, "ivy.diff"]], "diff() (ivy.array method)": [[327, "ivy.Array.diff"]], "diff() (ivy.container method)": [[327, "ivy.Container.diff"]], "digamma() (in module ivy)": [[328, "ivy.digamma"], [355, "ivy.digamma"]], "digamma() (ivy.array method)": [[328, "ivy.Array.digamma"]], "digamma() (ivy.container method)": [[328, "ivy.Container.digamma"]], "erfc() (in module ivy)": [[329, "ivy.erfc"], [355, "ivy.erfc"]], "erfc() (ivy.array method)": [[329, "ivy.Array.erfc"]], "erfc() (ivy.container method)": [[329, "ivy.Container.erfc"]], "fix() (in module ivy)": [[330, "ivy.fix"], [355, "ivy.fix"]], "fix() (ivy.array method)": [[330, "ivy.Array.fix"]], "fix() (ivy.container method)": [[330, "ivy.Container.fix"]], "float_power() (in module ivy)": [[331, "ivy.float_power"], [355, "ivy.float_power"]], "float_power() (ivy.array method)": [[331, "ivy.Array.float_power"]], "float_power() (ivy.container method)": [[331, "ivy.Container.float_power"]], "fmax() (in module ivy)": [[332, "ivy.fmax"], [355, "ivy.fmax"]], "fmax() (ivy.array method)": [[332, "ivy.Array.fmax"]], "fmax() (ivy.container method)": [[332, "ivy.Container.fmax"]], "frexp() (in module ivy)": [[333, "ivy.frexp"], [355, "ivy.frexp"]], "frexp() (ivy.array method)": [[333, "ivy.Array.frexp"]], "frexp() (ivy.container method)": [[333, "ivy.Container.frexp"]], "gradient() (in module ivy)": [[334, "ivy.gradient"], [355, "ivy.gradient"]], "gradient() (ivy.array method)": [[334, "ivy.Array.gradient"]], "gradient() (ivy.container method)": [[334, "ivy.Container.gradient"]], "hypot() (in module ivy)": [[335, "ivy.hypot"], [355, "ivy.hypot"]], "hypot() (ivy.array method)": [[335, "ivy.Array.hypot"]], "hypot() (ivy.container method)": [[335, "ivy.Container.hypot"]], "isclose() (in module ivy)": [[336, "ivy.isclose"], [355, "ivy.isclose"]], "isclose() (ivy.array method)": [[336, "ivy.Array.isclose"]], "isclose() (ivy.container method)": [[336, "ivy.Container.isclose"]], "ldexp() (in module ivy)": [[337, "ivy.ldexp"], [355, "ivy.ldexp"]], "ldexp() (ivy.array method)": [[337, "ivy.Array.ldexp"]], "ldexp() (ivy.container method)": [[337, "ivy.Container.ldexp"]], "lerp() (in module ivy)": [[338, "ivy.lerp"], [355, "ivy.lerp"]], "lerp() (ivy.array method)": [[338, "ivy.Array.lerp"]], "lerp() (ivy.container method)": [[338, "ivy.Container.lerp"]], "lgamma() (in module ivy)": [[339, "ivy.lgamma"], [355, "ivy.lgamma"]], "lgamma() (ivy.array method)": [[339, "ivy.Array.lgamma"]], "modf() (in module ivy)": [[340, "ivy.modf"], [355, "ivy.modf"]], "modf() (ivy.array method)": [[340, "ivy.Array.modf"]], "modf() (ivy.container method)": [[340, "ivy.Container.modf"]], "nansum() (in module ivy)": [[341, "ivy.nansum"], [355, "ivy.nansum"]], "nansum() (ivy.array method)": [[341, "ivy.Array.nansum"]], "nansum() (ivy.container method)": [[341, "ivy.Container.nansum"]], "nextafter() (in module ivy)": [[342, "ivy.nextafter"], [355, "ivy.nextafter"]], "nextafter() (ivy.array method)": [[342, "ivy.Array.nextafter"]], "nextafter() (ivy.container method)": [[342, "ivy.Container.nextafter"]], "signbit() (in module ivy)": [[343, "ivy.signbit"], [355, "ivy.signbit"]], "signbit() (ivy.array method)": [[343, "ivy.Array.signbit"]], "signbit() (ivy.container method)": [[343, "ivy.Container.signbit"]], "sinc() (in module ivy)": [[344, "ivy.sinc"], [355, "ivy.sinc"]], "sinc() (ivy.array method)": [[344, "ivy.Array.sinc"]], "sinc() (ivy.container method)": [[344, "ivy.Container.sinc"]], "sparsify_tensor() (in module ivy)": [[345, "ivy.sparsify_tensor"], [355, "ivy.sparsify_tensor"]], "sparsify_tensor() (ivy.array method)": [[345, "ivy.Array.sparsify_tensor"]], "sparsify_tensor() (ivy.container method)": [[345, "ivy.Container.sparsify_tensor"]], "xlogy() (in module ivy)": [[346, "ivy.xlogy"], [355, "ivy.xlogy"]], "xlogy() (ivy.array method)": [[346, "ivy.Array.xlogy"]], "xlogy() (ivy.container method)": [[346, "ivy.Container.xlogy"]], "zeta() (in module ivy)": [[347, "ivy.zeta"], [355, "ivy.zeta"]], "zeta() (ivy.array method)": [[347, "ivy.Array.zeta"]], "zeta() (ivy.container method)": [[347, "ivy.Container.zeta"]], "reduce() (in module ivy)": [[348, "ivy.reduce"], [356, "ivy.reduce"]], "reduce() (ivy.array method)": [[348, "ivy.Array.reduce"]], "reduce() (ivy.container method)": [[348, "ivy.Container.reduce"]], "bind_custom_gradient_function() (in module ivy)": [[349, "ivy.bind_custom_gradient_function"], [357, "ivy.bind_custom_gradient_function"]], "ivy.functional.ivy.experimental.activations": [[350, "module-ivy.functional.ivy.experimental.activations"]], "ivy.functional.ivy.experimental.constants": [[351, "module-ivy.functional.ivy.experimental.constants"]], "ivy.functional.ivy.experimental.creation": [[352, "module-ivy.functional.ivy.experimental.creation"]], "ivy.functional.ivy.experimental.data_type": [[353, "module-ivy.functional.ivy.experimental.data_type"]], "ivy.functional.ivy.experimental.device": [[354, "module-ivy.functional.ivy.experimental.device"]], "ivy.functional.ivy.experimental.elementwise": [[355, "module-ivy.functional.ivy.experimental.elementwise"]], "ivy.functional.ivy.experimental.general": [[356, "module-ivy.functional.ivy.experimental.general"]], "ivy.functional.ivy.experimental.gradients": [[357, "module-ivy.functional.ivy.experimental.gradients"]], "adaptive_avg_pool1d() (in module ivy)": [[358, "ivy.adaptive_avg_pool1d"], [372, "ivy.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (in module ivy)": [[358, "ivy.adaptive_avg_pool2d"], [373, "ivy.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (in module ivy)": [[358, "ivy.adaptive_max_pool2d"], [374, "ivy.adaptive_max_pool2d"]], "area_interpolate() (in module ivy)": [[358, "ivy.area_interpolate"], [375, "ivy.area_interpolate"]], "avg_pool1d() (in module ivy)": [[358, "ivy.avg_pool1d"], [376, "ivy.avg_pool1d"]], "avg_pool2d() (in module ivy)": [[358, "ivy.avg_pool2d"], [377, "ivy.avg_pool2d"]], "avg_pool3d() (in module ivy)": [[358, "ivy.avg_pool3d"], [378, "ivy.avg_pool3d"]], "dct() (in module ivy)": [[358, "ivy.dct"], [379, "ivy.dct"]], "dft() (in module ivy)": [[358, "ivy.dft"], [380, "ivy.dft"]], "dropout1d() (in module ivy)": [[358, "ivy.dropout1d"], [381, "ivy.dropout1d"]], "dropout2d() (in module ivy)": [[358, "ivy.dropout2d"], [382, "ivy.dropout2d"]], "dropout3d() (in module ivy)": [[358, "ivy.dropout3d"], [383, "ivy.dropout3d"]], "embedding() (in module ivy)": [[358, "ivy.embedding"], [384, "ivy.embedding"]], "fft() (in module ivy)": [[358, "ivy.fft"], [385, "ivy.fft"]], "fft2() (in module ivy)": [[358, "ivy.fft2"], [386, "ivy.fft2"]], "generate_einsum_equation() (in module ivy)": [[358, "ivy.generate_einsum_equation"], [387, "ivy.generate_einsum_equation"]], "get_interpolate_kernel() (in module ivy)": [[358, "ivy.get_interpolate_kernel"], [388, "ivy.get_interpolate_kernel"]], "idct() (in module ivy)": [[358, "ivy.idct"], [389, "ivy.idct"]], "ifft() (in module ivy)": [[358, "ivy.ifft"], [390, "ivy.ifft"]], "ifftn() (in module ivy)": [[358, "ivy.ifftn"], [391, "ivy.ifftn"]], "interp() (in module ivy)": [[358, "ivy.interp"], [392, "ivy.interp"]], "interpolate() (in module ivy)": [[358, "ivy.interpolate"], [393, "ivy.interpolate"]], "ivy.functional.ivy.experimental.layers": [[358, "module-ivy.functional.ivy.experimental.layers"]], "max_pool1d() (in module ivy)": [[358, "ivy.max_pool1d"], [394, "ivy.max_pool1d"]], "max_pool2d() (in module ivy)": [[358, "ivy.max_pool2d"], [395, "ivy.max_pool2d"]], "max_pool3d() (in module ivy)": [[358, "ivy.max_pool3d"], [396, "ivy.max_pool3d"]], "max_unpool1d() (in module ivy)": [[358, "ivy.max_unpool1d"], [397, "ivy.max_unpool1d"]], "nearest_interpolate() (in module ivy)": [[358, "ivy.nearest_interpolate"], [398, "ivy.nearest_interpolate"]], "pool() (in module ivy)": [[358, "ivy.pool"], [399, "ivy.pool"]], "reduce_window() (in module ivy)": [[358, "ivy.reduce_window"], [400, "ivy.reduce_window"]], "rfft() (in module ivy)": [[358, "ivy.rfft"], [401, "ivy.rfft"]], "rfftn() (in module ivy)": [[358, "ivy.rfftn"], [402, "ivy.rfftn"]], "sliding_window() (in module ivy)": [[358, "ivy.sliding_window"], [403, "ivy.sliding_window"]], "stft() (in module ivy)": [[358, "ivy.stft"], [404, "ivy.stft"]], "adjoint() (in module ivy)": [[359, "ivy.adjoint"], [405, "ivy.adjoint"]], "batched_outer() (in module ivy)": [[359, "ivy.batched_outer"], [406, "ivy.batched_outer"]], "cond() (in module ivy)": [[359, "ivy.cond"], [407, "ivy.cond"]], "diagflat() (in module ivy)": [[359, "ivy.diagflat"], [408, "ivy.diagflat"]], "dot() (in module ivy)": [[359, "ivy.dot"], [409, "ivy.dot"]], "eig() (in module ivy)": [[359, "ivy.eig"], [410, "ivy.eig"], [609, "ivy.eig"], [643, "ivy.eig"]], "eigh_tridiagonal() (in module ivy)": [[359, "ivy.eigh_tridiagonal"], [411, "ivy.eigh_tridiagonal"]], "eigvals() (in module ivy)": [[359, "ivy.eigvals"], [412, "ivy.eigvals"]], "general_inner_product() (in module ivy)": [[359, "ivy.general_inner_product"], [413, "ivy.general_inner_product"]], "higher_order_moment() (in module ivy)": [[359, "ivy.higher_order_moment"], [414, "ivy.higher_order_moment"]], "initialize_tucker() (in module ivy)": [[359, "ivy.initialize_tucker"], [415, "ivy.initialize_tucker"]], "ivy.functional.ivy.experimental.linear_algebra": [[359, "module-ivy.functional.ivy.experimental.linear_algebra"]], "khatri_rao() (in module ivy)": [[359, "ivy.khatri_rao"], [416, "ivy.khatri_rao"]], "kron() (in module ivy)": [[359, "ivy.kron"], [417, "ivy.kron"]], "kronecker() (in module ivy)": [[359, "ivy.kronecker"], [418, "ivy.kronecker"]], "make_svd_non_negative() (in module ivy)": [[359, "ivy.make_svd_non_negative"], [419, "ivy.make_svd_non_negative"]], "matrix_exp() (in module ivy)": [[359, "ivy.matrix_exp"], [420, "ivy.matrix_exp"]], "mode_dot() (in module ivy)": [[359, "ivy.mode_dot"], [421, "ivy.mode_dot"]], "multi_dot() (in module ivy)": [[359, "ivy.multi_dot"], [422, "ivy.multi_dot"]], "multi_mode_dot() (in module ivy)": [[359, "ivy.multi_mode_dot"], [423, "ivy.multi_mode_dot"]], "partial_tucker() (in module ivy)": [[359, "ivy.partial_tucker"], [424, "ivy.partial_tucker"]], "solve_triangular() (in module ivy)": [[359, "ivy.solve_triangular"], [425, "ivy.solve_triangular"]], "svd_flip() (in module ivy)": [[359, "ivy.svd_flip"], [426, "ivy.svd_flip"]], "tensor_train() (in module ivy)": [[359, "ivy.tensor_train"], [427, "ivy.tensor_train"]], "truncated_svd() (in module ivy)": [[359, "ivy.truncated_svd"], [428, "ivy.truncated_svd"]], "tt_matrix_to_tensor() (in module ivy)": [[359, "ivy.tt_matrix_to_tensor"], [429, "ivy.tt_matrix_to_tensor"]], "tucker() (in module ivy)": [[359, "ivy.tucker"], [430, "ivy.tucker"]], "huber_loss() (in module ivy)": [[360, "ivy.huber_loss"], [431, "ivy.huber_loss"]], "ivy.functional.ivy.experimental.losses": [[360, "module-ivy.functional.ivy.experimental.losses"]], "kl_div() (in module ivy)": [[360, "ivy.kl_div"], [432, "ivy.kl_div"]], "l1_loss() (in module ivy)": [[360, "ivy.l1_loss"], [433, "ivy.l1_loss"]], "log_poisson_loss() (in module ivy)": [[360, "ivy.log_poisson_loss"], [434, "ivy.log_poisson_loss"]], "poisson_nll_loss() (in module ivy)": [[360, "ivy.poisson_nll_loss"], [435, "ivy.poisson_nll_loss"]], "smooth_l1_loss() (in module ivy)": [[360, "ivy.smooth_l1_loss"], [436, "ivy.smooth_l1_loss"]], "soft_margin_loss() (in module ivy)": [[360, "ivy.soft_margin_loss"], [437, "ivy.soft_margin_loss"]], "as_strided() (in module ivy)": [[361, "ivy.as_strided"], [438, "ivy.as_strided"]], "associative_scan() (in module ivy)": [[361, "ivy.associative_scan"], [439, "ivy.associative_scan"]], "atleast_1d() (in module ivy)": [[361, "ivy.atleast_1d"], [440, "ivy.atleast_1d"]], "atleast_2d() (in module ivy)": [[361, "ivy.atleast_2d"], [441, "ivy.atleast_2d"]], "atleast_3d() (in module ivy)": [[361, "ivy.atleast_3d"], [442, "ivy.atleast_3d"]], "broadcast_shapes() (in module ivy)": [[361, "ivy.broadcast_shapes"], [443, "ivy.broadcast_shapes"]], "choose() (in module ivy)": [[361, "ivy.choose"], [444, "ivy.choose"]], "column_stack() (in module ivy)": [[361, "ivy.column_stack"], [445, "ivy.column_stack"]], "concat_from_sequence() (in module ivy)": [[361, "ivy.concat_from_sequence"], [446, "ivy.concat_from_sequence"]], "dsplit() (in module ivy)": [[361, "ivy.dsplit"], [447, "ivy.dsplit"]], "dstack() (in module ivy)": [[361, "ivy.dstack"], [448, "ivy.dstack"]], "expand() (in module ivy)": [[361, "ivy.expand"], [449, "ivy.expand"]], "fill_diagonal() (in module ivy)": [[361, "ivy.fill_diagonal"], [450, "ivy.fill_diagonal"]], "flatten() (in module ivy)": [[361, "ivy.flatten"], [451, "ivy.flatten"]], "fliplr() (in module ivy)": [[361, "ivy.fliplr"], [452, "ivy.fliplr"]], "flipud() (in module ivy)": [[361, "ivy.flipud"], [453, "ivy.flipud"]], "fold() (in module ivy)": [[361, "ivy.fold"], [454, "ivy.fold"]], "heaviside() (in module ivy)": [[361, "ivy.heaviside"], [455, "ivy.heaviside"]], "hsplit() (in module ivy)": [[361, "ivy.hsplit"], [456, "ivy.hsplit"]], "hstack() (in module ivy)": [[361, "ivy.hstack"], [457, "ivy.hstack"]], "i0() (in module ivy)": [[361, "ivy.i0"], [458, "ivy.i0"]], "ivy.functional.ivy.experimental.manipulation": [[361, "module-ivy.functional.ivy.experimental.manipulation"]], "matricize() (in module ivy)": [[361, "ivy.matricize"], [459, "ivy.matricize"]], "moveaxis() (in module ivy)": [[361, "ivy.moveaxis"], [460, "ivy.moveaxis"]], "pad() (in module ivy)": [[361, "ivy.pad"], [461, "ivy.pad"]], "partial_fold() (in module ivy)": [[361, "ivy.partial_fold"], [462, "ivy.partial_fold"]], "partial_tensor_to_vec() (in module ivy)": [[361, "ivy.partial_tensor_to_vec"], [463, "ivy.partial_tensor_to_vec"]], "partial_unfold() (in module ivy)": [[361, "ivy.partial_unfold"], [464, "ivy.partial_unfold"]], "partial_vec_to_tensor() (in module ivy)": [[361, "ivy.partial_vec_to_tensor"], [465, "ivy.partial_vec_to_tensor"]], "put_along_axis() (in module ivy)": [[361, "ivy.put_along_axis"], [466, "ivy.put_along_axis"]], "rot90() (in module ivy)": [[361, "ivy.rot90"], [467, "ivy.rot90"]], "soft_thresholding() (in module ivy)": [[361, "ivy.soft_thresholding"], [468, "ivy.soft_thresholding"]], "take_along_axis() (in module ivy)": [[361, "ivy.take_along_axis"], [469, "ivy.take_along_axis"]], "top_k() (in module ivy)": [[361, "ivy.top_k"], [470, "ivy.top_k"]], "trim_zeros() (in module ivy)": [[361, "ivy.trim_zeros"], [471, "ivy.trim_zeros"]], "unfold() (in module ivy)": [[361, "ivy.unfold"], [472, "ivy.unfold"]], "unique_consecutive() (in module ivy)": [[361, "ivy.unique_consecutive"], [473, "ivy.unique_consecutive"]], "vsplit() (in module ivy)": [[361, "ivy.vsplit"], [474, "ivy.vsplit"]], "vstack() (in module ivy)": [[361, "ivy.vstack"], [475, "ivy.vstack"]], "ivy.functional.ivy.experimental.meta": [[362, "module-ivy.functional.ivy.experimental.meta"]], "ivy.functional.ivy.experimental.nest": [[363, "module-ivy.functional.ivy.experimental.nest"]], "batch_norm() (in module ivy)": [[364, "ivy.batch_norm"], [476, "ivy.batch_norm"]], "group_norm() (in module ivy)": [[364, "ivy.group_norm"], [477, "ivy.group_norm"]], "instance_norm() (in module ivy)": [[364, "ivy.instance_norm"], [478, "ivy.instance_norm"]], "ivy.functional.ivy.experimental.norms": [[364, "module-ivy.functional.ivy.experimental.norms"]], "l1_normalize() (in module ivy)": [[364, "ivy.l1_normalize"], [479, "ivy.l1_normalize"]], "l2_normalize() (in module ivy)": [[364, "ivy.l2_normalize"], [480, "ivy.l2_normalize"]], "lp_normalize() (in module ivy)": [[364, "ivy.lp_normalize"], [481, "ivy.lp_normalize"]], "bernoulli() (in module ivy)": [[365, "ivy.bernoulli"], [482, "ivy.bernoulli"]], "beta() (in module ivy)": [[365, "ivy.beta"], [483, "ivy.beta"]], "dirichlet() (in module ivy)": [[365, "ivy.dirichlet"], [484, "ivy.dirichlet"]], "gamma() (in module ivy)": [[365, "ivy.gamma"], [485, "ivy.gamma"]], "ivy.functional.ivy.experimental.random": [[365, "module-ivy.functional.ivy.experimental.random"]], "poisson() (in module ivy)": [[365, "ivy.poisson"], [486, "ivy.poisson"]], "ivy.functional.ivy.experimental.searching": [[366, "module-ivy.functional.ivy.experimental.searching"]], "unravel_index() (in module ivy)": [[366, "ivy.unravel_index"], [487, "ivy.unravel_index"]], "ivy.functional.ivy.experimental.set": [[367, "module-ivy.functional.ivy.experimental.set"]], "invert_permutation() (in module ivy)": [[368, "ivy.invert_permutation"], [488, "ivy.invert_permutation"]], "ivy.functional.ivy.experimental.sorting": [[368, "module-ivy.functional.ivy.experimental.sorting"]], "lexsort() (in module ivy)": [[368, "ivy.lexsort"], [489, "ivy.lexsort"]], "nativesparsearray (class in ivy)": [[369, "ivy.NativeSparseArray"]], "sparsearray (class in ivy)": [[369, "ivy.SparseArray"]], "is_ivy_sparse_array() (in module ivy)": [[369, "ivy.is_ivy_sparse_array"], [490, "ivy.is_ivy_sparse_array"]], "is_native_sparse_array() (in module ivy)": [[369, "ivy.is_native_sparse_array"], [491, "ivy.is_native_sparse_array"]], "ivy.functional.ivy.experimental.sparse_array": [[369, "module-ivy.functional.ivy.experimental.sparse_array"]], "native_sparse_array() (in module ivy)": [[369, "ivy.native_sparse_array"], [492, "ivy.native_sparse_array"]], "native_sparse_array_to_indices_values_and_shape() (in module ivy)": [[369, "ivy.native_sparse_array_to_indices_values_and_shape"], [493, "ivy.native_sparse_array_to_indices_values_and_shape"]], "bincount() (in module ivy)": [[370, "ivy.bincount"], [494, "ivy.bincount"]], "corrcoef() (in module ivy)": [[370, "ivy.corrcoef"], [495, "ivy.corrcoef"]], "cov() (in module ivy)": [[370, "ivy.cov"], [496, "ivy.cov"]], "cummax() (in module ivy)": [[370, "ivy.cummax"], [497, "ivy.cummax"]], "cummin() (in module ivy)": [[370, "ivy.cummin"], [498, "ivy.cummin"]], "histogram() (in module ivy)": [[370, "ivy.histogram"], [499, "ivy.histogram"]], "igamma() (in module ivy)": [[370, "ivy.igamma"], [500, "ivy.igamma"]], "ivy.functional.ivy.experimental.statistical": [[370, "module-ivy.functional.ivy.experimental.statistical"]], "median() (in module ivy)": [[370, "ivy.median"], [501, "ivy.median"]], "nanmean() (in module ivy)": [[370, "ivy.nanmean"], [502, "ivy.nanmean"]], "nanmedian() (in module ivy)": [[370, "ivy.nanmedian"], [503, "ivy.nanmedian"]], "nanprod() (in module ivy)": [[370, "ivy.nanprod"], [504, "ivy.nanprod"]], "quantile() (in module ivy)": [[370, "ivy.quantile"], [505, "ivy.quantile"]], "ivy.functional.ivy.experimental.utility": [[371, "module-ivy.functional.ivy.experimental.utility"]], "optional_get_element() (in module ivy)": [[371, "ivy.optional_get_element"], [506, "ivy.optional_get_element"]], "adaptive_avg_pool1d() (ivy.array method)": [[372, "ivy.Array.adaptive_avg_pool1d"]], "adaptive_avg_pool1d() (ivy.container method)": [[372, "ivy.Container.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.array method)": [[373, "ivy.Array.adaptive_avg_pool2d"]], "adaptive_avg_pool2d() (ivy.container method)": [[373, "ivy.Container.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.array method)": [[374, "ivy.Array.adaptive_max_pool2d"]], "adaptive_max_pool2d() (ivy.container method)": [[374, "ivy.Container.adaptive_max_pool2d"]], "avg_pool1d() (ivy.array method)": [[376, "ivy.Array.avg_pool1d"]], "avg_pool1d() (ivy.container method)": [[376, "ivy.Container.avg_pool1d"]], "avg_pool2d() (ivy.array method)": [[377, "ivy.Array.avg_pool2d"]], "avg_pool2d() (ivy.container method)": [[377, "ivy.Container.avg_pool2d"]], "avg_pool3d() (ivy.array method)": [[378, "ivy.Array.avg_pool3d"]], "avg_pool3d() (ivy.container method)": [[378, "ivy.Container.avg_pool3d"]], "dct() (ivy.array method)": [[379, "ivy.Array.dct"]], "dct() (ivy.container method)": [[379, "ivy.Container.dct"]], "dft() (ivy.array method)": [[380, "ivy.Array.dft"]], "dft() (ivy.container method)": [[380, "ivy.Container.dft"]], "dropout1d() (ivy.array method)": [[381, "ivy.Array.dropout1d"]], "dropout1d() (ivy.container method)": [[381, "ivy.Container.dropout1d"]], "dropout2d() (ivy.array method)": [[382, "ivy.Array.dropout2d"]], "dropout2d() (ivy.container method)": [[382, "ivy.Container.dropout2d"]], "dropout3d() (ivy.array method)": [[383, "ivy.Array.dropout3d"]], "dropout3d() (ivy.container method)": [[383, "ivy.Container.dropout3d"]], "embedding() (ivy.array method)": [[384, "ivy.Array.embedding"]], "embedding() (ivy.container method)": [[384, "ivy.Container.embedding"]], "fft() (ivy.array method)": [[385, "ivy.Array.fft"]], "fft() (ivy.container method)": [[385, "ivy.Container.fft"]], "fft2() (ivy.array method)": [[386, "ivy.Array.fft2"]], "idct() (ivy.array method)": [[389, "ivy.Array.idct"]], "idct() (ivy.container method)": [[389, "ivy.Container.idct"]], "ifft() (ivy.array method)": [[390, "ivy.Array.ifft"]], "ifft() (ivy.container method)": [[390, "ivy.Container.ifft"]], "ifftn() (ivy.array method)": [[391, "ivy.Array.ifftn"]], "ifftn() (ivy.container method)": [[391, "ivy.Container.ifftn"]], "interpolate() (ivy.array method)": [[393, "ivy.Array.interpolate"]], "interpolate() (ivy.container method)": [[393, "ivy.Container.interpolate"]], "max_pool1d() (ivy.array method)": [[394, "ivy.Array.max_pool1d"]], "max_pool1d() (ivy.container method)": [[394, "ivy.Container.max_pool1d"]], "max_pool2d() (ivy.array method)": [[395, "ivy.Array.max_pool2d"]], "max_pool2d() (ivy.container method)": [[395, "ivy.Container.max_pool2d"]], "max_pool3d() (ivy.array method)": [[396, "ivy.Array.max_pool3d"]], "max_pool3d() (ivy.container method)": [[396, "ivy.Container.max_pool3d"]], "max_unpool1d() (ivy.array method)": [[397, "ivy.Array.max_unpool1d"]], "max_unpool1d() (ivy.container method)": [[397, "ivy.Container.max_unpool1d"]], "reduce_window() (ivy.array method)": [[400, "ivy.Array.reduce_window"]], "reduce_window() (ivy.container method)": [[400, "ivy.Container.reduce_window"]], "rfft() (ivy.array method)": [[401, "ivy.Array.rfft"]], "rfft() (ivy.container method)": [[401, "ivy.Container.rfft"]], "rfftn() (ivy.array method)": [[402, "ivy.Array.rfftn"]], "rfftn() (ivy.container method)": [[402, "ivy.Container.rfftn"]], "sliding_window() (ivy.array method)": [[403, "ivy.Array.sliding_window"]], "sliding_window() (ivy.container method)": [[403, "ivy.Container.sliding_window"]], "stft() (ivy.array method)": [[404, "ivy.Array.stft"]], "stft() (ivy.container method)": [[404, "ivy.Container.stft"]], "adjoint() (ivy.array method)": [[405, "ivy.Array.adjoint"]], "adjoint() (ivy.container method)": [[405, "ivy.Container.adjoint"]], "batched_outer() (ivy.array method)": [[406, "ivy.Array.batched_outer"]], "batched_outer() (ivy.container method)": [[406, "ivy.Container.batched_outer"]], "cond() (ivy.array method)": [[407, "ivy.Array.cond"]], "cond() (ivy.container method)": [[407, "ivy.Container.cond"]], "diagflat() (ivy.array method)": [[408, "ivy.Array.diagflat"]], "diagflat() (ivy.container method)": [[408, "ivy.Container.diagflat"]], "dot() (ivy.array method)": [[409, "ivy.Array.dot"]], "dot() (ivy.container method)": [[409, "ivy.Container.dot"]], "eig() (ivy.array method)": [[410, "ivy.Array.eig"], [643, "ivy.Array.eig"]], "eig() (ivy.container method)": [[410, "ivy.Container.eig"], [643, "ivy.Container.eig"]], "eigh_tridiagonal() (ivy.array method)": [[411, "ivy.Array.eigh_tridiagonal"]], "eigh_tridiagonal() (ivy.container method)": [[411, "ivy.Container.eigh_tridiagonal"]], "eigvals() (ivy.array method)": [[412, "ivy.Array.eigvals"]], "eigvals() (ivy.container method)": [[412, "ivy.Container.eigvals"]], "general_inner_product() (ivy.array method)": [[413, "ivy.Array.general_inner_product"]], "general_inner_product() (ivy.container method)": [[413, "ivy.Container.general_inner_product"]], "higher_order_moment() (ivy.array method)": [[414, "ivy.Array.higher_order_moment"]], "higher_order_moment() (ivy.container method)": [[414, "ivy.Container.higher_order_moment"]], "initialize_tucker() (ivy.array method)": [[415, "ivy.Array.initialize_tucker"]], "initialize_tucker() (ivy.container method)": [[415, "ivy.Container.initialize_tucker"]], "kron() (ivy.array method)": [[417, "ivy.Array.kron"]], "kron() (ivy.container method)": [[417, "ivy.Container.kron"]], "make_svd_non_negative() (ivy.array method)": [[419, "ivy.Array.make_svd_non_negative"]], "make_svd_non_negative() (ivy.container method)": [[419, "ivy.Container.make_svd_non_negative"]], "matrix_exp() (ivy.array method)": [[420, "ivy.Array.matrix_exp"]], "matrix_exp() (ivy.container method)": [[420, "ivy.Container.matrix_exp"]], "mode_dot() (ivy.array method)": [[421, "ivy.Array.mode_dot"]], "mode_dot() (ivy.container method)": [[421, "ivy.Container.mode_dot"]], "multi_dot() (ivy.array method)": [[422, "ivy.Array.multi_dot"]], "multi_dot() (ivy.container method)": [[422, "ivy.Container.multi_dot"]], "multi_mode_dot() (ivy.array method)": [[423, "ivy.Array.multi_mode_dot"]], "multi_mode_dot() (ivy.container method)": [[423, "ivy.Container.multi_mode_dot"]], "partial_tucker() (ivy.array method)": [[424, "ivy.Array.partial_tucker"]], "partial_tucker() (ivy.container method)": [[424, "ivy.Container.partial_tucker"]], "svd_flip() (ivy.array method)": [[426, "ivy.Array.svd_flip"]], "svd_flip() (ivy.container method)": [[426, "ivy.Container.svd_flip"]], "tensor_train() (ivy.array method)": [[427, "ivy.Array.tensor_train"]], "tensor_train() (ivy.container method)": [[427, "ivy.Container.tensor_train"]], "truncated_svd() (ivy.array method)": [[428, "ivy.Array.truncated_svd"]], "truncated_svd() (ivy.container method)": [[428, "ivy.Container.truncated_svd"]], "tt_matrix_to_tensor() (ivy.array method)": [[429, "ivy.Array.tt_matrix_to_tensor"]], "tt_matrix_to_tensor() (ivy.container method)": [[429, "ivy.Container.tt_matrix_to_tensor"]], "tucker() (ivy.array method)": [[430, "ivy.Array.tucker"]], "tucker() (ivy.container method)": [[430, "ivy.Container.tucker"]], "huber_loss() (ivy.array method)": [[431, "ivy.Array.huber_loss"]], "huber_loss() (ivy.container method)": [[431, "ivy.Container.huber_loss"]], "kl_div() (ivy.array method)": [[432, "ivy.Array.kl_div"]], "kl_div() (ivy.container method)": [[432, "ivy.Container.kl_div"]], "l1_loss() (ivy.array method)": [[433, "ivy.Array.l1_loss"]], "l1_loss() (ivy.container method)": [[433, "ivy.Container.l1_loss"]], "log_poisson_loss() (ivy.array method)": [[434, "ivy.Array.log_poisson_loss"]], "log_poisson_loss() (ivy.container method)": [[434, "ivy.Container.log_poisson_loss"]], "poisson_nll_loss() (ivy.array method)": [[435, "ivy.Array.poisson_nll_loss"]], "poisson_nll_loss() (ivy.container method)": [[435, "ivy.Container.poisson_nll_loss"]], "smooth_l1_loss() (ivy.array method)": [[436, "ivy.Array.smooth_l1_loss"]], "smooth_l1_loss() (ivy.container method)": [[436, "ivy.Container.smooth_l1_loss"]], "soft_margin_loss() (ivy.array method)": [[437, "ivy.Array.soft_margin_loss"]], "soft_margin_loss() (ivy.container method)": [[437, "ivy.Container.soft_margin_loss"]], "as_strided() (ivy.array method)": [[438, "ivy.Array.as_strided"]], "as_strided() (ivy.container method)": [[438, "ivy.Container.as_strided"]], "associative_scan() (ivy.array method)": [[439, "ivy.Array.associative_scan"]], "associative_scan() (ivy.container method)": [[439, "ivy.Container.associative_scan"]], "atleast_1d() (ivy.array method)": [[440, "ivy.Array.atleast_1d"]], "atleast_1d() (ivy.container method)": [[440, "ivy.Container.atleast_1d"]], "atleast_2d() (ivy.array method)": [[441, "ivy.Array.atleast_2d"]], "atleast_2d() (ivy.container method)": [[441, "ivy.Container.atleast_2d"]], "atleast_3d() (ivy.array method)": [[442, "ivy.Array.atleast_3d"]], "atleast_3d() (ivy.container method)": [[442, "ivy.Container.atleast_3d"]], "broadcast_shapes() (ivy.container method)": [[443, "ivy.Container.broadcast_shapes"]], "column_stack() (ivy.array method)": [[445, "ivy.Array.column_stack"]], "column_stack() (ivy.container method)": [[445, "ivy.Container.column_stack"]], "concat_from_sequence() (ivy.array method)": [[446, "ivy.Array.concat_from_sequence"]], "concat_from_sequence() (ivy.container method)": [[446, "ivy.Container.concat_from_sequence"]], "dsplit() (ivy.array method)": [[447, "ivy.Array.dsplit"]], "dsplit() (ivy.container method)": [[447, "ivy.Container.dsplit"]], "dstack() (ivy.array method)": [[448, "ivy.Array.dstack"]], "dstack() (ivy.container method)": [[448, "ivy.Container.dstack"]], "expand() (ivy.array method)": [[449, "ivy.Array.expand"]], "expand() (ivy.container method)": [[449, "ivy.Container.expand"]], "fill_diagonal() (ivy.array method)": [[450, "ivy.Array.fill_diagonal"]], "fill_diagonal() (ivy.container method)": [[450, "ivy.Container.fill_diagonal"]], "flatten() (ivy.array method)": [[451, "ivy.Array.flatten"]], "flatten() (ivy.container method)": [[451, "ivy.Container.flatten"]], "fliplr() (ivy.array method)": [[452, "ivy.Array.fliplr"]], "fliplr() (ivy.container method)": [[452, "ivy.Container.fliplr"]], "flipud() (ivy.array method)": [[453, "ivy.Array.flipud"]], "flipud() (ivy.container method)": [[453, "ivy.Container.flipud"]], "fold() (ivy.array method)": [[454, "ivy.Array.fold"]], "fold() (ivy.container method)": [[454, "ivy.Container.fold"]], "heaviside() (ivy.array method)": [[455, "ivy.Array.heaviside"]], "heaviside() (ivy.container method)": [[455, "ivy.Container.heaviside"]], "hsplit() (ivy.array method)": [[456, "ivy.Array.hsplit"]], "hsplit() (ivy.container method)": [[456, "ivy.Container.hsplit"]], "hstack() (ivy.array method)": [[457, "ivy.Array.hstack"]], "hstack() (ivy.container method)": [[457, "ivy.Container.hstack"]], "i0() (ivy.array method)": [[458, "ivy.Array.i0"]], "i0() (ivy.container method)": [[458, "ivy.Container.i0"]], "matricize() (ivy.array method)": [[459, "ivy.Array.matricize"]], "matricize() (ivy.container method)": [[459, "ivy.Container.matricize"]], "moveaxis() (ivy.array method)": [[460, "ivy.Array.moveaxis"]], "moveaxis() (ivy.container method)": [[460, "ivy.Container.moveaxis"]], "pad() (ivy.array method)": [[461, "ivy.Array.pad"]], "pad() (ivy.container method)": [[461, "ivy.Container.pad"]], "partial_fold() (ivy.array method)": [[462, "ivy.Array.partial_fold"]], "partial_fold() (ivy.container method)": [[462, "ivy.Container.partial_fold"]], "partial_tensor_to_vec() (ivy.array method)": [[463, "ivy.Array.partial_tensor_to_vec"]], "partial_tensor_to_vec() (ivy.container method)": [[463, "ivy.Container.partial_tensor_to_vec"]], "partial_unfold() (ivy.array method)": [[464, "ivy.Array.partial_unfold"]], "partial_unfold() (ivy.container method)": [[464, "ivy.Container.partial_unfold"]], "partial_vec_to_tensor() (ivy.array method)": [[465, "ivy.Array.partial_vec_to_tensor"]], "partial_vec_to_tensor() (ivy.container method)": [[465, "ivy.Container.partial_vec_to_tensor"]], "put_along_axis() (ivy.array method)": [[466, "ivy.Array.put_along_axis"]], "put_along_axis() (ivy.container method)": [[466, "ivy.Container.put_along_axis"]], "rot90() (ivy.array method)": [[467, "ivy.Array.rot90"]], "rot90() (ivy.container method)": [[467, "ivy.Container.rot90"]], "soft_thresholding() (ivy.array method)": [[468, "ivy.Array.soft_thresholding"]], "soft_thresholding() (ivy.container method)": [[468, "ivy.Container.soft_thresholding"]], "take_along_axis() (ivy.array method)": [[469, "ivy.Array.take_along_axis"]], "take_along_axis() (ivy.container method)": [[469, "ivy.Container.take_along_axis"]], "top_k() (ivy.array method)": [[470, "ivy.Array.top_k"]], "top_k() (ivy.container method)": [[470, "ivy.Container.top_k"]], "trim_zeros() (ivy.array method)": [[471, "ivy.Array.trim_zeros"]], "trim_zeros() (ivy.container method)": [[471, "ivy.Container.trim_zeros"]], "unfold() (ivy.array method)": [[472, "ivy.Array.unfold"]], "unfold() (ivy.container method)": [[472, "ivy.Container.unfold"]], "unique_consecutive() (ivy.array method)": [[473, "ivy.Array.unique_consecutive"]], "unique_consecutive() (ivy.container method)": [[473, "ivy.Container.unique_consecutive"]], "vsplit() (ivy.array method)": [[474, "ivy.Array.vsplit"]], "vsplit() (ivy.container method)": [[474, "ivy.Container.vsplit"]], "vstack() (ivy.array method)": [[475, "ivy.Array.vstack"]], "vstack() (ivy.container method)": [[475, "ivy.Container.vstack"]], "batch_norm() (ivy.array method)": [[476, "ivy.Array.batch_norm"]], "batch_norm() (ivy.container method)": [[476, "ivy.Container.batch_norm"]], "group_norm() (ivy.array method)": [[477, "ivy.Array.group_norm"]], "group_norm() (ivy.container method)": [[477, "ivy.Container.group_norm"]], "instance_norm() (ivy.array method)": [[478, "ivy.Array.instance_norm"]], "instance_norm() (ivy.container method)": [[478, "ivy.Container.instance_norm"]], "l1_normalize() (ivy.array method)": [[479, "ivy.Array.l1_normalize"]], "l1_normalize() (ivy.container method)": [[479, "ivy.Container.l1_normalize"]], "l2_normalize() (ivy.array method)": [[480, "ivy.Array.l2_normalize"]], "l2_normalize() (ivy.container method)": [[480, "ivy.Container.l2_normalize"]], "lp_normalize() (ivy.array method)": [[481, "ivy.Array.lp_normalize"]], "lp_normalize() (ivy.container method)": [[481, "ivy.Container.lp_normalize"]], "bernoulli() (ivy.array method)": [[482, "ivy.Array.bernoulli"]], "bernoulli() (ivy.container method)": [[482, "ivy.Container.bernoulli"]], "beta() (ivy.array method)": [[483, "ivy.Array.beta"]], "beta() (ivy.container method)": [[483, "ivy.Container.beta"]], "dirichlet() (ivy.array method)": [[484, "ivy.Array.dirichlet"]], "dirichlet() (ivy.container method)": [[484, "ivy.Container.dirichlet"]], "gamma() (ivy.array method)": [[485, "ivy.Array.gamma"]], "gamma() (ivy.container method)": [[485, "ivy.Container.gamma"]], "poisson() (ivy.array method)": [[486, "ivy.Array.poisson"]], "poisson() (ivy.container method)": [[486, "ivy.Container.poisson"]], "unravel_index() (ivy.array method)": [[487, "ivy.Array.unravel_index"]], "unravel_index() (ivy.container method)": [[487, "ivy.Container.unravel_index"]], "invert_permutation() (ivy.container method)": [[488, "ivy.Container.invert_permutation"]], "lexsort() (ivy.array method)": [[489, "ivy.Array.lexsort"]], "lexsort() (ivy.container method)": [[489, "ivy.Container.lexsort"]], "bincount() (ivy.array method)": [[494, "ivy.Array.bincount"]], "bincount() (ivy.container method)": [[494, "ivy.Container.bincount"]], "corrcoef() (ivy.array method)": [[495, "ivy.Array.corrcoef"]], "corrcoef() (ivy.container method)": [[495, "ivy.Container.corrcoef"]], "cov() (ivy.array method)": [[496, "ivy.Array.cov"]], "cov() (ivy.container method)": [[496, "ivy.Container.cov"]], "cummax() (ivy.array method)": [[497, "ivy.Array.cummax"]], "cummax() (ivy.container method)": [[497, "ivy.Container.cummax"]], "cummin() (ivy.array method)": [[498, "ivy.Array.cummin"]], "cummin() (ivy.container method)": [[498, "ivy.Container.cummin"]], "histogram() (ivy.array method)": [[499, "ivy.Array.histogram"]], "histogram() (ivy.container method)": [[499, "ivy.Container.histogram"]], "igamma() (ivy.array method)": [[500, "ivy.Array.igamma"]], "igamma() (ivy.container method)": [[500, "ivy.Container.igamma"]], "median() (ivy.array method)": [[501, "ivy.Array.median"]], "median() (ivy.container method)": [[501, "ivy.Container.median"]], "nanmean() (ivy.array method)": [[502, "ivy.Array.nanmean"]], "nanmean() (ivy.container method)": [[502, "ivy.Container.nanmean"]], "nanmedian() (ivy.array method)": [[503, "ivy.Array.nanmedian"]], "nanmedian() (ivy.container method)": [[503, "ivy.Container.nanmedian"]], "nanprod() (ivy.array method)": [[504, "ivy.Array.nanprod"]], "nanprod() (ivy.container method)": [[504, "ivy.Container.nanprod"]], "quantile() (ivy.array method)": [[505, "ivy.Array.quantile"]], "quantile() (ivy.container method)": [[505, "ivy.Container.quantile"]], "optional_get_element() (ivy.array method)": [[506, "ivy.Array.optional_get_element"]], "optional_get_element() (ivy.container method)": [[506, "ivy.Container.optional_get_element"]], "all_equal() (in module ivy)": [[507, "ivy.all_equal"], [606, "ivy.all_equal"]], "all_equal() (ivy.array method)": [[507, "ivy.Array.all_equal"]], "all_equal() (ivy.container method)": [[507, "ivy.Container.all_equal"]], "arg_info() (in module ivy)": [[508, "ivy.arg_info"], [606, "ivy.arg_info"]], "arg_names() (in module ivy)": [[509, "ivy.arg_names"], [606, "ivy.arg_names"]], "array_equal() (in module ivy)": [[510, "ivy.array_equal"], [606, "ivy.array_equal"]], "array_equal() (ivy.array method)": [[510, "ivy.Array.array_equal"]], "array_equal() (ivy.container method)": [[510, "ivy.Container.array_equal"]], "assert_supports_inplace() (in module ivy)": [[511, "ivy.assert_supports_inplace"], [606, "ivy.assert_supports_inplace"]], "assert_supports_inplace() (ivy.array method)": [[511, "ivy.Array.assert_supports_inplace"]], "assert_supports_inplace() (ivy.container method)": [[511, "ivy.Container.assert_supports_inplace"]], "cache_fn() (in module ivy)": [[512, "ivy.cache_fn"], [606, "ivy.cache_fn"]], "clip_matrix_norm() (in module ivy)": [[513, "ivy.clip_matrix_norm"], [606, "ivy.clip_matrix_norm"]], "clip_matrix_norm() (ivy.array method)": [[513, "ivy.Array.clip_matrix_norm"]], "clip_matrix_norm() (ivy.container method)": [[513, "ivy.Container.clip_matrix_norm"]], "clip_vector_norm() (in module ivy)": [[514, "ivy.clip_vector_norm"], [606, "ivy.clip_vector_norm"]], "clip_vector_norm() (ivy.array method)": [[514, "ivy.Array.clip_vector_norm"]], "clip_vector_norm() (ivy.container method)": [[514, "ivy.Container.clip_vector_norm"]], "container_types() (in module ivy)": [[515, "ivy.container_types"], [606, "ivy.container_types"]], "current_backend_str() (in module ivy)": [[516, "ivy.current_backend_str"], [606, "ivy.current_backend_str"]], "default() (in module ivy)": [[517, "ivy.default"], [606, "ivy.default"]], "default() (ivy.array method)": [[517, "ivy.Array.default"]], "einops_rearrange() (in module ivy)": [[518, "ivy.einops_rearrange"], [606, "ivy.einops_rearrange"]], "einops_rearrange() (ivy.array method)": [[518, "ivy.Array.einops_rearrange"]], "einops_rearrange() (ivy.container method)": [[518, "ivy.Container.einops_rearrange"]], "einops_reduce() (in module ivy)": [[519, "ivy.einops_reduce"], [606, "ivy.einops_reduce"]], "einops_reduce() (ivy.array method)": [[519, "ivy.Array.einops_reduce"]], "einops_reduce() (ivy.container method)": [[519, "ivy.Container.einops_reduce"]], "einops_repeat() (in module ivy)": [[520, "ivy.einops_repeat"], [606, "ivy.einops_repeat"]], "einops_repeat() (ivy.array method)": [[520, "ivy.Array.einops_repeat"]], "einops_repeat() (ivy.container method)": [[520, "ivy.Container.einops_repeat"]], "exists() (in module ivy)": [[521, "ivy.exists"], [606, "ivy.exists"]], "exists() (ivy.array method)": [[521, "ivy.Array.exists"]], "exists() (ivy.container method)": [[521, "ivy.Container.exists"]], "fourier_encode() (in module ivy)": [[522, "ivy.fourier_encode"], [606, "ivy.fourier_encode"]], "fourier_encode() (ivy.array method)": [[522, "ivy.Array.fourier_encode"]], "fourier_encode() (ivy.container method)": [[522, "ivy.Container.fourier_encode"]], "function_supported_devices_and_dtypes() (in module ivy)": [[523, "ivy.function_supported_devices_and_dtypes"], [606, "ivy.function_supported_devices_and_dtypes"]], "function_unsupported_devices_and_dtypes() (in module ivy)": [[524, "ivy.function_unsupported_devices_and_dtypes"], [606, "ivy.function_unsupported_devices_and_dtypes"]], "gather() (in module ivy)": [[525, "ivy.gather"], [606, "ivy.gather"]], "gather() (ivy.array method)": [[525, "ivy.Array.gather"]], "gather() (ivy.container method)": [[525, "ivy.Container.gather"]], "gather_nd() (in module ivy)": [[526, "ivy.gather_nd"], [606, "ivy.gather_nd"]], "gather_nd() (ivy.array method)": [[526, "ivy.Array.gather_nd"]], "gather_nd() (ivy.container method)": [[526, "ivy.Container.gather_nd"]], "get_all_arrays_in_memory() (in module ivy)": [[527, "ivy.get_all_arrays_in_memory"], [606, "ivy.get_all_arrays_in_memory"]], "get_item() (in module ivy)": [[528, "ivy.get_item"], [606, "ivy.get_item"]], "get_num_dims() (in module ivy)": [[529, "ivy.get_num_dims"], [606, "ivy.get_num_dims"]], "get_num_dims() (ivy.array method)": [[529, "ivy.Array.get_num_dims"]], "get_num_dims() (ivy.container method)": [[529, "ivy.Container.get_num_dims"]], "get_referrers_recursive() (in module ivy)": [[530, "ivy.get_referrers_recursive"], [606, "ivy.get_referrers_recursive"]], "has_nans() (in module ivy)": [[531, "ivy.has_nans"], [606, "ivy.has_nans"]], "has_nans() (ivy.array method)": [[531, "ivy.Array.has_nans"]], "has_nans() (ivy.container method)": [[531, "ivy.Container.has_nans"]], "inplace_arrays_supported() (in module ivy)": [[532, "ivy.inplace_arrays_supported"], [606, "ivy.inplace_arrays_supported"]], "inplace_decrement() (in module ivy)": [[533, "ivy.inplace_decrement"], [606, "ivy.inplace_decrement"]], "inplace_decrement() (ivy.array method)": [[533, "ivy.Array.inplace_decrement"]], "inplace_decrement() (ivy.container method)": [[533, "ivy.Container.inplace_decrement"]], "inplace_increment() (in module ivy)": [[534, "ivy.inplace_increment"], [606, "ivy.inplace_increment"]], "inplace_increment() (ivy.array method)": [[534, "ivy.Array.inplace_increment"]], "inplace_increment() (ivy.container method)": [[534, "ivy.Container.inplace_increment"]], "inplace_update() (in module ivy)": [[535, "ivy.inplace_update"], [606, "ivy.inplace_update"]], "inplace_update() (ivy.array method)": [[535, "ivy.Array.inplace_update"]], "inplace_update() (ivy.container method)": [[535, "ivy.Container.inplace_update"]], "inplace_variables_supported() (in module ivy)": [[536, "ivy.inplace_variables_supported"], [606, "ivy.inplace_variables_supported"]], "is_array() (in module ivy)": [[537, "ivy.is_array"], [606, "ivy.is_array"]], "is_array() (ivy.array method)": [[537, "ivy.Array.is_array"]], "is_array() (ivy.container method)": [[537, "ivy.Container.is_array"]], "is_ivy_array() (in module ivy)": [[538, "ivy.is_ivy_array"], [606, "ivy.is_ivy_array"]], "is_ivy_array() (ivy.array method)": [[538, "ivy.Array.is_ivy_array"]], "is_ivy_array() (ivy.container method)": [[538, "ivy.Container.is_ivy_array"]], "is_ivy_container() (in module ivy)": [[539, "ivy.is_ivy_container"], [606, "ivy.is_ivy_container"]], "is_ivy_container() (ivy.array method)": [[539, "ivy.Array.is_ivy_container"]], "is_ivy_nested_array() (in module ivy)": [[540, "ivy.is_ivy_nested_array"], [606, "ivy.is_ivy_nested_array"]], "is_native_array() (in module ivy)": [[541, "ivy.is_native_array"], [606, "ivy.is_native_array"]], "is_native_array() (ivy.array method)": [[541, "ivy.Array.is_native_array"]], "is_native_array() (ivy.container method)": [[541, "ivy.Container.is_native_array"]], "isin() (in module ivy)": [[542, "ivy.isin"], [606, "ivy.isin"]], "isin() (ivy.array method)": [[542, "ivy.Array.isin"]], "isin() (ivy.container method)": [[542, "ivy.Container.isin"]], "isscalar() (in module ivy)": [[543, "ivy.isscalar"], [606, "ivy.isscalar"]], "itemsize() (in module ivy)": [[544, "ivy.itemsize"], [606, "ivy.itemsize"]], "itemsize() (ivy.array method)": [[544, "ivy.Array.itemsize"]], "itemsize() (ivy.container method)": [[544, "ivy.Container.itemsize"]], "match_kwargs() (in module ivy)": [[545, "ivy.match_kwargs"], [606, "ivy.match_kwargs"]], "multiprocessing() (in module ivy)": [[546, "ivy.multiprocessing"], [606, "ivy.multiprocessing"]], "num_arrays_in_memory() (in module ivy)": [[547, "ivy.num_arrays_in_memory"], [606, "ivy.num_arrays_in_memory"]], "print_all_arrays_in_memory() (in module ivy)": [[548, "ivy.print_all_arrays_in_memory"], [606, "ivy.print_all_arrays_in_memory"]], "scatter_flat() (in module ivy)": [[549, "ivy.scatter_flat"], [606, "ivy.scatter_flat"]], "scatter_flat() (ivy.array method)": [[549, "ivy.Array.scatter_flat"]], "scatter_flat() (ivy.container method)": [[549, "ivy.Container.scatter_flat"]], "scatter_nd() (in module ivy)": [[550, "ivy.scatter_nd"], [606, "ivy.scatter_nd"]], "scatter_nd() (ivy.array method)": [[550, "ivy.Array.scatter_nd"]], "scatter_nd() (ivy.container method)": [[550, "ivy.Container.scatter_nd"]], "set_array_mode() (in module ivy)": [[551, "ivy.set_array_mode"], [606, "ivy.set_array_mode"]], "set_exception_trace_mode() (in module ivy)": [[552, "ivy.set_exception_trace_mode"], [606, "ivy.set_exception_trace_mode"]], "set_inplace_mode() (in module ivy)": [[553, "ivy.set_inplace_mode"], [606, "ivy.set_inplace_mode"]], "set_item() (in module ivy)": [[554, "ivy.set_item"], [606, "ivy.set_item"]], "set_min_base() (in module ivy)": [[555, "ivy.set_min_base"], [606, "ivy.set_min_base"]], "set_min_denominator() (in module ivy)": [[556, "ivy.set_min_denominator"], [606, "ivy.set_min_denominator"]], "set_nestable_mode() (in module ivy)": [[557, "ivy.set_nestable_mode"], [606, "ivy.set_nestable_mode"]], "set_precise_mode() (in module ivy)": [[558, "ivy.set_precise_mode"], [606, "ivy.set_precise_mode"]], "set_queue_timeout() (in module ivy)": [[559, "ivy.set_queue_timeout"], [606, "ivy.set_queue_timeout"]], "set_shape_array_mode() (in module ivy)": [[560, "ivy.set_shape_array_mode"], [606, "ivy.set_shape_array_mode"]], "set_show_func_wrapper_trace_mode() (in module ivy)": [[561, "ivy.set_show_func_wrapper_trace_mode"], [606, "ivy.set_show_func_wrapper_trace_mode"]], "set_tmp_dir() (in module ivy)": [[562, "ivy.set_tmp_dir"], [606, "ivy.set_tmp_dir"]], "shape() (in module ivy)": [[563, "ivy.shape"], [606, "ivy.shape"]], "shape() (ivy.array method)": [[563, "ivy.Array.shape"]], "stable_divide() (in module ivy)": [[564, "ivy.stable_divide"], [606, "ivy.stable_divide"]], "stable_divide() (ivy.array method)": [[564, "ivy.Array.stable_divide"]], "stable_divide() (ivy.container method)": [[564, "ivy.Container.stable_divide"]], "stable_pow() (in module ivy)": [[565, "ivy.stable_pow"], [606, "ivy.stable_pow"]], "stable_pow() (ivy.array method)": [[565, "ivy.Array.stable_pow"]], "stable_pow() (ivy.container method)": [[565, "ivy.Container.stable_pow"]], "strides() (in module ivy)": [[566, "ivy.strides"], [606, "ivy.strides"]], "strides() (ivy.array method)": [[566, "ivy.Array.strides"]], "strides() (ivy.container method)": [[566, "ivy.Container.strides"]], "supports_inplace_updates() (in module ivy)": [[567, "ivy.supports_inplace_updates"], [606, "ivy.supports_inplace_updates"]], "supports_inplace_updates() (ivy.array method)": [[567, "ivy.Array.supports_inplace_updates"]], "supports_inplace_updates() (ivy.container method)": [[567, "ivy.Container.supports_inplace_updates"]], "to_ivy_shape() (in module ivy)": [[568, "ivy.to_ivy_shape"], [606, "ivy.to_ivy_shape"]], "to_list() (in module ivy)": [[569, "ivy.to_list"], [606, "ivy.to_list"]], "to_list() (ivy.array method)": [[569, "ivy.Array.to_list"]], "to_list() (ivy.container method)": [[569, "ivy.Container.to_list"]], "to_native_shape() (in module ivy)": [[570, "ivy.to_native_shape"], [606, "ivy.to_native_shape"]], "to_numpy() (in module ivy)": [[571, "ivy.to_numpy"], [606, "ivy.to_numpy"]], "to_numpy() (ivy.array method)": [[571, "ivy.Array.to_numpy"]], "to_numpy() (ivy.container method)": [[571, "ivy.Container.to_numpy"]], "to_scalar() (in module ivy)": [[572, "ivy.to_scalar"], [606, "ivy.to_scalar"]], "to_scalar() (ivy.array method)": [[572, "ivy.Array.to_scalar"]], "to_scalar() (ivy.container method)": [[572, "ivy.Container.to_scalar"]], "try_else_none() (in module ivy)": [[573, "ivy.try_else_none"], [606, "ivy.try_else_none"]], "unset_array_mode() (in module ivy)": [[574, "ivy.unset_array_mode"], [606, "ivy.unset_array_mode"]], "unset_exception_trace_mode() (in module ivy)": [[575, "ivy.unset_exception_trace_mode"], [606, "ivy.unset_exception_trace_mode"]], "unset_inplace_mode() (in module ivy)": [[576, "ivy.unset_inplace_mode"], [606, "ivy.unset_inplace_mode"]], "unset_min_base() (in module ivy)": [[577, "ivy.unset_min_base"], [606, "ivy.unset_min_base"]], "unset_min_denominator() (in module ivy)": [[578, "ivy.unset_min_denominator"], [606, "ivy.unset_min_denominator"]], "unset_nestable_mode() (in module ivy)": [[579, "ivy.unset_nestable_mode"], [606, "ivy.unset_nestable_mode"]], "unset_precise_mode() (in module ivy)": [[580, "ivy.unset_precise_mode"], [606, "ivy.unset_precise_mode"]], "unset_queue_timeout() (in module ivy)": [[581, "ivy.unset_queue_timeout"], [606, "ivy.unset_queue_timeout"]], "unset_shape_array_mode() (in module ivy)": [[582, "ivy.unset_shape_array_mode"], [606, "ivy.unset_shape_array_mode"]], "unset_show_func_wrapper_trace_mode() (in module ivy)": [[583, "ivy.unset_show_func_wrapper_trace_mode"], [606, "ivy.unset_show_func_wrapper_trace_mode"]], "unset_tmp_dir() (in module ivy)": [[584, "ivy.unset_tmp_dir"], [606, "ivy.unset_tmp_dir"]], "value_is_nan() (in module ivy)": [[585, "ivy.value_is_nan"], [606, "ivy.value_is_nan"]], "value_is_nan() (ivy.array method)": [[585, "ivy.Array.value_is_nan"]], "value_is_nan() (ivy.container method)": [[585, "ivy.Container.value_is_nan"]], "vmap() (in module ivy)": [[586, "ivy.vmap"], [606, "ivy.vmap"]], "adam_step() (in module ivy)": [[587, "ivy.adam_step"], [607, "ivy.adam_step"]], "adam_step() (ivy.array method)": [[587, "ivy.Array.adam_step"]], "adam_step() (ivy.container method)": [[587, "ivy.Container.adam_step"]], "adam_update() (in module ivy)": [[588, "ivy.adam_update"], [607, "ivy.adam_update"]], "adam_update() (ivy.array method)": [[588, "ivy.Array.adam_update"]], "adam_update() (ivy.container method)": [[588, "ivy.Container.adam_update"]], "execute_with_gradients() (in module ivy)": [[589, "ivy.execute_with_gradients"], [607, "ivy.execute_with_gradients"]], "grad() (in module ivy)": [[590, "ivy.grad"], [607, "ivy.grad"]], "gradient_descent_update() (in module ivy)": [[591, "ivy.gradient_descent_update"], [607, "ivy.gradient_descent_update"]], "gradient_descent_update() (ivy.array method)": [[591, "ivy.Array.gradient_descent_update"]], "gradient_descent_update() (ivy.container method)": [[591, "ivy.Container.gradient_descent_update"]], "jac() (in module ivy)": [[592, "ivy.jac"], [607, "ivy.jac"]], "lamb_update() (in module ivy)": [[593, "ivy.lamb_update"], [607, "ivy.lamb_update"]], "lamb_update() (ivy.array method)": [[593, "ivy.Array.lamb_update"]], "lamb_update() (ivy.container method)": [[593, "ivy.Container.lamb_update"]], "lars_update() (in module ivy)": [[594, "ivy.lars_update"], [607, "ivy.lars_update"]], "lars_update() (ivy.array method)": [[594, "ivy.Array.lars_update"]], "lars_update() (ivy.container method)": [[594, "ivy.Container.lars_update"]], "optimizer_update() (in module ivy)": [[595, "ivy.optimizer_update"], [607, "ivy.optimizer_update"]], "optimizer_update() (ivy.array method)": [[595, "ivy.Array.optimizer_update"]], "optimizer_update() (ivy.container method)": [[595, "ivy.Container.optimizer_update"]], "stop_gradient() (in module ivy)": [[596, "ivy.stop_gradient"], [607, "ivy.stop_gradient"]], "stop_gradient() (ivy.array method)": [[596, "ivy.Array.stop_gradient"]], "stop_gradient() (ivy.container method)": [[596, "ivy.Container.stop_gradient"]], "value_and_grad() (in module ivy)": [[597, "ivy.value_and_grad"], [607, "ivy.value_and_grad"]], "ivy.functional.ivy.activations": [[598, "module-ivy.functional.ivy.activations"]], "e (in module ivy)": [[599, "ivy.e"]], "inf (in module ivy)": [[599, "ivy.inf"]], "ivy.functional.ivy.constants": [[599, "module-ivy.functional.ivy.constants"]], "nan (in module ivy)": [[599, "ivy.nan"]], "newaxis (in module ivy)": [[599, "ivy.newaxis"]], "pi (in module ivy)": [[599, "ivy.pi"]], "ivy.functional.ivy.control_flow_ops": [[600, "module-ivy.functional.ivy.control_flow_ops"]], "nestedsequence (class in ivy)": [[601, "ivy.NestedSequence"]], "ivy.functional.ivy.creation": [[601, "module-ivy.functional.ivy.creation"]], "defaultcomplexdtype (class in ivy)": [[602, "ivy.DefaultComplexDtype"]], "defaultdtype (class in ivy)": [[602, "ivy.DefaultDtype"]], "defaultfloatdtype (class in ivy)": [[602, "ivy.DefaultFloatDtype"]], "defaultintdtype (class in ivy)": [[602, "ivy.DefaultIntDtype"]], "defaultuintdtype (class in ivy)": [[602, "ivy.DefaultUintDtype"]], "ivy.functional.ivy.data_type": [[602, "module-ivy.functional.ivy.data_type"]], "defaultdevice (class in ivy)": [[603, "ivy.DefaultDevice"]], "profiler (class in ivy)": [[603, "ivy.Profiler"]], "ivy.functional.ivy.device": [[603, "module-ivy.functional.ivy.device"]], "ivy.functional.ivy.elementwise": [[604, "module-ivy.functional.ivy.elementwise"]], "ivy.functional.ivy.experimental": [[605, "module-ivy.functional.ivy.experimental"]], "arraymode (class in ivy)": [[606, "ivy.ArrayMode"]], "precisemode (class in ivy)": [[606, "ivy.PreciseMode"]], "ivy.functional.ivy.general": [[606, "module-ivy.functional.ivy.general"]], "ivy.functional.ivy.gradients": [[607, "module-ivy.functional.ivy.gradients"]], "conv() (in module ivy)": [[608, "ivy.conv"], [621, "ivy.conv"]], "conv1d() (in module ivy)": [[608, "ivy.conv1d"], [622, "ivy.conv1d"]], "conv1d_transpose() (in module ivy)": [[608, "ivy.conv1d_transpose"], [623, "ivy.conv1d_transpose"]], "conv2d() (in module ivy)": [[608, "ivy.conv2d"], [624, "ivy.conv2d"]], "conv2d_transpose() (in module ivy)": [[608, "ivy.conv2d_transpose"], [625, "ivy.conv2d_transpose"]], "conv3d() (in module ivy)": [[608, "ivy.conv3d"], [626, "ivy.conv3d"]], "conv3d_transpose() (in module ivy)": [[608, "ivy.conv3d_transpose"], [627, "ivy.conv3d_transpose"]], "conv_general_dilated() (in module ivy)": [[608, "ivy.conv_general_dilated"], [628, "ivy.conv_general_dilated"]], "conv_general_transpose() (in module ivy)": [[608, "ivy.conv_general_transpose"], [629, "ivy.conv_general_transpose"]], "depthwise_conv2d() (in module ivy)": [[608, "ivy.depthwise_conv2d"], [630, "ivy.depthwise_conv2d"]], "dropout() (in module ivy)": [[608, "ivy.dropout"], [631, "ivy.dropout"]], "ivy.functional.ivy.layers": [[608, "module-ivy.functional.ivy.layers"]], "linear() (in module ivy)": [[608, "ivy.linear"], [632, "ivy.linear"]], "lstm_update() (in module ivy)": [[608, "ivy.lstm_update"], [633, "ivy.lstm_update"]], "multi_head_attention() (in module ivy)": [[608, "ivy.multi_head_attention"], [634, "ivy.multi_head_attention"]], "nms() (in module ivy)": [[608, "ivy.nms"], [635, "ivy.nms"]], "roi_align() (in module ivy)": [[608, "ivy.roi_align"], [636, "ivy.roi_align"]], "scaled_dot_product_attention() (in module ivy)": [[608, "ivy.scaled_dot_product_attention"], [637, "ivy.scaled_dot_product_attention"]], "cholesky() (in module ivy)": [[609, "ivy.cholesky"], [638, "ivy.cholesky"]], "cross() (in module ivy)": [[609, "ivy.cross"], [639, "ivy.cross"]], "det() (in module ivy)": [[609, "ivy.det"], [640, "ivy.det"]], "diag() (in module ivy)": [[609, "ivy.diag"], [641, "ivy.diag"]], "diagonal() (in module ivy)": [[609, "ivy.diagonal"], [642, "ivy.diagonal"]], "eigh() (in module ivy)": [[609, "ivy.eigh"], [644, "ivy.eigh"]], "eigvalsh() (in module ivy)": [[609, "ivy.eigvalsh"], [645, "ivy.eigvalsh"]], "inner() (in module ivy)": [[609, "ivy.inner"], [646, "ivy.inner"]], "inv() (in module ivy)": [[609, "ivy.inv"], [647, "ivy.inv"]], "ivy.functional.ivy.linear_algebra": [[609, "module-ivy.functional.ivy.linear_algebra"]], "lu_factor() (in module ivy)": [[609, "ivy.lu_factor"], [648, "ivy.lu_factor"]], "matmul() (in module ivy)": [[609, "ivy.matmul"], [649, "ivy.matmul"]], "matrix_norm() (in module ivy)": [[609, "ivy.matrix_norm"], [650, "ivy.matrix_norm"]], "matrix_power() (in module ivy)": [[609, "ivy.matrix_power"], [651, "ivy.matrix_power"]], "matrix_rank() (in module ivy)": [[609, "ivy.matrix_rank"], [652, "ivy.matrix_rank"]], "matrix_transpose() (in module ivy)": [[609, "ivy.matrix_transpose"], [653, "ivy.matrix_transpose"]], "outer() (in module ivy)": [[609, "ivy.outer"], [654, "ivy.outer"]], "pinv() (in module ivy)": [[609, "ivy.pinv"], [655, "ivy.pinv"]], "qr() (in module ivy)": [[609, "ivy.qr"], [656, "ivy.qr"]], "slogdet() (in module ivy)": [[609, "ivy.slogdet"], [657, "ivy.slogdet"]], "solve() (in module ivy)": [[609, "ivy.solve"], [658, "ivy.solve"]], "svd() (in module ivy)": [[609, "ivy.svd"], [659, "ivy.svd"]], "svdvals() (in module ivy)": [[609, "ivy.svdvals"], [660, "ivy.svdvals"]], "tensordot() (in module ivy)": [[609, "ivy.tensordot"], [661, "ivy.tensordot"]], "tensorsolve() (in module ivy)": [[609, "ivy.tensorsolve"], [662, "ivy.tensorsolve"]], "trace() (in module ivy)": [[609, "ivy.trace"], [663, "ivy.trace"]], "vander() (in module ivy)": [[609, "ivy.vander"], [664, "ivy.vander"]], "vecdot() (in module ivy)": [[609, "ivy.vecdot"], [665, "ivy.vecdot"]], "vector_norm() (in module ivy)": [[609, "ivy.vector_norm"], [666, "ivy.vector_norm"]], "vector_to_skew_symmetric_matrix() (in module ivy)": [[609, "ivy.vector_to_skew_symmetric_matrix"], [667, "ivy.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (in module ivy)": [[610, "ivy.binary_cross_entropy"], [668, "ivy.binary_cross_entropy"]], "cross_entropy() (in module ivy)": [[610, "ivy.cross_entropy"], [669, "ivy.cross_entropy"]], "ivy.functional.ivy.losses": [[610, "module-ivy.functional.ivy.losses"]], "sparse_cross_entropy() (in module ivy)": [[610, "ivy.sparse_cross_entropy"], [670, "ivy.sparse_cross_entropy"]], "clip() (in module ivy)": [[611, "ivy.clip"], [671, "ivy.clip"]], "concat() (in module ivy)": [[611, "ivy.concat"], [672, "ivy.concat"]], "constant_pad() (in module ivy)": [[611, "ivy.constant_pad"], [673, "ivy.constant_pad"]], "expand_dims() (in module ivy)": [[611, "ivy.expand_dims"], [674, "ivy.expand_dims"]], "flip() (in module ivy)": [[611, "ivy.flip"], [675, "ivy.flip"]], "ivy.functional.ivy.manipulation": [[611, "module-ivy.functional.ivy.manipulation"]], "permute_dims() (in module ivy)": [[611, "ivy.permute_dims"], [676, "ivy.permute_dims"]], "repeat() (in module ivy)": [[611, "ivy.repeat"], [677, "ivy.repeat"]], "reshape() (in module ivy)": [[611, "ivy.reshape"], [678, "ivy.reshape"]], "roll() (in module ivy)": [[611, "ivy.roll"], [679, "ivy.roll"]], "split() (in module ivy)": [[611, "ivy.split"], [680, "ivy.split"]], "squeeze() (in module ivy)": [[611, "ivy.squeeze"], [681, "ivy.squeeze"]], "stack() (in module ivy)": [[611, "ivy.stack"], [682, "ivy.stack"]], "swapaxes() (in module ivy)": [[611, "ivy.swapaxes"], [683, "ivy.swapaxes"]], "tile() (in module ivy)": [[611, "ivy.tile"], [684, "ivy.tile"]], "unstack() (in module ivy)": [[611, "ivy.unstack"], [685, "ivy.unstack"]], "zero_pad() (in module ivy)": [[611, "ivy.zero_pad"], [686, "ivy.zero_pad"]], "fomaml_step() (in module ivy)": [[612, "ivy.fomaml_step"], [687, "ivy.fomaml_step"]], "ivy.functional.ivy.meta": [[612, "module-ivy.functional.ivy.meta"]], "maml_step() (in module ivy)": [[612, "ivy.maml_step"], [688, "ivy.maml_step"]], "reptile_step() (in module ivy)": [[612, "ivy.reptile_step"], [689, "ivy.reptile_step"]], "all_nested_indices() (in module ivy)": [[613, "ivy.all_nested_indices"], [690, "ivy.all_nested_indices"]], "copy_nest() (in module ivy)": [[613, "ivy.copy_nest"], [691, "ivy.copy_nest"]], "duplicate_array_index_chains() (in module ivy)": [[613, "ivy.duplicate_array_index_chains"], [692, "ivy.duplicate_array_index_chains"]], "index_nest() (in module ivy)": [[613, "ivy.index_nest"], [693, "ivy.index_nest"]], "insert_into_nest_at_index() (in module ivy)": [[613, "ivy.insert_into_nest_at_index"], [694, "ivy.insert_into_nest_at_index"]], "insert_into_nest_at_indices() (in module ivy)": [[613, "ivy.insert_into_nest_at_indices"], [695, "ivy.insert_into_nest_at_indices"]], "ivy.functional.ivy.nest": [[613, "module-ivy.functional.ivy.nest"]], "map() (in module ivy)": [[613, "ivy.map"], [696, "ivy.map"]], "map_nest_at_index() (in module ivy)": [[613, "ivy.map_nest_at_index"], [697, "ivy.map_nest_at_index"]], "map_nest_at_indices() (in module ivy)": [[613, "ivy.map_nest_at_indices"], [698, "ivy.map_nest_at_indices"]], "multi_index_nest() (in module ivy)": [[613, "ivy.multi_index_nest"], [699, "ivy.multi_index_nest"]], "nested_any() (in module ivy)": [[613, "ivy.nested_any"], [700, "ivy.nested_any"]], "nested_argwhere() (in module ivy)": [[613, "ivy.nested_argwhere"], [701, "ivy.nested_argwhere"]], "nested_map() (in module ivy)": [[613, "ivy.nested_map"], [702, "ivy.nested_map"]], "nested_multi_map() (in module ivy)": [[613, "ivy.nested_multi_map"], [703, "ivy.nested_multi_map"]], "prune_empty() (in module ivy)": [[613, "ivy.prune_empty"], [704, "ivy.prune_empty"]], "prune_nest_at_index() (in module ivy)": [[613, "ivy.prune_nest_at_index"], [705, "ivy.prune_nest_at_index"]], "prune_nest_at_indices() (in module ivy)": [[613, "ivy.prune_nest_at_indices"], [706, "ivy.prune_nest_at_indices"]], "set_nest_at_index() (in module ivy)": [[613, "ivy.set_nest_at_index"], [707, "ivy.set_nest_at_index"]], "set_nest_at_indices() (in module ivy)": [[613, "ivy.set_nest_at_indices"], [708, "ivy.set_nest_at_indices"]], "ivy.functional.ivy.norms": [[614, "module-ivy.functional.ivy.norms"]], "layer_norm() (in module ivy)": [[614, "ivy.layer_norm"], [709, "ivy.layer_norm"]], "ivy.functional.ivy.random": [[615, "module-ivy.functional.ivy.random"]], "multinomial() (in module ivy)": [[615, "ivy.multinomial"], [710, "ivy.multinomial"]], "randint() (in module ivy)": [[615, "ivy.randint"], [711, "ivy.randint"]], "random_normal() (in module ivy)": [[615, "ivy.random_normal"], [712, "ivy.random_normal"]], "random_uniform() (in module ivy)": [[615, "ivy.random_uniform"], [713, "ivy.random_uniform"]], "seed() (in module ivy)": [[615, "ivy.seed"], [714, "ivy.seed"]], "shuffle() (in module ivy)": [[615, "ivy.shuffle"], [715, "ivy.shuffle"]], "argmax() (in module ivy)": [[616, "ivy.argmax"], [716, "ivy.argmax"]], "argmin() (in module ivy)": [[616, "ivy.argmin"], [717, "ivy.argmin"]], "argwhere() (in module ivy)": [[616, "ivy.argwhere"], [718, "ivy.argwhere"]], "ivy.functional.ivy.searching": [[616, "module-ivy.functional.ivy.searching"]], "nonzero() (in module ivy)": [[616, "ivy.nonzero"], [719, "ivy.nonzero"]], "where() (in module ivy)": [[616, "ivy.where"], [720, "ivy.where"]], "ivy.functional.ivy.set": [[617, "module-ivy.functional.ivy.set"]], "unique_all() (in module ivy)": [[617, "ivy.unique_all"], [721, "ivy.unique_all"]], "unique_counts() (in module ivy)": [[617, "ivy.unique_counts"], [722, "ivy.unique_counts"]], "unique_inverse() (in module ivy)": [[617, "ivy.unique_inverse"], [723, "ivy.unique_inverse"]], "unique_values() (in module ivy)": [[617, "ivy.unique_values"], [724, "ivy.unique_values"]], "argsort() (in module ivy)": [[618, "ivy.argsort"], [725, "ivy.argsort"]], "ivy.functional.ivy.sorting": [[618, "module-ivy.functional.ivy.sorting"]], "msort() (in module ivy)": [[618, "ivy.msort"], [726, "ivy.msort"]], "searchsorted() (in module ivy)": [[618, "ivy.searchsorted"], [727, "ivy.searchsorted"]], "sort() (in module ivy)": [[618, "ivy.sort"], [728, "ivy.sort"]], "cumprod() (in module ivy)": [[619, "ivy.cumprod"], [729, "ivy.cumprod"]], "cumsum() (in module ivy)": [[619, "ivy.cumsum"], [730, "ivy.cumsum"]], "einsum() (in module ivy)": [[619, "ivy.einsum"], [731, "ivy.einsum"]], "ivy.functional.ivy.statistical": [[619, "module-ivy.functional.ivy.statistical"]], "max() (in module ivy)": [[619, "ivy.max"], [732, "ivy.max"]], "mean() (in module ivy)": [[619, "ivy.mean"], [733, "ivy.mean"]], "min() (in module ivy)": [[619, "ivy.min"], [734, "ivy.min"]], "prod() (in module ivy)": [[619, "ivy.prod"], [735, "ivy.prod"]], "std() (in module ivy)": [[619, "ivy.std"], [736, "ivy.std"]], "sum() (in module ivy)": [[619, "ivy.sum"], [737, "ivy.sum"]], "var() (in module ivy)": [[619, "ivy.var"], [738, "ivy.var"]], "all() (in module ivy)": [[620, "ivy.all"], [739, "ivy.all"]], "any() (in module ivy)": [[620, "ivy.any"], [740, "ivy.any"]], "ivy.functional.ivy.utility": [[620, "module-ivy.functional.ivy.utility"]], "load() (in module ivy)": [[620, "ivy.load"], [741, "ivy.load"]], "save() (in module ivy)": [[620, "ivy.save"], [742, "ivy.save"]], "conv1d() (ivy.array method)": [[622, "ivy.Array.conv1d"]], "conv1d() (ivy.container method)": [[622, "ivy.Container.conv1d"]], "conv1d_transpose() (ivy.array method)": [[623, "ivy.Array.conv1d_transpose"]], "conv1d_transpose() (ivy.container method)": [[623, "ivy.Container.conv1d_transpose"]], "conv2d() (ivy.array method)": [[624, "ivy.Array.conv2d"]], "conv2d() (ivy.container method)": [[624, "ivy.Container.conv2d"]], "conv2d_transpose() (ivy.array method)": [[625, "ivy.Array.conv2d_transpose"]], "conv2d_transpose() (ivy.container method)": [[625, "ivy.Container.conv2d_transpose"]], "conv3d() (ivy.array method)": [[626, "ivy.Array.conv3d"]], "conv3d() (ivy.container method)": [[626, "ivy.Container.conv3d"]], "conv3d_transpose() (ivy.array method)": [[627, "ivy.Array.conv3d_transpose"]], "conv3d_transpose() (ivy.container method)": [[627, "ivy.Container.conv3d_transpose"]], "depthwise_conv2d() (ivy.array method)": [[630, "ivy.Array.depthwise_conv2d"]], "depthwise_conv2d() (ivy.container method)": [[630, "ivy.Container.depthwise_conv2d"]], "dropout() (ivy.array method)": [[631, "ivy.Array.dropout"]], "dropout() (ivy.container method)": [[631, "ivy.Container.dropout"]], "linear() (ivy.array method)": [[632, "ivy.Array.linear"]], "linear() (ivy.container method)": [[632, "ivy.Container.linear"]], "lstm_update() (ivy.array method)": [[633, "ivy.Array.lstm_update"]], "lstm_update() (ivy.container method)": [[633, "ivy.Container.lstm_update"]], "multi_head_attention() (ivy.array method)": [[634, "ivy.Array.multi_head_attention"]], "multi_head_attention() (ivy.container method)": [[634, "ivy.Container.multi_head_attention"]], "scaled_dot_product_attention() (ivy.array method)": [[637, "ivy.Array.scaled_dot_product_attention"]], "scaled_dot_product_attention() (ivy.container method)": [[637, "ivy.Container.scaled_dot_product_attention"]], "cholesky() (ivy.array method)": [[638, "ivy.Array.cholesky"]], "cholesky() (ivy.container method)": [[638, "ivy.Container.cholesky"]], "cross() (ivy.array method)": [[639, "ivy.Array.cross"]], "cross() (ivy.container method)": [[639, "ivy.Container.cross"]], "det() (ivy.array method)": [[640, "ivy.Array.det"]], "det() (ivy.container method)": [[640, "ivy.Container.det"]], "diag() (ivy.array method)": [[641, "ivy.Array.diag"]], "diag() (ivy.container method)": [[641, "ivy.Container.diag"]], "diagonal() (ivy.array method)": [[642, "ivy.Array.diagonal"]], "diagonal() (ivy.container method)": [[642, "ivy.Container.diagonal"]], "eigh() (ivy.array method)": [[644, "ivy.Array.eigh"]], "eigh() (ivy.container method)": [[644, "ivy.Container.eigh"]], "eigvalsh() (ivy.array method)": [[645, "ivy.Array.eigvalsh"]], "eigvalsh() (ivy.container method)": [[645, "ivy.Container.eigvalsh"]], "inner() (ivy.array method)": [[646, "ivy.Array.inner"]], "inner() (ivy.container method)": [[646, "ivy.Container.inner"]], "inv() (ivy.array method)": [[647, "ivy.Array.inv"]], "inv() (ivy.container method)": [[647, "ivy.Container.inv"]], "matmul() (ivy.array method)": [[649, "ivy.Array.matmul"]], "matmul() (ivy.container method)": [[649, "ivy.Container.matmul"]], "matrix_norm() (ivy.array method)": [[650, "ivy.Array.matrix_norm"]], "matrix_norm() (ivy.container method)": [[650, "ivy.Container.matrix_norm"]], "matrix_power() (ivy.array method)": [[651, "ivy.Array.matrix_power"]], "matrix_power() (ivy.container method)": [[651, "ivy.Container.matrix_power"]], "matrix_rank() (ivy.array method)": [[652, "ivy.Array.matrix_rank"]], "matrix_rank() (ivy.container method)": [[652, "ivy.Container.matrix_rank"]], "matrix_transpose() (ivy.array method)": [[653, "ivy.Array.matrix_transpose"]], "matrix_transpose() (ivy.container method)": [[653, "ivy.Container.matrix_transpose"]], "outer() (ivy.array method)": [[654, "ivy.Array.outer"]], "outer() (ivy.container method)": [[654, "ivy.Container.outer"]], "pinv() (ivy.array method)": [[655, "ivy.Array.pinv"]], "pinv() (ivy.container method)": [[655, "ivy.Container.pinv"]], "qr() (ivy.array method)": [[656, "ivy.Array.qr"]], "qr() (ivy.container method)": [[656, "ivy.Container.qr"]], "slogdet() (ivy.array method)": [[657, "ivy.Array.slogdet"]], "slogdet() (ivy.container method)": [[657, "ivy.Container.slogdet"]], "solve() (ivy.array method)": [[658, "ivy.Array.solve"]], "solve() (ivy.container method)": [[658, "ivy.Container.solve"]], "svd() (ivy.array method)": [[659, "ivy.Array.svd"]], "svd() (ivy.container method)": [[659, "ivy.Container.svd"]], "svdvals() (ivy.array method)": [[660, "ivy.Array.svdvals"]], "svdvals() (ivy.container method)": [[660, "ivy.Container.svdvals"]], "tensordot() (ivy.array method)": [[661, "ivy.Array.tensordot"]], "tensordot() (ivy.container method)": [[661, "ivy.Container.tensordot"]], "tensorsolve() (ivy.array method)": [[662, "ivy.Array.tensorsolve"]], "tensorsolve() (ivy.container method)": [[662, "ivy.Container.tensorsolve"]], "trace() (ivy.array method)": [[663, "ivy.Array.trace"]], "trace() (ivy.container method)": [[663, "ivy.Container.trace"]], "vander() (ivy.array method)": [[664, "ivy.Array.vander"]], "vander() (ivy.container method)": [[664, "ivy.Container.vander"]], "vecdot() (ivy.array method)": [[665, "ivy.Array.vecdot"]], "vecdot() (ivy.container method)": [[665, "ivy.Container.vecdot"]], "vector_norm() (ivy.array method)": [[666, "ivy.Array.vector_norm"]], "vector_norm() (ivy.container method)": [[666, "ivy.Container.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.array method)": [[667, "ivy.Array.vector_to_skew_symmetric_matrix"]], "vector_to_skew_symmetric_matrix() (ivy.container method)": [[667, "ivy.Container.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (ivy.array method)": [[668, "ivy.Array.binary_cross_entropy"]], "binary_cross_entropy() (ivy.container method)": [[668, "ivy.Container.binary_cross_entropy"]], "cross_entropy() (ivy.array method)": [[669, "ivy.Array.cross_entropy"]], "cross_entropy() (ivy.container method)": [[669, "ivy.Container.cross_entropy"]], "sparse_cross_entropy() (ivy.array method)": [[670, "ivy.Array.sparse_cross_entropy"]], "sparse_cross_entropy() (ivy.container method)": [[670, "ivy.Container.sparse_cross_entropy"]], "clip() (ivy.array method)": [[671, "ivy.Array.clip"]], "clip() (ivy.container method)": [[671, "ivy.Container.clip"]], "concat() (ivy.array method)": [[672, "ivy.Array.concat"]], "concat() (ivy.container method)": [[672, "ivy.Container.concat"]], "constant_pad() (ivy.array method)": [[673, "ivy.Array.constant_pad"]], "constant_pad() (ivy.container method)": [[673, "ivy.Container.constant_pad"]], "expand_dims() (ivy.array method)": [[674, "ivy.Array.expand_dims"]], "expand_dims() (ivy.container method)": [[674, "ivy.Container.expand_dims"]], "flip() (ivy.array method)": [[675, "ivy.Array.flip"]], "flip() (ivy.container method)": [[675, "ivy.Container.flip"]], "permute_dims() (ivy.array method)": [[676, "ivy.Array.permute_dims"]], "permute_dims() (ivy.container method)": [[676, "ivy.Container.permute_dims"]], "repeat() (ivy.array method)": [[677, "ivy.Array.repeat"]], "repeat() (ivy.container method)": [[677, "ivy.Container.repeat"]], "reshape() (ivy.array method)": [[678, "ivy.Array.reshape"]], "reshape() (ivy.container method)": [[678, "ivy.Container.reshape"]], "roll() (ivy.array method)": [[679, "ivy.Array.roll"]], "roll() (ivy.container method)": [[679, "ivy.Container.roll"]], "split() (ivy.array method)": [[680, "ivy.Array.split"]], "split() (ivy.container method)": [[680, "ivy.Container.split"]], "squeeze() (ivy.array method)": [[681, "ivy.Array.squeeze"]], "squeeze() (ivy.container method)": [[681, "ivy.Container.squeeze"]], "stack() (ivy.array method)": [[682, "ivy.Array.stack"]], "stack() (ivy.container method)": [[682, "ivy.Container.stack"]], "swapaxes() (ivy.array method)": [[683, "ivy.Array.swapaxes"]], "swapaxes() (ivy.container method)": [[683, "ivy.Container.swapaxes"]], "tile() (ivy.array method)": [[684, "ivy.Array.tile"]], "tile() (ivy.container method)": [[684, "ivy.Container.tile"]], "unstack() (ivy.array method)": [[685, "ivy.Array.unstack"]], "unstack() (ivy.container method)": [[685, "ivy.Container.unstack"]], "zero_pad() (ivy.array method)": [[686, "ivy.Array.zero_pad"]], "zero_pad() (ivy.container method)": [[686, "ivy.Container.zero_pad"]], "layer_norm() (ivy.array method)": [[709, "ivy.Array.layer_norm"]], "layer_norm() (ivy.container method)": [[709, "ivy.Container.layer_norm"]], "multinomial() (ivy.array method)": [[710, "ivy.Array.multinomial"]], "multinomial() (ivy.container method)": [[710, "ivy.Container.multinomial"]], "randint() (ivy.array method)": [[711, "ivy.Array.randint"]], "randint() (ivy.container method)": [[711, "ivy.Container.randint"]], "random_normal() (ivy.array method)": [[712, "ivy.Array.random_normal"]], "random_normal() (ivy.container method)": [[712, "ivy.Container.random_normal"]], "random_uniform() (ivy.array method)": [[713, "ivy.Array.random_uniform"]], "random_uniform() (ivy.container method)": [[713, "ivy.Container.random_uniform"]], "shuffle() (ivy.array method)": [[715, "ivy.Array.shuffle"]], "shuffle() (ivy.container method)": [[715, "ivy.Container.shuffle"]], "argmax() (ivy.array method)": [[716, "ivy.Array.argmax"]], "argmax() (ivy.container method)": [[716, "ivy.Container.argmax"]], "argmin() (ivy.array method)": [[717, "ivy.Array.argmin"]], "argmin() (ivy.container method)": [[717, "ivy.Container.argmin"]], "argwhere() (ivy.array method)": [[718, "ivy.Array.argwhere"]], "argwhere() (ivy.container method)": [[718, "ivy.Container.argwhere"]], "nonzero() (ivy.array method)": [[719, "ivy.Array.nonzero"]], "nonzero() (ivy.container method)": [[719, "ivy.Container.nonzero"]], "where() (ivy.array method)": [[720, "ivy.Array.where"]], "where() (ivy.container method)": [[720, "ivy.Container.where"]], "unique_all() (ivy.array method)": [[721, "ivy.Array.unique_all"]], "unique_all() (ivy.container method)": [[721, "ivy.Container.unique_all"]], "unique_counts() (ivy.array method)": [[722, "ivy.Array.unique_counts"]], "unique_counts() (ivy.container method)": [[722, "ivy.Container.unique_counts"]], "unique_inverse() (ivy.array method)": [[723, "ivy.Array.unique_inverse"]], "unique_inverse() (ivy.container method)": [[723, "ivy.Container.unique_inverse"]], "unique_values() (ivy.array method)": [[724, "ivy.Array.unique_values"]], "unique_values() (ivy.container method)": [[724, "ivy.Container.unique_values"]], "argsort() (ivy.array method)": [[725, "ivy.Array.argsort"]], "argsort() (ivy.container method)": [[725, "ivy.Container.argsort"]], "msort() (ivy.array method)": [[726, "ivy.Array.msort"]], "msort() (ivy.container method)": [[726, "ivy.Container.msort"]], "searchsorted() (ivy.array method)": [[727, "ivy.Array.searchsorted"]], "searchsorted() (ivy.container method)": [[727, "ivy.Container.searchsorted"]], "sort() (ivy.array method)": [[728, "ivy.Array.sort"]], "sort() (ivy.container method)": [[728, "ivy.Container.sort"]], "cumprod() (ivy.array method)": [[729, "ivy.Array.cumprod"]], "cumprod() (ivy.container method)": [[729, "ivy.Container.cumprod"]], "cumsum() (ivy.array method)": [[730, "ivy.Array.cumsum"]], "cumsum() (ivy.container method)": [[730, "ivy.Container.cumsum"]], "einsum() (ivy.array method)": [[731, "ivy.Array.einsum"]], "einsum() (ivy.container method)": [[731, "ivy.Container.einsum"]], "max() (ivy.array method)": [[732, "ivy.Array.max"]], "max() (ivy.container method)": [[732, "ivy.Container.max"]], "mean() (ivy.array method)": [[733, "ivy.Array.mean"]], "mean() (ivy.container method)": [[733, "ivy.Container.mean"]], "min() (ivy.array method)": [[734, "ivy.Array.min"]], "min() (ivy.container method)": [[734, "ivy.Container.min"]], "prod() (ivy.array method)": [[735, "ivy.Array.prod"]], "prod() (ivy.container method)": [[735, "ivy.Container.prod"]], "std() (ivy.array method)": [[736, "ivy.Array.std"]], "std() (ivy.container method)": [[736, "ivy.Container.std"]], "sum() (ivy.array method)": [[737, "ivy.Array.sum"]], "sum() (ivy.container method)": [[737, "ivy.Container.sum"]], "var() (ivy.array method)": [[738, "ivy.Array.var"]], "var() (ivy.container method)": [[738, "ivy.Container.var"]], "all() (ivy.array method)": [[739, "ivy.Array.all"]], "all() (ivy.container method)": [[739, "ivy.Container.all"]], "any() (ivy.array method)": [[740, "ivy.Array.any"]], "any() (ivy.container method)": [[740, "ivy.Container.any"]], "assert_all_close() (in module ivy_tests.test_ivy.helpers.assertions)": [[743, "ivy_tests.test_ivy.helpers.assertions.assert_all_close"]], "assert_same_type() (in module ivy_tests.test_ivy.helpers.assertions)": [[743, "ivy_tests.test_ivy.helpers.assertions.assert_same_type"]], "assert_same_type_and_shape() (in module ivy_tests.test_ivy.helpers.assertions)": [[743, "ivy_tests.test_ivy.helpers.assertions.assert_same_type_and_shape"]], "check_unsupported_device() (in module ivy_tests.test_ivy.helpers.assertions)": [[743, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device"]], "check_unsupported_device_and_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[743, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device_and_dtype"]], "check_unsupported_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[743, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_dtype"]], "ivy_tests.test_ivy.helpers.assertions": [[743, "module-ivy_tests.test_ivy.helpers.assertions"]], "test_unsupported_function() (in module ivy_tests.test_ivy.helpers.assertions)": [[743, "ivy_tests.test_ivy.helpers.assertions.test_unsupported_function"]], "value_test() (in module ivy_tests.test_ivy.helpers.assertions)": [[743, "ivy_tests.test_ivy.helpers.assertions.value_test"]], "ivy_tests.test_ivy.helpers.available_frameworks": [[744, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "args_to_container() (in module ivy_tests.test_ivy.helpers.function_testing)": [[745, "ivy_tests.test_ivy.helpers.function_testing.args_to_container"]], "args_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[745, "ivy_tests.test_ivy.helpers.function_testing.args_to_frontend"]], "arrays_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[745, "ivy_tests.test_ivy.helpers.function_testing.arrays_to_frontend"]], "as_lists() (in module ivy_tests.test_ivy.helpers.function_testing)": [[745, "ivy_tests.test_ivy.helpers.function_testing.as_lists"]], "convtrue() (in module ivy_tests.test_ivy.helpers.function_testing)": [[745, "ivy_tests.test_ivy.helpers.function_testing.convtrue"]], "create_args_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[745, "ivy_tests.test_ivy.helpers.function_testing.create_args_kwargs"]], "flatten() (in module ivy_tests.test_ivy.helpers.function_testing)": [[745, "ivy_tests.test_ivy.helpers.function_testing.flatten"]], "flatten_and_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[745, "ivy_tests.test_ivy.helpers.function_testing.flatten_and_to_np"]], "flatten_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[745, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend"]], "flatten_frontend_fw_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[745, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_fw_to_np"]], "flatten_frontend_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[745, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_to_np"]], "get_frontend_ret() (in module ivy_tests.test_ivy.helpers.function_testing)": [[745, "ivy_tests.test_ivy.helpers.function_testing.get_frontend_ret"]], "get_ret_and_flattened_np_array() (in module ivy_tests.test_ivy.helpers.function_testing)": [[745, "ivy_tests.test_ivy.helpers.function_testing.get_ret_and_flattened_np_array"]], "gradient_incompatible_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[745, "ivy_tests.test_ivy.helpers.function_testing.gradient_incompatible_function"]], "gradient_test() (in module ivy_tests.test_ivy.helpers.function_testing)": [[745, "ivy_tests.test_ivy.helpers.function_testing.gradient_test"]], "gradient_unsupported_dtypes() (in module ivy_tests.test_ivy.helpers.function_testing)": [[745, "ivy_tests.test_ivy.helpers.function_testing.gradient_unsupported_dtypes"]], "ivy_tests.test_ivy.helpers.function_testing": [[745, "module-ivy_tests.test_ivy.helpers.function_testing"]], "kwargs_to_args_n_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[745, "ivy_tests.test_ivy.helpers.function_testing.kwargs_to_args_n_kwargs"]], "test_frontend_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[745, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_function"]], "test_frontend_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[745, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_method"]], "test_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[745, "ivy_tests.test_ivy.helpers.function_testing.test_function"]], "test_function_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[745, "ivy_tests.test_ivy.helpers.function_testing.test_function_backend_computation"]], "test_function_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[745, "ivy_tests.test_ivy.helpers.function_testing.test_function_ground_truth_computation"]], "test_gradient_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[745, "ivy_tests.test_ivy.helpers.function_testing.test_gradient_backend_computation"]], "test_gradient_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[745, "ivy_tests.test_ivy.helpers.function_testing.test_gradient_ground_truth_computation"]], "test_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[745, "ivy_tests.test_ivy.helpers.function_testing.test_method"]], "test_method_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[745, "ivy_tests.test_ivy.helpers.function_testing.test_method_backend_computation"]], "test_method_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[745, "ivy_tests.test_ivy.helpers.function_testing.test_method_ground_truth_computation"]], "traced_if_required() (in module ivy_tests.test_ivy.helpers.function_testing)": [[745, "ivy_tests.test_ivy.helpers.function_testing.traced_if_required"]], "wrap_frontend_function_args() (in module ivy_tests.test_ivy.helpers.function_testing)": [[745, "ivy_tests.test_ivy.helpers.function_testing.wrap_frontend_function_args"]], "current_frontend_config (in module ivy_tests.test_ivy.helpers.globals)": [[746, "ivy_tests.test_ivy.helpers.globals.CURRENT_FRONTEND_CONFIG"]], "interruptedtest": [[746, "ivy_tests.test_ivy.helpers.globals.InterruptedTest"]], "testdata (class in ivy_tests.test_ivy.helpers.globals)": [[746, "ivy_tests.test_ivy.helpers.globals.TestData"]], "__init__() (ivy_tests.test_ivy.helpers.globals.interruptedtest method)": [[746, "ivy_tests.test_ivy.helpers.globals.InterruptedTest.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.globals.testdata method)": [[746, "ivy_tests.test_ivy.helpers.globals.TestData.__init__"]], "fn_name (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[746, "ivy_tests.test_ivy.helpers.globals.TestData.fn_name"]], "fn_tree (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[746, "ivy_tests.test_ivy.helpers.globals.TestData.fn_tree"]], "is_method (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[746, "ivy_tests.test_ivy.helpers.globals.TestData.is_method"]], "ivy_tests.test_ivy.helpers.globals": [[746, "module-ivy_tests.test_ivy.helpers.globals"]], "setup_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[746, "ivy_tests.test_ivy.helpers.globals.setup_api_test"]], "setup_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[746, "ivy_tests.test_ivy.helpers.globals.setup_frontend_test"]], "supported_device_dtypes (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[746, "ivy_tests.test_ivy.helpers.globals.TestData.supported_device_dtypes"]], "teardown_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[746, "ivy_tests.test_ivy.helpers.globals.teardown_api_test"]], "teardown_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[746, "ivy_tests.test_ivy.helpers.globals.teardown_frontend_test"]], "test_fn (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[746, "ivy_tests.test_ivy.helpers.globals.TestData.test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[747, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"]], "array_and_broadcastable_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[748, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_and_broadcastable_shape"]], "array_bools() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[748, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_bools"]], "array_helpers_dtype_info_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[748, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_helpers_dtype_info_helper"]], "array_indices_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[748, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_axis"]], "array_indices_put_along_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[748, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_put_along_axis"]], "array_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[748, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_values"]], "arrays_and_axes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[748, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_and_axes"]], "arrays_for_pooling() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[748, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_for_pooling"]], "broadcast_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[748, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.broadcast_shapes"]], "cond_data_gen_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[748, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.cond_data_gen_helper"]], "create_concatenable_arrays_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[748, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.create_concatenable_arrays_dtypes"]], "create_nested_input() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[748, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.create_nested_input"]], "dtype_and_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[748, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_and_values"]], "dtype_array_query() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[748, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_array_query"]], "dtype_array_query_val() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[748, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_array_query_val"]], "dtype_values_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[748, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_values_axis"]], "einsum_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[748, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.einsum_helper"]], "get_first_solve_batch_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[748, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_first_solve_batch_matrix"]], "get_first_solve_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[748, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_first_solve_matrix"]], "get_second_solve_batch_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[748, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_second_solve_batch_matrix"]], "get_second_solve_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[748, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_second_solve_matrix"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[748, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "list_of_size() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[748, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.list_of_size"]], "lists() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[748, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.lists"]], "mutually_broadcastable_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[748, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.mutually_broadcastable_shapes"]], "prod() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[748, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.prod"]], "array_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[749, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.array_dtypes"]], "cast_filter() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[749, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.cast_filter"]], "cast_filter_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[749, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.cast_filter_helper"]], "get_castable_dtype() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[749, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_castable_dtype"]], "get_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[749, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[749, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "apply_safety_factor() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[750, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.apply_safety_factor"]], "embedding_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[750, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.embedding_helper"]], "general_helpers_dtype_info_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[750, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.general_helpers_dtype_info_helper"]], "get_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[750, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_axis"]], "get_bounds() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[750, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_bounds"]], "get_mean_std() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[750, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_mean_std"]], "get_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[750, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_shape"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[750, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "matrix_is_stable() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[750, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.matrix_is_stable"]], "reshape_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[750, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.reshape_shapes"]], "subsets() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[750, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.subsets"]], "x_and_filters() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[750, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.x_and_filters"]], "floats() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[751, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.floats"]], "ints() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[751, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.ints"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[751, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "number() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[751, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.number"]], "backend_proc() (in module ivy_tests.test_ivy.helpers.multiprocessing)": [[752, "ivy_tests.test_ivy.helpers.multiprocessing.backend_proc"]], "frontend_proc() (in module ivy_tests.test_ivy.helpers.multiprocessing)": [[752, "ivy_tests.test_ivy.helpers.multiprocessing.frontend_proc"]], "ivy_tests.test_ivy.helpers.multiprocessing": [[752, "module-ivy_tests.test_ivy.helpers.multiprocessing"]], "backendhandler (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[753, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler"]], "backendhandlermode (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[753, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode"]], "setbackend (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandlermode attribute)": [[753, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode.SetBackend"]], "withbackend (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandlermode attribute)": [[753, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode.WithBackend"]], "withbackendcontext (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[753, "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext"]], "__init__() (ivy_tests.test_ivy.helpers.pipeline_helper.withbackendcontext method)": [[753, "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext.__init__"]], "get_frontend_config() (in module ivy_tests.test_ivy.helpers.pipeline_helper)": [[753, "ivy_tests.test_ivy.helpers.pipeline_helper.get_frontend_config"]], "ivy_tests.test_ivy.helpers.pipeline_helper": [[753, "module-ivy_tests.test_ivy.helpers.pipeline_helper"]], "update_backend() (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandler class method)": [[753, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler.update_backend"]], "frontendmethoddata (class in ivy_tests.test_ivy.helpers.structs)": [[754, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData"]], "__init__() (ivy_tests.test_ivy.helpers.structs.frontendmethoddata method)": [[754, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.__init__"]], "framework_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[754, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.framework_init_module"]], "init_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[754, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.init_name"]], "ivy_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[754, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.ivy_init_module"]], "ivy_tests.test_ivy.helpers.structs": [[754, "module-ivy_tests.test_ivy.helpers.structs"]], "method_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[754, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.method_name"]], "dynamicflag (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[755, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag"]], "frontendfunctiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[755, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags"]], "frontendinittestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[755, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags"]], "frontendmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[755, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags"]], "functiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[755, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags"]], "initmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[755, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags"]], "methodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[755, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags"]], "testflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[755, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.dynamicflag method)": [[755, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[755, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendinittestflags method)": [[755, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[755, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[755, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[755, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[755, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.__init__"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[755, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendinittestflags method)": [[755, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[755, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[755, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[755, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[755, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.testflags method)": [[755, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags.apply_flags"]], "build_flag() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[755, "ivy_tests.test_ivy.helpers.test_parameter_flags.build_flag"]], "frontend_function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[755, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_function_flags"]], "frontend_init_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[755, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_init_flags"]], "frontend_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[755, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_method_flags"]], "function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[755, "ivy_tests.test_ivy.helpers.test_parameter_flags.function_flags"]], "init_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[755, "ivy_tests.test_ivy.helpers.test_parameter_flags.init_method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[755, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[755, "ivy_tests.test_ivy.helpers.test_parameter_flags.method_flags"]], "strategy (ivy_tests.test_ivy.helpers.test_parameter_flags.dynamicflag attribute)": [[755, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag.strategy"]], "handle_frontend_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[756, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_method"]], "handle_frontend_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[756, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_test"]], "handle_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[756, "ivy_tests.test_ivy.helpers.testing_helpers.handle_method"]], "handle_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[756, "ivy_tests.test_ivy.helpers.testing_helpers.handle_test"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[756, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "num_positional_args() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[756, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args"]], "num_positional_args_helper() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[756, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_helper"]], "num_positional_args_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[756, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_method"]], "seed() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[756, "ivy_tests.test_ivy.helpers.testing_helpers.seed"]], "elu (class in ivy.stateful.activations)": [[760, "ivy.stateful.activations.ELU"]], "geglu (class in ivy.stateful.activations)": [[760, "ivy.stateful.activations.GEGLU"]], "gelu (class in ivy.stateful.activations)": [[760, "ivy.stateful.activations.GELU"]], "hardswish (class in ivy.stateful.activations)": [[760, "ivy.stateful.activations.Hardswish"]], "leakyrelu (class in ivy.stateful.activations)": [[760, "ivy.stateful.activations.LeakyReLU"]], "logsigmoid (class in ivy.stateful.activations)": [[760, "ivy.stateful.activations.LogSigmoid"]], "logsoftmax (class in ivy.stateful.activations)": [[760, "ivy.stateful.activations.LogSoftmax"]], "logit (class in ivy.stateful.activations)": [[760, "ivy.stateful.activations.Logit"]], "mish (class in ivy.stateful.activations)": [[760, "ivy.stateful.activations.Mish"]], "prelu (class in ivy.stateful.activations)": [[760, "ivy.stateful.activations.PReLU"]], "relu (class in ivy.stateful.activations)": [[760, "ivy.stateful.activations.ReLU"]], "relu6 (class in ivy.stateful.activations)": [[760, "ivy.stateful.activations.ReLU6"]], "selu (class in ivy.stateful.activations)": [[760, "ivy.stateful.activations.SeLU"]], "silu (class in ivy.stateful.activations)": [[760, "ivy.stateful.activations.SiLU"]], "sigmoid (class in ivy.stateful.activations)": [[760, "ivy.stateful.activations.Sigmoid"]], "softmax (class in ivy.stateful.activations)": [[760, "ivy.stateful.activations.Softmax"]], "softplus (class in ivy.stateful.activations)": [[760, "ivy.stateful.activations.Softplus"]], "tanh (class in ivy.stateful.activations)": [[760, "ivy.stateful.activations.Tanh"]], "__init__() (ivy.stateful.activations.elu method)": [[760, "ivy.stateful.activations.ELU.__init__"]], "__init__() (ivy.stateful.activations.geglu method)": [[760, "ivy.stateful.activations.GEGLU.__init__"]], "__init__() (ivy.stateful.activations.gelu method)": [[760, "ivy.stateful.activations.GELU.__init__"]], "__init__() (ivy.stateful.activations.hardswish method)": [[760, "ivy.stateful.activations.Hardswish.__init__"]], "__init__() (ivy.stateful.activations.leakyrelu method)": [[760, "ivy.stateful.activations.LeakyReLU.__init__"]], "__init__() (ivy.stateful.activations.logsigmoid method)": [[760, "ivy.stateful.activations.LogSigmoid.__init__"]], "__init__() (ivy.stateful.activations.logsoftmax method)": [[760, "ivy.stateful.activations.LogSoftmax.__init__"]], "__init__() (ivy.stateful.activations.logit method)": [[760, "ivy.stateful.activations.Logit.__init__"]], "__init__() (ivy.stateful.activations.mish method)": [[760, "ivy.stateful.activations.Mish.__init__"]], "__init__() (ivy.stateful.activations.prelu method)": [[760, "ivy.stateful.activations.PReLU.__init__"]], "__init__() (ivy.stateful.activations.relu method)": [[760, "ivy.stateful.activations.ReLU.__init__"]], "__init__() (ivy.stateful.activations.relu6 method)": [[760, "ivy.stateful.activations.ReLU6.__init__"]], "__init__() (ivy.stateful.activations.selu method)": [[760, "ivy.stateful.activations.SeLU.__init__"]], "__init__() (ivy.stateful.activations.silu method)": [[760, "ivy.stateful.activations.SiLU.__init__"]], "__init__() (ivy.stateful.activations.sigmoid method)": [[760, "ivy.stateful.activations.Sigmoid.__init__"]], "__init__() (ivy.stateful.activations.softmax method)": [[760, "ivy.stateful.activations.Softmax.__init__"]], "__init__() (ivy.stateful.activations.softplus method)": [[760, "ivy.stateful.activations.Softplus.__init__"]], "__init__() (ivy.stateful.activations.tanh method)": [[760, "ivy.stateful.activations.Tanh.__init__"]], "ivy.stateful.activations": [[760, "module-ivy.stateful.activations"]], "moduleconverters (class in ivy.stateful.converters)": [[761, "ivy.stateful.converters.ModuleConverters"]], "from_flax_module() (ivy.stateful.converters.moduleconverters static method)": [[761, "ivy.stateful.converters.ModuleConverters.from_flax_module"]], "from_haiku_module() (ivy.stateful.converters.moduleconverters static method)": [[761, "ivy.stateful.converters.ModuleConverters.from_haiku_module"]], "from_keras_module() (ivy.stateful.converters.moduleconverters static method)": [[761, "ivy.stateful.converters.ModuleConverters.from_keras_module"]], "from_paddle_module() (ivy.stateful.converters.moduleconverters static method)": [[761, "ivy.stateful.converters.ModuleConverters.from_paddle_module"]], "from_torch_module() (ivy.stateful.converters.moduleconverters static method)": [[761, "ivy.stateful.converters.ModuleConverters.from_torch_module"]], "ivy.stateful.converters": [[761, "module-ivy.stateful.converters"]], "to_ivy_module() (in module ivy.stateful.converters)": [[761, "ivy.stateful.converters.to_ivy_module"]], "modulehelpers (class in ivy.stateful.helpers)": [[762, "ivy.stateful.helpers.ModuleHelpers"]], "check_submod_rets() (ivy.stateful.helpers.modulehelpers method)": [[762, "ivy.stateful.helpers.ModuleHelpers.check_submod_rets"]], "get_mod_key() (ivy.stateful.helpers.modulehelpers method)": [[762, "ivy.stateful.helpers.ModuleHelpers.get_mod_key"]], "ivy.stateful.helpers": [[762, "module-ivy.stateful.helpers"]], "mod_depth() (ivy.stateful.helpers.modulehelpers method)": [[762, "ivy.stateful.helpers.ModuleHelpers.mod_depth"]], "mod_height() (ivy.stateful.helpers.modulehelpers method)": [[762, "ivy.stateful.helpers.ModuleHelpers.mod_height"]], "mod_with_top_mod_key_chain() (ivy.stateful.helpers.modulehelpers method)": [[762, "ivy.stateful.helpers.ModuleHelpers.mod_with_top_mod_key_chain"]], "show_mod_in_top_mod() (ivy.stateful.helpers.modulehelpers method)": [[762, "ivy.stateful.helpers.ModuleHelpers.show_mod_in_top_mod"]], "show_structure() (ivy.stateful.helpers.modulehelpers method)": [[762, "ivy.stateful.helpers.ModuleHelpers.show_structure"]], "show_v_in_top_v() (ivy.stateful.helpers.modulehelpers method)": [[762, "ivy.stateful.helpers.ModuleHelpers.show_v_in_top_v"]], "sub_mods() (ivy.stateful.helpers.modulehelpers method)": [[762, "ivy.stateful.helpers.ModuleHelpers.sub_mods"]], "track_submod_call_order() (ivy.stateful.helpers.modulehelpers method)": [[762, "ivy.stateful.helpers.ModuleHelpers.track_submod_call_order"]], "track_submod_rets() (ivy.stateful.helpers.modulehelpers method)": [[762, "ivy.stateful.helpers.ModuleHelpers.track_submod_rets"]], "v_with_top_v_key_chains() (ivy.stateful.helpers.modulehelpers method)": [[762, "ivy.stateful.helpers.ModuleHelpers.v_with_top_v_key_chains"]], "constant (class in ivy.stateful.initializers)": [[763, "ivy.stateful.initializers.Constant"]], "firstlayersiren (class in ivy.stateful.initializers)": [[763, "ivy.stateful.initializers.FirstLayerSiren"]], "glorotuniform (class in ivy.stateful.initializers)": [[763, "ivy.stateful.initializers.GlorotUniform"]], "initializer (class in ivy.stateful.initializers)": [[763, "ivy.stateful.initializers.Initializer"]], "kaimingnormal (class in ivy.stateful.initializers)": [[763, "ivy.stateful.initializers.KaimingNormal"]], "ones (class in ivy.stateful.initializers)": [[763, "ivy.stateful.initializers.Ones"]], "randomnormal (class in ivy.stateful.initializers)": [[763, "ivy.stateful.initializers.RandomNormal"]], "siren (class in ivy.stateful.initializers)": [[763, "ivy.stateful.initializers.Siren"]], "uniform (class in ivy.stateful.initializers)": [[763, "ivy.stateful.initializers.Uniform"]], "zeros (class in ivy.stateful.initializers)": [[763, "ivy.stateful.initializers.Zeros"]], "__init__() (ivy.stateful.initializers.constant method)": [[763, "ivy.stateful.initializers.Constant.__init__"]], "__init__() (ivy.stateful.initializers.firstlayersiren method)": [[763, "ivy.stateful.initializers.FirstLayerSiren.__init__"]], "__init__() (ivy.stateful.initializers.glorotuniform method)": [[763, "ivy.stateful.initializers.GlorotUniform.__init__"]], "__init__() (ivy.stateful.initializers.kaimingnormal method)": [[763, "ivy.stateful.initializers.KaimingNormal.__init__"]], "__init__() (ivy.stateful.initializers.ones method)": [[763, "ivy.stateful.initializers.Ones.__init__"]], "__init__() (ivy.stateful.initializers.randomnormal method)": [[763, "ivy.stateful.initializers.RandomNormal.__init__"]], "__init__() (ivy.stateful.initializers.siren method)": [[763, "ivy.stateful.initializers.Siren.__init__"]], "__init__() (ivy.stateful.initializers.uniform method)": [[763, "ivy.stateful.initializers.Uniform.__init__"]], "__init__() (ivy.stateful.initializers.zeros method)": [[763, "ivy.stateful.initializers.Zeros.__init__"]], "create_variables() (ivy.stateful.initializers.constant method)": [[763, "ivy.stateful.initializers.Constant.create_variables"]], "create_variables() (ivy.stateful.initializers.initializer method)": [[763, "ivy.stateful.initializers.Initializer.create_variables"]], "create_variables() (ivy.stateful.initializers.kaimingnormal method)": [[763, "ivy.stateful.initializers.KaimingNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.randomnormal method)": [[763, "ivy.stateful.initializers.RandomNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.uniform method)": [[763, "ivy.stateful.initializers.Uniform.create_variables"]], "ivy.stateful.initializers": [[763, "module-ivy.stateful.initializers"]], "adaptiveavgpool1d (class in ivy.stateful.layers)": [[764, "ivy.stateful.layers.AdaptiveAvgPool1d"]], "adaptiveavgpool2d (class in ivy.stateful.layers)": [[764, "ivy.stateful.layers.AdaptiveAvgPool2d"]], "avgpool1d (class in ivy.stateful.layers)": [[764, "ivy.stateful.layers.AvgPool1D"]], "avgpool2d (class in ivy.stateful.layers)": [[764, "ivy.stateful.layers.AvgPool2D"]], "avgpool3d (class in ivy.stateful.layers)": [[764, "ivy.stateful.layers.AvgPool3D"]], "conv1d (class in ivy.stateful.layers)": [[764, "ivy.stateful.layers.Conv1D"]], "conv1dtranspose (class in ivy.stateful.layers)": [[764, "ivy.stateful.layers.Conv1DTranspose"]], "conv2d (class in ivy.stateful.layers)": [[764, "ivy.stateful.layers.Conv2D"]], "conv2dtranspose (class in ivy.stateful.layers)": [[764, "ivy.stateful.layers.Conv2DTranspose"]], "conv3d (class in ivy.stateful.layers)": [[764, "ivy.stateful.layers.Conv3D"]], "conv3dtranspose (class in ivy.stateful.layers)": [[764, "ivy.stateful.layers.Conv3DTranspose"]], "dct (class in ivy.stateful.layers)": [[764, "ivy.stateful.layers.Dct"]], "depthwiseconv2d (class in ivy.stateful.layers)": [[764, "ivy.stateful.layers.DepthwiseConv2D"]], "dropout (class in ivy.stateful.layers)": [[764, "ivy.stateful.layers.Dropout"]], "embedding (class in ivy.stateful.layers)": [[764, "ivy.stateful.layers.Embedding"]], "fft (class in ivy.stateful.layers)": [[764, "ivy.stateful.layers.FFT"]], "ifft (class in ivy.stateful.layers)": [[764, "ivy.stateful.layers.IFFT"]], "identity (class in ivy.stateful.layers)": [[764, "ivy.stateful.layers.Identity"]], "lstm (class in ivy.stateful.layers)": [[764, "ivy.stateful.layers.LSTM"]], "linear (class in ivy.stateful.layers)": [[764, "ivy.stateful.layers.Linear"]], "maxpool1d (class in ivy.stateful.layers)": [[764, "ivy.stateful.layers.MaxPool1D"]], "maxpool2d (class in ivy.stateful.layers)": [[764, "ivy.stateful.layers.MaxPool2D"]], "maxpool3d (class in ivy.stateful.layers)": [[764, "ivy.stateful.layers.MaxPool3D"]], "multiheadattention (class in ivy.stateful.layers)": [[764, "ivy.stateful.layers.MultiHeadAttention"]], "__init__() (ivy.stateful.layers.adaptiveavgpool1d method)": [[764, "ivy.stateful.layers.AdaptiveAvgPool1d.__init__"]], "__init__() (ivy.stateful.layers.adaptiveavgpool2d method)": [[764, "ivy.stateful.layers.AdaptiveAvgPool2d.__init__"]], "__init__() (ivy.stateful.layers.avgpool1d method)": [[764, "ivy.stateful.layers.AvgPool1D.__init__"]], "__init__() (ivy.stateful.layers.avgpool2d method)": [[764, "ivy.stateful.layers.AvgPool2D.__init__"]], "__init__() (ivy.stateful.layers.avgpool3d method)": [[764, "ivy.stateful.layers.AvgPool3D.__init__"]], "__init__() (ivy.stateful.layers.conv1d method)": [[764, "ivy.stateful.layers.Conv1D.__init__"]], "__init__() (ivy.stateful.layers.conv1dtranspose method)": [[764, "ivy.stateful.layers.Conv1DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv2d method)": [[764, "ivy.stateful.layers.Conv2D.__init__"]], "__init__() (ivy.stateful.layers.conv2dtranspose method)": [[764, "ivy.stateful.layers.Conv2DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv3d method)": [[764, "ivy.stateful.layers.Conv3D.__init__"]], "__init__() (ivy.stateful.layers.conv3dtranspose method)": [[764, "ivy.stateful.layers.Conv3DTranspose.__init__"]], "__init__() (ivy.stateful.layers.dct method)": [[764, "ivy.stateful.layers.Dct.__init__"]], "__init__() (ivy.stateful.layers.depthwiseconv2d method)": [[764, "ivy.stateful.layers.DepthwiseConv2D.__init__"]], "__init__() (ivy.stateful.layers.dropout method)": [[764, "ivy.stateful.layers.Dropout.__init__"]], "__init__() (ivy.stateful.layers.embedding method)": [[764, "ivy.stateful.layers.Embedding.__init__"]], "__init__() (ivy.stateful.layers.fft method)": [[764, "ivy.stateful.layers.FFT.__init__"]], "__init__() (ivy.stateful.layers.ifft method)": [[764, "ivy.stateful.layers.IFFT.__init__"]], "__init__() (ivy.stateful.layers.identity method)": [[764, "ivy.stateful.layers.Identity.__init__"]], "__init__() (ivy.stateful.layers.lstm method)": [[764, "ivy.stateful.layers.LSTM.__init__"]], "__init__() (ivy.stateful.layers.linear method)": [[764, "ivy.stateful.layers.Linear.__init__"]], "__init__() (ivy.stateful.layers.maxpool1d method)": [[764, "ivy.stateful.layers.MaxPool1D.__init__"]], "__init__() (ivy.stateful.layers.maxpool2d method)": [[764, "ivy.stateful.layers.MaxPool2D.__init__"]], "__init__() (ivy.stateful.layers.maxpool3d method)": [[764, "ivy.stateful.layers.MaxPool3D.__init__"]], "__init__() (ivy.stateful.layers.multiheadattention method)": [[764, "ivy.stateful.layers.MultiHeadAttention.__init__"]], "extra_repr() (ivy.stateful.layers.adaptiveavgpool1d method)": [[764, "ivy.stateful.layers.AdaptiveAvgPool1d.extra_repr"]], "extra_repr() (ivy.stateful.layers.adaptiveavgpool2d method)": [[764, "ivy.stateful.layers.AdaptiveAvgPool2d.extra_repr"]], "extra_repr() (ivy.stateful.layers.avgpool1d method)": [[764, "ivy.stateful.layers.AvgPool1D.extra_repr"]], "extra_repr() (ivy.stateful.layers.avgpool2d method)": [[764, "ivy.stateful.layers.AvgPool2D.extra_repr"]], "extra_repr() (ivy.stateful.layers.avgpool3d method)": [[764, "ivy.stateful.layers.AvgPool3D.extra_repr"]], "extra_repr() (ivy.stateful.layers.conv1d method)": [[764, "ivy.stateful.layers.Conv1D.extra_repr"]], "extra_repr() (ivy.stateful.layers.conv1dtranspose method)": [[764, "ivy.stateful.layers.Conv1DTranspose.extra_repr"]], "extra_repr() (ivy.stateful.layers.conv2d method)": [[764, "ivy.stateful.layers.Conv2D.extra_repr"]], "extra_repr() (ivy.stateful.layers.conv2dtranspose method)": [[764, "ivy.stateful.layers.Conv2DTranspose.extra_repr"]], "extra_repr() (ivy.stateful.layers.conv3d method)": [[764, "ivy.stateful.layers.Conv3D.extra_repr"]], "extra_repr() (ivy.stateful.layers.conv3dtranspose method)": [[764, "ivy.stateful.layers.Conv3DTranspose.extra_repr"]], "extra_repr() (ivy.stateful.layers.dct method)": [[764, "ivy.stateful.layers.Dct.extra_repr"]], "extra_repr() (ivy.stateful.layers.depthwiseconv2d method)": [[764, "ivy.stateful.layers.DepthwiseConv2D.extra_repr"]], "extra_repr() (ivy.stateful.layers.dropout method)": [[764, "ivy.stateful.layers.Dropout.extra_repr"]], "extra_repr() (ivy.stateful.layers.embedding method)": [[764, "ivy.stateful.layers.Embedding.extra_repr"]], "extra_repr() (ivy.stateful.layers.fft method)": [[764, "ivy.stateful.layers.FFT.extra_repr"]], "extra_repr() (ivy.stateful.layers.lstm method)": [[764, "ivy.stateful.layers.LSTM.extra_repr"]], "extra_repr() (ivy.stateful.layers.linear method)": [[764, "ivy.stateful.layers.Linear.extra_repr"]], "extra_repr() (ivy.stateful.layers.maxpool1d method)": [[764, "ivy.stateful.layers.MaxPool1D.extra_repr"]], "extra_repr() (ivy.stateful.layers.maxpool2d method)": [[764, "ivy.stateful.layers.MaxPool2D.extra_repr"]], "extra_repr() (ivy.stateful.layers.maxpool3d method)": [[764, "ivy.stateful.layers.MaxPool3D.extra_repr"]], "get_initial_state() (ivy.stateful.layers.lstm method)": [[764, "ivy.stateful.layers.LSTM.get_initial_state"]], "ivy.stateful.layers": [[764, "module-ivy.stateful.layers"]], "binarycrossentropyloss (class in ivy.stateful.losses)": [[765, "ivy.stateful.losses.BinaryCrossEntropyLoss"]], "crossentropyloss (class in ivy.stateful.losses)": [[765, "ivy.stateful.losses.CrossEntropyLoss"]], "logpoissonloss (class in ivy.stateful.losses)": [[765, "ivy.stateful.losses.LogPoissonLoss"]], "__init__() (ivy.stateful.losses.binarycrossentropyloss method)": [[765, "ivy.stateful.losses.BinaryCrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.crossentropyloss method)": [[765, "ivy.stateful.losses.CrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.logpoissonloss method)": [[765, "ivy.stateful.losses.LogPoissonLoss.__init__"]], "ivy.stateful.losses": [[765, "module-ivy.stateful.losses"]], "module (class in ivy.stateful.module)": [[766, "ivy.stateful.module.Module"]], "modulemeta (class in ivy.stateful.module)": [[766, "ivy.stateful.module.ModuleMeta"]], "__call__() (ivy.stateful.module.module method)": [[766, "ivy.stateful.module.Module.__call__"]], "__init__() (ivy.stateful.module.module method)": [[766, "ivy.stateful.module.Module.__init__"]], "build() (ivy.stateful.module.module method)": [[766, "ivy.stateful.module.Module.build"]], "build_mode (ivy.stateful.module.module property)": [[766, "ivy.stateful.module.Module.build_mode"]], "built_ (ivy.stateful.module.module property)": [[766, "ivy.stateful.module.Module.built_"]], "device (ivy.stateful.module.module property)": [[766, "ivy.stateful.module.Module.device"]], "eval() (ivy.stateful.module.module method)": [[766, "ivy.stateful.module.Module.eval"]], "extra_repr() (ivy.stateful.module.module method)": [[766, "ivy.stateful.module.Module.extra_repr"]], "ivy.stateful.module": [[766, "module-ivy.stateful.module"]], "load() (ivy.stateful.module.module static method)": [[766, "ivy.stateful.module.Module.load"]], "register_buffer() (ivy.stateful.module.module method)": [[766, "ivy.stateful.module.Module.register_buffer"]], "save() (ivy.stateful.module.module method)": [[766, "ivy.stateful.module.Module.save"]], "save_weights() (ivy.stateful.module.module method)": [[766, "ivy.stateful.module.Module.save_weights"]], "show_graph() (ivy.stateful.module.module method)": [[766, "ivy.stateful.module.Module.show_graph"]], "state_dict() (ivy.stateful.module.module method)": [[766, "ivy.stateful.module.Module.state_dict"]], "to_device() (ivy.stateful.module.module method)": [[766, "ivy.stateful.module.Module.to_device"]], "trace_graph() (ivy.stateful.module.module method)": [[766, "ivy.stateful.module.Module.trace_graph"]], "train() (ivy.stateful.module.module method)": [[766, "ivy.stateful.module.Module.train"]], "batchnorm2d (class in ivy.stateful.norms)": [[767, "ivy.stateful.norms.BatchNorm2D"]], "layernorm (class in ivy.stateful.norms)": [[767, "ivy.stateful.norms.LayerNorm"]], "__init__() (ivy.stateful.norms.batchnorm2d method)": [[767, "ivy.stateful.norms.BatchNorm2D.__init__"]], "__init__() (ivy.stateful.norms.layernorm method)": [[767, "ivy.stateful.norms.LayerNorm.__init__"]], "ivy.stateful.norms": [[767, "module-ivy.stateful.norms"]], "adam (class in ivy.stateful.optimizers)": [[768, "ivy.stateful.optimizers.Adam"]], "adamw (class in ivy.stateful.optimizers)": [[768, "ivy.stateful.optimizers.AdamW"]], "lamb (class in ivy.stateful.optimizers)": [[768, "ivy.stateful.optimizers.LAMB"]], "lars (class in ivy.stateful.optimizers)": [[768, "ivy.stateful.optimizers.LARS"]], "optimizer (class in ivy.stateful.optimizers)": [[768, "ivy.stateful.optimizers.Optimizer"]], "sgd (class in ivy.stateful.optimizers)": [[768, "ivy.stateful.optimizers.SGD"]], "__init__() (ivy.stateful.optimizers.adam method)": [[768, "ivy.stateful.optimizers.Adam.__init__"]], "__init__() (ivy.stateful.optimizers.adamw method)": [[768, "ivy.stateful.optimizers.AdamW.__init__"]], "__init__() (ivy.stateful.optimizers.lamb method)": [[768, "ivy.stateful.optimizers.LAMB.__init__"]], "__init__() (ivy.stateful.optimizers.lars method)": [[768, "ivy.stateful.optimizers.LARS.__init__"]], "__init__() (ivy.stateful.optimizers.optimizer method)": [[768, "ivy.stateful.optimizers.Optimizer.__init__"]], "__init__() (ivy.stateful.optimizers.sgd method)": [[768, "ivy.stateful.optimizers.SGD.__init__"]], "ivy.stateful.optimizers": [[768, "module-ivy.stateful.optimizers"]], "set_state() (ivy.stateful.optimizers.adam method)": [[768, "ivy.stateful.optimizers.Adam.set_state"]], "set_state() (ivy.stateful.optimizers.lamb method)": [[768, "ivy.stateful.optimizers.LAMB.set_state"]], "set_state() (ivy.stateful.optimizers.lars method)": [[768, "ivy.stateful.optimizers.LARS.set_state"]], "set_state() (ivy.stateful.optimizers.optimizer method)": [[768, "ivy.stateful.optimizers.Optimizer.set_state"]], "set_state() (ivy.stateful.optimizers.sgd method)": [[768, "ivy.stateful.optimizers.SGD.set_state"]], "state (ivy.stateful.optimizers.adam property)": [[768, "ivy.stateful.optimizers.Adam.state"]], "state (ivy.stateful.optimizers.lamb property)": [[768, "ivy.stateful.optimizers.LAMB.state"]], "state (ivy.stateful.optimizers.lars property)": [[768, "ivy.stateful.optimizers.LARS.state"]], "state (ivy.stateful.optimizers.sgd property)": [[768, "ivy.stateful.optimizers.SGD.state"]], "step() (ivy.stateful.optimizers.optimizer method)": [[768, "ivy.stateful.optimizers.Optimizer.step"]], "sequential (class in ivy.stateful.sequential)": [[769, "ivy.stateful.sequential.Sequential"]], "__init__() (ivy.stateful.sequential.sequential method)": [[769, "ivy.stateful.sequential.Sequential.__init__"]], "ivy.stateful.sequential": [[769, "module-ivy.stateful.sequential"]], "check_all() (in module ivy.utils.assertions)": [[770, "ivy.utils.assertions.check_all"]], "check_all_or_any_fn() (in module ivy.utils.assertions)": [[770, "ivy.utils.assertions.check_all_or_any_fn"]], "check_any() (in module ivy.utils.assertions)": [[770, "ivy.utils.assertions.check_any"]], "check_dev_correct_formatting() (in module ivy.utils.assertions)": [[770, "ivy.utils.assertions.check_dev_correct_formatting"]], "check_dimensions() (in module ivy.utils.assertions)": [[770, "ivy.utils.assertions.check_dimensions"]], "check_elem_in_list() (in module ivy.utils.assertions)": [[770, "ivy.utils.assertions.check_elem_in_list"]], "check_equal() (in module ivy.utils.assertions)": [[770, "ivy.utils.assertions.check_equal"]], "check_exists() (in module ivy.utils.assertions)": [[770, "ivy.utils.assertions.check_exists"]], "check_false() (in module ivy.utils.assertions)": [[770, "ivy.utils.assertions.check_false"]], "check_gather_input_valid() (in module ivy.utils.assertions)": [[770, "ivy.utils.assertions.check_gather_input_valid"]], "check_gather_nd_input_valid() (in module ivy.utils.assertions)": [[770, "ivy.utils.assertions.check_gather_nd_input_valid"]], "check_greater() (in module ivy.utils.assertions)": [[770, "ivy.utils.assertions.check_greater"]], "check_inplace_sizes_valid() (in module ivy.utils.assertions)": [[770, "ivy.utils.assertions.check_inplace_sizes_valid"]], "check_isinstance() (in module ivy.utils.assertions)": [[770, "ivy.utils.assertions.check_isinstance"]], "check_kernel_padding_size() (in module ivy.utils.assertions)": [[770, "ivy.utils.assertions.check_kernel_padding_size"]], "check_less() (in module ivy.utils.assertions)": [[770, "ivy.utils.assertions.check_less"]], "check_one_way_broadcastable() (in module ivy.utils.assertions)": [[770, "ivy.utils.assertions.check_one_way_broadcastable"]], "check_same_dtype() (in module ivy.utils.assertions)": [[770, "ivy.utils.assertions.check_same_dtype"]], "check_shape() (in module ivy.utils.assertions)": [[770, "ivy.utils.assertions.check_shape"]], "check_shapes_broadcastable() (in module ivy.utils.assertions)": [[770, "ivy.utils.assertions.check_shapes_broadcastable"]], "check_true() (in module ivy.utils.assertions)": [[770, "ivy.utils.assertions.check_true"]], "check_unsorted_segment_min_valid_params() (in module ivy.utils.assertions)": [[770, "ivy.utils.assertions.check_unsorted_segment_min_valid_params"]], "ivy.utils.assertions": [[770, "module-ivy.utils.assertions"]], "ivy.utils.backend": [[771, "module-ivy.utils.backend"]], "importtransformer (class in ivy.utils.backend.ast_helpers)": [[772, "ivy.utils.backend.ast_helpers.ImportTransformer"]], "ivyloader (class in ivy.utils.backend.ast_helpers)": [[772, "ivy.utils.backend.ast_helpers.IvyLoader"]], "ivypathfinder (class in ivy.utils.backend.ast_helpers)": [[772, "ivy.utils.backend.ast_helpers.IvyPathFinder"]], "__init__() (ivy.utils.backend.ast_helpers.importtransformer method)": [[772, "ivy.utils.backend.ast_helpers.ImportTransformer.__init__"]], "__init__() (ivy.utils.backend.ast_helpers.ivyloader method)": [[772, "ivy.utils.backend.ast_helpers.IvyLoader.__init__"]], "exec_module() (ivy.utils.backend.ast_helpers.ivyloader method)": [[772, "ivy.utils.backend.ast_helpers.IvyLoader.exec_module"]], "find_spec() (ivy.utils.backend.ast_helpers.ivypathfinder method)": [[772, "ivy.utils.backend.ast_helpers.IvyPathFinder.find_spec"]], "impersonate_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[772, "ivy.utils.backend.ast_helpers.ImportTransformer.impersonate_import"]], "ivy.utils.backend.ast_helpers": [[772, "module-ivy.utils.backend.ast_helpers"]], "visit_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[772, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_Import"]], "visit_importfrom() (ivy.utils.backend.ast_helpers.importtransformer method)": [[772, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_ImportFrom"]], "contextmanager (class in ivy.utils.backend.handler)": [[773, "ivy.utils.backend.handler.ContextManager"]], "__init__() (ivy.utils.backend.handler.contextmanager method)": [[773, "ivy.utils.backend.handler.ContextManager.__init__"]], "choose_random_backend() (in module ivy.utils.backend.handler)": [[773, "ivy.utils.backend.handler.choose_random_backend"]], "convert_from_numpy_to_target_backend() (in module ivy.utils.backend.handler)": [[773, "ivy.utils.backend.handler.convert_from_numpy_to_target_backend"]], "convert_from_source_backend_to_numpy() (in module ivy.utils.backend.handler)": [[773, "ivy.utils.backend.handler.convert_from_source_backend_to_numpy"]], "current_backend() (in module ivy.utils.backend.handler)": [[773, "ivy.utils.backend.handler.current_backend"]], "ivy.utils.backend.handler": [[773, "module-ivy.utils.backend.handler"]], "prevent_access_locally() (in module ivy.utils.backend.handler)": [[773, "ivy.utils.backend.handler.prevent_access_locally"]], "previous_backend() (in module ivy.utils.backend.handler)": [[773, "ivy.utils.backend.handler.previous_backend"]], "set_backend() (in module ivy.utils.backend.handler)": [[773, "ivy.utils.backend.handler.set_backend"]], "set_backend_to_specific_version() (in module ivy.utils.backend.handler)": [[773, "ivy.utils.backend.handler.set_backend_to_specific_version"]], "set_jax_backend() (in module ivy.utils.backend.handler)": [[773, "ivy.utils.backend.handler.set_jax_backend"]], "set_mxnet_backend() (in module ivy.utils.backend.handler)": [[773, "ivy.utils.backend.handler.set_mxnet_backend"]], "set_numpy_backend() (in module ivy.utils.backend.handler)": [[773, "ivy.utils.backend.handler.set_numpy_backend"]], "set_paddle_backend() (in module ivy.utils.backend.handler)": [[773, "ivy.utils.backend.handler.set_paddle_backend"]], "set_tensorflow_backend() (in module ivy.utils.backend.handler)": [[773, "ivy.utils.backend.handler.set_tensorflow_backend"]], "set_torch_backend() (in module ivy.utils.backend.handler)": [[773, "ivy.utils.backend.handler.set_torch_backend"]], "unset_backend() (in module ivy.utils.backend.handler)": [[773, "ivy.utils.backend.handler.unset_backend"]], "with_backend() (in module ivy.utils.backend.handler)": [[773, "ivy.utils.backend.handler.with_backend"]], "clear_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[774, "ivy.utils.backend.sub_backend_handler.clear_sub_backends"]], "find_available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[774, "ivy.utils.backend.sub_backend_handler.find_available_sub_backends"]], "fn_name_from_version_specific_fn_name() (in module ivy.utils.backend.sub_backend_handler)": [[774, "ivy.utils.backend.sub_backend_handler.fn_name_from_version_specific_fn_name"]], "fn_name_from_version_specific_fn_name_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[774, "ivy.utils.backend.sub_backend_handler.fn_name_from_version_specific_fn_name_sub_backend"]], "ivy.utils.backend.sub_backend_handler": [[774, "module-ivy.utils.backend.sub_backend_handler"]], "set_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[774, "ivy.utils.backend.sub_backend_handler.set_sub_backend"]], "set_sub_backend_to_specific_version() (in module ivy.utils.backend.sub_backend_handler)": [[774, "ivy.utils.backend.sub_backend_handler.set_sub_backend_to_specific_version"]], "unset_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[774, "ivy.utils.backend.sub_backend_handler.unset_sub_backend"]], "check_for_binaries() (in module ivy.utils.binaries)": [[775, "ivy.utils.binaries.check_for_binaries"]], "cleanup_and_fetch_binaries() (in module ivy.utils.binaries)": [[775, "ivy.utils.binaries.cleanup_and_fetch_binaries"]], "ivy.utils.binaries": [[775, "module-ivy.utils.binaries"]], "import_module() (in module ivy.utils.dynamic_import)": [[776, "ivy.utils.dynamic_import.import_module"]], "ivy.utils.dynamic_import": [[776, "module-ivy.utils.dynamic_import"]], "convert_interleaved_input() (in module ivy.utils.einsum_parser)": [[777, "ivy.utils.einsum_parser.convert_interleaved_input"]], "convert_subscripts() (in module ivy.utils.einsum_parser)": [[777, "ivy.utils.einsum_parser.convert_subscripts"]], "find_output_shape() (in module ivy.utils.einsum_parser)": [[777, "ivy.utils.einsum_parser.find_output_shape"]], "find_output_str() (in module ivy.utils.einsum_parser)": [[777, "ivy.utils.einsum_parser.find_output_str"]], "gen_unused_symbols() (in module ivy.utils.einsum_parser)": [[777, "ivy.utils.einsum_parser.gen_unused_symbols"]], "get_symbol() (in module ivy.utils.einsum_parser)": [[777, "ivy.utils.einsum_parser.get_symbol"]], "has_valid_einsum_chars_only() (in module ivy.utils.einsum_parser)": [[777, "ivy.utils.einsum_parser.has_valid_einsum_chars_only"]], "is_valid_einsum_char() (in module ivy.utils.einsum_parser)": [[777, "ivy.utils.einsum_parser.is_valid_einsum_char"]], "ivy.utils.einsum_parser": [[777, "module-ivy.utils.einsum_parser"]], "legalise_einsum_expr() (in module ivy.utils.einsum_parser)": [[777, "ivy.utils.einsum_parser.legalise_einsum_expr"]], "possibly_convert_to_numpy() (in module ivy.utils.einsum_parser)": [[777, "ivy.utils.einsum_parser.possibly_convert_to_numpy"]], "inplaceupdateexception": [[778, "ivy.utils.exceptions.InplaceUpdateException"]], "ivyattributeerror": [[778, "ivy.utils.exceptions.IvyAttributeError"]], "ivybackendexception": [[778, "ivy.utils.exceptions.IvyBackendException"]], "ivybroadcastshapeerror": [[778, "ivy.utils.exceptions.IvyBroadcastShapeError"]], "ivydeviceerror": [[778, "ivy.utils.exceptions.IvyDeviceError"]], "ivydtypepromotionerror": [[778, "ivy.utils.exceptions.IvyDtypePromotionError"]], "ivyerror": [[778, "ivy.utils.exceptions.IvyError"]], "ivyexception": [[778, "ivy.utils.exceptions.IvyException"]], "ivyindexerror": [[778, "ivy.utils.exceptions.IvyIndexError"]], "ivyinvalidbackendexception": [[778, "ivy.utils.exceptions.IvyInvalidBackendException"]], "ivynotimplementedexception": [[778, "ivy.utils.exceptions.IvyNotImplementedException"]], "ivyvalueerror": [[778, "ivy.utils.exceptions.IvyValueError"]], "__init__() (ivy.utils.exceptions.inplaceupdateexception method)": [[778, "ivy.utils.exceptions.InplaceUpdateException.__init__"]], "__init__() (ivy.utils.exceptions.ivyattributeerror method)": [[778, "ivy.utils.exceptions.IvyAttributeError.__init__"]], "__init__() (ivy.utils.exceptions.ivybackendexception method)": [[778, "ivy.utils.exceptions.IvyBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivybroadcastshapeerror method)": [[778, "ivy.utils.exceptions.IvyBroadcastShapeError.__init__"]], "__init__() (ivy.utils.exceptions.ivydeviceerror method)": [[778, "ivy.utils.exceptions.IvyDeviceError.__init__"]], "__init__() (ivy.utils.exceptions.ivydtypepromotionerror method)": [[778, "ivy.utils.exceptions.IvyDtypePromotionError.__init__"]], "__init__() (ivy.utils.exceptions.ivyerror method)": [[778, "ivy.utils.exceptions.IvyError.__init__"]], "__init__() (ivy.utils.exceptions.ivyexception method)": [[778, "ivy.utils.exceptions.IvyException.__init__"]], "__init__() (ivy.utils.exceptions.ivyindexerror method)": [[778, "ivy.utils.exceptions.IvyIndexError.__init__"]], "__init__() (ivy.utils.exceptions.ivyinvalidbackendexception method)": [[778, "ivy.utils.exceptions.IvyInvalidBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivynotimplementedexception method)": [[778, "ivy.utils.exceptions.IvyNotImplementedException.__init__"]], "__init__() (ivy.utils.exceptions.ivyvalueerror method)": [[778, "ivy.utils.exceptions.IvyValueError.__init__"]], "handle_exceptions() (in module ivy.utils.exceptions)": [[778, "ivy.utils.exceptions.handle_exceptions"]], "ivy.utils.exceptions": [[778, "module-ivy.utils.exceptions"]], "add_array_specs() (in module ivy.utils.inspection)": [[779, "ivy.utils.inspection.add_array_specs"]], "fn_array_spec() (in module ivy.utils.inspection)": [[779, "ivy.utils.inspection.fn_array_spec"]], "ivy.utils.inspection": [[779, "module-ivy.utils.inspection"]], "ivy.utils.logging": [[780, "module-ivy.utils.logging"]], "set_logging_mode() (in module ivy.utils.logging)": [[780, "ivy.utils.logging.set_logging_mode"]], "unset_logging_mode() (in module ivy.utils.logging)": [[780, "ivy.utils.logging.unset_logging_mode"]], "profiler (class in ivy.utils.profiler)": [[781, "ivy.utils.profiler.Profiler"]], "__init__() (ivy.utils.profiler.profiler method)": [[781, "ivy.utils.profiler.Profiler.__init__"]], "ivy.utils.profiler": [[781, "module-ivy.utils.profiler"]], "print_stats (ivy.utils.profiler.profiler attribute)": [[781, "ivy.utils.profiler.Profiler.print_stats"]], "viz (ivy.utils.profiler.profiler attribute)": [[781, "ivy.utils.profiler.Profiler.viz"]], "cprint() (in module ivy.utils.verbosity)": [[782, "ivy.utils.verbosity.cprint"]], "ivy.utils.verbosity": [[782, "module-ivy.utils.verbosity"]], "automatic code conversions": [[825, "term-Automatic-Code-Conversions"]], "backend handler": [[825, "term-Backend-Handler"]], "compositional functions": [[825, "term-Compositional-Functions"]], "convenience functions": [[825, "term-Convenience-Functions"]], "framework": [[825, "term-Framework"]], "framework handler": [[825, "term-Framework-Handler"]], "graph compiler": [[825, "term-Graph-Compiler"]], "ivy array": [[825, "term-Ivy-Array"]], "ivy backends": [[825, "term-Ivy-Backends"]], "ivy compiler": [[825, "term-Ivy-Compiler"]], "ivy container": [[825, "term-Ivy-Container"]], "ivy frontends": [[825, "term-Ivy-Frontends"]], "ivy functional api": [[825, "term-Ivy-Functional-API"]], "ivy tracer": [[825, "term-Ivy-Tracer"]], "ivy transpiler": [[825, "term-Ivy-Transpiler"]], "mixed functions": [[825, "term-Mixed-Functions"]], "native array": [[825, "term-Native-Array"]], "nestable functions": [[825, "term-Nestable-Functions"]], "pipeline": [[825, "term-Pipeline"]], "primary functions": [[825, "term-Primary-Functions"]], "standalone functions": [[825, "term-Standalone-Functions"]], "submodule helper functions": [[825, "term-Submodule-Helper-Functions"]], "built-in function": [[831, "ivy.trace_graph"], [832, "ivy.transpile"], [833, "ivy.unify"]], "ivy.trace_graph()": [[831, "ivy.trace_graph"]], "ivy.transpile()": [[832, "ivy.transpile"]], "ivy.unify()": [[833, "ivy.unify"]]}})