Search.setIndex({"docnames": ["compiler/compiler", "compiler/setting_up", "compiler/transpiler", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type", "docs/data_classes/data_classes/array/ivy.data_classes.array.device", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental", "docs/data_classes/data_classes/array/ivy.data_classes.array.general", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients", "docs/data_classes/data_classes/array/ivy.data_classes.array.image", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms", "docs/data_classes/data_classes/array/ivy.data_classes.array.random", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching", "docs/data_classes/data_classes/array/ivy.data_classes.array.set", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations", "docs/data_classes/data_classes/container/ivy.data_classes.container.base", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type", "docs/data_classes/data_classes/container/ivy.data_classes.container.device", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental", "docs/data_classes/data_classes/container/ivy.data_classes.container.general", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients", "docs/data_classes/data_classes/container/ivy.data_classes.container.image", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms", "docs/data_classes/data_classes/container/ivy.data_classes.container.random", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching", "docs/data_classes/data_classes/container/ivy.data_classes.container.set", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor", "docs/data_classes/data_classes/ivy.data_classes.array", "docs/data_classes/data_classes/ivy.data_classes.container", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor", "docs/data_classes/data_classes/ivy.data_classes.nested_array", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise", "docs/data_classes/ivy.data_classes", "docs/functional/ivy.functional.ivy", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cast_bool", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_handle_nestable", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_device", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_dtype", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_inputs_to_native_shapes", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_to_native_arrays_and_back", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.dev", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.sequence_length", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str", "docs/functional/ivy/general/ivy.functional.ivy.general.default", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat", "docs/functional/ivy/general/ivy.functional.ivy.general.exists", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.gather", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array", "docs/functional/ivy/general/ivy.functional.ivy.general.isin", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.shape", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow", "docs/functional/ivy/general/ivy.functional.ivy.general.strides", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad", "docs/functional/ivy/ivy.functional.ivy.activations", "docs/functional/ivy/ivy.functional.ivy.constants", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops", "docs/functional/ivy/ivy.functional.ivy.creation", "docs/functional/ivy/ivy.functional.ivy.data_type", "docs/functional/ivy/ivy.functional.ivy.device", "docs/functional/ivy/ivy.functional.ivy.elementwise", "docs/functional/ivy/ivy.functional.ivy.experimental", "docs/functional/ivy/ivy.functional.ivy.general", "docs/functional/ivy/ivy.functional.ivy.gradients", "docs/functional/ivy/ivy.functional.ivy.layers", "docs/functional/ivy/ivy.functional.ivy.linear_algebra", "docs/functional/ivy/ivy.functional.ivy.losses", "docs/functional/ivy/ivy.functional.ivy.manipulation", "docs/functional/ivy/ivy.functional.ivy.meta", "docs/functional/ivy/ivy.functional.ivy.nest", "docs/functional/ivy/ivy.functional.ivy.norms", "docs/functional/ivy/ivy.functional.ivy.random", "docs/functional/ivy/ivy.functional.ivy.searching", "docs/functional/ivy/ivy.functional.ivy.set", "docs/functional/ivy/ivy.functional.ivy.sorting", "docs/functional/ivy/ivy.functional.ivy.statistical", "docs/functional/ivy/ivy.functional.ivy.utility", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial", "docs/functional/ivy/random/ivy.functional.ivy.random.randint", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform", "docs/functional/ivy/random/ivy.functional.ivy.random.seed", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save", "docs/ivy.stateful", "docs/ivy.utils", "docs/stateful/ivy.stateful.activations", "docs/stateful/ivy.stateful.converters", "docs/stateful/ivy.stateful.helpers", "docs/stateful/ivy.stateful.initializers", "docs/stateful/ivy.stateful.layers", "docs/stateful/ivy.stateful.losses", "docs/stateful/ivy.stateful.module", "docs/stateful/ivy.stateful.norms", "docs/stateful/ivy.stateful.optimizers", "docs/stateful/ivy.stateful.sequential", "docs/utils/ivy.utils.assertions", "docs/utils/ivy.utils.backend", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler", "docs/utils/ivy.utils.dynamic_import", "docs/utils/ivy.utils.einsum_parser", "docs/utils/ivy.utils.exceptions", "docs/utils/ivy.utils.inspection", "docs/utils/ivy.utils.logging", "docs/utils/ivy.utils.profiler", "docs/utils/ivy.utils.verbosity", "index", "overview/background", "overview/background/ml_explosion", "overview/background/standardization", "overview/background/why_unify", "overview/contributing", "overview/contributing/applied_libraries", "overview/contributing/building_the_docs", "overview/contributing/error_handling", "overview/contributing/helpful_resources", "overview/contributing/open_tasks", "overview/contributing/setting_up", "overview/contributing/the_basics", "overview/deep_dive", "overview/deep_dive/array_api_tests", "overview/deep_dive/arrays", "overview/deep_dive/backend_setting", "overview/deep_dive/building_the_docs_pipline", "overview/deep_dive/containers", "overview/deep_dive/continuous_integration", "overview/deep_dive/data_types", "overview/deep_dive/devices", "overview/deep_dive/docstring_examples", "overview/deep_dive/docstrings", "overview/deep_dive/exception_handling", "overview/deep_dive/formatting", "overview/deep_dive/function_arguments", "overview/deep_dive/function_types", "overview/deep_dive/function_wrapping", "overview/deep_dive/gradients", "overview/deep_dive/inplace_updates", "overview/deep_dive/ivy_frontends", "overview/deep_dive/ivy_frontends_tests", "overview/deep_dive/ivy_tests", "overview/deep_dive/navigating_the_code", "overview/deep_dive/operating_modes", "overview/deep_dive/superset_behaviour", "overview/design", "overview/design/building_blocks", "overview/design/ivy_as_a_framework", "overview/design/ivy_as_a_framework/ivy_array", "overview/design/ivy_as_a_framework/ivy_container", "overview/design/ivy_as_a_framework/ivy_stateful_api", "overview/design/ivy_as_a_transpiler", "overview/extensions", "overview/extensions/applied_libraries", "overview/faq", "overview/get_started", "overview/glossary", "overview/related_work", "overview/related_work/api_standards", "overview/related_work/compiler_infrastructure", "overview/related_work/exchange_formats", "overview/related_work/frameworks", "overview/related_work/graph_tracers", "overview/related_work/ml_unifying_companies", "overview/related_work/multi_vendor_compiler_frameworks", "overview/related_work/vendor_specific_apis", "overview/related_work/vendor_specific_compilers", "overview/related_work/what_does_ivy_add", "overview/related_work/wrapper_frameworks"], "filenames": ["compiler/compiler.rst", "compiler/setting_up.rst", "compiler/transpiler.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.device.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.general.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.image.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.random.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.set.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.base.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.device.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.general.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.image.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.random.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.set.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.array.rst", "docs/data_classes/data_classes/ivy.data_classes.container.rst", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.nested_array.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise.rst", "docs/data_classes/ivy.data_classes.rst", "docs/functional/ivy.functional.ivy.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cast_bool.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_handle_nestable.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_device.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_dtype.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_inputs_to_native_shapes.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_to_native_arrays_and_back.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.sequence_length.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta.rst", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson.rst", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.default.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.exists.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isin.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.strides.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad.rst", "docs/functional/ivy/ivy.functional.ivy.activations.rst", "docs/functional/ivy/ivy.functional.ivy.constants.rst", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops.rst", "docs/functional/ivy/ivy.functional.ivy.creation.rst", "docs/functional/ivy/ivy.functional.ivy.data_type.rst", "docs/functional/ivy/ivy.functional.ivy.device.rst", "docs/functional/ivy/ivy.functional.ivy.elementwise.rst", "docs/functional/ivy/ivy.functional.ivy.experimental.rst", "docs/functional/ivy/ivy.functional.ivy.general.rst", "docs/functional/ivy/ivy.functional.ivy.gradients.rst", "docs/functional/ivy/ivy.functional.ivy.layers.rst", "docs/functional/ivy/ivy.functional.ivy.linear_algebra.rst", "docs/functional/ivy/ivy.functional.ivy.losses.rst", "docs/functional/ivy/ivy.functional.ivy.manipulation.rst", "docs/functional/ivy/ivy.functional.ivy.meta.rst", "docs/functional/ivy/ivy.functional.ivy.nest.rst", "docs/functional/ivy/ivy.functional.ivy.norms.rst", "docs/functional/ivy/ivy.functional.ivy.random.rst", "docs/functional/ivy/ivy.functional.ivy.searching.rst", "docs/functional/ivy/ivy.functional.ivy.set.rst", "docs/functional/ivy/ivy.functional.ivy.sorting.rst", "docs/functional/ivy/ivy.functional.ivy.statistical.rst", "docs/functional/ivy/ivy.functional.ivy.utility.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices.rst", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.randint.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.seed.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save.rst", "docs/ivy.stateful.rst", "docs/ivy.utils.rst", "docs/stateful/ivy.stateful.activations.rst", "docs/stateful/ivy.stateful.converters.rst", "docs/stateful/ivy.stateful.helpers.rst", "docs/stateful/ivy.stateful.initializers.rst", "docs/stateful/ivy.stateful.layers.rst", "docs/stateful/ivy.stateful.losses.rst", "docs/stateful/ivy.stateful.module.rst", "docs/stateful/ivy.stateful.norms.rst", "docs/stateful/ivy.stateful.optimizers.rst", "docs/stateful/ivy.stateful.sequential.rst", "docs/utils/ivy.utils.assertions.rst", "docs/utils/ivy.utils.backend.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler.rst", "docs/utils/ivy.utils.dynamic_import.rst", "docs/utils/ivy.utils.einsum_parser.rst", "docs/utils/ivy.utils.exceptions.rst", "docs/utils/ivy.utils.inspection.rst", "docs/utils/ivy.utils.logging.rst", "docs/utils/ivy.utils.profiler.rst", "docs/utils/ivy.utils.verbosity.rst", "index.rst", "overview/background.rst", "overview/background/ml_explosion.rst", "overview/background/standardization.rst", "overview/background/why_unify.rst", "overview/contributing.rst", "overview/contributing/applied_libraries.rst", "overview/contributing/building_the_docs.rst", "overview/contributing/error_handling.rst", "overview/contributing/helpful_resources.rst", "overview/contributing/open_tasks.rst", "overview/contributing/setting_up.rst", "overview/contributing/the_basics.rst", "overview/deep_dive.rst", "overview/deep_dive/array_api_tests.rst", "overview/deep_dive/arrays.rst", "overview/deep_dive/backend_setting.rst", "overview/deep_dive/building_the_docs_pipline.rst", "overview/deep_dive/containers.rst", "overview/deep_dive/continuous_integration.rst", "overview/deep_dive/data_types.rst", "overview/deep_dive/devices.rst", "overview/deep_dive/docstring_examples.rst", "overview/deep_dive/docstrings.rst", "overview/deep_dive/exception_handling.rst", "overview/deep_dive/formatting.rst", "overview/deep_dive/function_arguments.rst", "overview/deep_dive/function_types.rst", "overview/deep_dive/function_wrapping.rst", "overview/deep_dive/gradients.rst", "overview/deep_dive/inplace_updates.rst", "overview/deep_dive/ivy_frontends.rst", "overview/deep_dive/ivy_frontends_tests.rst", "overview/deep_dive/ivy_tests.rst", "overview/deep_dive/navigating_the_code.rst", "overview/deep_dive/operating_modes.rst", "overview/deep_dive/superset_behaviour.rst", "overview/design.rst", "overview/design/building_blocks.rst", "overview/design/ivy_as_a_framework.rst", "overview/design/ivy_as_a_framework/ivy_array.rst", "overview/design/ivy_as_a_framework/ivy_container.rst", "overview/design/ivy_as_a_framework/ivy_stateful_api.rst", "overview/design/ivy_as_a_transpiler.rst", "overview/extensions.rst", "overview/extensions/applied_libraries.rst", "overview/faq.rst", "overview/get_started.rst", "overview/glossary.rst", "overview/related_work.rst", "overview/related_work/api_standards.rst", "overview/related_work/compiler_infrastructure.rst", "overview/related_work/exchange_formats.rst", "overview/related_work/frameworks.rst", "overview/related_work/graph_tracers.rst", "overview/related_work/ml_unifying_companies.rst", "overview/related_work/multi_vendor_compiler_frameworks.rst", "overview/related_work/vendor_specific_apis.rst", "overview/related_work/vendor_specific_compilers.rst", "overview/related_work/what_does_ivy_add.rst", "overview/related_work/wrapper_frameworks.rst"], "titles": ["Graph Compiler", "Setting Up", "Transpiler", "Activations", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Activations", "Base", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Base", "Cp tensor", "Tucker tensor", "Array", "Container", "Factorized tensor", "Nested array", "Base", "Elementwise", "Data classes", "Functions", "gelu", "hardswish", "leaky_relu", "log_softmax", "mish", "relu", "sigmoid", "softmax", "softplus", "softsign", "cast_bool", "cmp_is", "cmp_isnot", "for_loop", "if_else", "try_except", "while_loop", "arange", "array", "asarray", "asarray_handle_nestable", "asarray_infer_device", "asarray_infer_dtype", "asarray_inputs_to_native_shapes", "asarray_to_native_arrays_and_back", "copy_array", "empty", "empty_like", "eye", "from_dlpack", "frombuffer", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "one_hot", "ones", "ones_like", "tril", "triu", "triu_indices", "zeros", "zeros_like", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "check_float", "closest_valid_dtype", "default_complex_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "default_uint_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "infer_default_dtype", "invalid_dtype", "is_bool_dtype", "is_complex_dtype", "is_float_dtype", "is_hashable_dtype", "is_int_dtype", "is_native_dtype", "is_uint_dtype", "promote_types", "promote_types_of_inputs", "result_type", "set_default_complex_dtype", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "set_default_uint_dtype", "type_promote_arrays", "unset_default_complex_dtype", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "unset_default_uint_dtype", "valid_dtype", "as_ivy_dev", "as_native_dev", "clear_cached_mem_on_dev", "default_device", "dev", "dev_util", "function_supported_devices", "function_unsupported_devices", "get_all_ivy_arrays_on_dev", "gpu_is_available", "handle_soft_device_variable", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_soft_device_mode", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "unset_soft_device_mode", "used_mem_on_dev", "abs", "acos", "acosh", "add", "angle", "asin", "asinh", "atan", "atan2", "atanh", "bitwise_and", "bitwise_invert", "bitwise_left_shift", "bitwise_or", "bitwise_right_shift", "bitwise_xor", "ceil", "cos", "cosh", "deg2rad", "divide", "equal", "erf", "exp", "exp2", "expm1", "floor", "floor_divide", "fmin", "fmod", "gcd", "greater", "greater_equal", "imag", "isfinite", "isinf", "isnan", "isreal", "lcm", "less", "less_equal", "log", "log10", "log1p", "log2", "logaddexp", "logaddexp2", "logical_and", "logical_not", "logical_or", "logical_xor", "maximum", "minimum", "multiply", "nan_to_num", "negative", "not_equal", "positive", "pow", "rad2deg", "real", "reciprocal", "remainder", "round", "sign", "sin", "sinh", "sqrt", "square", "subtract", "tan", "tanh", "trapz", "trunc", "trunc_divide", "elu", "logit", "logsigmoid", "prelu", "relu6", "selu", "sequence_length", "silu", "thresholded_relu", "blackman_window", "eye_like", "hamming_window", "hann_window", "indices", "kaiser_bessel_derived_window", "kaiser_window", "ndenumerate", "ndindex", "random_cp", "random_tucker", "tril_indices", "trilu", "unsorted_segment_min", "unsorted_segment_sum", "vorbis_window", "allclose", "binarizer", "conj", "copysign", "count_nonzero", "diff", "digamma", "fix", "float_power", "fmax", "frexp", "gradient", "hypot", "isclose", "ldexp", "lerp", "lgamma", "modf", "nansum", "nextafter", "signbit", "sinc", "sparsify_tensor", "xlogy", "zeta", "reduce", "bind_custom_gradient_function", "Activations", "Constants", "Creation", "Data type", "Device", "Elementwise", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Sparse array", "Statistical", "Utility", "adaptive_avg_pool1d", "adaptive_avg_pool2d", "adaptive_max_pool2d", "area_interpolate", "avg_pool1d", "avg_pool2d", "avg_pool3d", "dct", "dft", "dropout1d", "dropout2d", "dropout3d", "embedding", "fft", "fft2", "generate_einsum_equation", "get_interpolate_kernel", "idct", "ifft", "ifftn", "interp", "interpolate", "max_pool1d", "max_pool2d", "max_pool3d", "max_unpool1d", "nearest_interpolate", "pool", "reduce_window", "rfftn", "adjoint", "cond", "diagflat", "dot", "eig", "eigh_tridiagonal", "eigvals", "initialize_tucker", "khatri_rao", "kron", "kronecker", "make_svd_non_negative", "matrix_exp", "mode_dot", "multi_dot", "multi_mode_dot", "partial_tucker", "svd_flip", "truncated_svd", "tucker", "huber_loss", "l1_loss", "log_poisson_loss", "smooth_l1_loss", "soft_margin_loss", "as_strided", "associative_scan", "atleast_1d", "atleast_2d", "atleast_3d", "broadcast_shapes", "choose", "concat_from_sequence", "dsplit", "dstack", "expand", "fill_diagonal", "flatten", "fliplr", "flipud", "fold", "heaviside", "hsplit", "hstack", "i0", "matricize", "moveaxis", "pad", "partial_fold", "partial_tensor_to_vec", "partial_unfold", "partial_vec_to_tensor", "put_along_axis", "rot90", "soft_thresholding", "take_along_axis", "top_k", "unfold", "unique_consecutive", "vsplit", "vstack", "batch_norm", "group_norm", "instance_norm", "l1_normalize", "l2_normalize", "lp_normalize", "bernoulli", "beta", "dirichlet", "gamma", "poisson", "unravel_index", "invert_permutation", "lexsort", "is_ivy_sparse_array", "is_native_sparse_array", "native_sparse_array", "native_sparse_array_to_indices_values_and_shape", "bincount", "corrcoef", "cov", "cummax", "cummin", "histogram", "igamma", "median", "nanmean", "nanmedian", "quantile", "all_equal", "arg_info", "arg_names", "array_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "fourier_encode", "function_supported_devices_and_dtypes", "function_unsupported_devices_and_dtypes", "gather", "gather_nd", "get_all_arrays_in_memory", "get_item", "get_num_dims", "get_referrers_recursive", "has_nans", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_ivy_nested_array", "is_native_array", "isin", "isscalar", "itemsize", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "print_all_arrays_in_memory", "scatter_flat", "scatter_nd", "set_array_mode", "set_exception_trace_mode", "set_inplace_mode", "set_item", "set_min_base", "set_min_denominator", "set_nestable_mode", "set_precise_mode", "set_queue_timeout", "set_shape_array_mode", "set_show_func_wrapper_trace_mode", "set_tmp_dir", "shape", "stable_divide", "stable_pow", "strides", "supports_inplace_updates", "to_ivy_shape", "to_list", "to_native_shape", "to_numpy", "to_scalar", "try_else_none", "unset_array_mode", "unset_exception_trace_mode", "unset_inplace_mode", "unset_min_base", "unset_min_denominator", "unset_nestable_mode", "unset_precise_mode", "unset_queue_timeout", "unset_shape_array_mode", "unset_show_func_wrapper_trace_mode", "unset_tmp_dir", "value_is_nan", "vmap", "adam_step", "adam_update", "execute_with_gradients", "grad", "gradient_descent_update", "jac", "lamb_update", "lars_update", "optimizer_update", "stop_gradient", "value_and_grad", "Activations", "Constants", "Control flow ops", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "conv", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "conv_general_dilated", "conv_general_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "cholesky", "cross", "det", "diag", "diagonal", "eig", "eigh", "eigvalsh", "inner", "inv", "lu_factor", "matmul", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "tensorsolve", "trace", "vander", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "binary_cross_entropy", "cross_entropy", "sparse_cross_entropy", "clip", "concat", "constant_pad", "expand_dims", "flip", "permute_dims", "repeat", "reshape", "roll", "split", "squeeze", "stack", "swapaxes", "tile", "unstack", "zero_pad", "fomaml_step", "maml_step", "reptile_step", "all_nested_indices", "copy_nest", "duplicate_array_index_chains", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_argwhere", "nested_map", "nested_multi_map", "prune_empty", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "layer_norm", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "argmax", "argmin", "argwhere", "nonzero", "where", "unique_all", "unique_counts", "unique_inverse", "unique_values", "argsort", "msort", "searchsorted", "sort", "cumprod", "cumsum", "einsum", "max", "mean", "min", "prod", "std", "sum", "var", "all", "any", "save", "Framework classes", "Utils", "Activations", "Converters", "Helpers", "Initializers", "Layers", "Losses", "Module", "Norms", "Optimizers", "Sequential", "Assertions", "Backend", "Ast helpers", "Handler", "Sub backend handler", "Dynamic import", "Einsum parser", "Exceptions", "Inspection", "Logging", "Profiler", "Verbosity", "Home", "Background", "ML Explosion", "Standardization", "Why Unify?", "Contributing", "Applied Libraries", "Building the Docs", "Error Handling", "Helpful Resources", "Open Tasks", "Setting Up", "The Basics", "Deep Dive", "Array API Tests", "Arrays", "Backend Setting", "Building the Docs Pipeline", "Containers", "Continuous Integration", "Data Types", "Devices", "Docstring Examples", "Docstrings", "Exception Handling", "Formatting", "Function Arguments", "Function Types", "Function Wrapping", "Gradients", "Inplace Updates", "Ivy Frontends", "Ivy Frontend Tests", "Ivy Tests", "Navigating the Code", "Operating Modes", "Superset Behaviour", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Extensions", "Applied Libraries", "FAQ", "Get Started", "Glossary", "Related Work", "API Standards", "Compiler Infrastructure", "Exchange Formats", "Frameworks", "Graph Tracers", "ML-Unifying Companies", "Multi-Vendor Compiler Frameworks", "Vendor-Specific APIs", "Vendor-Specific Compilers", "What does Ivy Add?", "Wrapper Frameworks"], "terms": {"warn": [0, 2, 697, 712, 735], "The": [0, 2, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 88, 89, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 116, 118, 120, 121, 122, 124, 126, 127, 128, 131, 132, 134, 135, 137, 138, 139, 140, 146, 147, 148, 149, 150, 152, 153, 154, 155, 160, 161, 162, 163, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 317, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 360, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 389, 390, 391, 392, 396, 399, 400, 405, 406, 408, 409, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 425, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 465, 467, 469, 470, 471, 473, 474, 475, 476, 477, 480, 482, 485, 486, 489, 491, 492, 495, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 521, 523, 524, 527, 529, 530, 531, 532, 534, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 679, 680, 681, 682, 683, 684, 685, 686, 691, 694, 700, 701, 702, 704, 705, 706, 707, 708, 710, 711, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 732, 733, 734, 736, 737, 738, 741, 742, 743, 745, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760], "transpil": [0, 1, 710, 724, 731, 737, 738, 739, 747, 748, 753, 759, 760], "ar": [0, 1, 2, 4, 5, 8, 9, 10, 13, 14, 16, 18, 19, 20, 26, 28, 31, 32, 33, 36, 37, 39, 41, 42, 43, 49, 51, 52, 76, 91, 93, 96, 101, 155, 160, 162, 167, 191, 193, 194, 197, 201, 222, 223, 227, 232, 233, 237, 239, 244, 245, 246, 269, 271, 272, 274, 275, 277, 278, 279, 281, 282, 287, 292, 295, 299, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 321, 322, 324, 325, 331, 332, 333, 334, 337, 342, 344, 352, 357, 358, 360, 368, 369, 370, 372, 373, 376, 380, 381, 382, 390, 391, 392, 394, 400, 403, 405, 407, 414, 416, 420, 421, 422, 423, 424, 434, 439, 440, 441, 442, 443, 446, 447, 448, 463, 468, 472, 483, 484, 493, 503, 515, 525, 537, 539, 540, 542, 543, 544, 545, 547, 549, 551, 552, 553, 567, 568, 570, 571, 573, 577, 578, 579, 583, 584, 586, 589, 593, 594, 598, 599, 600, 605, 606, 609, 613, 615, 625, 630, 635, 636, 637, 645, 646, 647, 650, 651, 652, 653, 655, 657, 680, 681, 684, 687, 688, 694, 697, 698, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 753, 754, 755, 756, 757, 758, 759, 760], "publicli": [0, 2], "avail": [0, 2, 10, 33, 150, 156, 158, 159, 170, 312, 405, 455, 539, 542, 700, 702, 711, 712, 718, 719, 720, 721, 723, 724, 731, 733, 736, 746, 747, 758, 759], "yet": [0, 2, 302, 304, 305, 313, 314, 318, 322, 710, 711, 746], "so": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 93, 94, 95, 96, 98, 99, 100, 103, 107, 108, 109, 122, 126, 127, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 306, 319, 321, 327, 328, 329, 330, 332, 333, 334, 336, 340, 341, 342, 345, 346, 347, 351, 353, 354, 355, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 449, 450, 453, 454, 455, 456, 457, 458, 461, 462, 465, 467, 469, 470, 471, 473, 474, 475, 477, 478, 480, 485, 486, 500, 501, 502, 503, 505, 507, 508, 521, 523, 524, 527, 529, 530, 531, 532, 544, 549, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 583, 584, 589, 590, 591, 593, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 624, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 700, 702, 703, 708, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 746, 753, 754, 755, 757], "certain": [0, 1, 2, 26, 76, 92, 93, 537, 711, 712, 714, 720, 727, 733, 736, 746, 757], "part": [0, 2, 5, 8, 9, 31, 32, 37, 51, 61, 64, 67, 99, 100, 101, 207, 211, 234, 269, 270, 291, 303, 306, 310, 312, 321, 358, 400, 442, 534, 537, 540, 545, 578, 579, 683, 684, 700, 706, 710, 712, 714, 717, 720, 725, 727, 730, 731, 733, 734, 736, 738, 739, 743, 745, 746, 751, 753, 758, 759, 760], "thi": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 108, 109, 119, 122, 125, 126, 127, 129, 133, 134, 148, 151, 161, 167, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 321, 322, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 340, 341, 342, 345, 346, 347, 348, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 449, 450, 453, 454, 455, 456, 457, 458, 461, 462, 465, 467, 469, 470, 471, 473, 474, 475, 477, 478, 480, 485, 486, 489, 495, 500, 501, 502, 503, 505, 507, 508, 521, 522, 523, 524, 525, 527, 529, 530, 531, 532, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 624, 626, 628, 630, 631, 636, 637, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 678, 679, 681, 682, 684, 685, 686, 687, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760], "doc": [0, 2, 32, 101, 269, 303, 436, 537, 700, 705, 709, 710, 713, 722, 723, 725, 726, 733, 738, 741, 742], "won": [0, 2, 703, 704, 711, 712, 718, 720, 743, 747], "t": [0, 1, 2, 9, 13, 24, 32, 36, 47, 49, 51, 285, 300, 306, 308, 310, 358, 471, 489, 503, 525, 542, 543, 544, 549, 568, 569, 632, 682, 700, 703, 704, 706, 707, 710, 711, 712, 713, 715, 716, 718, 719, 720, 721, 722, 725, 727, 728, 729, 730, 733, 734, 736, 738, 740, 741, 742, 743, 746, 747, 751, 753, 755], "work": [0, 1, 2, 9, 32, 49, 321, 442, 549, 631, 632, 636, 641, 642, 700, 704, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 730, 731, 732, 733, 734, 737, 738, 740, 742, 743, 747, 751, 753, 755, 757, 760], "expect": [0, 2, 9, 14, 15, 32, 38, 133, 201, 245, 309, 331, 352, 445, 538, 540, 542, 546, 588, 602, 680, 681, 682, 684, 700, 704, 711, 712, 714, 720, 721, 724, 725, 728, 730, 732, 733, 736, 746, 747], "now": [0, 2, 682, 683, 684, 700, 704, 711, 714, 715, 716, 717, 718, 719, 720, 721, 726, 728, 731, 732, 733, 734, 736, 740, 741, 743, 745, 746, 753], "when": [0, 1, 2, 4, 5, 6, 8, 9, 14, 15, 18, 19, 22, 26, 28, 29, 31, 32, 37, 38, 41, 42, 45, 52, 96, 106, 177, 194, 199, 201, 217, 227, 232, 245, 246, 250, 301, 309, 310, 312, 315, 316, 321, 331, 344, 358, 360, 369, 372, 405, 414, 416, 421, 441, 442, 471, 487, 495, 501, 537, 538, 540, 542, 544, 545, 546, 547, 549, 551, 552, 555, 557, 570, 586, 591, 602, 603, 604, 612, 624, 625, 634, 635, 636, 645, 646, 647, 650, 651, 653, 654, 666, 668, 670, 672, 680, 681, 682, 683, 684, 685, 691, 702, 703, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 738, 740, 741, 743, 746, 751, 753, 756, 757, 758, 759], "we": [0, 1, 2, 9, 14, 15, 16, 24, 32, 37, 38, 47, 49, 67, 300, 308, 312, 380, 381, 382, 386, 388, 390, 391, 392, 395, 399, 406, 409, 412, 454, 464, 503, 525, 526, 528, 533, 534, 542, 543, 545, 546, 547, 586, 602, 608, 609, 610, 612, 614, 615, 617, 619, 680, 684, 691, 700, 701, 702, 703, 704, 705, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 736, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 753, 754, 758, 759], "call": [0, 2, 9, 24, 29, 32, 47, 49, 52, 72, 126, 127, 167, 310, 321, 367, 441, 489, 495, 509, 525, 526, 528, 536, 539, 542, 543, 545, 549, 591, 624, 630, 634, 635, 680, 682, 683, 684, 686, 691, 700, 703, 710, 712, 715, 716, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 730, 731, 732, 733, 734, 736, 738, 740, 741, 742, 743, 746, 753, 754, 757], "an": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 37, 38, 39, 41, 42, 43, 45, 46, 47, 49, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 119, 122, 125, 129, 133, 134, 164, 168, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 256, 257, 259, 260, 262, 263, 264, 265, 266, 269, 270, 271, 272, 273, 276, 279, 281, 286, 290, 295, 301, 303, 306, 309, 310, 311, 312, 315, 316, 319, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 340, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 357, 358, 359, 375, 379, 380, 381, 382, 385, 386, 388, 395, 399, 400, 405, 406, 411, 412, 414, 415, 416, 420, 421, 423, 426, 427, 432, 433, 434, 435, 436, 437, 438, 441, 447, 449, 450, 458, 461, 465, 467, 469, 470, 471, 473, 474, 475, 476, 477, 480, 486, 489, 490, 499, 503, 507, 508, 509, 522, 525, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 624, 630, 643, 645, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 700, 703, 704, 706, 708, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 738, 740, 741, 742, 743, 745, 746, 748, 749, 751, 752, 753, 754, 756, 757, 759, 760], "ivi": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 703, 704, 705, 707, 708, 709, 711, 713, 714, 716, 718, 720, 721, 723, 725, 726, 727, 728, 730, 736, 737, 744, 746, 747, 748, 749, 760], "function": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 108, 109, 119, 120, 121, 122, 125, 126, 127, 129, 133, 134, 151, 153, 154, 167, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 321, 322, 327, 328, 329, 330, 332, 333, 334, 336, 340, 341, 342, 345, 346, 347, 348, 351, 353, 354, 355, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 467, 469, 470, 471, 473, 474, 475, 477, 478, 480, 481, 484, 485, 486, 489, 490, 493, 495, 497, 500, 501, 502, 503, 505, 507, 508, 509, 515, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 628, 630, 631, 632, 634, 635, 636, 637, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 678, 681, 684, 691, 696, 700, 702, 708, 711, 712, 713, 714, 715, 716, 717, 719, 722, 723, 730, 737, 739, 740, 741, 742, 744, 745, 748, 750, 751, 752, 753, 754, 759, 760], "i": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 75, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 134, 146, 148, 150, 151, 153, 154, 156, 158, 161, 166, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 261, 262, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 319, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 337, 340, 342, 344, 345, 346, 347, 348, 351, 352, 355, 356, 357, 358, 360, 361, 363, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 380, 381, 382, 385, 386, 388, 390, 391, 392, 393, 394, 395, 398, 399, 400, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 446, 447, 449, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 467, 469, 470, 471, 473, 474, 475, 476, 477, 478, 481, 482, 485, 486, 487, 489, 495, 499, 500, 501, 503, 505, 507, 508, 509, 521, 522, 524, 525, 526, 527, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 634, 635, 636, 637, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 679, 680, 681, 682, 683, 684, 685, 686, 688, 691, 694, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760], "alwai": [0, 5, 6, 9, 10, 16, 28, 29, 32, 39, 59, 78, 106, 177, 227, 282, 306, 310, 312, 370, 380, 381, 382, 386, 388, 390, 391, 392, 395, 399, 406, 412, 464, 471, 534, 538, 540, 542, 547, 608, 609, 610, 612, 614, 615, 617, 619, 700, 710, 711, 712, 715, 716, 718, 720, 723, 725, 726, 727, 730, 731, 732, 733, 734, 736, 738, 746], "small": [0, 2, 8, 9, 14, 17, 31, 32, 37, 40, 194, 201, 227, 228, 274, 287, 306, 310, 315, 364, 414, 415, 416, 540, 545, 550, 586, 589, 591, 643, 681, 685, 700, 711, 719, 722, 727, 732, 736, 738, 742, 746, 754], "perform": [0, 2, 5, 9, 13, 14, 22, 23, 28, 32, 33, 36, 37, 45, 46, 62, 66, 92, 93, 164, 172, 194, 227, 248, 279, 299, 306, 307, 309, 310, 312, 319, 321, 331, 332, 333, 334, 336, 337, 341, 342, 350, 369, 379, 427, 435, 436, 454, 455, 456, 469, 470, 471, 487, 497, 534, 537, 539, 540, 542, 544, 545, 548, 549, 555, 556, 567, 569, 593, 595, 600, 621, 622, 623, 631, 632, 663, 664, 673, 674, 682, 704, 714, 715, 716, 718, 720, 721, 722, 726, 727, 728, 730, 731, 732, 733, 734, 736, 738, 741, 746, 750, 753, 754, 755, 756, 757, 758, 760], "hit": [0, 733, 738], "due": [0, 2, 227, 237, 540, 703, 706, 711, 714, 719, 724, 730, 731, 753], "ad": [0, 9, 16, 32, 39, 47, 194, 227, 274, 287, 306, 315, 414, 415, 416, 500, 501, 540, 542, 545, 547, 578, 579, 608, 682, 687, 700, 703, 708, 709, 710, 711, 712, 714, 715, 717, 718, 719, 720, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 738, 742, 746, 752, 753], "python": [0, 9, 18, 32, 41, 76, 161, 173, 201, 236, 316, 420, 421, 422, 423, 424, 522, 537, 539, 540, 542, 551, 644, 645, 646, 647, 649, 691, 694, 701, 702, 703, 709, 711, 712, 714, 717, 718, 719, 724, 731, 733, 738, 740, 741, 746, 748, 750, 753, 754, 755, 759, 760], "wrap": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 93, 94, 95, 96, 98, 99, 100, 103, 107, 108, 109, 122, 126, 127, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 312, 321, 327, 328, 329, 330, 332, 333, 334, 336, 340, 341, 342, 345, 346, 347, 351, 353, 354, 355, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 461, 462, 465, 467, 469, 470, 471, 473, 474, 475, 477, 478, 480, 485, 486, 497, 500, 501, 502, 503, 505, 507, 508, 519, 521, 523, 524, 527, 529, 530, 531, 532, 542, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 583, 584, 589, 590, 591, 593, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 700, 713, 714, 715, 716, 718, 719, 720, 721, 723, 724, 726, 727, 730, 731, 733, 738, 740, 743, 746, 748, 749, 753, 754, 759, 760], "overhead": [0, 746, 756], "becom": [0, 9, 32, 49, 282, 306, 312, 382, 547, 605, 691, 702, 704, 712, 718, 722, 724, 730, 746], "increasingli": [0, 722], "notic": [0, 710, 715, 719, 725, 733, 736], "larg": [0, 8, 9, 31, 32, 177, 194, 201, 227, 228, 321, 434, 540, 545, 591, 711, 712, 719, 741, 753], "model": [0, 2, 9, 194, 227, 311, 373, 540, 700, 741, 742, 748, 751, 752, 753, 754, 755, 756, 757, 759, 760], "multipl": [0, 8, 9, 14, 17, 22, 23, 26, 31, 32, 33, 34, 37, 39, 40, 45, 46, 89, 188, 212, 219, 225, 226, 227, 229, 309, 310, 312, 319, 330, 337, 340, 342, 367, 386, 395, 412, 427, 443, 481, 523, 524, 527, 529, 531, 532, 537, 540, 542, 543, 544, 545, 547, 550, 552, 555, 556, 559, 560, 561, 562, 572, 581, 583, 584, 605, 608, 613, 614, 643, 650, 651, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 700, 704, 710, 712, 715, 716, 718, 722, 724, 725, 727, 730, 731, 732, 733, 736, 738, 746, 751, 752, 753, 760], "improv": [0, 704, 712, 720, 726, 727, 736, 738, 748, 751, 753, 755, 756], "remov": [0, 2, 14, 26, 37, 545, 547, 548, 549, 576, 583, 597, 615, 621, 622, 638, 697, 700, 710, 716, 717, 719, 720, 723, 727, 733, 736, 743, 753], "extra": [0, 2, 26, 52, 72, 522, 536, 542, 715, 720, 722, 728, 730, 731, 732, 736, 738, 750, 755], "around": [0, 26, 52, 312, 400, 405, 712, 714, 715, 717, 721, 726, 727, 731, 734, 740, 746, 748, 751, 753, 760], "each": [0, 2, 3, 5, 6, 8, 9, 10, 11, 13, 14, 16, 19, 20, 22, 26, 29, 31, 32, 33, 34, 36, 37, 39, 42, 43, 45, 49, 51, 52, 60, 61, 63, 64, 65, 67, 72, 94, 107, 119, 122, 167, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 253, 254, 256, 257, 262, 268, 271, 272, 276, 282, 286, 290, 295, 298, 301, 303, 306, 309, 310, 312, 316, 319, 321, 327, 328, 329, 332, 333, 334, 337, 345, 346, 347, 348, 351, 352, 357, 358, 361, 368, 369, 371, 372, 380, 381, 382, 385, 386, 391, 392, 394, 395, 397, 399, 400, 403, 411, 412, 420, 427, 432, 433, 434, 435, 436, 437, 443, 446, 454, 461, 462, 478, 502, 522, 524, 525, 527, 529, 530, 531, 534, 536, 537, 538, 539, 540, 542, 543, 544, 545, 547, 549, 551, 552, 553, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 572, 573, 574, 577, 578, 579, 583, 585, 586, 587, 589, 591, 592, 593, 598, 607, 611, 613, 614, 616, 618, 620, 630, 637, 644, 653, 655, 656, 658, 664, 665, 672, 682, 685, 686, 687, 702, 703, 704, 706, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 738, 740, 741, 743, 745, 746, 749, 750, 754, 756, 759], "take": [0, 2, 9, 14, 16, 22, 32, 39, 49, 72, 73, 75, 96, 189, 234, 241, 252, 301, 309, 312, 328, 336, 341, 346, 384, 390, 408, 435, 436, 536, 537, 540, 544, 545, 547, 548, 570, 583, 587, 612, 623, 663, 681, 682, 694, 700, 704, 705, 710, 711, 712, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 730, 731, 732, 733, 736, 738, 740, 742, 743, 746, 747, 750, 751, 759], "ani": [0, 1, 2, 4, 5, 7, 8, 9, 10, 14, 23, 24, 28, 30, 31, 32, 33, 46, 47, 49, 51, 52, 72, 73, 75, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 109, 110, 125, 129, 133, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 255, 259, 269, 270, 276, 279, 301, 303, 306, 309, 310, 312, 315, 321, 327, 328, 329, 330, 332, 333, 334, 340, 345, 346, 347, 348, 352, 358, 361, 389, 400, 414, 415, 416, 434, 437, 440, 441, 443, 453, 454, 455, 456, 457, 461, 465, 467, 469, 473, 475, 476, 494, 501, 508, 509, 516, 522, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 599, 600, 601, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 627, 630, 631, 633, 634, 641, 643, 647, 650, 651, 653, 654, 655, 656, 657, 658, 659, 662, 666, 667, 668, 669, 670, 671, 672, 673, 678, 679, 681, 682, 684, 685, 686, 687, 691, 694, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 751, 752, 753, 754, 756, 759, 760], "framework": [0, 2, 4, 10, 124, 146, 156, 159, 170, 452, 468, 472, 503, 506, 538, 539, 542, 549, 626, 679, 686, 691, 702, 703, 704, 708, 710, 711, 713, 714, 715, 716, 717, 719, 720, 721, 722, 724, 726, 727, 728, 730, 731, 733, 734, 736, 737, 738, 740, 743, 745, 746, 747, 748, 749, 750, 751, 752, 754, 757], "specif": [0, 2, 7, 9, 10, 30, 32, 33, 134, 165, 168, 201, 222, 223, 232, 316, 424, 454, 455, 456, 482, 538, 539, 540, 542, 545, 547, 548, 551, 554, 555, 578, 579, 595, 616, 621, 622, 623, 644, 661, 666, 667, 668, 670, 683, 684, 691, 696, 700, 702, 708, 710, 711, 712, 714, 715, 716, 717, 718, 720, 721, 724, 725, 726, 727, 730, 731, 732, 733, 734, 736, 738, 739, 740, 742, 743, 745, 746, 747, 748, 749, 751, 752, 754, 755, 756, 760], "backend": [0, 2, 4, 5, 9, 10, 14, 26, 32, 33, 37, 51, 84, 120, 121, 124, 146, 153, 154, 156, 159, 170, 310, 356, 358, 441, 447, 459, 460, 468, 471, 472, 482, 489, 503, 506, 537, 538, 539, 542, 545, 593, 679, 684, 686, 690, 691, 702, 708, 709, 711, 712, 713, 714, 715, 719, 721, 722, 723, 724, 726, 727, 728, 730, 731, 732, 733, 735, 736, 737, 739, 740, 743, 748, 753, 756, 759, 760], "composit": [0, 120, 121, 153, 154, 246, 310, 362, 459, 460, 538, 539, 540, 542, 710, 713, 715, 716, 718, 720, 721, 728, 730, 731, 732, 733, 736, 738, 742, 743, 746, 748, 754], "both": [0, 2, 5, 8, 9, 10, 13, 14, 28, 31, 32, 33, 36, 37, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 109, 125, 129, 132, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 259, 270, 276, 277, 279, 282, 287, 303, 306, 309, 310, 312, 316, 321, 327, 328, 329, 330, 332, 333, 334, 340, 345, 346, 347, 348, 358, 394, 400, 420, 434, 437, 461, 465, 467, 469, 478, 508, 532, 533, 537, 538, 540, 542, 543, 544, 545, 547, 549, 550, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 599, 600, 601, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 624, 643, 650, 651, 653, 654, 655, 656, 657, 658, 659, 662, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 700, 710, 712, 716, 718, 719, 720, 721, 722, 723, 724, 726, 727, 730, 731, 733, 736, 738, 740, 741, 742, 743, 745, 746, 753, 756, 758, 759, 760], "produc": [0, 9, 10, 13, 32, 36, 252, 255, 258, 261, 301, 303, 544, 571, 710, 720, 725, 730, 732, 733, 734, 754, 756], "simplifi": [0, 694, 703, 724, 731, 738, 739, 742, 749, 751, 752, 753, 756, 759, 760], "execut": [0, 73, 75, 509, 536, 539, 542, 711, 712, 717, 718, 719, 720, 721, 722, 724, 727, 728, 730, 733, 736, 738, 740, 743, 746, 748, 749, 753, 754, 755, 756, 757, 759], "comput": [0, 2, 3, 8, 9, 10, 11, 13, 14, 15, 20, 22, 25, 26, 31, 32, 33, 34, 36, 37, 38, 45, 49, 62, 66, 167, 177, 184, 187, 189, 194, 195, 196, 201, 202, 203, 205, 206, 212, 213, 214, 221, 222, 223, 224, 226, 227, 230, 235, 236, 250, 260, 263, 264, 271, 272, 276, 280, 283, 285, 286, 290, 292, 297, 298, 299, 300, 301, 303, 306, 307, 308, 309, 310, 311, 312, 315, 319, 321, 327, 328, 329, 330, 331, 336, 337, 340, 341, 342, 345, 346, 347, 348, 351, 352, 353, 354, 356, 357, 358, 359, 360, 362, 365, 367, 369, 371, 372, 373, 374, 375, 376, 377, 394, 397, 409, 414, 416, 426, 434, 435, 436, 437, 438, 439, 440, 441, 442, 448, 449, 450, 494, 516, 523, 525, 526, 528, 532, 533, 539, 540, 542, 543, 544, 545, 546, 547, 549, 553, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 572, 573, 577, 578, 579, 582, 583, 584, 586, 588, 590, 592, 593, 595, 597, 599, 600, 602, 603, 604, 608, 630, 655, 656, 657, 658, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 682, 685, 700, 703, 704, 711, 718, 719, 720, 727, 729, 731, 733, 735, 736, 738, 741, 746, 748, 749, 751, 753, 754, 756, 757, 759], "compos": [0, 9, 32, 309, 323, 324, 325, 680, 711, 718, 731, 733, 746, 753, 760], "from": [0, 1, 2, 4, 5, 6, 8, 9, 10, 11, 13, 14, 16, 18, 19, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 41, 42, 45, 46, 47, 49, 52, 76, 78, 86, 88, 89, 90, 91, 94, 95, 98, 101, 103, 109, 127, 133, 134, 150, 155, 160, 166, 167, 193, 201, 202, 229, 233, 234, 241, 245, 258, 259, 269, 271, 272, 277, 280, 282, 283, 285, 286, 298, 303, 306, 309, 310, 312, 316, 321, 332, 333, 334, 348, 352, 364, 370, 373, 384, 386, 395, 400, 406, 408, 411, 412, 420, 421, 422, 423, 424, 435, 436, 453, 461, 462, 464, 484, 495, 505, 522, 524, 525, 529, 537, 538, 539, 540, 542, 543, 544, 545, 547, 548, 549, 551, 552, 553, 555, 556, 558, 566, 567, 573, 576, 593, 597, 598, 599, 606, 609, 612, 615, 621, 622, 623, 625, 636, 637, 638, 644, 645, 646, 647, 651, 654, 655, 657, 663, 664, 669, 670, 671, 672, 673, 674, 679, 680, 681, 682, 684, 686, 691, 702, 703, 704, 705, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 736, 738, 739, 740, 741, 742, 743, 745, 746, 748, 749, 751, 752, 753, 754, 755, 757, 758, 759, 760], "onli": [0, 2, 5, 8, 9, 14, 16, 18, 26, 28, 31, 32, 37, 39, 41, 49, 51, 67, 93, 132, 133, 162, 222, 223, 228, 234, 258, 280, 285, 303, 306, 309, 310, 312, 316, 321, 331, 344, 358, 361, 371, 372, 380, 381, 382, 390, 420, 421, 437, 448, 534, 537, 538, 539, 540, 542, 544, 545, 547, 549, 551, 552, 554, 555, 570, 583, 590, 593, 609, 612, 624, 625, 631, 632, 634, 635, 636, 641, 642, 645, 646, 647, 650, 651, 661, 667, 670, 682, 684, 686, 694, 700, 702, 705, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 741, 742, 743, 744, 746, 752, 753, 754, 759, 760], "which": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 49, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 76, 77, 78, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 111, 117, 119, 122, 124, 127, 134, 146, 151, 155, 160, 162, 165, 166, 167, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 256, 257, 258, 259, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282, 284, 286, 287, 288, 289, 291, 292, 293, 295, 297, 298, 299, 300, 301, 303, 306, 307, 308, 309, 310, 311, 312, 315, 316, 319, 321, 331, 332, 333, 334, 336, 337, 341, 342, 351, 352, 355, 358, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 380, 381, 382, 385, 405, 406, 407, 408, 409, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 454, 455, 456, 458, 461, 462, 463, 464, 465, 467, 469, 470, 471, 473, 474, 477, 478, 483, 484, 485, 486, 500, 501, 503, 505, 507, 508, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 549, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 567, 568, 570, 571, 572, 573, 575, 576, 578, 579, 580, 581, 583, 584, 586, 587, 588, 590, 591, 592, 593, 597, 599, 600, 602, 603, 604, 605, 606, 608, 609, 611, 612, 613, 614, 615, 616, 619, 620, 629, 630, 631, 632, 637, 639, 640, 641, 642, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 679, 680, 681, 682, 683, 684, 685, 686, 687, 691, 696, 700, 702, 703, 704, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 758, 759, 760], "result": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 75, 76, 77, 78, 84, 85, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 102, 103, 106, 108, 133, 134, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 317, 319, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 361, 362, 364, 365, 366, 367, 368, 373, 374, 375, 376, 377, 379, 385, 388, 390, 391, 392, 393, 394, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 449, 450, 454, 455, 456, 461, 462, 471, 478, 485, 486, 523, 524, 525, 527, 529, 530, 531, 532, 534, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 620, 624, 627, 630, 631, 633, 637, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 688, 698, 700, 708, 710, 712, 714, 715, 717, 718, 719, 720, 722, 723, 726, 727, 729, 730, 731, 732, 733, 734, 738, 741, 746, 754, 756], "code": [0, 2, 7, 8, 26, 30, 31, 52, 168, 214, 321, 441, 447, 455, 456, 471, 485, 489, 503, 539, 542, 544, 545, 547, 566, 585, 586, 587, 616, 698, 700, 702, 703, 704, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 726, 727, 728, 730, 731, 732, 733, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 748, 749, 751, 752, 753, 754, 756, 757, 758, 759, 760], "all": [0, 2, 4, 5, 9, 10, 13, 14, 16, 18, 23, 24, 26, 27, 28, 31, 32, 33, 36, 37, 39, 41, 46, 47, 49, 76, 89, 96, 99, 100, 101, 155, 162, 194, 198, 226, 227, 269, 270, 279, 296, 303, 306, 309, 310, 312, 321, 342, 351, 352, 358, 361, 369, 372, 400, 411, 440, 443, 446, 463, 483, 484, 500, 507, 508, 522, 525, 537, 539, 540, 542, 543, 544, 545, 547, 548, 549, 551, 552, 556, 567, 569, 570, 573, 586, 591, 592, 595, 600, 609, 613, 615, 621, 622, 623, 624, 625, 626, 635, 636, 637, 638, 644, 647, 652, 680, 681, 682, 688, 691, 696, 700, 702, 703, 704, 705, 706, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 759, 760], "don": [0, 24, 47, 700, 704, 710, 711, 712, 719, 720, 725, 729, 733, 736, 742, 746], "contribut": [0, 9, 32, 321, 437, 706, 709, 710, 711, 712, 717, 725, 731, 738, 747, 757], "output": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 78, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 106, 108, 133, 167, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 303, 306, 308, 309, 310, 311, 312, 315, 316, 317, 319, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 358, 361, 362, 365, 366, 367, 368, 370, 373, 374, 375, 376, 377, 378, 384, 385, 388, 390, 391, 392, 393, 394, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 448, 449, 450, 454, 455, 456, 458, 462, 471, 478, 485, 486, 487, 510, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 620, 624, 637, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 681, 682, 694, 700, 707, 711, 712, 713, 714, 715, 717, 718, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 738, 740, 742, 743, 746, 748, 754], "print": [0, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 59, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 84, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 106, 107, 108, 109, 111, 117, 118, 119, 120, 121, 124, 126, 127, 129, 134, 146, 147, 151, 153, 154, 155, 156, 158, 159, 160, 161, 162, 165, 166, 168, 169, 170, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 259, 265, 266, 269, 274, 276, 289, 290, 295, 299, 301, 303, 306, 309, 310, 311, 312, 315, 321, 327, 328, 329, 330, 332, 333, 335, 337, 340, 342, 345, 346, 347, 348, 350, 352, 356, 358, 367, 373, 374, 375, 376, 377, 383, 384, 385, 396, 400, 405, 406, 408, 409, 413, 417, 418, 419, 434, 435, 436, 437, 442, 443, 445, 446, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 461, 462, 464, 465, 467, 469, 470, 471, 473, 474, 475, 477, 481, 484, 485, 486, 490, 491, 492, 495, 498, 499, 500, 501, 503, 505, 507, 508, 509, 513, 514, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 566, 567, 568, 571, 572, 573, 574, 576, 578, 579, 580, 581, 583, 584, 586, 587, 588, 589, 591, 593, 594, 595, 597, 600, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 627, 628, 630, 631, 632, 633, 635, 636, 641, 642, 643, 644, 645, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 680, 691, 694, 698, 700, 711, 712, 718, 722, 732, 733, 735, 738, 740, 741, 742], "statement": [0, 2, 719, 730, 733, 736, 746], "logger": 0, "etc": [0, 5, 9, 18, 20, 24, 28, 32, 41, 47, 84, 92, 93, 96, 309, 316, 337, 342, 352, 420, 421, 423, 424, 537, 551, 553, 644, 645, 646, 647, 655, 656, 657, 658, 681, 682, 683, 684, 685, 686, 687, 704, 710, 711, 712, 714, 715, 716, 717, 718, 720, 722, 724, 726, 731, 732, 733, 734, 738, 740, 741, 746, 748, 751, 753, 759], "ha": [0, 1, 5, 9, 14, 16, 20, 22, 26, 29, 32, 33, 37, 39, 43, 45, 49, 94, 150, 174, 194, 197, 199, 201, 211, 227, 229, 232, 234, 237, 239, 240, 244, 271, 272, 303, 309, 311, 312, 321, 344, 375, 384, 407, 408, 411, 433, 435, 436, 438, 467, 537, 539, 540, 544, 545, 547, 552, 553, 555, 570, 583, 584, 592, 593, 595, 597, 600, 608, 615, 653, 656, 657, 658, 663, 664, 667, 669, 670, 671, 672, 680, 691, 702, 703, 704, 710, 712, 714, 716, 717, 718, 719, 720, 721, 722, 723, 727, 728, 729, 730, 731, 732, 733, 734, 736, 738, 739, 740, 742, 743, 745, 746, 749, 752, 753, 755, 756, 759], "": [0, 1, 2, 5, 9, 10, 11, 14, 22, 32, 34, 37, 45, 72, 94, 99, 100, 120, 121, 150, 153, 154, 166, 201, 236, 270, 274, 276, 285, 287, 293, 297, 299, 303, 306, 307, 309, 310, 311, 312, 315, 316, 321, 324, 325, 331, 337, 342, 352, 356, 364, 371, 375, 391, 392, 400, 414, 415, 416, 424, 434, 442, 459, 460, 480, 502, 503, 524, 526, 527, 528, 529, 531, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 549, 555, 559, 561, 563, 565, 575, 586, 593, 594, 600, 636, 670, 672, 680, 681, 682, 683, 684, 685, 686, 687, 691, 700, 703, 704, 705, 706, 708, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 741, 742, 743, 745, 746, 747, 748, 749, 752, 753, 754, 756, 757, 758, 759], "likewis": [0, 2, 700, 712, 718, 720, 723, 726, 727, 731, 736, 741, 759], "redund": [0, 700, 720, 724, 731], "oper": [0, 5, 6, 8, 9, 10, 13, 26, 28, 29, 31, 32, 33, 36, 52, 67, 92, 93, 134, 164, 172, 177, 179, 188, 191, 194, 201, 216, 218, 227, 228, 232, 236, 239, 244, 252, 271, 272, 300, 301, 303, 308, 309, 312, 323, 324, 325, 327, 328, 329, 335, 336, 337, 341, 345, 346, 347, 348, 350, 351, 352, 407, 447, 454, 455, 456, 503, 534, 537, 538, 539, 540, 542, 544, 545, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 595, 597, 669, 671, 682, 700, 702, 710, 711, 713, 714, 715, 718, 720, 721, 722, 723, 724, 727, 730, 731, 733, 736, 738, 741, 742, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760], "origin": [0, 2, 9, 14, 16, 22, 26, 32, 37, 39, 45, 49, 51, 52, 182, 207, 234, 310, 312, 321, 369, 393, 399, 401, 404, 435, 436, 440, 441, 442, 540, 545, 547, 555, 584, 612, 613, 664, 691, 700, 704, 710, 711, 712, 716, 717, 719, 720, 728, 730, 731, 732, 738, 753, 754], "also": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 108, 109, 122, 125, 126, 127, 129, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303, 306, 309, 310, 312, 319, 321, 327, 328, 329, 330, 332, 333, 334, 336, 340, 341, 342, 345, 346, 347, 348, 351, 352, 353, 354, 355, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 449, 450, 453, 454, 455, 456, 457, 458, 461, 462, 465, 467, 469, 470, 471, 473, 474, 475, 477, 478, 480, 485, 486, 500, 501, 502, 503, 505, 507, 508, 521, 523, 524, 527, 529, 530, 531, 532, 537, 538, 540, 542, 543, 544, 545, 547, 548, 549, 550, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 634, 635, 636, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 681, 682, 691, 700, 702, 703, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 736, 738, 741, 742, 743, 745, 746, 747, 749, 750, 751, 752, 753, 754, 756, 758, 759, 760], "increas": [0, 9, 14, 16, 32, 37, 39, 312, 321, 400, 437, 545, 547, 549, 598, 607, 620, 636, 702, 720, 724, 731, 734, 736, 753], "its": [0, 4, 6, 9, 16, 26, 29, 32, 33, 39, 61, 64, 67, 73, 107, 112, 113, 114, 115, 116, 167, 194, 227, 246, 252, 301, 309, 312, 321, 348, 411, 437, 458, 506, 534, 536, 538, 539, 540, 542, 545, 547, 549, 583, 608, 612, 613, 617, 630, 680, 700, 710, 711, 715, 718, 719, 720, 721, 723, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 743, 746, 748, 752, 753, 759], "overal": [0, 544, 567, 718, 720, 721, 723, 743, 749, 751, 752, 753], "obj": [0, 2, 77, 78, 537], "none": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 119, 122, 124, 125, 126, 127, 129, 131, 134, 144, 146, 149, 150, 162, 163, 164, 165, 166, 167, 168, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 267, 268, 269, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 306, 309, 310, 311, 312, 315, 316, 317, 319, 320, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 454, 455, 456, 457, 458, 461, 462, 464, 465, 466, 467, 469, 470, 471, 473, 474, 477, 482, 485, 486, 487, 488, 489, 491, 492, 493, 494, 496, 497, 498, 500, 501, 503, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 529, 530, 531, 532, 534, 535, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 628, 629, 630, 631, 634, 635, 636, 637, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 691, 693, 700, 708, 714, 715, 716, 718, 719, 720, 721, 722, 724, 726, 727, 730, 731, 732, 733, 734, 736, 738, 740, 742, 743], "arg_stateful_idx": [0, 683, 684], "kwarg_stateful_idx": [0, 683, 684], "include_gener": 0, "true": [0, 2, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 75, 78, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 106, 107, 108, 109, 110, 117, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 134, 146, 150, 151, 153, 154, 158, 161, 162, 163, 164, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 267, 268, 269, 270, 273, 274, 275, 276, 278, 280, 286, 287, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 321, 323, 324, 325, 327, 328, 329, 331, 332, 333, 334, 335, 336, 344, 345, 346, 347, 351, 353, 354, 355, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 380, 381, 382, 385, 386, 387, 388, 390, 391, 392, 395, 396, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 426, 427, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 446, 447, 449, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 467, 469, 470, 471, 473, 474, 475, 477, 478, 485, 486, 487, 490, 493, 494, 496, 497, 499, 500, 501, 503, 505, 507, 508, 510, 515, 516, 518, 519, 521, 524, 525, 527, 529, 530, 531, 532, 534, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 630, 631, 632, 634, 635, 636, 637, 641, 642, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 680, 682, 683, 684, 685, 686, 688, 691, 694, 698, 700, 708, 711, 716, 718, 719, 720, 721, 722, 724, 726, 727, 728, 730, 731, 732, 733, 735, 736, 738, 741, 742, 743], "array_cach": 0, "return_backend_compiled_fn": 0, "fals": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 78, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 150, 151, 156, 158, 161, 162, 164, 167, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 267, 268, 269, 270, 273, 274, 275, 276, 278, 280, 286, 287, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 321, 323, 324, 325, 327, 328, 329, 331, 332, 333, 334, 335, 336, 344, 345, 346, 347, 350, 351, 354, 355, 357, 358, 359, 360, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 385, 386, 387, 388, 389, 390, 391, 392, 395, 396, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 426, 427, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 446, 447, 449, 450, 453, 454, 455, 456, 457, 458, 461, 462, 464, 465, 467, 469, 470, 471, 473, 474, 475, 477, 478, 481, 485, 486, 487, 490, 493, 494, 496, 497, 499, 500, 501, 503, 505, 507, 508, 510, 515, 516, 518, 519, 521, 524, 525, 527, 531, 532, 534, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 630, 634, 635, 636, 637, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 678, 679, 680, 682, 683, 684, 686, 688, 691, 694, 695, 698, 700, 708, 711, 714, 716, 719, 720, 721, 722, 724, 730, 731, 732, 733, 735, 736, 738, 741, 742, 743], "static_argnum": [0, 738], "static_argnam": [0, 738], "arg": [0, 2, 4, 26, 48, 55, 72, 157, 167, 509, 536, 537, 539, 542, 678, 679, 682, 684, 688, 691, 694, 698, 700, 715, 720, 721, 724, 729, 730, 731, 736, 738, 742], "kwarg": [0, 2, 4, 9, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 52, 55, 157, 312, 400, 481, 509, 537, 539, 542, 678, 679, 682, 684, 691, 698, 700, 715, 720, 721, 724, 727, 730, 731, 736, 738, 742], "callabl": [0, 2, 9, 10, 24, 32, 33, 36, 47, 72, 73, 75, 79, 80, 81, 82, 83, 120, 121, 153, 154, 167, 299, 307, 309, 312, 351, 379, 400, 444, 448, 453, 455, 459, 460, 481, 509, 522, 526, 528, 533, 536, 537, 538, 539, 542, 543, 548, 549, 621, 622, 623, 630, 631, 632, 634, 635, 636, 637, 686, 695, 718, 724, 729, 731, 738], "set": [0, 2, 4, 9, 10, 13, 14, 19, 21, 22, 26, 32, 33, 36, 37, 42, 44, 45, 64, 67, 75, 99, 101, 135, 136, 137, 138, 139, 150, 163, 164, 165, 166, 167, 182, 269, 278, 292, 294, 299, 303, 306, 307, 309, 310, 312, 321, 331, 355, 359, 360, 376, 390, 400, 403, 409, 434, 439, 440, 441, 442, 443, 447, 454, 471, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 503, 511, 534, 536, 537, 538, 539, 540, 542, 544, 545, 549, 551, 552, 554, 555, 567, 571, 573, 584, 586, 589, 592, 593, 624, 631, 634, 635, 636, 641, 642, 648, 650, 651, 655, 657, 658, 659, 662, 670, 672, 680, 681, 682, 684, 686, 691, 697, 702, 705, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 724, 725, 727, 728, 730, 731, 732, 733, 734, 736, 738, 740, 741, 747, 751, 752, 753, 754, 755, 757, 760], "them": [0, 2, 448, 484, 542, 682, 700, 701, 702, 703, 704, 707, 710, 712, 714, 715, 716, 717, 718, 719, 720, 724, 725, 728, 730, 731, 732, 733, 735, 738, 740, 741, 742, 746, 748, 750, 751, 753, 755, 759], "If": [0, 1, 2, 4, 5, 6, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 76, 77, 78, 85, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 134, 150, 166, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 269, 270, 271, 274, 275, 276, 278, 279, 280, 282, 286, 287, 292, 293, 295, 297, 298, 299, 303, 306, 307, 309, 310, 311, 312, 315, 316, 321, 327, 328, 329, 330, 331, 332, 333, 334, 337, 340, 342, 344, 345, 346, 347, 352, 356, 358, 360, 361, 366, 368, 370, 371, 373, 374, 375, 376, 377, 380, 381, 382, 385, 386, 388, 390, 391, 392, 395, 399, 405, 406, 407, 408, 409, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 446, 447, 449, 450, 454, 455, 456, 458, 461, 462, 464, 465, 467, 469, 470, 471, 473, 474, 477, 478, 485, 486, 490, 500, 501, 503, 505, 507, 508, 521, 522, 525, 527, 532, 534, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 567, 568, 570, 571, 572, 573, 575, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 597, 598, 599, 600, 602, 603, 604, 605, 606, 608, 609, 610, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 636, 637, 644, 645, 646, 647, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 680, 681, 682, 684, 685, 691, 700, 702, 705, 706, 707, 708, 710, 711, 712, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 740, 741, 743, 746, 747], "specifi": [0, 2, 3, 5, 6, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 22, 23, 25, 26, 29, 31, 32, 33, 36, 37, 38, 39, 41, 42, 45, 46, 49, 59, 61, 64, 67, 76, 85, 90, 92, 97, 99, 100, 102, 106, 108, 155, 160, 162, 166, 167, 168, 236, 245, 270, 274, 287, 292, 303, 306, 309, 310, 311, 312, 316, 321, 327, 328, 329, 331, 337, 342, 352, 358, 366, 368, 371, 375, 376, 378, 390, 393, 402, 403, 405, 406, 421, 432, 434, 435, 436, 439, 440, 442, 444, 461, 462, 464, 467, 480, 490, 522, 534, 537, 538, 539, 540, 542, 544, 545, 546, 547, 549, 551, 552, 553, 554, 555, 556, 570, 571, 573, 575, 576, 578, 579, 584, 595, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 613, 615, 616, 619, 620, 628, 629, 631, 632, 639, 640, 641, 642, 645, 646, 647, 649, 650, 651, 653, 656, 657, 658, 659, 663, 664, 665, 669, 671, 673, 674, 678, 680, 682, 683, 684, 711, 713, 717, 720, 721, 726, 727, 728, 730, 731, 732, 733, 738, 741, 742, 759], "eagerli": [0, 2, 700], "otherwis": [0, 1, 2, 4, 5, 6, 8, 9, 10, 13, 14, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 49, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 76, 78, 84, 89, 91, 92, 93, 96, 98, 103, 106, 107, 109, 110, 112, 113, 114, 115, 116, 125, 129, 133, 134, 150, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 253, 254, 256, 257, 259, 267, 268, 274, 275, 276, 278, 279, 280, 286, 287, 293, 295, 297, 298, 299, 301, 303, 306, 309, 310, 315, 327, 328, 329, 332, 333, 334, 370, 371, 373, 374, 376, 377, 380, 381, 382, 385, 386, 388, 390, 391, 392, 399, 406, 408, 409, 412, 414, 416, 417, 418, 419, 421, 433, 434, 435, 436, 437, 443, 446, 447, 449, 450, 454, 455, 456, 458, 461, 462, 465, 467, 469, 470, 471, 473, 474, 477, 478, 485, 486, 500, 501, 503, 505, 507, 508, 509, 521, 525, 527, 532, 536, 537, 538, 539, 540, 542, 543, 544, 545, 548, 549, 552, 553, 554, 555, 556, 558, 559, 560, 561, 567, 568, 570, 571, 572, 573, 574, 578, 579, 580, 581, 583, 584, 586, 588, 590, 591, 593, 597, 599, 600, 602, 603, 604, 605, 608, 609, 610, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 637, 644, 645, 646, 647, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 661, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 684, 685, 691, 700, 712, 715, 718, 720, 721, 722, 727, 728, 730, 733, 738], "happen": [0, 2, 246, 540, 700, 704, 711, 712, 721, 730, 733, 741], "lazili": [0, 2, 700], "paramet": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 160, 161, 162, 163, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 319, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 469, 470, 471, 473, 474, 475, 476, 477, 478, 480, 481, 482, 485, 486, 489, 490, 491, 492, 495, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 691, 694, 696, 700, 710, 715, 723, 724, 726, 731, 732, 733, 734, 738, 740, 741, 745, 754], "creat": [0, 1, 2, 5, 8, 9, 18, 26, 28, 31, 32, 37, 41, 76, 77, 78, 85, 86, 87, 90, 91, 92, 93, 95, 96, 97, 98, 101, 102, 103, 228, 258, 259, 267, 268, 269, 303, 309, 310, 312, 316, 327, 328, 329, 350, 360, 369, 372, 378, 400, 405, 420, 421, 422, 423, 424, 489, 505, 522, 533, 537, 540, 542, 543, 551, 588, 644, 645, 646, 647, 649, 679, 681, 682, 683, 684, 685, 686, 687, 703, 705, 706, 711, 712, 715, 716, 717, 719, 720, 721, 724, 727, 728, 730, 731, 732, 733, 736, 738, 739, 742, 744, 745, 748, 753, 754, 759], "option": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 122, 124, 134, 146, 150, 162, 165, 166, 167, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 267, 268, 269, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 306, 309, 310, 311, 312, 315, 316, 317, 319, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 380, 381, 382, 384, 385, 386, 388, 390, 391, 392, 393, 394, 395, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 452, 454, 455, 456, 458, 461, 462, 464, 465, 467, 469, 470, 471, 473, 474, 477, 480, 482, 485, 486, 490, 500, 501, 502, 503, 505, 507, 508, 509, 521, 523, 524, 525, 527, 529, 530, 531, 532, 534, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 630, 631, 634, 635, 636, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 679, 681, 684, 686, 687, 694, 698, 710, 711, 712, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 730, 731, 732, 733, 734, 736, 738, 743, 746, 753, 759], "list": [0, 4, 5, 6, 8, 9, 10, 13, 16, 17, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 76, 77, 78, 89, 91, 94, 95, 96, 98, 103, 107, 109, 122, 126, 127, 134, 150, 167, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 252, 253, 254, 256, 257, 259, 274, 275, 276, 278, 279, 280, 281, 282, 285, 286, 287, 293, 294, 295, 297, 298, 299, 306, 309, 310, 312, 319, 327, 328, 329, 331, 332, 333, 334, 345, 346, 347, 348, 358, 360, 363, 368, 369, 372, 373, 374, 376, 377, 380, 381, 382, 383, 385, 386, 395, 406, 408, 409, 412, 414, 416, 417, 418, 419, 421, 426, 434, 435, 436, 437, 443, 445, 446, 447, 449, 450, 454, 455, 456, 458, 461, 462, 463, 465, 467, 469, 470, 471, 473, 474, 477, 481, 485, 486, 500, 501, 503, 505, 506, 507, 508, 509, 521, 522, 527, 532, 537, 538, 539, 540, 542, 544, 545, 547, 549, 550, 553, 554, 558, 559, 560, 561, 562, 563, 566, 567, 568, 570, 571, 572, 573, 578, 579, 580, 581, 583, 584, 586, 588, 590, 591, 595, 597, 602, 603, 604, 605, 606, 609, 612, 613, 614, 615, 616, 619, 620, 624, 625, 626, 627, 630, 631, 632, 633, 635, 636, 641, 642, 643, 644, 645, 646, 647, 649, 652, 655, 656, 657, 658, 659, 660, 661, 663, 664, 667, 669, 670, 672, 673, 674, 679, 680, 682, 688, 694, 709, 710, 711, 714, 715, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 730, 731, 732, 733, 734, 738, 741, 742, 743, 746, 753, 754, 759], "instanc": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 119, 122, 125, 126, 127, 129, 134, 151, 163, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303, 306, 309, 310, 311, 312, 315, 321, 327, 328, 329, 330, 332, 333, 334, 336, 340, 341, 345, 346, 347, 348, 351, 353, 354, 355, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 449, 450, 453, 454, 455, 456, 457, 458, 461, 462, 465, 467, 469, 470, 471, 473, 474, 475, 477, 478, 480, 485, 486, 496, 500, 501, 502, 503, 505, 507, 508, 521, 523, 524, 527, 529, 530, 531, 532, 537, 538, 539, 540, 542, 543, 544, 546, 547, 549, 550, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 624, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 679, 706, 710, 711, 712, 714, 715, 716, 720, 722, 723, 724, 726, 727, 728, 729, 730, 733, 741, 742, 743, 748, 754], "consid": [0, 9, 14, 20, 32, 37, 67, 101, 222, 223, 269, 274, 277, 287, 303, 306, 310, 321, 358, 360, 369, 434, 534, 537, 540, 545, 553, 575, 586, 655, 656, 657, 658, 681, 702, 703, 715, 716, 719, 720, 727, 729, 734, 736, 739, 740, 741, 750, 754, 758, 760], "dure": [0, 7, 11, 22, 26, 30, 34, 45, 168, 309, 332, 333, 334, 489, 509, 523, 524, 529, 539, 542, 543, 544, 545, 548, 555, 567, 583, 621, 622, 623, 670, 672, 680, 683, 684, 685, 686, 711, 718, 720, 721, 724, 727, 728, 730, 731, 732, 733, 736, 746, 753, 754, 759], "posit": [0, 4, 8, 9, 10, 14, 15, 16, 31, 32, 33, 37, 38, 39, 49, 87, 89, 101, 119, 174, 175, 176, 180, 183, 194, 201, 208, 209, 215, 217, 227, 228, 235, 236, 240, 241, 245, 259, 269, 274, 277, 287, 303, 306, 310, 312, 355, 370, 376, 399, 448, 458, 522, 535, 537, 538, 540, 542, 545, 546, 547, 551, 552, 556, 572, 575, 597, 602, 608, 613, 648, 653, 673, 674, 679, 700, 710, 712, 714, 718, 731, 733, 734, 741, 745, 755], "argument": [0, 2, 4, 5, 8, 9, 10, 14, 26, 27, 31, 32, 33, 49, 52, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 109, 125, 129, 134, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 259, 269, 270, 276, 279, 303, 306, 309, 310, 312, 321, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 340, 341, 342, 345, 346, 347, 348, 358, 400, 434, 437, 441, 444, 445, 447, 448, 453, 455, 456, 461, 465, 467, 469, 471, 481, 485, 486, 503, 508, 509, 522, 532, 537, 538, 540, 542, 543, 544, 545, 547, 548, 549, 550, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 599, 600, 601, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 630, 643, 650, 651, 653, 654, 655, 656, 657, 658, 659, 662, 666, 667, 668, 669, 670, 671, 672, 673, 674, 679, 682, 683, 684, 691, 694, 696, 700, 702, 710, 713, 714, 715, 716, 717, 718, 722, 723, 725, 727, 732, 733, 734, 736, 738, 740, 741, 748, 753], "keyword": [0, 2, 4, 5, 9, 26, 32, 52, 94, 228, 312, 321, 400, 434, 445, 448, 481, 509, 537, 540, 542, 549, 555, 630, 671, 683, 684, 694, 710, 715, 718, 720, 721, 728, 730, 731, 732, 733, 734, 736, 741], "str": [0, 2, 4, 5, 9, 10, 13, 14, 15, 16, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 59, 60, 61, 62, 63, 64, 65, 66, 67, 89, 91, 94, 96, 98, 103, 104, 107, 109, 111, 112, 113, 114, 118, 119, 122, 123, 124, 125, 126, 127, 129, 131, 134, 135, 136, 137, 138, 139, 146, 147, 167, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 252, 253, 254, 256, 257, 259, 274, 275, 276, 278, 280, 286, 287, 293, 295, 297, 298, 299, 309, 310, 311, 312, 315, 321, 327, 328, 329, 331, 332, 333, 334, 336, 337, 341, 342, 345, 346, 347, 348, 350, 351, 352, 354, 358, 369, 372, 373, 374, 375, 376, 377, 380, 381, 382, 384, 385, 390, 406, 408, 409, 414, 415, 416, 417, 418, 419, 421, 423, 434, 435, 436, 437, 442, 443, 444, 446, 447, 449, 450, 452, 454, 455, 456, 458, 461, 462, 465, 467, 469, 470, 471, 473, 474, 477, 482, 485, 486, 488, 489, 498, 500, 501, 503, 505, 507, 508, 521, 525, 532, 537, 538, 539, 542, 543, 544, 545, 546, 547, 548, 549, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 573, 578, 579, 580, 581, 583, 584, 586, 588, 590, 591, 597, 602, 603, 604, 605, 609, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 630, 631, 641, 644, 645, 646, 647, 649, 652, 655, 656, 657, 659, 663, 664, 665, 667, 669, 670, 672, 673, 674, 682, 684, 685, 694, 720, 721, 724, 727, 730, 731, 734, 738, 743], "current": [0, 10, 26, 52, 72, 120, 121, 124, 141, 142, 143, 144, 145, 146, 152, 153, 154, 155, 160, 162, 310, 312, 356, 357, 400, 459, 460, 463, 468, 472, 483, 484, 503, 536, 538, 539, 542, 545, 549, 577, 624, 634, 635, 680, 684, 691, 697, 700, 704, 707, 710, 711, 712, 714, 716, 718, 719, 720, 721, 724, 725, 727, 730, 731, 732, 733, 736, 738, 743, 745, 746, 753, 759, 760], "bool": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 77, 78, 84, 89, 90, 91, 92, 93, 94, 96, 98, 103, 106, 107, 109, 110, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 142, 146, 150, 151, 153, 154, 156, 158, 161, 162, 167, 168, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 267, 268, 270, 274, 275, 276, 278, 280, 286, 287, 292, 293, 295, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 321, 327, 328, 329, 331, 332, 333, 334, 344, 345, 346, 347, 350, 358, 360, 363, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 385, 386, 388, 389, 390, 391, 392, 395, 399, 403, 406, 408, 409, 412, 414, 416, 417, 418, 419, 421, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 446, 447, 449, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 485, 486, 490, 499, 500, 501, 503, 505, 507, 508, 521, 524, 525, 527, 529, 530, 531, 532, 534, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 567, 568, 570, 571, 572, 573, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 590, 591, 593, 597, 598, 600, 602, 603, 604, 605, 608, 609, 610, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 630, 631, 632, 634, 635, 636, 641, 642, 644, 645, 646, 647, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 678, 682, 685, 686, 694, 698, 720, 722, 724, 730, 731, 733, 734, 736, 738, 743], "includ": [0, 2, 5, 8, 9, 10, 14, 19, 22, 23, 26, 28, 31, 32, 33, 37, 42, 45, 46, 76, 77, 78, 92, 93, 95, 101, 174, 198, 202, 203, 204, 207, 209, 212, 220, 228, 241, 246, 260, 263, 264, 269, 271, 273, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 297, 298, 303, 309, 312, 321, 327, 328, 329, 354, 357, 359, 391, 392, 394, 397, 399, 401, 404, 422, 424, 425, 433, 437, 439, 440, 442, 467, 521, 537, 540, 542, 545, 549, 551, 552, 555, 556, 577, 598, 600, 624, 647, 651, 666, 667, 668, 669, 670, 671, 672, 673, 674, 681, 682, 685, 696, 700, 703, 710, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 730, 731, 732, 733, 734, 736, 738, 745, 746, 750, 751, 753, 755, 758, 759, 760], "creation": [0, 9, 26, 32, 52, 717, 720, 721, 726, 728, 731, 732, 733, 734, 738, 753, 755, 759], "constant": [0, 9, 16, 17, 32, 39, 40, 49, 311, 312, 375, 400, 547, 549, 550, 607, 630, 643, 681, 683, 684, 685, 700, 727, 732, 734, 742, 743, 746], "appear": [0, 312, 391, 392, 522, 542, 711, 712, 714, 731, 736], "whether": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 75, 77, 78, 89, 91, 96, 98, 103, 106, 107, 109, 112, 113, 114, 115, 116, 117, 120, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 134, 146, 150, 151, 153, 154, 156, 158, 161, 162, 164, 167, 168, 170, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 253, 254, 256, 257, 259, 270, 274, 275, 276, 278, 280, 286, 287, 293, 295, 297, 298, 299, 303, 306, 309, 310, 311, 312, 321, 327, 328, 329, 331, 332, 333, 334, 350, 364, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 385, 386, 388, 390, 391, 392, 395, 399, 406, 408, 409, 412, 414, 416, 417, 418, 419, 421, 434, 435, 436, 437, 443, 446, 447, 449, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 481, 485, 486, 487, 488, 490, 493, 494, 496, 497, 499, 500, 501, 503, 505, 507, 508, 515, 516, 519, 521, 524, 525, 527, 529, 530, 531, 532, 534, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 551, 555, 556, 558, 559, 560, 561, 567, 568, 571, 572, 573, 578, 579, 580, 581, 582, 583, 584, 586, 588, 590, 591, 597, 602, 603, 604, 605, 608, 609, 610, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 630, 631, 632, 634, 635, 636, 637, 641, 642, 644, 645, 646, 647, 649, 652, 655, 656, 657, 658, 659, 663, 664, 667, 669, 670, 672, 673, 674, 678, 679, 682, 683, 684, 685, 686, 694, 700, 705, 710, 711, 715, 718, 720, 722, 726, 730, 731, 733, 735, 736], "appli": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 78, 84, 86, 88, 89, 91, 93, 94, 95, 96, 98, 99, 100, 103, 107, 108, 109, 122, 126, 127, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 306, 307, 309, 310, 311, 312, 315, 321, 323, 324, 325, 327, 328, 329, 330, 332, 333, 334, 336, 340, 341, 342, 344, 345, 346, 347, 351, 353, 354, 355, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 449, 450, 453, 454, 455, 456, 457, 458, 461, 462, 465, 467, 469, 470, 471, 473, 474, 475, 477, 478, 480, 485, 486, 500, 501, 502, 503, 505, 507, 508, 521, 523, 524, 527, 529, 530, 531, 532, 534, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 555, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 583, 584, 586, 588, 589, 590, 591, 593, 597, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 630, 633, 636, 637, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 678, 682, 685, 700, 705, 707, 710, 711, 712, 715, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 733, 734, 736, 740, 741, 742, 743, 744, 746, 748, 754], "nativ": [0, 2, 4, 5, 7, 10, 27, 30, 33, 51, 55, 95, 104, 105, 111, 112, 113, 114, 115, 116, 130, 133, 148, 149, 150, 151, 161, 169, 173, 471, 473, 477, 484, 489, 506, 537, 538, 539, 542, 679, 691, 700, 708, 710, 716, 720, 721, 724, 727, 728, 730, 731, 732, 733, 738, 740, 741, 748, 751, 760], "e": [0, 5, 9, 14, 18, 20, 21, 22, 24, 31, 32, 37, 41, 44, 45, 47, 49, 51, 84, 93, 94, 97, 98, 101, 105, 134, 147, 174, 175, 176, 180, 182, 183, 186, 188, 190, 194, 195, 197, 200, 201, 207, 208, 215, 216, 217, 218, 225, 226, 227, 228, 230, 232, 234, 236, 237, 240, 241, 245, 251, 269, 303, 309, 310, 316, 321, 327, 328, 331, 345, 346, 347, 348, 361, 367, 420, 421, 422, 423, 424, 435, 436, 535, 537, 538, 539, 540, 544, 545, 547, 549, 551, 553, 554, 555, 570, 573, 578, 579, 583, 584, 586, 589, 592, 593, 594, 597, 600, 608, 616, 627, 631, 632, 633, 636, 641, 642, 645, 646, 647, 655, 656, 657, 658, 659, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 682, 694, 700, 703, 704, 705, 706, 708, 710, 711, 712, 713, 714, 716, 718, 720, 724, 729, 731, 733, 738, 741, 746, 747, 748, 749], "tf": [0, 2, 700, 715, 716, 720, 721, 726, 730, 731, 733, 734, 736, 738, 743, 746, 748, 753], "after": [0, 2, 9, 10, 11, 13, 17, 26, 32, 33, 34, 36, 40, 140, 241, 293, 306, 309, 310, 312, 331, 332, 333, 334, 351, 367, 389, 400, 471, 524, 527, 529, 530, 531, 538, 540, 542, 543, 544, 549, 550, 557, 558, 559, 560, 562, 564, 566, 567, 635, 643, 686, 691, 700, 706, 710, 711, 712, 714, 716, 717, 719, 720, 722, 724, 726, 729, 732, 733, 737, 747, 753], "union": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 77, 78, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 160, 161, 162, 163, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 317, 319, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 449, 450, 454, 455, 456, 458, 461, 462, 463, 464, 465, 467, 469, 470, 471, 473, 474, 477, 478, 480, 481, 485, 486, 490, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 534, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 631, 632, 633, 634, 635, 636, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 681, 686, 687, 715, 718, 720, 721, 722, 724, 726, 727, 730, 734, 736, 738, 743], "int": [0, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 55, 62, 66, 67, 77, 78, 87, 89, 90, 91, 92, 93, 96, 99, 100, 101, 108, 115, 118, 119, 122, 129, 144, 158, 159, 160, 167, 168, 177, 184, 185, 186, 187, 188, 189, 201, 204, 228, 237, 243, 246, 250, 257, 258, 259, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 272, 278, 279, 281, 285, 292, 294, 296, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 317, 319, 321, 323, 324, 325, 327, 328, 329, 330, 331, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 354, 358, 360, 361, 363, 366, 368, 369, 371, 372, 375, 378, 379, 383, 385, 386, 389, 390, 393, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 432, 434, 435, 436, 437, 439, 440, 441, 442, 444, 454, 455, 456, 458, 461, 462, 465, 480, 483, 485, 500, 501, 502, 506, 522, 523, 524, 525, 526, 529, 534, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 573, 575, 576, 584, 585, 595, 597, 598, 599, 600, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 627, 630, 631, 633, 635, 636, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 655, 659, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 681, 682, 694, 718, 720, 721, 722, 724, 726, 727, 730, 732, 733, 734, 736, 738, 743], "iter": [0, 4, 9, 10, 16, 24, 26, 32, 33, 39, 47, 52, 72, 73, 75, 167, 265, 266, 303, 310, 312, 360, 369, 372, 400, 443, 481, 536, 539, 542, 547, 549, 607, 611, 618, 620, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 639, 640, 642, 694, 704, 714, 716, 718, 738, 741], "For": [0, 1, 5, 9, 14, 20, 32, 37, 76, 94, 174, 175, 176, 177, 179, 180, 181, 182, 183, 190, 191, 192, 194, 195, 197, 199, 200, 201, 208, 209, 210, 215, 216, 217, 218, 219, 222, 227, 229, 230, 232, 236, 237, 238, 239, 240, 241, 244, 245, 247, 271, 272, 276, 295, 303, 306, 310, 312, 366, 368, 382, 400, 403, 537, 540, 545, 547, 553, 555, 591, 593, 597, 605, 616, 655, 656, 657, 658, 666, 668, 669, 671, 679, 702, 703, 704, 706, 710, 711, 712, 713, 715, 716, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 730, 731, 732, 733, 734, 736, 738, 740, 741, 742, 743, 745, 746, 750, 751, 754, 759, 760], "jax": [0, 2, 3, 8, 9, 10, 20, 25, 31, 33, 59, 61, 64, 67, 245, 285, 306, 321, 442, 471, 503, 522, 534, 540, 542, 553, 655, 656, 657, 658, 678, 691, 700, 703, 704, 708, 709, 710, 711, 712, 714, 716, 720, 721, 724, 726, 729, 730, 731, 732, 733, 734, 736, 738, 740, 743, 746, 754, 756, 759, 760], "jit": [0, 738, 746, 753], "tupl": [0, 2, 4, 5, 6, 8, 9, 10, 13, 14, 16, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 77, 78, 89, 91, 95, 96, 98, 101, 103, 107, 108, 109, 120, 121, 122, 126, 127, 133, 134, 140, 150, 153, 154, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 253, 254, 256, 257, 259, 262, 266, 269, 274, 275, 276, 278, 279, 280, 281, 282, 284, 285, 286, 287, 291, 292, 293, 294, 295, 297, 298, 299, 300, 303, 306, 308, 309, 310, 312, 315, 316, 317, 319, 321, 327, 328, 329, 331, 332, 333, 334, 336, 341, 342, 345, 346, 347, 348, 350, 351, 352, 357, 358, 360, 364, 369, 370, 371, 372, 373, 374, 376, 377, 380, 381, 382, 383, 385, 395, 400, 406, 408, 409, 411, 414, 416, 417, 418, 419, 421, 422, 424, 425, 426, 434, 435, 436, 437, 439, 440, 441, 443, 446, 447, 449, 450, 454, 455, 456, 458, 459, 460, 461, 462, 464, 465, 467, 469, 470, 471, 473, 474, 477, 485, 486, 490, 500, 501, 502, 503, 505, 506, 507, 508, 521, 522, 523, 524, 525, 527, 529, 532, 536, 537, 538, 539, 540, 542, 543, 544, 545, 547, 548, 549, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 593, 595, 596, 597, 600, 602, 603, 604, 605, 606, 607, 609, 610, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 644, 645, 646, 647, 649, 652, 653, 655, 656, 657, 658, 659, 660, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 681, 682, 684, 694, 715, 720, 726, 727, 730, 732, 733, 738, 741, 742, 746], "dict": [0, 2, 4, 10, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 89, 91, 96, 98, 103, 107, 109, 120, 121, 122, 126, 127, 134, 150, 153, 154, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 252, 253, 254, 256, 257, 259, 274, 275, 276, 278, 280, 286, 287, 293, 295, 297, 298, 299, 312, 331, 332, 333, 334, 373, 374, 376, 377, 380, 381, 382, 385, 400, 406, 408, 409, 414, 416, 417, 418, 419, 421, 434, 435, 436, 437, 443, 444, 446, 447, 449, 450, 454, 455, 456, 458, 459, 460, 461, 462, 465, 467, 469, 470, 471, 473, 474, 477, 481, 485, 486, 500, 501, 503, 505, 507, 508, 521, 532, 538, 539, 542, 549, 558, 559, 560, 561, 567, 568, 571, 572, 573, 578, 579, 580, 581, 583, 584, 586, 588, 590, 591, 597, 602, 603, 604, 605, 609, 612, 613, 614, 615, 616, 619, 620, 624, 625, 627, 630, 631, 632, 633, 635, 636, 637, 641, 642, 644, 645, 646, 647, 649, 652, 655, 656, 657, 658, 659, 663, 664, 667, 669, 670, 672, 673, 674, 679, 682, 684, 691, 715, 718, 741, 742, 748], "return": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 140, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 319, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 489, 490, 491, 492, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 679, 680, 681, 682, 684, 686, 691, 694, 695, 696, 697, 700, 711, 712, 715, 718, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 741, 742, 743, 746, 754], "type": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 317, 319, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 485, 486, 489, 490, 491, 492, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 681, 682, 684, 688, 691, 694, 695, 698, 700, 706, 710, 711, 712, 713, 714, 715, 718, 721, 722, 723, 724, 726, 728, 730, 732, 733, 734, 736, 738, 740, 741, 753, 754, 757], "lazygraph": [0, 2], "modul": [0, 24, 26, 47, 52, 302, 304, 305, 313, 314, 318, 322, 482, 542, 678, 679, 680, 682, 683, 685, 687, 690, 691, 700, 704, 707, 711, 715, 716, 717, 724, 727, 730, 731, 733, 738, 739, 741, 743, 745, 746, 753, 754, 756], "moduletyp": [0, 2], "A": [0, 1, 2, 5, 6, 9, 10, 16, 18, 22, 23, 26, 29, 31, 32, 33, 36, 37, 39, 41, 43, 46, 49, 52, 72, 73, 75, 87, 95, 101, 107, 148, 167, 229, 231, 235, 259, 269, 271, 272, 274, 284, 287, 291, 292, 303, 306, 309, 310, 312, 315, 316, 321, 337, 351, 358, 367, 376, 385, 388, 406, 409, 414, 415, 416, 417, 420, 421, 422, 423, 424, 432, 441, 442, 446, 448, 469, 470, 500, 501, 502, 505, 533, 536, 537, 538, 539, 540, 542, 543, 544, 545, 547, 549, 551, 555, 556, 567, 576, 578, 581, 582, 587, 588, 592, 593, 605, 608, 610, 614, 616, 624, 627, 629, 631, 632, 633, 634, 635, 639, 640, 641, 642, 644, 645, 646, 647, 649, 655, 665, 673, 674, 680, 681, 698, 700, 701, 702, 703, 704, 709, 710, 711, 713, 718, 720, 721, 724, 726, 727, 731, 732, 733, 738, 741, 746, 748, 753, 754], "non": [0, 2, 6, 8, 9, 14, 18, 19, 22, 23, 29, 31, 32, 37, 41, 42, 45, 46, 89, 106, 124, 133, 202, 222, 223, 228, 278, 283, 296, 306, 310, 312, 321, 358, 360, 364, 381, 382, 437, 440, 537, 538, 540, 545, 549, 551, 552, 555, 556, 573, 574, 584, 586, 593, 595, 599, 600, 637, 646, 650, 651, 652, 653, 666, 667, 668, 669, 670, 672, 673, 674, 681, 683, 684, 686, 715, 718, 720, 722, 738, 753], "initi": [0, 2, 9, 13, 26, 32, 36, 52, 310, 360, 369, 372, 544, 569, 679, 680, 682, 683, 684, 686, 687, 700, 703, 712, 716, 720, 721, 732, 733, 738, 753, 759, 760], "object": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 55, 56, 84, 88, 89, 110, 119, 122, 130, 133, 168, 226, 421, 525, 537, 538, 539, 543, 549, 551, 627, 628, 629, 631, 632, 633, 639, 640, 641, 642, 649, 679, 682, 683, 684, 691, 694, 700, 715, 716, 718, 719, 727, 728, 731, 732, 733, 736, 740, 743, 753, 759], "forward": [0, 9, 32, 309, 331, 336, 337, 341, 342, 352, 679, 681, 683, 684, 686, 700, 711, 716, 723, 729, 733, 734, 736, 743, 745, 746, 753, 754], "pass": [0, 2, 8, 9, 24, 26, 31, 32, 47, 52, 72, 73, 75, 111, 133, 148, 167, 182, 228, 312, 315, 316, 321, 390, 414, 416, 420, 440, 441, 471, 536, 538, 539, 540, 542, 548, 621, 622, 679, 683, 684, 686, 687, 691, 694, 698, 700, 708, 710, 712, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 736, 746, 751], "same": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 16, 18, 20, 21, 22, 26, 28, 29, 31, 32, 33, 34, 36, 37, 39, 41, 43, 45, 49, 50, 51, 65, 76, 86, 91, 93, 94, 96, 98, 99, 100, 101, 103, 106, 107, 108, 119, 122, 167, 174, 175, 176, 177, 179, 181, 185, 187, 190, 194, 200, 201, 207, 227, 229, 231, 234, 236, 237, 238, 247, 251, 259, 268, 269, 270, 271, 272, 276, 282, 298, 301, 303, 306, 309, 310, 312, 315, 317, 319, 321, 327, 328, 329, 345, 346, 347, 348, 350, 351, 352, 357, 360, 361, 369, 370, 371, 372, 384, 385, 400, 408, 414, 416, 425, 427, 432, 433, 434, 435, 436, 437, 438, 442, 478, 532, 537, 538, 539, 540, 542, 543, 544, 545, 547, 548, 549, 551, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 574, 576, 577, 578, 579, 581, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 597, 599, 606, 609, 610, 612, 613, 615, 616, 621, 622, 637, 647, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 682, 694, 700, 702, 704, 706, 711, 712, 715, 716, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 738, 740, 742, 743, 746, 750, 752, 759, 760], "copi": [0, 2, 5, 6, 7, 8, 9, 10, 16, 26, 28, 29, 30, 31, 32, 33, 39, 49, 50, 77, 78, 84, 88, 106, 168, 228, 312, 378, 380, 381, 382, 386, 388, 390, 391, 392, 395, 399, 406, 412, 464, 490, 500, 507, 508, 537, 538, 539, 540, 542, 547, 549, 554, 608, 609, 610, 612, 614, 615, 617, 619, 625, 660, 662, 711, 712, 714, 716, 719, 720, 723, 731, 732, 738, 745, 746], "everi": [0, 2, 5, 9, 10, 32, 33, 90, 91, 251, 285, 301, 306, 309, 312, 345, 346, 347, 411, 443, 537, 542, 706, 710, 712, 714, 716, 717, 719, 720, 722, 725, 726, 727, 728, 730, 731, 732, 733, 738, 740, 742, 753], "method": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 93, 94, 95, 96, 98, 99, 100, 103, 106, 107, 108, 109, 119, 122, 126, 127, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 310, 311, 321, 327, 328, 329, 330, 332, 333, 334, 336, 340, 341, 342, 345, 346, 347, 351, 353, 354, 355, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 449, 450, 451, 453, 454, 455, 456, 457, 458, 461, 462, 465, 467, 469, 470, 471, 473, 474, 475, 477, 478, 480, 485, 486, 500, 501, 502, 503, 505, 507, 508, 521, 523, 524, 527, 529, 530, 531, 532, 537, 538, 540, 542, 543, 546, 549, 552, 555, 556, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 583, 584, 586, 587, 588, 589, 590, 591, 593, 597, 598, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 635, 636, 637, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 680, 681, 682, 683, 684, 710, 712, 714, 715, 716, 719, 720, 721, 722, 723, 726, 733, 734, 738, 739, 742, 743, 746, 754, 760], "To": [0, 1, 2, 201, 311, 375, 495, 540, 542, 681, 706, 710, 711, 714, 715, 716, 717, 720, 722, 724, 725, 727, 728, 731, 732, 733, 734, 741, 742, 743], "you": [0, 1, 2, 9, 10, 32, 33, 49, 51, 52, 312, 321, 388, 441, 461, 462, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 570, 678, 679, 681, 682, 684, 685, 686, 687, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 753], "need": [0, 1, 2, 9, 10, 16, 32, 33, 39, 309, 310, 321, 331, 336, 337, 341, 357, 441, 449, 450, 471, 542, 544, 545, 547, 549, 570, 577, 605, 608, 635, 700, 704, 706, 707, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 734, 736, 738, 740, 741, 745, 746, 749, 753, 754, 755, 759], "correspond": [0, 2, 6, 8, 9, 10, 13, 16, 19, 20, 22, 26, 29, 31, 32, 36, 39, 45, 49, 52, 107, 119, 122, 182, 232, 246, 271, 281, 282, 303, 306, 309, 310, 312, 315, 321, 331, 337, 348, 352, 354, 357, 358, 359, 391, 392, 405, 414, 415, 416, 435, 436, 500, 522, 538, 540, 542, 544, 545, 547, 551, 552, 553, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 570, 573, 577, 578, 584, 591, 592, 612, 613, 644, 650, 651, 655, 656, 657, 658, 663, 664, 669, 670, 671, 672, 694, 700, 710, 712, 715, 716, 718, 719, 720, 722, 723, 724, 726, 727, 729, 731, 733, 736, 738, 753], "input": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 75, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 122, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 148, 150, 151, 164, 167, 168, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 303, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 319, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 365, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 384, 385, 386, 388, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 454, 455, 456, 457, 458, 461, 462, 464, 465, 467, 469, 470, 471, 473, 474, 475, 476, 477, 478, 480, 485, 486, 487, 493, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 515, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 630, 631, 632, 633, 635, 636, 637, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 678, 681, 682, 684, 685, 694, 714, 715, 716, 718, 720, 721, 722, 723, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 741, 742, 743, 746, 754, 757], "let": [0, 2, 10, 22, 33, 174, 175, 176, 177, 180, 183, 192, 195, 197, 199, 208, 209, 210, 215, 217, 230, 238, 240, 241, 245, 461, 462, 540, 542, 545, 555, 597, 667, 669, 670, 671, 672, 700, 704, 706, 710, 715, 717, 718, 720, 721, 722, 723, 724, 731, 732, 733, 734, 735, 736, 738, 740, 741, 742, 743, 760], "start": [0, 1, 2, 5, 9, 26, 28, 32, 36, 76, 89, 92, 93, 289, 299, 306, 307, 309, 312, 351, 390, 393, 401, 403, 410, 537, 680, 694, 700, 705, 706, 710, 711, 712, 713, 719, 720, 722, 723, 725, 726, 731, 733, 736, 737, 738, 740, 741, 742, 745, 746, 753, 759], "simpl": [0, 2, 9, 32, 321, 434, 682, 700, 702, 710, 711, 712, 715, 717, 718, 720, 721, 722, 723, 727, 730, 731, 733, 734, 736, 740, 742, 743, 746, 748, 752, 753, 754, 755], "import": [0, 1, 2, 9, 20, 24, 28, 32, 47, 148, 149, 153, 163, 165, 321, 434, 539, 548, 553, 623, 658, 691, 700, 703, 706, 709, 710, 711, 712, 714, 715, 716, 717, 718, 720, 721, 722, 723, 725, 728, 729, 730, 731, 732, 733, 734, 738, 740, 741, 743, 746, 749, 751, 753, 756, 757, 759], "set_backend": [0, 2, 8, 10, 24, 31, 33, 121, 130, 148, 149, 163, 165, 178, 447, 471, 538, 539, 542, 548, 623, 691, 700, 714, 716, 720, 721, 727, 728, 729, 738, 740, 743], "torch": [0, 2, 5, 10, 14, 24, 33, 37, 84, 121, 148, 149, 163, 165, 237, 447, 471, 503, 537, 538, 539, 540, 542, 545, 548, 593, 623, 679, 691, 700, 708, 711, 712, 714, 715, 716, 717, 719, 720, 721, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 738, 740, 741, 743, 746, 748, 759], "def": [0, 2, 8, 31, 72, 178, 448, 536, 542, 548, 549, 623, 630, 694, 700, 710, 711, 714, 715, 718, 720, 721, 722, 724, 726, 727, 729, 730, 731, 732, 733, 734, 736, 738, 740, 741, 742, 743], "fn": [0, 9, 26, 29, 32, 55, 79, 80, 81, 82, 83, 120, 121, 153, 154, 157, 312, 379, 444, 459, 460, 509, 537, 538, 539, 542, 549, 630, 631, 632, 634, 635, 636, 688, 691, 695, 696, 698, 721, 724, 730, 731, 738], "x": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 73, 76, 77, 78, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 126, 127, 129, 134, 150, 151, 155, 160, 161, 162, 166, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 269, 270, 273, 275, 276, 278, 279, 280, 281, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 319, 320, 321, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 383, 385, 387, 388, 390, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 461, 462, 463, 464, 465, 467, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 490, 491, 492, 495, 498, 499, 500, 501, 502, 503, 505, 507, 508, 509, 521, 522, 524, 525, 526, 528, 532, 533, 534, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 597, 598, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 627, 630, 631, 632, 633, 634, 635, 636, 641, 642, 643, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 685, 688, 691, 694, 698, 700, 710, 715, 716, 718, 720, 721, 722, 723, 724, 726, 727, 729, 730, 731, 732, 733, 734, 736, 738, 740, 741, 742, 743], "y": [0, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 84, 87, 89, 91, 92, 93, 94, 95, 96, 97, 98, 103, 106, 107, 108, 117, 119, 122, 134, 147, 151, 155, 160, 161, 162, 166, 168, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 210, 211, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 254, 255, 256, 257, 259, 274, 280, 286, 287, 288, 289, 290, 295, 297, 299, 301, 303, 306, 309, 310, 311, 312, 315, 321, 328, 330, 332, 333, 337, 340, 342, 346, 354, 358, 362, 367, 373, 374, 375, 376, 377, 385, 387, 396, 400, 408, 409, 413, 417, 418, 419, 427, 433, 434, 435, 436, 437, 440, 442, 443, 446, 449, 450, 453, 454, 456, 457, 458, 461, 462, 463, 467, 469, 470, 471, 473, 474, 477, 478, 483, 490, 491, 492, 495, 498, 499, 500, 501, 503, 505, 507, 508, 509, 513, 514, 517, 520, 521, 522, 532, 534, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 559, 561, 563, 566, 567, 568, 572, 573, 574, 578, 579, 580, 581, 583, 584, 586, 587, 588, 589, 591, 593, 594, 595, 597, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 624, 627, 630, 631, 633, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 698, 700, 716, 718, 721, 722, 729, 731, 732, 733, 734, 736, 738, 740], "z": [0, 5, 8, 9, 10, 14, 15, 18, 20, 22, 28, 31, 32, 33, 37, 38, 39, 41, 45, 51, 52, 92, 93, 95, 96, 155, 177, 178, 182, 184, 187, 189, 194, 205, 206, 209, 210, 211, 213, 214, 219, 221, 223, 224, 225, 226, 234, 243, 250, 251, 276, 301, 306, 311, 321, 373, 374, 375, 376, 377, 383, 385, 396, 433, 434, 437, 442, 446, 458, 461, 462, 469, 470, 486, 499, 500, 501, 509, 522, 537, 539, 540, 542, 545, 546, 547, 549, 551, 552, 553, 555, 573, 583, 588, 589, 593, 600, 602, 603, 604, 605, 627, 631, 633, 641, 645, 646, 647, 650, 655, 665, 666, 668, 669, 670, 681, 700, 716, 718, 721, 722, 738, 740], "k": [0, 5, 9, 13, 14, 18, 28, 31, 32, 36, 37, 41, 49, 72, 87, 99, 100, 101, 221, 259, 269, 270, 303, 310, 312, 316, 319, 321, 355, 366, 406, 409, 420, 421, 422, 423, 424, 427, 437, 446, 536, 537, 542, 544, 545, 549, 551, 552, 571, 575, 583, 584, 590, 592, 593, 594, 597, 632, 645, 646, 647, 653, 700, 713, 714, 731, 732, 738, 749, 753], "j": [0, 5, 8, 9, 14, 22, 28, 31, 32, 37, 49, 75, 96, 175, 176, 177, 178, 180, 183, 192, 194, 197, 199, 207, 215, 217, 221, 227, 238, 240, 241, 244, 245, 276, 306, 309, 310, 321, 336, 337, 341, 352, 353, 357, 359, 366, 442, 446, 536, 537, 540, 542, 545, 555, 577, 597, 665, 712, 713, 717, 749], "concat": [0, 10, 16, 26, 39, 167, 458, 539, 542, 547, 620, 732, 736, 738], "sum_j": 0, "sum": [0, 2, 8, 9, 10, 13, 14, 15, 22, 26, 31, 32, 33, 36, 37, 38, 45, 49, 51, 52, 167, 177, 219, 243, 272, 292, 303, 306, 310, 311, 321, 351, 356, 373, 374, 375, 376, 377, 440, 441, 455, 485, 486, 539, 540, 542, 544, 545, 546, 555, 567, 571, 584, 593, 597, 600, 602, 603, 604, 664, 665, 681, 683, 694, 700, 718, 720, 727, 729, 730, 731, 738], "1": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 59, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 77, 78, 84, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 103, 106, 107, 108, 109, 113, 117, 118, 119, 122, 127, 129, 134, 150, 151, 155, 159, 160, 162, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 269, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 317, 319, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 369, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 449, 450, 453, 454, 455, 456, 457, 458, 461, 462, 463, 464, 465, 467, 469, 470, 471, 473, 474, 475, 477, 478, 480, 481, 483, 485, 486, 490, 499, 500, 501, 502, 503, 505, 507, 508, 509, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 627, 628, 630, 631, 632, 633, 635, 636, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 678, 680, 681, 682, 683, 684, 685, 686, 687, 691, 694, 700, 703, 704, 708, 711, 712, 714, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 729, 730, 731, 732, 733, 736, 737, 738, 740, 741, 742, 743, 746], "2": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 59, 61, 62, 63, 64, 65, 66, 67, 68, 73, 75, 76, 77, 78, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 103, 106, 107, 108, 109, 113, 117, 119, 127, 129, 134, 150, 151, 152, 155, 158, 160, 162, 165, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 262, 265, 266, 269, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 319, 321, 324, 325, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 362, 365, 367, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 390, 391, 392, 394, 395, 396, 397, 399, 400, 405, 406, 407, 408, 409, 411, 412, 413, 417, 418, 419, 422, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 461, 462, 463, 464, 465, 467, 469, 470, 471, 473, 474, 475, 477, 478, 480, 481, 483, 485, 486, 490, 499, 500, 501, 502, 503, 505, 509, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 627, 628, 630, 631, 632, 633, 635, 636, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 678, 681, 682, 691, 694, 700, 708, 711, 712, 714, 716, 717, 718, 719, 720, 722, 724, 726, 727, 729, 730, 731, 732, 733, 737, 738, 740, 741, 742, 743, 746, 759, 760], "3": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 18, 19, 20, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 75, 76, 77, 78, 87, 89, 91, 92, 94, 95, 96, 97, 98, 101, 102, 103, 106, 107, 108, 109, 113, 117, 119, 127, 129, 134, 148, 150, 151, 162, 165, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 269, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 317, 319, 321, 327, 328, 329, 330, 332, 335, 336, 337, 340, 341, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 362, 367, 372, 373, 374, 376, 378, 380, 381, 382, 383, 384, 385, 386, 387, 390, 391, 392, 394, 395, 396, 397, 399, 400, 405, 406, 407, 408, 409, 411, 412, 413, 417, 418, 419, 422, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 446, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 461, 462, 465, 467, 469, 470, 471, 473, 474, 475, 477, 478, 480, 481, 485, 486, 499, 500, 501, 505, 508, 509, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 591, 593, 594, 595, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 624, 625, 627, 628, 630, 631, 632, 633, 635, 636, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 694, 700, 710, 711, 714, 715, 716, 718, 719, 720, 722, 724, 727, 729, 732, 733, 738, 740, 741, 742, 743, 760], "4": [0, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 59, 60, 61, 62, 63, 64, 66, 67, 75, 76, 77, 78, 84, 87, 89, 91, 92, 93, 94, 95, 96, 98, 101, 103, 107, 108, 109, 117, 119, 122, 127, 129, 134, 151, 152, 160, 165, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 254, 255, 256, 257, 258, 259, 261, 265, 266, 269, 276, 278, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 295, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 317, 319, 321, 327, 328, 329, 330, 332, 333, 335, 336, 337, 340, 341, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 362, 364, 373, 374, 376, 378, 380, 381, 382, 384, 385, 386, 387, 390, 391, 392, 395, 396, 397, 399, 400, 405, 406, 407, 408, 409, 411, 412, 413, 417, 418, 419, 422, 424, 425, 427, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 449, 450, 453, 454, 455, 456, 458, 461, 462, 464, 467, 469, 470, 471, 478, 485, 486, 500, 501, 502, 503, 505, 509, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 591, 593, 594, 595, 597, 598, 600, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 627, 628, 630, 631, 632, 633, 635, 636, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 681, 682, 686, 694, 700, 704, 708, 710, 711, 716, 717, 718, 719, 720, 722, 729, 732, 733, 736, 738, 740, 741, 742, 743, 753, 759, 760], "compiled_fn": 0, "In": [0, 2, 7, 9, 10, 16, 30, 33, 39, 49, 161, 168, 169, 173, 177, 194, 195, 201, 209, 210, 227, 230, 236, 238, 309, 312, 315, 332, 333, 334, 380, 381, 382, 386, 388, 390, 391, 392, 393, 395, 399, 406, 412, 414, 416, 444, 464, 471, 489, 539, 540, 542, 545, 547, 551, 591, 608, 609, 610, 612, 614, 615, 617, 619, 647, 700, 702, 704, 706, 710, 711, 712, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 740, 741, 742, 743, 745, 746, 749, 751, 753, 754, 756, 759], "case": [0, 2, 4, 5, 9, 10, 16, 22, 26, 28, 32, 33, 39, 49, 52, 78, 94, 120, 121, 148, 153, 154, 161, 169, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 202, 208, 209, 210, 215, 216, 217, 218, 219, 222, 227, 230, 232, 236, 237, 238, 239, 240, 241, 244, 245, 247, 283, 285, 295, 306, 309, 312, 315, 316, 332, 333, 334, 380, 381, 382, 386, 388, 390, 391, 392, 395, 399, 406, 412, 414, 416, 422, 464, 471, 485, 486, 487, 537, 538, 539, 540, 542, 545, 547, 549, 555, 591, 597, 608, 609, 610, 612, 614, 615, 617, 619, 627, 633, 666, 667, 668, 669, 670, 671, 672, 683, 684, 686, 700, 703, 708, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 736, 738, 740, 742, 743, 746, 752, 756], "would": [0, 1, 5, 7, 9, 28, 30, 32, 39, 62, 66, 78, 168, 309, 312, 336, 341, 380, 381, 386, 388, 390, 391, 392, 399, 403, 412, 534, 539, 608, 609, 610, 612, 614, 615, 617, 619, 700, 703, 705, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 722, 723, 726, 728, 730, 731, 732, 733, 734, 736, 737, 738, 740, 742, 743, 746, 753, 759], "can": [0, 1, 2, 5, 6, 9, 10, 14, 16, 18, 20, 28, 29, 32, 33, 37, 39, 41, 43, 49, 61, 64, 77, 78, 93, 95, 109, 148, 165, 166, 167, 252, 255, 301, 309, 310, 315, 316, 319, 321, 331, 344, 361, 366, 368, 371, 385, 414, 421, 422, 427, 434, 478, 489, 522, 525, 534, 537, 538, 539, 542, 543, 544, 545, 547, 551, 570, 576, 583, 593, 597, 612, 616, 645, 646, 647, 655, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 750, 751, 752, 753, 754, 756, 757, 759, 760], "observ": [0, 9, 32, 321, 433, 434, 712, 724, 738, 755], "As": [0, 2, 20, 24, 47, 553, 655, 656, 657, 658, 700, 702, 710, 711, 712, 715, 717, 718, 719, 720, 721, 724, 725, 726, 727, 730, 731, 732, 733, 736, 740, 741, 742, 746, 753, 758], "variabl": [0, 1, 9, 10, 11, 17, 26, 32, 33, 34, 40, 72, 73, 75, 310, 316, 321, 370, 422, 433, 434, 447, 471, 472, 473, 474, 477, 503, 524, 525, 527, 529, 530, 531, 536, 542, 543, 545, 548, 550, 592, 621, 622, 623, 643, 679, 680, 681, 682, 683, 684, 685, 686, 687, 712, 716, 720, 723, 726, 729, 730, 733, 734, 738, 741, 742, 743, 746, 754], "calcul": [0, 8, 9, 10, 15, 22, 26, 31, 32, 33, 37, 38, 45, 52, 174, 175, 176, 177, 178, 179, 180, 181, 182, 191, 192, 194, 197, 198, 199, 215, 216, 217, 218, 219, 220, 225, 226, 227, 232, 239, 240, 241, 243, 244, 245, 285, 295, 306, 309, 310, 312, 315, 321, 327, 328, 329, 358, 400, 414, 416, 441, 478, 540, 542, 545, 546, 555, 579, 588, 591, 602, 603, 604, 666, 667, 668, 669, 670, 671, 672, 681, 682, 685, 703, 710, 723, 738], "valu": [0, 5, 6, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 25, 26, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 51, 52, 54, 67, 72, 73, 75, 76, 87, 90, 91, 92, 93, 96, 101, 106, 123, 127, 133, 166, 167, 174, 175, 176, 177, 179, 181, 182, 183, 190, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 248, 252, 257, 259, 265, 269, 271, 272, 274, 275, 276, 278, 279, 280, 281, 284, 285, 287, 288, 290, 293, 295, 296, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 320, 321, 331, 344, 351, 355, 358, 360, 364, 369, 370, 371, 372, 373, 374, 376, 384, 389, 394, 400, 405, 407, 408, 409, 411, 414, 416, 420, 421, 423, 424, 430, 432, 435, 436, 437, 440, 441, 442, 447, 449, 450, 451, 453, 458, 461, 462, 464, 466, 469, 470, 471, 478, 485, 486, 490, 491, 492, 495, 503, 508, 513, 514, 517, 520, 521, 522, 523, 524, 525, 529, 534, 536, 537, 538, 539, 540, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 575, 578, 579, 584, 585, 586, 589, 590, 591, 592, 593, 594, 597, 600, 605, 606, 607, 611, 612, 620, 621, 622, 626, 628, 629, 630, 631, 632, 637, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 680, 681, 682, 683, 684, 685, 686, 708, 711, 712, 714, 717, 718, 720, 721, 722, 723, 724, 726, 727, 730, 731, 733, 735, 736, 738, 740, 746, 753, 754], "wa": [0, 2, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 63, 64, 65, 66, 67, 89, 91, 96, 98, 103, 107, 109, 134, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 253, 254, 256, 257, 258, 259, 274, 275, 276, 278, 280, 286, 287, 293, 294, 295, 297, 298, 299, 303, 306, 332, 333, 334, 373, 374, 376, 377, 380, 381, 382, 385, 406, 408, 409, 414, 416, 417, 418, 419, 421, 434, 435, 436, 437, 443, 446, 447, 449, 450, 454, 455, 456, 458, 461, 462, 465, 467, 469, 470, 471, 473, 474, 477, 485, 486, 500, 501, 503, 505, 507, 508, 509, 521, 527, 532, 540, 542, 549, 555, 556, 558, 559, 560, 561, 567, 568, 571, 572, 573, 578, 579, 580, 581, 583, 584, 586, 588, 590, 591, 597, 602, 603, 604, 605, 609, 612, 613, 614, 615, 616, 619, 620, 637, 644, 645, 646, 647, 649, 652, 655, 656, 657, 658, 659, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 691, 700, 703, 708, 712, 714, 719, 722, 727, 729, 731, 738, 740, 752, 753, 755], "like": [0, 2, 5, 8, 9, 16, 28, 31, 32, 36, 39, 44, 93, 110, 133, 178, 198, 204, 207, 220, 238, 279, 282, 294, 306, 309, 310, 312, 319, 321, 351, 352, 357, 381, 382, 390, 426, 427, 442, 537, 538, 540, 545, 547, 551, 554, 577, 612, 647, 660, 700, 703, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 740, 741, 742, 743, 745, 746, 753, 758], "were": [0, 26, 29, 122, 126, 127, 201, 540, 712, 720, 724, 725, 729, 730, 732, 733, 734, 736, 738, 753, 754, 759], "exclud": [0, 22, 32, 45, 76, 101, 269, 303, 435, 436, 537, 551, 647, 663, 691, 722, 738], "process": [0, 161, 173, 539, 703, 704, 705, 711, 712, 717, 718, 719, 725, 727, 729, 731, 732, 733, 736, 738, 743, 751, 752, 753, 756, 757, 759, 760], "tensor": [0, 2, 5, 8, 9, 10, 13, 15, 16, 18, 26, 28, 31, 32, 33, 36, 37, 38, 39, 41, 48, 84, 92, 93, 96, 101, 117, 133, 225, 226, 252, 255, 267, 268, 269, 275, 296, 301, 303, 306, 309, 310, 311, 312, 321, 327, 328, 331, 335, 344, 345, 346, 347, 360, 361, 364, 366, 368, 369, 372, 376, 390, 393, 398, 401, 402, 403, 404, 407, 410, 440, 485, 486, 537, 538, 540, 542, 544, 545, 546, 547, 551, 567, 569, 570, 582, 595, 602, 612, 614, 644, 682, 691, 700, 702, 715, 716, 720, 721, 726, 727, 730, 731, 732, 733, 734, 736, 738, 740, 741, 743, 746, 748, 750, 751, 754, 756, 757, 760], "shape": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 78, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 162, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 262, 263, 264, 266, 267, 268, 269, 270, 275, 276, 277, 279, 282, 284, 286, 288, 289, 290, 291, 295, 296, 298, 301, 303, 306, 309, 310, 311, 312, 315, 316, 317, 319, 321, 323, 324, 325, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 341, 342, 344, 345, 346, 347, 350, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 385, 388, 393, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 432, 433, 434, 435, 436, 437, 449, 450, 454, 455, 456, 458, 461, 462, 465, 471, 478, 485, 486, 496, 504, 506, 518, 522, 523, 524, 527, 529, 530, 531, 532, 534, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 624, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 659, 660, 662, 663, 664, 665, 667, 669, 670, 672, 673, 674, 681, 682, 685, 694, 700, 712, 718, 720, 721, 722, 723, 724, 726, 730, 731, 732, 733, 734, 735, 738, 740, 741, 742, 743], "indic": [0, 5, 9, 10, 13, 14, 16, 17, 19, 20, 21, 26, 28, 29, 32, 33, 36, 37, 39, 40, 42, 43, 44, 49, 77, 78, 96, 99, 101, 122, 126, 127, 238, 269, 270, 285, 303, 306, 309, 310, 312, 317, 319, 327, 328, 329, 331, 335, 336, 337, 341, 342, 345, 346, 347, 348, 352, 358, 372, 380, 381, 382, 384, 386, 388, 390, 391, 392, 395, 399, 405, 406, 408, 409, 411, 412, 425, 426, 427, 446, 461, 462, 464, 485, 486, 490, 522, 525, 526, 537, 540, 542, 543, 544, 545, 547, 549, 550, 551, 552, 553, 554, 558, 560, 561, 562, 563, 566, 570, 586, 600, 608, 609, 610, 612, 613, 614, 615, 617, 619, 624, 627, 629, 631, 632, 633, 635, 639, 640, 641, 642, 643, 644, 650, 651, 652, 653, 655, 657, 659, 661, 662, 680, 682, 683, 684, 688, 694, 696, 719, 726, 729, 731, 743], "trace": [0, 2, 10, 14, 26, 33, 37, 473, 474, 477, 488, 497, 511, 519, 542, 545, 700, 714, 720, 735, 738, 746, 748, 754, 759], "doesn": [0, 471, 489, 542, 682, 711, 716, 718, 719, 720, 721, 722, 725, 727, 729, 733, 736, 738, 746, 751], "impos": 0, "addit": [0, 7, 9, 10, 17, 30, 32, 33, 40, 73, 75, 168, 177, 237, 321, 433, 438, 454, 455, 456, 522, 536, 539, 540, 542, 548, 550, 623, 643, 682, 710, 711, 712, 716, 720, 722, 723, 725, 727, 729, 730, 731, 733, 734, 736, 740, 741, 743, 753, 754, 755, 759], "restrict": [0, 718, 719, 731, 738, 750], "datatyp": [0, 5, 26, 28, 78, 91, 95, 111, 132, 136, 537, 538, 734], "out": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 106, 108, 117, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 303, 306, 309, 310, 311, 312, 315, 316, 317, 319, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 357, 361, 362, 363, 365, 366, 367, 368, 373, 374, 375, 376, 377, 383, 384, 385, 387, 388, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 449, 450, 454, 455, 456, 458, 461, 462, 471, 481, 485, 486, 523, 524, 527, 529, 530, 531, 532, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 620, 624, 643, 644, 645, 646, 647, 649, 650, 651, 652, 654, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 678, 679, 681, 682, 684, 685, 686, 687, 700, 702, 703, 704, 705, 706, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 729, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 745, 747, 753, 760], "differ": [0, 1, 2, 8, 9, 10, 14, 22, 26, 32, 33, 45, 51, 52, 61, 64, 119, 177, 194, 201, 202, 227, 243, 274, 279, 282, 283, 287, 306, 309, 310, 312, 321, 342, 352, 369, 372, 391, 392, 406, 435, 436, 442, 461, 462, 534, 538, 540, 542, 544, 545, 547, 555, 567, 568, 580, 591, 606, 616, 663, 664, 669, 671, 672, 684, 700, 702, 703, 704, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 729, 730, 731, 732, 733, 734, 736, 738, 739, 740, 741, 742, 743, 746, 750, 751, 752, 753, 756, 759, 760], "b": [0, 3, 8, 9, 10, 13, 14, 22, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 77, 78, 84, 89, 90, 91, 93, 96, 98, 103, 106, 107, 108, 109, 117, 127, 129, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 297, 298, 299, 301, 303, 306, 309, 310, 311, 312, 316, 319, 321, 327, 328, 329, 330, 332, 333, 336, 340, 341, 342, 345, 346, 347, 351, 356, 358, 362, 367, 372, 373, 374, 376, 380, 381, 382, 383, 385, 386, 387, 390, 391, 392, 394, 395, 396, 397, 399, 400, 406, 408, 409, 412, 413, 418, 419, 421, 422, 424, 425, 427, 434, 435, 436, 437, 439, 441, 442, 443, 446, 447, 449, 450, 453, 454, 455, 456, 457, 458, 461, 462, 465, 467, 469, 470, 471, 473, 474, 477, 478, 485, 486, 500, 501, 503, 507, 508, 521, 523, 524, 525, 527, 529, 531, 532, 534, 537, 538, 540, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 571, 572, 573, 574, 576, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 591, 592, 593, 594, 595, 597, 598, 600, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 624, 627, 630, 631, 632, 633, 635, 636, 641, 642, 643, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 694, 700, 701, 704, 705, 708, 712, 713, 714, 716, 718, 719, 722, 727, 729, 732, 737, 738, 739, 741, 742, 743, 744, 749], "new": [0, 1, 9, 10, 11, 16, 17, 26, 28, 32, 33, 34, 37, 39, 40, 85, 88, 90, 91, 96, 97, 98, 102, 103, 140, 183, 229, 231, 235, 274, 277, 287, 292, 306, 312, 321, 378, 385, 399, 405, 441, 454, 455, 456, 458, 461, 462, 464, 485, 486, 489, 491, 498, 500, 501, 507, 524, 527, 529, 530, 531, 537, 538, 540, 542, 543, 547, 549, 550, 580, 588, 608, 612, 616, 629, 641, 642, 643, 679, 682, 685, 686, 691, 700, 702, 703, 704, 705, 710, 711, 712, 713, 715, 716, 718, 719, 720, 722, 723, 725, 728, 730, 731, 732, 733, 734, 736, 737, 740, 743, 745, 748, 751, 755, 759, 760], "run": [0, 2, 9, 11, 32, 34, 315, 414, 416, 523, 524, 529, 543, 548, 621, 622, 623, 682, 683, 684, 685, 694, 700, 706, 707, 710, 711, 713, 715, 716, 719, 721, 722, 724, 725, 726, 728, 731, 732, 738, 739, 740, 741, 742, 743, 745, 746, 747, 751, 753, 754, 755, 756, 758, 759, 760], "under": [0, 2, 311, 375, 694, 700, 710, 711, 713, 714, 721, 722, 723, 725, 731, 732, 733, 736, 737, 738, 741, 743, 746, 753, 756, 760], "hood": [0, 2, 700, 713, 721, 722, 725, 731, 733, 736, 737, 738, 741, 743, 760], "track": [0, 549, 636, 680, 683, 684, 711, 712, 714, 729, 730, 753], "befor": [0, 2, 9, 13, 14, 16, 20, 22, 26, 32, 36, 37, 164, 167, 172, 309, 312, 321, 336, 341, 351, 391, 392, 393, 400, 435, 436, 539, 544, 545, 547, 548, 549, 553, 555, 557, 558, 559, 560, 562, 564, 566, 570, 571, 583, 600, 606, 621, 622, 636, 655, 656, 657, 658, 663, 664, 669, 671, 680, 691, 694, 710, 711, 712, 714, 715, 717, 720, 721, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 738, 741, 746, 753], "instead": [0, 2, 8, 9, 14, 31, 32, 37, 148, 236, 262, 303, 309, 321, 345, 346, 347, 434, 437, 539, 540, 545, 586, 710, 711, 712, 714, 717, 719, 720, 722, 723, 724, 726, 727, 728, 730, 731, 732, 733, 736, 738, 740, 741, 746, 751, 753, 759, 760], "allow": [0, 2, 9, 32, 92, 232, 321, 437, 441, 481, 537, 540, 542, 554, 661, 680, 683, 684, 698, 700, 703, 706, 710, 712, 715, 716, 719, 720, 724, 725, 727, 728, 729, 730, 731, 732, 733, 736, 738, 740, 746, 748, 751, 753, 757, 758], "dynam": [0, 547, 612, 691, 713, 719, 720, 721, 730, 731, 735, 738, 753, 757], "done": [0, 2, 545, 579, 709, 710, 711, 712, 714, 717, 719, 721, 722, 725, 730, 731, 733, 741, 753], "first": [0, 1, 2, 5, 8, 9, 14, 16, 18, 19, 20, 22, 28, 31, 32, 33, 37, 39, 41, 43, 45, 49, 51, 52, 72, 73, 92, 93, 101, 132, 140, 150, 177, 182, 184, 186, 187, 188, 189, 195, 201, 202, 203, 204, 205, 206, 212, 213, 214, 219, 220, 221, 223, 224, 227, 230, 232, 243, 244, 252, 258, 259, 269, 271, 272, 274, 283, 285, 286, 287, 293, 297, 298, 301, 303, 306, 309, 310, 311, 312, 319, 321, 331, 356, 357, 358, 362, 376, 386, 390, 397, 400, 402, 403, 406, 411, 421, 423, 427, 435, 436, 437, 442, 446, 536, 537, 538, 539, 540, 542, 544, 545, 547, 548, 549, 552, 553, 554, 555, 570, 573, 576, 577, 578, 580, 583, 588, 590, 591, 593, 595, 599, 612, 613, 616, 617, 621, 622, 623, 624, 625, 634, 635, 637, 649, 650, 651, 655, 656, 657, 660, 661, 663, 664, 681, 682, 683, 684, 686, 691, 700, 702, 703, 706, 707, 709, 710, 711, 712, 714, 715, 716, 717, 718, 721, 722, 725, 726, 727, 728, 730, 731, 733, 736, 738, 740, 741, 743, 751, 753, 754, 758], "invok": [0, 2, 9, 309, 331, 700, 725], "onc": [0, 1, 14, 18, 37, 41, 167, 310, 357, 539, 545, 551, 577, 578, 579, 593, 644, 704, 710, 711, 712, 718, 719, 720, 721, 722, 725, 730, 731, 733, 736, 738, 741, 746], "been": [0, 1, 9, 10, 18, 32, 33, 41, 150, 237, 312, 407, 454, 455, 456, 539, 540, 542, 551, 644, 694, 710, 712, 714, 716, 718, 719, 720, 721, 723, 724, 726, 727, 730, 733, 738, 740, 745, 746, 748, 753, 760], "directli": [0, 1, 2, 310, 361, 549, 636, 700, 704, 712, 714, 715, 718, 719, 720, 721, 723, 725, 727, 728, 730, 731, 732, 734, 735, 738, 740, 742, 743, 745, 746, 757, 758, 759], "here": [0, 2, 32, 237, 377, 540, 700, 708, 709, 710, 711, 712, 714, 716, 717, 718, 719, 720, 722, 725, 726, 728, 729, 730, 731, 732, 733, 734, 738, 739, 740, 741, 742, 743, 745, 746, 753, 754], "eager_graph": [0, 2, 700], "doe": [0, 8, 9, 10, 16, 26, 31, 32, 39, 49, 101, 189, 228, 230, 238, 269, 303, 310, 311, 321, 357, 375, 440, 441, 471, 537, 540, 542, 545, 547, 577, 614, 703, 708, 710, 712, 713, 716, 719, 720, 722, 723, 725, 726, 727, 730, 731, 732, 733, 736, 738, 740, 741, 746, 748, 749, 753, 754, 760], "lazy_graph": [0, 2, 700], "up": [0, 9, 10, 32, 33, 309, 312, 331, 344, 392, 478, 542, 544, 567, 680, 702, 703, 704, 705, 706, 708, 710, 712, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 738, 739, 740, 741, 742, 743, 745, 746, 747, 754, 759, 760], "enabl": [0, 9, 14, 26, 37, 52, 309, 311, 331, 375, 489, 542, 545, 586, 700, 703, 711, 712, 715, 718, 720, 727, 728, 729, 730, 731, 733, 734, 737, 739, 741, 743, 746, 748, 751, 752, 753, 754, 755, 756, 759, 760], "delai": [0, 712], "until": [0, 703, 712, 730, 738, 746, 760], "have": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 78, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 106, 107, 108, 119, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 253, 254, 256, 257, 258, 259, 270, 275, 276, 284, 286, 288, 289, 290, 291, 295, 298, 301, 303, 306, 309, 310, 311, 312, 315, 316, 317, 319, 321, 323, 324, 325, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 341, 342, 344, 345, 346, 347, 350, 352, 353, 354, 355, 357, 358, 361, 362, 365, 366, 367, 368, 371, 373, 374, 375, 376, 377, 381, 382, 385, 386, 388, 393, 401, 402, 403, 404, 406, 409, 410, 417, 418, 419, 420, 421, 423, 424, 425, 427, 434, 435, 436, 437, 441, 449, 450, 454, 455, 456, 461, 462, 471, 485, 486, 489, 523, 524, 527, 529, 530, 531, 532, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 620, 624, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 678, 679, 680, 681, 682, 684, 685, 686, 687, 694, 700, 701, 702, 703, 704, 706, 708, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 759, 760], "necessari": [0, 2, 5, 9, 28, 32, 39, 78, 194, 227, 312, 380, 381, 382, 386, 388, 390, 391, 392, 399, 412, 494, 516, 540, 542, 608, 609, 610, 612, 614, 615, 617, 619, 700, 711, 715, 716, 718, 722, 730, 731, 733, 735, 736], "particularli": [0, 712, 741, 746, 751], "librari": [0, 7, 20, 30, 168, 199, 201, 217, 222, 223, 245, 539, 540, 545, 553, 555, 578, 579, 655, 656, 657, 658, 666, 667, 668, 670, 700, 702, 703, 704, 705, 707, 710, 711, 714, 743, 744, 746, 748, 749, 750, 751, 753, 757, 760], "where": [0, 5, 8, 9, 10, 14, 16, 18, 19, 22, 23, 26, 28, 31, 32, 33, 37, 39, 41, 42, 45, 46, 49, 90, 91, 94, 96, 101, 182, 192, 194, 197, 199, 201, 202, 211, 216, 217, 218, 225, 226, 227, 232, 234, 238, 240, 244, 250, 252, 269, 271, 272, 283, 287, 294, 301, 303, 306, 309, 310, 311, 312, 315, 316, 321, 323, 324, 325, 331, 336, 337, 341, 357, 358, 360, 361, 363, 369, 372, 373, 380, 381, 382, 394, 400, 414, 415, 416, 420, 421, 423, 424, 434, 442, 471, 485, 522, 537, 540, 542, 544, 545, 547, 549, 551, 552, 555, 556, 570, 573, 577, 578, 582, 584, 586, 588, 589, 590, 593, 594, 597, 599, 605, 607, 608, 610, 616, 620, 628, 635, 644, 645, 646, 647, 652, 653, 670, 672, 673, 674, 681, 685, 700, 702, 703, 704, 705, 708, 711, 712, 714, 715, 716, 717, 718, 720, 721, 723, 724, 727, 728, 729, 730, 731, 732, 733, 734, 736, 738, 741, 742, 743, 746, 747, 751, 760], "feasibl": [0, 703, 710, 719], "provid": [0, 2, 5, 9, 10, 14, 16, 19, 22, 23, 26, 28, 32, 33, 37, 39, 42, 45, 46, 72, 94, 96, 112, 113, 114, 115, 116, 124, 134, 146, 150, 246, 310, 312, 315, 321, 356, 369, 372, 386, 395, 412, 414, 416, 442, 453, 485, 486, 536, 537, 538, 539, 540, 542, 544, 545, 547, 549, 552, 555, 556, 570, 585, 588, 599, 608, 609, 616, 628, 650, 670, 672, 673, 674, 682, 686, 691, 700, 702, 710, 711, 712, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 736, 740, 742, 745, 746, 751, 752, 753, 754, 755, 756, 757, 760], "valid": [0, 9, 13, 23, 32, 36, 46, 49, 111, 309, 310, 327, 328, 329, 345, 346, 347, 348, 350, 351, 367, 372, 474, 538, 542, 544, 547, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 608, 616, 673, 674, 682, 694, 711, 716, 720, 722, 725, 729, 732, 733, 754], "look": [0, 700, 702, 706, 710, 711, 712, 716, 717, 718, 720, 721, 722, 724, 725, 726, 727, 731, 732, 733, 734, 735, 736, 738, 740, 742, 743, 747, 749, 753], "find": [0, 1, 14, 20, 26, 37, 545, 549, 553, 586, 626, 655, 656, 657, 658, 694, 700, 702, 705, 709, 710, 711, 712, 714, 717, 719, 729, 733, 736, 738, 741, 748], "abl": [0, 26, 49, 711, 712, 714, 720, 727, 730, 731, 734, 738, 743, 756, 759], "through": [0, 9, 32, 182, 321, 440, 441, 540, 549, 627, 633, 684, 694, 700, 705, 708, 709, 710, 712, 713, 716, 717, 718, 719, 721, 722, 724, 725, 727, 728, 730, 731, 732, 733, 735, 736, 737, 738, 741, 742, 743, 745, 751, 753, 754, 755], "flag": [0, 2, 26, 150, 321, 434, 539, 544, 570, 685, 712, 720, 721, 730, 731, 732, 733], "reduc": [0, 9, 10, 14, 19, 22, 23, 26, 32, 33, 37, 42, 45, 46, 167, 292, 306, 307, 321, 439, 440, 441, 442, 455, 539, 542, 545, 552, 555, 556, 590, 650, 651, 666, 667, 668, 669, 670, 671, 672, 673, 674, 694, 719, 724, 731, 736, 738, 740, 751, 755, 756, 757], "time": [0, 1, 2, 9, 11, 14, 20, 32, 34, 43, 49, 89, 279, 306, 309, 310, 312, 321, 337, 342, 368, 372, 400, 406, 434, 524, 529, 537, 543, 544, 545, 547, 548, 552, 553, 567, 569, 583, 618, 621, 622, 623, 650, 651, 655, 656, 682, 683, 684, 702, 703, 704, 710, 711, 712, 716, 718, 719, 720, 722, 726, 727, 728, 730, 731, 733, 734, 738, 741, 743, 746, 751, 753, 754, 757, 758, 759], "comp_func": 0, "default": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 126, 127, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 150, 151, 153, 154, 158, 161, 162, 163, 165, 166, 167, 168, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 267, 268, 269, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 317, 319, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 454, 455, 456, 458, 459, 460, 461, 462, 464, 465, 466, 467, 469, 470, 471, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 495, 499, 500, 501, 503, 505, 507, 508, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 534, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 630, 631, 632, 634, 635, 636, 637, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 694, 710, 711, 712, 716, 717, 720, 721, 722, 723, 724, 726, 727, 731, 733, 736, 738, 742, 748, 753], "follow": [0, 9, 10, 11, 13, 14, 20, 26, 32, 33, 34, 36, 37, 89, 122, 167, 177, 194, 201, 227, 229, 236, 237, 309, 312, 315, 331, 344, 388, 400, 405, 414, 416, 469, 470, 471, 500, 501, 524, 527, 529, 530, 531, 537, 538, 539, 540, 542, 543, 544, 545, 549, 553, 570, 571, 584, 590, 600, 630, 636, 655, 656, 657, 658, 682, 686, 700, 702, 703, 707, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 746, 747, 750, 753, 756], "show": [0, 488, 497, 519, 542, 680, 700, 710, 711, 712, 717, 719, 722, 725, 730, 731, 733, 735, 745, 746, 753], "simpler": [0, 710, 712, 725, 754, 760], "obtain": [0, 309, 348, 544, 570, 731], "howev": [0, 14, 37, 201, 244, 245, 315, 414, 416, 489, 540, 542, 545, 591, 593, 691, 703, 710, 711, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 726, 727, 730, 731, 732, 733, 736, 738, 740, 741, 742, 743, 746, 752, 753, 759], "desir": [0, 6, 7, 9, 19, 26, 29, 30, 32, 42, 49, 106, 108, 109, 168, 296, 306, 312, 321, 398, 440, 442, 538, 539, 545, 552, 595, 652, 681, 682, 702, 712, 716, 719, 720, 721, 731, 738, 753], "below": [0, 2, 5, 9, 14, 37, 45, 99, 100, 101, 201, 211, 234, 269, 270, 276, 303, 306, 537, 540, 545, 576, 597, 672, 700, 705, 710, 711, 713, 714, 718, 719, 720, 721, 722, 724, 727, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 749, 751, 756, 758], "ultim": 0, "trade": 0, "off": [0, 13, 14, 36, 37, 332, 333, 334, 544, 545, 567, 576, 597, 681, 682, 704, 711, 737, 759], "between": [0, 2, 8, 9, 10, 13, 14, 15, 16, 20, 26, 31, 32, 36, 38, 39, 52, 76, 119, 182, 195, 230, 232, 246, 274, 287, 289, 306, 309, 310, 311, 312, 321, 332, 333, 334, 345, 346, 347, 356, 373, 374, 375, 376, 377, 400, 442, 537, 538, 540, 544, 546, 547, 549, 551, 553, 567, 588, 602, 603, 604, 608, 616, 630, 645, 656, 657, 658, 686, 702, 715, 716, 722, 726, 727, 728, 730, 731, 732, 733, 736, 737, 739, 740, 741, 743, 745, 749, 750, 752, 753, 754, 759], "memori": [0, 5, 9, 16, 28, 32, 39, 78, 94, 149, 161, 167, 169, 173, 312, 321, 380, 381, 386, 388, 390, 391, 392, 399, 412, 441, 484, 489, 512, 537, 539, 542, 544, 547, 569, 608, 609, 610, 612, 614, 615, 617, 619, 700, 719, 720, 721, 730, 731, 736, 738, 744, 746, 753, 755, 756, 757], "store": [0, 6, 10, 14, 16, 26, 29, 33, 37, 39, 108, 309, 310, 352, 356, 458, 542, 545, 547, 597, 614, 682, 683, 684, 707, 712, 715, 716, 718, 723, 728, 730, 731, 732, 738, 740, 741, 742, 748], "thei": [0, 9, 14, 18, 20, 26, 37, 41, 43, 132, 246, 282, 306, 538, 540, 545, 548, 551, 553, 598, 621, 622, 644, 655, 687, 700, 709, 710, 713, 714, 716, 717, 718, 719, 720, 721, 722, 724, 725, 727, 728, 730, 731, 733, 734, 736, 738, 740, 741, 742, 743, 746, 750, 753, 755, 756, 759, 760], "By": [0, 9, 15, 16, 22, 23, 32, 38, 39, 45, 46, 241, 273, 285, 292, 303, 306, 309, 311, 319, 321, 331, 375, 427, 434, 437, 489, 540, 542, 545, 546, 547, 555, 556, 573, 599, 602, 611, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 711, 716, 720, 722, 724, 727, 729, 730, 731, 738, 742, 743], "choos": [0, 7, 19, 20, 30, 168, 194, 201, 222, 223, 227, 312, 539, 540, 552, 553, 555, 654, 655, 656, 657, 658, 666, 667, 668, 670, 710, 711, 712, 728, 733, 739, 743], "node": [0, 2, 26, 33, 52, 447, 503, 549, 634, 635, 681, 690, 703, 717, 718, 731, 754], "bake": 0, "randint": [0, 13, 18, 20, 36, 41, 551, 553, 566, 569, 655, 720], "0": [0, 2, 3, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 75, 76, 84, 87, 89, 90, 91, 92, 93, 96, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 117, 119, 122, 123, 127, 129, 134, 147, 150, 152, 155, 160, 161, 162, 163, 165, 166, 167, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 269, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 319, 321, 327, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 351, 352, 354, 355, 357, 358, 359, 360, 361, 363, 364, 365, 368, 369, 372, 373, 374, 375, 376, 377, 379, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 448, 449, 450, 453, 454, 455, 457, 458, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 473, 474, 475, 477, 478, 481, 483, 485, 486, 490, 495, 499, 500, 501, 503, 505, 507, 508, 517, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 581, 583, 584, 585, 586, 587, 589, 591, 593, 594, 595, 597, 598, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 627, 630, 631, 632, 633, 635, 636, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 694, 700, 708, 711, 712, 714, 716, 718, 719, 720, 721, 722, 723, 724, 729, 730, 731, 732, 733, 734, 738, 740, 741, 742, 743, 746], "100": [0, 5, 8, 9, 28, 31, 32, 33, 36, 50, 93, 101, 188, 228, 241, 269, 287, 296, 303, 306, 309, 310, 332, 333, 369, 372, 462, 470, 486, 537, 540, 542, 545, 549, 581, 630, 700, 703, 704, 719, 720, 733, 741, 742, 743, 746], "size": [0, 9, 10, 13, 14, 16, 18, 19, 26, 32, 33, 36, 37, 39, 41, 42, 49, 51, 52, 89, 92, 165, 166, 167, 258, 261, 271, 272, 273, 278, 292, 299, 303, 306, 307, 309, 310, 312, 315, 316, 319, 321, 323, 324, 325, 326, 327, 328, 344, 345, 346, 348, 349, 358, 369, 372, 386, 398, 409, 415, 416, 422, 427, 439, 440, 441, 442, 480, 485, 537, 539, 542, 544, 545, 547, 551, 552, 556, 571, 573, 576, 580, 584, 588, 590, 593, 599, 608, 613, 614, 615, 644, 650, 653, 673, 674, 682, 700, 730, 732, 733, 736, 741], "rand": [0, 694, 700], "And": [0, 29, 700, 714, 717, 725, 727, 733], "final": [0, 2, 5, 10, 32, 33, 49, 75, 92, 93, 309, 352, 458, 536, 537, 542, 544, 570, 710, 712, 714, 715, 716, 717, 719, 720, 722, 723, 727, 729, 730, 731, 736, 737, 741, 749, 759], "__setattr__": [0, 718], "__getattr__": [0, 718], "arbitrari": [0, 2, 5, 6, 9, 26, 29, 94, 107, 134, 380, 381, 382, 525, 537, 538, 543, 726, 727, 729, 730, 731, 733, 742, 746, 754, 759], "class": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 89, 98, 103, 119, 122, 135, 137, 138, 197, 234, 276, 296, 306, 320, 321, 328, 329, 357, 440, 441, 445, 454, 458, 471, 481, 503, 537, 538, 539, 540, 542, 544, 546, 549, 550, 569, 571, 577, 588, 593, 602, 618, 624, 625, 636, 643, 658, 669, 670, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 691, 694, 698, 700, 710, 716, 717, 718, 720, 721, 722, 723, 726, 728, 729, 732, 733, 736, 738, 739, 741, 742, 743, 744, 745, 746, 748, 751, 753, 754, 760], "cont": 0, "new_attribut": 0, "contain": [0, 3, 4, 5, 6, 8, 9, 10, 13, 14, 15, 16, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 117, 119, 120, 121, 122, 125, 126, 127, 129, 131, 134, 151, 153, 154, 155, 160, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 306, 308, 309, 310, 311, 312, 315, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 340, 341, 342, 344, 345, 346, 347, 348, 351, 352, 353, 354, 355, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 467, 469, 470, 471, 473, 474, 475, 477, 478, 480, 485, 486, 490, 493, 495, 500, 501, 502, 503, 505, 507, 508, 515, 521, 522, 523, 524, 525, 527, 529, 530, 531, 532, 534, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 627, 631, 632, 633, 636, 637, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 680, 682, 683, 684, 686, 687, 691, 694, 700, 702, 706, 707, 708, 710, 711, 713, 714, 715, 716, 717, 719, 720, 722, 723, 726, 727, 728, 729, 730, 732, 733, 735, 736, 737, 738, 739, 742, 746, 747, 748, 753, 754, 759], "cont_deep_copi": [0, 26, 741], "some": [0, 2, 26, 34, 199, 201, 217, 309, 332, 333, 334, 523, 524, 527, 529, 530, 531, 539, 540, 543, 549, 635, 682, 700, 703, 704, 708, 710, 711, 712, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 740, 741, 742, 745, 746, 747, 748, 749, 750, 752, 753, 754, 759, 760], "still": [0, 2, 14, 26, 37, 545, 593, 703, 710, 712, 715, 716, 720, 723, 724, 725, 727, 730, 731, 733, 736, 742, 746, 750, 753, 759], "develop": [0, 2, 700, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 714, 717, 719, 734, 745, 746, 748, 751, 752, 753, 754, 755, 758, 759, 760], "account": [0, 9, 16, 32, 39, 241, 312, 390, 540, 547, 612, 681, 694, 711, 719, 723, 731, 734], "point": [0, 6, 8, 9, 14, 18, 20, 22, 29, 31, 32, 37, 41, 45, 76, 77, 78, 85, 87, 90, 97, 98, 102, 106, 119, 123, 127, 134, 174, 175, 176, 177, 179, 180, 181, 182, 183, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 207, 208, 209, 210, 215, 216, 217, 218, 219, 227, 229, 230, 232, 234, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 258, 259, 261, 289, 290, 293, 295, 303, 306, 309, 310, 311, 316, 321, 332, 333, 334, 357, 371, 373, 420, 421, 422, 423, 424, 434, 435, 436, 442, 535, 537, 538, 540, 545, 551, 552, 553, 554, 555, 572, 574, 577, 578, 579, 581, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 597, 600, 646, 647, 653, 655, 656, 657, 658, 661, 663, 664, 666, 667, 668, 669, 670, 671, 672, 691, 704, 708, 710, 711, 712, 714, 715, 716, 717, 719, 722, 723, 726, 730, 731, 733, 734, 736, 738, 740, 741, 745, 759], "wip": [0, 725], "ll": [0, 1, 2, 700, 704, 705, 708, 710, 711, 712, 717, 722, 725, 729, 730, 741], "soon": [0, 710, 712, 719, 720, 744, 746], "control": [0, 9, 32, 101, 249, 269, 301, 303, 309, 312, 332, 333, 334, 384, 408, 489, 537, 542, 545, 575, 680, 718, 720, 721, 729, 730, 731, 732, 736, 740, 741, 745, 748, 753, 759], "flow": [0, 718, 745, 753, 754], "built": [0, 76, 537, 682, 683, 684, 700, 711, 712, 717, 718, 733, 739, 747, 748, 752, 753, 757], "moment": [0, 2, 11, 34, 523, 524, 529, 543, 686, 710, 716, 746], "condit": [0, 19, 32, 42, 73, 310, 354, 536, 549, 552, 634, 635, 654, 714, 720, 722, 724, 727, 728, 730, 733, 745], "branch": [0, 182, 194, 197, 199, 227, 239, 240, 241, 244, 540, 711, 712, 714, 719, 725, 746, 753], "loop": [0, 24, 47, 72, 75, 536, 548, 621, 622, 623, 700, 716, 746], "regist": [0, 712], "correctli": [0, 2, 9, 14, 19, 32, 37, 42, 278, 306, 321, 440, 441, 442, 545, 552, 584, 650, 710, 711, 712, 715, 718, 720, 722, 724, 725, 726, 732, 733, 736, 742, 746], "while": [0, 1, 9, 13, 26, 32, 36, 49, 52, 75, 96, 133, 201, 202, 222, 223, 283, 306, 309, 310, 312, 352, 367, 402, 403, 433, 536, 537, 538, 540, 544, 553, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 655, 667, 670, 702, 703, 708, 710, 711, 712, 715, 716, 717, 719, 720, 721, 722, 725, 726, 727, 729, 730, 731, 732, 733, 734, 736, 740, 742, 743, 746, 753, 759, 760], "your": [0, 1, 2, 700, 703, 704, 705, 706, 708, 709, 710, 711, 714, 716, 717, 719, 723, 725, 729, 731, 734, 736, 741, 742, 746, 747, 753], "depend": [0, 5, 6, 9, 10, 14, 20, 21, 29, 32, 37, 44, 45, 73, 84, 106, 174, 175, 176, 179, 180, 181, 182, 191, 192, 194, 197, 199, 215, 216, 217, 218, 227, 229, 232, 239, 240, 244, 245, 295, 306, 310, 357, 370, 503, 536, 537, 538, 540, 542, 545, 552, 554, 577, 578, 590, 591, 592, 593, 654, 659, 662, 672, 700, 703, 706, 707, 708, 710, 711, 712, 717, 720, 721, 723, 728, 730, 731, 732, 733, 736, 738, 746, 747, 751, 753, 754], "chang": [0, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 93, 94, 95, 96, 98, 99, 100, 103, 107, 108, 109, 122, 126, 127, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 312, 321, 327, 328, 329, 330, 332, 333, 334, 336, 340, 341, 342, 345, 346, 347, 351, 353, 354, 355, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 449, 450, 453, 454, 455, 456, 457, 458, 461, 462, 465, 467, 469, 470, 471, 473, 474, 475, 477, 478, 480, 485, 486, 500, 501, 502, 503, 505, 507, 508, 521, 523, 524, 527, 529, 530, 531, 532, 534, 540, 547, 549, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 583, 584, 589, 590, 591, 593, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 625, 636, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 700, 704, 706, 710, 711, 712, 714, 716, 717, 718, 719, 720, 722, 723, 725, 731, 732, 733, 734, 735, 736, 738, 742, 746, 747, 756, 759], "number": [0, 5, 6, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 22, 23, 26, 28, 29, 31, 32, 33, 36, 37, 38, 39, 41, 42, 43, 45, 46, 49, 51, 52, 55, 76, 87, 89, 91, 92, 93, 94, 95, 96, 97, 98, 101, 107, 112, 113, 114, 115, 116, 118, 119, 122, 125, 126, 127, 129, 131, 134, 158, 159, 160, 174, 175, 176, 177, 178, 180, 182, 183, 190, 192, 194, 195, 197, 199, 200, 201, 207, 208, 209, 211, 215, 217, 225, 226, 227, 228, 229, 230, 232, 234, 236, 237, 238, 240, 241, 245, 247, 255, 267, 268, 269, 271, 272, 274, 276, 277, 278, 279, 287, 292, 296, 301, 303, 306, 309, 310, 312, 315, 321, 342, 352, 354, 357, 360, 361, 369, 371, 372, 380, 381, 382, 400, 401, 402, 403, 404, 406, 409, 411, 414, 415, 416, 432, 434, 435, 436, 437, 458, 465, 483, 500, 501, 508, 521, 522, 535, 537, 538, 539, 540, 542, 544, 545, 546, 547, 548, 551, 552, 553, 555, 556, 557, 564, 565, 567, 570, 573, 577, 578, 579, 586, 591, 593, 597, 598, 599, 602, 605, 607, 608, 610, 611, 613, 614, 616, 618, 620, 621, 622, 623, 644, 648, 653, 655, 656, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 680, 681, 682, 685, 700, 701, 702, 711, 712, 718, 719, 720, 721, 722, 728, 729, 730, 733, 734, 735, 736, 738, 741], "underli": [0, 9, 16, 32, 39, 184, 187, 189, 224, 312, 390, 540, 545, 547, 591, 612, 718, 730, 736, 753], "piec": [0, 712, 715, 727, 728, 738, 749, 751], "insid": [0, 14, 37, 52, 312, 409, 545, 586, 711, 712, 715, 718, 720, 721, 727, 728, 733, 734, 759], "said": [0, 704, 734], "other": [0, 2, 6, 8, 9, 10, 16, 22, 26, 29, 31, 32, 33, 39, 45, 49, 51, 52, 76, 96, 107, 133, 194, 199, 201, 217, 226, 227, 275, 279, 306, 312, 385, 393, 405, 443, 444, 537, 538, 540, 542, 551, 555, 606, 616, 647, 670, 672, 700, 703, 706, 710, 711, 712, 714, 715, 718, 719, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 736, 738, 740, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 759, 760], "numpi": [0, 2, 8, 9, 10, 22, 31, 32, 33, 101, 130, 148, 178, 238, 269, 303, 321, 434, 441, 447, 471, 500, 503, 507, 537, 538, 539, 540, 542, 555, 665, 691, 694, 700, 702, 703, 709, 710, 711, 712, 714, 715, 716, 719, 720, 721, 724, 726, 730, 732, 733, 734, 736, 738, 740, 743, 747, 748, 755, 760], "len": [0, 5, 9, 14, 32, 37, 94, 262, 303, 309, 310, 321, 342, 352, 361, 369, 372, 442, 537, 545, 598, 700, 718, 719, 724, 730, 731, 733, 740, 743], "incorrectli": [0, 723], "There": [0, 49, 302, 304, 305, 313, 314, 318, 322, 700, 702, 710, 711, 712, 714, 715, 716, 717, 718, 720, 721, 722, 724, 725, 727, 729, 731, 732, 735, 738, 741, 746, 754, 755, 759, 760], "succe": [0, 711], "hide": 0, "shouldn": [0, 734], "realli": [0, 711, 718, 746, 758, 759], "check": [0, 4, 6, 10, 14, 26, 29, 33, 37, 67, 110, 111, 120, 121, 124, 126, 127, 128, 131, 146, 153, 154, 161, 173, 447, 457, 459, 460, 467, 473, 474, 475, 476, 477, 493, 503, 515, 521, 534, 538, 539, 542, 545, 549, 578, 579, 586, 624, 625, 634, 635, 636, 680, 694, 700, 707, 709, 710, 711, 712, 714, 718, 719, 721, 722, 724, 728, 730, 731, 732, 733, 734, 735, 737, 738, 740, 741, 742, 747], "recommend": [0, 222, 223, 236, 540, 555, 667, 670, 711, 716, 717, 725, 728, 729], "nois": [0, 2, 700], "anoth": [0, 2, 88, 107, 109, 537, 538, 700, 703, 710, 711, 712, 716, 718, 720, 721, 724, 725, 727, 730, 731, 733, 738, 740, 743, 748, 753, 759], "right": [0, 9, 14, 26, 32, 37, 52, 70, 71, 186, 188, 241, 286, 306, 309, 310, 312, 343, 364, 370, 371, 391, 454, 536, 540, 542, 545, 554, 593, 598, 661, 705, 710, 711, 712, 713, 714, 722, 736, 741], "feel": [0, 1, 51, 52, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 678, 679, 681, 682, 684, 685, 686, 687, 700, 706, 708, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737], "free": [0, 1, 51, 52, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 678, 679, 681, 682, 684, 685, 686, 687, 700, 706, 708, 709, 710, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 745, 754, 756], "open": [0, 1, 2, 10, 18, 41, 76, 537, 551, 645, 647, 700, 702, 703, 704, 705, 711, 712, 717, 720, 723, 731, 732, 736, 745, 751, 752, 753, 755, 756], "issu": [0, 681, 704, 705, 708, 709, 711, 714, 716, 719, 720, 721, 722, 724, 731, 733, 734, 736, 738, 742, 746], "minim": [0, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 93, 94, 95, 96, 98, 99, 100, 103, 107, 108, 109, 122, 126, 127, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303, 321, 327, 328, 329, 330, 332, 333, 334, 336, 340, 341, 342, 345, 346, 347, 351, 353, 354, 355, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 449, 450, 453, 454, 455, 456, 457, 458, 461, 462, 465, 467, 469, 470, 471, 473, 474, 475, 477, 478, 480, 485, 486, 500, 501, 502, 503, 505, 507, 508, 521, 523, 524, 527, 529, 530, 531, 532, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 583, 584, 589, 590, 591, 593, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 723, 730, 732, 736, 738, 751, 759], "resnet50": 0, "hug": 0, "face": [0, 705, 711, 714, 725, 729, 736, 738, 753, 759], "classifi": [0, 2, 700], "breed": 0, "cat": [0, 2, 732, 736, 738, 743], "transform": [0, 2, 9, 13, 32, 36, 309, 310, 330, 331, 336, 337, 340, 341, 342, 352, 364, 544, 568, 682, 700, 728, 733, 743, 745, 748, 751, 753, 754, 755], "autoimageprocessor": [0, 2], "resnetforimageclassif": [0, 2], "dataset": [0, 2, 26, 700, 741, 744], "load_dataset": [0, 2], "download": [0, 2, 711, 733], "imag": [0, 2, 8, 9, 13, 31, 32, 36, 51, 174, 175, 176, 177, 180, 183, 192, 195, 197, 199, 208, 209, 210, 215, 217, 230, 237, 238, 240, 241, 245, 309, 327, 328, 344, 345, 346, 348, 454, 540, 542, 544, 557, 558, 559, 560, 561, 564, 565, 566, 682, 700, 706, 711, 736, 738, 739, 741, 743, 745, 747, 753], "huggingfac": [0, 2], "test": [0, 2, 8, 10, 23, 31, 33, 46, 75, 125, 129, 208, 209, 210, 211, 234, 309, 332, 333, 334, 478, 536, 538, 540, 542, 556, 673, 674, 700, 704, 708, 709, 710, 713, 717, 720, 722, 724, 725, 728, 731, 734, 746, 747, 753], "image_processor": [0, 2], "from_pretrain": [0, 2], "microsoft": [0, 2, 703, 753, 758, 760], "resnet": [0, 2], "50": [0, 2, 9, 22, 31, 32, 33, 193, 233, 293, 306, 309, 310, 337, 356, 362, 456, 462, 469, 470, 486, 500, 540, 542, 545, 549, 552, 555, 581, 588, 625, 627, 653, 665, 729, 740], "preprocess": 0, "return_tensor": [0, 2], "pt": 0, "normal": [0, 9, 17, 18, 32, 40, 41, 49, 295, 306, 309, 315, 321, 330, 331, 336, 337, 340, 341, 342, 352, 414, 415, 416, 417, 418, 419, 434, 437, 547, 550, 551, 606, 616, 643, 644, 646, 681, 682, 685, 700, 710, 730, 731, 736, 741, 751], "feed": [0, 167, 539, 753, 754], "itself": [0, 8, 49, 228, 444, 509, 540, 542, 549, 636, 702, 708, 711, 712, 714, 717, 718, 719, 720, 721, 724, 725, 730, 731, 742, 745, 746, 752, 753, 754, 759], "without": [0, 20, 26, 495, 509, 542, 547, 549, 553, 612, 625, 655, 656, 657, 658, 694, 712, 715, 716, 718, 719, 720, 721, 722, 724, 726, 727, 731, 733, 734, 736, 740, 741, 742, 745, 746, 750, 753, 754, 755, 759], "pytorch": [0, 2, 237, 540, 686, 700, 703, 704, 709, 710, 715, 720, 721, 724, 726, 727, 730, 731, 732, 736, 738, 743, 746, 748, 754, 756, 757, 759, 760], "no_grad": 0, "logit": [0, 9, 15, 32, 38, 301, 316, 420, 423, 546, 602, 604, 678, 700], "With": [0, 3, 5, 6, 8, 9, 10, 11, 13, 14, 16, 19, 22, 28, 29, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 77, 78, 84, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 106, 107, 108, 109, 111, 117, 118, 119, 122, 129, 134, 135, 136, 137, 138, 148, 151, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 251, 253, 254, 256, 257, 258, 259, 261, 276, 278, 284, 287, 288, 289, 291, 292, 295, 301, 303, 306, 309, 310, 311, 312, 321, 330, 332, 333, 340, 354, 355, 356, 358, 359, 367, 376, 390, 391, 392, 394, 397, 399, 400, 406, 409, 411, 425, 434, 435, 436, 437, 439, 440, 441, 442, 443, 447, 448, 449, 450, 453, 454, 455, 456, 457, 461, 462, 465, 467, 469, 470, 471, 485, 486, 500, 501, 503, 505, 507, 508, 521, 522, 523, 524, 525, 527, 528, 529, 531, 532, 533, 534, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 566, 567, 568, 571, 572, 573, 574, 575, 576, 578, 579, 581, 583, 584, 585, 586, 587, 591, 593, 594, 595, 597, 598, 602, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 627, 630, 631, 632, 633, 635, 636, 641, 642, 643, 644, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 703, 704, 711, 722, 731, 733, 736, 738, 753, 756], "compiled_graph": 0, "our": [0, 24, 47, 51, 52, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 678, 679, 681, 682, 684, 685, 686, 687, 700, 702, 703, 705, 707, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 722, 724, 725, 728, 731, 732, 733, 734, 736, 737, 738, 740, 741, 742, 743, 746, 758, 759], "predicted_label": 0, "argmax": [0, 19, 42, 552, 700, 731], "item": [0, 4, 10, 24, 26, 28, 31, 32, 33, 89, 113, 150, 204, 220, 228, 279, 281, 294, 451, 461, 462, 466, 500, 501, 537, 538, 539, 542, 549, 556, 629, 630, 631, 632, 636, 641, 642, 675, 683, 684, 700, 710, 718, 720, 738, 740, 741, 743], "config": [0, 26, 549, 637, 700, 706, 711, 714, 717, 719, 725, 732, 741, 754], "id2label": 0, "us": [1, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 18, 19, 22, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 39, 41, 42, 47, 49, 52, 59, 93, 96, 106, 118, 120, 121, 132, 133, 153, 154, 156, 161, 165, 166, 167, 168, 170, 173, 179, 187, 215, 216, 218, 219, 221, 222, 223, 225, 226, 228, 237, 241, 246, 258, 260, 261, 263, 264, 268, 285, 288, 289, 292, 303, 306, 309, 310, 312, 315, 316, 317, 319, 321, 327, 328, 329, 331, 332, 333, 334, 335, 337, 342, 344, 345, 346, 347, 350, 352, 356, 358, 360, 364, 366, 368, 369, 370, 371, 372, 390, 394, 398, 400, 414, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 441, 442, 459, 460, 469, 470, 481, 489, 491, 492, 494, 500, 501, 513, 514, 516, 523, 524, 529, 530, 534, 535, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 551, 553, 555, 568, 570, 571, 576, 578, 586, 594, 600, 602, 611, 612, 613, 617, 621, 622, 623, 624, 626, 627, 633, 634, 635, 637, 644, 645, 646, 647, 649, 650, 651, 652, 655, 657, 665, 678, 679, 680, 681, 682, 683, 684, 685, 686, 691, 694, 698, 704, 705, 706, 709, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 745, 746, 748, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760], "compil": [1, 2, 245, 540, 683, 684, 686, 700, 718, 731, 734, 736, 737, 739, 746, 747, 748, 749, 752, 753, 754, 757, 760], "grant": [1, 700], "pilot": [1, 700, 709], "access": [1, 2, 26, 700, 710, 711, 712, 719, 720, 725, 730, 731, 753, 755, 757], "user": [1, 228, 245, 312, 400, 489, 540, 542, 680, 682, 683, 684, 694, 700, 702, 703, 706, 711, 712, 713, 715, 716, 718, 719, 720, 721, 724, 728, 729, 730, 731, 733, 735, 736, 737, 738, 746, 747, 751, 753, 759, 760], "join": [1, 16, 26, 32, 39, 385, 547, 606, 616, 700], "waitlist": [1, 700], "want": [1, 2, 9, 24, 32, 47, 194, 227, 312, 388, 540, 680, 684, 700, 703, 705, 707, 710, 711, 712, 717, 719, 721, 724, 725, 727, 728, 729, 730, 733, 736, 741, 742, 743, 746, 747], "get": [1, 2, 7, 14, 26, 30, 37, 51, 117, 118, 119, 122, 150, 151, 152, 155, 161, 166, 169, 173, 445, 463, 484, 502, 538, 539, 542, 545, 549, 600, 626, 680, 681, 682, 694, 700, 704, 705, 709, 710, 711, 713, 714, 719, 720, 721, 727, 728, 729, 730, 731, 732, 733, 738, 739, 740, 741, 742, 748, 753, 759], "one": [1, 2, 5, 9, 10, 13, 14, 16, 19, 20, 22, 26, 28, 31, 32, 33, 34, 36, 37, 39, 40, 42, 43, 44, 45, 49, 76, 84, 94, 96, 97, 98, 107, 109, 167, 188, 194, 201, 202, 219, 225, 226, 227, 246, 252, 258, 261, 262, 274, 278, 283, 284, 287, 288, 289, 291, 292, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 321, 330, 332, 336, 337, 340, 341, 344, 353, 354, 361, 368, 376, 380, 381, 382, 390, 391, 392, 397, 399, 404, 407, 414, 415, 416, 420, 425, 435, 436, 439, 440, 441, 442, 443, 481, 485, 486, 488, 505, 507, 508, 521, 523, 524, 527, 529, 531, 532, 537, 538, 539, 540, 542, 543, 544, 545, 547, 550, 552, 553, 555, 558, 559, 560, 561, 562, 563, 566, 580, 583, 584, 588, 590, 599, 600, 608, 609, 610, 613, 615, 619, 643, 650, 653, 655, 656, 657, 658, 663, 665, 685, 688, 691, 697, 700, 703, 704, 710, 711, 712, 714, 715, 716, 717, 718, 720, 721, 722, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 740, 741, 743, 746, 748, 753, 754, 756, 759], "directori": [1, 498, 520, 539, 542, 706, 707, 710, 711, 712, 717, 719, 731, 733], "keep": [1, 2, 9, 16, 26, 32, 39, 49, 296, 310, 372, 547, 619, 709, 710, 711, 712, 714, 716, 717, 718, 719, 724, 730, 731, 733, 734, 736, 741, 743, 747], "locat": [1, 96, 321, 435, 537, 549, 551, 554, 628, 644, 661, 710, 712, 716, 717, 721, 731, 732, 733, 734, 751], "ivy_root": 1, "environ": [1, 700, 705, 706, 712, 745, 747, 753, 755], "path": [1, 690, 711, 717, 730, 731, 732, 753], "either": [1, 2, 8, 9, 10, 13, 22, 26, 31, 32, 33, 36, 37, 61, 64, 67, 73, 88, 89, 174, 175, 176, 177, 182, 192, 194, 195, 197, 199, 201, 208, 209, 215, 216, 217, 218, 219, 227, 236, 238, 239, 241, 244, 245, 275, 295, 306, 309, 321, 330, 340, 350, 351, 435, 436, 453, 473, 481, 482, 490, 509, 534, 536, 537, 540, 542, 544, 545, 548, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 583, 588, 591, 595, 621, 622, 623, 663, 664, 669, 671, 680, 682, 683, 684, 691, 710, 711, 712, 716, 718, 720, 721, 722, 723, 724, 725, 727, 730, 731, 732, 733, 736, 738, 741, 746, 753], "manual": [1, 549, 624, 634, 635, 710, 711, 712, 720, 725, 733, 742], "automat": [1, 704, 710, 711, 712, 713, 716, 717, 719, 720, 725, 727, 730, 733, 736, 737, 739, 742, 743, 748, 753, 756, 760], "past": [1, 712, 714, 732, 733, 753], "content": [1, 9, 26, 32, 321, 441, 710, 712, 717, 721, 730, 738, 741], "pem": 1, "file": [1, 10, 26, 498, 520, 542, 684, 710, 711, 712, 714, 715, 716, 717, 718, 719, 721, 723, 724, 725, 727, 731, 732, 733, 734, 738, 741, 749, 752, 753, 754], "refer": [1, 9, 16, 22, 23, 32, 34, 39, 45, 46, 87, 101, 199, 217, 259, 269, 294, 303, 306, 309, 310, 312, 337, 342, 352, 355, 372, 390, 523, 524, 537, 540, 543, 545, 547, 555, 556, 573, 575, 599, 612, 670, 672, 673, 674, 682, 700, 709, 710, 711, 712, 714, 715, 717, 719, 720, 726, 727, 728, 729, 730, 731, 732, 733, 746, 748, 753], "equival": [1, 2, 14, 37, 49, 76, 188, 201, 222, 223, 236, 237, 312, 411, 537, 540, 545, 586, 589, 592, 600, 691, 730, 731, 736, 741, 743], "echo": [1, 711, 719], "n": [1, 2, 5, 8, 9, 13, 14, 16, 18, 19, 22, 23, 31, 32, 36, 37, 39, 41, 42, 45, 46, 49, 51, 94, 99, 100, 101, 174, 244, 246, 269, 270, 279, 303, 306, 309, 310, 312, 315, 316, 319, 321, 323, 324, 325, 330, 331, 336, 337, 340, 341, 342, 350, 351, 352, 358, 359, 366, 368, 372, 382, 386, 389, 393, 395, 406, 412, 414, 415, 416, 420, 421, 422, 423, 424, 427, 434, 442, 537, 540, 544, 545, 547, 549, 551, 552, 555, 556, 557, 558, 559, 560, 562, 564, 566, 573, 576, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 593, 594, 597, 598, 599, 600, 607, 608, 610, 616, 620, 632, 645, 646, 647, 653, 667, 669, 670, 671, 672, 673, 674, 682, 685, 694, 700, 713, 717, 719, 733], "api_kei": 1, "bug": [1, 201, 540, 700, 710, 712, 717, 725, 731, 733], "pleas": [1, 51, 52, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 678, 679, 681, 682, 684, 685, 686, 687, 700, 702, 703, 704, 706, 708, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 738, 739, 740, 741, 742, 743, 745], "rais": [1, 5, 9, 10, 18, 20, 23, 26, 28, 32, 33, 39, 41, 43, 46, 78, 108, 197, 232, 282, 306, 309, 312, 316, 321, 342, 352, 380, 381, 386, 388, 390, 391, 392, 399, 405, 412, 421, 440, 441, 447, 471, 489, 491, 501, 503, 509, 513, 538, 540, 542, 545, 547, 551, 552, 553, 555, 556, 583, 585, 599, 608, 609, 610, 612, 614, 615, 616, 617, 619, 645, 646, 647, 653, 658, 666, 668, 673, 674, 683, 684, 686, 700, 703, 712, 714, 716, 720, 721, 724, 730, 731, 734, 735, 738, 740], "github": [1, 700, 702, 706, 707, 709, 712, 714, 719, 720, 722, 723, 725, 733, 747], "add": [1, 8, 9, 17, 24, 26, 31, 32, 40, 47, 51, 52, 299, 307, 309, 351, 481, 509, 540, 542, 545, 550, 555, 597, 643, 671, 682, 685, 700, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 725, 726, 727, 728, 730, 731, 733, 734, 736, 738, 740, 746, 749, 751, 753], "label": [1, 9, 15, 32, 38, 311, 373, 375, 376, 377, 546, 602, 603, 604, 700, 710, 714, 731, 737, 738, 739, 743, 753], "accordingli": [1, 14, 19, 20, 22, 23, 37, 42, 45, 46, 94, 194, 199, 201, 217, 227, 241, 537, 540, 545, 552, 553, 555, 556, 600, 651, 655, 656, 657, 658, 666, 667, 668, 669, 670, 671, 672, 673, 674, 731, 738], "member": [1, 703, 710, 712, 731], "team": [1, 700, 705, 710, 711, 712, 731, 755], "back": [1, 9, 16, 32, 39, 312, 390, 487, 510, 542, 544, 547, 570, 612, 681, 683, 684, 686, 703, 711, 715, 720, 721, 724, 728, 729, 735, 737, 746, 751, 755], "asap": 1, "haven": [1, 753], "found": [1, 14, 16, 20, 26, 32, 37, 39, 43, 52, 155, 321, 385, 435, 539, 549, 576, 583, 616, 635, 655, 680, 706, 710, 711, 712, 715, 716, 717, 718, 720, 721, 723, 725, 728, 730, 731, 755], "ask": [1, 700, 704, 710, 711, 722, 738, 740, 746], "suggest": [1, 710, 711, 712, 717, 720, 725, 729, 731, 733, 734, 735], "someth": [1, 700, 712, 716, 725, 734, 741, 742, 746, 759], "help": [1, 444, 489, 542, 555, 671, 681, 700, 705, 706, 707, 710, 711, 715, 716, 717, 718, 719, 720, 722, 725, 727, 728, 730, 731, 733, 734, 740, 741, 742, 744, 748, 749, 753, 755, 759], "post": [1, 17, 40, 550, 643, 711, 729, 743], "forum": [1, 717], "discord": [1, 51, 52, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 678, 679, 681, 682, 684, 685, 686, 687, 700, 702, 703, 704, 706, 708, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 738, 739, 740, 741, 742, 743, 745], "server": [1, 700, 711, 712, 717, 753], "convert": [2, 4, 5, 8, 26, 27, 28, 31, 49, 77, 78, 95, 104, 105, 147, 148, 149, 150, 161, 169, 173, 193, 233, 312, 317, 380, 381, 382, 425, 487, 504, 506, 507, 508, 510, 537, 538, 539, 540, 542, 545, 549, 601, 625, 636, 637, 691, 694, 700, 704, 710, 715, 716, 728, 729, 731, 733, 735, 738, 746, 748, 751, 752, 759], "written": [2, 10, 700, 702, 711, 714, 715, 723, 725, 726, 730, 731, 734, 738, 740, 743, 746, 751, 753, 757, 759, 760], "choic": [2, 9, 22, 32, 45, 310, 312, 370, 384, 555, 670, 672, 700, 704, 711, 719, 730, 731, 741, 753, 760], "preserv": [2, 9, 10, 11, 26, 32, 33, 34, 52, 309, 310, 312, 321, 344, 369, 380, 381, 382, 391, 392, 441, 471, 532, 542, 543, 547, 609, 733, 743, 746], "logic": [2, 23, 46, 158, 194, 195, 221, 222, 223, 227, 230, 539, 540, 556, 673, 674, 710, 715, 719, 720, 721, 724, 727, 728, 729, 730, 731, 733, 736, 740], "target": [2, 9, 32, 149, 311, 374, 375, 376, 377, 539, 682, 684, 690, 700, 708, 711, 713, 716, 725, 732, 737, 741, 742, 743, 749, 751, 752, 753, 756, 758, 759], "optim": [2, 11, 34, 258, 303, 311, 375, 445, 531, 542, 543, 548, 621, 622, 623, 681, 700, 704, 720, 730, 736, 739, 741, 743, 745, 751, 752, 753, 754, 755, 756, 757, 760], "tool": [2, 700, 701, 704, 711, 712, 722, 725, 739, 743, 745, 746, 751, 752, 753, 754, 756, 759, 760], "make": [2, 691, 700, 703, 704, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 738, 740, 741, 743, 747, 751, 753, 754, 755, 756, 759, 760], "ml": [2, 700, 701, 703, 704, 705, 709, 731, 737, 738, 739, 741, 742, 743, 745, 749, 750, 751, 752, 753, 756, 758, 760], "relat": [2, 201, 540, 700, 706, 709, 710, 711, 712, 724, 731, 733, 734, 735, 736, 745, 756], "project": [2, 544, 570, 682, 700, 702, 703, 704, 707, 710, 711, 712, 715, 716, 717, 733, 742, 745, 746, 749, 751, 753, 756, 760], "independ": [2, 9, 18, 32, 41, 177, 194, 227, 237, 316, 420, 540, 545, 551, 573, 592, 644, 700, 714, 720, 722, 728, 738, 743, 751], "research": [2, 700, 702, 745, 753, 760], "deploi": [2, 700, 719, 748, 751, 752, 753, 755, 759], "system": [2, 545, 592, 700, 711, 712, 716, 719, 720, 746, 751, 753, 756, 758, 760], "build": [2, 20, 26, 52, 553, 655, 656, 657, 658, 682, 683, 684, 700, 703, 705, 706, 711, 713, 719, 720, 727, 729, 737, 739, 742, 743, 746, 748, 751, 753, 755, 758, 759, 760], "block": [2, 310, 362, 700, 712, 718, 720, 724, 727, 733, 737, 739, 743, 746, 748, 758, 760], "neural": [2, 544, 678, 682, 700, 745, 749, 751, 752, 753, 757, 759, 760], "network": [2, 544, 568, 678, 680, 681, 682, 683, 684, 700, 703, 718, 727, 738, 742, 745, 749, 751, 752, 753, 757, 759, 760], "layer": [2, 9, 17, 32, 40, 550, 569, 570, 643, 679, 680, 681, 683, 684, 685, 686, 687, 700, 702, 723, 731, 734, 736, 738, 739, 742, 751, 753, 757, 760], "activ": [2, 9, 10, 13, 24, 32, 36, 47, 59, 60, 61, 62, 63, 64, 65, 66, 67, 249, 253, 254, 256, 257, 503, 544, 570, 571, 681, 682, 700, 706, 711, 712, 720, 725, 734, 735, 742, 753, 756], "train": [2, 9, 11, 13, 32, 34, 36, 309, 315, 332, 333, 334, 414, 416, 523, 524, 529, 543, 544, 567, 570, 571, 681, 682, 683, 684, 685, 700, 704, 718, 721, 727, 741, 742, 743, 744, 745, 746, 748, 751, 752, 757, 759, 760], "pipelin": [2, 700, 702, 707, 713, 714, 715, 732, 734, 743, 748, 753, 754, 759], "publish": [2, 700, 704, 746], "ex": [2, 719], "haiku": [2, 679, 700, 704, 743, 753], "latest": [2, 8, 31, 109, 197, 207, 208, 223, 321, 434, 538, 540, 545, 547, 555, 591, 620, 670, 682, 700, 710, 711, 712, 714, 716, 719, 723, 734, 746, 747, 758], "integr": [2, 6, 8, 9, 29, 31, 32, 106, 246, 291, 306, 321, 437, 538, 540, 700, 709, 711, 713, 728, 751, 753, 755, 756, 757], "kornia": [2, 700], "advantag": [2, 700, 711, 712, 730, 731, 747, 753], "featur": [2, 9, 32, 309, 323, 324, 325, 332, 333, 334, 681, 682, 700, 710, 711, 712, 715, 716, 719, 726, 734, 736, 741, 746, 753, 754, 755, 759], "tensorflow": [2, 8, 9, 10, 31, 32, 101, 148, 178, 269, 303, 310, 358, 503, 537, 539, 542, 691, 700, 703, 704, 708, 709, 710, 711, 712, 714, 716, 719, 720, 721, 726, 730, 731, 732, 733, 734, 736, 738, 743, 746, 748, 751, 754, 756, 757, 759, 760], "deploy": [2, 711, 752, 755, 756, 759, 760], "definit": [2, 8, 14, 31, 37, 246, 540, 545, 572, 700, 712, 715, 720, 727, 740], "job": [2, 700, 717, 719], "graph": [2, 20, 553, 655, 656, 657, 658, 683, 684, 700, 704, 718, 727, 731, 736, 739, 746, 748, 749, 753, 756], "leverag": [2, 700, 711, 730, 751, 753], "frontend": [2, 488, 542, 700, 709, 712, 713, 719, 720, 724, 729, 733, 736, 737, 739, 748, 753], "link": [2, 700, 706, 710, 711, 712, 717, 719, 720, 725, 731, 749, 751], "swap": [2, 16, 39, 547, 617, 691], "replac": [2, 8, 10, 16, 18, 26, 31, 33, 39, 41, 87, 228, 259, 303, 485, 486, 490, 537, 540, 542, 547, 551, 605, 644, 703, 712, 717, 718, 720, 721, 728, 731, 733, 740, 743, 746, 760], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 702, 703, 704, 705, 706, 710, 711, 712, 714, 715, 717, 718, 719, 731, 752, 753, 754, 755, 756], "debug_mod": 2, "params_v": [2, 700], "must": [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 106, 107, 108, 167, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 252, 253, 254, 256, 257, 258, 259, 261, 270, 271, 272, 275, 276, 277, 279, 282, 284, 286, 288, 289, 290, 291, 295, 298, 301, 303, 306, 309, 310, 311, 312, 315, 316, 319, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 350, 352, 353, 354, 355, 357, 361, 362, 365, 366, 367, 368, 371, 373, 374, 375, 376, 377, 380, 381, 382, 385, 386, 388, 390, 391, 392, 393, 395, 399, 401, 402, 403, 404, 406, 408, 409, 410, 412, 417, 418, 419, 420, 421, 423, 424, 427, 434, 435, 436, 437, 442, 449, 450, 454, 455, 456, 461, 462, 464, 471, 485, 486, 522, 523, 524, 527, 529, 530, 531, 532, 534, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 624, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 681, 682, 686, 688, 702, 704, 706, 709, 710, 711, 712, 714, 715, 719, 720, 721, 722, 723, 724, 726, 727, 728, 730, 731, 733, 734, 735, 736, 738, 742, 743, 754, 760], "unless": [2, 5, 9, 14, 28, 32, 96, 227, 274, 287, 292, 306, 537, 540, 545, 586, 716, 721, 730, 746], "explicitli": [2, 545, 578, 579, 595, 682, 683, 684, 714, 715, 716, 718, 720, 723, 724, 727, 728, 729, 730, 732, 733, 738, 746, 753], "nn": [2, 94, 537, 700, 727, 732, 736, 743, 754], "kera": [2, 679, 700, 704, 759], "hk": [2, 700, 743], "trainabl": [2, 679, 683, 684, 687, 700, 723, 739, 741, 742], "transpile_kwarg": 2, "It": [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 49, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 78, 84, 85, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 102, 103, 106, 108, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 253, 254, 256, 257, 258, 259, 270, 275, 276, 284, 286, 288, 289, 290, 291, 295, 301, 303, 306, 309, 310, 311, 312, 315, 316, 321, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 341, 342, 344, 345, 346, 347, 350, 353, 354, 355, 361, 362, 365, 366, 367, 368, 373, 374, 375, 376, 377, 385, 388, 393, 401, 402, 403, 404, 406, 410, 414, 417, 418, 419, 420, 421, 423, 424, 434, 435, 436, 437, 449, 450, 454, 455, 456, 461, 462, 471, 485, 486, 487, 523, 524, 527, 529, 530, 531, 532, 534, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 586, 587, 588, 589, 592, 594, 595, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 620, 623, 624, 643, 644, 645, 646, 647, 649, 650, 651, 652, 654, 658, 659, 662, 663, 664, 667, 669, 670, 672, 673, 674, 681, 682, 700, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 728, 730, 731, 732, 733, 734, 735, 736, 738, 740, 741, 742, 751, 753, 754, 756, 757, 758, 759, 760], "alia": [2, 535, 710, 731], "similar": [2, 236, 540, 544, 570, 682, 702, 708, 710, 711, 718, 719, 720, 721, 724, 725, 727, 728, 729, 731, 732, 733, 734, 741, 746, 749, 750, 751, 752, 759], "instantli": [2, 700], "proper": [2, 700, 710, 731], "arrai": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 52, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 119, 122, 123, 125, 126, 127, 129, 131, 132, 133, 134, 140, 150, 151, 155, 160, 162, 164, 167, 168, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 317, 319, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 449, 450, 453, 454, 455, 456, 457, 458, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 480, 481, 483, 484, 485, 486, 487, 489, 490, 496, 497, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 518, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 636, 637, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 681, 682, 687, 691, 694, 696, 700, 708, 710, 711, 712, 713, 716, 717, 718, 720, 721, 722, 723, 724, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 746, 748, 751, 752, 753, 755, 759, 760], "snippet": [2, 733], "test_fn": [2, 75, 536, 700], "x1": [2, 6, 8, 9, 10, 14, 19, 29, 31, 32, 33, 37, 42, 44, 51, 52, 56, 107, 117, 133, 140, 160, 177, 182, 184, 186, 187, 188, 189, 194, 195, 201, 202, 203, 204, 205, 206, 212, 213, 214, 219, 220, 221, 223, 224, 225, 226, 227, 230, 232, 236, 243, 248, 259, 274, 277, 282, 283, 284, 286, 288, 293, 297, 303, 306, 312, 321, 394, 434, 443, 446, 538, 539, 540, 542, 545, 552, 554, 573, 580, 583, 588, 592, 595, 596, 599, 654, 661, 688, 700, 714, 720, 722, 724, 726, 730, 731], "effici": [2, 14, 37, 310, 311, 364, 375, 545, 586, 700, 711, 712, 718, 727, 728, 730, 733, 738, 741, 746, 753, 755, 756], "ret": [2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 77, 78, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 166, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 319, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 359, 362, 365, 367, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 485, 486, 490, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 630, 631, 632, 633, 634, 635, 636, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 679, 680, 684, 686, 691, 696, 700, 720, 721, 723, 724, 729, 730, 731, 732, 734, 738, 743], "entir": [2, 9, 22, 23, 26, 32, 33, 45, 46, 167, 197, 199, 239, 240, 309, 312, 321, 332, 333, 334, 400, 437, 467, 539, 540, 555, 556, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 703, 704, 710, 711, 712, 714, 715, 718, 720, 722, 724, 730, 731, 732, 733, 736, 738, 741, 742, 743, 746, 753, 759, 760], "just": [2, 9, 14, 22, 37, 49, 101, 269, 303, 310, 368, 537, 545, 555, 586, 665, 682, 700, 703, 704, 711, 712, 714, 716, 719, 720, 721, 722, 723, 727, 728, 730, 731, 732, 733, 738, 740, 741, 746, 753, 754, 759], "line": [2, 244, 540, 700, 704, 711, 714, 715, 716, 719, 721, 722, 724, 731, 733, 736, 739, 740, 741, 742, 744, 756], "request": [2, 9, 158, 316, 424, 539, 700, 704, 705, 710, 722, 725, 734, 736], "jnp": [2, 700, 720, 721, 724, 726, 730, 734, 738, 743], "pil": [2, 700], "jax_kornia": [2, 700], "url": [2, 700], "http": [2, 8, 31, 34, 101, 109, 197, 207, 208, 223, 269, 303, 321, 434, 523, 524, 537, 538, 540, 543, 545, 547, 555, 591, 620, 670, 700, 706, 707, 711, 712, 714, 717, 719, 720, 723, 747], "cocodataset": [2, 700], "org": [2, 8, 31, 34, 101, 109, 197, 207, 208, 223, 269, 303, 321, 434, 523, 524, 537, 538, 540, 543, 545, 547, 555, 591, 620, 670, 700, 723], "train2017": [2, 700], "000000000034": [2, 700], "jpg": [2, 700], "raw_img": [2, 700], "stream": [2, 7, 30, 168, 539, 700, 757], "raw": [2, 26, 700, 723, 754], "format": [2, 7, 10, 22, 25, 26, 27, 30, 67, 117, 151, 309, 320, 350, 430, 454, 534, 538, 539, 542, 544, 555, 556, 557, 558, 560, 561, 562, 564, 565, 665, 675, 700, 712, 713, 719, 720, 721, 722, 723, 724, 731, 734, 738, 740, 741, 749, 751, 753, 754], "img": [2, 700, 741], "transpos": [2, 9, 13, 14, 26, 32, 36, 37, 51, 310, 353, 366, 368, 433, 544, 545, 557, 559, 561, 563, 564, 565, 583, 587, 589, 595, 682, 700, 730, 740, 743], "expand_dim": [2, 16, 39, 544, 547, 566, 700, 731, 738, 741], "255": [2, 13, 32, 36, 188, 540, 566, 700], "version": [2, 3, 9, 32, 49, 59, 245, 278, 280, 306, 321, 439, 442, 522, 540, 542, 545, 578, 579, 691, 700, 702, 703, 704, 711, 712, 717, 719, 720, 723, 730, 732, 738, 759, 760], "enhanc": [2, 700], "5": [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 49, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 76, 77, 78, 89, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 107, 108, 109, 113, 117, 119, 127, 129, 134, 151, 160, 165, 168, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 211, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 254, 255, 257, 258, 259, 260, 261, 263, 264, 273, 276, 278, 280, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 317, 319, 321, 327, 328, 329, 330, 332, 333, 335, 336, 337, 340, 341, 345, 346, 347, 348, 350, 351, 352, 356, 357, 359, 360, 369, 372, 373, 374, 376, 377, 378, 380, 381, 382, 383, 385, 386, 387, 390, 391, 394, 395, 396, 399, 400, 405, 406, 407, 408, 409, 412, 413, 418, 419, 422, 424, 425, 427, 432, 434, 435, 436, 437, 438, 439, 441, 442, 447, 448, 449, 450, 453, 454, 455, 456, 458, 461, 462, 464, 467, 469, 470, 471, 485, 486, 490, 500, 501, 502, 503, 505, 509, 522, 523, 524, 526, 527, 528, 529, 531, 532, 533, 534, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 583, 584, 585, 587, 588, 589, 591, 593, 594, 595, 597, 598, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 627, 630, 631, 632, 633, 635, 636, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 694, 700, 710, 711, 712, 714, 716, 718, 719, 720, 722, 724, 726, 729, 732, 733, 740, 741, 742], "last": [2, 5, 9, 13, 14, 15, 16, 19, 21, 22, 23, 26, 28, 32, 36, 37, 38, 39, 44, 45, 46, 51, 92, 93, 96, 150, 259, 279, 303, 306, 309, 311, 312, 319, 321, 337, 342, 352, 375, 390, 400, 402, 427, 435, 436, 537, 539, 544, 545, 546, 547, 552, 554, 555, 556, 569, 570, 573, 576, 588, 597, 599, 603, 604, 606, 609, 612, 613, 614, 616, 650, 651, 659, 661, 662, 663, 664, 673, 674, 682, 691, 700, 704, 712, 714, 716, 717, 720, 722, 730, 732, 733, 736, 738, 746, 753], "least": [2, 8, 9, 14, 31, 32, 194, 212, 227, 309, 312, 321, 336, 341, 380, 381, 382, 389, 391, 434, 540, 545, 552, 583, 653, 700, 712, 715, 719, 720, 721, 722, 727, 730, 733], "support": [2, 7, 9, 10, 14, 30, 32, 33, 37, 101, 120, 124, 146, 153, 168, 177, 194, 201, 222, 223, 227, 237, 252, 269, 285, 301, 303, 306, 309, 310, 344, 357, 447, 459, 468, 471, 472, 489, 503, 537, 538, 539, 540, 542, 544, 545, 568, 577, 578, 579, 582, 584, 593, 600, 686, 691, 694, 702, 703, 704, 706, 708, 710, 711, 712, 714, 715, 721, 722, 723, 726, 727, 729, 730, 732, 733, 734, 736, 737, 738, 740, 741, 743, 747, 748, 750, 752, 753, 756, 758, 759, 760], "timm": [2, 700], "pretrain": [2, 700], "mlp_encod": [2, 700], "create_model": [2, 700], "mixer_b16_224": [2, 700], "num_class": [2, 700, 743], "randn": [2, 700], "224": [2, 700], "encod": [2, 10, 15, 33, 38, 458, 542, 546, 602, 700, 703, 741], "__init__": [2, 26, 48, 49, 50, 51, 52, 54, 55, 678, 681, 682, 683, 684, 685, 686, 687, 690, 691, 694, 695, 698, 700, 710, 715, 716, 720, 724, 731, 734, 738, 740, 741, 742, 743], "self": [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 106, 107, 108, 109, 117, 119, 122, 125, 126, 127, 129, 131, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 351, 352, 353, 354, 355, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 449, 450, 453, 454, 455, 456, 457, 458, 461, 462, 465, 467, 469, 470, 471, 473, 474, 475, 477, 478, 480, 485, 486, 500, 501, 502, 503, 505, 507, 508, 521, 523, 524, 527, 529, 530, 531, 532, 544, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 686, 694, 700, 712, 715, 718, 724, 731, 732, 738, 740, 741, 742, 743], "1000": [2, 5, 28, 93, 537, 700, 741], "super": [2, 9, 32, 310, 358, 700, 724, 738, 741, 742, 743], "fc": [2, 700, 742], "linear": [2, 9, 10, 13, 25, 32, 33, 36, 59, 61, 63, 64, 67, 253, 254, 256, 257, 289, 301, 306, 309, 312, 321, 344, 400, 442, 458, 481, 534, 542, 544, 549, 570, 592, 631, 681, 682, 700, 718, 723, 727, 728, 730, 731, 733, 736, 738, 741, 742, 743, 751, 752, 753, 756], "output_s": [2, 9, 32, 309, 323, 324, 325, 682, 700], "with_bia": [2, 682, 700, 742], "__call__": [2, 682, 683, 684, 700], "_forward_classifi": [2, 700], "standard": [2, 8, 14, 17, 18, 22, 31, 40, 41, 45, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 94, 97, 98, 99, 100, 102, 103, 109, 119, 122, 134, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 276, 306, 310, 321, 371, 434, 522, 537, 538, 540, 542, 545, 547, 550, 551, 552, 553, 554, 555, 556, 572, 573, 574, 575, 576, 578, 579, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 599, 600, 606, 608, 609, 610, 612, 613, 615, 616, 620, 643, 646, 650, 651, 653, 654, 655, 656, 657, 658, 659, 662, 666, 667, 668, 669, 670, 671, 672, 673, 674, 681, 685, 694, 700, 701, 713, 714, 715, 718, 720, 723, 726, 730, 733, 734, 746, 749, 751, 752, 755, 756, 758], "rng_kei": [2, 700], "random": [2, 9, 13, 26, 32, 36, 267, 268, 303, 310, 360, 369, 372, 420, 421, 422, 423, 424, 544, 567, 644, 645, 646, 647, 648, 649, 681, 694, 700, 710, 721, 732, 733, 734, 743, 745, 753], "prngkei": [2, 700, 743], "42": [2, 3, 18, 25, 34, 41, 67, 188, 309, 330, 340, 523, 527, 534, 540, 543, 545, 550, 551, 555, 584, 588, 643, 644, 645, 646, 647, 648, 663, 665, 700, 738, 743], "uniform": [2, 9, 18, 32, 41, 321, 437, 551, 644, 645, 647, 681, 700, 742, 760], "kei": [2, 4, 9, 13, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 89, 91, 96, 98, 103, 107, 109, 122, 126, 127, 134, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 253, 254, 256, 257, 259, 274, 276, 278, 280, 286, 287, 293, 295, 297, 298, 299, 319, 332, 333, 334, 373, 374, 376, 377, 385, 406, 409, 414, 416, 417, 418, 419, 421, 427, 434, 435, 436, 437, 443, 444, 446, 447, 449, 450, 451, 454, 455, 456, 458, 461, 462, 465, 467, 469, 470, 471, 473, 474, 477, 485, 486, 500, 501, 503, 505, 507, 508, 521, 527, 532, 542, 544, 548, 549, 558, 559, 560, 561, 567, 568, 570, 571, 572, 573, 578, 579, 580, 581, 583, 584, 586, 588, 590, 591, 597, 602, 603, 604, 605, 609, 612, 613, 614, 615, 616, 619, 620, 621, 622, 627, 633, 637, 644, 645, 646, 647, 649, 652, 655, 656, 657, 658, 659, 663, 664, 667, 669, 670, 672, 673, 674, 679, 680, 682, 686, 700, 717, 718, 719, 727, 730, 731, 732, 733, 741, 747, 753, 756, 760], "dtype": [2, 5, 6, 9, 10, 13, 14, 18, 19, 22, 28, 29, 31, 32, 33, 36, 37, 41, 42, 45, 51, 54, 55, 56, 76, 77, 78, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 102, 103, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 162, 228, 258, 259, 260, 261, 262, 263, 264, 267, 268, 273, 276, 278, 292, 303, 306, 309, 316, 321, 330, 340, 352, 420, 421, 422, 423, 424, 434, 435, 436, 437, 440, 442, 458, 459, 460, 462, 471, 480, 507, 537, 538, 539, 542, 544, 545, 548, 549, 551, 552, 554, 555, 556, 560, 567, 584, 600, 623, 624, 645, 646, 647, 650, 651, 652, 661, 662, 663, 664, 669, 671, 673, 674, 681, 682, 684, 685, 687, 688, 700, 708, 714, 716, 720, 721, 722, 724, 727, 728, 730, 731, 732, 733, 734, 738, 740], "float32": [2, 5, 6, 10, 13, 28, 29, 33, 36, 45, 93, 96, 98, 103, 104, 105, 109, 113, 114, 117, 118, 119, 120, 123, 126, 127, 129, 134, 137, 143, 207, 234, 273, 282, 303, 306, 309, 321, 330, 340, 352, 437, 471, 507, 537, 538, 540, 542, 544, 545, 548, 560, 562, 563, 566, 591, 593, 594, 600, 623, 700, 720, 722, 732, 733, 734], "forward_classifi": [2, 700], "param": [2, 26, 33, 52, 444, 461, 462, 542, 688, 700, 743], "init": [2, 9, 32, 310, 360, 369, 372, 681, 700, 714, 743], "rng": [2, 700, 743], "mention": [2, 703, 710, 711, 712, 715, 716, 722, 726, 727, 730, 731, 733, 736, 753], "abov": [2, 5, 8, 9, 14, 18, 25, 31, 32, 37, 41, 67, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 109, 125, 129, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 257, 259, 269, 270, 276, 279, 301, 303, 306, 309, 310, 312, 321, 327, 328, 329, 330, 332, 333, 334, 340, 342, 345, 346, 347, 348, 352, 357, 358, 400, 434, 437, 461, 465, 467, 469, 471, 508, 532, 534, 537, 538, 540, 542, 543, 544, 545, 547, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 599, 600, 601, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 624, 643, 645, 650, 651, 653, 654, 655, 656, 657, 658, 659, 662, 666, 667, 668, 669, 670, 671, 672, 673, 674, 700, 710, 711, 712, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 729, 730, 731, 732, 733, 736, 738, 740, 741, 742, 743, 753, 758], "exactli": [2, 244, 540, 702, 704, 718, 719, 720, 721, 722, 724, 733, 736], "wai": [2, 49, 700, 702, 703, 707, 709, 711, 714, 715, 716, 717, 719, 720, 721, 730, 731, 732, 733, 736, 740, 741, 742, 743, 746, 747, 755, 759, 760], "transpiled_func": 2, "unified_func": 2, "fashion": [2, 733], "rough": 2, "edg": [2, 9, 16, 32, 39, 309, 312, 321, 344, 400, 437, 547, 605, 607, 620, 714, 733, 753, 755, 759], "These": [2, 9, 32, 310, 312, 321, 357, 399, 434, 544, 545, 570, 577, 578, 700, 702, 703, 704, 706, 709, 710, 711, 712, 714, 718, 720, 722, 723, 726, 727, 730, 731, 733, 738, 739, 741, 742, 743, 746, 748, 753, 757, 759, 760], "subclass": [2, 728, 731, 736], "within": [2, 4, 9, 32, 76, 274, 287, 306, 309, 345, 346, 347, 380, 381, 382, 537, 551, 647, 684, 700, 710, 712, 715, 719, 720, 731, 732, 733, 742, 746, 749, 750, 754], "sequenti": [2, 700, 717, 718, 742], "more": [2, 3, 8, 9, 14, 16, 20, 25, 31, 32, 37, 39, 43, 59, 61, 64, 67, 76, 107, 199, 201, 217, 232, 245, 299, 307, 310, 311, 312, 353, 354, 364, 367, 375, 380, 381, 382, 385, 406, 489, 534, 537, 538, 540, 542, 545, 547, 553, 576, 582, 583, 586, 589, 591, 593, 600, 609, 616, 655, 656, 657, 658, 678, 700, 706, 707, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 751, 752, 753, 754, 755, 756, 759, 760], "complex": [2, 3, 8, 9, 14, 25, 29, 31, 32, 37, 59, 61, 64, 67, 97, 98, 112, 126, 135, 141, 174, 175, 176, 177, 178, 179, 180, 183, 191, 192, 194, 195, 197, 199, 207, 208, 209, 210, 211, 215, 216, 217, 218, 227, 229, 232, 234, 237, 238, 239, 240, 241, 244, 245, 276, 306, 309, 310, 331, 342, 352, 353, 357, 358, 359, 366, 368, 500, 501, 534, 537, 538, 540, 542, 545, 552, 555, 577, 578, 579, 584, 591, 593, 595, 597, 600, 653, 669, 671, 678, 706, 710, 717, 720, 722, 728, 731, 733, 734, 736, 741, 742, 743, 746, 748, 749, 751, 753, 755, 759, 760], "should": [2, 3, 5, 8, 9, 10, 11, 13, 14, 16, 18, 19, 20, 22, 25, 26, 28, 31, 32, 33, 34, 36, 37, 39, 41, 42, 44, 45, 47, 49, 51, 52, 62, 66, 75, 94, 96, 99, 100, 108, 133, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 252, 259, 270, 284, 288, 289, 290, 291, 295, 300, 301, 303, 306, 308, 309, 310, 311, 312, 316, 321, 332, 333, 334, 336, 341, 360, 369, 372, 376, 399, 400, 420, 421, 434, 435, 436, 448, 471, 522, 524, 527, 529, 530, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 564, 565, 570, 571, 572, 573, 574, 576, 578, 579, 580, 581, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 595, 597, 599, 600, 612, 628, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 663, 664, 665, 666, 667, 668, 669, 671, 672, 678, 679, 680, 681, 682, 684, 685, 686, 687, 694, 701, 703, 706, 708, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 741, 742, 749, 750, 753, 755, 760], "util": [2, 9, 32, 152, 310, 370, 539, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 706, 711, 717, 721, 724, 727, 730, 733, 734, 738, 751, 759, 760], "requir": [2, 8, 9, 26, 31, 32, 228, 241, 245, 310, 312, 357, 358, 400, 540, 545, 547, 577, 578, 579, 616, 679, 706, 707, 710, 711, 715, 717, 719, 720, 721, 722, 723, 724, 725, 726, 728, 731, 732, 733, 734, 736, 738, 740, 746, 753, 759], "state": [2, 13, 36, 141, 142, 143, 144, 145, 227, 510, 512, 515, 517, 518, 538, 540, 542, 544, 569, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 700, 703, 708, 711, 717, 720, 721, 723, 724, 725, 726, 731, 733, 737, 738, 739, 741, 745, 759, 760], "mean": [2, 9, 10, 13, 15, 16, 18, 22, 24, 26, 28, 32, 33, 36, 38, 39, 41, 45, 47, 49, 89, 167, 278, 306, 309, 310, 311, 312, 315, 316, 321, 337, 342, 355, 364, 373, 374, 375, 376, 377, 385, 390, 400, 414, 416, 421, 440, 441, 455, 525, 526, 528, 533, 537, 539, 542, 543, 544, 545, 546, 547, 548, 549, 551, 555, 559, 561, 562, 563, 566, 567, 575, 602, 612, 621, 622, 623, 630, 645, 646, 681, 682, 685, 700, 711, 712, 713, 714, 716, 718, 720, 721, 722, 727, 729, 730, 731, 733, 734, 736, 738, 740, 741, 742, 743, 745, 746, 748, 750, 753], "transformed_with_st": 2, "map": [2, 9, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 89, 91, 96, 98, 103, 107, 109, 122, 126, 127, 134, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 253, 254, 256, 257, 259, 274, 275, 276, 278, 280, 286, 287, 293, 295, 297, 298, 299, 306, 309, 332, 333, 334, 373, 374, 376, 377, 380, 381, 382, 385, 406, 408, 409, 414, 416, 417, 418, 419, 421, 434, 435, 436, 437, 443, 446, 447, 449, 450, 454, 455, 456, 458, 461, 462, 465, 467, 469, 470, 471, 473, 474, 477, 485, 486, 500, 501, 503, 505, 507, 508, 521, 522, 527, 532, 542, 549, 558, 559, 560, 561, 567, 568, 571, 572, 573, 578, 579, 580, 581, 583, 584, 586, 588, 590, 591, 597, 602, 603, 604, 605, 609, 612, 613, 614, 615, 616, 619, 620, 631, 632, 636, 637, 644, 645, 646, 647, 649, 652, 655, 656, 657, 658, 659, 663, 664, 667, 669, 670, 672, 673, 674, 715, 718, 720, 726, 727, 731, 733, 734, 741, 745, 746, 748, 754], "convolut": [2, 9, 13, 32, 36, 309, 329, 347, 544, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 682, 751, 753], "c": [2, 5, 9, 10, 11, 13, 16, 22, 28, 29, 31, 32, 33, 34, 36, 37, 39, 43, 45, 49, 65, 77, 78, 93, 96, 119, 122, 177, 188, 194, 195, 215, 216, 227, 230, 238, 245, 309, 310, 312, 315, 321, 323, 324, 325, 336, 341, 353, 354, 356, 357, 359, 367, 380, 381, 382, 390, 414, 415, 416, 436, 446, 454, 455, 456, 465, 469, 470, 508, 523, 524, 527, 529, 530, 531, 534, 537, 538, 540, 542, 543, 544, 545, 547, 549, 552, 553, 555, 558, 559, 560, 561, 562, 563, 577, 579, 581, 612, 616, 624, 627, 631, 632, 633, 635, 636, 641, 642, 653, 658, 664, 665, 670, 672, 685, 694, 701, 703, 704, 705, 711, 713, 716, 717, 718, 722, 727, 729, 737, 738, 739, 741, 746, 748, 749, 753, 757, 758, 760], "h": [2, 9, 10, 13, 32, 33, 36, 309, 328, 329, 346, 347, 454, 456, 542, 544, 549, 557, 560, 561, 562, 563, 564, 565, 566, 627, 631, 633, 636, 641, 713, 717, 718, 719, 749], "w": [2, 9, 10, 11, 13, 26, 31, 32, 33, 34, 36, 49, 221, 285, 300, 306, 308, 309, 310, 327, 328, 329, 331, 345, 346, 347, 348, 359, 372, 433, 454, 456, 500, 523, 524, 525, 527, 529, 530, 531, 542, 543, 544, 549, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 630, 700, 713, 729, 738, 741, 742], "bigger": 2, "permut": [2, 16, 39, 51, 319, 426, 547, 610, 617], "infer": [2, 5, 9, 10, 13, 16, 28, 32, 33, 36, 39, 76, 78, 86, 90, 91, 95, 98, 103, 112, 113, 114, 115, 116, 258, 259, 316, 422, 465, 499, 537, 538, 542, 544, 547, 567, 612, 691, 713, 716, 720, 721, 733, 738, 743, 751, 752, 755, 757], "correct": [2, 22, 45, 140, 310, 370, 538, 547, 555, 605, 670, 672, 700, 710, 712, 713, 718, 719, 720, 721, 724, 726, 727, 730, 732, 733], "mind": [2, 710, 715, 716, 718, 733, 747], "well": [2, 33, 311, 375, 467, 542, 545, 592, 700, 707, 710, 712, 717, 719, 720, 724, 730, 731, 732, 733, 742, 743, 745, 752, 753, 754, 758], "hf": 2, "tf_model": 2, "tf_input": 2, "data_class": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 328, 329, 454, 458, 593, 618], "_arraywithactiv": [3, 51], "base": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 54, 56, 93, 101, 133, 197, 198, 215, 216, 217, 218, 232, 269, 275, 278, 282, 289, 303, 306, 309, 310, 319, 351, 370, 426, 491, 501, 513, 537, 538, 540, 542, 545, 547, 553, 555, 584, 608, 655, 656, 657, 658, 665, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 691, 695, 698, 700, 711, 712, 714, 718, 719, 720, 724, 726, 728, 729, 730, 732, 733, 734, 735, 736, 738, 745, 753, 758, 760], "abc": [3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 55, 457, 542, 549, 642, 680, 681, 686, 694, 740], "_abc_impl": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 55, 56], "_abc_data": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 55, 56], "gelu": [3, 25, 534, 678, 700], "approxim": [3, 8, 9, 14, 25, 31, 32, 37, 49, 59, 175, 176, 179, 180, 181, 182, 191, 192, 197, 199, 201, 215, 216, 217, 218, 232, 239, 240, 244, 245, 246, 285, 295, 306, 311, 375, 534, 540, 545, 586, 589, 678, 723, 731], "complex_mod": [3, 8, 25, 31, 59, 61, 64, 67, 245, 534, 540, 678, 728], "variant": [3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 93, 94, 95, 96, 98, 99, 100, 103, 107, 108, 109, 119, 122, 126, 127, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 321, 327, 328, 329, 330, 332, 333, 334, 336, 340, 341, 342, 345, 346, 347, 351, 353, 354, 355, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 449, 450, 453, 454, 455, 456, 457, 458, 461, 462, 465, 467, 469, 470, 471, 473, 474, 475, 477, 478, 480, 485, 486, 500, 501, 502, 503, 505, 507, 508, 521, 523, 524, 527, 529, 530, 531, 532, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 583, 584, 586, 589, 590, 591, 593, 597, 598, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 715, 722, 723, 736], "simpli": [3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 93, 94, 95, 96, 98, 99, 100, 103, 107, 108, 109, 122, 126, 127, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 321, 327, 328, 329, 330, 332, 333, 334, 336, 340, 341, 342, 345, 346, 347, 351, 353, 354, 355, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 449, 450, 453, 454, 455, 456, 457, 458, 461, 462, 465, 467, 469, 471, 473, 474, 475, 477, 478, 480, 485, 486, 500, 501, 502, 503, 505, 507, 508, 521, 523, 524, 527, 529, 530, 531, 532, 540, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 583, 584, 589, 590, 591, 593, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 700, 710, 711, 712, 715, 716, 717, 719, 720, 721, 722, 723, 726, 727, 730, 731, 732, 733, 736, 738, 742, 743, 746, 748, 754, 759], "docstr": [3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 107, 108, 109, 119, 122, 126, 127, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 321, 327, 328, 329, 330, 332, 333, 334, 336, 340, 341, 342, 345, 346, 347, 351, 353, 354, 355, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 449, 450, 453, 454, 455, 456, 457, 458, 461, 462, 465, 467, 469, 470, 471, 473, 474, 475, 477, 478, 480, 485, 486, 500, 501, 502, 503, 505, 507, 508, 521, 522, 523, 524, 527, 529, 530, 531, 532, 537, 538, 540, 542, 545, 547, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 709, 710, 713, 717, 725, 726, 727, 728, 731, 734], "liter": [3, 8, 9, 14, 25, 31, 32, 37, 59, 61, 64, 67, 245, 309, 310, 312, 330, 340, 344, 360, 364, 369, 372, 400, 534, 540, 545, 554, 584, 600, 661, 678, 736], "split": [3, 8, 9, 16, 25, 26, 31, 32, 39, 59, 61, 64, 67, 165, 166, 167, 245, 284, 291, 312, 386, 395, 412, 454, 481, 534, 539, 540, 542, 544, 547, 557, 564, 565, 617, 678, 682, 700, 705, 712, 719, 737, 738, 746, 760], "magnitud": [3, 8, 25, 31, 59, 61, 64, 67, 174, 177, 194, 201, 227, 245, 534, 540, 545, 593, 594, 678], "how": [3, 8, 9, 25, 31, 32, 59, 61, 64, 67, 194, 227, 245, 312, 384, 405, 408, 534, 540, 678, 680, 681, 682, 683, 684, 700, 702, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 734, 735, 736, 737, 739, 740, 741, 742, 743, 745, 746, 749, 753], "handl": [3, 7, 8, 9, 25, 26, 30, 31, 32, 52, 59, 61, 64, 67, 147, 148, 149, 150, 151, 155, 160, 161, 169, 173, 179, 191, 216, 232, 238, 239, 244, 245, 312, 384, 405, 408, 534, 539, 540, 545, 555, 597, 669, 671, 678, 686, 705, 713, 718, 719, 720, 725, 726, 727, 729, 730, 731, 732, 733, 735, 736, 742, 750, 760], "data": [3, 5, 8, 9, 10, 13, 14, 16, 18, 19, 20, 21, 22, 23, 25, 26, 28, 31, 32, 33, 36, 37, 39, 41, 42, 43, 44, 45, 46, 51, 52, 54, 55, 56, 59, 61, 64, 67, 76, 77, 78, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 108, 109, 111, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 140, 146, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 250, 252, 258, 259, 260, 261, 262, 263, 264, 270, 271, 272, 273, 275, 290, 295, 301, 303, 306, 309, 310, 312, 316, 320, 321, 332, 333, 334, 350, 355, 357, 371, 384, 405, 408, 420, 421, 422, 423, 424, 430, 434, 435, 436, 440, 442, 458, 471, 473, 474, 477, 503, 534, 537, 539, 540, 542, 544, 545, 547, 549, 551, 552, 554, 555, 556, 557, 558, 560, 561, 562, 564, 565, 567, 568, 572, 573, 574, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 599, 600, 606, 609, 610, 612, 613, 615, 616, 620, 628, 645, 646, 647, 649, 650, 651, 653, 654, 659, 661, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 681, 682, 684, 688, 700, 701, 703, 711, 713, 714, 715, 716, 717, 718, 721, 723, 726, 727, 728, 730, 732, 734, 736, 738, 740, 748, 753, 754, 755, 757, 758, 759], "see": [3, 6, 8, 14, 19, 20, 22, 23, 25, 31, 32, 37, 42, 45, 46, 49, 51, 52, 59, 61, 64, 67, 76, 88, 92, 101, 108, 127, 134, 177, 182, 184, 186, 187, 188, 189, 194, 195, 199, 201, 205, 206, 213, 214, 217, 219, 221, 223, 224, 227, 230, 232, 236, 243, 245, 248, 269, 303, 310, 354, 534, 537, 538, 540, 545, 552, 553, 555, 556, 573, 586, 589, 592, 599, 600, 651, 655, 656, 657, 658, 666, 667, 668, 669, 670, 671, 672, 673, 674, 678, 700, 702, 705, 710, 711, 712, 714, 715, 717, 718, 719, 720, 721, 722, 725, 726, 727, 731, 732, 733, 736, 738, 740, 741, 745, 746, 749], "func_wrapp": [3, 8, 25, 31, 59, 61, 64, 67, 245, 534, 540, 678, 721, 731, 735], "handle_complex_input": [3, 8, 25, 31, 59, 61, 64, 67, 245, 534, 540, 678, 728], "detail": [3, 8, 14, 16, 20, 25, 31, 32, 37, 39, 43, 59, 61, 64, 67, 88, 245, 310, 354, 385, 534, 537, 540, 553, 576, 583, 589, 593, 616, 655, 656, 657, 658, 678, 700, 710, 712, 714, 716, 717, 718, 719, 725, 726, 727, 728, 731, 732, 733, 734, 735, 738, 740, 741, 742, 755, 759], "write": [3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 49, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 78, 84, 85, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 102, 103, 106, 108, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 270, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 286, 288, 289, 290, 291, 294, 295, 296, 301, 303, 306, 309, 310, 311, 312, 315, 316, 317, 319, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 361, 362, 365, 366, 367, 368, 373, 374, 375, 376, 377, 385, 388, 389, 390, 391, 392, 393, 394, 397, 398, 399, 401, 402, 403, 404, 406, 407, 408, 409, 410, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 434, 435, 436, 437, 438, 439, 440, 441, 442, 449, 450, 454, 455, 456, 461, 462, 471, 485, 486, 523, 524, 527, 529, 530, 531, 532, 534, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 592, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 620, 624, 643, 644, 645, 646, 647, 649, 651, 652, 654, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 700, 704, 709, 710, 712, 713, 714, 716, 717, 719, 720, 722, 723, 724, 727, 730, 732, 734, 738, 740, 743, 753, 760], "broadcast": [3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 49, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 78, 84, 85, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 102, 103, 106, 107, 108, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 252, 253, 254, 256, 257, 258, 259, 270, 275, 276, 277, 278, 282, 284, 286, 288, 289, 290, 291, 295, 301, 303, 306, 309, 310, 311, 312, 315, 316, 321, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 341, 342, 344, 345, 346, 347, 350, 353, 354, 355, 361, 362, 365, 366, 368, 373, 374, 375, 376, 377, 383, 385, 388, 393, 401, 402, 403, 404, 406, 409, 410, 414, 417, 418, 419, 420, 421, 423, 424, 434, 435, 436, 437, 440, 441, 442, 449, 450, 454, 455, 456, 461, 462, 471, 485, 486, 523, 524, 527, 529, 530, 531, 532, 534, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 586, 587, 588, 589, 590, 592, 594, 595, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 620, 624, 643, 644, 645, 646, 647, 649, 650, 651, 652, 654, 658, 659, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 694, 718, 720, 722, 723, 724, 733, 734, 738], "element": [3, 5, 8, 9, 10, 13, 14, 16, 18, 19, 20, 22, 25, 26, 28, 29, 31, 32, 33, 36, 37, 39, 41, 42, 43, 45, 51, 52, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 84, 90, 91, 99, 100, 101, 117, 119, 122, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 254, 256, 257, 269, 270, 271, 272, 274, 275, 276, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 303, 306, 309, 310, 312, 321, 332, 333, 334, 337, 342, 345, 346, 347, 351, 352, 356, 357, 358, 380, 381, 382, 390, 391, 392, 394, 397, 407, 409, 411, 432, 433, 435, 436, 437, 438, 439, 440, 446, 449, 450, 461, 462, 478, 480, 500, 501, 503, 507, 508, 534, 537, 540, 542, 544, 545, 547, 549, 551, 552, 553, 554, 555, 556, 567, 573, 575, 577, 578, 583, 588, 590, 591, 593, 597, 605, 608, 609, 610, 611, 612, 613, 614, 615, 624, 627, 633, 644, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 723, 732, 733, 736, 738, 757], "wise": [3, 8, 9, 14, 25, 31, 32, 37, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 174, 175, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 189, 193, 194, 195, 196, 198, 201, 202, 203, 204, 205, 206, 212, 213, 214, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 232, 233, 235, 236, 243, 248, 249, 251, 253, 254, 256, 257, 274, 275, 280, 281, 282, 283, 286, 287, 288, 289, 293, 294, 297, 298, 301, 306, 309, 310, 312, 332, 333, 334, 356, 361, 387, 394, 396, 397, 413, 534, 540, 547, 573, 605, 686, 736], "exampl": [3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 77, 78, 84, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 129, 130, 131, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 269, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 317, 319, 321, 327, 328, 329, 330, 332, 333, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 362, 365, 367, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 390, 391, 392, 394, 395, 396, 397, 399, 400, 405, 406, 407, 408, 409, 411, 412, 413, 417, 418, 419, 422, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 461, 462, 463, 464, 465, 467, 469, 470, 471, 473, 474, 475, 477, 478, 480, 481, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 536, 537, 538, 539, 540, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 591, 593, 595, 597, 598, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 627, 628, 630, 631, 632, 633, 635, 636, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 691, 694, 698, 704, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 727, 728, 730, 731, 733, 734, 738, 740, 741, 742, 743, 745, 746, 750, 751, 754, 756, 759, 760], "6": [3, 5, 6, 8, 9, 10, 11, 13, 14, 16, 18, 19, 21, 22, 28, 29, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 51, 52, 59, 61, 66, 72, 77, 78, 90, 91, 94, 95, 98, 103, 107, 108, 109, 117, 119, 173, 174, 176, 177, 179, 180, 181, 182, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 217, 219, 220, 222, 224, 225, 226, 227, 229, 230, 231, 233, 234, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 248, 249, 251, 253, 254, 255, 256, 257, 258, 259, 276, 278, 285, 286, 288, 289, 290, 292, 299, 301, 303, 306, 307, 309, 310, 311, 312, 317, 319, 321, 330, 332, 335, 336, 340, 341, 345, 348, 351, 352, 356, 359, 362, 374, 376, 377, 378, 380, 381, 382, 386, 390, 391, 395, 396, 399, 400, 405, 406, 408, 412, 413, 422, 424, 425, 427, 432, 434, 435, 436, 437, 439, 441, 442, 447, 449, 450, 453, 454, 455, 461, 462, 469, 470, 471, 486, 500, 501, 502, 503, 505, 509, 523, 524, 525, 526, 527, 528, 529, 531, 533, 534, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 571, 573, 574, 575, 576, 578, 579, 580, 583, 584, 585, 588, 591, 593, 594, 595, 597, 598, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 624, 625, 635, 636, 642, 643, 644, 645, 646, 647, 649, 650, 651, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 681, 700, 708, 711, 714, 716, 718, 719, 722, 729, 733, 736, 738, 740, 741, 742], "138": [3, 59, 534], "165": [3, 59, 534, 544, 568], "hardswish": [3, 25, 534, 678], "leaky_relu": [3, 25, 534], "alpha": [3, 8, 9, 25, 31, 32, 56, 61, 177, 243, 249, 260, 301, 303, 310, 316, 358, 421, 422, 423, 534, 540, 678, 726, 731, 732], "float": [3, 5, 6, 8, 9, 10, 11, 13, 14, 15, 17, 18, 20, 22, 25, 28, 29, 31, 32, 33, 34, 36, 37, 38, 40, 41, 45, 49, 51, 61, 67, 76, 77, 78, 85, 87, 89, 90, 91, 92, 93, 97, 98, 102, 106, 110, 114, 119, 123, 127, 133, 134, 137, 143, 152, 161, 165, 166, 169, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 189, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 205, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 255, 257, 258, 259, 260, 261, 263, 264, 274, 275, 281, 282, 287, 289, 290, 293, 294, 295, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 321, 332, 333, 334, 351, 354, 357, 358, 369, 371, 372, 373, 376, 389, 407, 414, 415, 416, 419, 420, 421, 422, 423, 424, 434, 435, 436, 437, 442, 448, 449, 450, 458, 467, 491, 492, 495, 500, 501, 521, 523, 524, 527, 529, 530, 531, 534, 535, 537, 538, 539, 540, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 555, 567, 570, 571, 572, 574, 577, 578, 579, 581, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 597, 600, 602, 603, 604, 621, 622, 623, 630, 643, 646, 647, 653, 655, 656, 657, 658, 663, 664, 666, 667, 668, 669, 670, 671, 672, 678, 681, 682, 685, 686, 714, 718, 720, 723, 724, 726, 727, 729, 730, 732, 733, 734, 736, 738, 740, 742], "slope": [3, 9, 25, 32, 61, 249, 252, 301, 534, 678], "neg": [3, 8, 9, 14, 16, 18, 23, 25, 31, 32, 37, 39, 41, 46, 49, 61, 64, 67, 76, 87, 89, 101, 194, 201, 208, 209, 227, 228, 232, 236, 241, 259, 269, 271, 303, 310, 316, 355, 360, 364, 424, 534, 537, 540, 545, 547, 551, 556, 573, 575, 593, 597, 599, 600, 606, 608, 609, 613, 646, 673, 674, 678, 718, 730], "section": [3, 9, 20, 32, 61, 309, 312, 342, 352, 386, 395, 412, 553, 655, 656, 657, 658, 700, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 736, 737, 741, 742, 749, 756, 759], "leaki": [3, 25, 61, 534, 678], "relu": [3, 9, 24, 25, 32, 61, 252, 253, 257, 301, 534, 678, 700, 732, 741, 742], "39": [3, 8, 9, 14, 18, 25, 31, 32, 34, 37, 41, 61, 180, 215, 217, 219, 249, 301, 309, 321, 328, 330, 347, 350, 435, 523, 534, 540, 543, 545, 555, 580, 588, 646, 665], "85": [3, 9, 18, 25, 31, 32, 34, 36, 41, 52, 61, 179, 188, 189, 233, 249, 255, 301, 321, 435, 500, 527, 534, 540, 542, 543, 544, 551, 568, 645, 646, 647], "17": [3, 9, 14, 25, 31, 32, 33, 34, 36, 37, 41, 52, 61, 62, 93, 177, 194, 219, 227, 258, 299, 303, 309, 312, 327, 328, 336, 337, 340, 341, 345, 346, 348, 351, 390, 455, 470, 523, 525, 534, 537, 540, 542, 543, 544, 545, 549, 551, 558, 567, 568, 576, 580, 632, 645, 646, 647, 649, 718], "log_softmax": [3, 25, 534], "axi": [3, 5, 8, 9, 10, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 26, 28, 31, 32, 33, 37, 38, 39, 41, 42, 43, 44, 45, 46, 49, 62, 66, 92, 93, 96, 167, 241, 246, 278, 279, 285, 292, 306, 309, 311, 312, 315, 319, 321, 330, 331, 337, 340, 342, 352, 375, 379, 385, 386, 387, 390, 391, 392, 395, 400, 405, 406, 408, 409, 411, 412, 417, 418, 419, 427, 432, 435, 436, 437, 439, 440, 441, 442, 454, 461, 522, 534, 537, 539, 540, 542, 544, 545, 546, 547, 548, 551, 552, 553, 554, 555, 556, 566, 573, 576, 584, 599, 600, 602, 603, 604, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 649, 650, 651, 655, 659, 660, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 678, 682, 683, 688, 718, 720, 722, 724, 726, 727, 730, 731, 733, 736, 738, 740, 743, 745], "ax": [3, 9, 14, 16, 19, 22, 23, 25, 32, 37, 39, 42, 45, 46, 51, 55, 62, 66, 167, 278, 279, 292, 299, 306, 307, 309, 312, 315, 321, 337, 342, 352, 399, 400, 406, 417, 439, 440, 441, 442, 454, 522, 539, 542, 545, 547, 552, 555, 556, 573, 584, 592, 595, 596, 600, 607, 609, 610, 613, 615, 617, 620, 650, 651, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 720, 722, 733, 734, 738, 740], "along": [3, 5, 8, 9, 10, 14, 15, 16, 18, 19, 21, 22, 23, 25, 26, 28, 31, 32, 33, 37, 38, 39, 41, 42, 44, 45, 46, 49, 62, 66, 72, 92, 93, 167, 241, 244, 246, 271, 272, 278, 279, 292, 299, 303, 306, 307, 309, 310, 311, 312, 315, 321, 330, 336, 337, 340, 341, 342, 352, 369, 375, 385, 386, 387, 391, 392, 400, 405, 409, 417, 418, 419, 435, 436, 437, 439, 440, 441, 442, 454, 461, 536, 537, 539, 540, 542, 545, 546, 547, 548, 551, 552, 554, 555, 556, 573, 588, 597, 599, 600, 602, 603, 604, 606, 609, 610, 611, 613, 614, 616, 618, 619, 621, 622, 623, 649, 650, 651, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 700, 710, 713, 722, 730, 734, 736, 738, 753], "98": [3, 9, 11, 18, 25, 31, 34, 41, 62, 189, 192, 240, 296, 306, 527, 534, 540, 543, 545, 549, 552, 555, 588, 625, 636, 645, 647, 654, 665], "37": [3, 8, 9, 25, 31, 32, 36, 51, 62, 180, 188, 237, 240, 244, 317, 351, 425, 540, 544, 545, 549, 551, 568, 585, 632, 646, 719], "35": [3, 13, 14, 25, 31, 32, 36, 37, 41, 62, 182, 241, 309, 330, 340, 540, 544, 545, 552, 555, 568, 573, 580, 646, 654, 665], "0719": [3, 25, 62], "62": [3, 25, 31, 41, 62, 212, 240, 540, 550, 551, 643, 645, 647], "221": [3, 62], "7": [3, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 51, 52, 61, 62, 63, 64, 76, 77, 78, 92, 95, 96, 113, 119, 122, 152, 174, 177, 180, 184, 185, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 200, 201, 204, 205, 206, 211, 212, 213, 214, 215, 216, 217, 219, 222, 224, 225, 226, 227, 229, 230, 231, 233, 234, 237, 238, 239, 241, 244, 245, 247, 248, 249, 251, 253, 254, 256, 257, 258, 259, 261, 264, 274, 276, 278, 279, 285, 286, 287, 289, 291, 292, 299, 301, 303, 306, 307, 309, 310, 311, 312, 317, 321, 327, 328, 329, 330, 335, 336, 340, 341, 345, 348, 350, 351, 352, 356, 365, 373, 374, 375, 376, 377, 380, 381, 382, 386, 390, 395, 396, 399, 400, 405, 406, 408, 412, 413, 422, 424, 425, 432, 435, 436, 438, 439, 442, 447, 449, 450, 454, 455, 458, 469, 470, 471, 478, 485, 486, 500, 503, 523, 524, 526, 527, 528, 529, 531, 534, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 558, 559, 561, 563, 566, 567, 568, 571, 573, 574, 575, 576, 579, 580, 583, 585, 588, 591, 593, 594, 595, 597, 598, 602, 603, 604, 605, 608, 609, 614, 616, 617, 619, 624, 625, 632, 636, 643, 644, 645, 646, 647, 649, 654, 655, 657, 659, 660, 662, 663, 664, 665, 667, 669, 671, 672, 711, 712, 716, 718, 719, 722, 727, 730, 733], "82": [3, 8, 34, 41, 62, 180, 321, 435, 523, 543, 646, 647, 708], "mish": [3, 25, 534, 678], "30340147": [3, 63, 534], "86509842": [3, 25, 63, 534], "sigmoid": [3, 9, 25, 32, 251, 301, 316, 420, 534, 678, 738, 741, 742], "269": [3, 65], "731": [3, 65], "881": [3, 8, 31, 65, 180, 193, 233, 540], "softmax": [3, 13, 24, 25, 36, 534, 544, 570, 571, 678, 700], "422": [3, 66, 534], "155": [3, 36, 66, 534, 544, 568], "softplu": [3, 25, 534, 678, 736], "beta": [3, 9, 17, 25, 32, 40, 67, 260, 263, 264, 303, 310, 311, 316, 358, 376, 422, 423, 534, 550, 643, 678, 736], "threshold": [3, 8, 9, 25, 31, 32, 67, 225, 226, 257, 275, 301, 306, 311, 312, 373, 376, 407, 534, 540, 678, 736], "3461": [3, 25, 67, 534], "6491": [3, 25, 67, 534], "535": [3, 25, 67, 534, 724], "22": [3, 8, 9, 10, 18, 22, 25, 32, 33, 36, 41, 62, 67, 189, 197, 309, 310, 312, 317, 321, 327, 328, 330, 345, 346, 347, 348, 351, 356, 384, 425, 435, 455, 486, 521, 534, 540, 544, 545, 549, 552, 555, 567, 568, 576, 581, 588, 632, 642, 645, 646, 647, 654, 664, 665, 711, 718, 724], "09": [3, 8, 34, 41, 67, 232, 242, 523, 534, 540, 543, 646], "31": [3, 8, 9, 31, 32, 33, 36, 41, 62, 67, 93, 188, 219, 227, 309, 312, 321, 329, 330, 384, 435, 449, 534, 537, 540, 542, 646, 647, 741], "55": [3, 32, 41, 67, 188, 247, 321, 435, 469, 540, 542, 545, 551, 555, 581, 588, 646, 647, 665, 714], "13": [3, 8, 9, 13, 14, 18, 22, 31, 32, 33, 34, 36, 39, 41, 45, 51, 67, 122, 152, 177, 189, 192, 201, 212, 232, 241, 285, 292, 299, 306, 309, 312, 329, 330, 340, 345, 351, 384, 386, 390, 395, 412, 424, 435, 436, 449, 450, 454, 455, 470, 492, 500, 523, 534, 538, 539, 540, 542, 543, 544, 545, 547, 548, 549, 552, 553, 555, 558, 559, 567, 568, 576, 580, 588, 594, 619, 623, 636, 645, 646, 647, 654, 655, 663, 664, 665, 718, 722, 731], "collect": [4, 26, 27, 534, 539, 542, 543, 544, 546, 549, 550, 551, 637, 678, 682, 683, 685, 686, 711, 719, 724, 728, 729, 732, 733, 745, 751, 753, 756], "accept": [4, 5, 8, 9, 14, 27, 31, 32, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 109, 125, 129, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 259, 269, 270, 276, 279, 280, 300, 303, 306, 308, 309, 310, 312, 321, 327, 328, 329, 330, 332, 333, 334, 340, 345, 346, 347, 348, 358, 400, 434, 437, 441, 447, 455, 456, 461, 465, 467, 469, 471, 485, 503, 508, 532, 537, 538, 540, 542, 543, 544, 545, 547, 549, 550, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 599, 600, 601, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 624, 643, 650, 651, 653, 654, 655, 656, 657, 658, 659, 662, 666, 667, 668, 669, 670, 671, 672, 673, 674, 700, 710, 711, 712, 715, 718, 721, 722, 723, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 740, 748, 751], "_to_ivi": 4, "_to_n": 4, "inplac": [4, 10, 26, 33, 49, 445, 447, 468, 471, 472, 489, 490, 542, 549, 631, 632, 636, 641, 642, 679, 686, 713, 715, 722, 726, 728, 731, 736, 740, 742], "to_ignor": [4, 24, 47, 549, 635, 636], "args_to_ivi": 4, "include_deriv": [4, 27, 549, 625, 636], "form": [4, 5, 9, 14, 26, 28, 37, 48, 49, 77, 78, 95, 99, 100, 258, 261, 270, 276, 303, 306, 310, 312, 357, 364, 387, 396, 400, 413, 444, 504, 506, 537, 542, 544, 545, 549, 572, 574, 576, 577, 578, 579, 581, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 597, 625, 636, 681, 703, 705, 710, 727, 733, 736, 742, 743, 753, 754, 759], "nest": [4, 26, 27, 52, 55, 197, 476, 505, 522, 525, 540, 542, 543, 548, 621, 622, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 680, 683, 684, 686, 715, 717, 718, 727, 729, 734, 741, 742, 746, 748, 753], "unchang": [4, 8, 309, 312, 352, 390, 544, 567], "recurs": [4, 26, 27, 120, 121, 153, 154, 459, 460, 538, 539, 542, 549, 624, 625, 628, 634, 635, 636, 711, 714, 717, 718, 727, 730, 742, 746], "deriv": [4, 5, 9, 11, 27, 28, 32, 34, 86, 91, 98, 103, 259, 263, 280, 303, 306, 523, 524, 527, 528, 529, 530, 531, 537, 543, 548, 549, 623, 625, 636, 684, 686, 687, 720, 721, 740, 742], "word": [4, 76, 312, 393, 537, 551, 647, 679, 682, 718, 730, 731, 748], "args_to_n": [4, 730], "cont_inplac": 4, "updat": [4, 10, 11, 26, 33, 34, 49, 471, 485, 486, 489, 490, 512, 523, 524, 527, 529, 530, 531, 542, 543, 544, 548, 549, 567, 569, 621, 622, 623, 631, 632, 636, 641, 642, 679, 685, 686, 691, 700, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 722, 726, 728, 729, 731, 732, 733, 736, 738, 740, 741, 743, 746], "place": [4, 5, 8, 9, 10, 14, 16, 26, 28, 30, 31, 32, 33, 39, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 109, 125, 129, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 258, 259, 262, 269, 270, 274, 276, 279, 280, 284, 286, 287, 288, 289, 291, 292, 293, 297, 298, 303, 306, 309, 310, 312, 321, 327, 328, 329, 330, 332, 333, 334, 340, 345, 346, 347, 348, 358, 390, 400, 405, 421, 434, 437, 441, 447, 455, 456, 461, 465, 467, 469, 470, 471, 485, 489, 503, 508, 512, 532, 537, 538, 539, 540, 542, 543, 544, 545, 547, 549, 550, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 599, 600, 601, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 624, 643, 650, 651, 653, 654, 655, 656, 657, 658, 659, 662, 666, 667, 668, 669, 670, 671, 672, 673, 674, 684, 686, 700, 706, 709, 712, 713, 714, 717, 718, 719, 721, 722, 723, 726, 727, 731, 732, 733, 734, 736, 743, 748, 755], "ignor": [4, 5, 9, 26, 32, 94, 309, 310, 312, 332, 333, 334, 358, 402, 403, 407, 537, 544, 545, 549, 570, 582, 635, 636, 686, 717, 719, 722, 733, 746, 759], "decid": [4, 26, 549, 624, 625, 634, 635, 636, 700, 710, 711, 720, 736], "go": [4, 9, 36, 309, 351, 549, 624, 625, 634, 635, 636, 700, 705, 706, 708, 710, 711, 712, 713, 716, 717, 719, 720, 722, 725, 731, 732, 733, 734, 737, 741, 746, 749, 753, 754, 758, 760], "deeper": [4, 549, 624, 625, 634, 635, 636, 702, 712, 713, 733, 737], "to_ivi": [4, 27, 549, 637, 730], "leaf": [4, 26, 45, 52, 549, 634, 635, 637, 664, 718, 727, 741], "nativearrai": [4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 22, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 77, 78, 84, 86, 91, 92, 93, 94, 95, 96, 98, 99, 100, 103, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 119, 122, 125, 126, 127, 129, 131, 133, 134, 140, 150, 151, 167, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 259, 260, 263, 264, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 317, 319, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 388, 389, 390, 391, 392, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 435, 436, 437, 438, 443, 446, 447, 449, 450, 454, 455, 456, 458, 461, 462, 463, 464, 465, 467, 469, 470, 471, 474, 477, 478, 480, 485, 486, 487, 490, 499, 500, 501, 502, 503, 505, 507, 508, 510, 521, 523, 524, 525, 527, 529, 530, 531, 532, 534, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 624, 625, 626, 627, 631, 632, 633, 636, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 687, 715, 718, 722, 724, 726, 727, 728, 730, 731, 734, 735, 738, 740, 748], "manner": [4, 27, 549, 636, 702, 711, 721, 723, 727, 731, 734, 741, 745, 746, 749, 751, 759, 760], "travers": [4, 27, 549, 628, 636, 718, 720, 724, 738], "lowest": [4, 9, 18, 27, 32, 41, 321, 437, 549, 551, 636, 645, 727, 746, 748, 750, 754, 758], "leav": [4, 9, 27, 29, 31, 32, 33, 36, 37, 39, 45, 52, 119, 122, 194, 250, 251, 312, 385, 390, 402, 403, 404, 417, 418, 419, 435, 436, 441, 458, 505, 547, 549, 563, 571, 576, 593, 607, 611, 616, 618, 619, 624, 625, 634, 635, 636, 637, 663, 664, 694, 700, 710, 718, 719, 720, 722, 723, 726, 727, 730, 731, 733, 741, 742], "search": [4, 9, 27, 32, 650, 651, 702, 709, 711, 718, 722, 733, 734], "to_n": [4, 27, 738], "mayb": [4, 700, 711, 719, 738, 740], "_arraywithcr": [5, 51], "asarrai": [5, 9, 10, 21, 28, 32, 33, 44, 77, 319, 426, 427, 454, 465, 469, 470, 500, 501, 537, 542, 544, 553, 554, 558, 656, 660, 724, 728, 731, 732], "devic": [5, 9, 18, 26, 28, 32, 41, 51, 54, 55, 56, 76, 77, 78, 85, 86, 87, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 147, 148, 149, 150, 151, 152, 153, 154, 155, 160, 161, 162, 163, 165, 166, 167, 168, 169, 171, 173, 258, 259, 269, 270, 303, 316, 388, 420, 421, 423, 424, 445, 459, 460, 537, 542, 551, 644, 645, 646, 647, 679, 681, 682, 683, 684, 685, 686, 687, 688, 691, 700, 703, 712, 713, 716, 720, 724, 727, 728, 732, 733, 734, 736, 738, 743, 746, 747, 748, 752, 753, 755, 756, 757, 758], "ndarrai": [5, 9, 10, 28, 32, 77, 78, 95, 309, 310, 312, 321, 352, 369, 405, 440, 441, 507, 537, 542, 691, 694, 710, 715, 720, 721, 724, 726, 730, 731, 732, 734, 736, 738, 740, 743, 748], "boolean": [5, 6, 8, 9, 10, 16, 19, 22, 26, 28, 29, 31, 32, 33, 39, 42, 45, 51, 52, 73, 75, 77, 78, 84, 90, 106, 122, 124, 126, 127, 130, 146, 156, 164, 170, 184, 185, 186, 187, 188, 189, 221, 222, 223, 224, 287, 306, 310, 312, 360, 369, 372, 380, 381, 382, 386, 388, 390, 391, 392, 395, 399, 406, 412, 443, 446, 464, 467, 468, 472, 473, 474, 475, 476, 477, 478, 487, 490, 493, 494, 496, 497, 521, 536, 537, 538, 539, 540, 542, 547, 548, 549, 552, 555, 608, 609, 610, 612, 614, 615, 617, 619, 621, 622, 634, 652, 653, 654, 666, 668, 685, 718, 720, 727, 731, 733, 736], "never": [5, 9, 16, 28, 32, 39, 78, 312, 380, 381, 382, 386, 388, 390, 391, 392, 395, 399, 406, 412, 464, 542, 547, 608, 609, 610, 612, 614, 615, 617, 619, 712, 720, 730, 731, 733], "valueerror": [5, 16, 28, 32, 39, 43, 78, 309, 312, 342, 352, 380, 381, 386, 388, 390, 391, 392, 399, 405, 412, 547, 608, 609, 610, 612, 614, 615, 617, 619, 658, 695, 724], "reus": [5, 28, 32, 39, 78, 380, 381, 386, 388, 390, 391, 392, 399, 412, 608, 609, 610, 612, 614, 615, 617, 619, 724, 733, 758], "exist": [5, 9, 10, 26, 28, 32, 39, 78, 312, 380, 381, 385, 386, 388, 390, 391, 392, 399, 412, 453, 489, 542, 547, 606, 608, 609, 610, 612, 614, 615, 617, 619, 686, 688, 700, 702, 703, 710, 711, 714, 716, 721, 722, 723, 727, 728, 730, 731, 733, 736, 738, 746, 748, 751, 753, 756, 759], "buffer": [5, 28, 32, 39, 78, 89, 380, 381, 386, 388, 390, 391, 392, 399, 412, 537, 608, 609, 610, 612, 614, 615, 617, 619, 684, 730, 746], "possibl": [5, 9, 28, 32, 39, 49, 78, 201, 244, 258, 303, 309, 311, 312, 331, 373, 380, 381, 382, 386, 388, 390, 391, 392, 399, 412, 481, 540, 542, 544, 555, 567, 608, 609, 610, 612, 614, 615, 617, 619, 666, 668, 697, 700, 703, 705, 710, 711, 712, 714, 717, 718, 720, 722, 723, 725, 727, 729, 730, 731, 732, 733, 736, 738, 741, 745, 746, 751, 753, 759], "nativedtyp": [5, 6, 9, 13, 14, 18, 19, 22, 28, 32, 37, 41, 42, 45, 76, 77, 78, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 102, 103, 105, 106, 111, 112, 113, 114, 115, 116, 117, 118, 123, 124, 128, 130, 132, 136, 146, 258, 259, 260, 261, 262, 263, 264, 273, 278, 292, 303, 306, 316, 321, 420, 421, 422, 423, 424, 434, 435, 436, 437, 440, 537, 538, 544, 545, 551, 552, 554, 555, 567, 600, 645, 646, 647, 650, 651, 661, 663, 664, 669, 671, 681, 720, 721, 726, 734, 738], "nativedevic": [5, 7, 9, 18, 28, 30, 32, 41, 76, 77, 78, 85, 86, 87, 90, 91, 92, 93, 95, 96, 97, 98, 101, 102, 103, 148, 149, 150, 151, 152, 155, 160, 161, 162, 163, 165, 166, 167, 168, 169, 173, 258, 259, 269, 303, 316, 420, 421, 423, 424, 537, 539, 551, 644, 645, 646, 647, 681, 686, 687, 720, 721, 724, 726, 734], "interpret": [5, 9, 28, 32, 77, 78, 89, 95, 321, 434, 537, 719, 754], "9": [5, 6, 8, 9, 10, 11, 13, 14, 16, 18, 20, 21, 22, 25, 29, 31, 32, 33, 34, 36, 37, 39, 41, 43, 44, 45, 51, 52, 59, 76, 77, 78, 95, 112, 113, 114, 115, 116, 119, 122, 175, 177, 179, 180, 183, 184, 185, 188, 194, 195, 201, 208, 214, 215, 216, 222, 223, 225, 226, 227, 230, 232, 233, 237, 238, 241, 242, 243, 248, 250, 253, 254, 280, 281, 285, 291, 292, 299, 301, 306, 307, 309, 311, 312, 319, 321, 327, 328, 329, 330, 335, 336, 340, 341, 345, 346, 348, 350, 351, 362, 373, 374, 376, 380, 381, 382, 386, 390, 395, 405, 406, 407, 409, 412, 422, 424, 427, 436, 450, 454, 455, 456, 458, 461, 469, 470, 473, 474, 477, 485, 486, 500, 502, 523, 524, 525, 529, 534, 537, 538, 540, 542, 543, 544, 545, 547, 549, 551, 552, 553, 554, 555, 558, 559, 560, 563, 566, 567, 568, 573, 574, 576, 579, 580, 583, 584, 585, 588, 591, 593, 594, 595, 597, 598, 605, 609, 613, 614, 616, 617, 619, 624, 625, 630, 632, 635, 636, 644, 645, 646, 647, 649, 654, 655, 657, 659, 660, 662, 664, 665, 667, 669, 671, 672, 686, 718, 722, 729, 733, 741, 742, 749], "39999998": [5, 77, 78, 537, 553, 656], "5999999": [5, 36, 77, 78, 537, 544, 567, 571], "0999999": [5, 22, 77, 78, 289, 306, 537, 667], "10000038": [5, 77, 78, 537], "np": [5, 8, 9, 31, 32, 33, 77, 78, 84, 95, 130, 207, 211, 309, 310, 336, 341, 353, 500, 537, 538, 540, 542, 549, 630, 691, 694, 700, 710, 715, 720, 721, 724, 726, 730, 731, 732, 733, 734, 736, 738, 740, 741, 743, 748], "order": [5, 9, 10, 13, 14, 16, 20, 21, 26, 32, 36, 37, 39, 43, 44, 49, 51, 52, 77, 78, 94, 101, 182, 201, 244, 269, 285, 303, 306, 310, 312, 315, 319, 354, 357, 358, 359, 363, 367, 369, 372, 390, 391, 392, 397, 398, 409, 414, 415, 416, 427, 537, 540, 544, 545, 547, 548, 552, 553, 554, 558, 559, 560, 561, 562, 563, 566, 577, 578, 584, 593, 594, 598, 600, 609, 612, 621, 622, 653, 655, 656, 657, 658, 659, 661, 662, 680, 684, 685, 687, 700, 702, 710, 711, 712, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 731, 732, 733, 734, 735, 736, 741, 743, 746, 749, 752, 753, 754, 756, 759], "90786433e": [5, 77, 78, 537], "310": [5, 77, 78, 537], "copy_arrai": [5, 28, 537], "to_ivy_arrai": [5, 28, 84, 537], "empty_lik": [5, 28, 310, 356, 537], "deafult": [5, 19, 42, 86, 537, 650], "uniniti": [5, 85, 86, 537, 725], "from_dlpack": [5, 28, 537], "full_lik": [5, 28, 537, 734], "fill_valu": [5, 9, 19, 28, 32, 42, 90, 91, 206, 214, 316, 424, 537, 540, 552, 653, 688, 720, 732, 734], "scalar": [5, 8, 9, 10, 14, 25, 28, 31, 32, 33, 37, 49, 61, 91, 96, 177, 198, 243, 255, 276, 277, 279, 282, 285, 287, 289, 294, 301, 306, 310, 312, 358, 380, 381, 382, 394, 508, 521, 537, 540, 542, 545, 600, 720, 729, 731, 746, 753], "fill": [5, 8, 9, 18, 19, 26, 28, 31, 32, 41, 42, 85, 90, 91, 93, 96, 97, 98, 102, 103, 228, 259, 303, 310, 312, 316, 360, 364, 369, 372, 389, 408, 421, 423, 424, 537, 540, 551, 552, 645, 653, 681, 710, 732], "equal": [5, 6, 8, 9, 10, 14, 15, 16, 18, 20, 21, 22, 26, 29, 31, 32, 33, 37, 38, 39, 41, 44, 51, 52, 87, 89, 90, 91, 97, 98, 106, 186, 188, 192, 197, 199, 208, 209, 230, 232, 237, 240, 241, 245, 271, 272, 274, 287, 303, 306, 309, 312, 315, 321, 331, 386, 395, 412, 417, 418, 419, 437, 443, 446, 522, 537, 538, 540, 542, 545, 546, 547, 551, 552, 553, 554, 555, 576, 585, 586, 589, 591, 597, 602, 605, 607, 612, 614, 620, 647, 653, 655, 656, 657, 658, 659, 662, 667, 669, 670, 671, 672, 681, 682, 717, 718, 720, 722, 724, 732, 733], "000123": [5, 91, 537], "ones": [5, 9, 11, 13, 18, 26, 28, 32, 36, 41, 87, 91, 96, 98, 103, 153, 154, 190, 259, 303, 523, 537, 539, 540, 543, 544, 562, 563, 645, 646, 647, 700, 710, 715, 719, 722, 726, 727, 733, 740, 741, 753], "linspac": [5, 28, 76, 537, 700, 726, 736, 738, 760], "stop": [5, 9, 11, 28, 32, 34, 76, 92, 93, 167, 310, 369, 372, 487, 524, 527, 529, 530, 531, 532, 537, 539, 542, 543, 548, 549, 621, 622, 623, 635, 686, 726, 729, 736, 738, 746, 753], "num": [5, 28, 92, 93, 537, 712, 726, 738], "endpoint": [5, 28, 92, 93, 537, 681, 726], "logspac": [5, 28, 537, 738], "10": [5, 8, 9, 10, 11, 13, 14, 18, 20, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52, 76, 91, 92, 93, 176, 184, 185, 188, 192, 199, 204, 206, 212, 214, 216, 227, 233, 240, 241, 246, 251, 274, 277, 282, 284, 285, 287, 288, 289, 291, 292, 296, 299, 306, 309, 312, 321, 327, 328, 329, 330, 340, 345, 346, 348, 350, 351, 352, 382, 384, 386, 390, 395, 406, 412, 432, 435, 436, 439, 441, 442, 454, 455, 456, 458, 461, 462, 464, 469, 470, 478, 486, 490, 495, 500, 502, 514, 517, 529, 537, 540, 542, 543, 544, 545, 547, 549, 550, 551, 552, 553, 554, 555, 558, 559, 561, 567, 574, 576, 580, 581, 583, 584, 585, 588, 593, 594, 595, 609, 614, 615, 616, 617, 619, 630, 632, 635, 636, 643, 644, 645, 646, 647, 653, 655, 661, 663, 664, 665, 666, 668, 669, 671, 672, 686, 700, 703, 711, 714, 718, 719, 720, 722, 729, 732, 733, 738, 740, 741, 758], "rang": [5, 9, 22, 28, 32, 76, 92, 93, 241, 310, 312, 321, 358, 366, 393, 401, 403, 410, 435, 436, 437, 454, 522, 537, 540, 542, 553, 555, 655, 663, 664, 669, 671, 681, 700, 720, 724, 727, 733, 738, 741, 742, 743, 753, 759], "log": [5, 8, 9, 14, 28, 31, 32, 37, 67, 93, 217, 219, 232, 250, 251, 290, 297, 301, 306, 311, 316, 375, 420, 534, 537, 540, 591, 678, 712, 718, 719, 722, 727, 730, 731, 732, 733, 735, 736, 738, 741], "space": [5, 8, 9, 10, 28, 31, 32, 33, 76, 92, 93, 246, 285, 306, 454, 458, 537, 540, 542, 703, 736], "sequenc": [5, 9, 13, 14, 16, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 87, 89, 91, 93, 96, 98, 103, 107, 109, 122, 126, 127, 134, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 255, 256, 257, 259, 262, 267, 268, 274, 275, 276, 278, 280, 286, 287, 293, 295, 297, 298, 299, 301, 303, 307, 309, 310, 312, 316, 321, 324, 325, 332, 333, 334, 336, 337, 341, 342, 344, 351, 352, 360, 361, 363, 367, 368, 369, 372, 373, 374, 376, 377, 378, 380, 381, 382, 385, 386, 387, 393, 395, 396, 398, 399, 401, 404, 406, 408, 409, 412, 413, 414, 416, 417, 418, 419, 421, 422, 434, 435, 436, 437, 442, 443, 446, 447, 449, 450, 454, 455, 456, 458, 461, 462, 465, 467, 469, 470, 471, 473, 474, 477, 481, 485, 486, 500, 501, 503, 505, 507, 508, 521, 522, 525, 526, 527, 532, 537, 540, 542, 543, 544, 545, 547, 549, 555, 556, 557, 558, 559, 560, 561, 562, 564, 566, 567, 568, 570, 571, 572, 573, 578, 579, 580, 581, 583, 584, 586, 588, 590, 591, 597, 600, 602, 603, 604, 605, 606, 608, 609, 611, 612, 613, 614, 615, 616, 619, 620, 624, 631, 641, 644, 645, 646, 647, 649, 652, 655, 656, 657, 658, 659, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 685, 687, 712, 719, 720, 721, 722, 724, 733, 734, 736, 738, 743, 745, 756], "gener": [5, 8, 9, 13, 18, 24, 28, 31, 32, 36, 41, 47, 76, 92, 93, 101, 109, 194, 197, 207, 208, 223, 227, 236, 258, 261, 265, 266, 267, 268, 269, 303, 310, 316, 321, 370, 422, 434, 537, 538, 540, 544, 545, 547, 551, 555, 567, 591, 595, 598, 620, 644, 645, 647, 648, 670, 686, 694, 710, 711, 712, 713, 714, 715, 717, 720, 721, 722, 723, 724, 726, 727, 730, 731, 732, 734, 737, 738, 740, 742, 743, 745, 746, 748, 751, 752, 753, 754, 755, 756, 757, 758, 759], "relev": [5, 28, 93, 537, 686, 700, 703, 710, 711, 712, 715, 718, 719, 720, 722, 728, 729, 732, 733, 741, 747, 751, 758, 759], "sampl": [5, 8, 9, 18, 22, 28, 31, 32, 41, 45, 92, 93, 246, 309, 312, 316, 332, 333, 334, 344, 403, 420, 421, 422, 423, 424, 537, 540, 551, 555, 644, 645, 646, 647, 670, 672, 682, 732, 733], "on_valu": [5, 28, 93, 96, 537], "off_valu": [5, 28, 93, 96, 537], "cuda": [5, 9, 18, 28, 32, 41, 92, 93, 96, 147, 148, 149, 163, 165, 316, 420, 421, 423, 424, 537, 539, 551, 644, 645, 646, 647, 681, 682, 683, 684, 685, 686, 687, 700, 738, 746, 748, 758], "cpu": [5, 7, 9, 18, 28, 30, 32, 41, 76, 87, 90, 92, 93, 96, 97, 98, 103, 147, 148, 150, 151, 152, 153, 158, 161, 163, 165, 168, 169, 171, 173, 316, 420, 421, 423, 424, 537, 539, 545, 551, 582, 644, 645, 646, 647, 681, 682, 683, 684, 685, 686, 687, 700, 708, 711, 712, 717, 720, 721, 731, 733, 746, 751, 753, 756, 758], "evenli": [5, 8, 9, 13, 16, 26, 28, 31, 36, 39, 76, 92, 93, 246, 309, 351, 537, 540, 544, 547, 557, 558, 559, 560, 562, 564, 566, 614], "descript": [5, 8, 9, 14, 31, 32, 37, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 109, 125, 129, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 259, 270, 276, 279, 303, 306, 309, 310, 312, 321, 327, 328, 329, 330, 332, 333, 334, 340, 345, 346, 347, 348, 358, 400, 434, 437, 461, 465, 467, 469, 508, 532, 537, 538, 540, 542, 543, 544, 545, 547, 549, 550, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 599, 600, 601, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 624, 643, 650, 651, 653, 654, 655, 656, 657, 658, 659, 662, 666, 667, 668, 669, 670, 671, 672, 673, 674, 710, 712, 723, 729, 730], "hint": [5, 8, 9, 14, 31, 32, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 109, 125, 129, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 259, 270, 276, 279, 303, 306, 309, 310, 312, 321, 327, 328, 329, 330, 332, 333, 334, 340, 345, 346, 347, 348, 358, 400, 434, 437, 461, 465, 467, 469, 508, 532, 537, 538, 540, 542, 543, 544, 545, 547, 549, 550, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 599, 600, 601, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 624, 643, 650, 651, 653, 654, 655, 656, 657, 658, 659, 662, 666, 667, 668, 669, 670, 671, 672, 673, 674, 710, 715, 723, 726, 727, 730, 731, 734], "assum": [5, 8, 9, 10, 13, 14, 15, 31, 32, 33, 36, 37, 38, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 109, 125, 129, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 259, 270, 276, 279, 295, 303, 306, 309, 310, 312, 321, 327, 328, 329, 330, 332, 333, 334, 340, 345, 346, 347, 348, 358, 368, 400, 434, 437, 461, 465, 467, 469, 478, 508, 532, 537, 538, 540, 542, 543, 544, 545, 546, 547, 549, 550, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 599, 600, 601, 602, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 624, 643, 650, 651, 653, 654, 655, 656, 657, 658, 659, 662, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 694, 700, 711, 714, 716, 719, 720, 723, 732, 733, 736, 740, 741, 746], "simplic": [5, 8, 9, 14, 31, 32, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 109, 125, 129, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 259, 270, 276, 279, 303, 306, 309, 310, 312, 321, 327, 328, 329, 330, 332, 333, 334, 340, 345, 346, 347, 348, 358, 400, 434, 437, 461, 465, 467, 469, 508, 532, 537, 538, 540, 542, 543, 544, 545, 547, 549, 550, 552, 553, 554, 555, 558, 559, 560, 561, 562, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 599, 600, 601, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 624, 643, 650, 651, 653, 654, 655, 656, 657, 658, 659, 662, 666, 667, 668, 669, 670, 671, 672, 723, 736, 742, 745], "nestabl": [5, 8, 9, 14, 31, 32, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 109, 125, 129, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 259, 269, 270, 276, 279, 303, 306, 309, 310, 312, 321, 327, 328, 329, 330, 332, 333, 334, 340, 345, 346, 347, 348, 358, 400, 434, 437, 441, 447, 455, 456, 461, 465, 467, 469, 471, 485, 503, 508, 532, 537, 538, 540, 542, 543, 544, 545, 547, 549, 550, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 599, 600, 601, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 624, 643, 650, 651, 653, 654, 655, 656, 657, 658, 659, 662, 666, 667, 668, 669, 670, 671, 672, 673, 674, 710, 713, 722, 723, 730, 733, 748], "therefor": [5, 8, 9, 14, 31, 32, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 109, 125, 129, 133, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 259, 269, 270, 276, 279, 303, 306, 309, 310, 312, 321, 327, 328, 329, 330, 332, 333, 334, 340, 345, 346, 347, 348, 358, 393, 400, 401, 403, 410, 434, 437, 441, 447, 455, 456, 461, 465, 467, 469, 471, 485, 503, 508, 532, 537, 538, 540, 542, 543, 544, 545, 547, 549, 550, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 599, 600, 601, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 624, 643, 650, 651, 653, 654, 655, 656, 657, 658, 659, 662, 666, 667, 668, 669, 670, 671, 672, 673, 674, 700, 702, 706, 710, 712, 714, 715, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 730, 731, 732, 733, 734, 736, 738, 740, 742, 746, 750, 753, 759], "01": [5, 9, 10, 11, 32, 33, 34, 37, 41, 93, 219, 237, 238, 258, 264, 287, 303, 309, 330, 340, 341, 458, 500, 501, 523, 524, 529, 537, 540, 542, 543, 545, 548, 551, 579, 623, 646, 647, 716, 743], "02": [5, 10, 11, 17, 18, 31, 34, 41, 93, 179, 180, 219, 309, 330, 340, 341, 500, 501, 523, 524, 529, 537, 540, 542, 543, 546, 550, 551, 602, 643, 646, 647, 732], "03": [5, 8, 10, 11, 31, 34, 41, 93, 192, 217, 500, 501, 524, 529, 537, 540, 542, 543, 545, 546, 581, 602, 646], "04": [5, 11, 25, 29, 34, 61, 62, 93, 119, 199, 491, 523, 524, 529, 534, 537, 538, 540, 542, 543, 711, 733], "05": [5, 8, 9, 11, 17, 31, 32, 34, 40, 93, 219, 264, 274, 287, 303, 306, 315, 414, 415, 416, 469, 491, 513, 523, 524, 529, 537, 540, 542, 543, 545, 550, 584, 643, 681, 685, 732, 733], "464": [5, 8, 41, 93, 181, 182, 540], "15888336": [5, 93], "2154": [5, 93], "43469003": [5, 93], "10000": [5, 28, 93, 537], "meshgrid": [5, 28, 537], "spars": [5, 9, 15, 28, 32, 38, 94, 262, 303, 310, 360, 369, 372, 537, 546, 604], "index": [5, 9, 10, 16, 19, 20, 21, 26, 28, 32, 33, 39, 42, 43, 44, 87, 94, 163, 259, 265, 266, 271, 272, 303, 309, 310, 312, 317, 319, 321, 331, 337, 361, 363, 368, 384, 390, 393, 401, 403, 405, 408, 410, 425, 426, 435, 442, 444, 462, 464, 485, 486, 490, 535, 537, 539, 542, 547, 549, 552, 553, 554, 612, 616, 626, 627, 628, 631, 632, 633, 639, 641, 650, 651, 653, 655, 656, 657, 659, 661, 682, 696, 718, 719, 724, 727, 728, 729, 730, 732, 733, 740, 753], "xy": [5, 28, 94, 537], "dimension": [5, 8, 9, 14, 16, 19, 22, 23, 26, 28, 31, 32, 37, 39, 45, 46, 51, 76, 87, 89, 94, 101, 246, 269, 303, 309, 310, 312, 321, 336, 337, 341, 342, 352, 355, 380, 381, 382, 389, 390, 432, 442, 537, 540, 545, 547, 552, 555, 556, 573, 574, 580, 583, 586, 588, 589, 599, 600, 614, 650, 651, 653, 666, 667, 668, 669, 670, 671, 672, 673, 674, 727, 729, 733, 736, 738, 750, 753, 760], "repres": [5, 8, 9, 13, 14, 31, 32, 36, 37, 75, 94, 96, 118, 176, 177, 180, 183, 192, 194, 201, 227, 240, 244, 245, 262, 271, 272, 285, 303, 306, 309, 310, 312, 315, 316, 319, 351, 362, 400, 414, 415, 416, 420, 426, 433, 536, 537, 538, 540, 544, 545, 567, 568, 580, 588, 591, 592, 681, 685, 715, 736, 740, 750, 751, 754], "grid": [5, 94, 262, 303, 537, 722, 733, 745], "coordin": [5, 8, 19, 31, 32, 42, 94, 101, 182, 244, 265, 266, 269, 285, 303, 317, 425, 537, 540, 552, 653], "numer": [5, 6, 8, 9, 10, 14, 18, 19, 22, 29, 31, 32, 33, 37, 41, 42, 44, 51, 52, 94, 106, 174, 177, 190, 194, 199, 200, 201, 208, 209, 210, 213, 222, 223, 227, 229, 230, 231, 232, 236, 237, 238, 242, 243, 247, 248, 316, 321, 421, 434, 491, 492, 500, 501, 513, 514, 537, 538, 540, 542, 545, 551, 552, 555, 573, 580, 583, 588, 591, 593, 595, 597, 599, 645, 646, 647, 649, 650, 651, 653, 654, 659, 666, 669, 671, 681, 708, 720, 729, 731, 732, 733, 734, 735, 736, 738, 742, 750, 753, 759], "conserv": [5, 94, 537], "cartesian": [5, 94, 537], "matrix": [5, 9, 10, 13, 14, 32, 33, 36, 37, 49, 51, 94, 99, 100, 101, 269, 270, 303, 310, 312, 321, 354, 357, 358, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 372, 398, 434, 443, 449, 537, 542, 544, 545, 568, 572, 574, 576, 577, 578, 579, 581, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 597, 598, 601, 681, 682, 710, 720, 731, 751, 753], "ij": [5, 22, 94, 537, 555, 665], "zero": [5, 6, 8, 9, 11, 13, 14, 16, 19, 20, 22, 23, 28, 29, 31, 32, 34, 36, 37, 41, 42, 45, 46, 61, 63, 64, 65, 67, 84, 85, 87, 89, 94, 96, 97, 98, 99, 100, 103, 106, 107, 175, 176, 177, 179, 180, 181, 182, 183, 186, 188, 189, 191, 192, 193, 194, 199, 200, 201, 208, 209, 210, 211, 217, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 239, 240, 241, 242, 244, 245, 247, 248, 249, 253, 254, 257, 259, 270, 277, 278, 279, 281, 289, 292, 294, 295, 296, 297, 301, 303, 306, 309, 310, 312, 319, 321, 330, 331, 332, 333, 334, 336, 337, 340, 341, 342, 351, 352, 356, 358, 367, 394, 399, 400, 426, 435, 436, 450, 454, 461, 481, 523, 524, 529, 530, 531, 532, 534, 537, 538, 540, 542, 543, 544, 545, 547, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 566, 567, 568, 571, 572, 574, 579, 581, 582, 583, 584, 585, 586, 587, 589, 591, 599, 600, 607, 608, 609, 610, 612, 613, 620, 643, 645, 646, 647, 650, 651, 652, 653, 655, 656, 657, 658, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 681, 682, 686, 704, 715, 718, 720, 721, 722, 726, 728, 729, 732, 738, 741, 742, 752], "vector": [5, 9, 10, 13, 14, 32, 33, 36, 37, 49, 94, 309, 310, 312, 316, 321, 331, 357, 360, 366, 368, 371, 400, 402, 404, 422, 434, 450, 454, 471, 522, 537, 542, 544, 545, 568, 570, 573, 577, 578, 580, 583, 588, 593, 594, 598, 599, 600, 601, 682, 745, 753], "respect": [5, 8, 9, 11, 14, 31, 32, 34, 37, 49, 94, 174, 177, 182, 184, 186, 187, 188, 189, 194, 195, 201, 205, 206, 213, 214, 219, 221, 223, 224, 227, 230, 236, 240, 243, 244, 250, 285, 300, 301, 306, 308, 310, 312, 315, 371, 379, 414, 416, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 537, 540, 543, 544, 545, 548, 557, 564, 565, 573, 590, 593, 621, 622, 623, 681, 709, 710, 711, 712, 715, 716, 718, 719, 720, 721, 722, 726, 727, 729, 730, 731, 733, 734, 735, 749, 759], "effect": [5, 9, 11, 22, 32, 34, 45, 94, 309, 311, 344, 375, 523, 531, 537, 543, 544, 555, 570, 670, 672, 703, 710, 715, 718, 719, 723, 726, 730, 732, 736, 746], "rank": [5, 9, 14, 16, 23, 32, 37, 39, 46, 49, 50, 55, 94, 267, 268, 303, 310, 312, 321, 360, 361, 369, 372, 400, 442, 537, 545, 547, 552, 556, 573, 575, 584, 586, 590, 592, 597, 599, 600, 607, 608, 616, 619, 620, 653, 673, 674], "length": [5, 9, 15, 16, 26, 32, 38, 39, 49, 52, 76, 89, 94, 255, 260, 263, 264, 273, 279, 301, 303, 306, 309, 310, 312, 316, 319, 331, 336, 337, 340, 341, 342, 352, 361, 368, 400, 408, 422, 427, 522, 537, 542, 544, 545, 546, 547, 553, 570, 593, 594, 602, 612, 655, 680, 682, 733, 741], "ni": [5, 94, 537], "xi": [5, 94, 537], "native_arrai": [5, 6, 8, 28, 30, 31, 32, 33, 44, 59, 62, 91, 94, 96, 98, 103, 106, 107, 108, 109, 117, 122, 129, 151, 160, 168, 184, 188, 189, 193, 194, 195, 197, 201, 205, 213, 214, 222, 227, 230, 233, 236, 241, 299, 311, 312, 376, 400, 406, 409, 443, 473, 474, 477, 507, 534, 537, 538, 539, 540, 542, 544, 545, 546, 547, 551, 552, 555, 556, 558, 559, 566, 571, 574, 579, 585, 586, 594, 595, 597, 600, 602, 604, 605, 612, 644, 653, 662, 668, 671, 673, 691, 708, 732, 733], "one_hot": [5, 28, 537, 700, 743], "depth": [5, 9, 13, 28, 32, 36, 96, 309, 312, 344, 387, 454, 466, 537, 542, 544, 549, 562, 563, 636, 680, 684, 712, 719, 741, 742, 743, 745, 747], "scatter": [5, 10, 28, 33, 96, 485, 486, 537, 542, 717, 730, 736, 760], "defin": [5, 9, 10, 14, 28, 32, 33, 37, 65, 96, 99, 100, 101, 177, 194, 201, 227, 228, 236, 238, 241, 250, 260, 263, 264, 269, 270, 271, 272, 276, 301, 303, 306, 309, 310, 312, 321, 344, 356, 400, 406, 437, 469, 470, 490, 534, 537, 540, 542, 545, 555, 573, 578, 579, 592, 666, 667, 668, 670, 700, 710, 711, 715, 716, 719, 720, 723, 726, 729, 731, 732, 733, 734, 740, 742, 746, 748, 750, 751, 752, 753, 754, 757, 759, 760], "hot": [5, 28, 96, 537, 700], "dimens": [5, 9, 10, 13, 14, 15, 16, 18, 19, 20, 22, 23, 26, 28, 32, 33, 36, 37, 38, 39, 41, 42, 43, 45, 46, 51, 52, 55, 62, 66, 96, 99, 100, 262, 268, 270, 271, 272, 278, 279, 285, 292, 299, 303, 306, 307, 309, 310, 311, 312, 315, 316, 319, 321, 323, 324, 325, 327, 328, 329, 331, 336, 337, 341, 345, 346, 347, 348, 351, 353, 354, 357, 370, 375, 380, 381, 382, 390, 401, 402, 403, 404, 406, 414, 415, 416, 422, 424, 427, 437, 439, 440, 441, 442, 454, 455, 456, 458, 465, 499, 502, 522, 534, 537, 542, 544, 545, 546, 547, 548, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 572, 573, 574, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 597, 599, 600, 603, 604, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 621, 622, 623, 649, 650, 651, 653, 655, 656, 657, 658, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 685, 722, 724, 729, 731, 732, 733, 736, 738, 741], "overrid": [5, 9, 28, 32, 96, 321, 434, 537, 715, 717], "ones_lik": [5, 28, 537, 716, 743], "tril": [5, 28, 537], "m": [5, 9, 14, 18, 31, 32, 37, 41, 51, 94, 99, 100, 101, 221, 269, 270, 303, 309, 310, 311, 312, 316, 331, 357, 360, 361, 363, 373, 382, 391, 392, 406, 420, 421, 422, 423, 424, 537, 545, 549, 551, 572, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 597, 632, 645, 646, 647, 700, 706, 711, 712, 713, 719, 738], "whose": [5, 8, 9, 10, 14, 16, 20, 22, 28, 31, 32, 33, 37, 39, 43, 45, 51, 91, 99, 100, 176, 180, 183, 191, 192, 193, 232, 233, 239, 240, 244, 245, 246, 270, 284, 288, 289, 291, 295, 303, 310, 312, 357, 399, 411, 448, 503, 537, 540, 542, 545, 547, 553, 555, 572, 574, 576, 577, 578, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 597, 600, 609, 613, 655, 656, 657, 664, 665, 723, 733], "innermost": [5, 9, 14, 37, 99, 100, 270, 303, 310, 357, 537, 545, 572, 574, 576, 577, 578, 579, 581, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 597], "two": [5, 9, 14, 20, 32, 33, 37, 51, 52, 73, 76, 87, 94, 99, 100, 101, 132, 140, 188, 202, 203, 237, 269, 270, 274, 283, 284, 286, 287, 289, 291, 298, 303, 306, 309, 310, 311, 312, 321, 337, 355, 356, 357, 367, 376, 381, 400, 406, 409, 434, 442, 446, 536, 537, 538, 540, 542, 545, 547, 553, 572, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 597, 599, 617, 655, 656, 657, 658, 682, 704, 710, 711, 714, 715, 720, 721, 722, 723, 727, 731, 732, 733, 736, 737, 741, 743, 750, 758], "mxn": [5, 9, 14, 37, 99, 100, 270, 303, 537, 545, 576, 584, 586, 587, 589, 590, 594, 597], "matric": [5, 9, 14, 32, 37, 49, 51, 94, 99, 100, 270, 303, 310, 312, 357, 360, 361, 363, 367, 368, 371, 389, 537, 544, 545, 568, 572, 574, 576, 577, 578, 579, 580, 581, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 597, 598, 708, 745, 753], "diagon": [5, 9, 14, 32, 37, 87, 99, 100, 101, 259, 269, 270, 303, 310, 312, 355, 358, 364, 389, 537, 545, 575, 597], "main": [5, 9, 14, 32, 37, 87, 99, 100, 101, 259, 269, 270, 303, 310, 312, 355, 389, 537, 545, 575, 576, 597, 710, 711, 712, 714, 717, 718, 728, 730, 751, 753, 754, 759], "lower": [5, 8, 9, 14, 18, 31, 32, 37, 41, 87, 99, 225, 259, 269, 270, 303, 321, 437, 438, 442, 537, 540, 545, 551, 572, 578, 579, 586, 647, 680, 681, 700, 712, 720, 722, 731, 733, 738, 746, 748, 749, 750, 751, 753, 754, 759, 760], "triangular": [5, 9, 14, 37, 99, 100, 101, 269, 270, 303, 537, 545, 572, 578, 579, 586, 590], "alloc": [5, 6, 9, 29, 99, 100, 106, 270, 303, 537, 538, 710, 712, 746], "triu": [5, 28, 537], "upper": [5, 9, 14, 18, 32, 37, 41, 87, 100, 101, 259, 270, 303, 321, 437, 537, 545, 551, 572, 578, 579, 590, 647, 680, 730, 733], "zeros_lik": [5, 28, 106, 223, 523, 524, 527, 529, 531, 537, 538, 540, 543, 547, 605, 731, 736], "data_typ": [6, 9, 29, 32, 136, 538, 717, 720, 733, 734], "_arraywithdatatyp": [6, 51], "astyp": [6, 13, 29, 36, 538, 544, 560, 562, 563, 566, 700, 720, 730, 731, 736], "irrespect": [6, 14, 29, 37, 106, 538, 545, 593, 718, 730, 740, 760], "promot": [6, 8, 9, 14, 29, 31, 32, 37, 44, 51, 52, 106, 109, 132, 133, 134, 140, 175, 176, 177, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 192, 194, 197, 199, 201, 215, 216, 217, 218, 219, 224, 227, 232, 236, 239, 240, 241, 242, 243, 244, 245, 248, 282, 290, 295, 306, 321, 434, 494, 516, 538, 540, 542, 545, 547, 555, 572, 573, 580, 581, 583, 584, 585, 586, 588, 589, 591, 592, 599, 600, 606, 616, 659, 667, 670, 714, 723, 724, 727, 735], "rule": [6, 8, 9, 14, 29, 31, 32, 37, 106, 109, 132, 133, 134, 183, 194, 227, 229, 236, 238, 246, 248, 312, 321, 388, 434, 538, 540, 545, 547, 572, 573, 580, 585, 588, 592, 606, 694, 714, 715, 718, 719, 720, 722, 725, 726, 727, 729, 733, 736, 754], "cast": [6, 8, 9, 14, 22, 29, 31, 37, 106, 109, 134, 228, 321, 435, 436, 538, 540, 545, 555, 600, 663, 664, 669, 671, 727, 732, 738], "nan": [6, 8, 9, 10, 20, 22, 29, 31, 32, 33, 106, 174, 175, 176, 177, 179, 180, 181, 182, 183, 190, 191, 192, 193, 194, 195, 197, 199, 200, 201, 202, 203, 208, 209, 210, 215, 216, 217, 218, 219, 222, 227, 228, 230, 232, 233, 236, 237, 238, 239, 240, 241, 244, 245, 247, 250, 274, 283, 287, 292, 295, 301, 306, 321, 432, 433, 440, 441, 467, 521, 535, 538, 540, 542, 553, 555, 556, 655, 656, 657, 658, 666, 667, 668, 670, 671, 672, 673, 674, 714, 720, 723, 729, 734, 735], "infin": [6, 8, 10, 14, 29, 31, 37, 106, 174, 175, 176, 177, 180, 181, 182, 183, 190, 191, 192, 194, 195, 197, 199, 200, 201, 208, 209, 215, 216, 217, 218, 219, 222, 227, 228, 230, 232, 236, 237, 239, 240, 241, 244, 245, 247, 295, 306, 467, 535, 538, 540, 542, 545, 555, 556, 591, 600, 666, 668, 673, 674, 714, 723], "implement": [6, 7, 9, 20, 21, 29, 30, 32, 37, 44, 49, 106, 120, 121, 134, 153, 154, 168, 174, 175, 176, 179, 180, 181, 182, 191, 192, 194, 197, 199, 201, 215, 216, 217, 218, 227, 229, 232, 236, 239, 240, 244, 245, 295, 306, 310, 321, 356, 357, 440, 441, 459, 460, 538, 539, 540, 542, 544, 545, 553, 554, 555, 570, 577, 578, 579, 588, 597, 655, 656, 657, 658, 659, 662, 666, 667, 668, 669, 670, 671, 691, 700, 708, 710, 713, 714, 715, 716, 718, 720, 721, 723, 724, 726, 727, 728, 730, 732, 733, 734, 736, 738, 740, 741, 742, 743, 745, 746, 748, 750, 751, 752, 753, 756, 759, 760], "match": [6, 9, 26, 29, 32, 106, 201, 236, 277, 279, 306, 309, 312, 352, 384, 405, 408, 481, 538, 540, 542, 545, 578, 579, 584, 600, 708, 710, 715, 717, 718, 722, 732, 754, 759], "newli": [6, 29, 106, 448, 538, 542, 712, 716, 719, 730, 733], "float64": [6, 9, 18, 22, 28, 29, 31, 32, 33, 41, 45, 76, 89, 90, 106, 109, 113, 114, 119, 120, 123, 124, 129, 130, 134, 136, 137, 143, 146, 228, 282, 306, 321, 434, 480, 537, 538, 542, 545, 551, 578, 579, 584, 600, 646, 647, 664, 720, 732, 733], "broadcast_arrai": [6, 29, 538], "against": [6, 9, 10, 14, 19, 29, 31, 32, 33, 37, 42, 107, 226, 245, 274, 275, 278, 287, 306, 321, 440, 441, 442, 478, 538, 540, 542, 545, 552, 583, 584, 586, 589, 650, 702, 733, 738, 746, 753], "x2": [6, 8, 9, 10, 14, 19, 29, 31, 32, 33, 37, 42, 51, 52, 56, 107, 133, 140, 160, 177, 182, 184, 186, 187, 188, 189, 194, 195, 201, 202, 203, 204, 205, 206, 212, 213, 214, 219, 220, 221, 223, 224, 225, 226, 227, 230, 232, 236, 243, 248, 274, 277, 282, 283, 284, 286, 288, 293, 297, 306, 312, 321, 394, 434, 443, 538, 539, 540, 542, 545, 552, 573, 580, 583, 588, 592, 595, 596, 599, 654, 688, 714, 720, 722, 724, 726, 730, 731], "x3": [6, 10, 107, 443, 538, 542], "mix": [6, 8, 29, 31, 32, 33, 38, 41, 51, 52, 107, 120, 121, 134, 153, 154, 184, 187, 188, 189, 194, 195, 201, 205, 213, 214, 224, 227, 230, 236, 311, 321, 376, 441, 457, 459, 460, 461, 462, 471, 505, 508, 538, 539, 540, 542, 544, 545, 546, 547, 550, 555, 558, 560, 563, 566, 568, 571, 572, 595, 602, 604, 605, 643, 665, 667, 670, 710, 713, 720, 721, 722, 730, 736, 738, 748, 753, 757, 759], "broadcast_to": [6, 29, 538, 720], "can_cast": [6, 29, 538, 720, 727, 731], "occur": [6, 8, 20, 29, 31, 43, 109, 228, 244, 538, 540, 552, 553, 650, 651, 655, 656, 657, 658, 714, 719, 721, 724, 735], "accord": [6, 10, 16, 22, 29, 39, 45, 109, 119, 177, 188, 194, 201, 227, 238, 309, 312, 352, 400, 461, 464, 485, 486, 538, 540, 542, 545, 547, 555, 599, 607, 620, 670, 672, 688, 694, 710, 711, 714, 720, 725, 727, 731, 733], "as_n": [6, 7, 26, 29, 30, 112, 113, 114, 115, 116, 117, 123, 150, 151, 163, 538, 539, 720], "int32": [6, 9, 10, 18, 19, 22, 29, 32, 33, 41, 42, 87, 92, 98, 103, 106, 109, 111, 113, 115, 117, 120, 122, 123, 127, 130, 134, 138, 142, 144, 162, 255, 301, 317, 321, 425, 435, 436, 437, 462, 471, 507, 537, 538, 539, 542, 551, 552, 555, 645, 646, 647, 651, 663, 664, 669, 671, 720, 731, 733, 738], "finfo": [6, 29, 538, 733], "inform": [6, 11, 29, 34, 119, 122, 444, 532, 538, 542, 543, 548, 623, 700, 709, 710, 711, 712, 714, 718, 719, 724, 727, 728, 730, 732, 733, 756], "about": [6, 29, 119, 122, 538, 700, 704, 707, 709, 710, 711, 712, 713, 714, 717, 719, 720, 721, 725, 726, 730, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 746, 754, 755, 758], "8": [6, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 21, 22, 29, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 51, 52, 59, 90, 91, 95, 98, 103, 112, 114, 115, 116, 119, 152, 169, 177, 179, 180, 184, 185, 188, 190, 192, 198, 201, 205, 206, 212, 213, 214, 219, 222, 223, 225, 226, 227, 232, 233, 236, 237, 238, 241, 242, 245, 246, 247, 253, 254, 256, 258, 259, 274, 282, 285, 287, 288, 289, 292, 299, 301, 303, 306, 309, 310, 311, 312, 321, 327, 328, 329, 330, 335, 336, 340, 341, 345, 346, 348, 350, 351, 356, 362, 373, 374, 376, 377, 378, 380, 381, 382, 386, 390, 395, 396, 405, 406, 408, 409, 412, 413, 422, 424, 436, 439, 440, 442, 447, 448, 450, 454, 455, 458, 461, 465, 469, 470, 471, 473, 474, 477, 480, 485, 486, 490, 500, 501, 502, 503, 523, 526, 528, 531, 533, 534, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 549, 551, 552, 553, 554, 555, 558, 562, 563, 566, 567, 568, 570, 574, 575, 576, 579, 580, 583, 584, 585, 588, 591, 593, 594, 595, 597, 598, 600, 602, 603, 604, 605, 609, 616, 617, 619, 625, 632, 636, 644, 645, 646, 647, 649, 654, 655, 657, 659, 660, 662, 664, 665, 667, 669, 671, 672, 682, 711, 718, 719, 722, 733, 737, 741], "14": [6, 8, 9, 13, 14, 18, 22, 29, 31, 32, 33, 36, 37, 39, 41, 106, 119, 122, 175, 180, 182, 189, 193, 219, 223, 227, 233, 240, 248, 281, 309, 310, 312, 321, 327, 328, 329, 330, 340, 347, 350, 351, 354, 386, 390, 395, 412, 435, 500, 523, 538, 540, 542, 543, 544, 545, 547, 549, 553, 555, 558, 559, 561, 563, 567, 576, 580, 588, 597, 619, 636, 645, 646, 647, 655, 664, 665, 718, 722, 733], "resolut": [6, 29, 119, 538, 712], "1e": [6, 9, 11, 14, 15, 17, 29, 32, 34, 37, 38, 40, 50, 119, 274, 287, 306, 315, 414, 415, 416, 491, 492, 500, 513, 514, 523, 524, 529, 531, 538, 542, 543, 545, 546, 550, 593, 602, 603, 604, 643, 683, 685, 686, 700, 718, 727, 730, 732, 742, 743], "06": [6, 18, 31, 34, 50, 59, 119, 176, 192, 309, 330, 340, 529, 534, 538, 543, 647, 733, 741], "min": [6, 9, 10, 14, 22, 29, 32, 33, 37, 45, 99, 101, 119, 122, 226, 269, 271, 303, 310, 358, 455, 485, 486, 500, 537, 538, 540, 542, 545, 555, 584, 590, 593, 594, 600, 700], "4028235e": [6, 119, 538], "38": [6, 9, 31, 32, 41, 119, 244, 293, 306, 309, 321, 328, 347, 350, 351, 435, 538, 540, 545, 585, 722], "max": [6, 9, 10, 14, 22, 29, 32, 33, 37, 45, 119, 122, 225, 309, 310, 312, 327, 328, 329, 345, 346, 347, 348, 350, 358, 407, 449, 450, 455, 471, 485, 486, 538, 540, 542, 545, 555, 584, 586, 589, 682, 686, 719, 731], "iinfo": [6, 29, 538], "integ": [6, 8, 9, 13, 14, 16, 18, 22, 23, 26, 31, 32, 33, 36, 37, 39, 41, 45, 46, 51, 52, 76, 90, 122, 123, 129, 133, 134, 138, 174, 184, 185, 186, 187, 188, 189, 190, 200, 201, 212, 224, 229, 232, 236, 237, 247, 248, 271, 272, 278, 281, 282, 303, 306, 309, 312, 316, 319, 321, 336, 341, 351, 386, 395, 400, 412, 420, 421, 422, 423, 424, 426, 427, 432, 434, 435, 436, 441, 442, 464, 480, 490, 522, 537, 538, 540, 542, 544, 545, 547, 551, 554, 555, 556, 557, 558, 559, 560, 562, 564, 566, 573, 575, 585, 599, 600, 614, 644, 645, 646, 647, 648, 649, 661, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 712, 718, 720, 729, 732, 733, 738, 740], "119": [6, 122], "122": [6, 122, 192, 540], "int8": [6, 18, 28, 29, 41, 89, 115, 120, 122, 123, 127, 255, 301, 537, 538, 645, 720, 733], "128": [6, 8, 13, 29, 31, 36, 52, 122, 198, 309, 330, 340, 454, 464, 538, 540, 542, 544, 545, 559, 561, 566, 588, 700], "127": [6, 9, 14, 29, 32, 122, 295, 306, 538, 545, 580], "12": [6, 8, 9, 10, 13, 14, 18, 22, 29, 31, 32, 33, 36, 37, 39, 40, 41, 45, 51, 52, 122, 177, 179, 184, 188, 189, 192, 194, 195, 196, 214, 227, 230, 237, 240, 247, 248, 263, 264, 285, 288, 289, 303, 306, 309, 312, 321, 327, 328, 329, 330, 332, 336, 337, 345, 346, 350, 351, 352, 384, 386, 390, 395, 412, 424, 435, 441, 450, 454, 455, 486, 492, 500, 514, 540, 542, 544, 545, 547, 549, 550, 551, 552, 553, 555, 558, 562, 567, 568, 576, 580, 584, 588, 594, 595, 597, 609, 613, 615, 617, 619, 636, 643, 645, 646, 647, 654, 655, 663, 664, 665, 669, 671, 711, 716, 718, 720, 722, 729], "54": [6, 8, 13, 31, 32, 36, 41, 122, 191, 192, 197, 212, 241, 247, 260, 303, 309, 321, 330, 340, 435, 540, 544, 545, 555, 568, 585, 588, 645, 646, 647, 665, 719, 722], "1220": [6, 122], "int16": [6, 9, 18, 22, 29, 41, 109, 113, 115, 120, 122, 129, 144, 255, 301, 321, 435, 436, 538, 555, 645, 663, 664, 669, 671, 720, 731, 733, 738], "32768": [6, 29, 122, 501, 542], "32767": [6, 29, 122], "is_bool_dtyp": [6, 29, 538], "is_float_dtyp": [6, 29, 538, 734], "is_int_dtyp": [6, 29, 538, 732, 734], "is_uint_dtyp": [6, 29, 538, 732, 734], "result_typ": [6, 29, 538, 720], "arrays_and_dtyp": [6, 29, 134, 538], "involv": [6, 29, 134, 177, 194, 201, 227, 232, 538, 540, 703, 705, 713, 719, 720, 722, 732, 736, 743, 753, 759], "_arraywithdevic": [7, 51], "dev": [7, 26, 30, 155, 162, 539, 711, 721, 727, 740, 742], "to_devic": [7, 30, 150, 539, 700], "move": [7, 9, 30, 32, 101, 164, 168, 172, 269, 303, 312, 399, 537, 539, 700, 712, 721, 734], "__dlpack__": [7, 30, 88, 168, 537, 539], "mai": [7, 8, 9, 14, 20, 21, 30, 31, 37, 44, 51, 52, 76, 88, 168, 194, 195, 201, 206, 214, 222, 223, 227, 228, 230, 245, 337, 453, 489, 537, 539, 540, 542, 545, 553, 554, 555, 591, 600, 655, 656, 657, 658, 659, 662, 666, 667, 668, 670, 704, 709, 710, 711, 712, 714, 718, 719, 720, 724, 727, 728, 729, 731, 732, 733, 736, 739, 740, 742, 760], "caveat": [7, 30, 168, 311, 375, 539], "portabl": [7, 30, 168, 539, 700, 751], "_arraywithelementwis": [8, 51], "ab": [8, 14, 24, 31, 47, 51, 52, 232, 274, 287, 306, 312, 407, 540, 545, 549, 584, 594, 600, 632, 635, 694, 708, 715, 720, 728, 731, 733], "absolut": [8, 9, 14, 24, 26, 31, 32, 37, 51, 174, 238, 274, 287, 290, 296, 306, 310, 311, 358, 370, 373, 374, 540, 545, 584, 585, 586, 591, 705, 711], "aco": [8, 31, 540], "real": [8, 9, 22, 31, 32, 45, 51, 61, 64, 67, 97, 98, 174, 175, 176, 177, 179, 180, 181, 182, 183, 192, 194, 195, 197, 199, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 224, 227, 229, 230, 232, 236, 237, 238, 240, 241, 242, 243, 244, 245, 247, 248, 280, 290, 306, 309, 310, 331, 352, 357, 358, 534, 537, 540, 545, 552, 555, 577, 578, 579, 584, 591, 593, 594, 597, 600, 653, 666, 668, 669, 670, 671, 718, 755], "invers": [8, 9, 14, 31, 32, 37, 175, 176, 179, 180, 181, 182, 183, 309, 319, 331, 340, 342, 426, 540, 545, 581, 585, 589, 688, 720, 745], "cosin": [8, 31, 175, 176, 191, 192, 258, 261, 303, 309, 330, 340, 540, 682], "57": [8, 9, 31, 32, 152, 175, 176, 179, 180, 182, 189, 192, 193, 233, 249, 539, 540], "69": [8, 34, 41, 175, 217, 309, 330, 340, 527, 540, 543, 545, 584, 585, 646, 733, 741], "acosh": [8, 31, 120, 121, 538, 540, 708], "area": [8, 9, 31, 32, 36, 176, 180, 183, 309, 344, 351, 540, 703, 730, 736, 744, 749], "hyperbol": [8, 31, 176, 180, 183, 192, 240, 244, 245, 540], "sector": [8, 31, 176, 180, 183, 540, 703], "32": [8, 9, 18, 31, 32, 36, 37, 41, 51, 52, 61, 118, 176, 188, 189, 198, 212, 234, 237, 238, 276, 306, 309, 310, 312, 321, 328, 329, 330, 340, 350, 351, 356, 384, 435, 454, 470, 534, 538, 540, 542, 544, 545, 551, 552, 555, 559, 561, 562, 563, 566, 568, 583, 588, 645, 646, 647, 654, 665, 700, 719, 729, 741, 758], "99": [8, 9, 11, 29, 31, 41, 90, 176, 191, 296, 306, 500, 527, 537, 540, 542, 543, 549, 555, 628, 636, 646, 665], "second": [8, 9, 11, 14, 16, 20, 31, 32, 33, 34, 37, 39, 43, 51, 52, 73, 101, 132, 140, 177, 182, 184, 186, 187, 188, 189, 195, 201, 202, 203, 204, 205, 206, 212, 213, 214, 219, 220, 221, 223, 224, 227, 230, 232, 243, 269, 274, 283, 285, 286, 287, 293, 297, 298, 303, 306, 310, 311, 312, 319, 321, 356, 357, 358, 362, 376, 406, 411, 421, 423, 427, 434, 437, 446, 495, 517, 523, 524, 529, 536, 537, 538, 540, 542, 543, 545, 547, 548, 549, 553, 573, 576, 577, 578, 580, 583, 588, 590, 591, 593, 595, 599, 616, 617, 622, 625, 655, 656, 657, 686, 704, 711, 714, 717, 720, 722, 725, 730, 731, 733, 735, 740, 758], "compat": [8, 14, 16, 19, 22, 23, 31, 37, 39, 42, 45, 46, 51, 52, 108, 177, 182, 184, 186, 187, 188, 189, 194, 195, 201, 205, 206, 213, 214, 219, 221, 223, 224, 227, 230, 232, 236, 243, 248, 538, 540, 545, 547, 552, 555, 556, 573, 586, 589, 592, 595, 599, 600, 612, 651, 666, 667, 668, 669, 670, 671, 672, 673, 674, 700, 703, 716, 726, 731, 732, 734, 738, 746], "multipli": [8, 9, 13, 22, 31, 32, 36, 49, 177, 243, 288, 309, 310, 344, 366, 367, 435, 436, 540, 544, 555, 567, 663, 669, 712, 715, 716, 718, 722], "determin": [8, 9, 14, 16, 20, 23, 26, 31, 32, 33, 37, 44, 46, 49, 51, 52, 87, 109, 111, 118, 124, 125, 126, 127, 129, 130, 131, 146, 156, 158, 159, 170, 175, 176, 177, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 192, 194, 197, 199, 201, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 224, 227, 232, 236, 239, 240, 241, 242, 243, 244, 245, 248, 290, 295, 306, 309, 310, 311, 321, 344, 358, 373, 434, 443, 446, 467, 468, 472, 473, 474, 475, 476, 477, 503, 521, 537, 538, 539, 540, 542, 545, 547, 548, 553, 556, 572, 573, 574, 576, 580, 581, 583, 585, 586, 588, 589, 591, 592, 597, 599, 600, 606, 621, 622, 623, 655, 656, 657, 658, 659, 673, 674, 681, 685, 702, 718, 720, 721, 723, 727, 731, 733, 735, 736], "15": [8, 9, 10, 14, 18, 22, 28, 29, 31, 32, 33, 36, 37, 39, 41, 45, 52, 91, 119, 177, 184, 188, 194, 205, 212, 213, 219, 227, 236, 237, 238, 285, 299, 306, 307, 309, 310, 312, 321, 327, 328, 345, 347, 350, 351, 356, 386, 390, 395, 412, 435, 450, 454, 455, 458, 469, 470, 495, 500, 517, 537, 538, 540, 542, 544, 545, 547, 549, 551, 552, 553, 555, 558, 568, 576, 579, 580, 581, 588, 594, 595, 613, 619, 624, 636, 645, 646, 653, 655, 663, 664, 665, 711, 719, 722, 729, 756], "angl": [8, 31, 182, 192, 240, 245, 286, 306, 540, 745], "deg": [8, 31, 178, 540], "radian": [8, 9, 31, 32, 175, 178, 179, 181, 182, 191, 193, 233, 239, 244, 295, 306, 540, 723], "degre": [8, 9, 22, 31, 32, 45, 178, 193, 233, 312, 406, 540, 555, 670, 672, 752], "1j": [8, 31, 32, 178, 179, 191, 192, 197, 199, 211, 234, 239, 240, 244, 276, 500, 540, 542], "2j": [8, 9, 31, 32, 178, 207, 276, 309, 336, 341, 501, 540, 542], "3j": [8, 9, 31, 32, 178, 211, 234, 276, 306, 540], "35619449": [8, 178, 540], "78539816": [8, 178, 540], "135": [8, 178, 449, 540, 542], "45": [8, 9, 22, 31, 32, 34, 36, 41, 52, 178, 182, 194, 237, 238, 293, 306, 309, 321, 330, 340, 351, 435, 441, 523, 529, 540, 543, 545, 547, 555, 588, 614, 646, 647, 665], "asin": [8, 31, 540], "sine": [8, 31, 179, 180, 239, 240, 540], "927": [8, 31, 179], "asinh": [8, 31, 179, 540], "atan": [8, 31, 540], "tangent": [8, 31, 181, 182, 183, 244, 245, 540, 723], "785": [8, 31, 181, 182, 540], "atan2": [8, 31, 540], "quotient": [8, 31, 182, 194, 201, 540], "245": [8, 36, 182, 544, 567, 568], "68": [8, 41, 62, 90, 182, 309, 330, 340, 534, 537, 540, 550, 643, 646, 647], "588": [8, 182, 540], "inf": [8, 9, 10, 14, 31, 32, 33, 37, 182, 199, 208, 209, 210, 211, 215, 216, 228, 250, 290, 301, 306, 310, 321, 354, 437, 467, 521, 535, 540, 542, 545, 584, 600, 708, 720, 729], "36": [8, 9, 13, 22, 32, 33, 37, 182, 237, 238, 285, 306, 309, 321, 330, 340, 435, 454, 455, 501, 540, 542, 545, 549, 555, 568, 585, 588, 598, 635, 665], "75": [8, 9, 31, 32, 33, 36, 41, 68, 92, 180, 182, 194, 207, 261, 284, 285, 303, 306, 351, 442, 456, 469, 500, 534, 537, 540, 542, 545, 549, 551, 558, 581, 588, 632, 647], "52": [8, 31, 33, 34, 41, 182, 192, 194, 321, 435, 454, 455, 470, 523, 540, 542, 543, 544, 545, 555, 568, 588, 647, 665, 694], "719": [8, 182, 540], "197": [8, 182, 540], "atanh": [8, 31, 540], "549": [8, 31, 36, 183, 540, 544, 568], "47": [8, 9, 14, 18, 31, 32, 33, 34, 36, 41, 183, 241, 309, 321, 328, 346, 347, 435, 454, 455, 527, 540, 542, 543, 544, 545, 551, 568, 580, 646, 647], "bitwise_and": [8, 31, 540], "11": [8, 9, 10, 13, 14, 18, 22, 31, 32, 33, 36, 37, 39, 41, 45, 52, 177, 181, 184, 199, 236, 237, 243, 289, 306, 309, 310, 312, 327, 328, 340, 345, 346, 348, 350, 351, 359, 384, 386, 390, 395, 397, 412, 435, 436, 448, 454, 455, 461, 470, 486, 540, 542, 544, 545, 546, 547, 549, 551, 552, 553, 555, 558, 559, 567, 568, 576, 579, 580, 581, 583, 584, 588, 593, 594, 602, 604, 609, 614, 615, 617, 619, 630, 632, 642, 645, 646, 647, 654, 655, 663, 664, 665, 672, 718, 719, 720, 722, 729], "bitwise_invert": [8, 31, 540], "bitiwse_invert": [8, 185], "bitwise_left_shift": [8, 31, 540], "bitwise_or": [8, 31, 540], "bitwise_right_shift": [8, 31, 51, 540], "64": [8, 9, 13, 31, 32, 33, 36, 37, 41, 45, 52, 118, 188, 198, 232, 241, 242, 282, 306, 309, 330, 340, 454, 455, 501, 529, 538, 540, 542, 543, 544, 545, 549, 555, 559, 561, 563, 566, 585, 588, 598, 632, 636, 646, 665, 669, 700, 711, 741, 742, 758], "16": [8, 9, 10, 13, 14, 18, 22, 29, 31, 32, 33, 36, 37, 39, 41, 51, 52, 122, 188, 217, 237, 244, 282, 285, 289, 306, 309, 312, 321, 327, 328, 330, 336, 340, 341, 345, 346, 348, 351, 390, 435, 441, 455, 458, 480, 500, 501, 533, 538, 540, 542, 543, 544, 545, 547, 549, 551, 552, 555, 566, 568, 572, 576, 579, 580, 588, 594, 619, 632, 636, 645, 646, 647, 654, 664, 665, 700, 712, 722, 741], "bitwise_xor": [8, 31, 51, 540], "89": [8, 18, 29, 31, 32, 41, 52, 122, 189, 538, 540, 545, 555, 595, 646, 647, 671], "51": [8, 9, 31, 32, 33, 41, 189, 227, 240, 310, 330, 372, 540, 647], "18": [8, 9, 18, 31, 32, 36, 37, 41, 45, 62, 189, 194, 236, 240, 249, 285, 306, 309, 312, 330, 336, 340, 341, 345, 348, 351, 390, 534, 540, 545, 551, 555, 562, 576, 583, 588, 645, 646, 647, 664, 665, 669, 718, 722], "19": [8, 9, 18, 31, 32, 36, 37, 41, 180, 189, 217, 227, 244, 309, 310, 312, 321, 329, 330, 341, 345, 348, 351, 356, 390, 435, 540, 545, 549, 551, 554, 576, 584, 597, 635, 645, 646, 647, 662, 722], "26": [8, 9, 17, 18, 32, 33, 34, 41, 189, 194, 240, 309, 310, 330, 367, 469, 523, 540, 542, 543, 544, 545, 549, 550, 555, 566, 576, 588, 595, 625, 643, 645, 646, 665], "27": [8, 9, 14, 18, 31, 32, 36, 37, 41, 45, 188, 189, 192, 232, 240, 241, 282, 306, 309, 330, 340, 470, 540, 542, 545, 549, 555, 583, 588, 598, 625, 632, 646, 665, 669], "23": [8, 9, 14, 18, 28, 31, 32, 33, 36, 41, 91, 189, 192, 209, 210, 211, 234, 236, 237, 238, 240, 247, 276, 277, 306, 309, 312, 321, 327, 328, 330, 340, 345, 346, 347, 348, 351, 384, 435, 441, 537, 540, 544, 545, 549, 552, 563, 576, 580, 584, 594, 625, 632, 636, 645, 646, 647, 654, 700, 719, 733, 738], "20": [8, 9, 13, 18, 22, 31, 32, 33, 36, 37, 41, 45, 189, 193, 197, 233, 237, 241, 285, 287, 289, 306, 309, 312, 327, 329, 345, 348, 351, 384, 454, 461, 462, 464, 486, 490, 500, 540, 542, 545, 551, 552, 555, 558, 559, 569, 576, 581, 584, 588, 595, 645, 653, 654, 663, 664, 665, 669, 671, 700, 719, 736, 740], "74": [8, 41, 189, 219, 540, 545, 585], "41": [8, 9, 14, 31, 32, 33, 36, 37, 62, 181, 189, 227, 241, 309, 310, 317, 321, 328, 346, 351, 364, 425, 435, 449, 450, 534, 540, 542, 545, 555, 572, 580, 671], "59": [8, 189, 321, 435], "24": [8, 9, 14, 22, 31, 32, 33, 36, 37, 41, 51, 189, 197, 212, 214, 227, 237, 238, 241, 285, 288, 306, 309, 321, 327, 329, 330, 340, 345, 346, 347, 348, 351, 435, 454, 455, 540, 542, 545, 549, 555, 558, 576, 584, 588, 625, 636, 645, 646, 647, 663, 665, 724, 741], "ceil": [8, 9, 31, 32, 49, 76, 309, 327, 328, 329, 345, 346, 347, 350, 537, 540, 682, 730], "round": [8, 9, 31, 32, 49, 50, 177, 190, 194, 200, 201, 227, 241, 247, 248, 281, 306, 540, 702, 703, 704, 706, 708, 710, 711, 712, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 738, 739, 740, 741, 742, 743, 745], "co": [8, 10, 31, 192, 197, 199, 240, 458, 540, 542, 703, 709, 720, 738, 745], "express": [8, 9, 31, 32, 175, 179, 181, 182, 191, 193, 233, 239, 244, 295, 306, 540, 688, 723, 731, 738, 743, 753, 754], "416": [8, 191, 540], "540": [8, 191], "990": [8, 191], "cosh": [8, 31, 191, 540], "76": [8, 22, 29, 31, 32, 41, 122, 176, 192, 240, 340, 538, 540, 545, 549, 555, 595, 632, 646, 665], "81": [8, 14, 29, 31, 37, 41, 122, 192, 217, 242, 321, 435, 538, 540, 545, 549, 551, 555, 580, 585, 598, 632, 647, 665, 733], "deg2rad": [8, 31, 540], "convers": [8, 9, 32, 193, 233, 487, 497, 542, 704, 710, 716, 737, 739, 743, 745, 746, 748, 752, 759], "90": [8, 9, 31, 32, 189, 193, 233, 237, 296, 306, 312, 321, 406, 435, 540, 545, 555, 588, 665, 703], "180": [8, 31, 193, 233, 540], "270": [8, 31, 193, 233, 540], "360": [8, 31, 193, 233, 540, 719], "71": [8, 31, 36, 193, 233, 351, 540], "28": [8, 13, 17, 31, 32, 33, 36, 37, 41, 45, 193, 217, 233, 309, 310, 330, 340, 356, 441, 469, 523, 540, 542, 543, 544, 545, 550, 555, 559, 561, 563, 566, 568, 588, 643, 645, 646, 647, 665, 669, 700], "divid": [8, 9, 10, 16, 26, 31, 32, 39, 51, 52, 201, 315, 414, 415, 416, 500, 540, 542, 547, 614, 715, 718, 722, 725, 733], "dividend": [8, 31, 194, 201, 236, 248, 540], "divisor": [8, 9, 11, 22, 31, 32, 34, 45, 194, 201, 204, 205, 236, 248, 309, 312, 327, 328, 329, 386, 395, 412, 523, 524, 529, 540, 543, 555, 670, 672, 682, 686], "375": [8, 195, 230], "erf": [8, 31, 540], "exponenti": [8, 9, 31, 32, 196, 197, 199, 219, 232, 254, 301, 310, 365, 540], "gauss": [8, 31, 196, 540], "error": [8, 9, 13, 26, 31, 32, 36, 59, 196, 244, 310, 311, 321, 369, 372, 373, 374, 441, 489, 534, 540, 542, 544, 545, 555, 571, 591, 594, 666, 668, 683, 684, 686, 697, 704, 705, 709, 711, 712, 714, 715, 716, 719, 720, 721, 722, 725, 726, 731, 733, 734, 735, 740, 746, 753], "328": [8, 196, 244, 540], "677": [8, 196, 540], "842": [8, 196, 244, 540], "exp": [8, 9, 31, 32, 65, 67, 199, 219, 232, 251, 301, 309, 336, 341, 534, 540, 545, 591, 729, 731], "evalu": [8, 9, 26, 31, 32, 197, 199, 215, 216, 217, 218, 222, 229, 231, 238, 242, 290, 310, 312, 367, 397, 533, 540, 543, 549, 556, 634, 635, 673, 674, 683, 684, 712, 718, 720, 727, 728, 753], "71828198": [8, 31, 197], "38905573": [8, 31, 197], "08553696": [8, 31, 197, 540], "exp2": [8, 31, 540], "power": [8, 9, 10, 14, 31, 32, 33, 37, 51, 52, 188, 197, 198, 232, 273, 282, 303, 306, 491, 501, 513, 540, 542, 545, 549, 585, 598, 630, 681, 735, 740, 741, 742, 753, 755, 759], "expm1": [8, 31, 540, 720], "244": [8, 199, 700], "918": [8, 199], "48": [8, 9, 31, 32, 33, 34, 41, 61, 176, 199, 241, 309, 328, 329, 330, 340, 346, 347, 350, 469, 523, 527, 534, 540, 542, 543, 545, 549, 555, 588, 625, 646, 665], "_": [8, 26, 31, 34, 109, 197, 199, 207, 208, 223, 321, 372, 434, 454, 523, 524, 538, 540, 542, 543, 545, 547, 549, 555, 591, 594, 620, 631, 670, 706, 710, 723, 728, 730, 733, 741], "147": [8, 199, 540], "floor": [8, 9, 31, 32, 49, 188, 201, 309, 327, 328, 329, 331, 345, 346, 347, 350, 540, 682, 730], "floor_divid": [8, 31, 540], "fmin": [8, 31, 540], "minimum": [8, 9, 10, 16, 19, 22, 31, 32, 33, 39, 42, 45, 174, 202, 229, 271, 282, 303, 306, 312, 321, 400, 432, 436, 491, 492, 500, 501, 513, 514, 540, 542, 547, 552, 555, 605, 651, 666, 668, 735, 750, 756, 760], "gcd": [8, 31, 540, 720], "greater": [8, 9, 13, 16, 18, 31, 32, 36, 41, 51, 52, 89, 175, 176, 179, 180, 182, 183, 186, 188, 194, 200, 201, 215, 217, 232, 236, 238, 240, 241, 245, 246, 247, 275, 306, 309, 331, 336, 341, 537, 540, 544, 545, 547, 551, 571, 573, 585, 615, 647, 712, 732], "greater_equ": [8, 31, 51, 52, 219, 540], "imaginari": [8, 31, 51, 61, 64, 67, 97, 98, 175, 176, 177, 192, 194, 195, 197, 199, 207, 227, 229, 230, 237, 240, 241, 245, 276, 306, 310, 358, 534, 537, 540, 552, 653, 722], "4j": [8, 31, 207, 501, 540, 542], "6j": [8, 9, 31, 207, 211, 276, 540], "isfinit": [8, 31, 540, 731], "out_i": [8, 31, 208, 209, 210, 211, 234, 540], "self_i": [8, 31, 208, 209, 210, 211, 234], "finit": [8, 31, 174, 175, 176, 177, 180, 182, 183, 192, 194, 195, 197, 199, 201, 208, 209, 215, 217, 227, 228, 230, 232, 236, 240, 241, 245, 540], "isinf": [8, 31, 540], "detect_posit": [8, 31, 209, 540], "detect_neg": [8, 31, 209, 540], "detect": [8, 26, 31, 209, 540, 549, 624, 635, 710, 711, 716, 718, 719, 725, 733, 741, 742], "isnan": [8, 31, 540], "isreal": [8, 31, 540], "5j": [8, 31, 32, 211, 234, 276, 306, 540], "lcm": [8, 31, 540, 720], "common": [8, 9, 26, 31, 133, 204, 212, 277, 282, 306, 538, 540, 702, 705, 708, 710, 711, 717, 720, 721, 722, 727, 728, 731, 734, 736, 746, 750, 753, 760], "21": [8, 9, 10, 18, 28, 31, 32, 36, 37, 41, 45, 51, 93, 122, 177, 180, 182, 188, 189, 212, 227, 292, 309, 310, 312, 321, 327, 330, 340, 345, 348, 351, 352, 354, 384, 435, 486, 537, 538, 540, 545, 546, 549, 555, 576, 588, 604, 630, 645, 646, 663, 664, 665, 724, 729], "60": [8, 22, 31, 33, 41, 45, 178, 212, 462, 470, 486, 500, 522, 540, 542, 545, 549, 555, 588, 627, 645, 663, 665, 669, 719], "less": [8, 9, 14, 18, 22, 31, 32, 37, 41, 51, 52, 175, 176, 179, 182, 183, 190, 194, 201, 215, 216, 217, 218, 232, 236, 238, 241, 294, 306, 309, 310, 321, 330, 331, 340, 369, 372, 434, 437, 540, 545, 551, 555, 584, 585, 586, 589, 600, 647, 670, 672, 682, 703, 711, 712, 718, 720, 722, 724, 726, 731, 733, 736, 737, 738, 753, 755], "less_equ": [8, 31, 51, 52, 540, 724], "61": [8, 9, 14, 31, 32, 34, 38, 41, 180, 215, 217, 242, 330, 523, 540, 543, 544, 545, 546, 566, 580, 602, 604, 647], "log10": [8, 31, 540], "logarithm": [8, 31, 197, 215, 216, 217, 218, 219, 280, 290, 306, 540, 545, 591], "602": [8, 216, 540], "699": [8, 216, 540], "log1p": [8, 31, 540, 729], "693": [8, 31, 66, 180, 217, 534, 540, 546, 604], "001": [8, 9, 17, 29, 32, 34, 119, 217, 234, 276, 287, 306, 524, 538, 540, 543, 550, 643, 741, 742], "0953": [8, 31, 215, 217, 540], "log2": [8, 31, 220, 540], "logaddexp": [8, 31, 540], "logaddexp2": [8, 31, 540, 708], "169925": [8, 31, 220, 540], "logical_and": [8, 31, 540, 731, 736, 760], "logical_not": [8, 31, 540, 720], "logical_or": [8, 31, 540, 760], "conform": [8, 14, 31, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 94, 97, 98, 99, 100, 102, 103, 109, 119, 122, 134, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 276, 306, 321, 434, 537, 538, 540, 545, 547, 552, 553, 554, 555, 556, 572, 573, 574, 575, 576, 578, 579, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 599, 600, 606, 608, 609, 610, 612, 613, 615, 616, 620, 650, 651, 653, 654, 655, 656, 657, 658, 659, 662, 666, 667, 668, 669, 670, 671, 672, 673, 674, 723, 725], "api": [8, 14, 31, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 94, 97, 98, 99, 100, 102, 103, 109, 119, 122, 132, 134, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 276, 306, 321, 434, 537, 538, 540, 545, 547, 552, 553, 554, 555, 556, 572, 573, 574, 575, 576, 578, 579, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 599, 600, 606, 608, 609, 610, 612, 613, 615, 616, 620, 650, 651, 653, 654, 655, 656, 657, 658, 659, 662, 666, 667, 668, 669, 670, 671, 672, 673, 674, 701, 702, 708, 711, 712, 713, 715, 717, 720, 721, 722, 723, 724, 726, 728, 730, 731, 732, 733, 736, 737, 739, 741, 746, 747, 748, 749, 751, 753, 755, 758, 760], "extens": [8, 14, 31, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 94, 97, 98, 99, 100, 102, 103, 109, 119, 122, 134, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 276, 306, 321, 434, 537, 538, 540, 545, 547, 552, 553, 554, 555, 556, 572, 573, 574, 575, 576, 578, 579, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 599, 600, 606, 608, 609, 610, 612, 613, 615, 616, 620, 650, 651, 653, 654, 655, 656, 657, 658, 659, 662, 666, 667, 668, 669, 670, 671, 672, 673, 674, 700, 706, 709, 711, 712, 723, 725, 733, 750, 753, 760], "api_specif": [8, 31, 109, 197, 207, 208, 223, 538, 540, 547, 555, 620, 670, 723], "array_api": [8, 31, 109, 197, 207, 208, 223, 538, 540, 545, 547, 555, 591, 620, 670, 723], "html": [8, 31, 101, 109, 197, 207, 208, 223, 269, 303, 321, 434, 537, 538, 540, 545, 547, 555, 591, 620, 670, 703, 723], "logical_xor": [8, 31, 540], "maximum": [8, 9, 10, 11, 16, 19, 22, 26, 31, 32, 33, 34, 39, 42, 45, 52, 167, 283, 296, 306, 309, 310, 312, 321, 325, 335, 369, 372, 400, 435, 437, 449, 450, 458, 529, 539, 540, 542, 543, 545, 547, 549, 552, 555, 584, 605, 636, 650, 651, 666, 668, 712, 722, 730, 741, 760], "use_wher": [8, 31, 225, 226, 540], "formula": [8, 9, 31, 194, 216, 218, 225, 226, 227, 289, 306, 315, 414, 416, 540], "clip": [8, 9, 16, 31, 32, 33, 39, 225, 226, 312, 384, 405, 408, 449, 450, 540, 542, 547, 718, 727, 729, 730, 741, 743], "than": [8, 9, 10, 13, 14, 16, 18, 19, 20, 22, 26, 31, 32, 33, 36, 37, 39, 41, 42, 43, 45, 51, 52, 76, 89, 119, 167, 175, 176, 179, 180, 182, 183, 186, 188, 190, 194, 200, 201, 215, 216, 217, 218, 225, 227, 232, 236, 238, 240, 241, 245, 246, 247, 252, 258, 274, 275, 287, 294, 303, 306, 309, 310, 312, 321, 330, 331, 336, 337, 340, 341, 342, 352, 353, 354, 369, 372, 391, 392, 435, 436, 437, 473, 474, 477, 494, 516, 537, 538, 539, 540, 542, 544, 545, 547, 551, 552, 553, 555, 571, 573, 583, 584, 585, 586, 589, 600, 605, 609, 615, 647, 653, 656, 657, 658, 663, 664, 669, 670, 671, 672, 682, 703, 706, 708, 712, 714, 718, 719, 720, 722, 724, 730, 731, 732, 733, 734, 735, 736, 738, 741, 742, 743, 746, 747, 750, 751, 752, 753, 759, 760], "exce": [8, 9, 32, 226, 312, 409, 540], "product": [8, 9, 13, 14, 22, 31, 32, 36, 37, 45, 49, 227, 310, 321, 356, 361, 362, 363, 366, 367, 368, 435, 436, 540, 544, 545, 555, 570, 571, 573, 580, 583, 588, 595, 599, 663, 664, 665, 669, 670, 710, 738, 753, 755], "30": [8, 9, 32, 33, 41, 45, 52, 227, 285, 293, 306, 309, 312, 330, 340, 351, 384, 425, 454, 456, 461, 462, 469, 470, 486, 495, 500, 540, 542, 545, 549, 555, 581, 588, 633, 645, 646, 664, 665, 669, 681, 719], "56": [8, 9, 13, 18, 31, 32, 36, 93, 227, 241, 244, 247, 309, 330, 340, 523, 537, 540, 543, 544, 545, 549, 555, 559, 561, 563, 568, 588, 624, 646, 665, 722], "nan_to_num": [8, 31, 540], "posinf": [8, 31, 228, 540], "neginf": [8, 31, 228, 540], "veri": [8, 31, 228, 274, 287, 306, 540, 545, 591, 702, 703, 709, 710, 711, 712, 717, 718, 720, 721, 722, 724, 726, 727, 730, 731, 732, 733, 734, 736, 739, 741, 742, 743, 746, 749, 750, 751, 753, 754, 755, 758, 759, 760], "5e": [8, 11, 31, 32, 228, 293, 529, 540, 543], "not_equ": [8, 31, 51, 52, 540], "pow": [8, 31, 51, 52, 540, 714], "expon": [8, 9, 10, 32, 33, 232, 282, 284, 288, 306, 501, 540, 542, 545, 585], "25": [8, 10, 14, 15, 18, 22, 25, 31, 32, 33, 36, 37, 40, 41, 45, 51, 52, 67, 92, 177, 178, 188, 194, 196, 207, 212, 227, 232, 235, 237, 240, 241, 242, 247, 261, 303, 311, 321, 351, 373, 375, 376, 435, 442, 469, 470, 486, 500, 537, 540, 542, 545, 546, 549, 550, 555, 558, 572, 576, 581, 598, 603, 625, 632, 636, 643, 645, 646, 647, 664, 665, 667, 672, 718, 729], "rad2deg": [8, 31, 540], "286": [8, 32, 233], "458": [8, 233], "573": [8, 233, 540], "hand": [8, 700, 714, 720, 721, 725, 727, 733, 746], "reciproc": [8, 31, 540], "333": [8, 31, 194, 235, 450, 540, 542], "remaind": [8, 9, 16, 26, 31, 32, 39, 203, 540, 547, 614, 714, 730], "modulu": [8, 31, 236, 540, 730], "sign": [8, 9, 14, 20, 22, 31, 32, 37, 49, 76, 174, 175, 176, 177, 180, 182, 183, 188, 192, 194, 197, 199, 201, 227, 229, 236, 240, 241, 245, 277, 306, 310, 312, 321, 370, 407, 435, 436, 537, 540, 545, 553, 555, 591, 655, 656, 657, 658, 663, 664, 669, 671, 703, 711, 738, 743], "x2_i": [8, 31, 177, 182, 184, 186, 187, 188, 189, 194, 195, 201, 205, 206, 213, 214, 219, 221, 223, 224, 227, 230, 232, 236, 243, 540, 714], "decim": [8, 31, 237, 540, 735], "94": [8, 9, 11, 18, 31, 32, 34, 41, 161, 237, 238, 296, 306, 340, 527, 539, 543, 647], "256": [8, 33, 237, 238, 501, 544, 559, 561, 563], "0001": [8, 9, 32, 237, 238, 310, 369, 372, 686], "67": [8, 10, 14, 31, 33, 36, 41, 51, 189, 192, 197, 237, 238, 240, 247, 321, 351, 435, 454, 455, 500, 526, 528, 540, 542, 543, 545, 580, 647], "678": [8, 237, 238], "33": [8, 18, 22, 31, 33, 34, 36, 180, 181, 188, 237, 309, 312, 321, 328, 350, 351, 384, 435, 450, 500, 527, 540, 542, 543, 544, 545, 549, 555, 567, 568, 588, 642, 645, 665, 672], "np_variant": [8, 31, 238, 540], "sin": [8, 10, 31, 192, 197, 199, 240, 458, 540, 542, 715, 738], "841": [8, 25, 31, 59, 239, 534, 540], "909": [8, 31, 33, 239, 540], "141": [8, 31, 106, 239, 538, 540], "sinh": [8, 31, 239, 540], "63": [8, 25, 31, 36, 37, 67, 233, 240, 241, 309, 321, 330, 340, 351, 435, 540, 545, 549, 555, 572, 588, 625, 636, 665], "232": [8, 31, 240, 540], "sqrt": [8, 9, 31, 32, 309, 331, 336, 337, 341, 342, 540, 681, 700], "squar": [8, 9, 14, 31, 32, 37, 241, 310, 311, 321, 357, 365, 373, 434, 525, 526, 528, 533, 540, 543, 545, 549, 572, 574, 575, 577, 578, 579, 581, 585, 591, 592, 593, 598, 630, 700], "root": [8, 31, 241, 540, 680, 707, 711, 712, 717, 731, 741], "73": [8, 37, 241, 321, 435, 545, 551, 572, 646, 733], "44": [8, 9, 18, 31, 32, 41, 180, 227, 237, 241, 242, 277, 306, 309, 329, 330, 540, 544, 545, 549, 552, 555, 567, 588, 632, 645, 646, 654, 665], "subtract": [8, 31, 51, 52, 89, 312, 400, 537, 540, 715, 718, 722], "tan": [8, 31, 445, 540, 542, 723, 726, 727, 730, 731, 738], "tanh": [8, 31, 244, 540, 678, 738], "762": [8, 31, 245, 540], "964": [8, 31, 245, 540], "trapz": [8, 31, 540], "dx": [8, 31, 246, 540], "apart": [8, 31, 246, 540], "singl": [8, 18, 26, 31, 41, 246, 287, 306, 310, 316, 367, 421, 508, 521, 525, 540, 542, 543, 544, 551, 553, 570, 645, 646, 647, 655, 682, 704, 710, 711, 712, 714, 719, 722, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 738, 741, 742, 743, 746], "trapezoid": [8, 31, 246, 540], "trunc": [8, 31, 540], "025": [8, 247, 311, 376, 540, 548, 623], "trunc_divid": [8, 31, 540], "_arraywithactivationsexperiment": [9, 51], "elu": [9, 32, 301, 678], "scaler": [9, 32, 249, 301, 733], "ep": [9, 14, 17, 32, 37, 40, 119, 250, 301, 310, 315, 358, 414, 415, 416, 538, 545, 550, 586, 589, 643, 678, 685], "outpu": [9, 32, 250, 301], "clamp": [9, 32, 250, 301, 743], "elementwis": [9, 17, 32, 40, 250, 252, 298, 301, 545, 550, 598, 643, 727, 734, 738], "19722438": [9, 32, 250, 301], "38629448": [9, 32, 250, 301], "38629436": [9, 32, 250, 301], "logsigmoid": [9, 32, 301, 678], "31326175": [9, 25, 251, 301], "126928": [9, 32, 251], "01814993": [9, 251], "00004578": [9, 251], "57888985": [9, 251], "31326169": [9, 32, 251, 301], "69314718": [9, 14, 25, 32, 37, 251, 290, 301, 306, 545, 591], "01104775": [9, 251], "prelu": [9, 32, 301, 678], "f": [9, 16, 32, 39, 252, 301, 312, 390, 547, 549, 612, 627, 631, 632, 633, 636, 641, 642, 700, 704, 705, 712, 713, 718, 719, 738, 741, 749], "unidirect": [9, 252, 301], "smaller": [9, 16, 22, 32, 39, 252, 274, 287, 301, 306, 309, 321, 337, 342, 352, 434, 435, 436, 454, 542, 547, 555, 605, 613, 663, 664, 669, 671, 700, 712, 724, 738], "relu6": [9, 32, 301, 678], "rectifi": [9, 25, 32, 61, 63, 64, 253, 256, 257, 301, 534], "unit": [9, 25, 32, 49, 59, 61, 62, 63, 64, 65, 66, 67, 249, 253, 254, 256, 257, 301, 417, 418, 534, 700, 711, 714, 720, 731, 732, 733, 746, 754, 757], "selu": [9, 32, 301, 678], "scale": [9, 13, 17, 32, 34, 36, 40, 61, 165, 166, 254, 285, 301, 306, 309, 310, 315, 326, 332, 333, 334, 342, 352, 362, 414, 415, 416, 530, 534, 539, 543, 544, 550, 567, 570, 571, 643, 681, 682, 686, 753, 755], "11133075": [9, 254, 301], "05070102": [9, 32, 254, 301], "10140204": [9, 254, 301], "15210295": [9, 254, 301], "20280409": [9, 254, 301], "25350523": [9, 254, 301], "30420589": [9, 254, 301], "35490704": [9, 254, 301], "silu": [9, 32, 301, 678], "26894143": [9, 256], "73105854": [9, 32, 256], "thresholded_relu": [9, 32, 301], "custom": [9, 32, 257, 300, 301, 308, 694, 703, 707, 719, 724, 728, 732, 733, 736, 742, 753, 757, 758, 759], "_arraywithconversionsexperiment": [9, 51], "_arraywithcreationexperiment": [9, 51], "blackman_window": [9, 32, 303], "period": [9, 32, 240, 244, 258, 260, 261, 263, 264, 303, 309, 343, 540, 712], "window": [9, 13, 32, 36, 258, 260, 261, 263, 264, 273, 303, 309, 327, 328, 329, 331, 345, 346, 347, 348, 350, 351, 544, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 682, 706, 712, 758], "symmetr": [9, 14, 32, 37, 49, 258, 260, 261, 263, 264, 303, 310, 312, 357, 400, 545, 572, 577, 578, 579, 601, 718], "38777878e": [9, 32, 258, 303], "40000000e": [9, 258, 303], "00000000e": [9, 32, 33, 258, 303, 309, 330, 336, 340, 341, 708], "00": [9, 10, 32, 33, 37, 199, 258, 303, 309, 330, 336, 340, 341, 458, 501, 540, 542, 545, 546, 579, 602, 725, 733], "30000000e": [9, 32, 258, 303], "eye_lik": [9, 32, 303], "elsewher": [9, 32, 87, 259, 303, 537, 552, 654, 711], "trilu": [9, 32, 303], "retain": [9, 101, 269, 270, 303, 525, 537, 543, 729, 748], "unsorted_segment_min": [9, 32, 303], "segment_id": [9, 32, 271, 272, 303, 688], "num_seg": [9, 32, 271, 272, 303, 688], "given": [9, 10, 15, 16, 18, 26, 32, 33, 34, 38, 39, 41, 49, 51, 52, 76, 85, 92, 93, 112, 113, 114, 115, 116, 128, 133, 152, 161, 163, 165, 166, 167, 169, 173, 246, 271, 274, 278, 279, 285, 286, 287, 289, 292, 303, 306, 309, 310, 311, 312, 315, 316, 321, 327, 328, 329, 330, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 352, 358, 361, 374, 375, 376, 377, 378, 379, 387, 388, 389, 396, 398, 409, 413, 417, 418, 419, 420, 421, 422, 423, 424, 434, 435, 436, 437, 462, 485, 486, 496, 523, 524, 527, 529, 530, 531, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 601, 602, 603, 604, 605, 608, 609, 610, 611, 613, 614, 618, 619, 631, 632, 641, 642, 645, 646, 647, 649, 661, 662, 663, 664, 678, 679, 681, 682, 684, 685, 686, 687, 688, 694, 703, 704, 708, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 739, 740, 742, 745, 750, 755, 756, 759, 760], "segment": [9, 32, 271, 272, 303, 717, 722], "id": [9, 32, 150, 271, 272, 303, 539, 683, 684, 700, 706, 709, 711, 715, 717, 718, 725, 729, 733, 747], "drop": [9, 32, 271, 303, 311, 312, 375, 408, 681, 682, 711, 746], "gather": [9, 10, 32, 33, 271, 272, 303, 462, 464, 542, 760], "th": [9, 32, 271, 272, 279, 303, 306, 310, 321, 355, 360, 442], "identifi": [9, 32, 271, 272, 303, 714, 719, 733, 736], "total": [9, 22, 26, 32, 45, 52, 89, 169, 271, 272, 278, 303, 306, 537, 539, 552, 555, 653, 670, 672, 700, 704, 705, 712, 720, 721, 722, 733, 736, 741, 742, 746], "distinct": [9, 20, 32, 271, 272, 303, 553, 655, 656, 657, 658, 703, 711, 718, 723, 729, 730, 731, 737, 753], "unsorted_segment_sum": [9, 32, 303], "_arraywithdata_typeexperiment": [9, 51], "_arraywithdeviceexperiment": [9, 51], "_arraywithelementwiseexperiment": [9, 51], "allclos": [9, 32, 306], "rtol": [9, 14, 32, 37, 274, 287, 306, 545, 586, 589, 732], "atol": [9, 14, 32, 37, 274, 287, 306, 545, 586, 732], "08": [9, 22, 32, 41, 180, 274, 287, 306, 309, 330, 340, 540, 646, 647, 672, 725], "equal_nan": [9, 32, 274, 287, 306], "rel": [9, 11, 14, 16, 21, 28, 32, 34, 37, 39, 44, 51, 91, 274, 287, 306, 311, 321, 375, 434, 524, 527, 529, 530, 531, 543, 545, 547, 554, 576, 586, 589, 597, 609, 613, 659, 662, 712, 719, 732, 736, 753, 755], "toler": [9, 14, 32, 37, 274, 287, 306, 310, 358, 369, 372, 545, 586, 589, 714, 732, 753], "compar": [9, 10, 20, 21, 26, 32, 33, 44, 274, 287, 306, 443, 446, 542, 553, 554, 655, 656, 657, 658, 659, 662, 700, 716, 722, 724, 732, 733, 736, 741, 749, 751, 753, 759, 760], "altern": [9, 32, 49, 274, 280, 284, 286, 287, 288, 289, 291, 292, 293, 297, 298, 306, 700, 710, 711, 717, 730, 741, 756], "1e10": [9, 274, 287, 306], "00001e10": [9, 274, 287, 306], "00001e": [9, 274, 306], "005": [9, 32, 274, 287, 306, 373], "binar": [9, 32, 306], "outcom": [9, 32, 275, 285, 306], "comparison": [9, 32, 195, 230, 275, 306, 311, 375, 540, 545, 594, 724], "conj": [9, 32, 192, 197, 199, 240, 241, 245, 306, 540], "conjug": [9, 14, 32, 37, 276, 306, 309, 310, 316, 331, 353, 358, 366, 368, 422, 545, 583, 587, 595], "copysign": [9, 32, 306], "unsign": [9, 22, 32, 277, 306, 321, 435, 436, 555, 663, 664, 669, 671, 720, 738], "count_nonzero": [9, 32, 306], "keepdim": [9, 14, 16, 19, 22, 23, 26, 32, 37, 39, 42, 45, 46, 278, 292, 299, 306, 307, 321, 439, 440, 441, 442, 545, 547, 552, 555, 556, 584, 600, 619, 650, 651, 666, 667, 668, 669, 670, 671, 672, 673, 674, 724, 731, 738], "count": [9, 16, 20, 23, 28, 32, 39, 43, 46, 89, 160, 278, 306, 312, 321, 411, 432, 437, 537, 539, 545, 547, 553, 556, 573, 599, 606, 609, 655, 656, 673, 674, 717, 718, 722, 741], "flatten": [9, 10, 14, 16, 19, 20, 32, 33, 37, 39, 42, 43, 278, 292, 306, 310, 312, 321, 355, 399, 403, 408, 411, 432, 439, 440, 441, 442, 454, 458, 542, 545, 547, 552, 553, 580, 588, 600, 606, 611, 613, 650, 651, 655, 656, 657, 658, 680, 700, 730, 736], "left": [9, 14, 19, 21, 32, 37, 42, 44, 70, 71, 186, 201, 278, 292, 299, 306, 307, 309, 310, 312, 321, 343, 357, 360, 364, 370, 371, 391, 401, 439, 440, 441, 442, 454, 536, 540, 542, 545, 552, 554, 577, 578, 584, 593, 598, 650, 661, 711, 712, 714, 717, 719, 720, 722], "diff": [9, 26, 32, 306, 722, 730], "prepend": [9, 32, 279, 306, 545, 547, 583, 608, 711], "append": [9, 14, 26, 32, 186, 279, 306, 540, 545, 547, 576, 583, 608, 700, 719, 733, 738, 741], "differenc": [9, 32, 279, 306], "taken": [9, 14, 32, 37, 279, 306, 309, 352, 545, 576, 710, 719, 731, 734, 743, 754], "prior": [9, 32, 279, 306, 316, 422, 545, 595, 724, 734], "expand": [9, 10, 16, 32, 33, 279, 306, 312, 458, 542, 547, 608, 718], "direct": [9, 32, 279, 284, 288, 293, 297, 306, 309, 312, 342, 352, 391, 392, 406, 554, 662, 710, 715, 717, 731, 736, 742, 743, 745, 749, 753, 754, 757], "except": [9, 10, 16, 18, 23, 26, 32, 33, 37, 41, 46, 108, 279, 296, 306, 316, 321, 421, 440, 441, 453, 471, 488, 503, 509, 538, 542, 545, 547, 551, 552, 556, 589, 606, 608, 616, 645, 646, 647, 653, 673, 674, 684, 700, 712, 713, 714, 715, 719, 720, 721, 723, 726, 730, 731, 734, 735, 736, 740, 746], "discret": [9, 32, 279, 306, 309, 330, 331, 336, 337, 340, 341, 342, 352, 546, 603, 682], "digamma": [9, 32, 306], "7549271": [9, 280, 306], "92278427": [9, 32, 280, 306], "9988394": [9, 280, 306], "fix": [9, 32, 49, 306, 310, 372, 544, 570, 700, 711, 712, 714, 720, 725, 733, 734], "nearest": [9, 32, 177, 194, 227, 237, 281, 306, 309, 321, 344, 442, 540, 736], "toward": [9, 16, 32, 39, 201, 248, 281, 293, 306, 312, 321, 406, 437, 540, 547, 613, 700, 706, 708, 711, 738, 749, 753], "float_pow": [9, 32, 306], "125": [9, 14, 37, 188, 282, 306, 311, 373, 540, 545, 598], "fmax": [9, 32, 306], "fmod": [9, 32, 540], "divis": [9, 10, 11, 32, 33, 34, 188, 194, 201, 203, 236, 238, 248, 312, 386, 492, 500, 514, 523, 524, 529, 540, 542, 543, 544, 557, 564, 565, 686, 727, 735], "frexp": [9, 32, 306], "next": [9, 32, 119, 284, 288, 293, 297, 306, 538, 681, 683, 684, 686, 704, 706, 710, 711, 712, 716, 720, 722, 723, 725, 728, 739, 740, 741, 753, 755], "represent": [9, 10, 26, 32, 33, 52, 104, 105, 119, 122, 147, 148, 174, 177, 184, 187, 189, 194, 201, 224, 227, 229, 244, 262, 284, 288, 293, 297, 303, 306, 444, 505, 535, 538, 539, 540, 542, 682, 745, 751, 752, 754, 758, 759], "gradient": [9, 32, 49, 167, 300, 306, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 539, 548, 621, 622, 623, 686, 700, 713, 734, 741, 742, 745, 746, 753], "edge_ord": [9, 32, 285, 306], "r": [9, 14, 26, 32, 37, 49, 285, 300, 306, 308, 525, 543, 545, 547, 590, 619, 711, 712, 713, 729, 732], "estim": [9, 32, 285, 306, 321, 434], "boundari": [9, 18, 32, 41, 285, 306, 309, 344, 551, 647, 753], "note": [9, 10, 14, 16, 20, 32, 37, 39, 49, 89, 101, 133, 201, 236, 237, 244, 269, 270, 285, 303, 306, 309, 310, 312, 331, 357, 360, 368, 369, 372, 390, 538, 540, 544, 545, 547, 553, 555, 570, 577, 578, 591, 593, 612, 616, 656, 658, 667, 682, 706, 708, 710, 711, 712, 715, 720, 722, 723, 725, 730, 731, 732, 733, 734, 736], "over": [9, 14, 22, 23, 24, 29, 32, 36, 37, 45, 46, 47, 49, 72, 265, 266, 285, 292, 303, 306, 309, 310, 312, 319, 321, 323, 324, 325, 328, 337, 342, 346, 350, 351, 352, 368, 379, 390, 405, 408, 427, 437, 489, 522, 536, 542, 545, 550, 551, 555, 556, 573, 584, 595, 597, 599, 600, 643, 647, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 685, 691, 694, 700, 702, 704, 711, 712, 716, 722, 723, 729, 730, 732, 734, 738, 740, 746, 751, 753], "partial": [9, 26, 32, 120, 121, 153, 154, 285, 306, 310, 312, 321, 369, 401, 402, 403, 404, 441, 459, 460, 528, 538, 539, 542, 543, 545, 582, 683, 684, 712, 717, 736], "diment": [9, 285, 306], "40": [9, 10, 31, 32, 33, 41, 45, 52, 188, 192, 212, 241, 285, 306, 309, 328, 330, 340, 346, 454, 456, 461, 462, 486, 500, 522, 525, 540, 542, 543, 545, 549, 555, 581, 588, 633, 646, 665, 669, 700, 719], "80": [9, 32, 285, 306, 310, 321, 367, 435, 545, 549, 555, 588, 635, 665, 703], "72": [9, 18, 32, 34, 199, 285, 306, 309, 330, 340, 527, 540, 543, 545, 555, 588, 646, 665], "33333333": [9, 32, 235, 285, 306, 540], "hypot": [9, 32, 306], "hypotenus": [9, 286, 306], "4031": [9, 286, 306], "8102": [9, 286, 306], "isclos": [9, 32, 306, 714], "hold": [9, 10, 14, 22, 32, 37, 45, 49, 274, 287, 292, 306, 321, 386, 412, 435, 436, 441, 485, 486, 542, 545, 555, 584, 664, 700, 741, 754], "ldexp": [9, 32, 306], "lerp": [9, 32, 306], "end": [9, 32, 76, 182, 238, 289, 306, 312, 390, 400, 402, 403, 405, 537, 540, 680, 700, 711, 712, 716, 719, 730, 734, 736, 737, 745, 746, 751, 756], "weight": [9, 11, 13, 15, 32, 34, 36, 38, 49, 261, 289, 303, 306, 309, 310, 321, 335, 361, 432, 434, 437, 523, 524, 527, 529, 530, 531, 543, 544, 546, 548, 568, 569, 570, 571, 602, 623, 681, 682, 684, 686, 700, 718, 727, 733, 738, 742, 743, 752], "interpol": [9, 32, 289, 306, 309, 321, 442, 544, 570, 736, 753], "lgamma": [9, 306], "45373654": [9, 290, 306], "6477685": [9, 290, 306], "modf": [9, 32, 306], "fraction": [9, 32, 291, 306, 321, 442, 544, 567], "nansum": [9, 32, 306], "accumul": [9, 32, 292, 306], "nextaft": [9, 32, 306], "0e": [9, 11, 32, 34, 293, 306, 529, 543], "4013e": [9, 32, 293, 306], "4028e": [9, 32, 293, 306], "signbit": [9, 32, 306], "sinc": [9, 32, 306, 700, 703, 711, 712, 714, 715, 716, 718, 719, 720, 721, 724, 730, 731, 746, 753, 759], "637": [9, 32, 295, 306], "212": [9, 13, 32, 295, 306, 568], "0909": [9, 32, 295, 306], "sparsify_tensor": [9, 32, 306], "card": [9, 32, 296, 306, 758], "sparsifi": [9, 32, 296, 306], "arang": [9, 14, 22, 32, 37, 92, 296, 306, 309, 310, 327, 328, 329, 336, 341, 345, 346, 347, 348, 350, 354, 367, 392, 481, 522, 537, 542, 545, 548, 555, 584, 600, 623, 665, 700, 720, 730, 760], "reshap": [9, 13, 14, 16, 26, 32, 36, 37, 39, 296, 306, 309, 310, 312, 327, 328, 329, 332, 345, 346, 347, 348, 350, 354, 367, 390, 522, 542, 544, 545, 547, 560, 562, 566, 584, 600, 700, 730, 731, 733, 736, 738, 740, 743], "91": [9, 36, 41, 189, 296, 306, 351, 540, 544, 545, 551, 555, 568, 588, 646, 665], "92": [9, 10, 41, 296, 306, 521, 531, 543, 545, 574, 646, 647], "93": [9, 31, 33, 41, 152, 241, 296, 306, 454, 455, 539, 542, 646, 647], "95": [9, 11, 14, 18, 25, 34, 36, 41, 59, 296, 306, 351, 523, 527, 531, 534, 543, 545, 551, 580, 646, 647], "96": [9, 11, 31, 32, 33, 41, 191, 212, 244, 296, 306, 309, 330, 454, 455, 527, 540, 542, 543, 545, 555, 588, 647, 665], "97": [9, 11, 31, 34, 41, 180, 296, 306, 527, 540, 543, 646], "xlogi": [9, 32, 306], "0986": [9, 32, 297, 306], "3863": [9, 32, 297, 306], "0000": [9, 32, 260, 261, 264, 297, 303, 306, 310, 312, 365, 394], "zeta": [9, 32, 306], "q": [9, 13, 14, 32, 36, 37, 298, 306, 310, 321, 357, 442, 544, 545, 549, 571, 577, 578, 590, 632, 711, 712, 713, 732, 746], "0369": [9, 32, 298, 306], "2021": [9, 32, 298, 306, 700], "_arraywithgeneralexperiment": [9, 51], "init_valu": [9, 32, 36, 299, 307, 309, 351], "act": [9, 32, 299, 307, 712, 722, 735, 746, 760], "reduct": [9, 10, 15, 23, 26, 32, 33, 36, 38, 46, 299, 307, 309, 311, 351, 373, 374, 375, 376, 377, 455, 485, 486, 542, 546, 556, 602, 603, 604, 673, 674, 683, 720, 727, 730, 733, 740], "_arraywithgradientsexperiment": [9, 51], "_arraywithimageexperiment": [9, 51], "_arraywithlayersexperiment": [9, 51], "adaptive_avg_pool1d": [9, 32, 309], "1d": [9, 32, 49, 309, 310, 312, 321, 323, 330, 332, 334, 340, 366, 380, 384, 405, 408, 434, 682], "adapt": [9, 32, 34, 309, 323, 324, 325, 530, 543, 682, 686, 703], "averag": [9, 11, 15, 32, 34, 38, 309, 311, 321, 323, 324, 327, 328, 329, 374, 375, 376, 377, 434, 523, 524, 529, 543, 544, 546, 548, 570, 602, 621, 622, 681, 682], "pool": [9, 32, 36, 309, 323, 324, 325, 327, 328, 329, 345, 346, 347, 348, 351, 682, 711], "signal": [9, 32, 309, 323, 324, 325, 330, 331, 340, 682, 752, 753], "sever": [9, 32, 49, 309, 310, 323, 324, 325, 368, 711, 712, 734, 746, 751, 757], "plane": [9, 32, 194, 197, 199, 227, 239, 240, 241, 244, 309, 312, 323, 324, 325, 406, 540], "l_in": [9, 32, 309, 323], "batch": [9, 10, 14, 26, 32, 33, 37, 165, 166, 309, 315, 323, 324, 325, 331, 344, 414, 415, 416, 458, 461, 462, 522, 539, 542, 544, 545, 548, 550, 568, 570, 582, 600, 621, 622, 623, 643, 682, 685, 700, 718, 727, 732, 741, 751], "spatial": [9, 13, 32, 36, 309, 315, 323, 324, 325, 344, 351, 414, 415, 416, 544, 557, 558, 559, 560, 562, 564, 566, 685, 745], "Will": [9, 32, 309, 323, 324, 325, 680, 691, 746], "l_out": [9, 32, 309, 323], "adaptive_avg_pool2d": [9, 32, 309], "2d": [9, 32, 49, 259, 303, 309, 310, 312, 321, 324, 325, 332, 333, 366, 371, 381, 389, 434, 682, 700, 731, 736], "h_in": [9, 32, 309, 324, 325], "w_in": [9, 32, 309, 324, 325], "s_0": [9, 32, 309, 324, 325], "s_1": [9, 32, 309, 324, 325], "adaptive_max_pool2d": [9, 32, 309], "avg_pool1d": [9, 32, 309], "kernel": [9, 13, 32, 36, 309, 327, 328, 329, 345, 346, 347, 348, 544, 569, 738, 746, 753, 756, 757], "stride": [9, 13, 32, 33, 36, 51, 309, 312, 327, 328, 329, 345, 346, 347, 348, 350, 351, 378, 542, 544, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 682, 730, 734, 753], "pad": [9, 13, 16, 32, 36, 39, 309, 312, 327, 328, 329, 330, 331, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 458, 542, 544, 547, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 607, 620, 682, 700], "data_format": [9, 13, 32, 36, 309, 315, 327, 328, 329, 332, 333, 334, 345, 346, 347, 348, 350, 414, 415, 416, 544, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 682, 685, 700], "nwc": [9, 13, 32, 36, 309, 327, 332, 345, 348, 544, 557, 558, 559, 564, 565, 682], "count_include_pad": [9, 32, 309, 327, 328, 329, 682], "ceil_mod": [9, 32, 309, 327, 328, 329, 345, 346, 347, 350, 682], "batch_siz": [9, 13, 18, 32, 36, 41, 309, 311, 327, 328, 329, 345, 346, 347, 348, 377, 544, 551, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 570, 644, 700, 741], "d_in": [9, 13, 32, 36, 309, 327, 328, 329, 331, 336, 337, 341, 345, 346, 347, 348, 544, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566], "slide": [9, 13, 32, 36, 309, 327, 328, 329, 345, 346, 347, 348, 351, 544, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 682], "algorithm": [9, 13, 25, 32, 36, 59, 309, 310, 327, 328, 329, 344, 345, 346, 347, 348, 369, 370, 372, 545, 558, 560, 561, 562, 563, 566, 591, 678, 682, 720, 731, 736, 746, 753, 755, 757], "per": [9, 13, 32, 36, 309, 310, 312, 327, 328, 329, 345, 346, 347, 348, 368, 407, 544, 558, 560, 561, 562, 563, 566, 570, 682, 712, 719, 728, 731, 741], "ncw": [9, 13, 32, 36, 309, 327, 332, 333, 345, 348, 544, 557, 558, 559, 564, 565, 682], "avg_pool2d": [9, 32, 309], "nhwc": [9, 13, 32, 36, 309, 328, 333, 346, 350, 544, 557, 560, 561, 564, 565, 566, 682], "divisor_overrid": [9, 32, 309, 328, 329, 682], "nchw": [9, 13, 32, 36, 309, 328, 333, 346, 350, 544, 557, 560, 561, 564, 565, 566, 682, 700], "kernel_s": [9, 32, 309, 327, 328, 329, 682, 688], "max_pool2d": [9, 32, 309, 328], "46": [9, 18, 32, 36, 41, 93, 217, 238, 260, 303, 309, 328, 346, 347, 537, 540, 549, 625, 645, 646], "avg_pool3d": [9, 32, 309], "ndhwc": [9, 13, 32, 36, 309, 329, 334, 347, 544, 557, 562, 563, 564, 565, 682], "d": [9, 10, 13, 14, 16, 28, 32, 33, 36, 37, 39, 65, 93, 101, 134, 177, 194, 195, 227, 230, 269, 303, 309, 310, 312, 316, 319, 327, 328, 329, 336, 341, 345, 346, 347, 348, 350, 355, 367, 382, 386, 388, 391, 395, 408, 412, 420, 426, 446, 534, 537, 538, 540, 544, 545, 547, 549, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 575, 576, 580, 584, 588, 598, 614, 627, 631, 632, 633, 636, 641, 642, 700, 703, 704, 705, 711, 713, 716, 717, 718, 729, 733, 736, 741, 749], "volum": [9, 13, 32, 36, 309, 329, 331, 336, 337, 341, 347, 544, 562, 563, 706], "filter": [9, 13, 32, 36, 263, 264, 303, 309, 329, 347, 544, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 682, 700, 716, 719], "ncdhw": [9, 13, 32, 36, 309, 329, 334, 347, 544, 557, 562, 563, 564, 565, 682], "43": [9, 41, 52, 188, 309, 310, 321, 329, 356, 435, 540, 551, 552, 646, 647, 654], "dct": [9, 32, 309, 682, 741], "norm": [9, 10, 14, 32, 33, 37, 48, 49, 309, 310, 330, 331, 335, 336, 337, 340, 341, 342, 352, 354, 358, 417, 418, 419, 449, 450, 471, 542, 545, 584, 600, 643, 682, 686, 734], "lenght": [9, 32, 260, 263, 264, 273, 309, 330, 682], "truncat": [9, 32, 309, 310, 330, 336, 340, 341, 342, 352, 371, 488, 542, 680, 682, 724, 741], "larger": [9, 16, 22, 32, 39, 45, 119, 309, 330, 337, 340, 342, 352, 538, 547, 555, 605, 613, 670, 672, 682, 733, 736, 760], "ortho": [9, 32, 309, 330, 331, 336, 337, 340, 341, 342, 352, 682], "102": [9, 32, 41, 330, 645], "406": [9, 32, 330, 449, 542], "dft": [9, 32, 309], "onesid": [9, 32, 309, 331], "dft_length": [9, 32, 309, 331], "backward": [9, 23, 32, 46, 236, 309, 331, 336, 337, 341, 342, 352, 540, 545, 556, 573, 599, 673, 674, 682, 734, 746], "fourier": [9, 32, 309, 331, 336, 337, 341, 342, 352, 458, 542], "fft": [9, 32, 309, 331, 337, 352, 682, 710, 753], "n_fft": [9, 309, 331], "becaus": [9, 309, 331, 711, 712, 714, 715, 716, 717, 718, 720, 721, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 736, 738, 742, 743, 746, 753, 756, 759], "satisfi": [9, 309, 310, 331, 358, 722], "symmetri": [9, 309, 331], "fast": [9, 309, 331, 753], "rfft": [9, 32, 309, 331, 352], "batch_idx": [9, 309, 331], "signal_dim1": [9, 309, 331], "signal_dim2": [9, 309, 331], "signal_dimn": [9, 309, 331], "signal_dim": [9, 309, 331], "embed": [9, 32, 309, 544, 570, 682, 753], "max_norm": [9, 10, 32, 33, 309, 335, 449, 450, 542, 682], "dim": [9, 26, 28, 32, 96, 259, 303, 309, 312, 326, 336, 337, 338, 341, 349, 390, 537, 544, 557, 564, 565, 682, 700, 720, 731, 732, 736], "ifft": [9, 32, 309, 336, 342], "pi": [9, 32, 240, 244, 309, 336, 341, 535, 540], "44509285e": [9, 32, 309, 336], "14423775e": [9, 32, 309, 336], "17j": [9, 32, 309, 336, 341], "11483250e": [9, 32, 309, 336], "16j": [9, 32, 309, 336, 341], "33486982e": [9, 32, 309, 336], "22464680e": [9, 32, 309, 336], "95799250e": [9, 32, 309, 336], "66951701e": [9, 32, 309, 336], "fft2": [9, 309], "crop": [9, 32, 309, 337, 342, 352], "repeat": [9, 10, 16, 32, 33, 39, 309, 321, 337, 342, 434, 456, 542, 547, 548, 618, 623, 694, 706, 712, 715, 716, 722, 723, 730, 733], "vari": [9, 20, 49, 245, 337, 454, 540, 542, 553, 656, 657, 658, 718, 722, 731, 733, 740], "20477401j": [9, 309, 337], "0614962j": [9, 309, 337], "idct": [9, 32, 309], "79": [9, 10, 32, 33, 36, 41, 51, 189, 194, 309, 330, 340, 351, 449, 450, 540, 542, 647], "49862671": [9, 32, 309, 330, 340], "70": [9, 32, 33, 309, 330, 340, 462, 486, 545, 555, 588, 665, 703], "37691498": [9, 32, 309, 330, 340], "00390816": [9, 32, 309, 330, 340], "58938599": [9, 32, 309, 330, 340], "92713165": [9, 32, 309, 330, 340], "078475": [9, 32, 309, 330, 340], "19664812": [9, 32, 309, 330, 340], "95411837": [9, 32, 309, 330, 340], "30636606e": [9, 32, 309, 341], "43029718e": [9, 32, 309, 341], "18j": [9, 32, 309, 336, 341], "53080850e": [9, 32, 309, 341], "58689626e": [9, 32, 309, 341], "24474906e": [9, 32, 309, 341], "91858728e": [9, 32, 309, 341], "01435406e": [9, 32, 309, 341], "ifftn": [9, 32, 309], "combin": [9, 26, 32, 52, 309, 321, 342, 352, 434, 459, 460, 542, 545, 573, 583, 712, 715, 718, 719, 720, 722, 724, 727, 733, 743, 753], "explain": [9, 32, 309, 342, 352, 700, 710, 711, 712, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 733, 734, 736, 738, 739, 740, 741, 742, 743, 749, 756, 759], "24730653": [9, 32, 309, 342], "90832391j": [9, 32, 309, 342], "49495562": [9, 32, 309, 342], "9039565j": [9, 32, 309, 342], "98193269": [9, 32, 309, 342], "49560517j": [9, 32, 309, 342], "93280757": [9, 32, 309, 342], "48075343j": [9, 32, 309, 342], "28526384": [9, 32, 309, 342], "3351205j": [9, 32, 309, 342], "2343787": [9, 32, 309, 342], "83528011j": [9, 32, 309, 342], "18791352": [9, 32, 309, 342], "30690572j": [9, 32, 309, 342], "82115787": [9, 32, 309, 342], "96195183j": [9, 32, 309, 342], "44719226": [9, 32, 309, 342], "72654048j": [9, 32, 309, 342], "51476765": [9, 309, 342], "66160417j": [9, 309, 342], "04319742": [9, 309, 342], "05411636j": [9, 309, 342], "015561": [9, 309, 342], "04216015j": [9, 309, 342], "06310689": [9, 309, 342], "05347854j": [9, 309, 342], "13392983": [9, 309, 342], "16052352j": [9, 309, 342], "08371392": [9, 309, 342], "17252843j": [9, 309, 342], "0031429": [9, 309, 342], "05421245j": [9, 309, 342], "10446617": [9, 309, 342], "17747098j": [9, 309, 342], "05344324": [9, 309, 342], "07972424j": [9, 309, 342], "8344667": [9, 32, 309, 342], "98222595j": [9, 32, 309, 342], "48472244": [9, 32, 309, 342], "30233797j": [9, 32, 309, 342], "mode": [9, 14, 26, 32, 37, 48, 49, 50, 164, 167, 172, 177, 194, 227, 268, 303, 309, 310, 312, 339, 344, 352, 360, 366, 368, 369, 372, 384, 393, 398, 400, 401, 403, 405, 408, 410, 487, 488, 489, 493, 494, 496, 497, 510, 511, 515, 516, 518, 519, 539, 540, 542, 545, 590, 682, 683, 684, 697, 706, 711, 712, 713, 718, 721, 722, 736, 746, 753, 756], "scale_factor": [9, 32, 309, 344, 736], "recompute_scale_factor": [9, 32, 309, 344, 736], "align_corn": [9, 32, 309, 344, 736], "antialia": [9, 32, 309, 344, 736], "down": [9, 32, 309, 312, 344, 392, 680, 711, 733, 748, 753, 759], "channel": [9, 10, 13, 32, 33, 36, 51, 52, 309, 315, 332, 333, 334, 344, 414, 415, 416, 454, 458, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 566, 678, 679, 681, 682, 684, 685, 686, 687, 706, 708, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736], "height": [9, 10, 13, 32, 33, 36, 309, 344, 454, 542, 544, 560, 561, 562, 563, 566, 680, 741], "width": [9, 10, 13, 32, 33, 36, 309, 310, 312, 321, 344, 358, 400, 437, 454, 542, 544, 558, 559, 560, 561, 562, 563, 566, 570], "bilinear": [9, 32, 309, 344, 736], "trilinear": [9, 32, 309, 344, 736], "nearest_exact": [9, 32, 309, 344, 736], "tf_area": [9, 32, 309, 344, 736], "bicub": [9, 32, 309, 344, 736], "mitchellcub": [9, 32, 309, 344, 736], "lanczos3": [9, 32, 309, 344, 736], "lanczos5": [9, 32, 309, 344, 736], "gaussian": [9, 32, 59, 309, 344, 534, 736], "overwrit": [9, 26, 32, 167, 309, 344, 539, 712, 730, 731, 738], "corner": [9, 32, 309, 344, 711, 712, 731], "pixel": [9, 32, 309, 344], "align": [9, 26, 32, 309, 310, 344, 355, 711, 719, 731, 738, 740, 748, 759], "thu": [9, 32, 188, 201, 232, 236, 244, 245, 309, 310, 344, 357, 540, 545, 577, 578, 706, 710, 719, 724, 728, 731, 734], "antialias": [9, 32, 309, 344], "downsampl": [9, 32, 309, 344], "resiz": [9, 32, 309, 344, 736], "max_pool1d": [9, 32, 309, 348], "dilat": [9, 13, 32, 36, 309, 312, 345, 346, 347, 350, 351, 400, 544, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 682], "dilaton": [9, 32, 309, 345, 346, 347], "ensur": [9, 10, 32, 33, 309, 310, 345, 346, 347, 370, 471, 542, 700, 710, 711, 712, 715, 720, 721, 722, 724, 725, 726, 728, 730, 731, 732, 733, 734, 747, 753], "cover": [9, 32, 309, 345, 346, 347, 700, 710, 714, 715, 717, 722, 723, 727, 728, 733, 736, 737], "max_pool3d": [9, 32, 309], "reduce_window": [9, 36, 309], "window_dimens": [9, 36, 309, 351], "window_strid": [9, 36, 309, 351], "base_dil": [9, 36, 309, 351], "window_dil": [9, 36, 309, 351], "string": [9, 10, 13, 26, 32, 36, 104, 105, 117, 124, 146, 147, 148, 149, 150, 152, 161, 168, 169, 173, 255, 301, 309, 310, 312, 351, 358, 400, 436, 452, 538, 539, 542, 544, 545, 557, 558, 559, 560, 562, 564, 566, 579, 680, 694, 716, 717, 719, 720, 721, 724, 731, 738, 741], "low": [9, 13, 18, 36, 41, 309, 351, 544, 551, 557, 558, 559, 560, 562, 564, 566, 645, 647, 718, 724, 730, 731, 736, 738, 749, 751, 753, 754, 755, 757, 759], "high": [9, 13, 18, 36, 41, 309, 351, 494, 542, 544, 551, 557, 558, 559, 560, 562, 564, 566, 645, 647, 704, 710, 724, 729, 731, 741, 748, 749, 750, 751, 752, 753, 757, 759, 760], "pair": [9, 13, 36, 182, 201, 265, 298, 303, 306, 309, 342, 351, 352, 540, 544, 545, 557, 558, 559, 560, 562, 564, 566, 571, 573], "give": [9, 13, 36, 133, 309, 351, 538, 544, 547, 557, 558, 559, 560, 562, 564, 566, 612, 680, 681, 700, 704, 706, 711, 712, 713, 716, 719, 720, 722, 723, 725, 726, 733, 753, 757], "rfftn": [9, 32, 309], "linear_algebra": [9, 14, 32, 37, 545, 734], "_arraywithlinearalgebraexperiment": [9, 51], "adjoint": [9, 14, 32, 37, 310, 545, 581, 592, 593], "cond": [9, 32, 73, 310, 536, 746], "p": [9, 10, 14, 32, 33, 37, 94, 198, 310, 315, 354, 419, 449, 450, 537, 540, 542, 545, 549, 584, 600, 632, 682, 700, 711, 712, 713], "933034373659268": [9, 354], "diagflat": [9, 32, 310, 362, 365], "offset": [9, 14, 17, 28, 32, 37, 40, 89, 310, 315, 355, 414, 415, 416, 537, 545, 550, 576, 597, 643], "padding_valu": [9, 32, 310, 355], "right_left": [9, 32, 310, 355], "num_row": [9, 32, 310, 355], "num_col": [9, 32, 310, 355], "eig": [9, 14, 32, 310, 545, 578, 579], "37228132": [9, 32, 310, 357, 359, 577], "82456484": [9, 357, 577], "41597356": [9, 357, 577], "56576746": [9, 357, 577], "90937671": [9, 357, 577], "eigh_tridiagon": [9, 32, 310], "eigvals_onli": [9, 32, 310, 358], "select": [9, 22, 32, 45, 310, 312, 321, 358, 367, 408, 435, 436, 555, 663, 664, 710, 711, 712, 719, 730, 733, 738, 740, 743, 746, 753, 756, 757], "select_rang": [9, 32, 310, 358], "tol": [9, 32, 50, 310, 358, 369, 372], "eigenvalu": [9, 14, 32, 37, 49, 310, 357, 358, 359, 545, 577, 578, 579, 586], "eigenvector": [9, 32, 310, 357, 358, 545, 577, 578], "v": [9, 13, 21, 28, 32, 36, 44, 93, 192, 197, 199, 240, 310, 312, 358, 364, 370, 389, 540, 544, 548, 554, 571, 623, 661, 680, 682, 683, 684, 685, 686, 687, 700, 706, 707, 711, 712, 713, 717, 738, 741, 742, 743], "interv": [9, 18, 23, 32, 41, 46, 76, 92, 93, 99, 310, 321, 358, 437, 537, 545, 547, 551, 556, 573, 599, 605, 608, 616, 645, 647, 673, 674], "togeth": [9, 26, 32, 274, 287, 306, 310, 358, 687, 700, 703, 715, 718, 720, 730, 731, 733, 734, 736, 742, 743, 746, 751, 753, 754, 759], "cluster": [9, 32, 310, 358, 746, 753], "converg": [9, 32, 310, 358, 704], "li": [9, 32, 310, 321, 358, 442, 702], "_2": [9, 32, 310, 358], "machin": [9, 14, 32, 37, 119, 122, 310, 358, 538, 545, 586, 589, 703, 711, 714, 727, 745, 748, 751, 753, 755, 756, 757, 758, 759], "precis": [9, 14, 32, 37, 119, 207, 227, 234, 241, 282, 306, 310, 321, 358, 434, 494, 516, 538, 540, 542, 545, 578, 579, 584, 591, 593, 594, 600, 719, 720, 731, 735, 736, 757], "eig_val": [9, 32, 310, 358], "decreas": [9, 32, 310, 358], "eig_vector": [9, 32, 310, 358], "38196": [9, 358], "61803": [9, 358], "eigval": [9, 32, 310], "initialize_tuck": [9, 32, 310], "svd": [9, 14, 32, 37, 310, 360, 364, 369, 370, 371, 372, 545, 594], "seed": [9, 13, 18, 20, 26, 32, 36, 41, 267, 268, 303, 310, 316, 360, 369, 372, 420, 421, 422, 423, 424, 544, 551, 553, 567, 644, 645, 646, 647, 649, 655, 679, 681, 728, 732, 733], "truncated_svd": [9, 32, 310, 360, 369, 372], "non_neg": [9, 32, 268, 303, 310, 360], "mask": [9, 13, 32, 36, 49, 310, 312, 360, 361, 369, 372, 407, 464, 542, 544, 567, 570, 571, 736], "svd_mask_repeat": [9, 32, 310, 360, 369, 372], "compon": [9, 32, 97, 98, 175, 176, 177, 180, 183, 192, 194, 195, 197, 199, 227, 229, 230, 237, 240, 241, 244, 245, 267, 268, 276, 303, 306, 310, 360, 369, 537, 540, 552, 653, 700, 703, 738, 749, 754, 756], "distribut": [9, 15, 18, 32, 38, 41, 309, 310, 311, 316, 332, 333, 334, 360, 369, 372, 375, 377, 420, 421, 422, 423, 424, 546, 551, 602, 603, 604, 644, 645, 646, 647, 649, 681, 682, 683, 684, 710, 711, 719, 721, 746, 753, 756], "tuckertensor": [9, 32, 50, 268, 303, 310, 360, 369, 372], "scheme": [9, 32, 310, 360, 369, 714, 742, 753], "tucker": [9, 32, 268, 303, 310, 360, 369], "decomposit": [9, 14, 32, 37, 49, 267, 268, 303, 310, 360, 369, 372, 545, 572, 578, 582, 590, 593, 710, 760], "factor": [9, 11, 13, 14, 32, 34, 36, 37, 48, 49, 165, 166, 167, 309, 310, 342, 352, 360, 361, 369, 372, 523, 524, 529, 530, 539, 543, 544, 545, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 572, 681, 682, 686, 703, 724], "miss": [9, 32, 310, 312, 360, 369, 372, 407, 686, 710, 711, 715, 718, 719, 722, 731, 733, 736], "everywher": [9, 32, 310, 360, 369, 372], "els": [9, 10, 18, 31, 32, 41, 112, 113, 114, 115, 116, 128, 234, 238, 310, 316, 360, 369, 371, 372, 421, 453, 457, 538, 540, 542, 549, 551, 634, 637, 645, 646, 647, 694, 700, 710, 711, 712, 714, 716, 720, 721, 724, 727, 730, 731, 732, 733, 734, 736, 738, 740, 742, 743, 746, 754], "imput": [9, 32, 310, 360, 369, 372], "core": [9, 32, 49, 158, 310, 360, 369, 372, 539, 702, 711, 721, 733, 743, 751, 752, 753, 754, 758, 760], "kron": [9, 32, 310, 365, 760], "make_svd_non_neg": [9, 32, 310, 371], "u": [9, 14, 28, 32, 37, 49, 93, 310, 364, 370, 371, 545, 549, 572, 579, 593, 632, 700, 703, 705, 711, 712, 713, 718, 719, 725, 728, 730, 731, 732, 733, 734, 736, 742, 746], "nntype": [9, 32, 310, 364], "nndsvd": [9, 32, 310, 364], "being": [9, 26, 32, 47, 51, 55, 76, 310, 312, 364, 400, 495, 537, 542, 545, 579, 680, 681, 700, 703, 704, 711, 712, 714, 715, 716, 718, 720, 721, 722, 726, 728, 730, 731, 732, 733, 734, 736, 738, 741, 745, 746, 749, 751, 752, 753, 754, 759, 760], "decompos": [9, 32, 49, 267, 268, 284, 291, 303, 306, 310, 364, 369, 372, 731], "singular": [9, 14, 32, 37, 310, 360, 364, 370, 371, 545, 584, 586, 589, 593, 594, 720], "nndsvda": [9, 32, 310, 364], "boutsidi": [9, 32, 310, 364], "gallopoulo": [9, 32, 310, 364], "pattern": [9, 10, 32, 33, 310, 364, 454, 455, 456, 542, 704, 720, 723], "recognit": [9, 32, 310, 364], "1350": [9, 32, 310, 364], "1362": [9, 32, 310, 364], "2008": [9, 32, 310, 364, 753], "matrix_exp": [9, 32, 310], "7183": [9, 32, 310, 365], "3891": [9, 32, 310, 365], "mode_dot": [9, 32, 48, 49, 50, 310], "matrix_or_vector": [9, 32, 49, 50, 310, 366], "i_1": [9, 32, 49, 310, 366], "i_k": [9, 32, 49, 310, 366], "i_n": [9, 32, 49, 310, 366], "i_": [9, 32, 49, 310, 321, 366, 437], "multi_dot": [9, 32, 310], "49": [9, 18, 32, 36, 37, 241, 309, 310, 321, 330, 340, 351, 367, 435, 540, 555, 598, 646, 665], "148": [9, 31, 32, 197, 310, 367], "multi_mode_dot": [9, 32, 310], "mat_or_vec_list": [9, 32, 310, 368], "skip": [9, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 63, 64, 65, 66, 67, 89, 91, 96, 98, 103, 107, 109, 134, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 253, 254, 256, 257, 259, 274, 275, 276, 278, 280, 286, 287, 293, 295, 297, 298, 299, 310, 312, 332, 333, 334, 361, 363, 368, 373, 374, 376, 377, 380, 381, 382, 385, 401, 404, 406, 408, 409, 414, 416, 417, 418, 419, 421, 434, 435, 436, 437, 443, 446, 447, 449, 450, 454, 455, 456, 458, 461, 462, 465, 467, 469, 470, 471, 473, 474, 477, 485, 486, 500, 501, 503, 505, 507, 508, 521, 527, 532, 549, 558, 559, 560, 561, 567, 568, 571, 572, 573, 578, 579, 580, 581, 583, 584, 586, 588, 590, 591, 597, 602, 603, 604, 605, 609, 612, 613, 614, 615, 616, 619, 620, 637, 644, 645, 646, 647, 649, 652, 655, 656, 657, 658, 659, 663, 664, 667, 669, 670, 672, 673, 674, 694, 717, 727, 733], "ndim": [9, 14, 19, 32, 37, 42, 51, 55, 310, 312, 368, 369, 372, 380, 381, 382, 393, 401, 403, 410, 522, 542, 545, 552, 590, 593, 653, 718, 727, 733], "text": [9, 10, 310, 368, 710, 712, 717, 722, 723], "times_0": [9, 310, 368], "vec": [9, 310, 368], "times_1": [9, 310, 368], "cdot": [9, 227, 310, 368, 540], "times_n": [9, 310, 368], "noqa": [9, 49, 174, 241, 309, 310, 345, 368, 540, 546, 602, 682, 691, 732], "partial_tuck": [9, 32, 310], "n_iter_max": [9, 32, 310, 369, 372], "verbos": [9, 32, 310, 369, 372, 733, 738], "return_error": [9, 32, 310, 369, 372], "variat": [9, 32, 310, 369, 372, 722, 731, 733], "reconstruct": [9, 14, 20, 32, 43, 310, 312, 369, 372, 411, 545, 553, 593, 655, 657, 732], "return_erro": [9, 310, 369, 372], "svd_flip": [9, 32, 310], "u_based_decis": [9, 32, 310, 370], "column": [9, 14, 32, 37, 49, 87, 101, 269, 303, 310, 312, 319, 321, 357, 361, 370, 389, 391, 392, 396, 398, 427, 433, 434, 537, 545, 577, 578, 584, 590, 592, 593, 598, 681], "basi": [9, 32, 310, 370, 712, 714, 741], "flip": [9, 16, 32, 39, 49, 185, 310, 312, 370, 391, 392, 540, 547, 730, 740, 741, 743], "row": [9, 32, 87, 101, 269, 303, 310, 312, 319, 321, 361, 370, 392, 398, 413, 427, 433, 434, 537, 545, 551, 552, 584, 592, 593, 598, 644, 653, 681], "decis": [9, 32, 310, 370, 714, 720, 736, 738, 740, 753], "u_adjust": [9, 32, 310, 370], "v_adjust": [9, 32, 310, 370], "compute_uv": [9, 14, 32, 37, 310, 371, 545, 593], "n_eigenvec": [9, 32, 310, 371], "returnedv": [9, 371], "vh": [9, 14, 32, 37, 310, 371, 545, 593], "significantli": [9, 14, 32, 37, 310, 371, 545, 593, 702, 719, 751], "faster": [9, 14, 32, 37, 310, 371, 545, 593, 709, 748, 755, 758], "eigen": [9, 32, 310, 371], "full": [9, 14, 32, 36, 37, 49, 119, 206, 214, 267, 268, 303, 310, 311, 312, 371, 375, 401, 404, 488, 497, 511, 519, 537, 538, 540, 542, 544, 545, 559, 561, 562, 563, 586, 590, 592, 593, 700, 703, 704, 711, 712, 717, 720, 723, 724, 726, 727, 731, 733, 736, 738, 746, 751, 753, 759], "namedtupl": [9, 14, 20, 32, 37, 43, 310, 312, 357, 371, 411, 545, 553, 577, 578, 590, 591, 593, 655, 656, 657], "fixed_factor": [9, 32, 310, 372], "tl": [9, 32, 310, 372], "g": [9, 18, 20, 22, 24, 32, 41, 47, 49, 105, 134, 147, 194, 207, 227, 234, 237, 309, 310, 316, 321, 345, 347, 372, 420, 421, 422, 423, 424, 435, 436, 538, 539, 540, 545, 549, 551, 553, 555, 578, 579, 584, 591, 593, 594, 600, 627, 631, 633, 636, 641, 645, 646, 647, 655, 656, 657, 658, 663, 664, 666, 668, 669, 671, 681, 704, 705, 710, 711, 713, 714, 716, 717, 718, 729, 731, 733, 738, 746, 748, 749], "kolda": [9, 32, 310, 372], "bader": [9, 32, 310, 372], "applic": [9, 13, 32, 36, 310, 372, 544, 545, 549, 555, 570, 571, 597, 630, 631, 632, 636, 637, 669, 671, 700, 711, 719, 720, 721, 728, 742, 750, 751, 753, 755, 757, 759], "siam": [9, 32, 310, 372], "review": [9, 32, 310, 372, 710, 712, 719, 722, 731, 734], "vol": [9, 32, 310, 372], "pp": [9, 32, 310, 372], "455": [9, 32, 310, 372], "500": [9, 32, 33, 36, 309, 310, 332, 333, 372, 462, 542], "2009": [9, 32, 310, 372], "loss": [9, 32, 49, 373, 374, 375, 376, 377, 494, 516, 542, 602, 603, 604, 700, 719, 720, 727, 731, 734, 735, 741, 742, 743, 753, 760], "_arraywithlossesexperiment": [9, 51], "huber_loss": [9, 32, 311], "pred": [9, 15, 32, 38, 311, 373, 375, 546, 602, 603, 604, 700, 718, 727, 730], "delta": [9, 11, 32, 34, 311, 373, 523, 543], "ground": [9, 311, 373, 702, 708, 731, 733], "truth": [9, 195, 205, 206, 213, 214, 230, 311, 373, 540, 708, 731, 733], "predict": [9, 15, 32, 38, 311, 373, 375, 377, 546, 602, 603, 604, 700], "transit": [9, 32, 311, 373, 753], "huber": [9, 32, 311, 373], "l1_loss": [9, 32, 311], "No": [9, 15, 32, 38, 311, 374, 375, 376, 377, 546, 602, 712, 719, 720, 753], "l1": [9, 14, 32, 37, 311, 315, 373, 374, 376, 417, 545, 600, 718, 741], "targetict": [9, 32, 311, 374, 376, 377], "20000000000000004": [9, 374], "smooth_l1_loss": [9, 32, 311], "smooth": [9, 15, 32, 38, 311, 373, 376, 546, 602, 603, 604, 729], "8125": [9, 376], "soft_margin_loss": [9, 32, 311], "soft": [9, 32, 311, 312, 377, 407, 721], "margin": [9, 32, 311, 377, 731], "35667497": [9, 377, 546, 603], "22314353": [9, 377], "60943791": [9, 377], "manipul": [9, 32, 702, 730, 731, 734, 736, 738, 743, 745, 753], "_arraywithmanipulationexperiment": [9, 51], "as_strid": [9, 32, 312], "nativeshap": [9, 13, 16, 18, 32, 39, 41, 77, 78, 85, 90, 97, 102, 312, 316, 378, 388, 393, 401, 404, 420, 421, 422, 423, 424, 486, 499, 504, 506, 537, 542, 544, 547, 551, 557, 559, 561, 563, 565, 612, 645, 646, 647, 726, 728], "byte": [9, 10, 28, 32, 33, 51, 89, 312, 378, 480, 537, 542, 758, 759], "associative_scan": [9, 32, 312], "revers": [9, 10, 14, 22, 32, 37, 45, 51, 52, 310, 312, 321, 363, 379, 391, 392, 435, 436, 453, 542, 545, 547, 555, 598, 609, 663, 664, 710, 718, 719, 720, 722, 723, 730, 731, 736, 743, 746], "associ": [9, 14, 32, 37, 177, 227, 312, 321, 379, 437, 540, 545, 586, 589, 601, 712, 720, 727, 728, 731, 732, 733, 746], "scan": [9, 32, 312, 379, 746], "atleast_1d": [9, 32, 312], "ari": [9, 32, 312, 380, 381, 382, 386, 395, 412], "cannot": [9, 244, 380, 381, 382, 540, 712, 714, 716, 720, 731, 738, 743, 759], "avoid": [9, 16, 32, 194, 199, 201, 217, 227, 312, 315, 380, 381, 382, 386, 388, 390, 391, 392, 395, 399, 406, 412, 414, 415, 416, 448, 464, 489, 494, 516, 540, 542, 547, 608, 609, 610, 612, 614, 615, 617, 619, 711, 712, 716, 717, 718, 719, 720, 724, 728, 731, 733, 734, 735, 736, 753], "view": [9, 16, 32, 51, 88, 312, 380, 381, 382, 386, 388, 390, 391, 392, 395, 399, 406, 412, 464, 537, 542, 547, 608, 609, 610, 612, 614, 615, 617, 619, 711, 712, 724, 753], "made": [9, 16, 32, 310, 312, 362, 380, 381, 382, 616, 703, 706, 710, 712, 714, 715, 718, 719, 724, 725, 727, 729, 730, 731, 734, 736, 738, 740, 753], "a1": [9, 33, 380, 381, 382, 446], "a2": [9, 380, 381, 382], "atleast_2d": [9, 32, 312], "atleast_3d": [9, 32, 312], "three": [9, 94, 258, 303, 312, 382, 537, 711, 712, 718, 719, 720, 722, 731, 733, 736, 737, 738, 754, 759], "concat_from_sequ": [9, 32, 312], "input_sequ": [9, 32, 312, 385], "new_axi": [9, 32, 312, 385, 743], "concaten": [9, 10, 16, 32, 37, 312, 385, 454, 458, 542, 544, 547, 570, 588, 606, 732, 736, 738, 741], "insert": [9, 19, 32, 42, 312, 377, 385, 547, 549, 552, 554, 608, 628, 629, 650, 661, 719, 725], "do": [9, 10, 26, 32, 33, 194, 227, 236, 312, 321, 385, 441, 442, 471, 540, 542, 549, 624, 631, 634, 635, 636, 641, 700, 704, 708, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 734, 736, 738, 740, 741, 742, 743, 746, 748, 754, 759, 760], "stack": [9, 14, 16, 26, 32, 37, 39, 51, 99, 100, 270, 303, 310, 312, 357, 385, 387, 396, 413, 488, 497, 519, 537, 542, 545, 547, 549, 574, 576, 577, 578, 579, 581, 583, 585, 586, 587, 589, 590, 591, 593, 594, 597, 624, 634, 635, 682, 700, 709, 714, 716, 730, 738, 749, 751, 758, 759], "dsplit": [9, 32, 312], "indices_or_sect": [9, 32, 312, 386, 395, 412], "3rd": [9, 32, 312, 386], "dstack": [9, 32, 312], "fill_diagon": [9, 32, 312], "fill_diag": [9, 389], "start_dim": [9, 32, 312, 390, 700], "end_dim": [9, 32, 312, 390, 700], "read": [9, 16, 26, 28, 32, 39, 89, 312, 390, 537, 547, 612, 710, 711, 717, 719, 733, 735, 736, 753], "fastest": [9, 16, 32, 39, 310, 312, 367, 390, 547, 612], "slowest": [9, 16, 32, 39, 312, 390, 547, 612], "fortran": [9, 16, 32, 39, 312, 390, 547, 612, 753, 757], "layout": [9, 16, 32, 39, 312, 390, 547, 612, 716, 730, 731, 736], "fliplr": [9, 32, 312, 730], "diag": [9, 14, 32, 37, 312, 391, 392, 545, 578, 738], "flipud": [9, 32, 312, 730], "fold": [9, 32, 312, 401, 402, 719], "unfold": [9, 32, 49, 310, 312, 360, 393, 401, 403], "folded_tensor": [9, 312, 393], "heavisid": [9, 32, 312], "step": [9, 11, 28, 32, 34, 76, 92, 312, 394, 523, 524, 527, 529, 530, 531, 537, 543, 548, 621, 622, 623, 680, 686, 700, 704, 706, 710, 711, 712, 715, 716, 718, 719, 720, 721, 722, 729, 731, 733, 738, 741, 742, 743, 745, 753], "5000": [9, 312, 394, 545, 581], "hsplit": [9, 32, 312], "horizont": [9, 32, 312, 395, 454, 542], "hstack": [9, 32, 312], "vstack": [9, 32, 312, 396], "i0": [9, 32, 312, 321, 437], "modifi": [9, 26, 32, 49, 312, 321, 397, 400, 405, 441, 710, 711, 712, 714, 716, 717, 720, 721, 723, 725, 727, 730, 732, 733, 734, 738], "bessel": [9, 22, 32, 45, 263, 303, 312, 397, 555, 670, 672], "kind": [9, 22, 32, 119, 122, 123, 232, 321, 397, 435, 436, 441, 538, 540, 555, 663, 664, 669, 671, 709, 731, 733, 736, 738, 746], "26606588": [9, 32, 312, 397], "2795853": [9, 32, 312, 397], "88079259": [9, 32, 312, 397], "row_mod": [9, 32, 312, 398], "column_mod": [9, 32, 312, 398], "ascend": [9, 21, 32, 44, 312, 319, 398, 427, 554, 659, 661], "prod": [9, 10, 22, 33, 45, 310, 312, 361, 363, 398, 455, 542, 555, 720, 722, 738], "moveaxi": [9, 32, 312], "destin": [9, 32, 312, 399], "unstack": [9, 16, 26, 39, 399, 547, 718, 738, 741, 760], "reorder": [9, 16, 32, 39, 312, 399, 454, 542, 547, 609], "uniqu": [9, 10, 20, 32, 33, 43, 312, 399, 400, 411, 478, 542, 548, 549, 553, 621, 622, 623, 626, 630, 655, 656, 657, 658, 700, 702, 714, 718, 727, 731, 732, 736, 746, 756], "pad_width": [9, 16, 32, 39, 312, 400, 547, 607, 620], "stat_length": [9, 32, 312, 400], "constant_valu": [9, 32, 312, 400], "end_valu": [9, 32, 312, 400], "reflect_typ": [9, 32, 312, 400], "even": [9, 32, 49, 194, 227, 232, 237, 312, 321, 400, 434, 540, 703, 704, 711, 712, 714, 719, 720, 721, 723, 726, 727, 730, 731, 732, 736, 740, 741, 742, 743, 746, 759], "partial_fold": [9, 32, 312], "skip_begin": [9, 32, 312, 401, 402, 403, 404], "untouch": [9, 32, 312, 401, 402, 403, 404], "begin": [9, 32, 238, 312, 400, 401, 402, 403, 404, 540, 549, 624, 635, 680, 711, 714, 719, 732], "re": [9, 10, 19, 32, 42, 167, 312, 401, 402, 454, 539, 542, 545, 547, 552, 595, 613, 652, 654, 701, 702, 703, 705, 710, 711, 712, 713, 714, 720, 729, 730, 731, 732, 734, 736, 740, 743, 746, 753], "partial_tensor_to_vec": [9, 32, 312], "skip_end": [9, 32, 312, 402, 403], "vectoris": [9, 32, 49, 312, 402, 404], "partial_unfold": [9, 32, 312], "ravel_tensor": [9, 32, 312, 403], "n_sampl": [9, 32, 312, 403], "n_1": [9, 32, 312, 403], "n_2": [9, 32, 312, 403], "n_i": [9, 32, 310, 312, 361, 403], "partial_vec_to_tensor": [9, 32, 312], "rot90": [9, 32, 312, 730], "rotat": [9, 32, 312, 406, 745], "soft_threshold": [9, 32, 312], "whole": [9, 32, 312, 315, 407, 417, 418, 419, 712, 717, 725], "take_along_axi": [9, 32, 312], "extract": [9, 32, 312, 384, 408, 731, 734, 749, 753, 754, 759], "One": [9, 10, 16, 18, 32, 33, 39, 41, 312, 380, 381, 382, 384, 400, 408, 455, 542, 547, 551, 612, 645, 715, 718, 720, 722, 727, 732, 733, 738, 740, 741], "bound": [9, 32, 312, 384, 405, 408, 724, 731, 733, 738, 759], "arr": [9, 10, 29, 32, 127, 312, 384, 405, 408, 486, 538, 716, 720, 721], "top_k": [9, 32, 312], "largest": [9, 26, 32, 119, 122, 310, 312, 370, 409, 538, 545, 584, 593, 745], "sort": [9, 20, 26, 32, 43, 52, 246, 310, 312, 321, 357, 409, 427, 441, 540, 545, 553, 577, 578, 593, 594, 655, 659, 660, 661, 700, 709, 719, 734], "top": [9, 16, 32, 312, 409, 454, 542, 606, 680, 700, 711, 712, 720, 731, 733, 736, 741, 742, 753, 757], "retun": [9, 32, 312, 409], "smallest": [9, 26, 32, 119, 122, 190, 312, 409, 538, 540, 545, 584], "name": [9, 14, 20, 24, 37, 43, 47, 201, 310, 312, 357, 409, 411, 444, 445, 540, 542, 545, 553, 577, 578, 582, 590, 591, 593, 598, 655, 656, 657, 684, 691, 693, 710, 711, 712, 716, 717, 718, 719, 722, 723, 724, 726, 731, 732, 733, 734, 735, 736, 738, 741, 743, 753], "unfolded_tensor": [9, 312, 410], "unique_consecut": [9, 32, 312], "vsplit": [9, 32, 312], "vertic": [9, 32, 312, 412, 413, 454, 542, 712], "_arraywithnormsexperiment": [9, 51], "batch_norm": [9, 32, 315], "varianc": [9, 22, 32, 45, 315, 414, 416, 555, 672, 681, 685], "momentum": [9, 32, 315, 414, 416, 685, 703], "nsc": [9, 32, 315, 414, 415, 416, 685], "braodcast": [9, 32, 315, 414], "present": [9, 26, 32, 276, 306, 315, 414, 415, 416, 702, 710, 712, 718, 720, 721, 726, 730, 738, 750, 751, 760], "running_mean": [9, 32, 315, 414, 416, 685], "running_var": [9, 32, 315, 414, 416, 685], "nc": [9, 32, 315, 414, 415, 416, 685], "group_norm": [9, 32, 315], "num_group": [9, 32, 315, 415], "group": [9, 32, 312, 315, 411, 415, 544, 549, 557, 564, 565, 626, 714, 718, 720, 727, 731, 732, 749, 752, 758], "separ": [9, 10, 32, 315, 415, 544, 570, 712, 715, 718, 719, 733, 738, 740, 741, 754, 758], "instance_norm": [9, 32, 315], "l1_normal": [9, 32, 315], "33333334": [9, 315, 417, 419, 525, 543, 544, 545, 566, 600], "33333337": [9, 92, 315, 417, 525, 537, 543], "28571439": [9, 315, 417], "l2_normal": [9, 32, 315, 419], "l2": [9, 14, 37, 48, 49, 315, 418, 419, 545, 600, 682, 718], "44721359": [9, 32, 315, 418, 419], "89442718": [9, 32, 315, 418, 419], "60000002": [9, 45, 52, 315, 418, 419, 667], "80000001": [9, 315, 418, 419], "lp_normal": [9, 32, 315], "lp": [9, 315, 419], "_arraywithrandomexperiment": [9, 51], "bernoulli": [9, 32, 309, 316, 332, 333, 334], "probabl": [9, 13, 15, 18, 32, 36, 38, 41, 309, 316, 321, 332, 333, 334, 420, 434, 437, 441, 544, 546, 551, 567, 570, 571, 602, 644, 681, 682, 700, 704, 733, 747], "event": [9, 32, 316, 420, 733], "entri": [9, 16, 26, 32, 39, 43, 92, 312, 316, 391, 392, 420, 537, 547, 549, 614, 637, 655, 711, 719, 733, 753], "parameter": [9, 18, 32, 41, 316, 420, 421, 423, 424, 551, 644, 646, 647], "prob": [9, 13, 32, 36, 41, 309, 316, 332, 333, 334, 420, 544, 551, 567, 644, 682, 700], "odd": [9, 32, 232, 312, 316, 400, 420, 540, 709, 714], "drawn": [9, 18, 32, 41, 316, 420, 421, 422, 423, 424, 551, 644, 645, 646, 647, 681, 733], "dirichlet": [9, 32, 316], "shuffl": [9, 18, 26, 32, 41, 422, 551], "10598304": [9, 316, 422], "21537054": [9, 316, 422], "67864642": [9, 316, 422], "48006698": [9, 316, 422], "07472073": [9, 316, 422], "44521229": [9, 316, 422], "55479872": [9, 316, 422], "05426367": [9, 316, 422], "39093761": [9, 316, 422], "19531053": [9, 316, 422], "51675832": [9, 316, 422], "28793114": [9, 316, 422], "12315625": [9, 316, 422], "29823365": [9, 316, 422], "5786101": [9, 316, 422], "15564976": [9, 316, 422], "50542368": [9, 316, 422], "33892656": [9, 316, 422], "1325352": [9, 316, 422], "44439589": [9, 316, 422], "42306891": [9, 316, 422], "gamma": [9, 17, 32, 40, 280, 290, 306, 316, 321, 438, 550, 643], "poisson": [9, 32, 311, 316, 375], "rate": [9, 11, 32, 34, 309, 316, 350, 424, 524, 527, 529, 530, 531, 543, 548, 621, 622, 623, 686, 719], "paramt": [9, 424, 549, 631, 641], "lam": [9, 32, 316, 424], "_arraywithsearchingexperiment": [9, 51], "unravel_index": [9, 32, 317], "unravel": [9, 32, 317, 425], "_arraywithsetexperiment": [9, 51], "_arraywithsortingexperiment": [9, 51], "lexsort": [9, 32, 319], "indirectli": [9, 32, 319, 427], "statist": [9, 32, 47, 312, 400, 685, 698, 710, 720, 733, 734, 753], "_arraywithstatisticalexperiment": [9, 51], "bincount": [9, 32, 321], "minlength": [9, 32, 321, 432], "alreadi": [9, 14, 26, 32, 37, 190, 200, 227, 237, 247, 312, 321, 381, 382, 400, 432, 441, 540, 545, 580, 588, 694, 700, 710, 711, 712, 716, 718, 720, 721, 726, 730, 731, 736, 746, 747, 753, 755, 760], "bin": [9, 32, 321, 432, 437, 706, 711, 712, 714, 718], "corrcoef": [9, 32, 321], "rowvar": [9, 32, 321, 433, 434], "relationship": [9, 32, 433, 681], "cov": [9, 32, 321], "bia": [9, 13, 32, 36, 40, 321, 434, 481, 542, 544, 550, 557, 558, 559, 560, 561, 562, 563, 564, 565, 568, 569, 570, 643, 682, 727, 733, 738, 742], "ddof": [9, 32, 321, 434], "fweight": [9, 32, 321, 434], "aweight": [9, 32, 321, 434], "overridden": [9, 32, 321, 434, 686, 715], "unbias": [9, 22, 32, 45, 321, 434, 555, 672], "frequenc": [9, 10, 32, 33, 321, 434, 458, 542, 712], "typic": [9, 32, 274, 287, 306, 321, 434, 554, 661, 682, 714, 727, 752, 760], "assign": [9, 32, 49, 321, 434, 710, 712, 716, 720, 730, 740], "covari": [9, 32, 321, 434], "cummax": [9, 32, 321], "exclus": [9, 10, 22, 26, 32, 33, 45, 76, 310, 321, 369, 435, 436, 473, 474, 477, 537, 542, 551, 555, 645, 663, 664, 718, 720, 727, 743, 757, 759], "cumul": [9, 22, 32, 45, 321, 435, 436, 555, 663, 664, 745], "int64": [9, 18, 19, 21, 22, 29, 41, 42, 44, 45, 97, 109, 115, 118, 120, 122, 126, 127, 131, 138, 255, 262, 301, 303, 319, 321, 427, 435, 436, 537, 538, 552, 554, 555, 645, 650, 651, 652, 661, 663, 664, 669, 671, 720, 731, 733, 738], "uint64": [9, 22, 116, 121, 123, 124, 134, 136, 139, 255, 301, 321, 435, 436, 538, 555, 663, 664, 669, 671, 720, 733, 738], "uint16": [9, 22, 111, 116, 121, 122, 131, 255, 301, 321, 435, 436, 538, 555, 663, 664, 669, 671, 720, 731, 733, 738], "bit": [9, 22, 118, 119, 122, 185, 186, 188, 321, 435, 436, 538, 540, 555, 663, 664, 669, 671, 709, 710, 711, 718, 719, 720, 722, 727, 738, 740, 759], "uint32": [9, 22, 116, 121, 122, 123, 145, 255, 301, 321, 435, 436, 538, 555, 663, 664, 669, 671, 720, 733, 738], "resolv": [9, 22, 201, 321, 435, 436, 540, 547, 555, 608, 663, 664, 669, 671, 712, 717, 720, 725, 738], "cummin": [9, 32, 321], "histogram": [9, 32, 321], "extend_lower_interv": [9, 32, 321, 437], "extend_upper_interv": [9, 32, 321, 437], "densiti": [9, 32, 321, 437], "monoton": [9, 32, 321, 437], "rightmost": [9, 32, 321, 437], "extend": [9, 32, 312, 321, 400, 437, 716, 717, 723, 724, 726, 731, 734, 746, 750, 753, 759], "c1": [9, 32, 321, 437, 718], "ff": [9, 32, 321, 437], "c_": [9, 32, 321, 437], "igamma": [9, 32, 321], "incomplet": [9, 32, 321, 438, 712], "3614": [9, 32, 321, 438], "2085": [9, 32, 321, 438], "median": [9, 32, 312, 321, 400, 441], "nanmean": [9, 32, 321], "anyth": [9, 32, 321, 440, 441, 712, 724, 733, 734, 753, 754], "sub": [9, 14, 16, 26, 27, 31, 32, 33, 37, 39, 52, 226, 310, 312, 321, 358, 386, 395, 412, 440, 441, 545, 547, 548, 576, 614, 621, 622, 623, 680, 710, 712, 713, 718, 724, 731, 732, 733, 740, 741, 742, 749], "6666666666666665": [9, 32, 321, 440], "nanmedian": [9, 32, 321], "overwrite_input": [9, 32, 321, 441], "save": [9, 26, 32, 321, 441, 498, 520, 539, 542, 556, 684, 704, 706, 711, 719, 725, 733, 746, 752], "treat": [9, 26, 32, 52, 232, 292, 306, 312, 321, 408, 441, 540, 729, 733, 739, 743], "undefin": [9, 32, 312, 321, 400, 441, 724, 729], "fulli": [9, 32, 321, 441, 682, 700, 704, 715, 720, 726, 729, 736, 738, 739, 740, 741, 742, 743, 746, 751, 752, 753, 759, 760], "quantil": [9, 32, 321], "inclus": [9, 32, 76, 321, 442, 537, 551, 645, 705, 716, 730, 736], "higher": [9, 32, 310, 312, 321, 369, 372, 380, 381, 382, 442, 681, 720, 730, 737, 738, 743, 746, 750, 753, 754, 757, 759, 760], "midpoint": [9, 32, 321, 442], "surround": [9, 32, 321, 442, 736], "whichev": [9, 32, 321, 442], "_arraywithutilityexperiment": [9, 51], "_arraywithgener": [10, 51], "all_equ": [10, 33, 542], "equality_matrix": [10, 33, 443, 542], "array_equ": [10, 33, 542], "assert_supports_inplac": [10, 33, 542], "ivybackendexcept": [10, 33, 447, 471, 542, 695, 715, 721, 724], "clip_matrix_norm": [10, 33, 542], "downscal": [10, 33, 449, 450, 471, 542], "894": [10, 33, 449, 450, 542, 550, 643], "clip_vector_norm": [10, 33, 542], "default_v": [10, 453, 542], "catch_except": [10, 453, 542], "rev": [10, 453, 542], "with_cal": [10, 453, 542], "catch": [10, 453, 542, 728, 733], "might": [10, 133, 453, 538, 542, 708, 710, 711, 712, 719, 720, 722, 725, 728, 731, 733, 734, 736, 738, 740, 741, 748], "einops_rearrang": [10, 33, 542], "axes_length": [10, 33, 454, 455, 456, 542], "arrang": [10, 454, 542], "rearrang": [10, 33, 454, 456, 542], "einop": [10, 33, 454, 455, 456, 542, 703], "einops_reduc": [10, 33, 542], "einops_repeat": [10, 33, 542], "fourier_encod": [10, 33, 542], "max_freq": [10, 33, 458, 542], "num_band": [10, 33, 458, 542], "band": [10, 33, 458, 542], "linearli": [10, 33, 458, 542, 545, 592], "oppos": [10, 33, 458, 542, 720], "geometr": [10, 33, 458, 542, 545, 598], "seper": [10, 458, 542, 722, 732], "0000000e": [10, 33, 458, 542], "2246468e": [10, 33, 458, 542], "4492936e": [10, 458, 542], "6739404e": [10, 33, 458, 542], "batch_dim": [10, 33, 461, 462, 542, 688], "gather_nd": [10, 33, 542], "get_num_dim": [10, 33, 542], "as_arrai": [10, 33, 465, 499, 542, 688], "has_nan": [10, 33, 542], "include_inf": [10, 33, 467, 521, 542], "inplace_decr": [10, 33, 542], "val": [10, 26, 31, 33, 207, 469, 470, 471, 490, 491, 492, 540, 542, 720, 730, 740], "decrement": [10, 33, 469, 542], "inplace_incr": [10, 33, 542], "increment": [10, 33, 470, 542, 712, 753], "inplace_upd": [10, 33, 489, 542, 679, 730], "ensure_in_backend": [10, 33, 471, 542, 730], "keep_input_dtyp": [10, 33, 471, 542, 730], "is_arrai": [10, 33, 542, 730, 731], "rather": [10, 26, 33, 76, 167, 473, 474, 477, 537, 539, 542, 703, 708, 712, 714, 718, 720, 723, 731, 732, 733, 734, 743, 746, 749, 752, 753], "is_ivy_arrai": [10, 33, 542, 730, 740], "is_ivy_contain": [10, 542], "is_native_arrai": [10, 33, 130, 474, 538, 542, 740], "isin": [10, 33, 542], "test_el": [10, 33, 478, 542], "assume_uniqu": [10, 33, 478, 542], "invert": [10, 33, 185, 478, 540, 542, 545, 585], "speed": [10, 33, 478, 542, 702, 733, 756], "scatter_flat": [10, 33, 542], "occupi": [10, 119, 122, 485, 486, 538, 542], "scatter_nd": [10, 33, 542, 736, 740], "empti": [10, 26, 33, 76, 255, 301, 312, 400, 449, 486, 537, 542, 545, 549, 555, 556, 597, 600, 638, 669, 671, 673, 674, 710, 711, 715, 717, 720, 721, 730], "stable_divid": [10, 33, 542, 727], "denomin": [10, 17, 33, 40, 492, 500, 514, 542, 550, 643, 685, 727, 735, 746, 750], "min_denomin": [10, 33, 492, 500, 514, 542, 735], "global": [10, 26, 33, 52, 112, 113, 114, 115, 116, 165, 166, 167, 491, 492, 495, 500, 501, 513, 514, 517, 538, 539, 542, 685, 691, 711, 715, 716, 719, 720, 721, 724, 727, 731, 738, 753], "_min_denomin": [10, 500, 542], "stable_pow": [10, 33, 542], "min_bas": [10, 33, 491, 501, 513, 542, 685, 735], "stabl": [10, 21, 33, 44, 101, 269, 303, 319, 427, 491, 492, 500, 501, 513, 514, 537, 542, 554, 659, 662, 711, 716, 720, 731, 735, 738, 746], "00004": [10, 33, 501, 542], "00008": [10, 33, 501, 542], "00004000e": [10, 501], "56002560e": [10, 501], "60001200e": [10, 501], "09602048e": [10, 501], "supports_inplace_upd": [10, 33, 542], "to_fil": 10, "fid": 10, "sep": 10, "format_": 10, "binari": [10, 13, 15, 36, 38, 184, 187, 189, 224, 244, 311, 375, 377, 540, 544, 546, 567, 602], "filenam": [10, 684, 690, 741], "txt": [10, 711, 714, 717], "recov": [10, 724, 731], "appropri": [10, 19, 24, 42, 47, 177, 194, 201, 227, 274, 287, 306, 540, 552, 650, 710, 711, 712, 724, 728, 733], "to_list": [10, 33, 542], "to_numpi": [10, 33, 542, 700, 732, 741], "address": [10, 507, 542, 704, 710, 712, 714, 715, 738, 749, 751, 753, 759], "to_scalar": [10, 33, 542], "value_is_nan": [10, 33, 542], "_arraywithgradi": [11, 51], "adam_step": [11, 34, 543], "mw": [11, 34, 523, 524, 543, 742], "vw": [11, 34, 523, 524, 543, 742], "beta1": [11, 34, 445, 523, 524, 529, 542, 543, 686, 742], "beta2": [11, 34, 445, 523, 524, 529, 542, 543, 686, 742], "999": [11, 31, 34, 245, 523, 524, 529, 531, 540, 543, 686, 742], "epsilon": [11, 14, 15, 34, 37, 38, 445, 523, 524, 529, 542, 543, 545, 546, 586, 589, 602, 603, 604, 683, 685, 686, 718, 727, 730, 742], "07": [11, 15, 31, 34, 38, 41, 182, 215, 219, 238, 309, 340, 513, 523, 524, 526, 527, 528, 529, 540, 542, 543, 546, 603, 604, 646, 683, 686, 742], "cost": [11, 34, 523, 524, 527, 529, 530, 531, 543, 548, 621, 622, 623, 736, 751], "dc": [11, 34, 523, 524, 527, 529, 530, 531, 543], "dw": [11, 34, 523, 524, 527, 529, 530, 531, 543], "forget": [11, 34, 523, 524, 529, 543, 686, 700, 720], "adam": [11, 34, 445, 523, 524, 529, 542, 543, 686, 700, 741, 742, 743, 753], "prevent": [11, 34, 523, 524, 529, 543, 544, 555, 567, 671, 681, 686, 710, 712, 719, 720, 724, 730, 731, 734], "dcdw": [11, 34, 523, 524, 527, 529, 530, 543], "adam_step_delta": [11, 34, 523, 543], "2020105": [11, 523, 543], "22187898": [11, 523, 543], "24144873": [11, 523, 543], "10000002": [11, 45, 249, 301, 523, 667], "20000005": [11, 249, 301, 523], "00300002": [11, 523], "00800002": [11, 523], "adam_upd": [11, 34, 543, 742], "lr": [11, 34, 445, 524, 527, 529, 530, 531, 542, 543, 686, 741, 742], "mw_tm1": [11, 34, 524, 529, 543], "vw_tm1": [11, 34, 524, 529, 543], "stop_gradi": [11, 34, 167, 445, 524, 527, 529, 530, 531, 539, 542, 543, 548, 621, 622, 623, 686, 742], "learn": [11, 34, 310, 370, 454, 524, 527, 529, 530, 531, 542, 543, 548, 621, 622, 623, 686, 700, 702, 703, 705, 709, 710, 711, 713, 714, 725, 727, 729, 737, 745, 748, 751, 755, 756, 757, 758, 759, 760], "previou": [11, 34, 141, 142, 143, 144, 145, 300, 308, 510, 512, 513, 514, 515, 517, 518, 520, 524, 529, 538, 542, 543, 681, 697, 712, 714, 716, 719, 721, 726, 731, 733, 736, 743, 746, 756], "ws_new": [11, 34, 524, 529, 530, 531, 543], "updated_weight": [11, 34, 524, 543], "92558753": [11, 524], "92558873": [11, 524, 543], "92558718": [11, 524, 543], "00000063e": [11, 34, 524, 543], "00000016e": [11, 34, 524, 543], "00000086e": [11, 34, 524, 543], "gradient_descent_upd": [11, 34, 543, 548, 621, 622, 623], "descent": [11, 34, 527, 543, 686, 742, 753], "new_weight": [11, 34, 527, 529, 543, 741], "lamb_upd": [11, 34, 543], "max_trust_ratio": [11, 34, 529, 543, 686], "decay_lambda": [11, 34, 529, 530, 543, 686], "trust": [11, 34, 529, 543, 686], "ratio": [11, 34, 529, 543, 686], "decai": [11, 34, 529, 530, 543, 686], "lamb": [11, 34, 529, 543, 686, 742], "784": [11, 529, 543], "78": [11, 189, 238, 529, 540, 543, 545, 551, 555, 588, 646, 665], "lars_upd": [11, 34, 543], "lar": [11, 34, 530, 543, 686, 742], "optimizer_upd": [11, 34, 543], "effective_grad": [11, 34, 531, 543], "3e": [11, 34, 531, 543], "preserve_typ": [11, 34, 532, 543], "_arraywithimag": [12, 51], "_arraywithlay": [13, 51], "conv1d": [13, 36, 544, 682], "filter_format": [13, 36, 544, 557, 558, 560, 561, 562, 564], "channel_last": [13, 36, 544, 557, 558, 560, 561, 562, 564, 565], "x_dilat": [13, 36, 544, 557, 558, 560, 561, 562, 564], "fw": [13, 36, 321, 434, 544, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 711, 733], "d_out": [13, 36, 544, 557, 558, 559, 560, 561, 562, 563, 564, 565], "channel_first": [13, 36, 544, 557, 558, 560, 561, 562, 564, 565], "wio": [13, 544, 557, 558, 559, 564], "conv1d_transpos": [13, 36, 544], "output_shap": [13, 36, 544, 557, 559, 561, 563, 565, 682], "conv2d": [13, 36, 544, 561, 682, 700], "fh": [13, 36, 544, 549, 557, 560, 561, 562, 563, 564, 565, 566, 636], "hwio": [13, 544, 557, 558, 560, 564], "conv2d_transpos": [13, 36, 544], "random_norm": [13, 14, 18, 36, 37, 41, 454, 542, 544, 545, 551, 559, 561, 562, 563, 566, 569, 593, 700], "std": [13, 18, 22, 36, 41, 45, 316, 421, 544, 551, 555, 559, 561, 562, 563, 566, 645, 646, 700, 722], "conv3d": [13, 36, 544, 563, 682], "fd": [13, 36, 544, 557, 562, 563, 564, 565], "conv3d_transpos": [13, 36, 544], "depthwise_conv2d": [13, 36, 544], "dropout": [13, 36, 309, 332, 333, 334, 544, 570, 571, 682, 741], "noise_shap": [13, 36, 544, 567], "droput": [13, 567], "turn": [13, 36, 49, 332, 333, 334, 544, 567, 682, 704, 711, 718, 721, 722, 731, 733], "reproduc": [13, 36, 544, 567, 708, 714], "42857146": [13, 544, 567], "85714293": [13, 544, 567], "28571415": [13, 36, 544, 567], "71428585": [13, 36, 544, 567], "14285755": [13, 36, 544, 567], "5714283": [13, 544, 567], "4285717": [13, 36, 544, 567], "8571434": [13, 36, 544, 567], "2857151": [13, 544, 567], "dropout1d": [13, 36, 309], "droput1d": [13, 332, 333], "dropout2d": [13, 36, 309], "dropout3d": [13, 36, 309], "droput3d": [13, 334], "outer_batch_shap": [13, 36, 544, 568], "inner_batch_shap": [13, 36, 544, 568], "in_featur": [13, 36, 544, 568, 733], "out_featur": [13, 36, 544, 568, 733], "84": [13, 22, 31, 41, 122, 152, 217, 538, 539, 545, 550, 555, 568, 588, 643, 646, 647, 665], "133": [13, 450, 542, 568], "134": [13, 545, 568, 585], "lstm_updat": [13, 36, 544, 738], "init_h": [13, 36, 544, 569, 738], "init_c": [13, 36, 544, 569, 738], "recurrent_kernel": [13, 36, 544, 569, 738], "recurrent_bia": [13, 36, 544, 569, 738], "cell": [13, 36, 544, 569, 682, 719, 738], "batch_shap": [13, 18, 28, 36, 41, 87, 96, 537, 544, 545, 551, 569, 570, 571, 601, 644, 682, 736, 738, 740], "hidden": [13, 36, 544, 569, 682, 717, 724, 738, 742], "recurr": [13, 36, 544, 569, 738, 753, 757], "timestep": [13, 36, 544, 569, 570, 682, 738], "h_i": [13, 36, 569], "c_i": [13, 36, 569], "rc": [13, 36, 569], "multi_head_attent": [13, 36, 544, 730], "num_head": [13, 36, 544, 570, 682], "attention_mask": [13, 36, 544, 570], "in_proj_weight": [13, 36, 544, 570], "q_proj_weight": [13, 36, 544, 570], "k_proj_weight": [13, 36, 544, 570], "v_proj_weight": [13, 36, 544, 570], "out_proj_weight": [13, 36, 544, 570], "in_proj_bia": [13, 36, 544, 570], "out_proj_bia": [13, 36, 544, 570], "is_caus": [13, 36, 544, 570, 571], "return_attention_weight": [13, 36, 544, 570], "average_attention_weight": [13, 36, 544, 570], "key_chain": [13, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 106, 107, 108, 109, 117, 119, 122, 125, 126, 127, 129, 131, 134, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 256, 257, 259, 260, 263, 264, 269, 270, 273, 274, 275, 276, 278, 280, 286, 287, 293, 295, 296, 297, 298, 299, 323, 324, 325, 327, 328, 329, 331, 332, 333, 334, 335, 336, 344, 345, 346, 347, 351, 353, 354, 355, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 380, 381, 382, 385, 387, 396, 398, 400, 401, 402, 404, 406, 407, 408, 409, 411, 413, 414, 415, 416, 417, 418, 419, 421, 426, 427, 434, 435, 436, 437, 442, 443, 446, 447, 449, 450, 454, 455, 456, 458, 461, 462, 465, 467, 469, 470, 471, 473, 474, 477, 485, 486, 500, 501, 503, 505, 507, 508, 521, 527, 532, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 644, 645, 646, 647, 649, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674], "to_appli": [13, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 106, 107, 108, 109, 117, 119, 122, 125, 126, 127, 129, 131, 134, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 256, 257, 259, 260, 263, 264, 269, 270, 273, 274, 275, 276, 278, 280, 286, 287, 293, 295, 296, 297, 298, 299, 323, 324, 325, 327, 328, 329, 331, 332, 333, 334, 335, 336, 344, 345, 346, 347, 351, 353, 354, 355, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 380, 381, 382, 385, 387, 396, 398, 400, 401, 402, 404, 406, 407, 408, 409, 411, 413, 414, 415, 416, 417, 418, 419, 421, 426, 427, 434, 435, 436, 437, 442, 443, 446, 447, 449, 450, 454, 455, 456, 458, 461, 462, 465, 467, 469, 470, 471, 473, 474, 477, 485, 486, 500, 501, 503, 505, 507, 508, 521, 527, 532, 549, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 637, 644, 645, 646, 647, 649, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674], "prune_unappli": [13, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 106, 107, 108, 109, 117, 119, 122, 125, 126, 127, 129, 131, 134, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 256, 257, 259, 260, 263, 264, 269, 270, 273, 274, 275, 276, 278, 280, 286, 287, 293, 295, 296, 297, 298, 299, 323, 324, 325, 327, 328, 329, 331, 332, 333, 334, 335, 336, 344, 345, 346, 347, 351, 354, 355, 357, 358, 359, 360, 362, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 380, 381, 382, 385, 387, 396, 398, 400, 401, 402, 404, 406, 407, 408, 409, 411, 413, 414, 415, 416, 417, 418, 419, 421, 426, 427, 434, 435, 436, 437, 442, 443, 446, 447, 449, 450, 454, 455, 456, 458, 461, 462, 465, 467, 469, 470, 471, 473, 474, 477, 485, 486, 500, 501, 503, 505, 507, 508, 521, 527, 532, 549, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 637, 644, 645, 646, 647, 649, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674], "map_sequ": [13, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 106, 107, 108, 109, 117, 119, 122, 125, 126, 127, 129, 131, 134, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 256, 257, 259, 260, 263, 264, 269, 270, 273, 274, 275, 276, 278, 280, 286, 287, 293, 295, 296, 297, 298, 299, 323, 324, 325, 327, 328, 329, 331, 332, 333, 334, 335, 336, 344, 345, 346, 347, 351, 354, 355, 357, 358, 359, 360, 362, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 380, 381, 382, 385, 387, 396, 398, 400, 401, 402, 404, 406, 407, 408, 409, 411, 413, 414, 415, 416, 417, 418, 419, 421, 426, 427, 434, 435, 436, 437, 442, 443, 446, 447, 449, 450, 454, 455, 456, 458, 461, 462, 465, 467, 469, 470, 471, 473, 474, 477, 485, 486, 500, 501, 503, 505, 507, 508, 521, 527, 532, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 644, 645, 646, 647, 649, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674], "scaled_dot_product_attent": [13, 36, 544], "dropout_p": [13, 36, 544, 571], "queri": [13, 26, 36, 152, 166, 464, 490, 539, 542, 544, 570, 571, 682, 718, 720, 740, 753], "num_queri": [13, 36, 544, 570, 571], "feat_dim": [13, 36, 544, 571], "num_kei": [13, 36, 544, 570, 571], "causal": [13, 36, 544, 570, 571], "attent": [13, 36, 544, 570, 571, 682, 703, 712, 715], "dot": [13, 32, 36, 49, 310, 367, 544, 545, 570, 571, 599, 700, 711, 719], "score": [13, 36, 311, 377, 544, 571, 700], "40000001": [13, 25, 51, 52, 61, 64, 249, 301, 534, 544, 553, 571, 656], "29999995": [13, 249, 301, 544, 553, 571, 656], "19994521": [13, 544, 571], "09994531": [13, 544, 571], "30000019": [13, 544, 571], "_arraywithlinearalgebra": [14, 51], "choleski": [14, 37, 545, 730], "l": [14, 31, 37, 221, 310, 357, 545, 572, 577, 578, 579, 583, 597, 712, 713], "625": [14, 32, 284, 545, 572], "cross": [14, 15, 37, 38, 545, 546, 602, 603, 604, 700, 719, 720], "vif": [14, 37, 573], "det": [14, 37, 545, 591, 719], "axis1": [14, 16, 37, 39, 545, 547, 576, 597, 617], "axis2": [14, 37, 545, 576, 597], "eigh": [14, 37, 310, 357, 545, 577], "uplo": [14, 37, 545, 578, 579], "eigvalsh": [14, 37, 545], "inner": [14, 28, 37, 55, 96, 310, 357, 537, 545, 548, 577, 578, 583, 621, 622, 623, 710, 730], "array_lik": [14, 37, 309, 311, 312, 352, 373, 376, 377, 405, 545, 580, 588], "ident": [14, 26, 87, 155, 464, 490, 537, 539, 542, 545, 549, 580, 585, 637, 682, 702, 704, 718, 727, 728, 731, 732, 734, 736, 740, 741, 746, 748], "53": [14, 18, 31, 36, 113, 169, 199, 351, 526, 528, 538, 539, 543, 545, 550, 580, 643, 647], "83": [14, 36, 41, 241, 309, 321, 330, 340, 351, 435, 540, 544, 545, 568, 580, 646], "3d": [14, 32, 309, 332, 333, 382, 545, 580, 682, 736, 745], "29": [14, 31, 33, 34, 36, 41, 182, 321, 351, 435, 454, 455, 525, 529, 540, 542, 543, 545, 580, 645, 646, 647], "109": [14, 545, 580], "105": [14, 36, 544, 545, 546, 567, 568, 580, 588, 602], "149": [14, 545, 580], "171": [14, 545, 580], "143": [14, 31, 52, 244, 540, 545, 580, 722], "173": [14, 545, 580], "203": [14, 31, 183, 545, 550, 580, 643], "233": [14, 545, 580], "inv": [14, 37, 545], "matmul": [14, 37, 522, 542, 545, 593, 716, 733, 734, 738], "transpose_a": [14, 37, 545, 583], "transpose_b": [14, 37, 545, 583], "adjoint_a": [14, 37, 545, 583], "adjoint_b": [14, 37, 545, 583], "matrix_norm": [14, 37, 545], "ord": [14, 37, 545, 584, 600], "fro": [14, 37, 311, 373, 545, 584], "nuc": [14, 37, 545, 584], "matrix_pow": [14, 37, 545], "matrix_rank": [14, 37, 545], "hermitian": [14, 37, 310, 357, 358, 545, 577, 578, 579, 586, 593], "largest_singular_valu": [14, 37, 545, 586, 589], "defici": [14, 545, 586], "matrix_transpos": [14, 37, 545, 740], "outer": [14, 37, 49, 545, 548, 621, 622, 623, 710], "pinv": [14, 37, 545], "pseudo": [14, 37, 545, 589, 729], "99999988": [14, 37, 545, 589], "qr": [14, 37, 545, 732], "orthonorm": [14, 37, 545, 590, 593], "lead": [14, 26, 37, 52, 201, 310, 364, 489, 540, 542, 545, 590, 593, 703, 704, 719, 720, 722, 734, 746], "complet": [14, 26, 37, 545, 590, 703, 710, 711, 712, 714, 715, 718, 719, 722, 724, 727, 731, 732, 733, 736, 740, 741, 751], "field": [14, 20, 37, 43, 310, 312, 357, 411, 545, 553, 577, 578, 590, 591, 593, 655, 656, 657, 700, 719, 745, 751, 759], "those": [14, 16, 26, 32, 37, 39, 76, 133, 194, 227, 408, 522, 537, 538, 540, 542, 545, 547, 549, 552, 590, 593, 605, 626, 653, 702, 710, 711, 712, 715, 718, 719, 720, 728, 730, 731, 732, 733, 736, 750], "slogdet": [14, 37, 545], "logabsdet": [14, 37, 545, 591], "natur": [14, 37, 197, 215, 216, 217, 218, 237, 290, 306, 540, 545, 591, 703, 715, 722, 724, 732, 745], "098611": [14, 545, 591], "solv": [14, 37, 310, 364, 545, 700, 711, 714, 731, 739, 745, 755], "full_matric": [14, 37, 545, 593], "svf": [14, 593], "close": [14, 199, 217, 237, 258, 303, 540, 545, 547, 593, 608, 710, 711, 712, 720, 723, 731, 736, 753], "reconstructed_x": [14, 545, 593], "svdval": [14, 37, 545], "tensordot": [14, 37, 545, 720], "tensorsolv": [14, 37, 545], "vander": [14, 37, 545], "vandermond": [14, 37, 545, 598], "vecdot": [14, 37, 545], "vector_norm": [14, 37, 545], "singleton": [14, 19, 22, 23, 37, 42, 45, 46, 545, 547, 552, 555, 556, 600, 608, 615, 651, 666, 667, 668, 669, 670, 671, 672, 673, 674, 738], "mathemat": [14, 37, 177, 182, 194, 199, 201, 217, 227, 535, 540, 545, 584, 600, 720, 731, 736, 753, 759], "manhattan": [14, 37, 545, 600], "euclidean": [14, 37, 49, 545, 600], "7416575": [14, 37, 545, 600], "vector_to_skew_symmetric_matrix": [14, 37, 545], "_arraywithloss": [15, 51], "binary_cross_entropi": [15, 38, 546, 719], "from_logit": [15, 38, 546, 602, 683], "pos_weight": [15, 38, 546, 602], "amount": [15, 38, 169, 539, 546, 602, 603, 604, 711, 719, 721, 732], "crossentropi": [15, 38, 546, 602], "entropi": [15, 38, 546, 602, 603, 604, 700], "357": [15, 38, 546, 602, 604], "223": [15, 38, 546, 602, 604], "cross_entropi": [15, 38, 546, 604, 700, 718, 727, 730], "3862944": [15, 546, 603], "sparse_cross_entropi": [15, 38, 546], "_arraywithmanipul": [16, 51], "x_min": [16, 39, 547, 605, 743], "x_max": [16, 39, 547, 605, 743], "constant_pad": [16, 39, 547], "before_1": [16, 39, 312, 400, 547, 607, 620], "after_1": [16, 39, 312, 400, 547, 607, 620], "before_n": [16, 39, 312, 400, 547, 607, 620], "after_n": [16, 39, 312, 400, 547, 607, 620], "permute_dim": [16, 39, 547], "repetit": [16, 39, 547, 611, 618, 736], "fit": [16, 39, 547, 611, 710, 731, 738, 749, 750, 753], "flat": [16, 26, 39, 317, 425, 485, 542, 547, 611, 680], "allowzero": [16, 39, 547, 612], "remain": [16, 19, 32, 39, 42, 177, 194, 195, 201, 209, 210, 227, 230, 236, 238, 309, 332, 333, 334, 352, 540, 547, 549, 552, 612, 630, 653, 711, 712, 719, 722, 724, 727, 734, 736, 746], "roll": [16, 39, 547, 726], "shift": [16, 28, 39, 52, 91, 101, 186, 188, 269, 303, 537, 540, 547, 613, 711, 712, 721, 722, 726], "restor": [16, 39, 547, 613, 725], "num_or_size_split": [16, 26, 39, 547, 614, 738], "with_remaind": [16, 26, 39, 547, 614], "mani": [16, 26, 39, 101, 269, 303, 537, 547, 614, 680, 700, 702, 703, 704, 710, 711, 712, 715, 716, 718, 719, 720, 721, 722, 723, 726, 727, 728, 730, 731, 732, 733, 736, 738, 740, 741, 746, 749, 753, 756, 759, 760], "squeez": [16, 39, 547, 753], "squeezabl": [16, 547, 615], "document": [16, 201, 522, 540, 542, 616, 705, 707, 709, 712, 717, 719, 720, 722, 730, 731, 732, 733, 741, 743], "swapax": [16, 39, 547], "axis0": [16, 39, 547, 617], "swap_ax": [16, 617], "tile": [16, 33, 39, 456, 547], "unpack": [16, 39, 547, 619, 732, 733], "zero_pad": [16, 39, 547], "_arraywithnorm": [17, 51], "layer_norm": [17, 40, 550], "normalized_idx": [17, 40, 550, 643], "new_std": [17, 40, 550, 643, 685], "learnabl": [17, 40, 548, 550, 623, 643, 682, 685, 743], "deviat": [17, 18, 22, 40, 41, 45, 550, 551, 555, 643, 646, 670, 681, 685, 704, 714], "0976": [17, 550, 643], "3452": [17, 550, 643], "2740": [17, 550, 643], "1047": [17, 550, 643], "5886": [17, 550, 643], "2732": [17, 550, 643], "7696": [17, 550, 643], "7024": [17, 550, 643], "2518": [17, 550, 643], "826": [17, 550, 643], "178": [17, 550, 643], "981": [17, 550, 643], "831": [17, 550, 643], "421": [17, 550, 643], "_arraywithrandom": [18, 51], "multinomi": [18, 41, 316, 422, 551], "population_s": [18, 41, 551, 644], "num_sampl": [18, 41, 551, 644], "unnorm": [18, 41, 551, 644, 733], "popul": [18, 22, 26, 41, 45, 551, 555, 644, 670, 672, 720, 721, 730, 733, 738, 759], "draw": [18, 41, 316, 420, 422, 424, 551, 644, 646, 647, 681, 710, 714, 732, 733], "ve": [18, 41, 551, 644, 710, 711, 712, 733, 736, 737, 740, 748], "highest": [18, 41, 551, 645, 720], "half": [18, 41, 76, 241, 537, 540, 551, 645, 647, 708, 736], "235": [18, 646], "float16": [18, 29, 41, 89, 111, 113, 114, 119, 121, 255, 282, 301, 306, 537, 538, 545, 600, 646, 647, 708, 720, 731, 733], "807": [18, 646], "random_uniform": [18, 41, 551, 721, 724, 733, 738, 742], "86": [18, 32, 41, 309, 321, 340, 435, 523, 543, 646, 647], "_arraywithsearch": [19, 51], "select_last_index": [19, 42, 552, 650, 651], "occurr": [19, 312, 321, 411, 432, 552, 553, 650, 651, 655], "argmin": [19, 42, 552], "output_dtyp": [19, 42, 552, 651], "across": [19, 26, 33, 42, 51, 165, 166, 194, 201, 227, 245, 315, 416, 446, 467, 502, 539, 540, 542, 544, 549, 552, 567, 570, 630, 650, 651, 682, 710, 714, 720, 722, 724, 726, 727, 729, 733, 736, 751, 753, 758], "argwher": [19, 42, 552], "nonzero": [19, 42, 175, 176, 177, 180, 183, 192, 194, 197, 199, 201, 227, 240, 245, 540, 552], "as_tupl": [19, 42, 552, 653], "fewer": [19, 42, 552, 653], "yield": [19, 265, 266, 303, 312, 400, 552, 654, 700, 719], "_arraywithset": [20, 51], "unique_al": [20, 43, 553], "by_valu": [20, 43, 553, 655], "inverse_indic": [20, 43, 312, 411, 553, 655, 657], "unique_count": [20, 43, 553], "unique_invers": [20, 43, 553], "unique_valu": [20, 43, 553], "admonit": [20, 658], "henc": [20, 177, 276, 306, 540, 547, 553, 608, 655, 656, 657, 658, 691, 711, 718, 719, 720, 730, 733], "dask": [20, 553, 655, 656, 657, 658, 703], "difficult": [20, 553, 655, 656, 657, 658, 712, 714, 720, 733, 746], "know": [20, 553, 655, 656, 657, 658, 704, 707, 710, 712, 721, 728, 732, 733, 736, 754], "omit": [20, 237, 540, 553, 655, 656, 657, 658, 726, 730, 731], "x_i": [20, 22, 31, 174, 175, 176, 179, 180, 181, 183, 185, 190, 191, 192, 197, 199, 200, 207, 208, 209, 210, 211, 215, 216, 217, 218, 222, 229, 234, 237, 238, 239, 240, 241, 242, 244, 245, 247, 276, 295, 306, 540, 553, 555, 655, 656, 657, 658, 666, 667, 668, 670, 671, 672, 681, 723], "x_j": [20, 553, 655, 656, 657, 658], "impli": [20, 553, 655, 656, 657, 658, 733], "behavior": [20, 194, 201, 227, 232, 236, 489, 512, 540, 542, 553, 655, 656, 657, 658, 710, 717, 718, 719, 720, 730, 731, 732, 733, 736, 738, 746, 750], "could": [20, 553, 655, 656, 657, 658, 703, 704, 710, 711, 712, 714, 719, 720, 722, 728, 730, 731, 732, 733, 738, 740, 741, 742, 753, 758, 759], "typeerror": [20, 43, 553, 658, 740], "_arraywithsort": [21, 51], "argsort": [21, 44, 554, 661, 731], "descend": [21, 44, 545, 554, 593, 594, 659, 662], "stabil": [21, 44, 500, 501, 542, 554, 659, 662, 720, 729, 734, 736], "maintain": [21, 44, 554, 659, 662, 702, 712, 714, 725, 730, 732, 733, 752], "msort": [21, 44, 554], "searchsort": [21, 44, 554], "side": [21, 44, 286, 306, 554, 661, 682, 694, 711, 712, 717], "sorter": [21, 44, 554, 661], "ret_dtyp": [21, 44, 554, 661], "_arraywithstatist": [22, 51], "cumprod": [22, 45, 555, 731, 743], "120": [22, 45, 52, 545, 588, 663, 700], "cumsum": [22, 45, 555, 720], "einsum": [22, 45, 555], "equat": [22, 32, 45, 260, 303, 545, 555, 592, 665, 694, 719, 753], "operand": [22, 32, 36, 174, 175, 176, 177, 179, 180, 181, 182, 183, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 208, 209, 210, 215, 216, 217, 218, 219, 227, 230, 232, 236, 237, 238, 239, 240, 241, 244, 245, 247, 295, 299, 306, 307, 309, 351, 540, 545, 555, 591, 597, 665, 666, 668, 669, 671, 694, 715, 718, 723, 731], "describ": [22, 32, 177, 194, 195, 227, 230, 232, 316, 319, 424, 427, 540, 544, 555, 570, 665, 669, 671, 707, 710, 711, 712, 717, 719, 730, 731, 733, 738, 743, 753], "contract": [22, 545, 555, 595, 665], "seq": [22, 555, 665], "consist": [22, 26, 194, 201, 227, 310, 357, 540, 545, 555, 577, 578, 665, 683, 684, 702, 714, 715, 719, 720, 725, 730, 738, 754], "ii": [22, 45, 555, 665, 712], "jk": [22, 555, 665], "ik": [22, 555, 665], "66": [22, 32, 33, 34, 189, 309, 340, 454, 455, 527, 540, 542, 543, 545, 555, 588, 665], "104": [22, 545, 555, 588, 665], "126": [22, 59, 233, 534, 540, 545, 555, 585, 665], "510": [22, 555, 665], "special": [22, 37, 49, 51, 52, 174, 175, 176, 177, 179, 180, 181, 182, 183, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 208, 209, 210, 215, 216, 217, 218, 219, 222, 227, 230, 232, 236, 237, 238, 239, 240, 241, 244, 245, 247, 295, 306, 540, 545, 555, 591, 597, 666, 667, 668, 669, 670, 671, 672, 681, 710, 714, 715, 717, 719, 722, 723, 724, 725, 726, 730, 732, 733, 734, 736, 753, 754, 755], "arithmet": [22, 45, 188, 194, 227, 540, 555, 667, 731], "propag": [22, 188, 540, 555, 666, 667, 668, 670, 671, 672, 729], "04999995": [22, 667], "freedom": [22, 45, 555, 670, 672, 716], "adjust": [22, 45, 310, 370, 555, 670, 672, 691], "constitut": [22, 45, 555, 670, 672, 727, 738, 754], "commonli": [22, 45, 555, 670, 672, 724, 727, 729], "81649661": [22, 555, 670], "var": [22, 45, 47, 72, 73, 74, 75, 536, 548, 555, 621, 622, 688, 711, 722, 738], "6666665": [22, 672, 741], "667": [22, 33, 194, 450, 500, 540, 542, 672], "_arraywithutil": [23, 51], "AND": [23, 46, 184, 195, 221, 540, 556, 673], "invalid": [23, 46, 545, 547, 556, 599, 608, 673, 674, 711, 720], "OR": [23, 46, 187, 223, 230, 540, 556, 674, 711, 712, 729], "_wrap_funct": [24, 47, 717, 727, 728], "function_nam": [24, 47, 710, 734], "new_funct": [24, 47, 717], "add_ivy_array_instance_method": 24, "cl": [24, 47], "shown": [24, 26, 47, 211, 234, 276, 306, 540, 710, 711, 712, 714, 717, 719, 720, 722, 724, 725, 726, 731, 732, 733, 734, 735, 738, 740, 746], "toi": [24, 47], "arrayexampl": 24, "hasattr": [24, 47], "_containerwithactiv": [25, 52], "dict_in": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "queue": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52, 495, 517, 542, 735, 741], "queue_load_s": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "container_combine_method": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "list_join": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "queue_timeout": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52, 495, 517, 542, 735], "print_limit": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "key_length_limit": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "print_ind": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "print_line_spac": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "ivyh": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "default_key_color": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "green": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52, 699, 710, 711, 712], "keyword_color_dict": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "rebuild_child_contain": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "types_to_iteratively_nest": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "alphabetical_kei": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "dynamic_backend": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 684, 716, 735], "build_cal": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "containerbas": [25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 718], "static": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 49, 50, 55, 56, 84, 329, 342, 347, 369, 372, 406, 415, 503, 537, 588, 679, 684, 731, 735, 746, 752, 753, 754], "_static_gelu": 25, "exact": [25, 26, 59, 309, 311, 344, 349, 375, 553, 655, 657, 678, 711, 712, 714, 722, 738], "formul": [25, 59, 678], "chain": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 49, 59, 60, 61, 62, 63, 64, 65, 66, 67, 89, 91, 96, 98, 103, 107, 109, 122, 126, 127, 134, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 253, 254, 256, 257, 259, 274, 276, 278, 280, 286, 287, 293, 295, 297, 298, 299, 332, 333, 334, 373, 374, 376, 377, 385, 406, 409, 414, 416, 417, 418, 419, 421, 434, 435, 436, 437, 443, 446, 447, 449, 450, 454, 455, 456, 458, 461, 462, 465, 467, 469, 470, 471, 473, 474, 477, 485, 486, 500, 501, 503, 505, 507, 508, 521, 527, 532, 548, 549, 558, 559, 560, 561, 567, 568, 571, 572, 573, 578, 579, 580, 581, 583, 584, 586, 588, 590, 591, 597, 602, 603, 604, 605, 609, 612, 613, 614, 615, 616, 619, 620, 621, 622, 626, 637, 644, 645, 646, 647, 649, 652, 655, 656, 657, 658, 659, 663, 664, 667, 669, 670, 672, 673, 674, 680, 687, 715, 718, 729, 731, 742, 743, 746, 753], "prune": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 63, 64, 65, 66, 67, 89, 91, 96, 98, 103, 107, 109, 122, 126, 127, 134, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 253, 254, 256, 257, 259, 274, 275, 276, 278, 280, 286, 287, 293, 295, 297, 298, 299, 332, 333, 334, 373, 374, 376, 377, 380, 381, 382, 385, 406, 408, 409, 414, 416, 417, 418, 419, 421, 434, 435, 436, 437, 443, 446, 447, 449, 450, 454, 455, 456, 458, 461, 462, 465, 467, 469, 470, 471, 473, 474, 477, 485, 486, 500, 501, 503, 505, 507, 508, 521, 527, 532, 549, 558, 559, 560, 561, 567, 568, 571, 572, 573, 578, 579, 580, 581, 583, 584, 586, 588, 590, 591, 597, 602, 603, 604, 605, 609, 612, 613, 614, 615, 616, 619, 620, 637, 638, 639, 640, 644, 645, 646, 647, 649, 652, 655, 656, 657, 658, 659, 663, 664, 667, 669, 670, 672, 673, 674, 719], "static_gelu": 25, "185": 25, "046": 25, "_static_hardswish": 25, "_static_leaky_relu": 25, "static_leaky_relu": 25, "38999999": [25, 32, 61, 249, 301], "_static_log_softmax": 25, "static_log_softmax": 25, "371": [25, 62], "_static_mish": 25, "static_mish": 25, "30883577": [25, 63, 534], "28903052": [25, 63, 534], "10714479": [25, 63, 534], "_static_relu": 25, "static_relu": 25, "_static_sigmoid": 25, "static_sigmoid": 25, "2689414": [25, 65, 66, 534], "7310586": [25, 65, 66, 534], "88079703": [25, 65, 534], "62245935": [25, 65], "4750208": [25, 65], "_static_softmax": 25, "static_softmax": 25, "72844321": [25, 66], "19852395": [25, 66], "07303288": [25, 66], "_static_softplu": 25, "revert": [25, 67, 534], "static_softplu": 25, "53499615": 25, "42036411": 25, "948": [25, 67], "166": [25, 59, 534], "159": [25, 59, 534, 544, 568], "__getitem__": [26, 718], "slice": [26, 33, 101, 269, 303, 312, 384, 405, 408, 461, 462, 464, 490, 537, 542, 549, 633, 753], "dictionari": [26, 43, 52, 166, 525, 539, 543, 658, 715, 719, 720, 727, 731, 732, 741, 746], "multiprocess": [26, 52, 542, 741, 746], "asynchron": [26, 52, 753], "wait": [26, 52, 495, 542, 700, 710, 712, 719, 731], "arriv": [26, 52, 495, 542, 736], "cont_list_join": [26, 52], "timeout": [26, 52, 495, 517, 542, 735], "limit": [26, 52, 119, 122, 449, 450, 538, 542, 547, 605, 681, 688, 700, 711, 712, 717, 719, 722, 724, 731, 733, 736, 741, 746, 752, 753, 754], "whitespac": [26, 52], "indent": [26, 52, 741], "newlin": [26, 52, 723], "color": [26, 52, 699], "termin": [26, 52, 711, 712, 718, 725, 738, 741], "termcolor": [26, 52], "rebuild": [26, 52, 706], "constructor": [26, 52, 445, 542, 679, 687, 720, 721, 740], "kept": [26, 52, 548, 621, 622, 712, 730, 734], "encount": [26, 52, 682, 708, 710, 720, 724, 733], "further": [26, 52, 703, 704, 712, 714, 715, 719, 722, 724, 726, 727, 730, 731, 733, 737, 738, 741, 742, 758, 759], "instruct": [26, 52, 700, 710, 711, 714, 724, 725, 732, 733, 747, 751, 754, 757, 759], "structur": [26, 29, 52, 119, 122, 451, 542, 549, 628, 637, 680, 700, 710, 712, 715, 718, 727, 732, 733, 734, 741, 742, 752, 753], "alphabet": [26, 52], "__setitem__": [26, 715, 718, 740], "_cont_at_key_chains_input_as_dict": 26, "current_chain": 26, "ignore_key_error": 26, "_cont_at_key_chains_input_as_seq": 26, "_cont_call_static_method_with_flexible_arg": 26, "static_method": 26, "kw": 26, "self_idx": 26, "_cont_concat_unifi": 26, "_cont_get_dev": 26, "_cont_get_shap": 26, "properti": [26, 49, 50, 51, 55, 684, 686, 714, 718, 727, 732, 733, 740, 741, 742, 759], "_cont_ivi": 26, "_cont_mean_unifi": 26, "_1": 26, "_cont_prune_key_chains_input_as_dict": 26, "return_cont": 26, "_cont_prune_key_chains_input_as_seq": 26, "_cont_slice_kei": 26, "key_slic": 26, "_cont_sum_unifi": 26, "_get_queue_item": 26, "cont_all_fals": 26, "assert_is_bool": 26, "assert": [26, 447, 542, 708, 713, 714, 727, 730, 731, 732, 733, 734, 740, 741], "cont_all_key_chain": 26, "include_empti": 26, "cont_all_tru": [26, 718, 741], "cont_as_bool": 26, "cont_assert_contains_sub_contain": 26, "sub_cont": 26, "screen": [26, 710, 711, 741], "cont_assert_contains_sub_structur": 26, "check_shap": [26, 688], "cont_assert_ident": 26, "check_typ": 26, "same_arrai": [26, 741], "arrays_equ": 26, "cont_assert_identical_structur": 26, "assert_and_assign": 26, "strucutr": 26, "congruent": 26, "cont_at_key_chain": 26, "ignore_non": 26, "cont_at_kei": 26, "substr": 26, "try": [26, 509, 542, 681, 691, 700, 701, 703, 704, 710, 711, 712, 714, 715, 718, 719, 720, 724, 725, 730, 732, 738, 740, 746], "cont_combin": 26, "prioriti": [26, 691, 712, 721, 730], "most": [26, 28, 49, 96, 310, 357, 494, 516, 537, 542, 545, 577, 578, 697, 700, 703, 709, 710, 711, 715, 718, 719, 720, 721, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 741, 742, 746, 753, 754, 756, 757, 759, 760], "duplic": [26, 549, 626, 716, 723, 728, 729, 732, 742, 759], "configur": [26, 166, 539, 549, 637, 706, 711, 712, 717, 719, 720, 725], "container_rightmost": 26, "cont_common_key_chain": 26, "cont_config": 26, "cont_contains_sub_contain": 26, "cont_contains_sub_structur": 26, "cont_copi": [26, 741], "cont_create_if_abs": 26, "noth": [26, 736, 759], "cont_cutoff_at_depth": 26, "depth_cutoff": 26, "summari": [26, 123, 451, 466, 538, 542, 711, 712, 733], "cont_cutoff_at_height": 26, "height_cutoff": 26, "deep": [26, 454, 542, 700, 702, 705, 707, 709, 710, 712, 714, 717, 718, 720, 725, 729, 732, 737, 740, 741, 751, 753, 756, 757, 759, 760], "intern": [26, 54, 55, 56, 549, 624, 634, 635, 681, 682, 683, 684, 685, 687, 715, 718, 721, 723, 730, 732, 733, 735], "cont_dev": 26, "belong": [26, 710, 714, 742], "cont_dev_str": 26, "cont_diff": [26, 741], "diff_kei": 26, "detect_key_diff": 26, "detect_value_diff": 26, "detect_shape_diff": 26, "share": [26, 140, 538, 700, 703, 716, 718, 722, 727, 729, 731, 732, 733, 736, 738, 751, 752, 759], "among": [26, 704, 718, 719, 733, 736, 753], "container0": 26, "cont_duplicate_array_keychain": 26, "cont_find_sub_contain": 26, "sub_cont_to_find": 26, "exsit": 26, "cont_find_sub_structur": 26, "sub_struc_to_find": 26, "cont_flatten_key_chain": [26, 741], "__": [26, 722, 741], "above_height": [26, 741], "below_depth": [26, 741], "cont_format_key_chain": 26, "format_fn": 26, "cont_from_disk_as_hdf5": [26, 741], "h5_obj_or_filepath": 26, "slice_obj": 26, "load": [26, 310, 370, 684, 700, 733, 746, 752, 759], "disk": [26, 684, 741, 752], "h5py": 26, "hdf5": [26, 684, 741], "filepath": [26, 556, 675, 712, 714], "h5": 26, "cont_from_disk_as_json": [26, 741], "json_filepath": 26, "json": [26, 706, 711, 741], "cont_from_disk_as_pickl": [26, 741], "pickle_filepath": 26, "pickl": [26, 684, 718, 741], "cont_from_flat_list": 26, "flat_list": 26, "hierarchi": [26, 710, 741, 749, 759], "cont_handle_inplac": 26, "prime": [26, 720], "overwritten": [26, 715, 716], "cont_has_kei": 26, "query_kei": 26, "somewher": [26, 719], "cont_has_key_chain": 26, "cont_ident": [26, 741], "cont_identical_array_shap": 26, "regardless": [26, 704, 705, 720, 724, 740, 743], "cont_identical_config": 26, "cont_identical_structur": 26, "cont_if_exist": 26, "cont_inplace_upd": 26, "cont_ivi": 26, "cont_key_chains_contain": 26, "sub_str": 26, "cont_list_stack": [26, 741], "cont_load": 26, "cont_map": [26, 718, 741], "func": [26, 49, 167, 300, 308, 448, 522, 525, 526, 528, 533, 539, 542, 543, 549, 637, 710, 714, 715, 722, 724, 729, 730], "cont_map_sub_cont": 26, "include_self": 26, "possibi": 26, "cont_max_depth": 26, "cont_multi_map": 26, "map_nest": 26, "assert_ident": 26, "leftmost": [26, 549, 637], "cont_multi_map_in_funct": 26, "cont_num_arrai": 26, "cont_overwrite_at_key_chain": 26, "target_dict": 26, "return_dict": 26, "cont_prune_empti": 26, "keep_non": 26, "cont_prune_key_chain": 26, "key1": [26, 700, 742], "key2": [26, 700], "key3": 26, "cont_prune_key_from_key_chain": 26, "cont_prune_kei": 26, "cont_prune_keys_from_key_chain": 26, "cont_reduc": 26, "cont_remove_key_length_limit": 26, "cont_remove_print_limit": 26, "cont_reshape_lik": 26, "leading_shap": 26, "cont_restructur": 26, "keep_orig": 26, "old": [26, 711, 716, 730], "cont_restructure_key_chain": 26, "keychain_map": 26, "cont_sav": 26, "cont_set_at_key_chain": 26, "cont_set_at_kei": 26, "cont_shap": [26, 544, 562], "attribut": [26, 119, 120, 121, 122, 153, 154, 162, 459, 460, 538, 539, 542, 716, 717, 718, 720, 723, 724, 727, 728, 730, 731, 736, 739, 740, 741, 742], "cont_show": 26, "cont_show_sub_contain": 26, "sub_cont_or_keychain": 26, "cont_size_ordered_arrai": 26, "keychain": [26, 32, 275, 380, 381, 382, 408], "cont_slice_kei": 26, "all_depth": 26, "cont_slice_via_kei": 26, "slice_kei": 26, "cont_sort_by_kei": 26, "cont_structural_diff": 26, "cont_to_dict": 26, "cont_to_disk_as_hdf5": [26, 741], "starting_index": 26, "max_batch_s": 26, "later": [26, 448, 542, 710, 725, 730, 733, 734, 753], "cont_to_disk_as_json": [26, 741], "cont_to_disk_as_pickl": [26, 741], "cont_to_flat_list": 26, "cont_to_iter": [26, 718], "leaf_keys_onli": 26, "cont_to_iterator_kei": 26, "cont_to_iterator_valu": 26, "cont_to_json": 26, "cont_to_nested_list": 26, "cont_to_raw": 26, "cont_trim_kei": 26, "max_length": 26, "trim": 26, "cont_try_kc": 26, "cont_unifi": 26, "unifi": [26, 167, 539, 701, 703, 713, 714, 715, 720, 724, 728, 729, 731, 736, 738, 746, 749, 750, 751, 753, 757, 760], "concatten": [26, 167, 539], "cont_unstack_cont": 26, "dim_siz": 26, "cont_update_config": 26, "cont_with_default_key_color": 26, "cont_with_entries_as_list": 26, "cont_with_ivy_backend": 26, "ivy_backend": [26, 732], "cont_with_key_length_limit": [26, 741], "cont_with_print_ind": [26, 741], "cont_with_print_limit": [26, 741], "cont_with_print_line_spac": 26, "h5_file_s": 26, "shuffle_h5_fil": 26, "seed_valu": [26, 551, 648], "split_cont": 26, "constitu": [26, 743], "_is_json": 26, "_repr": 26, "_containerwithconvers": [27, 52], "_static_to_ivi": 27, "_static_to_n": 27, "_containerwithcr": [28, 52], "_static_arang": 28, "_static_asarrai": 28, "_static_copy_arrai": 28, "_static_empti": 28, "_static_empty_lik": 28, "_static_ey": 28, "n_row": [28, 32, 87, 101, 269, 303, 310, 363, 537], "n_col": [28, 32, 87, 101, 269, 303, 537], "_static_from_dlpack": 28, "_static_ful": 28, "_static_full_lik": 28, "static_full_lik": 28, "2324": [28, 91, 537], "234": [28, 31, 91, 113, 196, 247, 537, 538, 540, 544, 568], "123": [28, 29, 91, 122, 457, 537, 542, 733], "_static_linspac": 28, "_static_logspac": 28, "static_logspac": 28, "15443469": [28, 93], "64158883": [28, 93], "_static_meshgrid": 28, "_static_native_arrai": 28, "_static_one_hot": 28, "static_one_hot": 28, "_static_on": 28, "_static_ones_lik": 28, "_static_tril": 28, "_static_triu": 28, "_static_zero": 28, "_static_zeros_lik": 28, "frombuff": [28, 537], "expos": [28, 89, 451, 537, 542, 700, 702, 719, 738, 742], "interfac": [28, 89, 537, 703, 740, 743, 746, 748, 749, 750, 751, 752, 753, 757, 760], "x00": [28, 89, 537], "xf0": [28, 89, 537], "x01": [28, 89, 537], "x02": [28, 89, 537], "x03": [28, 89, 537], "x04": [28, 89, 537], "x05": [28, 89], "5443469": [28, 93, 537], "static_frombuff": 28, "static_triu_indic": 28, "triu_indic": [28, 537], "_containerwithdatatyp": [29, 52], "_static_astyp": 29, "718": [29, 31, 106, 223, 538], "618": [29, 31, 106, 223, 538], "static_astyp": 29, "_static_broadcast_arrai": 29, "static_broadcast_arrai": 29, "_static_broadcast_to": 29, "static_broadcast_to": 29, "_static_can_cast": 29, "from_": [29, 109, 538], "static_can_cast": 29, "_static_default_complex_dtyp": 29, "complex_dtyp": [29, 112, 135, 538], "_static_default_float_dtyp": 29, "float_dtyp": [29, 114, 137, 538], "_static_dtyp": 29, "_static_finfo": 29, "inquir": [29, 119, 122], "static_finfo": 29, "55040e": [29, 119, 538], "7976931348623157e": [29, 119, 538], "308": [29, 119, 538, 733], "_static_function_supported_dtyp": 29, "_static_function_unsupported_dtyp": 29, "_static_iinfo": 29, "1800": [29, 122, 538], "1084": 29, "40000": 29, "static_iinfo": 29, "2147483648": [29, 122, 538], "2147483647": [29, 122, 538], "_static_is_bool_dtyp": 29, "dtype_in": [29, 104, 105, 118, 124, 125, 126, 127, 128, 129, 130, 131, 146, 538], "_static_is_complex_dtyp": 29, "is_complex_dtyp": [29, 538, 734], "roughli": [29, 711, 714, 756], "static_is_complex_dtyp": 29, "complex64": [29, 112, 126, 135, 141, 207, 234, 255, 301, 538, 540, 545, 591, 593, 594, 720], "_static_is_float_dtyp": 29, "static_is_float_dtyp": 29, "_static_is_int_dtyp": 29, "_static_is_uint_dtyp": 29, "_static_result_typ": 29, "static_result_typ": 29, "broadcats": [29, 107], "_containerwithdevic": [30, 52], "_static_dev": 30, "static_dev": 30, "_static_to_devic": 30, "static_to_devic": 30, "contaion": [30, 151], "_containerwithelementwis": [31, 52], "_static_ab": 31, "static_ab": 31, "_static_aco": 31, "static_aco": 31, "_static_acosh": 31, "static_acosh": 31, "_static_add": 31, "static_add": [31, 56], "_static_asin": 31, "static_asin": 31, "524": [31, 179, 540], "412": [31, 36, 179, 540], "201": [31, 32, 179, 330, 540], "_static_asinh": 31, "static_asinh": 31, "_static_atan": 31, "static_atan": 31, "_static_atan2": 31, "static_atan2": 31, "915": [31, 182, 540], "983": [31, 182, 540], "978": [31, 182, 540], "696": [31, 41, 182, 540, 646], "993": [31, 182, 540], "_static_atanh": 31, "static_atanh": 31, "_static_bitwise_and": 31, "static_bitwise_and": 31, "_static_bitwise_invert": 31, "static_bitwise_invert": 31, "_static_bitwise_left_shift": 31, "_static_bitwise_or": 31, "static_bitwise_or": 31, "_static_bitwise_right_shift": 31, "static_bitwise_right_shift": 31, "_static_bitwise_xor": 31, "static_bitwise_xor": 31, "_static_ceil": 31, "static_ceil": 31, "_static_co": 31, "static_co": 31, "_static_cosh": 31, "static_cosh": 31, "34": [31, 32, 33, 41, 122, 189, 192, 219, 240, 309, 321, 351, 441, 454, 455, 538, 540, 542, 544, 545, 551, 568, 585, 646, 647, 721], "_static_deg2rad": 31, "static_deg2rad": 31, "0262": [31, 193, 233, 540], "873": [31, 193, 233, 540], "_static_divid": 31, "static_divid": 31, "_static_equ": 31, "static_equ": 31, "_static_erf": 31, "static_erf": 31, "27632612": [31, 196], "934008": [31, 196], "99999928": [31, 196], "91903949": [31, 196], "_static_exp": 31, "static_exp": 31, "59814835": [31, 197, 540], "4131622": [31, 197], "_static_expm1": 31, "thefunct": [31, 196], "areal": 31, "static_expm1": 31, "71828175": [31, 197, 540], "38905621": [31, 197, 540], "59815216": 31, "_static_floor": 31, "static_floor": 31, "_static_floor_divid": 31, "static_floor_divid": 31, "_static_great": 31, "static_great": 31, "_static_greater_equ": 31, "static_greater_equ": 31, "_static_isfinit": 31, "999999999999": [31, 208, 540], "static_isfinit": 31, "_static_isinf": 31, "static_isinf": 31, "_static_isnan": 31, "static_isnan": 31, "_static_isr": 31, "0j": [31, 32, 97, 98, 175, 176, 177, 180, 183, 192, 197, 199, 211, 215, 217, 234, 238, 240, 241, 245, 276, 306, 537, 540, 545, 591], "23j": [31, 32], "9j": [31, 32], "static_isr": 31, "_static_lcm": 31, "1080": [31, 212], "1550": [31, 212], "130": [31, 212], "_static_less": 31, "static_less": 31, "_static_less_equ": 31, "static_less_equ": 31, "_static_log": 31, "static_log": 31, "_static_log10": 31, "static_log10": 31, "898": [31, 216, 540], "0414": [31, 216, 540], "_static_log1p": 31, "static_log1p": 31, "_static_log2": 31, "_static_logaddexp": 31, "static_logaddexp": 31, "_static_logical_and": 31, "static_logical_and": 31, "_static_logical_not": 31, "static_logical_not": 31, "_static_logical_or": 31, "static_logical_or": 31, "_static_logical_xor": 31, "static_logical_xor": 31, "_static_maximum": 31, "static_maximum": 31, "_static_minimum": 31, "static_minimum": 31, "_static_multipli": 31, "static_multipli": 31, "_static_neg": 31, "static_neg": 31, "_static_not_equ": 31, "static_not_equ": 31, "_static_posit": 31, "static_posit": 31, "_static_pow": 31, "static_pow": 31, "_static_rad2deg": 31, "static_rad2deg": 31, "5160": 31, "10300": [31, 233, 540], "15500": 31, "20600": 31, "2860": [31, 233], "_static_reciproc": 31, "recirpoc": [31, 235], "static_reciproc": 31, "_static_remaind": 31, "static_remaind": 31, "_static_round": 31, "thevfunct": 31, "300": [31, 33, 36, 237, 309, 332, 333, 462, 486, 540, 542, 545, 581, 733], "527": [31, 237, 540], "static_round": 31, "301": [31, 237, 540], "_static_sign": 31, "static_sign": 31, "_static_sin": 31, "static_sin": 31, "757": [31, 239, 540], "959": [31, 199, 239, 540], "279": [31, 239, 309, 330, 340, 449, 540, 542], "_static_sinh": 31, "static_sinh": 31, "835": [31, 240], "347": [31, 240], "721": [31, 240], "_static_sqrt": 31, "static_sqrt": 31, "_static_squar": 31, "static_squar": 31, "_static_subtract": 31, "static_subtract": 31, "_static_tan": 31, "static_tan": 31, "_static_tanh": 31, "static_tanh": 31, "995": [31, 245, 540], "9999": 31, "_static_trapz": 31, "static_trapz": 31, "_static_trunc": 31, "static_trunc": 31, "_static_trunc_divid": 31, "75j": [31, 178, 207], "01317055": [31, 178], "05634501": [31, 178], "115": [31, 178, 233, 540], "3461759": [31, 178], "524111": [31, 178], "644": [31, 179, 540, 742], "305": [31, 36, 179, 540], "351": [31, 193, 233], "00613": [31, 193], "0154": [31, 193], "403": [31, 197], "428772": [31, 197], "649": [31, 199], "220": [31, 199], "865": [31, 199], "metho": [31, 206, 218], "7j": [31, 32, 211, 234, 276, 306, 540], "956": [31, 217], "08746284": [31, 220], "32192809": [31, 220], "nuner": [31, 227], "65": [31, 34, 41, 188, 227, 469, 523, 540, 542, 543, 545, 555, 588, 646, 647, 665, 719], "000": [31, 228, 708, 719], "413": [31, 233], "took": [31, 234], "335": [31, 32, 234, 276], "345j": [31, 32, 234, 276], "static_angl": 31, "static_exp2": 31, "static_fmin": 31, "static_gcd": 31, "static_imag": 31, "static_logaddexp2": 31, "static_nan_to_num": 31, "static_r": 31, "_containerwithactivationexperiment": [32, 52], "_static_elu": 32, "static_elu": 32, "_static_silu": 32, "static_silu": 32, "27777028": [32, 256], "23947507": [32, 256], "0900332": [32, 256], "contan": [32, 250], "19722462": [32, 250], "84729779": [32, 250], "31326163": [32, 251], "46328258": [32, 251], "51301527": [32, 251], "79813886": [32, 251], "22856998": [32, 254], "42028043": [32, 254], "31868932": [32, 254], "static_logit": 32, "static_logsigmoid": 32, "34115386": 32, "64439666": 32, "24115384": 32, "55435526": 32, "07888974": 32, "00741899": 32, "26328245": 32, "00012302": 32, "static_prelu": 32, "static_relu6": 32, "static_selu": 32, "static_thresholded_relu": 32, "_containerwithconversionexperiment": [32, 52], "_containerwithcreationexperiment": [32, 52], "_static_trilu": 32, "blackman": [32, 258, 303], "00770143e": [32, 258], "49229857e": [32, 258], "hamming_window": [32, 303], "coeffici": [32, 260, 303, 545, 592], "ham": [32, 260, 303], "8000": [32, 260, 303], "2000": [32, 260, 303, 700], "4180": [32, 260], "8180": [32, 260], "hann_window": [32, 303], "hann": [32, 261, 303], "7500": [32, 261], "3455": [32, 261], "9045": [32, 261], "kaiser_bessel_derived_window": [32, 303], "suitabl": [32, 263, 264, 303, 554, 661, 711, 712, 718, 734, 753], "spectral": [32, 263, 264, 303], "analysi": [32, 263, 264, 303, 753, 754], "design": [32, 201, 258, 263, 264, 303, 540, 700, 702, 703, 713, 717, 719, 720, 730, 731, 732, 736, 738, 740, 746, 749, 751, 753, 756, 757, 758], "kaiser": [32, 258, 263, 264, 303], "70710677": [32, 263, 418, 419], "18493208": [32, 263, 303], "9827513": [32, 263, 303], "kaiser_window": [32, 303], "static_kaiser_window": [32, 264], "2049": [32, 264], "8712": [32, 264], "0367": [32, 264, 303], "7753": [32, 264], "static_blackman_window": 32, "window_length": [32, 258, 260, 263, 264, 273, 303], "static_eye_lik": 32, "static_hamming_window": 32, "static_hann_window": 32, "static_hann": 32, "static_kaiser_bessel_derived_window": 32, "static_tril_indic": 32, "static_unsorted_segment_min": 32, "static_unsorted_segment_sum": 32, "static_vorbis_window": 32, "vorbis_window": [32, 303], "vorbi": [32, 273, 303], "38268343": [32, 273], "92387953": [32, 273], "14943586": [32, 273, 303], "51644717": [32, 273], "85631905": [32, 273], "98877142": [32, 273], "tril_indic": [32, 303], "_containerwithdata_typeexperiment": [32, 52], "_containerwithdeviceexperiment": [32, 52], "_containerwithelementwiseexperiment": [32, 52], "0003": [32, 274, 545, 581], "0006": [32, 274, 298], "2345j": [32, 276], "5772": [32, 280], "9635": [32, 280], "4228": [32, 280], "9228": [32, 280], "mantissa": [32, 284, 306], "frist": [32, 285, 306], "coord": [32, 285], "6055": [32, 286], "160": [32, 288], "10240": [32, 288], "60000038": [32, 289, 306], "0707": [32, 295, 306], "0579": [32, 295, 306], "static_allclos": 32, "static_binar": 32, "static_conj": 32, "static_copysign": 32, "static_count_nonzero": 32, "static_diff": 32, "static_digamma": 32, "57721537": 32, "96351004": 32, "static_fix": 32, "static_float_pow": 32, "static_fmax": 32, "static_fmod": 32, "static_frexp": 32, "static_gradi": 32, "static_hypot": 32, "static_isclos": 32, "static_ldexp": 32, "static_lerp": 32, "90000057": [32, 289, 306], "80000019": [32, 289, 306], "70000076": [32, 289, 306], "55000019": [32, 289, 306], "05000019": [32, 289, 306], "static_modf": 32, "static_nansum": 32, "static_nextaft": 32, "static_signbit": 32, "static_sinc": 32, "636": 32, "090": 32, "070": 32, "057": 32, "static_sparsify_tensor": 32, "static_xlogi": 32, "static_zeta": 32, "0244": [32, 298], "_containerwithgeneralexperiment": [32, 52], "_static_reduc": 32, "static_reduc": 32, "_containerwithgradientsexperiment": [32, 52], "_containerwithimageexperiment": [32, 52], "_containerwithlayersexperiment": [32, 52], "_static_fft": 32, "static_fft": 32, "673": [32, 330], "0507": [32, 330], "79711437": [32, 309, 330, 340], "94867325": [32, 309, 330, 340], "74089146": [32, 309, 330, 340], "25980937": [32, 309, 330, 340], "64958102": [32, 309, 330, 340], "2442648": [32, 309, 330, 340], "247306": [32, 342], "908323j": [32, 342], "494955": [32, 342], "90395j": [32, 342], "static_adaptive_avg_pool1d": 32, "static_adaptive_avg_pool2d": 32, "static_adaptive_max_pool2d": 32, "static_avg_pool1d": 32, "static_avg_pool2d": 32, "static_avg_pool3d": 32, "static_dct": 32, "132": 32, "182": 32, "242": 32, "253": [32, 240, 540], "515": [32, 551, 646], "467": 32, "static_dft": 32, "static_embed": 32, "static_idct": 32, "93732834": [32, 309, 330], "75048852": [32, 309, 330], "29723358": [32, 309, 340], "6950531": 32, "93914509": 32, "88008738": 32, "18951225": 32, "06697273": [32, 309, 340], "57439804": 32, "68861485": [32, 309, 340], "41308832": [32, 309, 340], "0700836": 32, "2449036": 32, "285": 32, "6711426": 32, "514": 32, "501709": 32, "4924011": 32, "static_ifft": 32, "static_ifftn": 32, "static_interpol": 32, "static_max_pool1d": 32, "static_max_pool2d": 32, "max_pool2dd": 32, "static_max_pool3d": 32, "static_rfftn": 32, "_containerwithlinearalgebraexperiment": [32, 52], "933034": [32, 310, 354], "eigenvealu": [32, 357, 577], "xx": [32, 357, 359, 577], "37228107": [32, 357, 577], "3722816": [32, 357, 577], "8245648": [32, 357, 577], "41597357": [32, 357, 577], "56576747": [32, 357, 577], "9093767": [32, 357, 577], "56155": [32, 358], "82842": [32, 358], "450": [32, 362], "static_adjoint": 32, "static_cond": 32, "static_diagflat": 32, "static_eig": 32, "static_eigh_tridiagon": 32, "static_eigv": 32, "static_initialize_tuck": 32, "static_kron": 32, "kroneck": [32, 310, 361, 362], "static_make_svd_non_neg": 32, "static_matrix_exp": 32, "static_mode_dot": 32, "static_multi_dot": 32, "regular": [32, 310, 321, 367, 438, 545, 582, 711, 731, 753], "static_multi_mode_dot": 32, "static_partial_tuck": 32, "static_svd_flip": 32, "static_truncated_svd": 32, "static_tuck": 32, "_containerwithlossesexperiment": [32, 52], "_static_huber_loss": 32, "static_huber_loss": 32, "0575": [32, 373], "_static_l1_loss": 32, "static_l1_loss": 32, "_static_smooth_l1_loss": 32, "static_smooth_l1_loss": 32, "_static_soft_margin_loss": 32, "_containerwithmanipulationexperiment": [32, 52], "_static_fill_diagon": 32, "_static_unique_consecut": 32, "atleast": [32, 312, 380, 381, 382, 721], "ary1": [32, 312, 380, 381, 382], "ary2": [32, 312, 380, 381, 382], "broadcast_shap": [32, 55, 312], "static_concat_from_sequ": [32, 385], "30192195": [32, 397], "static_as_strid": 32, "static_atleast_1d": 32, "static_atleast_2d": 32, "static_atleast_3d": 32, "static_broadcast_shap": 32, "static_dsplit": 32, "static_dstack": 32, "static_expand": 32, "static_flatten": 32, "static_fliplr": 32, "static_flipud": 32, "static_fold": 32, "static_heavisid": 32, "static_hsplit": 32, "static_hstack": 32, "static_i0": 32, "static_matric": 32, "static_moveaxi": 32, "static_pad": 32, "static_partial_fold": 32, "static_partial_tensor_to_vec": 32, "static_partial_unfold": 32, "static_partial_vec_to_tensor": 32, "static_rot90": 32, "static_soft_threshold": 32, "static_take_along_axi": 32, "static_top_k": 32, "static_unfold": 32, "static_vsplit": 32, "static_vstack": 32, "_containerwithnormsexperiment": [32, 52], "16903085": [32, 418, 419], "50709254": [32, 418, 419], "84515423": [32, 418, 419], "44183609": [32, 418, 419], "56807494": [32, 418, 419], "69431382": [32, 418, 419], "static_batch_norm": 32, "static_group_norm": 32, "static_instance_norm": 32, "static_l1_norm": 32, "static_l2_norm": 32, "static_lp_norm": 32, "12500000": 32, "37500000": 32, "62500000": 32, "27500000": 32, "35000000": 32, "42500000": 32, "0000000": 32, "5000000": 32, "2500000": 32, "_containerwithrandomexperiment": [32, 52], "43643127": [32, 422], "32325703": [32, 422], "24031169": [32, 422], "34251311": [32, 422], "31692529": [32, 422], "3405616": [32, 422], "5319725": [32, 422], "22458365": [32, 422], "24344385": [32, 422], "26588406": [32, 422], "61075421": [32, 422], "12336174": [32, 422], "51142915": [32, 422], "25041268": [32, 422], "23815817": [32, 422], "64042903": [32, 422], "25763214": [32, 422], "10193883": [32, 422], "31624692": [32, 422], "46567987": [32, 422], "21807321": [32, 422], "37677699": [32, 422], "39914594": [32, 422], "22407707": [32, 422], "static_bernoulli": 32, "static_beta": 32, "static_dirichlet": 32, "static_gamma": 32, "static_poisson": 32, "_containerwithsearchingexperiment": [32, 52], "static_unravel_index": 32, "_containerwithsetexperiment": [32, 52], "_containerwithsortingexperiment": [32, 52], "invert_permut": [32, 319], "static_invert_permut": 32, "static_lexsort": [32, 44], "_containerwithstatisticalexperiment": [32, 52], "_static_cummax": 32, "static_cummax": 32, "_static_cummin": 32, "todo": [32, 436, 710, 720, 731], "static_cummin": 32, "func_nam": [32, 437, 710, 722, 723, 727, 731], "static_bincount": 32, "static_corrcoef": 32, "static_cov": [32, 321, 434], "static_histogram": 32, "static_igamma": 32, "static_median": 32, "static_nanmean": 32, "static_nanmedian": 32, "static_quantil": 32, "_containerwithutilityexperiment": [32, 52], "_containerwithgener": [33, 52], "_static_all_equ": 33, "static_all_equ": 33, "_static_array_equ": 33, "x0": [33, 446, 542, 722], "level": [33, 446, 680, 700, 704, 705, 710, 712, 718, 720, 724, 727, 729, 730, 731, 735, 736, 737, 738, 741, 742, 743, 746, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760], "a0": [33, 446], "static_array_equ": 33, "_static_assert_supports_inplac": 33, "_static_clip_matrix_norm": 33, "static_clip_matrix_norm": 33, "849": [33, 449, 450, 542], "_static_clip_vector_norm": 33, "static_clip_vector_norm": 33, "_static_einops_rearrang": 33, "static_einops_rearrang": 33, "_static_einops_reduc": 33, "static_einops_reduc": 33, "29333329": [33, 455, 542], "53000069": [33, 455, 542], "39666676": [33, 455, 542], "20666695": [33, 455, 542], "_static_einops_repeat": 33, "static_einops_repeat": 33, "_static_fourier_encod": 33, "static_fourier_encod": 33, "classivi": [33, 547, 553, 614, 656], "89858720e": 33, "79717439e": 33, "_static_gath": 33, "static_gath": 33, "_static_gather_nd": 33, "200": [33, 36, 188, 309, 332, 333, 462, 486, 540, 542, 694, 741], "400": [33, 36, 309, 332, 333, 462, 486, 542, 545, 581], "static_gather_nd": 33, "_static_get_num_dim": 33, "static_get_num_dim": 33, "_static_has_nan": 33, "leafwis": 33, "static_has_nan": 33, "_static_inplace_decr": 33, "_static_inplace_incr": 33, "_static_inplace_upd": 33, "_static_is_arrai": 33, "static_is_arrai": 33, "_static_is_ivy_arrai": 33, "static_is_ivy_arrai": 33, "_static_is_native_arrai": 33, "static_is_native_arrai": 33, "_static_scatter_flat": 33, "ref": [33, 37, 213, 227, 230, 236, 243, 540, 547, 616, 711, 730], "_static_scatter_nd": 33, "static_scatter_nd": 33, "_static_stable_divid": 33, "22222222": 33, "11111111": 33, "857": [33, 500, 542], "444": 33, "_static_stable_pow": 33, "00012": [33, 501, 542], "00016": [33, 34, 501, 529, 542, 543], "00001": [33, 501, 542], "00032": [33, 501], "00256": [33, 501], "1679638": [33, 501], "395": [33, 501], "16777383": [33, 501], "77": [33, 189, 501, 540, 545, 555, 588, 665], "_static_supports_inplace_upd": 33, "_static_to_list": 33, "static_to_list": 33, "_static_to_numpi": 33, "static_to_numpi": 33, "_static_to_scalar": 33, "static_to_scalar": 33, "_static_value_is_nan": 33, "452": 33, "static_value_is_nan": 33, "833": [33, 450], "600": [33, 36, 309, 332, 333, 462, 719], "700": [33, 462], "items": [33, 51, 542], "static_isin": 33, "static_items": 33, "complex128": [33, 112, 113, 126, 135, 141, 255, 301, 480, 538, 542, 545, 578, 579, 584, 600, 708, 720], "static_strid": 33, "425": [33, 521], "_containerwithgradi": [34, 52], "_static_stop_gradi": 34, "static_stop_gradi": 34, "87": [34, 36, 188, 217, 321, 351, 435, 523, 540, 543], "976": [34, 245, 523, 540, 543], "49e": [34, 523, 543], "74e": [34, 523, 543], "95e": [34, 523, 543], "024": [34, 523, 543], "096": [34, 523, 543], "216": [34, 37, 523, 543, 598], "384": [34, 523, 543], "626": [34, 523, 543], "en": [34, 523, 524, 543, 719], "wikipedia": [34, 523, 524, 543], "wiki": [34, 523, 524, 543], "stochastic_gradient_desc": [34, 523, 524, 543], "01099": [34, 524], "01003": [34, 524, 543], "01015": [34, 524, 543], "99936122": [34, 524, 543], "99936116": [34, 524, 543], "99936128": [34, 524, 543], "99936104": [34, 524, 543], "w_new": [34, 527, 543], "88": [34, 41, 61, 189, 321, 435, 527, 534, 540, 543, 545, 551, 555, 588, 647, 665], "708": [34, 529, 543], "445": [34, 529, 543], "6e": [34, 529, 543], "00036": [34, 529, 543], "00049": [34, 529, 543], "layerwis": [34, 530, 543], "_containerwithimag": [35, 52], "_containerwithlay": [36, 52], "_static_conv1d": 36, "static_conv1d": 36, "_static_conv1d_transpos": 36, "static_conv1d_transpos": 36, "112": [36, 545, 555, 559, 588, 665], "_static_conv2d": 36, "ey": [36, 537, 544, 560, 566, 736, 743], "static_conv2d": 36, "_static_conv2d_transpos": 36, "static_conv2d_transpos": 36, "_static_conv3d": 36, "fdfh": [36, 562], "static_conv3d": 36, "_static_conv3d_transpos": 36, "static_conv3d_transpos": 36, "_static_depthwise_conv2d": 36, "inp": [36, 544, 566], "static_depthwise_conv2d": 36, "_static_dropout": 36, "static_dropout": 36, "_static_dropout1d": 36, "static_dropout1d": 36, "_static_dropout2d": 36, "_static_dropout3d": 36, "_static_linear": 36, "278": [36, 544, 567, 568], "static_linear": 36, "352": [36, 544, 568, 724], "195": 36, "_static_lstm_upd": 36, "_static_multi_head_attent": 36, "_static_reduce_window": 36, "_static_scaled_dot_product_attent": 36, "static_scaled_dot_product_attent": 36, "39999962": [36, 544, 567, 568], "19999695": [36, 568], "11600018": [36, 568], "88399887": [36, 568], "196": [36, 544, 568], "306": [36, 544, 568], "19999981": [36, 544, 567, 571], "59249449": [36, 544, 571], "68226194": [36, 544, 571], "4000001": [36, 544, 567, 571], "19603825": [36, 544, 571], "9960382": [36, 544, 571], "26894283": [36, 544, 571], "40236187": [36, 544, 571], "39999437": [36, 544, 571], "59999037": [36, 544, 571], "35046196": [36, 544, 571], "54282808": [36, 544, 571], "39989519": [36, 544, 571], "5998764": [36, 544, 571], "_containerwithlinearalgebra": [37, 52], "_static_choleski": 37, "static_choleski": 37, "577": [37, 545, 572], "707": [37, 545, 572], "static_rol": [37, 39], "_static_cross": 37, "static_cross": 37, "_static_det": 37, "_static_diag": 37, "_static_diagon": 37, "static_diagon": 37, "_static_eigh": 37, "_static_eigvalsh": 37, "static_eigvalsh": 37, "51572949": [37, 545, 579], "17091519": [37, 545, 579], "3448143": [37, 545, 579], "88178420e": [37, 545, 579], "35898387e": [37, 545, 579], "46410179e": [37, 545, 579], "_static_inn": 37, "static_inn": 37, "_static_inv": 37, "static_inv": 37, "_static_matmul": 37, "matul": 37, "static_matmul": 37, "_static_matrix_norm": 37, "deimens": 37, "static_matrix_norm": 37, "_static_matrix_pow": 37, "_static_matrix_rank": 37, "static_matrix_rank": 37, "_static_matrix_transpos": 37, "static_matrix_transpos": 37, "_static_out": 37, "n1": [37, 94, 537], "n2": [37, 94, 537], "static_out": [37, 588], "_static_pinv": 37, "static_pinv": 37, "0426": 37, "0964": 37, "0605": 37, "1368": 37, "_static_qr": 37, "_static_slogdet": 37, "static_slogdet": 37, "6931472": 37, "0986123": 37, "_static_solv": 37, "_static_svd": 37, "static_svd": 37, "au": 37, "aS": 37, "avh": 37, "bu": [37, 703], "bvh": 37, "_static_svdv": 37, "_static_tensordot": 37, "_static_tensorsolv": 37, "_static_trac": 37, "static_trac": 37, "_static_vand": 37, "static_vand": 37, "343": [37, 237, 540, 598], "512": [37, 544, 559, 598, 700], "729": [37, 598, 742], "_static_vecdot": 37, "_static_vector_norm": 37, "static_vector_norm": 37, "77359247": [37, 600], "_static_vector_to_skew_symmetric_matrix": 37, "09861231": [37, 545, 591], "3475602": [37, 593], "93765765": [37, 593], "58776021": [37, 593], "10416126": [37, 593], "80644298": [37, 593], "87024701": [37, 593], "48127627": [37, 593], "79101127": [37, 593], "98288572": [37, 593], "68917423": [37, 593], "_containerwithloss": [38, 52], "_static_binary_cross_entropi": 38, "static_binary_cross_entropi": 38, "511": [38, 546, 602, 604], "_static_cross_entropi": 38, "static_cross_entropi": 38, "20397282": 38, "83258148": 38, "60943794": [38, 545, 591], "_static_sparse_cross_entropi": 38, "static_sparse_cross_entropi": 38, "5108256": [38, 603], "609438": [38, 603], "_containerwithmanipul": [39, 52], "_static_clip": 39, "static_clip": 39, "_static_concat": 39, "_static_constant_pad": 39, "static_constant_pad": 39, "_static_expand_dim": 39, "static_expand_dim": 39, "container_axi": [39, 547, 608], "_static_flip": 39, "static_flip": 39, "_static_permute_dim": 39, "static_permute_dim": 39, "_static_repeat": 39, "static_repeat": 39, "_static_reshap": 39, "static_reshap": 39, "_static_rol": 39, "positivclip": 39, "_static_split": 39, "static_split": 39, "_static_squeez": 39, "static_squeez": 39, "_static_stack": 39, "leavv": 39, "static_stack": 39, "_static_swapax": 39, "_static_til": 39, "static_til": 39, "_static_unstack": 39, "static_unstack": 39, "_static_zero_pad": 39, "repreat": [39, 611], "_containerwithnorm": [40, 52], "34198591": [40, 550, 643], "04274819": [40, 550, 643], "29923761": [40, 550, 643], "24053511": [40, 550, 643], "62221265": [40, 643], "20277636": [40, 643], "41943574": [40, 643], "83710337": [40, 643], "_containerwithrandom": [41, 52], "_static_multinomi": 41, "_static_randint": 41, "static_randint": 41, "_static_random_norm": 41, "static_random_norm": 41, "651": 41, "_static_random_uniform": 41, "static_random_uniform": 41, "481": 41, "0999": 41, "_static_shuffl": 41, "static_shuffl": 41, "431": [41, 646], "274": [41, 646], "_containerwithsearch": [42, 52], "_static_argmax": 42, "static_argmax": 42, "_static_argmin": 42, "static_argmin": 42, "_static_argwher": 42, "static_argwher": 42, "_static_nonzero": 42, "_static_wher": 42, "static_wher": 42, "_containerwithset": [43, 52], "_static_unique_al": 43, "static_unique_al": 43, "_static_unique_count": 43, "static_unique_count": 43, "_static_unique_invers": 43, "static_unique_invers": 43, "_static_unique_valu": 43, "_containerwithsort": [44, 52], "_static_argsort": 44, "static_argsort": 44, "_static_searchsort": 44, "_static_sort": 44, "static_sort": 44, "static_msort": 44, "_containerwithstatist": [45, 52], "_static_cumprod": 45, "static_cumprod": 45, "_static_cumsum": 45, "static_cumsum": 45, "_static_prod": 45, "static_prod": 45, "11000001": [45, 669], "23100001": [45, 669], "30800003": [45, 555, 669], "_static_sum": 45, "_static_var": 45, "static_var": 45, "12666667": [45, 555, 672], "11555555": [45, 555, 672], "respectv": [45, 670], "81649649": [45, 670], "94280904": [45, 670], "509902": [45, 555, 670], "2472192": [45, 670], "44948983": [45, 670], "41421354": [45, 670], "contian": [45, 672], "6666667": [45, 672], "_containerwithutil": [46, 52], "_static_al": 46, "static_al": 46, "_static_ani": 46, "static_ani": 46, "add_ivy_container_instance_method": 47, "containerexampl": 47, "factorized_tensor": [48, 49, 50], "factorizedtensor": [48, 49, 50], "matrix_or_tensor": 48, "to_tensor": [48, 49, 50], "to_unfold": [48, 49, 50], "to_vec": [48, 49, 50], "cp_tensor": 49, "cptensor": [49, 267, 303], "cp_copi": 49, "cp_flip_sign": 49, "s_i": 49, "receiv": [49, 445, 481, 542, 548, 621, 622, 623, 682, 712, 720, 721, 733, 736], "summar": [49, 733], "normalisation_weight": 49, "normalised_factor": 49, "cp_lstsq_grad": 49, "return_loss": 49, "third": [49, 312, 387, 411, 545, 553, 593, 655, 717, 730, 746, 752, 753, 759], "nabla": 49, "mathcal": 49, "mathbf": 49, "factor_matric": 49, "cp_gradient": 49, "quantiti": 49, "cp_mode_dot": 49, "keep_dim": [49, 50], "cp_multi_mode_dot": 49, "cp_n_param": 49, "tensor_shap": [49, 50], "n_param": [49, 50], "cp_norm": 49, "cp_to_tensor": 49, "fact": [49, 712, 714, 719, 731, 733, 738, 741], "khatria": 49, "rao": [49, 310, 361], "khatri": [49, 310, 361], "cp_normal": 49, "normalis": 49, "u_1": 49, "u_n": 49, "v_1": 49, "v_n": 49, "v_k": 49, "u_k": 49, "absorb": 49, "refold": [49, 312, 393, 404], "cp_to_unfold": 49, "ie": 49, "s_u_i": 49, "exploit": [49, 756], "khatri_rao": [49, 310], "cp_to_vec": 49, "ravel": [49, 736], "unfolding_dot_khatri_rao": 49, "mttkrp": 49, "validate_cp_rank": 49, "percent": 49, "validate_cp_tensor": 49, "tucker_tensor": 50, "tucker_copi": 50, "tucker_mode_dot": [50, 760], "tucker_n_param": 50, "tucker_norm": 50, "tucker_to_tensor": 50, "skip_factor": 50, "transpose_factor": 50, "tucker_to_unfold": 50, "tucker_to_vec": 50, "validate_tucker_rank": 50, "fixed_mod": 50, "validate_tucker_tensor": 50, "_bisection_root_find": 50, "fun": [50, 522, 542, 549, 635, 719], "max_it": 50, "__abs__": [51, 52], "__add__": [51, 52, 715, 718, 722, 723, 726, 731, 732, 740], "__eq__": [51, 52], "__ge__": [51, 52], "__gt__": [51, 52, 736], "__le__": [51, 52], "__lt__": [51, 52], "__ne__": [51, 52], "__pow__": [51, 52, 740], "69678056": 51, "59876156": 51, "82660675": 51, "__radd__": [51, 52, 722, 723, 731], "__rrshift__": [51, 52], "__rshift__": [51, 52], "__rsub__": [51, 52], "__sub__": [51, 52, 715, 718, 722, 726, 740], "__truediv__": [51, 52, 715, 718, 722], "__xor__": [51, 52], "referenc": [51, 724, 730], "hardwar": [51, 55, 703, 711, 736, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759], "resid": [51, 55, 547, 608, 731, 738, 742], "mt": [51, 740], "hopefulli": [51, 52, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 678, 679, 681, 682, 684, 685, 686, 687, 702, 703, 704, 706, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 738, 739, 740, 741, 742, 743, 745], "overview": [51, 52, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 678, 679, 681, 682, 684, 685, 686, 687, 717, 719, 733, 737, 745], "submodul": [51, 52, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 678, 679, 680, 681, 682, 684, 685, 686, 687, 710, 711, 712, 714, 717, 719, 721, 727, 728, 733, 737, 738, 742, 748], "question": [51, 52, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 678, 679, 681, 682, 684, 685, 686, 687, 700, 702, 703, 704, 706, 708, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 738, 739, 740, 741, 742, 743, 745, 746], "reach": [51, 52, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 636, 678, 679, 681, 682, 684, 685, 686, 687, 702, 703, 704, 706, 708, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 738, 739, 740, 741, 742, 743, 745, 752, 753], "eq": 52, "ge": 52, "gt": [52, 732, 738], "le": 52, "lt": 52, "ne": 52, "75979435": 52, "52153397": 52, "13532257": 52, "rshift": 52, "truediv": 52, "66666669": [52, 315, 419, 525, 543], "nested_arrai": [54, 55, 56, 717], "nestedarrai": 54, "nested_rank": [54, 55, 56], "inner_shap": [54, 55, 56], "nestedarraybas": [54, 55, 56], "classmethod": [54, 55], "from_row_length": 54, "row_length": 54, "from_row_split": 54, "row_split": 54, "ragged_map": 55, "ragged_multi_map": 55, "ragged_arrai": 55, "ragged_multi_map_in_funct": 55, "replace_ivy_arrai": 55, "unbind": 55, "nestedarrayelementwis": 56, "strictli": [61, 64, 67, 201, 534, 540, 726, 730], "behaviour": [61, 64, 228, 534, 540, 709, 712, 713, 714, 715, 718, 720, 721, 723, 724, 726, 727, 728, 730, 731, 733, 734, 740], "24000001": [61, 534], "703": [62, 534], "683": [62, 534], "408": [62, 534], "313": [62, 534], "437": [62, 534], "40337825": [63, 534], "56114835": [63, 534], "20788449": [63, 534], "0768": [66, 534], "231": [66, 534], "\u03b2": [67, 534], "66666667": [68, 321, 434, 534], "body_fn": [72, 73, 75, 536], "bodi": [72, 75, 536, 714, 733], "lst": [72, 536], "orelse_fn": [73, 536], "lambda": [73, 75, 453, 525, 526, 528, 533, 536, 542, 543, 545, 549, 578, 631, 632, 636, 700, 710, 727, 728, 729, 732, 736, 738, 741], "body1": [74, 536], "body2": [74, 536], "repeatedli": [75, 536, 549, 633, 719, 733], "continu": [75, 241, 536, 540, 700, 703, 704, 709, 710, 711, 713, 714, 730, 733, 746, 753], "chosen": [76, 182, 537, 540, 552, 654, 710, 719, 731], "ml_framework": [76, 537], "distanc": [76, 537], "adjac": [76, 537], "nestedsequ": [77, 78, 537], "typevar": [77, 78, 537], "supportsbufferprotocol": [77, 78, 537], "static_copy_arrai": [84, 537], "intdtyp": [87, 98, 103, 115, 126, 131, 138, 144, 255, 301, 537, 538], "interchang": [88, 537, 547, 617], "plu": [89, 537], "x00b": [89, 537], "x00d": [89, 537], "x00e": [89, 537], "66666663": [92, 537], "41588834": [93, 537], "7827941": [93, 537], "6227766": [93, 537], "23413252": [93, 537], "n3": [94, 537], "similarli": [94, 101, 177, 269, 303, 537, 540, 716, 720, 731, 736, 740, 759], "xv": [94, 537], "yv": [94, 537], "x_nativ": [95, 537, 730], "y_nativ": [95, 537], "z_nativ": [95, 537], "d_type": [97, 537], "col": [101, 269, 303, 537], "primari": [101, 120, 121, 153, 154, 269, 303, 319, 427, 459, 460, 537, 538, 539, 542, 710, 713, 716, 720, 728, 730, 731, 733, 736, 746, 748], "purpos": [101, 199, 217, 269, 303, 537, 540, 545, 591, 712, 713, 715, 718, 719, 721, 722, 724, 726, 727, 728, 731, 733, 736, 737, 740, 748, 752, 754, 757, 758, 759], "upward": [101, 269, 303, 537], "downward": [101, 269, 303, 537], "2xn": [101, 269, 303, 537], "subarrai": [101, 269, 303, 537], "incompat": [108, 538], "uint8": [109, 116, 120, 131, 134, 139, 145, 255, 301, 538, 720, 733], "closest": [111, 190, 200, 201, 237, 247, 312, 405, 538, 540, 733, 736], "xtype": [111, 538], "ytype": [111, 538], "native_uint16": [111, 538], "complexdtyp": [112, 126, 135, 538], "set_default_complex_dtyp": [112, 141, 538], "4294": [112, 114, 538], "967346": [112, 114, 538], "set_default_dtyp": [113, 142, 538, 720, 727], "floatdtyp": [114, 137, 538], "set_default_float_dtyp": [114, 123, 135, 143, 538, 720], "int_dtyp": [115, 138, 538], "set_default_int_dtyp": [115, 123, 144, 538, 720], "4294967346": [115, 116, 538], "uint_dtyp": [116, 139, 538], "uint": [116, 131, 139, 145, 538, 720, 732], "uintdtyp": [116, 131, 139, 145, 538], "set_default_uint_dtyp": [116, 123, 145, 538], "native_bool": [118, 538], "followng": [119, 538], "ieee": [119, 177, 194, 199, 217, 227, 236, 241, 244, 535, 538, 540, 703], "754": [119, 177, 194, 199, 217, 227, 236, 241, 244, 535, 538, 540, 703], "smallest_norm": [119, 538], "bfloat16": [120, 538, 720, 731, 733, 734], "unsupport": [121, 154, 460, 538, 539, 542, 711, 731], "encapsul": [122, 538, 719], "314": [122, 234, 276, 306, 538, 540], "9223372036854775808": [122, 538], "9223372036854775807": [122, 538], "65535": [122, 538], "4294967295": [122, 538], "un": [124, 538, 720, 738], "native_uint8": [124, 538], "hashabl": [128, 538], "type1": [132, 538], "type2": [132, 538], "array_api_promot": [132, 133, 538], "unexpect": [133, 201, 538, 540, 720], "default_complex_dtyp": [135, 538], "default_dtype_stack": [136, 142, 538], "unset_default_dtyp": [136, 538], "native_uint64": [136, 538], "default_float_dtyp": [137, 538, 720], "default_int_dtyp": [138, 144, 538, 720], "default_uint_dtyp": [139, 145, 538], "ret1": [140, 538], "ret2": [140, 538], "reset": [141, 142, 143, 144, 145, 171, 172, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 538, 539, 542, 721], "default_complex_dtype_stack": [141, 538], "default_float_dtype_stack": [143, 538], "native_float16": [146, 538], "unmodifi": [148, 539, 716, 720], "tpu": [148, 154, 165, 170, 539, 721, 753, 756], "clear": [149, 539, 700, 702, 703, 704, 710, 712, 716, 720, 721, 722, 731, 736, 738, 740, 753], "cach": [149, 448, 539, 542, 691, 725, 727, 730, 733], "gpu": [150, 152, 153, 156, 159, 161, 163, 165, 166, 169, 171, 173, 539, 700, 711, 712, 719, 721, 740, 747, 751, 753, 756, 757, 758], "aliv": [155, 160, 162, 463, 483, 484, 539, 542, 721], "139740789224448": [155, 539], "physic": [158, 539], "default_devic": [160, 163, 164, 165, 171, 172, 539, 721, 724], "process_specif": [161, 173, 539], "percentag": [161, 539], "ram": [161, 169, 173, 539], "alon": [161, 173, 539, 700, 706, 725, 733], "036902561555": [161, 539], "7024003467681645": [161, 539], "as_native_dev": [161, 539], "7095597456708771": [161, 539], "attr_onli": [162, 539], "soft_device_mod": [164, 172, 539], "rtype": [164, 487, 488, 493, 494, 496, 497, 539, 542], "chunk": [165, 166, 167, 539], "codebas": [165, 166, 539, 704, 705, 713, 720, 725, 730, 731, 733, 734, 737], "split_factor": [165, 539, 724], "max_chunk_s": [167, 539], "chunk_siz": [167, 539], "input_ax": [167, 539], "output_ax": [167, 539], "usag": [167, 539, 703, 720, 727, 730, 733, 738, 746, 756], "fed": [167, 539, 742], "fist": [167, 539], "gb": [169, 173, 539, 711], "66700032": [169, 539], "589934592": [169, 539], "set_default_devic": [171, 539, 721], "set_soft_device_mod": [172, 539, 721], "219563008": [173, 539], "902400346": [173, 539], "525205504": [173, 539], "na": [174, 540, 733], "princip": [175, 179, 181, 295, 306, 540], "domain": [175, 176, 179, 180, 181, 182, 191, 192, 197, 199, 215, 216, 218, 239, 240, 241, 244, 245, 295, 306, 540, 723, 751, 753], "codomain": [175, 176, 179, 180, 181, 182, 191, 192, 197, 199, 215, 216, 218, 239, 240, 241, 244, 245, 295, 306, 540, 723], "\u03c0": [175, 179, 181, 182, 535, 540], "3\u03c0": [175, 182, 540], "unspecifi": [175, 176, 180, 183, 192, 197, 199, 201, 232, 236, 240, 241, 245, 310, 357, 540, 545, 547, 577, 578, 616, 730], "\u03c0j": [176, 180, 183, 215, 217, 540], "3\u03c0j": [176, 215, 217, 540], "x1_i": [177, 182, 184, 186, 187, 188, 189, 194, 195, 201, 205, 206, 213, 214, 219, 221, 223, 224, 227, 230, 232, 236, 243, 540, 714], "neither": [177, 194, 201, 227, 540, 545, 595, 719, 731, 736], "nor": [177, 194, 201, 227, 540, 719, 731, 757], "2019": [177, 194, 199, 217, 227, 540, 753, 756], "too": [177, 194, 201, 227, 540, 681, 710, 711, 712, 714, 720, 724, 734, 746], "overflow": [177, 194, 201, 540, 545, 555, 591, 671, 709, 720], "commut": [177, 540], "tabl": [177, 194, 227, 494, 516, 540, 542, 682, 720, 731, 735, 753], "dj": [177, 194, 227, 540], "bj": [177, 194, 227, 276, 306, 540], "invlov": [177, 540], "z1": [177, 540], "z2": [177, 540], "yj": [178, 540], "nanj": [180, 540], "809": [180, 540], "199": [180, 540], "569": [180, 540], "733": [180, 540], "notat": [182, 540, 555, 665, 719], "denot": [182, 540, 684], "quadrant": [182, 540], "rai": [182, 540, 703], "bitwis": [184, 187, 189, 224, 540], "170": [188, 540], "243": [188, 540], "225": [188, 540], "xor": [189, 224, 540], "654": [191, 540], "ci": [192, 197, 199, 240, 540, 714, 720, 725, 732, 733, 746], "368": [192, 540], "670": [192, 540], "202": [192, 540, 714], "548": [192, 540], "1490": [192, 540], "57079633": [193, 540], "14159265": [193, 540], "71238898": [193, 540], "28318531": [193, 540], "02617994": [193, 540], "87266463": [193, 540], "01919862": [193, 540], "03839725": [193, 540], "05759586": [193, 540], "07679449": [193, 540], "09599311": [193, 540], "11519173": [193, 540], "35081118": [193, 540], "88139129": [193, 540], "underflow": [194, 201, 540, 545, 591, 720], "textbook": [194, 227, 540], "frac": [194, 216, 218, 238, 240, 244, 309, 315, 336, 337, 341, 342, 414, 416, 540], "ac": [194, 227, 540, 694], "bd": [194, 227, 540], "bc": [194, 227, 540, 694], "versu": [194, 227, 232, 540], "riemann": [194, 227, 540], "sphere": [194, 227, 540], "c99": [194, 227, 540], "infinit": [194, 227, 241, 540], "usual": [194, 227, 540, 694, 711, 714, 720, 731, 733, 736], "interest": [194, 227, 540, 710, 712], "unlik": [194, 227, 540, 703, 714, 719, 722, 758, 760], "698": [194, 540], "cut": [197, 199, 239, 240, 241, 244, 540, 702, 759], "08553692": [197, 540], "567": [197, 540], "00344786": [197, 540], "76297021": [197, 540], "197948": [197, 540], "53253174": [197, 540], "accur": [199, 217, 540, 545, 591, 728], "fdlibm": [199, 217, 540], "compliant": [199, 217, 222, 223, 540, 555, 666, 667, 668, 670], "potenti": [199, 217, 540, 700, 710, 711, 719, 720, 731, 737, 756], "632": [199, 540], "20e": [199, 540], "72e": [199, 540], "greatest": [200, 201, 204, 540], "introduc": [201, 540, 547, 553, 613, 655, 702, 718, 719, 720, 728, 732, 733, 736, 741], "via": [201, 310, 369, 372, 540, 549, 634, 635, 712, 714, 718, 720, 721, 730, 734, 736, 738, 740, 741, 745, 753], "pep": [201, 540, 726], "238": [201, 540], "goal": [201, 540, 700, 703, 710, 753, 759], "disambigu": [201, 540, 729], "former": [201, 540, 720, 723, 731], "latter": [201, 540, 714, 716, 720, 723, 731], "overload": [201, 540, 733], "led": [201, 540, 714, 755], "subtl": [201, 540, 720, 759], "ambigu": [201, 540], "semant": [201, 236, 540, 702, 738, 743, 754], "ill": [201, 540], "diverg": [201, 540], "prefer": [201, 540, 700, 711, 718, 724, 728, 731, 747, 753], "surpris": [201, 540, 746], "arrau": [207, 540], "log_": [216, 218, 540], "742": [217, 540], "hanl": [218, 540], "NOT": [222, 540, 694, 710], "particular": [222, 540, 711, 712, 714, 716, 719, 720, 722, 728, 730, 731, 733, 734, 749, 753, 759], "negat": [229, 276, 306, 540], "omplex": [230, 540], "carefulli": [232, 540, 681, 731, 751, 756], "52095687": [232, 540], "92457771": [232, 540], "49372482": [232, 540], "22738838": [232, 540], "156": [232, 540], "5877228": [232, 540], "189": [233, 540], "252": [233, 540], "315": [233, 540], "378": [233, 540], "1150": [233, 540], "2890": [233, 540], "172": [233, 540], "229": [233, 540], "487": [233, 540, 544, 568], "344": [233, 540], "355j": [234, 276, 306, 540], "55j": [234, 276, 306, 540], "That": [236, 311, 375, 540, 694, 711, 712, 715, 733, 740, 741, 742, 754], "primarili": [236, 540, 710, 718, 753], "reason": [236, 245, 540, 703, 710, 712, 714, 715, 718, 719, 720, 722, 727, 730, 731, 733, 734, 736, 738, 740, 759], "counterpart": [237, 540, 718, 728], "deliber": [237, 540, 736], "imprecis": [237, 540], "5654": [237, 540], "034": [237, 540], "433": [237, 526, 528, 540, 543], "known": [238, 540, 681, 714, 719, 720, 731, 733], "signum": [238, 540], "x_": [238, 540], "operatornam": [238, 240, 540, 545, 578], "textrm": [238, 540], "932": [239, 540], "746": [239, 540], "443": [239, 540], "657": [239, 450, 540, 542], "indistinguish": [241, 540], "convent": [241, 540, 545, 555, 583, 665, 702, 712, 716, 726, 734, 745, 759], "infti": [241, 540], "32455532": [241, 540], "89897949": [241, 540], "169": [241, 540], "analyt": [244, 540, 753, 755, 759], "math": [244, 540, 730, 731, 732, 743, 751], "pole": [244, 540], "546": [244, 540, 544, 568], "916": [244, 540, 546, 602], "996": [244, 540], "histor": [245, 540], "stem": [245, 540, 730], "older": [245, 540], "patch": [245, 540, 720, 753], "advis": [245, 540, 731], "462": [245, 540], "604": [245, 540], "984": [245, 540], "997": [245, 540], "0375": [247, 540], "032": [247, 540], "57258511": [249, 301], "69999999": [249, 301, 533, 543], "90928203": [249, 301], "98772264": [249, 301], "99591321": [249, 301], "99863964": [249, 301], "69880581": [249, 301], "18126924": [249, 301], "20141329": [251, 301], "40318608": [251, 301], "48683619": [251, 301], "46328247": [251, 301], "59813893": [251, 301], "43748799": [251, 301], "parametr": [252, 301, 714, 733, 753], "6705687": [254, 301], "52016652": [254, 301], "40560818": [254, 301], "45630932": [254, 301], "doubl": [255, 301], "2689": [256, 301], "7310": [256, 301], "7615": [256, 301], "2784": [256, 301], "7168": [256, 301], "8708": [256, 301], "4374": [256, 301], "1379": [256, 301], "0089": [256, 301], "taper": [258, 261, 303], "term": [258, 303, 311, 375, 544, 569, 682, 700, 702, 712, 718, 738, 748, 753], "summat": [258, 303, 555, 665, 694], "leakag": [258, 303], "slightli": [258, 303, 706, 718, 731, 733, 738, 742], "wors": [258, 303, 703], "y1": [259, 303], "0800": [260, 303], "3979": [260, 303], "9121": [260, 303], "5400": [260, 303], "han": [261, 303], "dens": [262, 303, 682, 700], "ith": [262, 303], "00726415": [263, 303], "9999736": [263, 303], "2773e": [264, 303], "0172e": [264, 303], "9294e": [264, 303], "4149": [264, 303], "9138": [264, 303], "5529": [264, 303], "multidimension": [265, 266, 303, 753], "orthogon": [267, 268, 303, 310, 357, 369, 372, 545, 577, 578], "normalise_factor": [267, 303], "cp": [267, 303, 712], "complementari": [273, 303, 751, 759], "38268346": [273, 303], "38268352": [273, 303], "8563191": [273, 303], "14943568": [273, 303], "much": [274, 287, 306, 681, 703, 710, 711, 712, 715, 718, 720, 727, 730, 731, 732, 734, 735, 736, 738, 740, 741, 751, 753, 759, 760], "arrrai": [276, 306], "position": [282, 306], "inexact": [282, 306], "triangl": [286, 306], "999999e": [287, 306], "65999985": [289, 306], "52000046": [289, 306], "1500001": [289, 306, 455, 542], "11259177": [290, 306], "3574118": [290, 306], "20097363": [290, 306], "Not": [292, 306, 310, 359, 535, 716, 724, 732, 741, 742, 746], "suppli": [294, 306, 312, 400, 694, 715, 717, 733], "217234": [295, 306], "hurwitz": [298, 306], "custom_grad_func": [300, 308], "bind": [300, 308, 710, 729, 752, 753], "upstream": [300, 308, 711, 712, 714, 729], "sequence_length": 301, "ndenumer": 303, "ndindex": 303, "random_cp": 303, "random_tuck": 303, "bind_custom_gradient_funct": [308, 729], "area_interpol": 309, "division_overrid": [309, 327], "avg": [309, 327, 329, 350], "dimensio": [309, 328], "tranform": [309, 330, 340], "01823380e": [309, 330, 340], "15385818e": [309, 330, 340], "36371466e": [309, 330, 340], "38763905e": [309, 330, 340], "60722279e": [309, 330, 340], "80319249e": [309, 330, 340], "05617893e": [309, 330, 340], "21500000e": [309, 330, 340], "24000015e": [309, 330, 340], "90734863e": [309, 330, 340], "10000420e": [309, 330, 340], "15899994e": [309, 330, 340], "24000053e": [309, 330, 340], "81469727e": [309, 330, 340], "09999847e": [309, 330, 340], "4135742": [309, 330, 340], "6779785": [309, 330, 340], "3770599": [309, 330, 340], "114": [309, 330, 340], "8719864": [309, 330, 340], "72109985": [309, 330, 340], "52869415": [309, 330, 340], "79182434": [309, 330, 340], "72489166": [309, 330, 340], "container_n": [309, 330, 340], "container_typ": [309, 330, 340, 542], "container_norm": [309, 330, 340], "1580677": [309, 330], "89422607": [309, 330], "86190414": [309, 330], "00041008": [309, 330], "75149155": [309, 330], "97056389": [309, 330], "87819386": [309, 330], "89381361": [309, 330], "50000000e": [309, 330, 340], "22044605e": [309, 330, 340], "randomli": [309, 332, 333, 334, 544, 567, 682], "ed": [309, 332, 333, 334], "rest": [309, 312, 332, 333, 334, 386, 711, 717, 719, 733, 743, 755], "4d": [309, 333, 334], "5d": [309, 334, 682], "emb": [309, 335], "51285338": [309, 335], "87183261": [309, 335], "2308116": [309, 335], "02733949e": [309, 336], "00j": [309, 336], "49660576e": [309, 336], "68178638e": [309, 336], "01j": [309, 336, 341], "98912367e": [309, 336], "21802426e": [309, 336, 341], "04549134e": [309, 336, 341], "82842712e": [309, 336, 341], "86902654e": [309, 336, 341], "25501143e": [309, 336, 341], "32978028e": [309, 336, 341], "52068201e": [309, 336, 341], "71158374e": [309, 336, 341], "generate_einsum_equ": 309, "get_interpolate_kernel": 309, "27279224e": [309, 340], "44232273e": [309, 340], "70464332e": [309, 340], "73454881e": [309, 340], "00902849e": [309, 340], "10039906e": [309, 340], "07022366e": [309, 340], "69506073": [309, 340], "93914604": [309, 340], "88008881": [309, 340], "18951607": [309, 340], "57439613": [309, 340], "15318303e": [309, 341], "15148591e": [309, 341], "19j": [309, 341], "25000000e": [309, 341], "35378602e": [309, 341], "02j": [309, 341], "65404249e": [309, 341], "17611649e": [309, 341], "24320230e": [309, 341], "79344813e": [309, 341], "22374531e": [309, 341], "45929364e": [309, 341], "14208718e": [309, 341], "07177031e": [309, 341], "what": [309, 342, 352, 700, 703, 704, 706, 712, 713, 718, 719, 722, 723, 725, 726, 728, 729, 730, 731, 732, 733, 737, 738, 740, 741, 742, 743, 745, 746, 749, 754, 755, 758], "indexerror": [309, 342, 352, 547, 608, 695, 724], "interp": [309, 736], "xp": [309, 343, 714], "fp": [309, 343], "nd": [309, 344], "bicubic_tensorflow": [309, 344, 736], "max_unpool1d": 309, "unpool": [309, 348], "pool_result": [309, 348], "unpool_result": [309, 348], "nearest_interpol": 309, "input_shap": [309, 349, 700], "window_shap": [309, 350], "pool_typ": [309, 350], "99038106j": [309, 352], "33012702": [309, 352], "23205081j": [309, 352], "33012702j": [309, 352], "superdiagon": [310, 355, 545, 575], "subdiagon": [310, 355, 545, 575], "eigendecomposit": [310, 357, 545, 577, 578], "qlq\u1d40": [310, 357, 545, 577, 578], "behav": [310, 357, 545, 577, 714, 724, 728, 730, 731, 732, 740, 754], "tridiagon": [310, 358], "38196602": [310, 358], "61803389": [310, 358], "35048741": [310, 358], "56710052": [310, 358], "06693714": [310, 358], "74234426": [310, 358], "56155282": [310, 358], "56155276": [310, 358], "82842714": [310, 358], "82842731": [310, 358], "necessarili": [310, 359, 715, 718], "random_st": [310, 360], "skip_matrix": [310, 361, 363], "seen": [310, 316, 361, 422, 691, 702, 703, 719, 720, 722, 724, 731, 733, 738, 740, 741, 759], "khatri_rao_product": [310, 361], "kronecker_product": [310, 363], "n_column": [310, 363], "nnmf": [310, 364], "hoi": [310, 369, 372], "determinist": [310, 370], "borrow": [310, 370, 713], "scikit": [310, 370, 703], "extmath": [310, 370], "py": [310, 370, 691, 700, 710, 711, 712, 714, 716, 719, 720, 721, 723, 724, 725, 726, 727, 731, 732, 733, 734, 738, 740, 742, 743], "mae": [311, 374], "log_poisson_loss": 311, "compute_full_loss": [311, 375, 683], "likelihood": [311, 375], "assumpt": [311, 375], "minu": [311, 375], "plai": [311, 375, 700, 711, 715, 721, 731, 733, 743, 753, 756], "factori": [311, 375], "stirl": [311, 375], "favor": [311, 375], "28402555": [311, 375], "03402555": [311, 375], "1573164": [311, 375], "3467": [311, 376], "0133": [311, 376], "0250": [311, 376], "0056": [311, 376], "0025": [311, 376], "0675": [311, 376], "hing": [311, 377], "6987": [311, 377], "1606": [311, 377], "3711": [311, 377], "4032": [311, 377], "6931": [311, 377], "whilst": [312, 380, 381, 382, 743, 748, 753], "ary3": [312, 382], "goe": [312, 384, 713, 716, 725, 730, 736], "mod": [312, 384, 714], "tall": [312, 389], "horizot": [312, 396], "shortcut": [312, 400, 711], "linear_ramp": [312, 400], "reflect": [312, 400, 706, 712, 715, 730, 733], "ramp": [312, 400], "mirror": [312, 400, 710, 753], "signatur": [312, 321, 400, 434, 703, 720, 721, 722, 723, 726, 730, 733, 734, 736, 750, 759], "padding_func": [312, 400], "iaxis_pad_width": [312, 400], "iaxi": [312, 400], "style": [312, 400, 552, 653, 712, 725, 753], "unalt": [312, 400], "put_along_axi": 312, "put": [312, 405, 700, 710, 733, 746, 759], "basic": [312, 407, 705, 710, 722, 733], "shrinkag": [312, 407], "elimin": [312, 411, 711], "consecut": [312, 411], "batch_mean": [315, 414, 416], "batch_var": [315, 414, 416], "running_vari": [315, 414, 416], "42857143": [315, 419], "5714286": [315, 419], "distrubut": [316, 420], "paramter": [316, 420], "multivari": [316, 422], "bayesian": [316, 422], "supposedli": [319, 426], "indirect": [319, 427], "secondari": [319, 427], "is_ivy_sparse_arrai": 320, "is_native_sparse_arrai": 320, "native_sparse_arrai": 320, "coo_indic": [320, 430], "crow_indic": [320, 430], "col_indic": [320, 430], "ccol_indic": [320, 430], "row_indic": [320, 430], "dense_shap": [320, 430], "native_sparse_array_to_indices_values_and_shap": 320, "nativesparsearrai": 320, "sparsearrai": 320, "linalg": [321, 434, 545, 591, 710, 730, 732], "aw": [321, 434, 703], "48447205": [321, 434], "c0": [321, 437], "ck": [321, 437], "i1": [321, 437], "c2": [321, 437], "nearest_jax": [321, 442], "idx": [444, 542, 700, 721, 740], "inspect": [444, 542], "retriev": [444, 542, 712, 731], "compile_on_next_step": [445, 542, 683, 684, 686, 742], "decor": [448, 542, 708, 714, 715, 718, 720, 721, 727, 730, 731, 732, 736], "recalcul": [448, 542], "my_sum": [448, 542], "val1": [448, 542], "val2": [448, 542], "cached_sum": [448, 542], "line_eq": [448, 542], "slp": [448, 542], "itc": [448, 542], "cached_line_eq": [448, 542], "0353": [449, 542], "424": [449, 542], "58": [449, 542], "176": [449, 542], "339": [449, 542], "271": [449, 542], "168": [449, 542], "391": [449, 542], "417": [450, 542], "583": [450, 542], "0667": [450, 542], "267": [450, 542], "131": [450, 542], "263": [450, 542], "394": [450, 542, 551, 649], "526": [450, 542], "788": [450, 542], "public": [451, 542, 719, 729, 740, 756], "default_str": [453, 542], "46999979": [454, 542], "66000009": [454, 542], "93000001": [454, 542], "29000092": [454, 542], "33999991": [454, 542], "6400001": [454, 542], "96000004": [454, 542], "36000013": [454, 542], "51999998": [454, 542], "67000008": [454, 542], "30000001": [454, 542, 553, 656], "suppos": [454, 542, 720, 733], "960": [454, 542], "1280": [454, 542, 700], "3600": [454, 542], "bottom": [454, 542, 710, 711, 719, 759], "h1": [454, 542], "w1": [454, 542], "40499985": [455, 542], "61000061": [455, 542], "incas": [459, 460, 542], "max_depth": [466, 542, 549, 636], "seen_set": [466, 542], "local_set": [466, 542], "thrown": [471, 542, 715, 721, 724, 725, 746], "ivyexcept": [471, 503, 542, 695, 721, 724, 728, 730, 731, 734], "allow_dupl": [481, 542], "best": [481, 542, 700, 705, 709, 710, 711, 712, 713, 719, 720, 724, 733, 734, 747, 756, 757], "o": [481, 542, 700, 711, 713, 719, 738, 747], "context": [482, 542, 711, 712, 716, 720, 721, 722], "fork": [482, 542, 705, 714, 719], "forkserv": [482, 542], "spawn": [482, 542], "consol": [484, 542, 712, 725, 733, 740], "garbag": [484, 542], "collector": [484, 542], "get_all_arrays_in_memori": [484, 542], "array_mod": [487, 510, 542, 735], "exept": [488, 542], "exception_trace_mod": [488, 511, 542, 735], "lenient": [489, 512, 542], "manag": [489, 512, 542, 700, 704, 705, 716, 720, 721, 730, 746, 755, 757], "inplace_mod": [489, 512, 542], "break": [489, 542, 700, 716, 720, 726, 734, 746], "strict": [489, 512, 542], "infus": [490, 542], "nestable_mod": [493, 515, 542, 735], "effeci": [494, 516, 542, 735], "wider": [494, 516, 542, 735, 759], "promtion": [494, 542], "precise_mod": [494, 516, 542, 735], "shape_array_mod": [496, 518, 542, 735], "show_func_wrapper_trace_mod": [497, 519, 542, 735], "tmp_dr": [498, 542], "temporari": [498, 520, 542, 710, 720, 735], "tmp_dir": [498, 520, 542, 735], "tmp": [498, 520, 542], "my_tmp": [498, 542], "49999999999975": [500, 542], "5015015015010504": [500, 542], "000444502911705e": [500, 542], "9999999999995j": [500, 542], "00000262": [501, 542], "15605032": [501, 542], "01208451j": [501, 542], "00048": [501, 542], "1296": [501, 542], "00864": [501, 542], "2048": [501, 542], "isn": [503, 542, 712, 728, 730, 741, 746, 755], "possibli": [505, 542, 733, 746], "100000023841858": [505, 542], "200000047683716": [505, 542], "299999952316284": [505, 542], "400000095367432": [505, 542], "599999904632568": [505, 542], "dictionai": [509, 542], "__name__": [509, 542, 700, 724], "hemant": [509, 542], "set_array_mod": [510, 542, 735], "unset_shape_array_mod": [510, 542], "previous": [511, 542, 691, 711, 716, 727, 729, 733, 738], "set_exception_trace_mod": [511, 542, 724], "set_inplace_mod": [512, 542], "set_min_bas": [513, 542], "set_min_denomin": [514, 542], "set_nestable_mod": [515, 542], "set_precise_mod": [516, 542], "set_queue_timeout": [517, 542], "set_shape_array_mod": [518, 542], "set_show_func_wrapper_trace_mod": [519, 542, 724], "set_tmp_dir": [520, 542], "my_dir": [520, 542], "451": [521, 542], "in_ax": [522, 542], "out_ax": [522, 542], "thereof": [522, 542], "summaris": [522, 542], "grad": [523, 543, 686, 700, 729, 741, 742, 743], "99999998": [523, 543], "09999998": [523, 543], "19999998": [523, 543], "00000001": [523, 543], "00300001": [523, 543], "00800001": [523, 543], "0125": [523, 543], "17294501": [523, 543], "15770318": [523, 543], "20863818": [523, 543], "90000075": [524, 543], "90000164": [524, 543], "9000032": [524, 543], "50000012e": [524, 543], "92558754": [524, 543], "92558694": [524, 543], "92558682": [524, 543], "92558861": [524, 543], "60000025e": [524, 543], "01024": [524, 543], "retain_grad": [525, 543], "xs_grad_idx": [525, 543, 729], "ret_grad_idx": [525, 543, 729], "func_ret": [525, 543, 729], "666666": [525, 543], "333332": [525, 543], "66666675": [525, 533, 543], "argnum": [526, 543], "grad_fn": [526, 533, 543, 741], "933": [526, 528, 543], "jacobian": [528, 543, 746, 753], "jac_fn": [528, 543], "639": [529, 543], "361": [529, 543], "value_grad": [533, 543], "42333412": [533, 543], "5333333": [533, 543], "93333334": [533, 543], "43333334": [533, 543], "0666666": [533, 543], "softsign": 534, "718281828459045": 535, "euler": [535, 745], "141592653589793": 535, "newaxi": 535, "cast_bool": 536, "cmp_i": 536, "cmp_isnot": 536, "for_loop": 536, "if_els": 536, "try_except": 536, "while_loop": 536, "asarray_handle_nest": 537, "asarray_infer_devic": 537, "asarray_infer_dtyp": 537, "asarray_inputs_to_native_shap": 537, "asarray_to_native_arrays_and_back": 537, "as_ivy_dtyp": [538, 731], "as_native_dtyp": 538, "check_float": 538, "closest_valid_dtyp": 538, "default_dtyp": [538, 720, 727], "dtype_bit": 538, "function_supported_dtyp": [538, 720, 733], "function_unsupported_dtyp": [538, 720], "infer_default_dtyp": 538, "invalid_dtyp": [538, 720], "is_hashable_dtyp": 538, "is_native_dtyp": 538, "promote_typ": [538, 720], "promote_types_of_input": [538, 720, 730], "type_promote_arrai": [538, 720], "unset_default_complex_dtyp": 538, "unset_default_float_dtyp": 538, "unset_default_int_dtyp": 538, "unset_default_uint_dtyp": 538, "valid_dtyp": 538, "defaultcomplexdtyp": 538, "defaultdtyp": 538, "defaultfloatdtyp": 538, "defaultintdtyp": 538, "defaultuintdtyp": 538, "as_ivy_dev": [539, 740], "clear_cached_mem_on_dev": 539, "dev_util": [539, 721], "function_supported_devic": 539, "function_unsupported_devic": 539, "get_all_ivy_arrays_on_dev": [539, 721], "gpu_is_avail": [539, 700], "handle_soft_device_vari": [539, 721], "num_cpu_cor": [539, 721], "num_gpu": [539, 721, 733], "num_ivy_arrays_on_dev": 539, "percent_used_mem_on_dev": 539, "print_all_ivy_arrays_on_dev": 539, "set_split_factor": [539, 724], "split_func_cal": 539, "total_mem_on_dev": [539, 721], "tpu_is_avail": 539, "unset_default_devic": [539, 721], "unset_soft_device_mod": [539, 721], "used_mem_on_dev": 539, "defaultdevic": [539, 721], "profil": 539, "save_dir": 539, "arg_info": 542, "arg_nam": 542, "cache_fn": [542, 727], "current_backend_str": [542, 733, 738, 740], "function_supported_devices_and_dtyp": 542, "function_unsupported_devices_and_dtyp": 542, "get_item": [542, 730], "get_referrers_recurs": 542, "inplace_arrays_support": 542, "inplace_variables_support": 542, "is_ivy_nested_arrai": 542, "isscalar": 542, "match_kwarg": 542, "num_arrays_in_memori": 542, "print_all_arrays_in_memori": 542, "set_item": 542, "to_ivy_shap": 542, "to_native_shap": 542, "try_else_non": 542, "unset_array_mod": [542, 735], "unset_exception_trace_mod": 542, "unset_inplace_mod": 542, "unset_min_bas": 542, "unset_min_denomin": 542, "unset_nestable_mod": 542, "unset_precise_mod": 542, "unset_queue_timeout": 542, "unset_show_func_wrapper_trace_mod": 542, "unset_tmp_dir": 542, "vmap": [542, 746, 753], "arraymod": 542, "precisemod": 542, "execute_with_gradi": [543, 700, 741, 742, 743, 746], "jac": 543, "value_and_grad": [543, 729], "conv": [544, 682, 736], "feature_group_count": [544, 557, 564, 565], "oiw": [544, 557, 558, 564], "oihw": [544, 557, 560, 564], "oidhw": [544, 557, 561, 562, 564], "dhwio": [544, 557, 558, 561, 562, 564], "258": [544, 559, 561, 563], "conv_general_dil": [544, 731], "conv_general_transpos": 544, "depthwis": [544, 566, 682], "overfit": [544, 567], "1428566": [544, 567], "49000001": [544, 567], "55599999": [544, 567], "21000004": [544, 567], "incom": [544, 568], "666": [544, 545, 568, 584], "4269": [544, 568], "911": [544, 568, 724], "157": [544, 568], "753": [544, 568], "101": [544, 545, 549, 568, 581, 630], "545": [544, 551, 568, 647], "547": [544, 568, 721], "124": [544, 568], "852": [544, 568], "963": [544, 568], "98495483": [544, 568], "0293808": [544, 568], "0159359": [544, 568], "74752808": [544, 568], "20942307": [544, 568], "108": [544, 555, 568, 665], "3205719": [544, 568], "long": [544, 569, 711, 712, 719, 720, 722, 724, 731, 738, 753], "short": [544, 569, 712, 720, 738, 742], "unrol": [544, 569, 738, 741], "lstm": [544, 569, 682, 738, 753], "multi": [544, 545, 570, 573, 682, 722, 737, 746, 749, 751, 753, 757], "head": [544, 570, 682, 700, 709, 711, 719, 731], "paper": [544, 570, 700, 704], "vaswani": [544, 570], "et": [544, 545, 570, 593], "al": [544, 570], "2017": [544, 570], "attend": [544, 570], "num_attention_head": [544, 570], "key_dim": [544, 570, 682], "value_dim": [544, 570, 682], "Then": [544, 570, 707, 710, 711, 712, 716, 717, 719, 725, 728, 730, 733, 734, 746], "query_dim": [544, 570], "measur": [544, 570, 682], "new_": [544, 570], "attention_weight": [544, 570], "alongsid": [544, 570, 703], "attenion_weight": [544, 570], "out_feat_dim": [544, 570], "23333359": [544, 571], "03946018": [544, 571], "0280633": [544, 571], "29981947": [544, 571], "29981089": [544, 571], "06345534": [544, 571], "9634552": [544, 571], "19336844": [544, 571], "09336829": [544, 571], "axisa": [545, 573], "axisb": [545, 573], "axisc": [545, 573], "293": [545, 574], "46997": [545, 574], "futur": [545, 578, 579, 700, 702, 704, 711, 712, 719, 720, 733, 734, 736, 740, 746, 759], "45033181e": [545, 579], "02829754e": [545, 579], "54220343e": [545, 579], "12647155e": [545, 579], "38447177e": [545, 579], "56155300e": [545, 579], "26794919": [545, 579], "7320509": [545, 579], "0012": [545, 581], "00342": [545, 581], "000565": [545, 581], "0104": [545, 581], "000981": [545, 581], "00282": [545, 581], "000766": [545, 581], "0322": [545, 581], "00237": [545, 581], "000151": [545, 581], "00101": [545, 581], "00019": [545, 581], "0214": [545, 581], "00171": [545, 581], "0107": [545, 581], "0167": [545, 581], "0472": [545, 581], "0536": [545, 581], "0177": [545, 581], "000429": [545, 581], "00762": [545, 581], "lu_factor": 545, "pivot": [545, 582], "lu": [545, 582], "frobeniu": [545, 584], "nuclear": [545, 584], "induc": [545, 584], "ranl": [545, 584], "47722558": [545, 584], "776": [545, 584], "6000004": [545, 584], "118": [545, 585], "moor": [545, 589], "penros": [545, 589], "deteremin": [545, 591], "logsabsdet": [545, 591], "although": [545, 591, 715, 718, 731, 736, 751, 753], "again": [545, 591, 703, 704, 712, 715, 716, 717, 718, 722, 724, 725, 730, 731, 733, 734, 736, 741, 743, 746, 758, 759], "subject": [545, 591], "solut": [545, 592, 700, 711, 712, 718, 720, 732, 733, 736, 751, 755], "ordin": [545, 592, 745], "usvh": [545, 593], "cetera": [545, 593], "86217213": [545, 594], "31816804": [545, 594], "615": [545, 594], "ss": [545, 594], "25994301": [545, 594], "16403675": [545, 594], "61529762": [545, 594], "51231241": [545, 594], "39777088": [545, 594], "15413129": [545, 594], "1029852": [545, 594], "01383495": [545, 594], "86647356": [545, 594], "7786541": [545, 594], "55970621": [545, 594], "16857576": [545, 594], "86412698": [545, 594], "37566757": [545, 594], "88477993": [545, 594], "95925522": [545, 594], "6444726": [545, 594], "54687881": [545, 594], "16134834": [545, 594], "35037804": [545, 594], "31025076": [545, 594], "35769391": [545, 594], "transposit": [545, 595], "success": [545, 555, 597, 669, 671, 703, 719], "0x": [545, 598], "Such": [545, 598, 727, 733], "progress": [545, 598, 711, 712, 743], "alexandr": [545, 598], "theophil": [545, 598], "9000001": [545, 600], "64158917": [545, 600], "skew": [545, 601], "6666193": [546, 602], "67164493e": [546, 602], "05471958e": [546, 602], "32684899e": [546, 602], "30496836e": [546, 602], "e501": [546, 602, 682], "05393649": [546, 602], "49992943": [546, 602], "83330965": [546, 602], "35667494": [546, 604], "79329094": [546, 604], "512926": [546, 604], "outsid": [547, 605, 616, 721, 727, 740, 758], "honor": [547, 612], "beyond": [547, 613, 723, 731, 759], "famili": [547, 616], "intxx": [547, 616], "floatxx": [547, 616], "construct": [547, 618, 682, 685, 686, 687, 738, 742, 743, 751, 753, 760], "rep": [547, 618], "fomaml_step": 548, "inner_cost_fn": [548, 621, 622, 623], "outer_cost_fn": [548, 621, 622], "inner_grad_step": [548, 621, 622, 623], "inner_learning_r": [548, 621, 622, 623], "inner_optimization_step": [548, 621, 622, 623], "inner_batch_fn": [548, 621, 622], "outer_batch_fn": [548, 621, 622], "average_across_step": [548, 621, 622], "inner_v": [548, 621, 622], "keep_inner_v": [548, 621, 622], "outer_v": [548, 621, 622], "keep_outer_v": [548, 621, 622], "return_inner_v": [548, 621, 622, 623], "num_task": [548, 621, 622, 623], "maml": [548, 621, 622], "task": [548, 621, 622, 623, 700, 705, 712, 731, 732, 745, 753, 759, 760], "0x7ff612c769d0": [548, 621, 622, 623], "maml_step": 548, "vanilla": [548, 622, 742, 753], "recev": [548, 622], "reptile_step": 548, "cost_fn": [548, 623], "reptil": [548, 623], "_variabl": [548, 623], "batch_in": [548, 623], "latent": [548, 623], "4485182": [548, 623], "139": [548, 623], "9569855": [548, 623], "9880483": [548, 623], "01766968": [548, 623], "02197957": [548, 623], "02197981": [548, 623], "all_nested_indic": 549, "include_nest": [549, 624], "_index": [549, 624, 635], "_base": [549, 624, 634, 635, 730], "extra_nest_typ": [549, 624, 625, 634, 635, 636], "themselv": [549, 624, 718, 720, 721, 723, 727, 731, 742, 750, 759], "far": [549, 624, 635, 721, 722, 739, 758, 759], "copy_nest": 549, "to_mut": [549, 625, 636], "deepli": [549, 625, 746, 753], "mutabl": [549, 625, 631, 632, 636, 641, 642, 716], "copied_nest": [549, 625], "1337": [549, 625, 636], "duplicate_array_index_chain": 549, "index_nest": [549, 727], "insert_into_nest_at_index": 549, "insert_into_nest_at_indic": 549, "onto": [549, 630, 636, 701, 702, 753], "special_squar": [549, 630], "6666666666666667": [549, 630], "special_pow": [549, 630], "linear_model": [549, 630], "map_nest_at_index": 549, "shallow": [549, 631, 632, 636, 641, 642], "_result": [549, 631, 641], "placehold": [549, 631, 636, 641, 682, 712, 715, 726, 748], "hh": [549, 631, 636], "map_nest_at_indic": 549, "ub": [549, 632], "tb": [549, 632], "multi_index_nest": 549, "nested_ani": 549, "check_nest": [549, 634, 635], "conditon": [549, 634, 635], "nested_argwher": 549, "stop_after_n_found": [549, 635], "nested_indic": [549, 635], "nested_map": [549, 721, 727], "_depth": [549, 636], "_tuple_check_fn": [549, 636], "_list_check_fn": [549, 636], "_dict_check_fn": [549, 636], "wherebi": [549, 636, 710, 750], "ah": [549, 636], "bh": [549, 636], "ch": [549, 636], "dh": [549, 636, 714], "eh": [549, 636], "gh": [549, 636, 711], "ih": [549, 636], "1338": [549, 636], "nested_multi_map": 549, "index_chain": [549, 637], "nest0": [549, 637], "ivy_arrai": [549, 637, 715, 731], "unappli": [549, 637], "prune_empti": 549, "prune_nest_at_index": 549, "prune_nest_at_indic": 549, "set_nest_at_index": 549, "set_nest_at_indic": 549, "111": [549, 642], "xyz": [549, 642], "pqr": [549, 642], "mini": [550, 643, 682, 685], "uniformli": [551, 645, 647], "22346112": [551, 646], "0922": [551, 646], "49671414": [551, 646], "1382643": [551, 646], "64768857": [551, 646], "5230298": [551, 646], "23415337": [551, 646], "23413695": [551, 646], "9213753": [551, 646], "12818667": [551, 646], "799": [551, 646], "469": [551, 646], "287": [551, 646], "0366": [551, 646], "26431865": [551, 647], "475": [551, 647], "878": [551, 647], "861": [551, 647], "929": [551, 647], "789": [551, 647], "519": [551, 647], "0435": [551, 647], "381": [551, 647], "4608004": [551, 647], "8458502": [551, 647], "67270088": [551, 647], "31128597": [551, 647], "zeroel": [552, 653], "major": [552, 653, 703, 720, 721, 732, 733, 746, 750, 753], "guarante": [553, 655, 657, 704, 715, 720, 730, 746], "aggreg": [553, 655, 719], "fourth": [553, 655], "1141": [553, 655], "8101": [553, 655], "9298": [553, 655], "8460": [553, 655], "2119": [553, 655], "3519": [553, 655], "6252": [553, 655], "4033": [553, 655], "7443": [553, 655], "2577": [553, 655], "3707": [553, 655], "0545": [553, 655], "3238": [553, 655], "5944": [553, 655], "0775": [553, 655], "4327": [553, 655], "62519997": [553, 655], "40329999": [553, 655], "59439999": [553, 655], "74430001": [553, 655], "81010002": [553, 655], "84600002": [553, 655], "92979997": [553, 655], "einstein": [555, 665, 694], "117": [555, 665], "sentinel": [555, 666, 668], "90000004": [555, 667], "intend": [555, 671, 681, 714, 726, 729, 751, 753, 757, 758], "07472222": [555, 672], "00666667": [555, 672], "08966666": [555, 672], "simplicit": [556, 673, 674], "meta": [621, 622, 623, 715, 734, 753], "geglu": 678, "leakyrelu": 678, "logsoftmax": 678, "moduleconvert": [679, 684], "from_flax_modul": 679, "native_modul": 679, "params_fx": 679, "rng_seed": 679, "constructor_arg": 679, "constructor_kwarg": 679, "instance_arg": 679, "instance_kwarg": 679, "flax": [679, 704, 743, 746, 753], "from_haiku_modul": 679, "params_hk": 679, "from_keras_modul": 679, "from_paddle_modul": 679, "paddl": [679, 691, 710, 711, 720], "from_torch_modul": 679, "dedic": [679, 726, 736, 740, 742], "to_ivy_modul": [679, 743], "native_module_class": 679, "modulehelp": [680, 684], "check_submod_ret": 680, "expected_submod_ret": [680, 684], "get_mod_kei": 680, "top_mod": 680, "explicit": [680, 711, 718, 720, 729, 730, 731, 732, 738, 746, 753], "mod_depth": 680, "mod_height": 680, "mod_with_top_mod_key_chain": 680, "flatten_key_chain": 680, "iimedi": 680, "parent": [680, 710, 719, 740], "show_mod_in_top_mod": 680, "upper_depth": 680, "lower_depth": 680, "coverag": [680, 720, 733], "prompt": [680, 710, 712], "show_structur": 680, "this_repr": 680, "show_v_in_top_v": 680, "perspect": 680, "top_v": 680, "sub_mod": 680, "show_v": 680, "comopos": 680, "enumer": [680, 700], "track_submod_call_ord": [680, 684], "track_submod_ret": [680, 684], "v_with_top_v_key_chain": 680, "create_vari": [681, 742], "var_shap": [681, 742], "fan_out": [681, 742], "fan_in": [681, 742], "rectangular": 681, "firstlayersiren": 681, "siren": 681, "distribt": 681, "glorotuniform": [681, 682, 742], "glorot": 681, "xavier": 681, "neuron": 681, "w_1x_1": 681, "w_2x_2": 681, "w_nx_n": 681, "w_i": 681, "vanish": 681, "explod": [681, 701, 702], "big": [681, 705, 746, 753], "pick": 681, "abstract": [681, 686, 702, 718, 720, 730, 731, 733, 736, 742, 746, 751, 753, 755, 756, 760], "kaimingnorm": 681, "fan_mod": [681, 742], "kaim": 681, "he": 681, "center": 681, "negative_slop": 681, "fan": 681, "propog": 681, "fan_sum": [681, 742], "proport": 681, "Ones": 681, "randomnorm": 681, "stddev": 681, "w0": 681, "gain": [681, 712, 714, 737, 742, 753], "wlim": 681, "predefin": 681, "initialz": 681, "fan_avg": 681, "adaptiveavgpool1d": 682, "adaptiveavgpool2d": 682, "avgpool1d": 682, "implicit": [682, 718, 723, 731, 733, 738, 753], "avgpool2d": 682, "avgpool3d": 682, "input_channel": [682, 700, 738, 742], "output_channel": [682, 700, 742], "filter_s": 682, "weight_initi": [682, 742], "bias_initi": [682, 742], "conv1dtranspos": 682, "filter_shap": 682, "conv2dtranspos": 682, "conv3dtranspos": 682, "depthwiseconv2d": 682, "num_channel": 682, "bernoul": 682, "num_embed": 682, "embedding_dim": 682, "padding_idx": 682, "lookup": 682, "num_embeddingss": 682, "whenev": [682, 712, 716, 719, 720, 724, 730, 733, 735, 741], "renorm": 682, "insensit": 682, "num_lay": 682, "return_sequ": 682, "return_st": 682, "get_initial_st": 682, "connect": [682, 703, 711, 742, 743, 751], "maxpool1d": 682, "maxpool2d": [682, 700], "maxpool3d": 682, "multiheadattent": 682, "embed_dim": 682, "head_dim": 682, "dropout_r": 682, "use_proj_bia": 682, "attention_ax": 682, "build_mod": [682, 683, 684], "on_init": [682, 684], "parallel": [682, 717, 753, 757, 758], "binarycrossentropyloss": 683, "store_var": [683, 684], "fallback_to_non_compil": [683, 684, 686], "fall": [683, 684, 686, 710, 720, 737], "with_partial_v": [683, 684], "crossentropyloss": 683, "logpoissonloss": 683, "modulemeta": 684, "submod_depth": 684, "submods_to_track": 684, "varibl": 684, "temporarili": [684, 708, 714], "from_cal": 684, "trigger": [684, 710, 725], "successfulli": [684, 711, 715], "built_": 684, "compile_kwarg": 684, "_unified_ivy_graph": 684, "_call": 684, "eval": 684, "register_buff": 684, "var_nam": 684, "save_weight": 684, "weights_path": 684, "show_graph": 684, "randomness_factor": 684, "save_to_disk": 684, "notebook": 684, "with_edge_label": 684, "with_arg_label": 684, "with_output_label": 684, "output_connected_onli": 684, "highlight_subgraph": 684, "fname": [684, 741], "batchnorm2d": 685, "num_featur": 685, "affin": 685, "track_running_stat": 685, "trail": 685, "layernorm": 685, "normalized_shap": 685, "elementwise_affin": 685, "set_stat": [686, 742], "init_on_first_step": 686, "ignore_miss": 686, "privat": [686, 731, 733], "_step": [686, 742], "sgd": [686, 753], "stochast": [686, 753], "sub_modul": 687, "check_al": 688, "messag": [688, 695, 699, 703, 711, 712, 719, 722, 724, 725, 731, 738, 740], "check_all_or_any_fn": 688, "check_ani": 688, "check_dev_correct_format": 688, "check_dimens": 688, "check_elem_in_list": [688, 727, 730, 731], "elem": 688, "check_equ": [688, 731], "check_exist": 688, "check_fals": 688, "check_fill_value_and_dtype_are_compat": [688, 734], "check_gather_input_valid": 688, "check_gather_nd_input_valid": 688, "check_great": 688, "allow_equ": [688, 724], "check_inplace_sizes_valid": [688, 730], "check_isinst": 688, "allowed_typ": 688, "check_kernel_padding_s": 688, "padding_s": 688, "check_less": [688, 724], "check_one_way_broadcast": 688, "check_same_dtyp": 688, "check_shapes_broadcast": 688, "check_tru": 688, "check_unsorted_segment_min_valid_param": 688, "ast_help": 690, "importtransform": 690, "nodetransform": 690, "impersonate_import": 690, "tree": [690, 706, 720], "local_ivy_id": 690, "visit_import": 690, "visit_importfrom": 690, "ivyload": 690, "loader": [690, 700, 741, 746], "exec_modul": 690, "ivypathfind": 690, "metapathfind": 690, "find_spec": 690, "fullnam": 690, "contextmanag": 691, "choose_random_backend": 691, "convert_from_numpy_to_target_backend": 691, "variable_id": 691, "numpy_obj": 691, "convert_from_source_backend_to_numpi": 691, "current_backend": [691, 710, 724, 727, 732, 734, 738], "global_backend": 691, "fn_name_from_version_specific_fn_nam": 691, "prevent_access_loc": 691, "previous_backend": [691, 716], "unset": [691, 716, 738], "op": [691, 734, 738, 746], "eagertensor": [691, 732], "subsequ": [691, 711, 715, 719, 720, 722, 726, 727, 730, 733, 742, 754], "Or": [691, 700, 707, 730, 741], "jaxlib": [691, 711, 715, 720, 721, 726, 734, 738, 740], "xla_extens": [691, 715, 720, 721, 726, 734, 738, 740], "arrayimpl": 691, "set_backend_to_specific_vers": 691, "set_jax_backend": 691, "set_mxnet_backend": 691, "mxnet": [691, 703, 710, 711, 760], "mx": 691, "set_numpy_backend": 691, "set_paddle_backend": 691, "set_tensorflow_backend": 691, "set_torch_backend": 691, "unset_backend": [691, 716], "with_backend": 691, "sub_backend_handl": 692, "available_sub_backend": 692, "clear_sub_backend": 692, "find_available_sub_backend": 692, "sub_backends_loc": 692, "set_sub_backend": 692, "sub_backend_str": 692, "unset_sub_backend": 692, "dynamic_import": 693, "import_modul": [693, 738], "packag": [693, 700, 706, 708, 711, 719, 731, 746, 747, 753, 755], "einsum_pars": 694, "convert_interleaved_input": 694, "interleav": 694, "convert_subscript": 694, "old_sub": 694, "symbol_map": 694, "subscript": 694, "oe": 694, "ellipsi": 694, "find_output_shap": 694, "find_output_str": 694, "canon": 694, "gen_unused_symbol": 694, "symbol": [694, 710, 711, 753, 754], "abd": 694, "get_symbol": 694, "letter": 694, "resort": 694, "unicod": 694, "charact": [694, 703, 731], "chr": 694, "192": 694, "surrog": 694, "\u0155": 694, "20000": 694, "\u4eac": 694, "has_valid_einsum_chars_onli": 694, "einsum_str": 694, "abaz": 694, "\u00f6ver": 694, "is_valid_einsum_char": 694, "\u01f5": 694, "legalise_einsum_expr": 694, "reproduct": 694, "pars": [694, 717, 722, 746], "intak": 694, "contract_path": 694, "parse_einsum_input": 694, "einsum_eqn": 694, "legalis": 694, "legalise_einsum_eqn": 694, "za": 694, "xza": 694, "xz": 694, "possibly_convert_to_numpi": 694, "thing": [694, 702, 703, 704, 709, 710, 711, 712, 716, 731, 733, 736, 740, 741, 753], "everyth": [694, 700, 704, 710, 711, 712, 713, 719, 722, 730, 731, 732, 733, 739, 746, 747], "myshap": 694, "__main__": 694, "0x10f850710": 694, "inplaceupdateexcept": 695, "include_backend": [695, 724], "invalidbackendexcept": 695, "ivyattributeerror": [695, 724], "attributeerror": [695, 724, 740], "ivybroadcastshapeerror": [695, 724], "ivydeviceerror": 695, "ivydtypepromotionerror": [695, 724], "ivyerror": [695, 700, 724], "ivyindexerror": [695, 724], "ivynotimplementedexcept": [695, 724], "notimplementederror": 695, "ivyvalueerror": [695, 724], "handle_except": [695, 726, 728], "add_array_spec": 696, "fn_array_spec": 696, "set_logging_mod": 697, "debug": [697, 711, 712, 718, 719, 729, 733, 736, 741, 753], "info": [697, 700, 717, 723, 725], "unset_logging_mod": 697, "recent": [697, 702, 703, 711, 712, 733], "print_stat": 698, "viz": 698, "visual": [698, 700, 711, 731, 733, 746, 753, 755, 758], "snakeviz": 698, "bonu": 698, "cprofil": 698, "cprint": [699, 738], "straight": [700, 719, 731, 733, 740], "awai": [700, 751, 753], "dive": [700, 705, 707, 709, 710, 712, 714, 718, 720, 725, 732, 737, 740, 741, 746, 759], "grow": [700, 753], "guid": [700, 705, 710, 711, 712, 717, 725, 731, 759], "own": [700, 703, 704, 711, 714, 719, 720, 723, 724, 730, 731, 734, 738, 746, 748, 749, 752, 753, 758, 759], "variou": [700, 712, 714, 719, 720, 723, 724, 726, 728, 729, 731, 732, 733, 745, 747, 748, 749, 751, 752, 753, 756, 759], "perk": [700, 715, 718], "essenti": [700, 702, 703, 710, 716, 718, 721, 722, 727, 730, 731, 732, 759], "mainli": [700, 710, 713, 729, 731, 733, 739, 741, 748, 753], "handler": [700, 737, 739, 743, 748], "behind": [700, 713, 726, 733, 737, 739], "scene": [700, 701, 702, 713, 737, 739, 753], "facilit": 700, "agnost": [700, 715, 726, 738, 740, 743, 746, 759, 760], "mse_loss": 700, "jax_ms": 700, "tf_mse": 700, "np_mse": 700, "torch_ms": 700, "regressor": 700, "input_dim": 700, "output_dim": 700, "_build": 700, "linear0": [700, 741, 742], "linear1": [700, 741, 742], "_forward": [700, 723, 738, 741, 742], "easili": [700, 703, 711, 715, 719, 731, 736, 741, 742, 743, 746, 753, 759, 760], "favorit": 700, "n_training_exampl": 700, "loss_fn": [700, 741, 742, 743], "epoch": 700, "5f": 700, "finish": [700, 705, 710, 711, 713], "usabl": [700, 726, 734], "topic": [700, 728, 740, 753], "mechan": [700, 719, 744, 746], "vision": [700, 706, 744, 749, 759], "robot": [700, 744], "reinforc": [700, 745], "gym": 700, "builder": [700, 707, 744, 746, 748], "trainer": [700, 704, 744, 746, 760], "highli": [700, 753], "flexibl": [700, 718, 720, 726, 729, 734, 736, 753], "everyon": [700, 704, 705, 710, 711, 712, 746], "plan": [700, 745, 747], "interoper": [700, 703, 750, 751, 753, 756], "easiest": [700, 707, 711, 747], "command": [700, 707, 711, 714, 717, 719, 725, 747], "python3": [700, 706, 711, 712], "pre": [700, 706, 708, 710, 733, 743, 746, 747, 753], "pull": [700, 704, 705, 706, 710, 711, 714, 722, 725, 734, 736, 746, 747], "unifyai": [700, 706, 707, 711, 712, 717, 747], "sweat_smil": 700, "git": [700, 706, 707, 709, 711, 712, 714, 717, 719, 725, 733, 747], "clone": [700, 706, 707, 712, 747], "com": [700, 706, 707, 711, 712, 714, 717, 719, 720, 747], "cd": [700, 706, 707, 711, 712, 747], "page": [700, 710, 711, 712, 717, 719, 739, 740, 743, 744, 747], "video": [700, 705, 711, 712, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 747, 751], "tutori": [700, 712, 731, 747], "quit": [700, 708, 712, 715, 722, 723, 727, 728, 733, 736, 753, 759], "lot": [700, 703, 704, 719, 720, 728, 733, 746, 752], "jax_fn": 700, "jax_x": 700, "torch_x": 700, "torch_fn": 700, "focus": [700, 734, 745, 751, 752, 753, 759, 760], "architectur": [700, 711, 743, 746, 751, 752, 753, 756, 757, 758], "orient": [700, 745], "contributor": [700, 705, 708, 710, 711, 712, 731, 737, 753], "nuanc": 700, "background": [700, 711, 717, 753, 755], "contextualis": 700, "problem": [700, 703, 712, 714, 715, 716, 721, 731, 740, 749, 755, 759], "explos": [700, 701, 703], "why": [700, 701, 703, 712, 730, 740], "adher": [700, 702, 703, 714, 720, 723, 726, 736, 738, 743, 749, 750, 759], "lastli": [700, 715], "paint": [700, 702, 738], "pictur": [700, 702, 710, 738], "role": [700, 712, 721, 731, 739, 754, 756, 760], "wide": [700, 712, 733, 751, 753], "demo": [700, 706, 745], "showcas": [700, 745], "shorter": [700, 740], "ensp": 700, "eff_encod": 700, "efficientnet_v2": 700, "efficientnetv2b0": 700, "include_top": 700, "imagenet": 700, "torch_eff_encod": 700, "customiz": [700, 717], "script": [700, 706, 711, 712, 719, 722, 738, 746, 753], "deepmind_perceiver_io": 700, "perceiver_backbon": 700, "dummy_input": 700, "backbon": [700, 738, 741], "perceiverioclassifi": 700, "max_pool": 700, "1024": 700, "sm_framework": 700, "segmentation_model": 700, "sm": 700, "torch_sm": 700, "metric": [700, 746], "iou_scor": 700, "rax": 700, "torch_rax": 700, "poly1_softmax_loss": 700, "madmom": 700, "madmon": 700, "torch_madmom": 700, "freq": 700, "audio": 700, "hz2midi": 700, "reduce_mean": [700, 741, 742, 743], "torch_loss": 700, "output_dens": 700, "maxpooling1d": 700, "pool_siz": 700, "tf_kornia": 700, "sharp": 700, "tf_rax": 700, "tf_madmom": 700, "tf_loss": 700, "hk_eff_encod": 700, "dummy_x": 700, "jax_sm": 700, "jax_madmom": 700, "jax_loss": 700, "jax_enable_x64": 700, "np_kornia": 700, "np_sm": 700, "np_rax": 700, "np_loss": 700, "yourself": [700, 710, 712, 725, 733, 736, 745], "anyon": [700, 703, 705, 712, 719, 746, 759], "classif": [700, 753], "ivynet": 700, "h_w": 700, "extractor": 700, "image_height": 700, "image_width": 700, "favourit": [700, 711], "pure": [700, 723, 726, 731, 736, 740, 743, 746, 753, 759, 760], "helper": [700, 717, 720, 724, 741, 748], "generate_batch": 700, "dataset_s": 700, "y_train": 700, "num_correct": 700, "y_pred": 700, "hyperparam": 700, "num_epoch": 700, "model_nam": 700, "epoch_loss": 700, "running_loss": 700, "training_accuraci": 700, "train_loss": 700, "train_correct": 700, "train_loop": 700, "tqdm": 700, "xbatch": 700, "ybatch": 700, "ybatch_encod": 700, "loss_prob": 700, "batch_loss": 700, "set_descript": 700, "set_postfix": 700, "accuracy_percentag": 700, "naverag": 700, "6f": 700, "plot": [700, 753], "_train_summari": 700, "csv": 700, "writer": 700, "writerow": 700, "prepar": [700, 719], "folder": [700, 706, 711, 712, 714, 717, 719, 727, 731, 733, 734, 735], "believ": [700, 703, 712], "feedback": [700, 719], "welcom": [700, 705, 711, 712], "appreci": 700, "amaz": 700, "acceler": [700, 731, 751, 755, 756, 757, 758], "journei": [700, 705], "achiev": [700, 719, 720, 727, 728, 733, 736, 741, 743, 748], "ambiti": 700, "season": 700, "perfect": [700, 745], "idea": [700, 704, 706, 710, 734, 739, 745, 752], "fellow": 700, "twitter": 700, "sneak": 700, "peek": 700, "certainli": [700, 703, 759], "great": [700, 703, 704, 712, 733, 738, 740, 759], "stai": [700, 719], "credit": 700, "accompani": 700, "articl": [700, 725], "lenton2021ivi": 700, "titl": [700, 710, 712, 717], "templat": [700, 717, 723, 733], "inter": [700, 732], "author": [700, 710, 712, 751, 755], "lenton": 700, "daniel": 700, "pardo": 700, "fabio": 700, "falck": 700, "fabian": 700, "jame": 700, "stephen": 700, "clark": 700, "ronald": 700, "journal": 700, "arxiv": 700, "preprint": 700, "2102": 700, "02886": 700, "year": [700, 702, 704, 714, 746, 753], "huge": [701, 703, 719, 741, 753, 759], "collabor": [701, 702, 703], "consortium": [701, 703], "grown": 702, "consider": [702, 710, 722, 726, 736, 750, 751], "especi": [702, 711, 716, 753], "rapidli": 702, "repo": [702, 706, 709, 712, 714, 717, 719, 720, 732, 733], "wonder": [702, 704, 740], "evolv": [702, 753], "shareabl": 702, "hinder": [702, 726], "outdat": 702, "matter": [702, 722], "month": [702, 711], "rigor": [702, 733], "newest": 702, "softwar": [702, 703, 711, 712, 751, 756, 757, 758], "rapid": [702, 703, 711, 753], "prototyp": [702, 753], "vital": [702, 743], "signific": [702, 703, 735, 746, 753], "bottleneck": 702, "quickli": [702, 704, 711, 712, 719, 741, 742, 753, 760], "obsolet": [702, 704], "constantli": [702, 736], "invent": 702, "wheel": 702, "simultan": [702, 704], "modern": [702, 703, 729, 758], "scalabl": [702, 738, 758, 759], "univers": [702, 731], "languag": [702, 704, 731, 738, 748, 751, 754, 756, 757, 758, 759], "front": [702, 731, 737, 738, 741, 751, 753], "runner": 702, "littl": [702, 740, 755], "principl": [702, 751, 753, 756], "almost": [702, 709, 718, 732, 739, 741], "syntax": [702, 703, 720, 753], "unsurprisingli": [702, 722], "fundament": [702, 719, 731, 736, 738, 753], "2006": 702, "cloth": 702, "central": [703, 710, 725, 736, 759], "forgiven": 703, "eyebrow": 703, "somehow": 703, "strong": [703, 746, 753], "industri": [703, 753, 755], "funni": 703, "comic": 703, "strip": 703, "easi": [703, 711, 712, 715, 716, 718, 727, 729, 732, 733, 736, 751, 753, 759, 760], "charger": 703, "instant": 703, "mandat": [703, 720, 730, 733, 734], "adopt": [703, 712, 715, 726, 736, 752, 753, 758], "despit": [703, 718, 720, 721, 732, 738, 750, 753], "bring": [703, 714, 733, 738, 739, 748], "benefit": [703, 704, 711, 715, 718, 730, 736, 740, 741, 746, 751, 755, 758], "unrel": [703, 712], "contrari": 703, "bumpi": 703, "road": 703, "allud": [703, 741], "technologi": [703, 751, 755], "thank": [703, 741], "bio": [703, 711], "pcie": 703, "motherboard": 703, "raid": 703, "storag": [703, 741], "virtual": [703, 706, 712, 731, 756, 757], "bluetooth": 703, "wireless": 703, "exchang": [703, 709, 749, 751], "btx": 703, "sata": 703, "host": [703, 707, 719, 746, 758], "websit": [703, 711, 714], "tcp": 703, "ip": 703, "commun": [703, 705, 710, 711, 712, 746, 752, 753, 755], "smtp": 703, "send": [703, 758], "gmail": [703, 719], "outlook": 703, "pop": [703, 711], "email": [703, 719], "live": [703, 704, 716, 717, 720, 749, 751], "did": [703, 710, 717, 743, 759], "aris": [703, 720, 725, 746], "substanti": [703, 712, 715, 720, 733, 753], "innov": 703, "growth": [703, 756], "necess": 703, "parti": [703, 717, 746, 752, 753, 759], "engag": [703, 705, 712], "regard": [703, 709, 718, 731, 732, 736], "2015": [703, 753], "frame": [703, 745, 753], "matur": [703, 746, 753], "preced": [703, 742], "aros": 703, "effort": [703, 705, 710, 746, 749, 753, 759], "stage": [703, 705, 712, 713, 714, 717, 733, 753], "mission": [703, 755], "At": [703, 710, 711, 712, 714, 733, 734, 753], "ourselv": [703, 759], "quansight": [703, 759], "compani": [703, 749], "organ": [703, 715, 718, 727, 731, 734, 748], "panda": 703, "scipi": [703, 710, 755, 760], "conda": [703, 711, 755], "apach": [703, 755, 759], "onnx": [703, 751, 759], "jupyt": [703, 755], "cupi": [703, 753, 760], "net": [703, 704, 738, 743], "sympi": 703, "modin": 703, "spyder": 703, "googl": [703, 719], "octoml": [703, 759], "sponsor": 703, "lg": 703, "electron": 703, "shaw": 703, "intel": [703, 711, 751, 758], "promis": 703, "pursuit": 703, "unif": [703, 705, 740, 749, 759], "clearli": [703, 710, 712, 722, 732, 733, 757], "thought": [703, 711, 712, 726, 751], "care": [703, 712, 721, 731, 736, 743], "gone": [703, 737], "excit": [703, 705, 713], "complianc": 703, "hope": [703, 746, 759], "suit": [703, 711, 713, 714, 719, 733, 741, 745, 748, 753, 759], "motiv": [703, 740], "convinc": 703, "celebr": 703, "encourag": [703, 725, 745, 746], "foundat": [703, 756], "perfectli": 704, "happi": [704, 711, 746], "abund": 704, "better": [704, 706, 710, 713, 731, 732, 734, 736, 737, 740, 741, 742, 756], "streamlin": [704, 756], "workflow": [704, 710, 712, 716, 720, 729, 731, 741, 744, 748, 752, 759, 760], "week": [704, 712], "sai": [704, 710, 711, 728, 740], "deepmind": 704, "releas": [704, 710, 711, 720, 734, 736, 746, 753, 759], "awesom": 704, "love": 704, "perceiverio": 704, "slew": 704, "rush": 704, "inevit": [704, 754], "often": [704, 709, 714, 724, 726, 727, 731, 733, 746, 754, 757, 760], "erron": 704, "poor": 704, "repositori": [704, 706, 707, 711, 712, 713, 714, 717], "confus": [704, 720, 724, 730, 736, 748], "hour": [704, 719], "spent": 704, "spin": 704, "discuss": [704, 710, 712, 717, 720, 721, 730, 731, 733, 736, 739, 740, 741, 746, 749, 754], "sake": 704, "few": [704, 709, 710, 712, 718, 720, 721, 726, 727, 729, 730, 732, 733, 736, 738, 739, 740, 741, 742, 744, 753, 755], "wouldn": 704, "nice": [704, 733, 753], "frantic": 704, "port": 704, "lucid": 704, "honk": 704, "understand": [704, 706, 708, 709, 710, 711, 712, 713, 714, 717, 722, 723, 726, 732, 737, 749, 759], "hasn": 704, "spend": [704, 753], "torchvis": 704, "sonnet": 704, "statu": [704, 710, 719, 725], "quo": 704, "dopamin": 704, "ignit": 704, "catalyst": 704, "lightn": 704, "fastai": 704, "trax": [704, 743], "objax": [704, 743], "offer": [704, 731, 742, 753, 759, 760], "strongli": [705, 711, 731, 759, 760], "skill": [705, 755], "veteran": 705, "beginn": [705, 753], "aspect": [705, 729, 741, 753], "board": [705, 717], "local": [705, 706, 711, 714, 717, 727, 732, 733], "resourc": [705, 710, 711, 719], "setup": [706, 711, 712, 717, 719], "mech": [706, 707], "grasp": [706, 731], "dir": [706, 741], "mutual": [706, 718, 727], "venv": 706, "ivy_dev": [706, 711, 712], "bat": [706, 711, 712], "mac": [706, 711, 712], "linux": [706, 711, 712, 756, 758], "instal": [706, 707, 711, 712, 716, 717, 725, 745], "edit": [706, 710, 711, 712, 725], "pip": [706, 708, 711, 717, 725, 745], "immedi": [706, 711], "ivy_robot": [706, 745], "docker": [706, 708, 709], "desktop": [706, 711], "my": [706, 719], "mount": [706, 707, 712], "rm": [706, 707, 712], "pwd": [706, 707], "pycharm": [706, 708, 733], "vscode": [706, 711], "devcontain": [706, 711], "remot": [706, 711, 714, 725], "codespac": 706, "good": [706, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 736, 738, 739, 742], "commit": [706, 708, 710, 714, 722, 733], "make_doc": 707, "sh": [707, 711, 712, 714, 719], "ssh": [707, 719], "make_docs_without_dock": [707, 717], "sphinx": [707, 717], "aim": [708, 712, 714, 728, 731, 733, 737, 751, 753, 756], "assist": 708, "navig": [708, 711, 712, 713], "actual": [708, 712, 713, 719, 727, 728, 730, 731, 732, 733, 736, 737, 742, 746, 754, 759], "runtimeerror": 708, "logaddexp2_cpu": 708, "falsifi": [708, 714, 733], "test_logaddexp2": 708, "backend_fw": [708, 732], "on_devic": [708, 732], "dtype_and_x": [708, 732, 733], "test_flag": [708, 732, 733], "functiontestflag": 708, "ground_truth_backend": [708, 732], "num_positional_arg": [708, 732, 733], "with_out": [708, 732, 733], "instance_method": [708, 733], "test_gradi": [708, 733], "test_compil": 708, "as_vari": [708, 732, 733], "fn_name": [708, 716, 732, 733], "reproduce_failur": [708, 714, 728, 733], "axicy2bkaamobaar2waaaacvaai": 708, "assertionerror": [708, 714, 724, 732, 733], "25830078125": 708, "258544921875": 708, "test_acosh": 708, "axicy2baabyqwqgiaabdaai": 708, "instabl": [708, 720], "41421356": 708, "41421356e": 708, "34078079e": 708, "154": 708, "test_ab": [708, 711, 733], "000j": 708, "154j": 708, "axicy2zkyaiibibgziaaxqhexsaab7juqaaamteazq": 708, "deal": [708, 721, 727, 729, 731, 746], "experiment": [708, 712, 720, 731, 734, 738, 753], "climb": 709, "steep": 709, "curv": 709, "realpython": 709, "pyn": 709, "platform": [709, 751, 755, 757], "stuck": [709, 710], "spell": 709, "though": [709, 710, 712, 720, 721, 723, 727, 730, 731, 736, 741, 746], "sound": [709, 719, 737], "peopl": [709, 711, 712, 713, 753, 755], "action": [709, 719, 722, 725, 733], "frequent": [710, 712, 716, 753], "outlin": [710, 711, 712, 713, 718, 720, 723, 727, 730, 731, 733], "broad": [710, 755], "individu": [710, 712, 714, 716, 720, 727, 731, 753, 756, 759, 760], "explan": [710, 711, 712, 718, 723, 726, 731, 734, 740], "focu": [710, 729, 751, 752, 755, 760], "pypi": [710, 711, 734, 746], "familiar": [710, 711], "hypothesi": [710, 712, 714, 719, 728], "fail": [710, 711, 712, 714, 719, 720, 722, 725, 728, 730, 731, 732], "sure": [710, 711, 712, 714, 719, 724, 731, 732, 733, 736, 747], "aforement": 710, "categori": [710, 714, 715, 718, 720, 724, 731, 734, 737], "arraywithelementwis": [710, 715, 740], "containerwithmanipul": 710, "thorough": [710, 723, 726, 733], "comment": [710, 711, 712, 714, 720, 725, 731, 736], "add_reformatting_checklist_": 710, "category_nam": [710, 720, 721, 723, 726, 727], "pr": [710, 712, 714, 725, 731, 732, 733], "autom": [710, 719, 725, 733, 748, 755], "bot": [710, 725], "markdown": [710, 717], "patient": [710, 711], "emoji": 710, "legend": 710, "mark": [710, 712, 714, 733, 738], "checkbox": [710, 711], "proce": [710, 711], "elabor": 710, "struggl": 710, "assigne": 710, "status": 710, "refrain": 710, "mindspor": 710, "subsect": [710, 711, 712, 714, 719], "verifi": [710, 720, 721, 731, 733, 734], "assess": [710, 736], "merg": [710, 712, 714, 719, 731, 753], "composition": 710, "pend": 710, "helpfulli": [710, 736, 751], "problemat": [710, 711], "unimpl": 710, "issue_link": 710, "alias": [710, 731, 732], "alias_nam": 710, "push": [710, 712, 714, 732, 733, 759], "liner": 710, "meanwhil": [710, 719], "reselect": 710, "placement": 710, "categoris": [710, 714, 731], "faithfulli": 710, "creation_routin": [710, 732], "indexing_routin": 710, "ma": 710, "manipulation_routin": 710, "mathematical_funct": [710, 731], "sorting_searching_count": 710, "ufunc": [710, 731], "matrix_and_vector_product": 710, "matrix_eigenvalu": 710, "norms_and_other_numb": 710, "solving_equations_and_inverting_matric": 710, "seem": [710, 711, 736, 742, 743, 746, 753], "namespac": [710, 720, 728, 731, 732, 734, 738, 743], "gleam": 710, "uncom": 710, "test_numpy_inn": 710, "ivy_test": [710, 711, 712, 714, 717, 719, 732], "test_ivi": [710, 711, 712, 717, 719, 732, 733], "test_frontend": [710, 719, 732], "unsur": [710, 733], "explor": [710, 711, 712, 720, 736, 739, 743, 745, 753, 756], "confirm": 710, "worri": [710, 711, 725], "readi": [710, 711], "analyz": [710, 748], "relevant_submodul": 710, "strategi": [710, 732], "invit": [710, 731, 736], "roadmap": [710, 719], "think": [710, 712, 719, 722, 736, 754], "deem": [710, 731], "subtask": 710, "defer": [710, 715, 720, 721, 727, 730, 731, 733, 759], "clearer": [710, 724, 732, 741], "backend_nam": [710, 716, 720, 721, 723, 726, 727, 728], "approach": [710, 711, 712, 715, 718, 720, 721, 727, 731, 733, 734, 736, 740, 741, 746, 750, 757, 759], "sometim": [710, 711, 712, 714, 720, 727, 731, 733, 736], "standalon": [710, 715, 733, 748, 749, 754, 759, 760], "conveni": [710, 720, 721, 726, 732, 739, 741, 742, 748, 759], "rare": [710, 721, 746, 758], "come": [710, 711, 712, 715, 719, 731, 735, 736, 742, 744, 748, 753], "tab": [710, 711, 719, 741], "click": [710, 711, 712, 719, 723, 725, 739], "button": [710, 711, 712], "centr": 710, "predetermin": 710, "report": [710, 733], "superset": [710, 713, 727, 730, 746], "reserv": 710, "interact": [710, 752, 753, 758], "submit": [710, 725], "your_usernam": 711, "your_fold": 711, "enter": [711, 712, 715, 720, 721, 726, 728], "sync": [711, 714], "nutshel": [711, 726], "hook": [711, 725], "lint": 711, "attempt": [711, 735, 746], "properli": [711, 713, 724, 725, 731, 733], "cours": [711, 712, 714, 715, 722, 730, 731, 736, 741, 746, 758, 759], "whatev": [711, 718, 746], "elig": 711, "student": 711, "licens": [711, 756], "remind": 711, "expir": 711, "profession": 711, "trial": 711, "jetbrain": 711, "bui": [711, 759], "paid": 711, "pace": 711, "person": [711, 712], "experi": [711, 724, 733, 739, 741, 746], "abil": [711, 736, 739, 746, 753], "perhap": [711, 740, 741, 742, 746, 759], "icon": [711, 712], "panel": 711, "palett": 711, "ctrl": [711, 712], "On": [711, 720, 721, 725, 731, 733, 736, 739, 743], "m1": 711, "optional_apple_silicon_1": 711, "optional_apple_silicon_2": 711, "builtin": [711, 740, 742], "cmd": 711, "virtualenv": 711, "tick": [711, 712, 719], "paddlepaddl": 711, "wget": 711, "nz2": 711, "archiv": 711, "openssl": 711, "libssl1": 711, "1_1": 711, "1f": 711, "1ubuntu2": 711, "19_amd64": 711, "deb": 711, "sudo": 711, "dpkg": 711, "array_api_test": [711, 712, 714], "test_array_api": [711, 712, 714, 733], "mitig": [711, 759], "conflict": [711, 712, 719, 731, 741], "powershel": 711, "admin": 711, "visit": [711, 712, 719], "menu": 711, "tag": [711, 712], "introspect": 711, "usr": 711, "dialog": 711, "persist": 711, "opt": [711, 716, 720, 730, 733, 736], "caus": [711, 712, 714, 716, 718, 719, 720, 722, 730, 732, 733, 746], "earlier": [711, 712, 720, 734], "virtualis": 711, "dropdown": [711, 719], "dockerfil": 711, "apt": 711, "ca": 711, "certif": 711, "curl": 711, "gnupg": 711, "lsb": 711, "mkdir": [711, 719], "keyr": 711, "fssl": 711, "gpg": 711, "dearmor": 711, "arch": 711, "lsb_releas": 711, "tee": 711, "null": 711, "ce": 711, "cli": 711, "containerd": 711, "io": [711, 719], "plugin": 711, "systemctl": 711, "permiss": [711, 719], "press": [711, 712, 741], "ok": 711, "successful": 711, "4a": 711, "socket": 711, "chmod": [711, 719], "rwx": 711, "sock": 711, "pid": 711, "coupl": [711, 715, 740, 742, 753], "editor": 711, "pytest": [711, 712, 714, 719, 728, 733], "keyboard": 711, "displai": [711, 717, 719, 724, 733, 741], "screenshot": 711, "test_elementwis": 711, "bar": 711, "shell": [711, 712], "run_tests_cli": [711, 714], "run_ivy_core_test": 711, "run_ivy_nn_test": 711, "run_ivy_stateful_test": 711, "run_test": [711, 719], "test_depend": 711, "test_ivy_cor": 711, "test_ivy_nn": 711, "test_ivy_st": 711, "unix": 711, "test_": [711, 732], "test_funct": [711, 712, 719, 732, 733], "test_cor": [711, 712, 732], "bash": [711, 712, 714], "offici": [711, 720, 738], "wish": [711, 731], "ivy_cor": 711, "ivy_nn": 711, "ivy_st": 711, "simplest": [711, 722, 733, 736], "header": [711, 712], "advanc": [711, 752], "arrow": 711, "test_stat": 711, "test_submodule_nam": 711, "test_function_nam": 711, "debugg": 711, "studio": [711, 733], "afterward": [711, 741], "restart": 711, "overlap": [711, 719, 734, 736, 754], "test_file_path": 711, "test_fn_nam": 711, "engin": [711, 753, 755, 756], "comma": 711, "postcreatecommand": 711, "post_create_command": 711, "poststartcommand": 711, "safe": [711, 731], "containerworkspacefold": 711, "reopen": 711, "test_fle_path": 711, "slash": 711, "computation": 711, "heavi": [711, 731, 732, 736, 754], "comfort": [711, 724], "isol": [711, 712, 754, 759], "fledg": [711, 738, 739], "container": 711, "intens": 711, "headach": 711, "arm": [711, 712], "vm": [711, 719], "azur": 711, "cloud": [711, 719, 745, 755], "longer": [711, 720, 730, 733, 753], "theme": [711, 717], "slow": 711, "ipad": 711, "browser": [711, 717], "quota": 711, "requisit": 711, "pane": [711, 712, 719], "six": [711, 736], "dockerfilegpu": 711, "ivv": 711, "multiv": 711, "multivers": [711, 734], "dockerfilemultivers": 711, "dockerhub": 711, "region": 711, "box": 711, "upto": [711, 712], "minut": [711, 719], "launch": 711, "kindli": 711, "guidelin": 711, "conatin": 711, "colour": 711, "chanc": 711, "troubleshoot": 711, "ever": 711, "flask": 711, "toolbar": [711, 712], "_array_modul": [711, 714], "refresh": 711, "workspac": 711, "pytestarg": 711, "unittesten": 711, "pytesten": 711, "autotestdiscoveronsaveen": 711, "conftest": 711, "quick": [712, 713, 732, 742], "tendenc": 712, "land": 712, "world": [712, 755], "fly": [712, 753], "hard": [712, 740, 753], "respons": [712, 719, 720], "internship": 712, "serv": [712, 715, 718, 726, 727, 731, 732, 733, 736, 737, 748, 751], "suspect": 712, "iii": 712, "reformat": [712, 725], "issue_numb": 712, "12345": 712, "delet": [712, 719], "clean": [712, 734, 738, 739, 741], "rememb": 712, "respond": 712, "dai": [712, 725], "freed": 712, "situat": [712, 719, 743], "upon": [712, 722, 730, 733, 736, 746, 752, 753], "unabl": [712, 736], "obvious": [712, 719], "qualiti": 712, "hypothet": 712, "frustrat": 712, "busi": 712, "fine": [712, 720, 722, 731, 740, 743, 759], "inact": 712, "me": 712, "unfairli": 712, "investig": 712, "wherea": [712, 715, 716, 718, 720, 721, 722, 726, 727, 733, 743, 750], "practic": [712, 716, 719, 731, 756], "checkout": [712, 714, 733], "name_of_your_branch": 712, "date": [712, 714], "complic": [712, 732, 738], "merge_with_upstream": 712, "abort": 712, "tediou": [712, 722, 736], "stash": [712, 725], "reinstat": 712, "fetch": [712, 714, 719], "uncommit": 712, "unstag": [712, 725], "untrack": 712, "comprehens": [712, 714], "atlassian": 712, "wrote": 712, "blame": 712, "revis": 712, "eg": 712, "grep": 712, "commit_id": 712, "handi": 712, "histori": 712, "toggl": 712, "highlight": [712, 719, 722, 731], "approv": 712, "someon": [712, 746], "hash": [712, 741], "cancel": 712, "speedup": 712, "unavail": 712, "tickbox": 712, "span": [712, 751, 759], "intent": [712, 730], "discourag": 712, "philosophi": 712, "valuabl": 712, "infrequ": 712, "earli": [712, 753], "wast": [712, 719], "spot": [712, 722, 727], "mistak": 712, "propos": [712, 731, 736, 753], "mountain": 712, "advoc": [712, 746], "session": [712, 753], "beauti": 712, "concern": [712, 713, 718, 720, 722, 730, 736, 737, 759], "undo": 712, "stress": 712, "nifti": 712, "reassur": 712, "local_path_to_ivi": 712, "subfold": [712, 732, 733, 734], "dep": 712, "fresh": 712, "arsen": 712, "declar": 712, "exec": 712, "rf": 712, "ivy_contain": 712, "test_imag": 712, "test_random_crop": 712, "test_creation_funct": 712, "test_arang": 712, "cursor": 712, "alt": 712, "blog": 712, "breakpoint": 712, "gutter": 712, "caret": 712, "f8": 712, "f9": 712, "Into": 712, "f7": 712, "smart": 712, "fragment": [712, 749, 751, 755], "dummi": 712, "wherein": [712, 727, 733], "failur": [712, 719, 732, 733], "who": [713, 724, 737, 746, 753, 755], "weed": [713, 737], "tour": 713, "runtim": [713, 727, 733, 736, 753], "conjunct": 714, "establish": [714, 755], "2020": [714, 753], "popular": [714, 753], "sens": [714, 722, 731, 740], "unconnect": 714, "initialis": [714, 731, 733], "everytim": [714, 720], "strang": [714, 740], "thoroughli": 714, "test_linalg": [714, 732], "test_set_funct": 714, "test_signatur": 714, "excess": [714, 716, 722], "array_modul": 714, "vv": 714, "test_manipulation_funct": 714, "test_concat": [714, 733], "nb": 714, "liber": 714, "fortun": 714, "______________________": 714, "test_remaind": 714, "_______________________": 714, "test_operators_and_elementwise_funct": 714, "1264": 714, "st": [714, 732, 733], "1277": 714, "binary_param_assert_against_refimpl": 714, "ctx": 714, "620": 714, "binary_assert_against_refimpl": 714, "324": 714, "scalar_o": 714, "17304064": 714, "binaryparamcontext": 714, "axic42baaowcnp": 714, "rumwmabaear0": 714, "make_binary_param": 714, "numeric_dtyp": 714, "left_strat": 714, "left_sym": 714, "right_strat": 714, "right_sym": 714, "right_is_scalar": 714, "binary_param_assert_dtyp": 714, "binary_param_assert_shap": 714, "recreat": 714, "unexpectedli": 714, "discrep": [714, 732], "varieti": [714, 719, 720, 721, 733, 735, 749, 751, 755, 756, 759, 760], "test_asarray_arrai": 714, "test_floor_divid": 714, "health": 714, "test_iop": 714, "__imod__": 714, "isequ": 714, "test_matrix_norm": 714, "alter": 714, "tweak": 714, "array_api_methods_to_test": 714, "test_trac": 714, "test_special_cas": 714, "__ipow__": 714, "is_integ": 714, "easier": [714, 715, 716, 720, 732, 734, 748, 753, 755], "revisit": [714, 726], "devicearrai": [715, 731, 738, 740], "wrapper": [715, 717, 718, 720, 724, 727, 730, 731, 740, 748, 749, 753], "_data": [715, 730, 731, 740], "organiz": [715, 718, 731], "inherit": [715, 718, 724, 740, 746, 748], "bear": [715, 718, 720, 731], "underpin": [715, 718, 738], "programmat": [715, 718, 754], "backup": [715, 717, 718], "accident": [715, 718, 731], "readabl": [715, 718, 724, 725, 726, 733, 734, 740, 741], "absent": [715, 718], "auto": [715, 717, 718, 725, 741], "__mul__": [715, 718, 722, 726, 736, 740], "throw": [715, 720, 721, 724, 740, 753], "imposs": 715, "inputs_to_native_arrai": [715, 727, 728], "outputs_to_ivy_arrai": [715, 720, 721, 726, 727, 728], "firstli": [715, 720, 722, 723, 724, 727, 728, 730, 736, 741, 749, 759], "anywai": [715, 728, 731], "secondli": [715, 720], "permit": [715, 726, 731, 733, 736], "dictat": [715, 722, 726, 730], "__ivy_array_function__": 715, "inspir": [715, 745], "__torch_function__": 715, "myarrai": 715, "handled_funct": 715, "notimpl": 715, "issubclass": 715, "four": [715, 720, 722, 726, 727, 733, 736, 741], "enough": [715, 719, 721, 733, 740, 741, 742], "ivy_funct": 715, "my_ab": 715, "my_arrai": 715, "Of": [715, 730, 731, 741, 758, 759], "subset": [715, 719, 723, 726, 729, 731, 733, 738, 753], "implicit_backend": [716, 738], "__dict__": [716, 730, 738], "ivy_original_dict": [716, 738], "get_backend": [716, 727], "fallback": 716, "challeng": [716, 759], "switch": [716, 724, 727, 728, 760], "scope": [716, 754, 758], "intermediari": 716, "illustr": [716, 738, 745], "set_dynamic_backend": 716, "unset_dynamic_backend": 716, "dynamic_backend_a": 716, "set_": 716, "unset_": 716, "technic": [716, 726, 730, 746, 753, 755], "setter": 716, "backend_handl": 716, "requires_grad": 716, "memory_format": 716, "preserve_format": 716, "weren": 716, "vast": [716, 720, 753], "minor": [716, 736, 746], "fn_name_v_1p12_and_abov": 716, "fn_name_v_1p01_to_1p1": 716, "heavili": [717, 728, 746], "characterist": 717, "conf": 717, "cleanup": 717, "disabl": 717, "procedur": [717, 719, 722, 732], "readm": [717, 746], "toctre": 717, "maxdepth": 717, "caption": 717, "related_work": 717, "deep_div": 717, "faq": 717, "glossari": 717, "autosummari": 717, "top_functional_toc": 717, "restructuredtext": 717, "render": [717, 723], "inlin": 717, "discov": [717, 720], "ivy_toctree_caption_map": 717, "stub": 717, "inturn": 717, "unfortun": [717, 725], "forc": [717, 719, 721], "linker": 717, "foo": 717, "discussion_channel_map": 717, "1000043690254946374": 717, "1000043749088436315": 717, "seri": [717, 731, 733, 753, 755], "discussion_paragraph": 717, "discord_link": 717, "channel_link": 717, "gg": 717, "zvqdvbznqj": 717, "799879767196958751": 717, "channel_id": 717, "paragraph": 717, "autoskippablemethod": 717, "skippable_method_attribut": 717, "__qualname__": 717, "autodoc": 717, "atribut": 717, "__doc__": 717, "autoivydata": 717, "containerwithelementwis": 718, "__repr__": 718, "__contains__": 718, "__getstate__": 718, "__setstate__": 718, "unpickl": 718, "num_dim": [718, 743], "__len__": 718, "enforc": [718, 740], "extern": [718, 726, 731, 733, 734], "lefthand": 718, "righthand": 718, "handle_nest": [718, 726, 727, 728, 738], "addition": [718, 730, 731, 759], "presenc": [718, 730], "absenc": [718, 726, 753], "implicitli": [718, 729, 733, 738], "log_pr": [718, 727, 730], "intuit": [718, 733, 741, 742, 749], "chronolog": 718, "concurr": [718, 719, 727, 753], "had": [718, 719, 730, 734, 738, 753, 754], "consum": [718, 719, 726, 732, 733], "__list__": 718, "But": [718, 719, 723, 725, 728, 736, 743], "implic": 718, "whatsoev": [718, 727, 748, 759], "eager": [718, 746, 753], "children": 718, "shallowest": 718, "deepest": 718, "regularli": 719, "rollback": 719, "incorpor": [719, 732, 741, 753], "techniqu": 719, "triplet": 719, "test_torch": [719, 732], "test_tensor": [719, 732], "test_torch_instance_arctan_": 719, "12500": 719, "daili": 719, "shoot": 719, "ideal": [719, 731, 736, 741], "impact": [719, 733, 742, 755], "_reduce_loss": [719, 727, 730], "test_nn": 719, "test_loss": 719, "test_binary_cross_entropy_with_logit": 719, "test_cross_entropi": 719, "test_binary_cross_entropi": 719, "test_sparse_cross_entropi": 719, "test_loss_funct": 719, "test_torch_binary_cross_entropi": 719, "test_torch_cross_entropi": 719, "binary_cross_entropy_with_logit": 719, "torch_binary_cross_entropi": 719, "torch_cross_entropi": 719, "underneath": [719, 751], "magic": 719, "readthedoc": 719, "affect": [719, 731], "pedagog": 719, "f_1": 719, "t_1": 719, "t_3": 719, "t_7": 719, "t_": 719, "f_m": 719, "cyclic": 719, "intellig": [719, 733, 755], "tests_fil": 719, "file_nam": [719, 733, 734], "del": 719, "intersect": [719, 733, 745], "tests_lin": 719, "elif": [719, 724, 730, 731, 732], "correspondingli": 719, "tests_to_run": 719, "determine_tests_lin": 719, "mongodb": 719, "databas": [719, 733], "secret": 719, "db": 719, "ssh_deploy_kei": 719, "suffic": [719, 728, 733], "massiv": 719, "constraint": [719, 720, 729], "mb": 719, "yml": 719, "felicit": 719, "clone_map": 719, "master": [719, 753], "home": 719, "deploy_kei": 719, "user_email": 719, "rashul": 719, "chutani": 719, "user_nam": 719, "target_branch": 719, "github_serv": 719, "deploy_key_fil": 719, "ssh_known_hosts_fil": 719, "known_host": 719, "keyscan": 719, "export": [719, 752, 759], "git_ssh_command": 719, "userknownhostsfil": 719, "methodologi": 719, "master1": 719, "restructur": 719, "_map": 719, "t_2": 719, "t_n": 719, "index_map": 719, "test_map": 719, "routin": [719, 730, 731, 736, 746, 753], "incorrect": 719, "snowbal": 719, "irrelev": [719, 720, 722], "recalibr": 719, "workflow_dispatch": 719, "schedul": [719, 746, 753, 760], "cron": 719, "saturdai": 719, "night": 719, "pm": 719, "gut": 719, "lesser": [719, 724], "lol": 719, "cater": 719, "master2": 719, "master32": 719, "synchron": 719, "runner2": 719, "corrupt": 719, "discard": 719, "decoupl": [719, 742], "150": 719, "cycl": [719, 733], "rashulchutani": 719, "yellow": 719, "queu": 719, "redirect": 719, "book": 719, "onrend": 719, "jo": 719, "ran": 719, "badg": 719, "clickabl": 719, "all_dtyp": 720, "all_numeric_dtyp": 720, "all_int_dtyp": 720, "all_float_dtyp": 720, "replic": [720, 729, 730, 731], "thirdli": 720, "native_float32": 720, "importantli": [720, 740, 743, 745], "arguabl": [720, 721, 731], "jaxarrai": [720, 721, 724, 726, 730, 734, 738], "_handle_0_dim_output": 720, "subtli": [720, 730], "promote_types_frontend_nam": 720, "promote_types_of_frontend_name_input": 720, "frontend_nam": 720, "demonstr": [720, 722, 724, 740], "accuraci": 720, "upcast": 720, "nearli": [720, 726, 728, 753], "downcast": 720, "footprint": 720, "concret": 720, "compound": 720, "infer_dtyp": [720, 721, 726, 728], "settabl": [720, 721], "handle_out_argu": [720, 721, 726, 727, 728, 730, 738], "infer_devic": [720, 721, 726, 728], "deleg": [720, 760], "shape_to_tupl": 720, "with_supported_dtyp": 720, "with_unsupported_dtyp": [720, 731], "unment": 720, "backend_vers": 720, "_cast_for_unary_op": [720, 727, 730], "target_typ": 720, "unsupported_dtyp": 720, "supported_dtypes_and_devic": 720, "with_unsupported_device_and_dtyp": 720, "globals_getter_func": 720, "f1": 720, "f2": 720, "lack": [720, 730, 753, 760], "inconsist": [720, 724, 729], "84530": 720, "unwarr": 720, "risk": [720, 759], "needlessli": 720, "bloat": 720, "undergo": [720, 746], "supported_dtyp": 720, "unsupported_devic": 720, "supported_devic": 720, "slight": [720, 733, 742], "downsid": 720, "inflat": 720, "undesir": 720, "accomplish": 720, "upcast_data_typ": 720, "downcast_data_typ": 720, "crosscast_data_typ": 720, "cast_data_typ": 720, "downcast_data_dtyp": 720, "tri": 720, "vice": 720, "versa": 720, "till": 720, "crosscast": 720, "exmp1": 720, "watch": [720, 731], "handle_numpy_arrays_in_specific_backend": [720, 726], "cate": 720, "understood": 720, "consumpt": [720, 757], "dual": 721, "categor": [721, 727, 731], "210": 721, "_handle_except": [721, 724], "1013": 721, "_handle_nest": [721, 724], "905": 721, "_handle_out_argu": [721, 724], "441": 721, "_inputs_to_native_arrai": [721, 724], "new_arg": [721, 724], "new_kwarg": [721, 724], "_outputs_to_ivy_arrai": [721, 724], "358": 721, "_handle_array_funct": [721, 724], "863": 721, "_handle_device_shift": 721, "handle_device_shift": [721, 728], "crucial": [721, 729], "device_shifting_dev": 721, "prupos": 721, "dont": 721, "__enter__": 721, "exit": 721, "__exit__": 721, "mostli": [721, 730, 733], "soft_devic": 721, "eight": [722, 737], "op_nam": 722, "__r": 722, "recap": [722, 742], "combinatori": 722, "unus": [722, 730], "okai": [722, 736, 738], "meant": [722, 730], "spec": [722, 723], "my_func": [722, 734], "some_flag": 722, "another_flag": 722, "jointli": 722, "5574077": 722, "1850398": 722, "5463025": 722, "8422884": 722, "91601413": 722, "9647598": 722, "3738229": 722, "1597457": 722, "0963247": 722, "9955841": 722, "3278579": 722, "asid": [722, 745], "14254655": 722, "1578213": 722, "380515": 722, "trivial": [722, 730], "exlud": 722, "failing_fn_nam": 722, "onlin": [722, 723], "minutest": 722, "suffici": [722, 731, 733], "fault": [722, 753], "contrast": [723, 726, 731, 759], "instanti": 723, "preview": 723, "needless": [723, 732], "renam": [723, 731], "judgment": 723, "operator_nam": 723, "succinct": 723, "contstructor": 723, "docst": 723, "native_error": 724, "isinst": [724, 731, 733, 734, 742, 743], "_combine_messag": 724, "truli": [724, 740], "wrong": [724, 725, 728, 731, 736], "198": 724, "392": 724, "_handle_array_like_without_promot": 724, "805": 724, "432": 724, "349": 724, "other_test": 724, "523": 724, "_handle_numpy_out": 724, "396": [724, 742], "_outputs_to_numpy_arrai": 724, "_inputs_to_ivy_arrays_np": 724, "ivy_arg": 724, "ivy_kwarg": 724, "453": 724, "_from_zero_dim_arrays_to_scalar": 724, "truth_value_test": 724, "217": 724, "visibl": 724, "unwieldi": 724, "awar": [724, 725], "squash": 724, "hid": 724, "cleaner": [724, 741], "caught": [724, 725], "functool": [724, 731, 740], "rethrow": 724, "_print_traceback_histori": 724, "error_stack": 724, "axiserror": 724, "got": 724, "polici": [724, 728, 733, 735, 745], "moreov": 724, "met": 724, "black": 725, "flake8": 725, "formatt": 725, "linter": 725, "autoflak": 725, "docformatt": 725, "pydocstyl": 725, "cfg": 725, "yaml": 725, "patch1687898304": 725, "8072": 725, "3516aed563": 725, "akshai": 725, "jain": 725, "gui": 725, "cryptic": 725, "garden": 725, "utc": 725, "didn": 725, "human": 725, "intervent": 725, "typo": 725, "ui": 725, "adress": 726, "handle_array_like_without_promot": [726, 728], "to_native_arrays_and_back": [726, 728, 738], "handle_array_funct": [726, 728], "inputs_to_native_shap": [726, 728], "sole": [726, 734, 752, 753, 754], "rational": 726, "__div__": [726, 736], "dicat": 726, "484": 726, "annot": 726, "brittl": 726, "freeli": 726, "inde": [726, 736, 746, 751], "original_typ": 726, "cumbersom": 726, "venn": 727, "diagram": [727, 759], "light": [727, 734, 746, 748, 754, 759], "maximis": 727, "array_arg": 727, "encompass": 727, "maxim": [727, 730, 738, 750, 751, 755, 756, 757], "partial_mixed_handl": [727, 728, 736], "handle_partial_mixed_funct": [727, 728, 736], "fn_decor": 727, "mixed_backend_wrapp": [727, 730], "to_add": 727, "to_skip": 727, "inputs_to_ivy_arrai": [727, 728], "modif": [727, 753], "briefli": [727, 733, 741], "get_all_arrays_on_dev": 727, "outputs_to_ivy_shap": 728, "outputs_to_native_arrai": 728, "handle_view_index": [728, 730], "handle_view": [728, 730], "handle_rag": 728, "handle_backend_invalid": 728, "handle_nan": 728, "to_native_shapes_and_back": 728, "scenario": 729, "inter_func": 729, "custom_grad_fn": 729, "args1": 729, "detach": 729, "eas": [729, 753], "captur": [729, 733, 743, 754], "program": [730, 750, 751, 753, 756, 757, 760], "ration": [730, 736], "speak": 730, "val_n": 730, "base_idx": 730, "_manipulation_stack": 730, "base_flat": 730, "_view_ref": 730, "_update_view": 730, "contigu": 730, "c_contigu": 730, "ascontiguousarrai": 730, "copyto": 730, "_is_vari": 730, "tensor_scatter_nd_upd": 730, "is_vari": 730, "_update_torch_view": 730, "predominantli": [730, 734, 745], "support_native_out": [730, 738], "_scalar_output_to_0d_arrai": 730, "_wrap_fn": 730, "dim0": 730, "dim1": 730, "res_floor": 730, "mul": [730, 740], "extent": [730, 731], "to_out_fn": 730, "add_wrapp": 730, "input_arrai": 730, "metadata": 730, "paradigm": [730, 746, 753], "expans": 730, "brief": [730, 733], "weak": 730, "_torch_bas": 730, "_torch_view_ref": 730, "_torch_manipul": 730, "weakli": 730, "adequ": 730, "exhaust": [730, 733, 750, 759], "tf_frontend": 731, "lax": [731, 732, 736, 743, 746], "fn_tree": [731, 732, 733], "torch_frontend": [731, 732], "numpy_frontend": 731, "jax_frontend": 731, "to_ivy_arrays_and_back": [731, 732], "fidel": 731, "algebra": [731, 751, 752, 753, 756, 760], "xla": [731, 746, 748, 753], "dynamic": 731, "mimic": 731, "arithmetic_oper": 731, "handle_numpy_out": 731, "handle_numpy_dtyp": 731, "handle_numpy_cast": 731, "from_zero_dim_arrays_to_scalar": 731, "_add": 731, "same_kind": 731, "subok": [731, 732, 736], "promote_types_of_numpy_input": 731, "underscor": 731, "unhandl": 731, "trigonometric_funct": 731, "_tan": 731, "check_tensorflow_cast": 731, "raw_op": [731, 732], "tackl": 731, "map_raw_ops_alia": 731, "unnecessari": 731, "output_typ": 731, "kwargs_to_upd": 731, "implemnt": 731, "pointwise_op": 731, "slower": 731, "sensibl": 731, "ahead": [731, 734, 753], "reduce_logsumexp": 731, "input_tensor": 731, "logsumexp": 731, "trick": 731, "max_input_tensor": 731, "meet": 731, "preferred_element_typ": 731, "finer": 731, "logicaland": 731, "np_frontend": 731, "_ivy_arrai": 731, "radd": 731, "_init_data": 731, "_process_str_data": 731, "_dtype": [731, 732, 740], "_shape": [731, 740], "govern": 731, "promote_types_of_": 731, "_input": 731, "promote_types_of_torch_input": [731, 732], "saniti": 731, "handle_numpy_casting_speci": 731, "new_fn": 731, "equiv": 731, "unsaf": 731, "array_type_test": 731, "_isfinit": 731, "organis": 731, "youtub": 731, "jump": 732, "knowledg": 732, "handle_frontend_test": [732, 733], "handle_frontend_method": [732, 733], "test_frontend_funct": 732, "lift": [732, 754], "get_dtyp": [732, 733], "dtype_and_valu": [732, 733], "get_shap": [732, 733], "np_frontend_help": 732, "test_jax": 732, "test_lax": 732, "test_oper": 732, "available_dtyp": [732, 733], "test_with_out": [732, 733], "test_jax_tan": 732, "input_dtyp": [732, 733], "backend_to_test": 732, "test_numpi": 732, "test_mathematical_funct": 732, "test_trigonometric_funct": 732, "dtypes_values_cast": 732, "dtypes_values_casting_dtyp": 732, "arr_func": 732, "number_positional_arg": 732, "get_num_positional_args_ufunc": 732, "test_numpy_tan": 732, "handle_where_and_array_bool": 732, "test_tensorflow": 732, "test_math": 732, "test_tensorflow_tan": 732, "test_pointwise_op": 732, "test_torch_tan": 732, "_fill_valu": 732, "update_backend": 732, "test_glob": 732, "min_valu": [732, 733], "max_valu": [732, 733], "allow_non": [732, 733], "min_num_dim": [732, 733], "max_num_dim": [732, 733], "min_dim_s": [732, 733], "max_dim_s": 732, "test_jax_ful": 732, "test_from_shape_or_valu": 732, "_input_fill_and_dtyp": 732, "dtype_and_input": 732, "large_abs_safety_factor": [732, 733], "small_abs_safety_factor": 732, "safety_factor_scal": [732, 733], "dtype_to_cast": 732, "input_fill_dtyp": 732, "test_numpy_ful": 732, "test_raw_op": 732, "test_tensorflow_fil": 732, "test_creation_op": 732, "with_arrai": 732, "sampled_from": [732, 733], "test_torch_ful": 732, "test_valu": [732, 733], "add_nois": 732, "all_clos": 732, "_get_dtype_and_matrix": 732, "test_torch_qr": 732, "frontend_ret": 732, "frontend_q": 732, "frontend_r": 732, "assert_all_clos": 732, "ret_np": 732, "ret_from_gt_np": 732, "walkthrough": 732, "comparison_op": 732, "test_comparison_op": 732, "num_arrai": [732, 733], "allow_inf": [732, 733], "shared_dtyp": 732, "test_torch_great": 732, "all_alias": 732, "class_tre": 732, "init_tre": 732, "method_nam": 732, "test_frontend_method": 732, "init_input_dtyp": 732, "init_all_as_kwargs_np": 732, "intial": 732, "method_input_dtyp": 732, "arguemnt": 732, "method_all_as_kwargs_np": 732, "test_ndarrai": 732, "test_numpy_instance_add__": 732, "frontend_method_data": 732, "init_flag": [732, 733], "method_flag": [732, 733], "test_tensorflow_instance_add": 732, "method_tre": [732, 733], "1e04": 732, "allow_infin": 732, "test_torch_instance_add": 732, "atol_": 732, "_arrays_idx_n_dtyp": 732, "test_manipul": [732, 733], "surprisingli": 732, "closest_relevant_group": 732, "strive": [732, 733, 736, 746, 755], "fixtur": 733, "eleg": [733, 753], "unexplor": 733, "upload": 733, "artifact": 733, "bespok": 733, "_array_or_typ": 733, "test_default_int_dtyp": 733, "clariti": [733, 736, 753], "print_hypothesis_exampl": 733, "searchstrategi": 733, "custom_strategi": 733, "randomis": 733, "simplist": 733, "intricaci": 733, "glanc": 733, "capabl": [733, 736], "stratigi": 733, "one_of": 733, "datum": 733, "pipe": 733, "shorthand": 733, "array_or_scal": 733, "len_of_arrai": 733, "test_add": 733, "gradient_test": 733, "test_gpu_is_avail": 733, "handle_test": 733, "pretest": 733, "handle_method": 733, "thankfulli": 733, "as_variable_flag": 733, "min_siz": 733, "max_siz": 733, "native_array_flag": 733, "container_flag": 733, "test_instance_method": 733, "test_inplac": 733, "seamlessli": 733, "criterion": 733, "array_valu": 733, "valid_ax": 733, "craft": 733, "hoc": 733, "44758124e": 733, "11228": 733, "456": 733, "268": 733, "wherev": 733, "dtype_values_axi": 733, "9622": 733, "28136": 733, "6375": 733, "12720": 733, "21354": 733, "900e": 733, "955e": 733, "exclude_min": 733, "57384": 733, "25687": 733, "248": 733, "array_dtyp": 733, "array_bool": 733, "test_devic": 733, "array_shap": 733, "common_shap": 733, "test_lay": 733, "size_bound": 733, "reshape_shap": 733, "stand": 733, "some_sequ": 733, "allow_nan": 733, "allow_subnorm": 733, "get_bound": 733, "arrays_valu": 733, "36418": 733, "213": 733, "21716926": 733, "none_or_list_of_float": 733, "get_prob": 733, "103515625e": 733, "099609375": 733, "probabilist": 733, "get_axi": 733, "number_positional_argu": 733, "unreproduc": 733, "x_and_linear": 733, "mixed_fn_compo": 733, "is_torch_backend": 733, "x_shape": [733, 738], "weight_shap": 733, "bias_shap": 733, "ivy_np": 733, "valid_float_dtyp": 733, "test_demo": 733, "failing_test": 733, "traceback": 733, "shrink": 733, "prescrib": 733, "scratch": 733, "therebi": 733, "test_gelu": 733, "test_fil": 733, "phase": [733, 746, 753], "notabl": [733, 753], "newer": 733, "max_exampl": 733, "deadlin": 733, "weird": 733, "systemat": 733, "safeguard": 733, "inabl": 733, "test_result_typ": 733, "9090909090909091": 733, "judgement": 734, "some_namespac": 734, "some_backend": 734, "another_backend": 734, "refactor": 734, "ongo": 734, "_assert_fill_value_and_dtype_are_compat": 734, "_to_devic": 734, "pin": 734, "conclud": 734, "unpinn": 734, "culmin": 734, "unsett": 735, "array_significant_figur": 735, "figur": 735, "array_decimal_valu": 735, "warning_level": 735, "nan_polici": 735, "stablest": 735, "answer": [736, 740, 746], "contradict": 736, "entail": 736, "sacrif": 736, "dimems": 736, "jacfwd": 736, "jacrev": 736, "banner": 736, "expens": 736, "incredibli": [736, 741, 746, 756], "price": 736, "pai": 736, "intrus": 736, "x_beta": 736, "equip": 736, "priorit": 736, "simplif": 736, "allevi": 736, "ineffici": [736, 746, 753], "fuse": 736, "hybrid": 736, "workaround": 736, "slip": 736, "radar": 736, "stumbl": 736, "fulfil": 737, "syntact": [738, 743], "power_seq": 738, "backend_stack": 738, "_determine_backend_from_arg": 738, "importlib": 738, "_backend_dict": 738, "x_flat": 738, "wi": 738, "wi_x": 738, "wii_x": 738, "wif_x": 738, "wig_x": 738, "wio_x": 738, "wh": 738, "ht": 738, "ct": 738, "hts_list": 738, "wii_xt": 738, "wif_xt": 738, "wig_xt": 738, "wio_xt": 738, "zip": 738, "htm1": 738, "ctm1": 738, "wh_htm1": 738, "whi_htm1": 738, "whf_htm1": 738, "whg_htm1": 738, "who_htm1": 738, "ft": 738, "ot": 738, "reliabl": 738, "sacrific": 738, "hear": 738, "virtu": [738, 750], "pure_ivi": 738, "compile_graph": [738, 743], "pure_torch": 738, "_layer": 738, "unclean": 738, "wx": 738, "temp": 738, "ivy_func": 738, "emphas": 738, "torchscript": [738, 748, 760], "example_input": 738, "primit": [739, 746, 751, 753], "upcom": 739, "hierarch": [739, 741, 742, 753], "arraywithactiv": 740, "arraywithcr": 740, "arraywithdatatyp": 740, "arraywithdevic": 740, "arraywithgener": 740, "arraywithgradi": 740, "arraywithimag": 740, "arraywithlay": 740, "arraywithlinearalgebra": 740, "arraywithloss": 740, "arraywithmanipul": 740, "arraywithnorm": 740, "arraywithrandom": 740, "arraywithsearch": 740, "arraywithset": 740, "arraywithsort": 740, "arraywithstatist": 740, "arraywithutil": 740, "_init": 740, "_size": 740, "_devic": 740, "_dev_str": 740, "_pre_repr": 740, "_post_repr": 740, "framework_str": 740, "noinspect": 740, "pypep8nam": 740, "immut": 740, "claim": 740, "_native_wrapp": 740, "genuin": 740, "some_method": 740, "rewritten": 740, "compartment": 740, "newshap": 740, "new_shap": 740, "tidi": 740, "crystal": 740, "ton": 741, "ado": [741, 742], "arbitrarili": 741, "soup": 741, "walk": [741, 742], "cnt": 741, "combo": 741, "3333335": 741, "delimit": 741, "autocomplet": 741, "midwai": 741, "agent": 741, "total_spe": 741, "total_height": 741, "total_width": 741, "ag": 741, "tot": 741, "total_": 741, "total_h": 741, "cnt0": 741, "cnt1": 741, "diff_0": 741, "diff_1": 741, "config0": 741, "config1": 741, "decod": 741, "l0": 741, "decoder__l0": 741, "decoder__l1": 741, "encoder__l0": 741, "encoder__l1": 741, "l0__b": 741, "l0__w": 741, "l1__b": 741, "l1__w": 741, "printabl": 741, "obviou": [741, 753], "foresight": 741, "untidili": 741, "update_ag": 741, "normalize_img": 741, "img_max": 741, "reduce_max": 741, "img_min": 741, "reduce_min": 741, "img_rang": 741, "agent_posit": 741, "agent_veloc": 741, "agent_cam_front_rgb": 741, "agent_cam_front_depth": 741, "agent_cam_rear_rgb": 741, "agent_cam_rear_depth": 741, "agent_cam_lidar": 741, "camera": 741, "front_rgb": 741, "front_depth": 741, "rear_rgb": 741, "rear_depth": 741, "lidar": 741, "rgb": 741, "rear": 741, "veloc": 741, "cam": 741, "cam_max": 741, "cam_min": 741, "cam_rang": 741, "five": 741, "perman": 741, "thread": [741, 753], "pretti": [741, 759], "straightforward": 741, "dataload": [741, 744], "_cnt": 741, "img_": 741, "png": 741, "_dataset_s": 741, "_batch_siz": 741, "_count": [741, 742], "__next__": 741, "img_fnam": 741, "loaded_img": 741, "cv2": 741, "imread": 741, "from_numpi": 741, "batch_slic": 741, "mymodel": 741, "x_in": [741, 742, 743], "0145": 741, "addbackward0": 741, "_create_vari": 742, "_input_channel": 742, "_output_channel": 742, "_w_shape": 742, "_b_shape": 742, "_with_bia": 742, "764": 742, "872": 742, "211": 742, "439": 742, "nightmar": 742, "overcom": 742, "v0": 742, "v1": 742, "key0": 742, "linear3": 742, "v2": 742, "counter": 742, "_w_init": 742, "_b_init": 742, "misnom": 742, "saw": 742, "_beta1": 742, "_beta2": 742, "_epsilon": 742, "_mw": 742, "_vw": 742, "_first_pass": 742, "_should_compil": 742, "new_v": 742, "_lr": 742, "_inplac": 742, "_stop_gradi": 742, "clip_by_valu": 743, "sparse_funct": 743, "_linear": 743, "jax_graph": 743, "to_backend": 743, "thinli": 743, "to_haiku_modul": 743, "loss_fn_t": 743, "without_apply_rng": 743, "update_rul": 743, "tree_multimap": 743, "differenti": [745, 753], "pose": 745, "quaternion": 745, "ivy_mech": 745, "target_facing_rotation_matrix": 745, "polar_to_cartesian_coord": 745, "warp": 745, "optic": 745, "voxel": 745, "ivy_vis": 745, "coords_to_voxel_grid": 745, "render_pixel_coord": 745, "radianc": 745, "nerf": 745, "trajectori": 745, "motion": 745, "mobil": [745, 753], "sample_spline_path": 745, "rigidmobil": 745, "sample_bodi": 745, "drone": 745, "sample_link": 745, "openai": 745, "swimmer": 745, "reward": 745, "supervis": 745, "door": [745, 746], "cartpol": 745, "mountain_car": 745, "pendulum": 745, "reacher": 745, "learnt": 745, "ture": 745, "ntm": 745, "egospher": 745, "esm": 745, "ivy_memori": 745, "egocentr": 745, "room": 745, "doubt": 746, "grate": 746, "probe": 746, "remark": 746, "lock": 746, "gold": 746, "dex": 746, "ye": 746, "tricki": [746, 748], "predictor": 746, "tight": 746, "driver": 746, "dispatch": [746, 753, 756], "ast": 746, "checkpoint": 746, "autodiff": 746, "shine": 746, "merci": 746, "autograd": 746, "compet": [746, 753], "parallelis": 746, "spmd": 746, "mixtur": 746, "expert": 746, "sophist": 746, "depart": 746, "hundr": 746, "thousand": 746, "broadli": [746, 759], "supplementari": 746, "reusabl": [746, 751, 753], "fanci": [746, 753], "fusion": [746, 757], "lose": 746, "pmap": 746, "eventu": 746, "supplement": 746, "backdoor": 746, "callback": 746, "record": [746, 754], "somewhat": [746, 753], "outsourc": 746, "nail": 748, "asset": 748, "scientist": 748, "correl": 748, "conceptu": [749, 754], "broken": [749, 753], "tracer": 749, "infrastructur": [749, 755, 756], "vendor": [749, 755], "complimentari": [749, 759], "acycl": [749, 754], "insert_numb": 750, "insert_t": 750, "scaffold": [751, 759], "heart": 751, "toolchain": [751, 756], "intermedi": [751, 752, 753, 754, 759], "ir": [751, 754, 759], "assembli": [751, 758, 759], "idl": 751, "middl": 751, "emit": 751, "gnu": [751, 756], "gcc": [751, 758], "broader": 751, "heterogen": 751, "aid": 751, "coprocessor": 751, "ai": [751, 755], "programm": [751, 758], "gate": 751, "onednn": 751, "sit": [751, 754, 759], "tandem": 751, "possess": 751, "khrono": [752, 758], "appl": 752, "coremltool": 752, "albeit": 752, "promin": 753, "abbrevi": 753, "laboratori": 753, "proprietari": [753, 757, 758], "mathwork": 753, "commerci": 753, "1984": 753, "toolbox": 753, "mupad": 753, "simulink": 753, "graphic": [753, 757, 758], "simul": 753, "million": [753, 756], "worldwid": 753, "scienc": [753, 755], "econom": 753, "2001": 753, "scientif": 753, "od": 753, "solver": 753, "cython": 753, "friendli": 753, "2002": 753, "lua": 753, "luajit": 753, "idiap": 753, "epfl": 753, "2005": 753, "numarrai": 753, "cpython": 753, "partli": 753, "2007": 753, "regress": [753, 760], "forest": 753, "boost": 753, "dbscan": 753, "inbuilt": 753, "esqu": 753, "aesara": 753, "datafram": 753, "critic": [753, 759], "2012": 753, "Its": 753, "polymorph": 753, "mpi": 753, "openmp": 753, "glue": 753, "jaot": 753, "nasa": 753, "cern": 753, "climat": 753, "allianc": 753, "influenti": 753, "2014": 753, "scala": 753, "ship": 753, "forgiv": 753, "decemb": 753, "announc": 753, "mainten": 753, "v7": 753, "meaning": 753, "2016": 753, "imper": 753, "amazon": 753, "traction": 753, "cognit": [753, 760], "toolkit": [753, 754, 760], "grade": 753, "realiz": 753, "dnn": 753, "cnn": 753, "rnn": 753, "backpropag": 753, "succumb": 753, "came": 753, "monitor": 753, "practition": [753, 757, 758, 759], "hobbyist": 753, "tremend": 753, "ecosystem": 753, "gear": 753, "batteri": 753, "zygot": 753, "jl": 753, "workload": 753, "daggerflux": 753, "frontier": 753, "hessian": 753, "2018": 753, "lightweight": [753, 760], "shortcom": 753, "barrier": 753, "inexperienc": 753, "underdevelop": 753, "fanat": 753, "ounc": 753, "infanc": 753, "emerg": 753, "nich": 753, "introduct": 753, "lite": 753, "enterpris": 753, "reinvent": [753, 755], "inertia": 753, "creator": [753, 755], "paszk": 753, "hi": 753, "safeti": 753, "bulk": 753, "haskel": 753, "dataflow": 754, "distil": 754, "essenc": [754, 759], "enclos": 754, "trace_modul": 754, "scriptfunct": 754, "scriptmodul": 754, "fake": 754, "proxi": 754, "site": 754, "graphmodul": 754, "travi": 755, "oliph": 755, "leader": 755, "cornerston": 755, "numba": 755, "numfocu": 755, "pydata": 755, "confer": 755, "consult": 755, "servic": 755, "expertis": 755, "devop": 755, "mlop": 755, "dashboard": 755, "startup": 755, "mlir": [755, 756, 759], "Their": 755, "held": 755, "privileg": 755, "presum": 755, "llvm": [755, 758], "founder": 755, "tvm": [755, 759], "sustain": 755, "empow": 755, "har": 755, "burden": 755, "benchmark": 755, "convention": 756, "precompil": 756, "executor": 756, "julia": [756, 759], "fsf": 756, "gpl": 756, "biggest": [756, 759], "nvidia": [757, 758], "conduct": 757, "throughput": 757, "autotun": 757, "gpgpu": 757, "talk": 758, "classic": 758, "sycl": 758, "dpc": 758, "processor": 758, "maco": 758, "x86": 758, "oneapi": 758, "ia": 758, "aka": 758, "xeon": 758, "gen9": 758, "xe": 758, "arria": 758, "gx": 758, "fpga": 758, "tune": [758, 759], "lofti": 759, "ambit": 759, "realm": 759, "bedrock": 759, "flux": 759, "bite": 759, "chew": 759, "eagerpi": 759, "tensorli": 759, "thinc": 759, "neuropod": 759, "exhibit": 759, "emploi": 759, "fx": 759, "retrain": 759, "closer": 759, "greatli": 759, "modular": 759, "anywher": 759, "theano": 760, "plaidml": 760, "partial_svd": 760, "excel": 760, "subsystem": 760}, "objects": {"ivy.Array": [[174, 0, 1, "", "abs"], [175, 0, 1, "", "acos"], [176, 0, 1, "", "acosh"], [523, 0, 1, "", "adam_step"], [524, 0, 1, "", "adam_update"], [323, 0, 1, "", "adaptive_avg_pool1d"], [324, 0, 1, "", "adaptive_avg_pool2d"], [325, 0, 1, "", "adaptive_max_pool2d"], [177, 0, 1, "", "add"], [353, 0, 1, "", "adjoint"], [673, 0, 1, "", "all"], [443, 0, 1, "", "all_equal"], [274, 0, 1, "", "allclose"], [178, 0, 1, "", "angle"], [674, 0, 1, "", "any"], [650, 0, 1, "", "argmax"], [651, 0, 1, "", "argmin"], [659, 0, 1, "", "argsort"], [652, 0, 1, "", "argwhere"], [446, 0, 1, "", "array_equal"], [378, 0, 1, "", "as_strided"], [78, 0, 1, "", "asarray"], [179, 0, 1, "", "asin"], [180, 0, 1, "", "asinh"], [447, 0, 1, "", "assert_supports_inplace"], [379, 0, 1, "", "associative_scan"], [106, 0, 1, "", "astype"], [181, 0, 1, "", "atan"], [182, 0, 1, "", "atan2"], [183, 0, 1, "", "atanh"], [380, 0, 1, "", "atleast_1d"], [381, 0, 1, "", "atleast_2d"], [382, 0, 1, "", "atleast_3d"], [327, 0, 1, "", "avg_pool1d"], [328, 0, 1, "", "avg_pool2d"], [329, 0, 1, "", "avg_pool3d"], [414, 0, 1, "", "batch_norm"], [420, 0, 1, "", "bernoulli"], [421, 0, 1, "", "beta"], [275, 0, 1, "", "binarizer"], [602, 0, 1, "", "binary_cross_entropy"], [432, 0, 1, "", "bincount"], [184, 0, 1, "", "bitwise_and"], [185, 0, 1, "", "bitwise_invert"], [186, 0, 1, "", "bitwise_left_shift"], [187, 0, 1, "", "bitwise_or"], [188, 0, 1, "", "bitwise_right_shift"], [189, 0, 1, "", "bitwise_xor"], [258, 0, 1, "", "blackman_window"], [107, 0, 1, "", "broadcast_arrays"], [108, 0, 1, "", "broadcast_to"], [109, 0, 1, "", "can_cast"], [190, 0, 1, "", "ceil"], [572, 0, 1, "", "cholesky"], [605, 0, 1, "", "clip"], [449, 0, 1, "", "clip_matrix_norm"], [450, 0, 1, "", "clip_vector_norm"], [606, 0, 1, "", "concat"], [385, 0, 1, "", "concat_from_sequence"], [354, 0, 1, "", "cond"], [276, 0, 1, "", "conj"], [607, 0, 1, "", "constant_pad"], [558, 0, 1, "", "conv1d"], [559, 0, 1, "", "conv1d_transpose"], [560, 0, 1, "", "conv2d"], [561, 0, 1, "", "conv2d_transpose"], [562, 0, 1, "", "conv3d"], [563, 0, 1, "", "conv3d_transpose"], [84, 0, 1, "", "copy_array"], [277, 0, 1, "", "copysign"], [433, 0, 1, "", "corrcoef"], [191, 0, 1, "", "cos"], [192, 0, 1, "", "cosh"], [278, 0, 1, "", "count_nonzero"], [434, 0, 1, "", "cov"], [573, 0, 1, "", "cross"], [603, 0, 1, "", "cross_entropy"], [435, 0, 1, "", "cummax"], [436, 0, 1, "", "cummin"], [663, 0, 1, "", "cumprod"], [664, 0, 1, "", "cumsum"], [330, 0, 1, "", "dct"], [453, 0, 1, "", "default"], [193, 0, 1, "", "deg2rad"], [566, 0, 1, "", "depthwise_conv2d"], [574, 0, 1, "", "det"], [151, 0, 1, "", "dev"], [331, 0, 1, "", "dft"], [575, 0, 1, "", "diag"], [355, 0, 1, "", "diagflat"], [576, 0, 1, "", "diagonal"], [279, 0, 1, "", "diff"], [280, 0, 1, "", "digamma"], [422, 0, 1, "", "dirichlet"], [194, 0, 1, "", "divide"], [567, 0, 1, "", "dropout"], [332, 0, 1, "", "dropout1d"], [333, 0, 1, "", "dropout2d"], [334, 0, 1, "", "dropout3d"], [386, 0, 1, "", "dsplit"], [387, 0, 1, "", "dstack"], [117, 0, 1, "", "dtype"], [357, 0, 1, "", "eig"], [578, 0, 1, "", "eigh"], [358, 0, 1, "", "eigh_tridiagonal"], [359, 0, 1, "", "eigvals"], [579, 0, 1, "", "eigvalsh"], [454, 0, 1, "", "einops_rearrange"], [455, 0, 1, "", "einops_reduce"], [456, 0, 1, "", "einops_repeat"], [665, 0, 1, "", "einsum"], [249, 0, 1, "", "elu"], [335, 0, 1, "", "embedding"], [86, 0, 1, "", "empty_like"], [195, 0, 1, "", "equal"], [196, 0, 1, "", "erf"], [457, 0, 1, "", "exists"], [197, 0, 1, "", "exp"], [198, 0, 1, "", "exp2"], [388, 0, 1, "", "expand"], [608, 0, 1, "", "expand_dims"], [199, 0, 1, "", "expm1"], [259, 0, 1, "", "eye_like"], [336, 0, 1, "", "fft"], [337, 0, 1, "", "fft2"], [389, 0, 1, "", "fill_diagonal"], [119, 0, 1, "", "finfo"], [281, 0, 1, "", "fix"], [390, 0, 1, "", "flatten"], [609, 0, 1, "", "flip"], [391, 0, 1, "", "fliplr"], [392, 0, 1, "", "flipud"], [282, 0, 1, "", "float_power"], [200, 0, 1, "", "floor"], [201, 0, 1, "", "floor_divide"], [283, 0, 1, "", "fmax"], [202, 0, 1, "", "fmin"], [203, 0, 1, "", "fmod"], [393, 0, 1, "", "fold"], [458, 0, 1, "", "fourier_encode"], [284, 0, 1, "", "frexp"], [88, 0, 1, "", "from_dlpack"], [91, 0, 1, "", "full_like"], [423, 0, 1, "", "gamma"], [461, 0, 1, "", "gather"], [462, 0, 1, "", "gather_nd"], [204, 0, 1, "", "gcd"], [59, 0, 1, "", "gelu"], [465, 0, 1, "", "get_num_dims"], [285, 0, 1, "", "gradient"], [527, 0, 1, "", "gradient_descent_update"], [205, 0, 1, "", "greater"], [206, 0, 1, "", "greater_equal"], [415, 0, 1, "", "group_norm"], [60, 0, 1, "", "hardswish"], [467, 0, 1, "", "has_nans"], [394, 0, 1, "", "heaviside"], [437, 0, 1, "", "histogram"], [395, 0, 1, "", "hsplit"], [396, 0, 1, "", "hstack"], [373, 0, 1, "", "huber_loss"], [286, 0, 1, "", "hypot"], [397, 0, 1, "", "i0"], [340, 0, 1, "", "idct"], [341, 0, 1, "", "ifft"], [342, 0, 1, "", "ifftn"], [438, 0, 1, "", "igamma"], [122, 0, 1, "", "iinfo"], [207, 0, 1, "", "imag"], [360, 0, 1, "", "initialize_tucker"], [580, 0, 1, "", "inner"], [469, 0, 1, "", "inplace_decrement"], [470, 0, 1, "", "inplace_increment"], [471, 0, 1, "", "inplace_update"], [416, 0, 1, "", "instance_norm"], [344, 0, 1, "", "interpolate"], [581, 0, 1, "", "inv"], [473, 0, 1, "", "is_array"], [125, 0, 1, "", "is_bool_dtype"], [127, 0, 1, "", "is_float_dtype"], [129, 0, 1, "", "is_int_dtype"], [474, 0, 1, "", "is_ivy_array"], [475, 0, 1, "", "is_ivy_container"], [477, 0, 1, "", "is_native_array"], [131, 0, 1, "", "is_uint_dtype"], [287, 0, 1, "", "isclose"], [208, 0, 1, "", "isfinite"], [478, 0, 1, "", "isin"], [209, 0, 1, "", "isinf"], [210, 0, 1, "", "isnan"], [211, 0, 1, "", "isreal"], [480, 0, 1, "", "itemsize"], [362, 0, 1, "", "kron"], [374, 0, 1, "", "l1_loss"], [417, 0, 1, "", "l1_normalize"], [418, 0, 1, "", "l2_normalize"], [529, 0, 1, "", "lamb_update"], [530, 0, 1, "", "lars_update"], [643, 0, 1, "", "layer_norm"], [212, 0, 1, "", "lcm"], [288, 0, 1, "", "ldexp"], [61, 0, 1, "", "leaky_relu"], [289, 0, 1, "", "lerp"], [213, 0, 1, "", "less"], [214, 0, 1, "", "less_equal"], [427, 0, 1, "", "lexsort"], [290, 0, 1, "", "lgamma"], [568, 0, 1, "", "linear"], [92, 0, 1, "", "linspace"], [215, 0, 1, "", "log"], [216, 0, 1, "", "log10"], [217, 0, 1, "", "log1p"], [218, 0, 1, "", "log2"], [62, 0, 1, "", "log_softmax"], [219, 0, 1, "", "logaddexp"], [220, 0, 1, "", "logaddexp2"], [221, 0, 1, "", "logical_and"], [222, 0, 1, "", "logical_not"], [223, 0, 1, "", "logical_or"], [224, 0, 1, "", "logical_xor"], [250, 0, 1, "", "logit"], [251, 0, 1, "", "logsigmoid"], [93, 0, 1, "", "logspace"], [419, 0, 1, "", "lp_normalize"], [569, 0, 1, "", "lstm_update"], [364, 0, 1, "", "make_svd_non_negative"], [583, 0, 1, "", "matmul"], [398, 0, 1, "", "matricize"], [365, 0, 1, "", "matrix_exp"], [584, 0, 1, "", "matrix_norm"], [585, 0, 1, "", "matrix_power"], [586, 0, 1, "", "matrix_rank"], [587, 0, 1, "", "matrix_transpose"], [666, 0, 1, "", "max"], [345, 0, 1, "", "max_pool1d"], [346, 0, 1, "", "max_pool2d"], [347, 0, 1, "", "max_pool3d"], [225, 0, 1, "", "maximum"], [667, 0, 1, "", "mean"], [439, 0, 1, "", "median"], [94, 0, 1, "", "meshgrid"], [668, 0, 1, "", "min"], [226, 0, 1, "", "minimum"], [63, 0, 1, "", "mish"], [366, 0, 1, "", "mode_dot"], [291, 0, 1, "", "modf"], [399, 0, 1, "", "moveaxis"], [660, 0, 1, "", "msort"], [367, 0, 1, "", "multi_dot"], [570, 0, 1, "", "multi_head_attention"], [368, 0, 1, "", "multi_mode_dot"], [644, 0, 1, "", "multinomial"], [227, 0, 1, "", "multiply"], [228, 0, 1, "", "nan_to_num"], [440, 0, 1, "", "nanmean"], [441, 0, 1, "", "nanmedian"], [292, 0, 1, "", "nansum"], [95, 0, 1, "", "native_array"], [229, 0, 1, "", "negative"], [293, 0, 1, "", "nextafter"], [653, 0, 1, "", "nonzero"], [230, 0, 1, "", "not_equal"], [96, 0, 1, "", "one_hot"], [98, 0, 1, "", "ones_like"], [531, 0, 1, "", "optimizer_update"], [588, 0, 1, "", "outer"], [400, 0, 1, "", "pad"], [401, 0, 1, "", "partial_fold"], [402, 0, 1, "", "partial_tensor_to_vec"], [369, 0, 1, "", "partial_tucker"], [403, 0, 1, "", "partial_unfold"], [404, 0, 1, "", "partial_vec_to_tensor"], [610, 0, 1, "", "permute_dims"], [589, 0, 1, "", "pinv"], [424, 0, 1, "", "poisson"], [231, 0, 1, "", "positive"], [232, 0, 1, "", "pow"], [252, 0, 1, "", "prelu"], [669, 0, 1, "", "prod"], [590, 0, 1, "", "qr"], [442, 0, 1, "", "quantile"], [233, 0, 1, "", "rad2deg"], [645, 0, 1, "", "randint"], [646, 0, 1, "", "random_normal"], [647, 0, 1, "", "random_uniform"], [234, 0, 1, "", "real"], [235, 0, 1, "", "reciprocal"], [299, 0, 1, "", "reduce"], [351, 0, 1, "", "reduce_window"], [64, 0, 1, "", "relu"], [253, 0, 1, "", "relu6"], [236, 0, 1, "", "remainder"], [611, 0, 1, "", "repeat"], [612, 0, 1, "", "reshape"], [134, 0, 1, "", "result_type"], [352, 0, 1, "", "rfftn"], [613, 0, 1, "", "roll"], [406, 0, 1, "", "rot90"], [237, 0, 1, "", "round"], [571, 0, 1, "", "scaled_dot_product_attention"], [485, 0, 1, "", "scatter_flat"], [486, 0, 1, "", "scatter_nd"], [661, 0, 1, "", "searchsorted"], [254, 0, 1, "", "selu"], [499, 0, 1, "", "shape"], [649, 0, 1, "", "shuffle"], [65, 0, 1, "", "sigmoid"], [238, 0, 1, "", "sign"], [294, 0, 1, "", "signbit"], [256, 0, 1, "", "silu"], [239, 0, 1, "", "sin"], [295, 0, 1, "", "sinc"], [240, 0, 1, "", "sinh"], [591, 0, 1, "", "slogdet"], [376, 0, 1, "", "smooth_l1_loss"], [377, 0, 1, "", "soft_margin_loss"], [407, 0, 1, "", "soft_thresholding"], [66, 0, 1, "", "softmax"], [67, 0, 1, "", "softplus"], [592, 0, 1, "", "solve"], [662, 0, 1, "", "sort"], [604, 0, 1, "", "sparse_cross_entropy"], [296, 0, 1, "", "sparsify_tensor"], [614, 0, 1, "", "split"], [241, 0, 1, "", "sqrt"], [242, 0, 1, "", "square"], [615, 0, 1, "", "squeeze"], [500, 0, 1, "", "stable_divide"], [501, 0, 1, "", "stable_pow"], [616, 0, 1, "", "stack"], [670, 0, 1, "", "std"], [532, 0, 1, "", "stop_gradient"], [502, 0, 1, "", "strides"], [243, 0, 1, "", "subtract"], [671, 0, 1, "", "sum"], [503, 0, 1, "", "supports_inplace_updates"], [593, 0, 1, "", "svd"], [370, 0, 1, "", "svd_flip"], [594, 0, 1, "", "svdvals"], [617, 0, 1, "", "swapaxes"], [408, 0, 1, "", "take_along_axis"], [244, 0, 1, "", "tan"], [245, 0, 1, "", "tanh"], [595, 0, 1, "", "tensordot"], [596, 0, 1, "", "tensorsolve"], [257, 0, 1, "", "thresholded_relu"], [618, 0, 1, "", "tile"], [168, 0, 1, "", "to_device"], [505, 0, 1, "", "to_list"], [507, 0, 1, "", "to_numpy"], [508, 0, 1, "", "to_scalar"], [409, 0, 1, "", "top_k"], [597, 0, 1, "", "trace"], [246, 0, 1, "", "trapz"], [99, 0, 1, "", "tril"], [270, 0, 1, "", "trilu"], [100, 0, 1, "", "triu"], [247, 0, 1, "", "trunc"], [248, 0, 1, "", "trunc_divide"], [371, 0, 1, "", "truncated_svd"], [372, 0, 1, "", "tucker"], [410, 0, 1, "", "unfold"], [655, 0, 1, "", "unique_all"], [411, 0, 1, "", "unique_consecutive"], [656, 0, 1, "", "unique_counts"], [657, 0, 1, "", "unique_inverse"], [658, 0, 1, "", "unique_values"], [425, 0, 1, "", "unravel_index"], [271, 0, 1, "", "unsorted_segment_min"], [272, 0, 1, "", "unsorted_segment_sum"], [619, 0, 1, "", "unstack"], [521, 0, 1, "", "value_is_nan"], [598, 0, 1, "", "vander"], [672, 0, 1, "", "var"], [599, 0, 1, "", "vecdot"], [600, 0, 1, "", "vector_norm"], [601, 0, 1, "", "vector_to_skew_symmetric_matrix"], [412, 0, 1, "", "vsplit"], [413, 0, 1, "", "vstack"], [654, 0, 1, "", "where"], [297, 0, 1, "", "xlogy"], [620, 0, 1, "", "zero_pad"], [103, 0, 1, "", "zeros_like"], [298, 0, 1, "", "zeta"]], "ivy": [[542, 1, 1, "", "ArrayMode"], [538, 1, 1, "", "DefaultComplexDtype"], [539, 1, 1, "", "DefaultDevice"], [538, 1, 1, "", "DefaultDtype"], [538, 1, 1, "", "DefaultFloatDtype"], [538, 1, 1, "", "DefaultIntDtype"], [538, 1, 1, "", "DefaultUintDtype"], [320, 1, 1, "", "NativeSparseArray"], [537, 1, 1, "", "NestedSequence"], [542, 1, 1, "", "PreciseMode"], [539, 1, 1, "", "Profiler"], [320, 1, 1, "", "SparseArray"], [174, 2, 1, "", "abs"], [175, 2, 1, "", "acos"], [176, 2, 1, "", "acosh"], [543, 2, 1, "", "adam_step"], [543, 2, 1, "", "adam_update"], [323, 2, 1, "", "adaptive_avg_pool1d"], [324, 2, 1, "", "adaptive_avg_pool2d"], [325, 2, 1, "", "adaptive_max_pool2d"], [177, 2, 1, "", "add"], [353, 2, 1, "", "adjoint"], [556, 2, 1, "", "all"], [443, 2, 1, "", "all_equal"], [549, 2, 1, "", "all_nested_indices"], [274, 2, 1, "", "allclose"], [178, 2, 1, "", "angle"], [556, 2, 1, "", "any"], [537, 2, 1, "", "arange"], [326, 2, 1, "", "area_interpolate"], [444, 2, 1, "", "arg_info"], [445, 2, 1, "", "arg_names"], [552, 2, 1, "", "argmax"], [552, 2, 1, "", "argmin"], [554, 2, 1, "", "argsort"], [552, 2, 1, "", "argwhere"], [537, 2, 1, "", "array"], [446, 2, 1, "", "array_equal"], [147, 2, 1, "", "as_ivy_dev"], [538, 2, 1, "", "as_ivy_dtype"], [148, 2, 1, "", "as_native_dev"], [538, 2, 1, "", "as_native_dtype"], [312, 2, 1, "", "as_strided"], [537, 2, 1, "", "asarray"], [537, 2, 1, "", "asarray_handle_nestable"], [537, 2, 1, "", "asarray_infer_device"], [537, 2, 1, "", "asarray_infer_dtype"], [537, 2, 1, "", "asarray_inputs_to_native_shapes"], [537, 2, 1, "", "asarray_to_native_arrays_and_back"], [179, 2, 1, "", "asin"], [180, 2, 1, "", "asinh"], [447, 2, 1, "", "assert_supports_inplace"], [312, 2, 1, "", "associative_scan"], [538, 2, 1, "", "astype"], [181, 2, 1, "", "atan"], [182, 2, 1, "", "atan2"], [183, 2, 1, "", "atanh"], [312, 2, 1, "", "atleast_1d"], [312, 2, 1, "", "atleast_2d"], [312, 2, 1, "", "atleast_3d"], [327, 2, 1, "", "avg_pool1d"], [328, 2, 1, "", "avg_pool2d"], [329, 2, 1, "", "avg_pool3d"], [315, 2, 1, "", "batch_norm"], [316, 2, 1, "", "bernoulli"], [316, 2, 1, "", "beta"], [275, 2, 1, "", "binarizer"], [546, 2, 1, "", "binary_cross_entropy"], [321, 2, 1, "", "bincount"], [300, 2, 1, "", "bind_custom_gradient_function"], [184, 2, 1, "", "bitwise_and"], [185, 2, 1, "", "bitwise_invert"], [186, 2, 1, "", "bitwise_left_shift"], [187, 2, 1, "", "bitwise_or"], [188, 2, 1, "", "bitwise_right_shift"], [189, 2, 1, "", "bitwise_xor"], [303, 2, 1, "", "blackman_window"], [538, 2, 1, "", "broadcast_arrays"], [312, 2, 1, "", "broadcast_shapes"], [538, 2, 1, "", "broadcast_to"], [448, 2, 1, "", "cache_fn"], [538, 2, 1, "", "can_cast"], [536, 2, 1, "", "cast_bool"], [190, 2, 1, "", "ceil"], [538, 2, 1, "", "check_float"], [545, 2, 1, "", "cholesky"], [312, 2, 1, "", "choose"], [149, 2, 1, "", "clear_cached_mem_on_dev"], [547, 2, 1, "", "clip"], [449, 2, 1, "", "clip_matrix_norm"], [450, 2, 1, "", "clip_vector_norm"], [538, 2, 1, "", "closest_valid_dtype"], [536, 2, 1, "", "cmp_is"], [536, 2, 1, "", "cmp_isnot"], [0, 2, 1, "", "compile"], [547, 2, 1, "", "concat"], [312, 2, 1, "", "concat_from_sequence"], [354, 2, 1, "", "cond"], [276, 2, 1, "", "conj"], [547, 2, 1, "", "constant_pad"], [451, 2, 1, "", "container_types"], [544, 2, 1, "", "conv"], [544, 2, 1, "", "conv1d"], [544, 2, 1, "", "conv1d_transpose"], [544, 2, 1, "", "conv2d"], [544, 2, 1, "", "conv2d_transpose"], [544, 2, 1, "", "conv3d"], [544, 2, 1, "", "conv3d_transpose"], [544, 2, 1, "", "conv_general_dilated"], [544, 2, 1, "", "conv_general_transpose"], [537, 2, 1, "", "copy_array"], [549, 2, 1, "", "copy_nest"], [277, 2, 1, "", "copysign"], [321, 2, 1, "", "corrcoef"], [191, 2, 1, "", "cos"], [192, 2, 1, "", "cosh"], [278, 2, 1, "", "count_nonzero"], [321, 2, 1, "", "cov"], [545, 2, 1, "", "cross"], [546, 2, 1, "", "cross_entropy"], [321, 2, 1, "", "cummax"], [321, 2, 1, "", "cummin"], [555, 2, 1, "", "cumprod"], [555, 2, 1, "", "cumsum"], [452, 2, 1, "", "current_backend_str"], [330, 2, 1, "", "dct"], [453, 2, 1, "", "default"], [538, 2, 1, "", "default_complex_dtype"], [150, 2, 1, "", "default_device"], [538, 2, 1, "", "default_dtype"], [538, 2, 1, "", "default_float_dtype"], [538, 2, 1, "", "default_int_dtype"], [538, 2, 1, "", "default_uint_dtype"], [193, 2, 1, "", "deg2rad"], [544, 2, 1, "", "depthwise_conv2d"], [545, 2, 1, "", "det"], [151, 2, 1, "", "dev"], [152, 2, 1, "", "dev_util"], [331, 2, 1, "", "dft"], [545, 2, 1, "", "diag"], [355, 2, 1, "", "diagflat"], [545, 2, 1, "", "diagonal"], [279, 2, 1, "", "diff"], [280, 2, 1, "", "digamma"], [316, 2, 1, "", "dirichlet"], [194, 2, 1, "", "divide"], [356, 2, 1, "", "dot"], [544, 2, 1, "", "dropout"], [332, 2, 1, "", "dropout1d"], [333, 2, 1, "", "dropout2d"], [334, 2, 1, "", "dropout3d"], [312, 2, 1, "", "dsplit"], [312, 2, 1, "", "dstack"], [538, 2, 1, "", "dtype"], [538, 2, 1, "", "dtype_bits"], [549, 2, 1, "", "duplicate_array_index_chains"], [535, 6, 1, "", "e"], [357, 2, 1, "", "eig"], [545, 2, 1, "", "eigh"], [358, 2, 1, "", "eigh_tridiagonal"], [359, 2, 1, "", "eigvals"], [545, 2, 1, "", "eigvalsh"], [454, 2, 1, "", "einops_rearrange"], [455, 2, 1, "", "einops_reduce"], [456, 2, 1, "", "einops_repeat"], [555, 2, 1, "", "einsum"], [301, 2, 1, "", "elu"], [335, 2, 1, "", "embedding"], [537, 2, 1, "", "empty"], [537, 2, 1, "", "empty_like"], [195, 2, 1, "", "equal"], [196, 2, 1, "", "erf"], [543, 2, 1, "", "execute_with_gradients"], [457, 2, 1, "", "exists"], [197, 2, 1, "", "exp"], [198, 2, 1, "", "exp2"], [312, 2, 1, "", "expand"], [547, 2, 1, "", "expand_dims"], [199, 2, 1, "", "expm1"], [537, 2, 1, "", "eye"], [303, 2, 1, "", "eye_like"], [336, 2, 1, "", "fft"], [337, 2, 1, "", "fft2"], [312, 2, 1, "", "fill_diagonal"], [538, 2, 1, "", "finfo"], [281, 2, 1, "", "fix"], [312, 2, 1, "", "flatten"], [547, 2, 1, "", "flip"], [312, 2, 1, "", "fliplr"], [312, 2, 1, "", "flipud"], [282, 2, 1, "", "float_power"], [200, 2, 1, "", "floor"], [201, 2, 1, "", "floor_divide"], [283, 2, 1, "", "fmax"], [202, 2, 1, "", "fmin"], [203, 2, 1, "", "fmod"], [312, 2, 1, "", "fold"], [548, 2, 1, "", "fomaml_step"], [536, 2, 1, "", "for_loop"], [458, 2, 1, "", "fourier_encode"], [284, 2, 1, "", "frexp"], [537, 2, 1, "", "from_dlpack"], [537, 2, 1, "", "frombuffer"], [537, 2, 1, "", "full"], [537, 2, 1, "", "full_like"], [153, 2, 1, "", "function_supported_devices"], [459, 2, 1, "", "function_supported_devices_and_dtypes"], [538, 2, 1, "", "function_supported_dtypes"], [154, 2, 1, "", "function_unsupported_devices"], [460, 2, 1, "", "function_unsupported_devices_and_dtypes"], [538, 2, 1, "", "function_unsupported_dtypes"], [316, 2, 1, "", "gamma"], [461, 2, 1, "", "gather"], [462, 2, 1, "", "gather_nd"], [204, 2, 1, "", "gcd"], [59, 2, 1, "", "gelu"], [338, 2, 1, "", "generate_einsum_equation"], [463, 2, 1, "", "get_all_arrays_in_memory"], [155, 2, 1, "", "get_all_ivy_arrays_on_dev"], [339, 2, 1, "", "get_interpolate_kernel"], [464, 2, 1, "", "get_item"], [465, 2, 1, "", "get_num_dims"], [466, 2, 1, "", "get_referrers_recursive"], [156, 2, 1, "", "gpu_is_available"], [543, 2, 1, "", "grad"], [285, 2, 1, "", "gradient"], [543, 2, 1, "", "gradient_descent_update"], [205, 2, 1, "", "greater"], [206, 2, 1, "", "greater_equal"], [315, 2, 1, "", "group_norm"], [303, 2, 1, "", "hamming_window"], [157, 2, 1, "", "handle_soft_device_variable"], [303, 2, 1, "", "hann_window"], [60, 2, 1, "", "hardswish"], [467, 2, 1, "", "has_nans"], [312, 2, 1, "", "heaviside"], [321, 2, 1, "", "histogram"], [312, 2, 1, "", "hsplit"], [312, 2, 1, "", "hstack"], [311, 2, 1, "", "huber_loss"], [286, 2, 1, "", "hypot"], [312, 2, 1, "", "i0"], [340, 2, 1, "", "idct"], [536, 2, 1, "", "if_else"], [341, 2, 1, "", "ifft"], [342, 2, 1, "", "ifftn"], [321, 2, 1, "", "igamma"], [122, 2, 1, "", "iinfo"], [207, 2, 1, "", "imag"], [549, 2, 1, "", "index_nest"], [303, 2, 1, "", "indices"], [535, 6, 1, "", "inf"], [123, 2, 1, "", "infer_default_dtype"], [360, 2, 1, "", "initialize_tucker"], [545, 2, 1, "", "inner"], [468, 2, 1, "", "inplace_arrays_supported"], [469, 2, 1, "", "inplace_decrement"], [470, 2, 1, "", "inplace_increment"], [471, 2, 1, "", "inplace_update"], [472, 2, 1, "", "inplace_variables_supported"], [549, 2, 1, "", "insert_into_nest_at_index"], [549, 2, 1, "", "insert_into_nest_at_indices"], [315, 2, 1, "", "instance_norm"], [343, 2, 1, "", "interp"], [344, 2, 1, "", "interpolate"], [545, 2, 1, "", "inv"], [124, 2, 1, "", "invalid_dtype"], [319, 2, 1, "", "invert_permutation"], [473, 2, 1, "", "is_array"], [125, 2, 1, "", "is_bool_dtype"], [126, 2, 1, "", "is_complex_dtype"], [127, 2, 1, "", "is_float_dtype"], [128, 2, 1, "", "is_hashable_dtype"], [129, 2, 1, "", "is_int_dtype"], [474, 2, 1, "", "is_ivy_array"], [475, 2, 1, "", "is_ivy_container"], [476, 2, 1, "", "is_ivy_nested_array"], [320, 2, 1, "", "is_ivy_sparse_array"], [477, 2, 1, "", "is_native_array"], [130, 2, 1, "", "is_native_dtype"], [320, 2, 1, "", "is_native_sparse_array"], [131, 2, 1, "", "is_uint_dtype"], [287, 2, 1, "", "isclose"], [208, 2, 1, "", "isfinite"], [478, 2, 1, "", "isin"], [209, 2, 1, "", "isinf"], [210, 2, 1, "", "isnan"], [211, 2, 1, "", "isreal"], [479, 2, 1, "", "isscalar"], [480, 2, 1, "", "itemsize"], [543, 2, 1, "", "jac"], [303, 2, 1, "", "kaiser_bessel_derived_window"], [303, 2, 1, "", "kaiser_window"], [361, 2, 1, "", "khatri_rao"], [362, 2, 1, "", "kron"], [363, 2, 1, "", "kronecker"], [311, 2, 1, "", "l1_loss"], [315, 2, 1, "", "l1_normalize"], [315, 2, 1, "", "l2_normalize"], [543, 2, 1, "", "lamb_update"], [543, 2, 1, "", "lars_update"], [550, 2, 1, "", "layer_norm"], [212, 2, 1, "", "lcm"], [288, 2, 1, "", "ldexp"], [534, 2, 1, "", "leaky_relu"], [289, 2, 1, "", "lerp"], [213, 2, 1, "", "less"], [214, 2, 1, "", "less_equal"], [319, 2, 1, "", "lexsort"], [290, 2, 1, "", "lgamma"], [544, 2, 1, "", "linear"], [537, 2, 1, "", "linspace"], [215, 2, 1, "", "log"], [216, 2, 1, "", "log10"], [217, 2, 1, "", "log1p"], [218, 2, 1, "", "log2"], [311, 2, 1, "", "log_poisson_loss"], [534, 2, 1, "", "log_softmax"], [219, 2, 1, "", "logaddexp"], [220, 2, 1, "", "logaddexp2"], [221, 2, 1, "", "logical_and"], [222, 2, 1, "", "logical_not"], [223, 2, 1, "", "logical_or"], [224, 2, 1, "", "logical_xor"], [301, 2, 1, "", "logit"], [301, 2, 1, "", "logsigmoid"], [537, 2, 1, "", "logspace"], [315, 2, 1, "", "lp_normalize"], [544, 2, 1, "", "lstm_update"], [545, 2, 1, "", "lu_factor"], [364, 2, 1, "", "make_svd_non_negative"], [548, 2, 1, "", "maml_step"], [549, 2, 1, "", "map"], [549, 2, 1, "", "map_nest_at_index"], [549, 2, 1, "", "map_nest_at_indices"], [481, 2, 1, "", "match_kwargs"], [545, 2, 1, "", "matmul"], [312, 2, 1, "", "matricize"], [365, 2, 1, "", "matrix_exp"], [545, 2, 1, "", "matrix_norm"], [545, 2, 1, "", "matrix_power"], [545, 2, 1, "", "matrix_rank"], [545, 2, 1, "", "matrix_transpose"], [555, 2, 1, "", "max"], [345, 2, 1, "", "max_pool1d"], [346, 2, 1, "", "max_pool2d"], [347, 2, 1, "", "max_pool3d"], [348, 2, 1, "", "max_unpool1d"], [225, 2, 1, "", "maximum"], [555, 2, 1, "", "mean"], [321, 2, 1, "", "median"], [537, 2, 1, "", "meshgrid"], [555, 2, 1, "", "min"], [226, 2, 1, "", "minimum"], [534, 2, 1, "", "mish"], [310, 2, 1, "", "mode_dot"], [291, 2, 1, "", "modf"], [312, 2, 1, "", "moveaxis"], [554, 2, 1, "", "msort"], [310, 2, 1, "", "multi_dot"], [544, 2, 1, "", "multi_head_attention"], [549, 2, 1, "", "multi_index_nest"], [310, 2, 1, "", "multi_mode_dot"], [551, 2, 1, "", "multinomial"], [227, 2, 1, "", "multiply"], [482, 2, 1, "", "multiprocessing"], [535, 6, 1, "", "nan"], [228, 2, 1, "", "nan_to_num"], [321, 2, 1, "", "nanmean"], [321, 2, 1, "", "nanmedian"], [292, 2, 1, "", "nansum"], [537, 2, 1, "", "native_array"], [320, 2, 1, "", "native_sparse_array"], [320, 2, 1, "", "native_sparse_array_to_indices_values_and_shape"], [303, 2, 1, "", "ndenumerate"], [303, 2, 1, "", "ndindex"], [349, 2, 1, "", "nearest_interpolate"], [229, 2, 1, "", "negative"], [549, 2, 1, "", "nested_any"], [549, 2, 1, "", "nested_argwhere"], [549, 2, 1, "", "nested_map"], [549, 2, 1, "", "nested_multi_map"], [535, 6, 1, "", "newaxis"], [293, 2, 1, "", "nextafter"], [552, 2, 1, "", "nonzero"], [230, 2, 1, "", "not_equal"], [483, 2, 1, "", "num_arrays_in_memory"], [158, 2, 1, "", "num_cpu_cores"], [159, 2, 1, "", "num_gpus"], [160, 2, 1, "", "num_ivy_arrays_on_dev"], [537, 2, 1, "", "one_hot"], [537, 2, 1, "", "ones"], [537, 2, 1, "", "ones_like"], [543, 2, 1, "", "optimizer_update"], [545, 2, 1, "", "outer"], [312, 2, 1, "", "pad"], [312, 2, 1, "", "partial_fold"], [312, 2, 1, "", "partial_tensor_to_vec"], [310, 2, 1, "", "partial_tucker"], [312, 2, 1, "", "partial_unfold"], [312, 2, 1, "", "partial_vec_to_tensor"], [161, 2, 1, "", "percent_used_mem_on_dev"], [547, 2, 1, "", "permute_dims"], [535, 6, 1, "", "pi"], [545, 2, 1, "", "pinv"], [316, 2, 1, "", "poisson"], [350, 2, 1, "", "pool"], [231, 2, 1, "", "positive"], [232, 2, 1, "", "pow"], [301, 2, 1, "", "prelu"], [484, 2, 1, "", "print_all_arrays_in_memory"], [162, 2, 1, "", "print_all_ivy_arrays_on_dev"], [555, 2, 1, "", "prod"], [132, 2, 1, "", "promote_types"], [133, 2, 1, "", "promote_types_of_inputs"], [549, 2, 1, "", "prune_empty"], [549, 2, 1, "", "prune_nest_at_index"], [549, 2, 1, "", "prune_nest_at_indices"], [312, 2, 1, "", "put_along_axis"], [545, 2, 1, "", "qr"], [321, 2, 1, "", "quantile"], [233, 2, 1, "", "rad2deg"], [551, 2, 1, "", "randint"], [303, 2, 1, "", "random_cp"], [551, 2, 1, "", "random_normal"], [303, 2, 1, "", "random_tucker"], [551, 2, 1, "", "random_uniform"], [234, 2, 1, "", "real"], [235, 2, 1, "", "reciprocal"], [299, 2, 1, "", "reduce"], [351, 2, 1, "", "reduce_window"], [534, 2, 1, "", "relu"], [301, 2, 1, "", "relu6"], [236, 2, 1, "", "remainder"], [547, 2, 1, "", "repeat"], [548, 2, 1, "", "reptile_step"], [547, 2, 1, "", "reshape"], [134, 2, 1, "", "result_type"], [352, 2, 1, "", "rfftn"], [547, 2, 1, "", "roll"], [312, 2, 1, "", "rot90"], [237, 2, 1, "", "round"], [556, 2, 1, "", "save"], [544, 2, 1, "", "scaled_dot_product_attention"], [485, 2, 1, "", "scatter_flat"], [486, 2, 1, "", "scatter_nd"], [554, 2, 1, "", "searchsorted"], [551, 2, 1, "", "seed"], [301, 2, 1, "", "selu"], [301, 2, 1, "", "sequence_length"], [487, 2, 1, "", "set_array_mode"], [135, 2, 1, "", "set_default_complex_dtype"], [163, 2, 1, "", "set_default_device"], [136, 2, 1, "", "set_default_dtype"], [137, 2, 1, "", "set_default_float_dtype"], [138, 2, 1, "", "set_default_int_dtype"], [139, 2, 1, "", "set_default_uint_dtype"], [542, 2, 1, "", "set_exception_trace_mode"], [542, 2, 1, "", "set_inplace_mode"], [542, 2, 1, "", "set_item"], [542, 2, 1, "", "set_min_base"], [542, 2, 1, "", "set_min_denominator"], [549, 2, 1, "", "set_nest_at_index"], [549, 2, 1, "", "set_nest_at_indices"], [542, 2, 1, "", "set_nestable_mode"], [542, 2, 1, "", "set_precise_mode"], [542, 2, 1, "", "set_queue_timeout"], [542, 2, 1, "", "set_shape_array_mode"], [542, 2, 1, "", "set_show_func_wrapper_trace_mode"], [164, 2, 1, "", "set_soft_device_mode"], [165, 2, 1, "", "set_split_factor"], [542, 2, 1, "", "set_tmp_dir"], [542, 2, 1, "", "shape"], [551, 2, 1, "", "shuffle"], [534, 2, 1, "", "sigmoid"], [238, 2, 1, "", "sign"], [294, 2, 1, "", "signbit"], [301, 2, 1, "", "silu"], [239, 2, 1, "", "sin"], [295, 2, 1, "", "sinc"], [240, 2, 1, "", "sinh"], [545, 2, 1, "", "slogdet"], [311, 2, 1, "", "smooth_l1_loss"], [311, 2, 1, "", "soft_margin_loss"], [312, 2, 1, "", "soft_thresholding"], [534, 2, 1, "", "softmax"], [534, 2, 1, "", "softplus"], [534, 2, 1, "", "softsign"], [545, 2, 1, "", "solve"], [554, 2, 1, "", "sort"], [546, 2, 1, "", "sparse_cross_entropy"], [296, 2, 1, "", "sparsify_tensor"], [547, 2, 1, "", "split"], [166, 2, 1, "", "split_factor"], [167, 2, 1, "", "split_func_call"], [241, 2, 1, "", "sqrt"], [242, 2, 1, "", "square"], [547, 2, 1, "", "squeeze"], [542, 2, 1, "", "stable_divide"], [542, 2, 1, "", "stable_pow"], [547, 2, 1, "", "stack"], [555, 2, 1, "", "std"], [543, 2, 1, "", "stop_gradient"], [542, 2, 1, "", "strides"], [243, 2, 1, "", "subtract"], [555, 2, 1, "", "sum"], [542, 2, 1, "", "supports_inplace_updates"], [545, 2, 1, "", "svd"], [310, 2, 1, "", "svd_flip"], [545, 2, 1, "", "svdvals"], [547, 2, 1, "", "swapaxes"], [312, 2, 1, "", "take_along_axis"], [244, 2, 1, "", "tan"], [245, 2, 1, "", "tanh"], [545, 2, 1, "", "tensordot"], [545, 2, 1, "", "tensorsolve"], [301, 2, 1, "", "thresholded_relu"], [547, 2, 1, "", "tile"], [168, 2, 1, "", "to_device"], [542, 2, 1, "", "to_ivy_shape"], [542, 2, 1, "", "to_list"], [542, 2, 1, "", "to_native_shape"], [542, 2, 1, "", "to_numpy"], [542, 2, 1, "", "to_scalar"], [312, 2, 1, "", "top_k"], [169, 2, 1, "", "total_mem_on_dev"], [170, 2, 1, "", "tpu_is_available"], [545, 2, 1, "", "trace"], [2, 2, 1, "", "transpile"], [246, 2, 1, "", "trapz"], [537, 2, 1, "", "tril"], [303, 2, 1, "", "tril_indices"], [303, 2, 1, "", "trilu"], [537, 2, 1, "", "triu"], [537, 2, 1, "", "triu_indices"], [247, 2, 1, "", "trunc"], [248, 2, 1, "", "trunc_divide"], [310, 2, 1, "", "truncated_svd"], [542, 2, 1, "", "try_else_none"], [536, 2, 1, "", "try_except"], [310, 2, 1, "", "tucker"], [140, 2, 1, "", "type_promote_arrays"], [312, 2, 1, "", "unfold"], [2, 2, 1, "", "unify"], [553, 2, 1, "", "unique_all"], [312, 2, 1, "", "unique_consecutive"], [553, 2, 1, "", "unique_counts"], [553, 2, 1, "", "unique_inverse"], [553, 2, 1, "", "unique_values"], [317, 2, 1, "", "unravel_index"], [542, 2, 1, "", "unset_array_mode"], [141, 2, 1, "", "unset_default_complex_dtype"], [171, 2, 1, "", "unset_default_device"], [142, 2, 1, "", "unset_default_dtype"], [143, 2, 1, "", "unset_default_float_dtype"], [144, 2, 1, "", "unset_default_int_dtype"], [145, 2, 1, "", "unset_default_uint_dtype"], [542, 2, 1, "", "unset_exception_trace_mode"], [542, 2, 1, "", "unset_inplace_mode"], [542, 2, 1, "", "unset_min_base"], [542, 2, 1, "", "unset_min_denominator"], [542, 2, 1, "", "unset_nestable_mode"], [542, 2, 1, "", "unset_precise_mode"], [542, 2, 1, "", "unset_queue_timeout"], [542, 2, 1, "", "unset_shape_array_mode"], [542, 2, 1, "", "unset_show_func_wrapper_trace_mode"], [172, 2, 1, "", "unset_soft_device_mode"], [542, 2, 1, "", "unset_tmp_dir"], [303, 2, 1, "", "unsorted_segment_min"], [303, 2, 1, "", "unsorted_segment_sum"], [547, 2, 1, "", "unstack"], [173, 2, 1, "", "used_mem_on_dev"], [146, 2, 1, "", "valid_dtype"], [543, 2, 1, "", "value_and_grad"], [542, 2, 1, "", "value_is_nan"], [545, 2, 1, "", "vander"], [555, 2, 1, "", "var"], [545, 2, 1, "", "vecdot"], [545, 2, 1, "", "vector_norm"], [545, 2, 1, "", "vector_to_skew_symmetric_matrix"], [542, 2, 1, "", "vmap"], [303, 2, 1, "", "vorbis_window"], [312, 2, 1, "", "vsplit"], [312, 2, 1, "", "vstack"], [552, 2, 1, "", "where"], [536, 2, 1, "", "while_loop"], [297, 2, 1, "", "xlogy"], [547, 2, 1, "", "zero_pad"], [537, 2, 1, "", "zeros"], [537, 2, 1, "", "zeros_like"], [298, 2, 1, "", "zeta"]], "ivy.Container": [[174, 0, 1, "", "abs"], [175, 0, 1, "", "acos"], [176, 0, 1, "", "acosh"], [523, 0, 1, "", "adam_step"], [524, 0, 1, "", "adam_update"], [323, 0, 1, "", "adaptive_avg_pool1d"], [324, 0, 1, "", "adaptive_avg_pool2d"], [325, 0, 1, "", "adaptive_max_pool2d"], [177, 0, 1, "", "add"], [353, 0, 1, "", "adjoint"], [673, 0, 1, "", "all"], [443, 0, 1, "", "all_equal"], [274, 0, 1, "", "allclose"], [178, 0, 1, "", "angle"], [674, 0, 1, "", "any"], [650, 0, 1, "", "argmax"], [651, 0, 1, "", "argmin"], [659, 0, 1, "", "argsort"], [652, 0, 1, "", "argwhere"], [446, 0, 1, "", "array_equal"], [378, 0, 1, "", "as_strided"], [78, 0, 1, "", "asarray"], [179, 0, 1, "", "asin"], [180, 0, 1, "", "asinh"], [447, 0, 1, "", "assert_supports_inplace"], [379, 0, 1, "", "associative_scan"], [106, 0, 1, "", "astype"], [181, 0, 1, "", "atan"], [182, 0, 1, "", "atan2"], [183, 0, 1, "", "atanh"], [380, 0, 1, "", "atleast_1d"], [381, 0, 1, "", "atleast_2d"], [382, 0, 1, "", "atleast_3d"], [327, 0, 1, "", "avg_pool1d"], [328, 0, 1, "", "avg_pool2d"], [329, 0, 1, "", "avg_pool3d"], [414, 0, 1, "", "batch_norm"], [420, 0, 1, "", "bernoulli"], [421, 0, 1, "", "beta"], [275, 0, 1, "", "binarizer"], [602, 0, 1, "", "binary_cross_entropy"], [432, 0, 1, "", "bincount"], [184, 0, 1, "", "bitwise_and"], [185, 0, 1, "", "bitwise_invert"], [186, 0, 1, "", "bitwise_left_shift"], [187, 0, 1, "", "bitwise_or"], [188, 0, 1, "", "bitwise_right_shift"], [189, 0, 1, "", "bitwise_xor"], [258, 0, 1, "", "blackman_window"], [107, 0, 1, "", "broadcast_arrays"], [383, 0, 1, "", "broadcast_shapes"], [108, 0, 1, "", "broadcast_to"], [109, 0, 1, "", "can_cast"], [190, 0, 1, "", "ceil"], [572, 0, 1, "", "cholesky"], [605, 0, 1, "", "clip"], [449, 0, 1, "", "clip_matrix_norm"], [450, 0, 1, "", "clip_vector_norm"], [606, 0, 1, "", "concat"], [385, 0, 1, "", "concat_from_sequence"], [354, 0, 1, "", "cond"], [276, 0, 1, "", "conj"], [607, 0, 1, "", "constant_pad"], [558, 0, 1, "", "conv1d"], [559, 0, 1, "", "conv1d_transpose"], [560, 0, 1, "", "conv2d"], [561, 0, 1, "", "conv2d_transpose"], [562, 0, 1, "", "conv3d"], [563, 0, 1, "", "conv3d_transpose"], [84, 0, 1, "", "copy_array"], [277, 0, 1, "", "copysign"], [433, 0, 1, "", "corrcoef"], [191, 0, 1, "", "cos"], [192, 0, 1, "", "cosh"], [278, 0, 1, "", "count_nonzero"], [434, 0, 1, "", "cov"], [573, 0, 1, "", "cross"], [603, 0, 1, "", "cross_entropy"], [435, 0, 1, "", "cummax"], [436, 0, 1, "", "cummin"], [663, 0, 1, "", "cumprod"], [664, 0, 1, "", "cumsum"], [330, 0, 1, "", "dct"], [193, 0, 1, "", "deg2rad"], [566, 0, 1, "", "depthwise_conv2d"], [574, 0, 1, "", "det"], [151, 0, 1, "", "dev"], [331, 0, 1, "", "dft"], [575, 0, 1, "", "diag"], [355, 0, 1, "", "diagflat"], [576, 0, 1, "", "diagonal"], [279, 0, 1, "", "diff"], [280, 0, 1, "", "digamma"], [422, 0, 1, "", "dirichlet"], [194, 0, 1, "", "divide"], [567, 0, 1, "", "dropout"], [332, 0, 1, "", "dropout1d"], [333, 0, 1, "", "dropout2d"], [334, 0, 1, "", "dropout3d"], [386, 0, 1, "", "dsplit"], [387, 0, 1, "", "dstack"], [117, 0, 1, "", "dtype"], [357, 0, 1, "", "eig"], [578, 0, 1, "", "eigh"], [358, 0, 1, "", "eigh_tridiagonal"], [359, 0, 1, "", "eigvals"], [579, 0, 1, "", "eigvalsh"], [454, 0, 1, "", "einops_rearrange"], [455, 0, 1, "", "einops_reduce"], [456, 0, 1, "", "einops_repeat"], [665, 0, 1, "", "einsum"], [249, 0, 1, "", "elu"], [335, 0, 1, "", "embedding"], [86, 0, 1, "", "empty_like"], [195, 0, 1, "", "equal"], [196, 0, 1, "", "erf"], [197, 0, 1, "", "exp"], [198, 0, 1, "", "exp2"], [388, 0, 1, "", "expand"], [608, 0, 1, "", "expand_dims"], [199, 0, 1, "", "expm1"], [259, 0, 1, "", "eye_like"], [336, 0, 1, "", "fft"], [389, 0, 1, "", "fill_diagonal"], [119, 0, 1, "", "finfo"], [281, 0, 1, "", "fix"], [390, 0, 1, "", "flatten"], [609, 0, 1, "", "flip"], [391, 0, 1, "", "fliplr"], [392, 0, 1, "", "flipud"], [282, 0, 1, "", "float_power"], [200, 0, 1, "", "floor"], [201, 0, 1, "", "floor_divide"], [283, 0, 1, "", "fmax"], [202, 0, 1, "", "fmin"], [203, 0, 1, "", "fmod"], [393, 0, 1, "", "fold"], [458, 0, 1, "", "fourier_encode"], [284, 0, 1, "", "frexp"], [88, 0, 1, "", "from_dlpack"], [89, 0, 1, "", "frombuffer"], [91, 0, 1, "", "full_like"], [423, 0, 1, "", "gamma"], [461, 0, 1, "", "gather"], [462, 0, 1, "", "gather_nd"], [204, 0, 1, "", "gcd"], [59, 0, 1, "", "gelu"], [465, 0, 1, "", "get_num_dims"], [285, 0, 1, "", "gradient"], [527, 0, 1, "", "gradient_descent_update"], [205, 0, 1, "", "greater"], [206, 0, 1, "", "greater_equal"], [415, 0, 1, "", "group_norm"], [260, 0, 1, "", "hamming_window"], [261, 0, 1, "", "hann_window"], [60, 0, 1, "", "hardswish"], [467, 0, 1, "", "has_nans"], [394, 0, 1, "", "heaviside"], [437, 0, 1, "", "histogram"], [395, 0, 1, "", "hsplit"], [396, 0, 1, "", "hstack"], [373, 0, 1, "", "huber_loss"], [286, 0, 1, "", "hypot"], [397, 0, 1, "", "i0"], [340, 0, 1, "", "idct"], [341, 0, 1, "", "ifft"], [342, 0, 1, "", "ifftn"], [438, 0, 1, "", "igamma"], [122, 0, 1, "", "iinfo"], [207, 0, 1, "", "imag"], [360, 0, 1, "", "initialize_tucker"], [580, 0, 1, "", "inner"], [469, 0, 1, "", "inplace_decrement"], [470, 0, 1, "", "inplace_increment"], [471, 0, 1, "", "inplace_update"], [416, 0, 1, "", "instance_norm"], [344, 0, 1, "", "interpolate"], [581, 0, 1, "", "inv"], [426, 0, 1, "", "invert_permutation"], [473, 0, 1, "", "is_array"], [125, 0, 1, "", "is_bool_dtype"], [126, 0, 1, "", "is_complex_dtype"], [127, 0, 1, "", "is_float_dtype"], [129, 0, 1, "", "is_int_dtype"], [474, 0, 1, "", "is_ivy_array"], [477, 0, 1, "", "is_native_array"], [131, 0, 1, "", "is_uint_dtype"], [287, 0, 1, "", "isclose"], [208, 0, 1, "", "isfinite"], [478, 0, 1, "", "isin"], [209, 0, 1, "", "isinf"], [210, 0, 1, "", "isnan"], [211, 0, 1, "", "isreal"], [480, 0, 1, "", "itemsize"], [263, 0, 1, "", "kaiser_bessel_derived_window"], [264, 0, 1, "", "kaiser_window"], [362, 0, 1, "", "kron"], [374, 0, 1, "", "l1_loss"], [417, 0, 1, "", "l1_normalize"], [418, 0, 1, "", "l2_normalize"], [529, 0, 1, "", "lamb_update"], [530, 0, 1, "", "lars_update"], [643, 0, 1, "", "layer_norm"], [212, 0, 1, "", "lcm"], [288, 0, 1, "", "ldexp"], [61, 0, 1, "", "leaky_relu"], [289, 0, 1, "", "lerp"], [213, 0, 1, "", "less"], [214, 0, 1, "", "less_equal"], [427, 0, 1, "", "lexsort"], [568, 0, 1, "", "linear"], [92, 0, 1, "", "linspace"], [215, 0, 1, "", "log"], [216, 0, 1, "", "log10"], [217, 0, 1, "", "log1p"], [218, 0, 1, "", "log2"], [62, 0, 1, "", "log_softmax"], [219, 0, 1, "", "logaddexp"], [220, 0, 1, "", "logaddexp2"], [221, 0, 1, "", "logical_and"], [222, 0, 1, "", "logical_not"], [223, 0, 1, "", "logical_or"], [224, 0, 1, "", "logical_xor"], [250, 0, 1, "", "logit"], [251, 0, 1, "", "logsigmoid"], [93, 0, 1, "", "logspace"], [419, 0, 1, "", "lp_normalize"], [569, 0, 1, "", "lstm_update"], [364, 0, 1, "", "make_svd_non_negative"], [583, 0, 1, "", "matmul"], [398, 0, 1, "", "matricize"], [365, 0, 1, "", "matrix_exp"], [584, 0, 1, "", "matrix_norm"], [585, 0, 1, "", "matrix_power"], [586, 0, 1, "", "matrix_rank"], [587, 0, 1, "", "matrix_transpose"], [666, 0, 1, "", "max"], [345, 0, 1, "", "max_pool1d"], [346, 0, 1, "", "max_pool2d"], [347, 0, 1, "", "max_pool3d"], [225, 0, 1, "", "maximum"], [667, 0, 1, "", "mean"], [439, 0, 1, "", "median"], [94, 0, 1, "", "meshgrid"], [668, 0, 1, "", "min"], [226, 0, 1, "", "minimum"], [63, 0, 1, "", "mish"], [366, 0, 1, "", "mode_dot"], [291, 0, 1, "", "modf"], [399, 0, 1, "", "moveaxis"], [660, 0, 1, "", "msort"], [367, 0, 1, "", "multi_dot"], [570, 0, 1, "", "multi_head_attention"], [368, 0, 1, "", "multi_mode_dot"], [644, 0, 1, "", "multinomial"], [227, 0, 1, "", "multiply"], [228, 0, 1, "", "nan_to_num"], [440, 0, 1, "", "nanmean"], [441, 0, 1, "", "nanmedian"], [292, 0, 1, "", "nansum"], [95, 0, 1, "", "native_array"], [229, 0, 1, "", "negative"], [293, 0, 1, "", "nextafter"], [653, 0, 1, "", "nonzero"], [230, 0, 1, "", "not_equal"], [96, 0, 1, "", "one_hot"], [98, 0, 1, "", "ones_like"], [531, 0, 1, "", "optimizer_update"], [588, 0, 1, "", "outer"], [400, 0, 1, "", "pad"], [401, 0, 1, "", "partial_fold"], [402, 0, 1, "", "partial_tensor_to_vec"], [369, 0, 1, "", "partial_tucker"], [403, 0, 1, "", "partial_unfold"], [404, 0, 1, "", "partial_vec_to_tensor"], [610, 0, 1, "", "permute_dims"], [589, 0, 1, "", "pinv"], [424, 0, 1, "", "poisson"], [231, 0, 1, "", "positive"], [232, 0, 1, "", "pow"], [252, 0, 1, "", "prelu"], [669, 0, 1, "", "prod"], [590, 0, 1, "", "qr"], [442, 0, 1, "", "quantile"], [233, 0, 1, "", "rad2deg"], [645, 0, 1, "", "randint"], [646, 0, 1, "", "random_normal"], [647, 0, 1, "", "random_uniform"], [234, 0, 1, "", "real"], [235, 0, 1, "", "reciprocal"], [299, 0, 1, "", "reduce"], [351, 0, 1, "", "reduce_window"], [64, 0, 1, "", "relu"], [253, 0, 1, "", "relu6"], [236, 0, 1, "", "remainder"], [611, 0, 1, "", "repeat"], [612, 0, 1, "", "reshape"], [134, 0, 1, "", "result_type"], [352, 0, 1, "", "rfftn"], [613, 0, 1, "", "roll"], [406, 0, 1, "", "rot90"], [237, 0, 1, "", "round"], [571, 0, 1, "", "scaled_dot_product_attention"], [485, 0, 1, "", "scatter_flat"], [486, 0, 1, "", "scatter_nd"], [661, 0, 1, "", "searchsorted"], [254, 0, 1, "", "selu"], [649, 0, 1, "", "shuffle"], [65, 0, 1, "", "sigmoid"], [238, 0, 1, "", "sign"], [294, 0, 1, "", "signbit"], [256, 0, 1, "", "silu"], [239, 0, 1, "", "sin"], [295, 0, 1, "", "sinc"], [240, 0, 1, "", "sinh"], [591, 0, 1, "", "slogdet"], [376, 0, 1, "", "smooth_l1_loss"], [377, 0, 1, "", "soft_margin_loss"], [407, 0, 1, "", "soft_thresholding"], [66, 0, 1, "", "softmax"], [67, 0, 1, "", "softplus"], [592, 0, 1, "", "solve"], [662, 0, 1, "", "sort"], [604, 0, 1, "", "sparse_cross_entropy"], [296, 0, 1, "", "sparsify_tensor"], [614, 0, 1, "", "split"], [241, 0, 1, "", "sqrt"], [242, 0, 1, "", "square"], [615, 0, 1, "", "squeeze"], [500, 0, 1, "", "stable_divide"], [501, 0, 1, "", "stable_pow"], [616, 0, 1, "", "stack"], [670, 0, 1, "", "std"], [532, 0, 1, "", "stop_gradient"], [502, 0, 1, "", "strides"], [243, 0, 1, "", "subtract"], [671, 0, 1, "", "sum"], [503, 0, 1, "", "supports_inplace_updates"], [593, 0, 1, "", "svd"], [370, 0, 1, "", "svd_flip"], [594, 0, 1, "", "svdvals"], [617, 0, 1, "", "swapaxes"], [408, 0, 1, "", "take_along_axis"], [244, 0, 1, "", "tan"], [245, 0, 1, "", "tanh"], [595, 0, 1, "", "tensordot"], [596, 0, 1, "", "tensorsolve"], [257, 0, 1, "", "thresholded_relu"], [618, 0, 1, "", "tile"], [168, 0, 1, "", "to_device"], [505, 0, 1, "", "to_list"], [507, 0, 1, "", "to_numpy"], [508, 0, 1, "", "to_scalar"], [409, 0, 1, "", "top_k"], [597, 0, 1, "", "trace"], [246, 0, 1, "", "trapz"], [99, 0, 1, "", "tril"], [269, 0, 1, "", "tril_indices"], [270, 0, 1, "", "trilu"], [100, 0, 1, "", "triu"], [101, 0, 1, "", "triu_indices"], [247, 0, 1, "", "trunc"], [248, 0, 1, "", "trunc_divide"], [371, 0, 1, "", "truncated_svd"], [372, 0, 1, "", "tucker"], [410, 0, 1, "", "unfold"], [655, 0, 1, "", "unique_all"], [411, 0, 1, "", "unique_consecutive"], [656, 0, 1, "", "unique_counts"], [657, 0, 1, "", "unique_inverse"], [658, 0, 1, "", "unique_values"], [425, 0, 1, "", "unravel_index"], [271, 0, 1, "", "unsorted_segment_min"], [272, 0, 1, "", "unsorted_segment_sum"], [619, 0, 1, "", "unstack"], [521, 0, 1, "", "value_is_nan"], [598, 0, 1, "", "vander"], [672, 0, 1, "", "var"], [599, 0, 1, "", "vecdot"], [600, 0, 1, "", "vector_norm"], [601, 0, 1, "", "vector_to_skew_symmetric_matrix"], [273, 0, 1, "", "vorbis_window"], [412, 0, 1, "", "vsplit"], [413, 0, 1, "", "vstack"], [654, 0, 1, "", "where"], [297, 0, 1, "", "xlogy"], [620, 0, 1, "", "zero_pad"], [103, 0, 1, "", "zeros_like"], [298, 0, 1, "", "zeta"]], "ivy.data_classes.array": [[3, 3, 0, "-", "activations"], [51, 3, 0, "-", "array"], [4, 3, 0, "-", "conversions"], [5, 3, 0, "-", "creation"], [6, 3, 0, "-", "data_type"], [7, 3, 0, "-", "device"], [8, 3, 0, "-", "elementwise"], [9, 3, 0, "-", "experimental"], [10, 3, 0, "-", "general"], [11, 3, 0, "-", "gradients"], [12, 3, 0, "-", "image"], [13, 3, 0, "-", "layers"], [14, 3, 0, "-", "linear_algebra"], [15, 3, 0, "-", "losses"], [16, 3, 0, "-", "manipulation"], [17, 3, 0, "-", "norms"], [18, 3, 0, "-", "random"], [19, 3, 0, "-", "searching"], [20, 3, 0, "-", "set"], [21, 3, 0, "-", "sorting"], [22, 3, 0, "-", "statistical"], [23, 3, 0, "-", "utility"], [24, 3, 0, "-", "wrapping"]], "ivy.data_classes.array.activations": [[3, 1, 1, "", "_ArrayWithActivations"]], "ivy.data_classes.array.activations._ArrayWithActivations": [[3, 4, 1, "", "_abc_impl"], [3, 0, 1, "", "gelu"], [3, 0, 1, "", "hardswish"], [3, 0, 1, "", "leaky_relu"], [3, 0, 1, "", "log_softmax"], [3, 0, 1, "", "mish"], [3, 0, 1, "", "relu"], [3, 0, 1, "", "sigmoid"], [3, 0, 1, "", "softmax"], [3, 0, 1, "", "softplus"]], "ivy.data_classes.array.array": [[51, 1, 1, "", "Array"]], "ivy.data_classes.array.array.Array": [[51, 5, 1, "", "T"], [51, 0, 1, "", "__abs__"], [51, 0, 1, "", "__add__"], [51, 0, 1, "", "__eq__"], [51, 0, 1, "", "__ge__"], [51, 0, 1, "", "__gt__"], [51, 0, 1, "", "__init__"], [51, 0, 1, "", "__le__"], [51, 0, 1, "", "__lt__"], [51, 0, 1, "", "__ne__"], [51, 0, 1, "", "__pow__"], [51, 0, 1, "", "__radd__"], [51, 0, 1, "", "__rrshift__"], [51, 0, 1, "", "__rshift__"], [51, 0, 1, "", "__rsub__"], [51, 0, 1, "", "__sub__"], [51, 0, 1, "", "__truediv__"], [51, 0, 1, "", "__xor__"], [51, 5, 1, "", "backend"], [51, 5, 1, "", "base"], [51, 5, 1, "", "data"], [51, 5, 1, "", "device"], [51, 5, 1, "", "dtype"], [51, 5, 1, "", "dynamic_backend"], [51, 5, 1, "", "imag"], [51, 5, 1, "", "itemsize"], [51, 5, 1, "", "mT"], [51, 5, 1, "", "ndim"], [51, 5, 1, "", "real"], [51, 5, 1, "", "shape"], [51, 5, 1, "", "size"], [51, 5, 1, "", "strides"]], "ivy.data_classes.array.conversions": [[4, 2, 1, "", "_to_ivy"], [4, 2, 1, "", "_to_native"], [4, 2, 1, "", "args_to_ivy"], [4, 2, 1, "", "args_to_native"], [4, 2, 1, "", "to_ivy"], [4, 2, 1, "", "to_native"]], "ivy.data_classes.array.creation": [[5, 1, 1, "", "_ArrayWithCreation"]], "ivy.data_classes.array.creation._ArrayWithCreation": [[5, 4, 1, "", "_abc_impl"], [5, 0, 1, "", "asarray"], [5, 0, 1, "", "copy_array"], [5, 0, 1, "", "empty_like"], [5, 0, 1, "", "from_dlpack"], [5, 0, 1, "", "full_like"], [5, 0, 1, "", "linspace"], [5, 0, 1, "", "logspace"], [5, 0, 1, "", "meshgrid"], [5, 0, 1, "", "native_array"], [5, 0, 1, "", "one_hot"], [5, 0, 1, "", "ones_like"], [5, 0, 1, "", "tril"], [5, 0, 1, "", "triu"], [5, 0, 1, "", "zeros_like"]], "ivy.data_classes.array.data_type": [[6, 1, 1, "", "_ArrayWithDataTypes"]], "ivy.data_classes.array.data_type._ArrayWithDataTypes": [[6, 4, 1, "", "_abc_impl"], [6, 0, 1, "", "astype"], [6, 0, 1, "", "broadcast_arrays"], [6, 0, 1, "", "broadcast_to"], [6, 0, 1, "", "can_cast"], [6, 0, 1, "", "dtype"], [6, 0, 1, "", "finfo"], [6, 0, 1, "", "iinfo"], [6, 0, 1, "", "is_bool_dtype"], [6, 0, 1, "", "is_float_dtype"], [6, 0, 1, "", "is_int_dtype"], [6, 0, 1, "", "is_uint_dtype"], [6, 0, 1, "", "result_type"]], "ivy.data_classes.array.device": [[7, 1, 1, "", "_ArrayWithDevice"]], "ivy.data_classes.array.device._ArrayWithDevice": [[7, 4, 1, "", "_abc_impl"], [7, 0, 1, "", "dev"], [7, 0, 1, "", "to_device"]], "ivy.data_classes.array.elementwise": [[8, 1, 1, "", "_ArrayWithElementwise"]], "ivy.data_classes.array.elementwise._ArrayWithElementwise": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "abs"], [8, 0, 1, "", "acos"], [8, 0, 1, "", "acosh"], [8, 0, 1, "", "add"], [8, 0, 1, "", "angle"], [8, 0, 1, "", "asin"], [8, 0, 1, "", "asinh"], [8, 0, 1, "", "atan"], [8, 0, 1, "", "atan2"], [8, 0, 1, "", "atanh"], [8, 0, 1, "", "bitwise_and"], [8, 0, 1, "", "bitwise_invert"], [8, 0, 1, "", "bitwise_left_shift"], [8, 0, 1, "", "bitwise_or"], [8, 0, 1, "", "bitwise_right_shift"], [8, 0, 1, "", "bitwise_xor"], [8, 0, 1, "", "ceil"], [8, 0, 1, "", "cos"], [8, 0, 1, "", "cosh"], [8, 0, 1, "", "deg2rad"], [8, 0, 1, "", "divide"], [8, 0, 1, "", "equal"], [8, 0, 1, "", "erf"], [8, 0, 1, "", "exp"], [8, 0, 1, "", "exp2"], [8, 0, 1, "", "expm1"], [8, 0, 1, "", "floor"], [8, 0, 1, "", "floor_divide"], [8, 0, 1, "", "fmin"], [8, 0, 1, "", "gcd"], [8, 0, 1, "", "greater"], [8, 0, 1, "", "greater_equal"], [8, 0, 1, "", "imag"], [8, 0, 1, "", "isfinite"], [8, 0, 1, "", "isinf"], [8, 0, 1, "", "isnan"], [8, 0, 1, "", "isreal"], [8, 0, 1, "", "lcm"], [8, 0, 1, "", "less"], [8, 0, 1, "", "less_equal"], [8, 0, 1, "", "log"], [8, 0, 1, "", "log10"], [8, 0, 1, "", "log1p"], [8, 0, 1, "", "log2"], [8, 0, 1, "", "logaddexp"], [8, 0, 1, "", "logaddexp2"], [8, 0, 1, "", "logical_and"], [8, 0, 1, "", "logical_not"], [8, 0, 1, "", "logical_or"], [8, 0, 1, "", "logical_xor"], [8, 0, 1, "", "maximum"], [8, 0, 1, "", "minimum"], [8, 0, 1, "", "multiply"], [8, 0, 1, "", "nan_to_num"], [8, 0, 1, "", "negative"], [8, 0, 1, "", "not_equal"], [8, 0, 1, "", "positive"], [8, 0, 1, "", "pow"], [8, 0, 1, "", "rad2deg"], [8, 0, 1, "", "real"], [8, 0, 1, "", "reciprocal"], [8, 0, 1, "", "remainder"], [8, 0, 1, "", "round"], [8, 0, 1, "", "sign"], [8, 0, 1, "", "sin"], [8, 0, 1, "", "sinh"], [8, 0, 1, "", "sqrt"], [8, 0, 1, "", "square"], [8, 0, 1, "", "subtract"], [8, 0, 1, "", "tan"], [8, 0, 1, "", "tanh"], [8, 0, 1, "", "trapz"], [8, 0, 1, "", "trunc"], [8, 0, 1, "", "trunc_divide"]], "ivy.data_classes.array.experimental": [[9, 3, 0, "-", "activations"], [9, 3, 0, "-", "conversions"], [9, 3, 0, "-", "creation"], [9, 3, 0, "-", "data_type"], [9, 3, 0, "-", "device"], [9, 3, 0, "-", "elementwise"], [9, 3, 0, "-", "general"], [9, 3, 0, "-", "gradients"], [9, 3, 0, "-", "image"], [9, 3, 0, "-", "layers"], [9, 3, 0, "-", "linear_algebra"], [9, 3, 0, "-", "losses"], [9, 3, 0, "-", "manipulation"], [9, 3, 0, "-", "norms"], [9, 3, 0, "-", "random"], [9, 3, 0, "-", "searching"], [9, 3, 0, "-", "set"], [9, 3, 0, "-", "sorting"], [9, 3, 0, "-", "statistical"], [9, 3, 0, "-", "utility"]], "ivy.data_classes.array.experimental.activations": [[9, 1, 1, "", "_ArrayWithActivationsExperimental"]], "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "elu"], [9, 0, 1, "", "logit"], [9, 0, 1, "", "logsigmoid"], [9, 0, 1, "", "prelu"], [9, 0, 1, "", "relu6"], [9, 0, 1, "", "selu"], [9, 0, 1, "", "silu"], [9, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.array.experimental.conversions": [[9, 1, 1, "", "_ArrayWithConversionsExperimental"]], "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.creation": [[9, 1, 1, "", "_ArrayWithCreationExperimental"]], "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "blackman_window"], [9, 0, 1, "", "eye_like"], [9, 0, 1, "", "trilu"], [9, 0, 1, "", "unsorted_segment_min"], [9, 0, 1, "", "unsorted_segment_sum"]], "ivy.data_classes.array.experimental.data_type": [[9, 1, 1, "", "_ArrayWithData_typeExperimental"]], "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.device": [[9, 1, 1, "", "_ArrayWithDeviceExperimental"]], "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.elementwise": [[9, 1, 1, "", "_ArrayWithElementWiseExperimental"]], "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "allclose"], [9, 0, 1, "", "binarizer"], [9, 0, 1, "", "conj"], [9, 0, 1, "", "copysign"], [9, 0, 1, "", "count_nonzero"], [9, 0, 1, "", "diff"], [9, 0, 1, "", "digamma"], [9, 0, 1, "", "fix"], [9, 0, 1, "", "float_power"], [9, 0, 1, "", "fmax"], [9, 0, 1, "", "fmod"], [9, 0, 1, "", "frexp"], [9, 0, 1, "", "gradient"], [9, 0, 1, "", "hypot"], [9, 0, 1, "", "isclose"], [9, 0, 1, "", "ldexp"], [9, 0, 1, "", "lerp"], [9, 0, 1, "", "lgamma"], [9, 0, 1, "", "modf"], [9, 0, 1, "", "nansum"], [9, 0, 1, "", "nextafter"], [9, 0, 1, "", "signbit"], [9, 0, 1, "", "sinc"], [9, 0, 1, "", "sparsify_tensor"], [9, 0, 1, "", "xlogy"], [9, 0, 1, "", "zeta"]], "ivy.data_classes.array.experimental.general": [[9, 1, 1, "", "_ArrayWithGeneralExperimental"]], "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "reduce"]], "ivy.data_classes.array.experimental.gradients": [[9, 1, 1, "", "_ArrayWithGradientsExperimental"]], "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.image": [[9, 1, 1, "", "_ArrayWithImageExperimental"]], "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.layers": [[9, 1, 1, "", "_ArrayWithLayersExperimental"]], "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "adaptive_avg_pool1d"], [9, 0, 1, "", "adaptive_avg_pool2d"], [9, 0, 1, "", "adaptive_max_pool2d"], [9, 0, 1, "", "avg_pool1d"], [9, 0, 1, "", "avg_pool2d"], [9, 0, 1, "", "avg_pool3d"], [9, 0, 1, "", "dct"], [9, 0, 1, "", "dft"], [9, 0, 1, "", "embedding"], [9, 0, 1, "", "fft"], [9, 0, 1, "", "fft2"], [9, 0, 1, "", "idct"], [9, 0, 1, "", "ifft"], [9, 0, 1, "", "ifftn"], [9, 0, 1, "", "interpolate"], [9, 0, 1, "", "max_pool1d"], [9, 0, 1, "", "max_pool2d"], [9, 0, 1, "", "max_pool3d"], [9, 0, 1, "", "reduce_window"], [9, 0, 1, "", "rfftn"]], "ivy.data_classes.array.experimental.linear_algebra": [[9, 1, 1, "", "_ArrayWithLinearAlgebraExperimental"]], "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "adjoint"], [9, 0, 1, "", "cond"], [9, 0, 1, "", "diagflat"], [9, 0, 1, "", "eig"], [9, 0, 1, "", "eigh_tridiagonal"], [9, 0, 1, "", "eigvals"], [9, 0, 1, "", "initialize_tucker"], [9, 0, 1, "", "kron"], [9, 0, 1, "", "make_svd_non_negative"], [9, 0, 1, "", "matrix_exp"], [9, 0, 1, "", "mode_dot"], [9, 0, 1, "", "multi_dot"], [9, 0, 1, "", "multi_mode_dot"], [9, 0, 1, "", "partial_tucker"], [9, 0, 1, "", "svd_flip"], [9, 0, 1, "", "truncated_svd"], [9, 0, 1, "", "tucker"]], "ivy.data_classes.array.experimental.losses": [[9, 1, 1, "", "_ArrayWithLossesExperimental"]], "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "huber_loss"], [9, 0, 1, "", "l1_loss"], [9, 0, 1, "", "smooth_l1_loss"], [9, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.array.experimental.manipulation": [[9, 1, 1, "", "_ArrayWithManipulationExperimental"]], "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "as_strided"], [9, 0, 1, "", "associative_scan"], [9, 0, 1, "", "atleast_1d"], [9, 0, 1, "", "atleast_2d"], [9, 0, 1, "", "atleast_3d"], [9, 0, 1, "", "concat_from_sequence"], [9, 0, 1, "", "dsplit"], [9, 0, 1, "", "dstack"], [9, 0, 1, "", "expand"], [9, 0, 1, "", "fill_diagonal"], [9, 0, 1, "", "flatten"], [9, 0, 1, "", "fliplr"], [9, 0, 1, "", "flipud"], [9, 0, 1, "", "fold"], [9, 0, 1, "", "heaviside"], [9, 0, 1, "", "hsplit"], [9, 0, 1, "", "hstack"], [9, 0, 1, "", "i0"], [9, 0, 1, "", "matricize"], [9, 0, 1, "", "moveaxis"], [9, 0, 1, "", "pad"], [9, 0, 1, "", "partial_fold"], [9, 0, 1, "", "partial_tensor_to_vec"], [9, 0, 1, "", "partial_unfold"], [9, 0, 1, "", "partial_vec_to_tensor"], [9, 0, 1, "", "rot90"], [9, 0, 1, "", "soft_thresholding"], [9, 0, 1, "", "take_along_axis"], [9, 0, 1, "", "top_k"], [9, 0, 1, "", "unfold"], [9, 0, 1, "", "unique_consecutive"], [9, 0, 1, "", "vsplit"], [9, 0, 1, "", "vstack"]], "ivy.data_classes.array.experimental.norms": [[9, 1, 1, "", "_ArrayWithNormsExperimental"]], "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "batch_norm"], [9, 0, 1, "", "group_norm"], [9, 0, 1, "", "instance_norm"], [9, 0, 1, "", "l1_normalize"], [9, 0, 1, "", "l2_normalize"], [9, 0, 1, "", "lp_normalize"]], "ivy.data_classes.array.experimental.random": [[9, 1, 1, "", "_ArrayWithRandomExperimental"]], "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "bernoulli"], [9, 0, 1, "", "beta"], [9, 0, 1, "", "dirichlet"], [9, 0, 1, "", "gamma"], [9, 0, 1, "", "poisson"]], "ivy.data_classes.array.experimental.searching": [[9, 1, 1, "", "_ArrayWithSearchingExperimental"]], "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "unravel_index"]], "ivy.data_classes.array.experimental.set": [[9, 1, 1, "", "_ArrayWithSetExperimental"]], "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.sorting": [[9, 1, 1, "", "_ArrayWithSortingExperimental"]], "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "lexsort"]], "ivy.data_classes.array.experimental.statistical": [[9, 1, 1, "", "_ArrayWithStatisticalExperimental"]], "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "bincount"], [9, 0, 1, "", "corrcoef"], [9, 0, 1, "", "cov"], [9, 0, 1, "", "cummax"], [9, 0, 1, "", "cummin"], [9, 0, 1, "", "histogram"], [9, 0, 1, "", "igamma"], [9, 0, 1, "", "median"], [9, 0, 1, "", "nanmean"], [9, 0, 1, "", "nanmedian"], [9, 0, 1, "", "quantile"]], "ivy.data_classes.array.experimental.utility": [[9, 1, 1, "", "_ArrayWithUtilityExperimental"]], "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.general": [[10, 1, 1, "", "_ArrayWithGeneral"]], "ivy.data_classes.array.general._ArrayWithGeneral": [[10, 4, 1, "", "_abc_impl"], [10, 0, 1, "", "all_equal"], [10, 0, 1, "", "array_equal"], [10, 0, 1, "", "assert_supports_inplace"], [10, 0, 1, "", "clip_matrix_norm"], [10, 0, 1, "", "clip_vector_norm"], [10, 0, 1, "", "default"], [10, 0, 1, "", "einops_rearrange"], [10, 0, 1, "", "einops_reduce"], [10, 0, 1, "", "einops_repeat"], [10, 0, 1, "", "exists"], [10, 0, 1, "", "fourier_encode"], [10, 0, 1, "", "gather"], [10, 0, 1, "", "gather_nd"], [10, 0, 1, "", "get_num_dims"], [10, 0, 1, "", "has_nans"], [10, 0, 1, "", "inplace_decrement"], [10, 0, 1, "", "inplace_increment"], [10, 0, 1, "", "inplace_update"], [10, 0, 1, "", "is_array"], [10, 0, 1, "", "is_ivy_array"], [10, 0, 1, "", "is_ivy_container"], [10, 0, 1, "", "is_native_array"], [10, 0, 1, "", "isin"], [10, 0, 1, "", "scatter_flat"], [10, 0, 1, "", "scatter_nd"], [10, 0, 1, "", "stable_divide"], [10, 0, 1, "", "stable_pow"], [10, 0, 1, "", "supports_inplace_updates"], [10, 0, 1, "", "to_file"], [10, 0, 1, "", "to_list"], [10, 0, 1, "", "to_numpy"], [10, 0, 1, "", "to_scalar"], [10, 0, 1, "", "value_is_nan"]], "ivy.data_classes.array.gradients": [[11, 1, 1, "", "_ArrayWithGradients"]], "ivy.data_classes.array.gradients._ArrayWithGradients": [[11, 4, 1, "", "_abc_impl"], [11, 0, 1, "", "adam_step"], [11, 0, 1, "", "adam_update"], [11, 0, 1, "", "gradient_descent_update"], [11, 0, 1, "", "lamb_update"], [11, 0, 1, "", "lars_update"], [11, 0, 1, "", "optimizer_update"], [11, 0, 1, "", "stop_gradient"]], "ivy.data_classes.array.image": [[12, 1, 1, "", "_ArrayWithImage"]], "ivy.data_classes.array.image._ArrayWithImage": [[12, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.layers": [[13, 1, 1, "", "_ArrayWithLayers"]], "ivy.data_classes.array.layers._ArrayWithLayers": [[13, 4, 1, "", "_abc_impl"], [13, 0, 1, "", "conv1d"], [13, 0, 1, "", "conv1d_transpose"], [13, 0, 1, "", "conv2d"], [13, 0, 1, "", "conv2d_transpose"], [13, 0, 1, "", "conv3d"], [13, 0, 1, "", "conv3d_transpose"], [13, 0, 1, "", "depthwise_conv2d"], [13, 0, 1, "", "dropout"], [13, 0, 1, "", "dropout1d"], [13, 0, 1, "", "dropout2d"], [13, 0, 1, "", "dropout3d"], [13, 0, 1, "", "linear"], [13, 0, 1, "", "lstm_update"], [13, 0, 1, "", "multi_head_attention"], [13, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.array.linear_algebra": [[14, 1, 1, "", "_ArrayWithLinearAlgebra"]], "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra": [[14, 4, 1, "", "_abc_impl"], [14, 0, 1, "", "cholesky"], [14, 0, 1, "", "cross"], [14, 0, 1, "", "det"], [14, 0, 1, "", "diag"], [14, 0, 1, "", "diagonal"], [14, 0, 1, "", "eig"], [14, 0, 1, "", "eigh"], [14, 0, 1, "", "eigvalsh"], [14, 0, 1, "", "inner"], [14, 0, 1, "", "inv"], [14, 0, 1, "", "matmul"], [14, 0, 1, "", "matrix_norm"], [14, 0, 1, "", "matrix_power"], [14, 0, 1, "", "matrix_rank"], [14, 0, 1, "", "matrix_transpose"], [14, 0, 1, "", "outer"], [14, 0, 1, "", "pinv"], [14, 0, 1, "", "qr"], [14, 0, 1, "", "slogdet"], [14, 0, 1, "", "solve"], [14, 0, 1, "", "svd"], [14, 0, 1, "", "svdvals"], [14, 0, 1, "", "tensordot"], [14, 0, 1, "", "tensorsolve"], [14, 0, 1, "", "trace"], [14, 0, 1, "", "vander"], [14, 0, 1, "", "vecdot"], [14, 0, 1, "", "vector_norm"], [14, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.array.losses": [[15, 1, 1, "", "_ArrayWithLosses"]], "ivy.data_classes.array.losses._ArrayWithLosses": [[15, 4, 1, "", "_abc_impl"], [15, 0, 1, "", "binary_cross_entropy"], [15, 0, 1, "", "cross_entropy"], [15, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.array.manipulation": [[16, 1, 1, "", "_ArrayWithManipulation"]], "ivy.data_classes.array.manipulation._ArrayWithManipulation": [[16, 4, 1, "", "_abc_impl"], [16, 0, 1, "", "clip"], [16, 0, 1, "", "concat"], [16, 0, 1, "", "constant_pad"], [16, 0, 1, "", "expand_dims"], [16, 0, 1, "", "flip"], [16, 0, 1, "", "permute_dims"], [16, 0, 1, "", "repeat"], [16, 0, 1, "", "reshape"], [16, 0, 1, "", "roll"], [16, 0, 1, "", "split"], [16, 0, 1, "", "squeeze"], [16, 0, 1, "", "stack"], [16, 0, 1, "", "swapaxes"], [16, 0, 1, "", "tile"], [16, 0, 1, "", "unstack"], [16, 0, 1, "", "view"], [16, 0, 1, "", "zero_pad"]], "ivy.data_classes.array.norms": [[17, 1, 1, "", "_ArrayWithNorms"]], "ivy.data_classes.array.norms._ArrayWithNorms": [[17, 4, 1, "", "_abc_impl"], [17, 0, 1, "", "layer_norm"]], "ivy.data_classes.array.random": [[18, 1, 1, "", "_ArrayWithRandom"]], "ivy.data_classes.array.random._ArrayWithRandom": [[18, 4, 1, "", "_abc_impl"], [18, 0, 1, "", "multinomial"], [18, 0, 1, "", "randint"], [18, 0, 1, "", "random_normal"], [18, 0, 1, "", "random_uniform"], [18, 0, 1, "", "shuffle"]], "ivy.data_classes.array.searching": [[19, 1, 1, "", "_ArrayWithSearching"]], "ivy.data_classes.array.searching._ArrayWithSearching": [[19, 4, 1, "", "_abc_impl"], [19, 0, 1, "", "argmax"], [19, 0, 1, "", "argmin"], [19, 0, 1, "", "argwhere"], [19, 0, 1, "", "nonzero"], [19, 0, 1, "", "where"]], "ivy.data_classes.array.set": [[20, 1, 1, "", "_ArrayWithSet"]], "ivy.data_classes.array.set._ArrayWithSet": [[20, 4, 1, "", "_abc_impl"], [20, 0, 1, "", "unique_all"], [20, 0, 1, "", "unique_counts"], [20, 0, 1, "", "unique_inverse"], [20, 0, 1, "", "unique_values"]], "ivy.data_classes.array.sorting": [[21, 1, 1, "", "_ArrayWithSorting"]], "ivy.data_classes.array.sorting._ArrayWithSorting": [[21, 4, 1, "", "_abc_impl"], [21, 0, 1, "", "argsort"], [21, 0, 1, "", "msort"], [21, 0, 1, "", "searchsorted"], [21, 0, 1, "", "sort"]], "ivy.data_classes.array.statistical": [[22, 1, 1, "", "_ArrayWithStatistical"]], "ivy.data_classes.array.statistical._ArrayWithStatistical": [[22, 4, 1, "", "_abc_impl"], [22, 0, 1, "", "cumprod"], [22, 0, 1, "", "cumsum"], [22, 0, 1, "", "einsum"], [22, 0, 1, "", "max"], [22, 0, 1, "", "mean"], [22, 0, 1, "", "min"], [22, 0, 1, "", "prod"], [22, 0, 1, "", "std"], [22, 0, 1, "", "sum"], [22, 0, 1, "", "var"]], "ivy.data_classes.array.utility": [[23, 1, 1, "", "_ArrayWithUtility"]], "ivy.data_classes.array.utility._ArrayWithUtility": [[23, 4, 1, "", "_abc_impl"], [23, 0, 1, "", "all"], [23, 0, 1, "", "any"]], "ivy.data_classes.array.wrapping": [[24, 2, 1, "", "_wrap_function"], [24, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy.data_classes.container": [[25, 3, 0, "-", "activations"], [26, 3, 0, "-", "base"], [52, 3, 0, "-", "container"], [27, 3, 0, "-", "conversions"], [28, 3, 0, "-", "creation"], [29, 3, 0, "-", "data_type"], [30, 3, 0, "-", "device"], [31, 3, 0, "-", "elementwise"], [32, 3, 0, "-", "experimental"], [33, 3, 0, "-", "general"], [34, 3, 0, "-", "gradients"], [35, 3, 0, "-", "image"], [36, 3, 0, "-", "layers"], [37, 3, 0, "-", "linear_algebra"], [38, 3, 0, "-", "losses"], [39, 3, 0, "-", "manipulation"], [40, 3, 0, "-", "norms"], [41, 3, 0, "-", "random"], [42, 3, 0, "-", "searching"], [43, 3, 0, "-", "set"], [44, 3, 0, "-", "sorting"], [45, 3, 0, "-", "statistical"], [46, 3, 0, "-", "utility"], [47, 3, 0, "-", "wrapping"]], "ivy.data_classes.container.activations": [[25, 1, 1, "", "_ContainerWithActivations"]], "ivy.data_classes.container.activations._ContainerWithActivations": [[25, 4, 1, "", "_abc_impl"], [25, 0, 1, "", "_static_gelu"], [25, 0, 1, "", "_static_hardswish"], [25, 0, 1, "", "_static_leaky_relu"], [25, 0, 1, "", "_static_log_softmax"], [25, 0, 1, "", "_static_mish"], [25, 0, 1, "", "_static_relu"], [25, 0, 1, "", "_static_sigmoid"], [25, 0, 1, "", "_static_softmax"], [25, 0, 1, "", "_static_softplus"], [25, 0, 1, "", "gelu"], [25, 0, 1, "", "hardswish"], [25, 0, 1, "", "leaky_relu"], [25, 0, 1, "", "log_softmax"], [25, 0, 1, "", "mish"], [25, 0, 1, "", "relu"], [25, 0, 1, "", "sigmoid"], [25, 0, 1, "", "softmax"], [25, 0, 1, "", "softplus"]], "ivy.data_classes.container.base": [[26, 1, 1, "", "ContainerBase"], [26, 2, 1, "", "_is_jsonable"], [26, 2, 1, "", "_repr"]], "ivy.data_classes.container.base.ContainerBase": [[26, 0, 1, "", "__getitem__"], [26, 0, 1, "", "__init__"], [26, 0, 1, "", "__setitem__"], [26, 4, 1, "", "_abc_impl"], [26, 0, 1, "", "_cont_at_key_chains_input_as_dict"], [26, 0, 1, "", "_cont_at_key_chains_input_as_seq"], [26, 0, 1, "", "_cont_call_static_method_with_flexible_args"], [26, 0, 1, "", "_cont_concat_unify"], [26, 0, 1, "", "_cont_get_dev"], [26, 0, 1, "", "_cont_get_shape"], [26, 0, 1, "", "_cont_get_shapes"], [26, 5, 1, "", "_cont_ivy"], [26, 0, 1, "", "_cont_mean_unify"], [26, 0, 1, "", "_cont_prune_key_chains_input_as_dict"], [26, 0, 1, "", "_cont_prune_key_chains_input_as_seq"], [26, 0, 1, "", "_cont_slice_keys"], [26, 0, 1, "", "_cont_sum_unify"], [26, 0, 1, "", "_get_queue_item"], [26, 0, 1, "", "cont_all_false"], [26, 0, 1, "", "cont_all_key_chains"], [26, 0, 1, "", "cont_all_true"], [26, 0, 1, "", "cont_as_bools"], [26, 0, 1, "", "cont_assert_contains_sub_container"], [26, 0, 1, "", "cont_assert_contains_sub_structure"], [26, 0, 1, "", "cont_assert_identical"], [26, 0, 1, "", "cont_assert_identical_structure"], [26, 0, 1, "", "cont_at_key_chain"], [26, 0, 1, "", "cont_at_key_chains"], [26, 0, 1, "", "cont_at_keys"], [26, 0, 1, "", "cont_combine"], [26, 0, 1, "", "cont_common_key_chains"], [26, 5, 1, "", "cont_config"], [26, 0, 1, "", "cont_contains_sub_container"], [26, 0, 1, "", "cont_contains_sub_structure"], [26, 0, 1, "", "cont_copy"], [26, 0, 1, "", "cont_create_if_absent"], [26, 0, 1, "", "cont_cutoff_at_depth"], [26, 0, 1, "", "cont_cutoff_at_height"], [26, 0, 1, "", "cont_deep_copy"], [26, 5, 1, "", "cont_dev"], [26, 5, 1, "", "cont_dev_str"], [26, 0, 1, "", "cont_diff"], [26, 0, 1, "", "cont_duplicate_array_keychains"], [26, 0, 1, "", "cont_find_sub_container"], [26, 0, 1, "", "cont_find_sub_structure"], [26, 0, 1, "", "cont_flatten_key_chain"], [26, 0, 1, "", "cont_flatten_key_chains"], [26, 0, 1, "", "cont_format_key_chains"], [26, 0, 1, "", "cont_from_disk_as_hdf5"], [26, 0, 1, "", "cont_from_disk_as_json"], [26, 0, 1, "", "cont_from_disk_as_pickled"], [26, 0, 1, "", "cont_from_flat_list"], [26, 0, 1, "", "cont_handle_inplace"], [26, 0, 1, "", "cont_has_key"], [26, 0, 1, "", "cont_has_key_chain"], [26, 0, 1, "", "cont_identical"], [26, 0, 1, "", "cont_identical_array_shapes"], [26, 0, 1, "", "cont_identical_configs"], [26, 0, 1, "", "cont_identical_structure"], [26, 0, 1, "", "cont_if_exists"], [26, 0, 1, "", "cont_inplace_update"], [26, 5, 1, "", "cont_ivy"], [26, 0, 1, "", "cont_key_chains_containing"], [26, 0, 1, "", "cont_list_join"], [26, 0, 1, "", "cont_list_stack"], [26, 0, 1, "", "cont_load"], [26, 0, 1, "", "cont_map"], [26, 0, 1, "", "cont_map_sub_conts"], [26, 5, 1, "", "cont_max_depth"], [26, 0, 1, "", "cont_multi_map"], [26, 0, 1, "", "cont_multi_map_in_function"], [26, 0, 1, "", "cont_num_arrays"], [26, 0, 1, "", "cont_overwrite_at_key_chain"], [26, 0, 1, "", "cont_overwrite_at_key_chains"], [26, 0, 1, "", "cont_prune_empty"], [26, 0, 1, "", "cont_prune_key_chain"], [26, 0, 1, "", "cont_prune_key_chains"], [26, 0, 1, "", "cont_prune_key_from_key_chains"], [26, 0, 1, "", "cont_prune_keys"], [26, 0, 1, "", "cont_prune_keys_from_key_chains"], [26, 0, 1, "", "cont_reduce"], [26, 0, 1, "", "cont_remove_key_length_limit"], [26, 0, 1, "", "cont_remove_print_limit"], [26, 0, 1, "", "cont_reshape_like"], [26, 0, 1, "", "cont_restructure"], [26, 0, 1, "", "cont_restructure_key_chains"], [26, 0, 1, "", "cont_save"], [26, 0, 1, "", "cont_set_at_key_chain"], [26, 0, 1, "", "cont_set_at_key_chains"], [26, 0, 1, "", "cont_set_at_keys"], [26, 5, 1, "", "cont_shape"], [26, 5, 1, "", "cont_shapes"], [26, 0, 1, "", "cont_show"], [26, 0, 1, "", "cont_show_sub_container"], [26, 0, 1, "", "cont_size_ordered_arrays"], [26, 0, 1, "", "cont_slice_keys"], [26, 0, 1, "", "cont_slice_via_key"], [26, 0, 1, "", "cont_sort_by_key"], [26, 0, 1, "", "cont_structural_diff"], [26, 0, 1, "", "cont_to_dict"], [26, 0, 1, "", "cont_to_disk_as_hdf5"], [26, 0, 1, "", "cont_to_disk_as_json"], [26, 0, 1, "", "cont_to_disk_as_pickled"], [26, 0, 1, "", "cont_to_flat_list"], [26, 0, 1, "", "cont_to_iterator"], [26, 0, 1, "", "cont_to_iterator_keys"], [26, 0, 1, "", "cont_to_iterator_values"], [26, 0, 1, "", "cont_to_jsonable"], [26, 0, 1, "", "cont_to_nested_list"], [26, 0, 1, "", "cont_to_raw"], [26, 0, 1, "", "cont_trim_key"], [26, 0, 1, "", "cont_try_kc"], [26, 0, 1, "", "cont_unify"], [26, 0, 1, "", "cont_unstack_conts"], [26, 0, 1, "", "cont_update_config"], [26, 0, 1, "", "cont_with_default_key_color"], [26, 0, 1, "", "cont_with_entries_as_lists"], [26, 0, 1, "", "cont_with_ivy_backend"], [26, 0, 1, "", "cont_with_key_length_limit"], [26, 0, 1, "", "cont_with_print_indent"], [26, 0, 1, "", "cont_with_print_limit"], [26, 0, 1, "", "cont_with_print_line_spacing"], [26, 5, 1, "", "dynamic_backend"], [26, 0, 1, "", "h5_file_size"], [26, 0, 1, "", "shuffle_h5_file"], [26, 0, 1, "", "split_conts"]], "ivy.data_classes.container.container": [[52, 1, 1, "", "Container"]], "ivy.data_classes.container.container.Container": [[52, 0, 1, "", "__abs__"], [52, 0, 1, "", "__add__"], [52, 0, 1, "", "__eq__"], [52, 0, 1, "", "__ge__"], [52, 0, 1, "", "__gt__"], [52, 0, 1, "", "__init__"], [52, 0, 1, "", "__le__"], [52, 0, 1, "", "__lt__"], [52, 0, 1, "", "__ne__"], [52, 0, 1, "", "__pow__"], [52, 0, 1, "", "__radd__"], [52, 0, 1, "", "__rrshift__"], [52, 0, 1, "", "__rshift__"], [52, 0, 1, "", "__rsub__"], [52, 0, 1, "", "__sub__"], [52, 0, 1, "", "__truediv__"], [52, 0, 1, "", "__xor__"]], "ivy.data_classes.container.conversions": [[27, 1, 1, "", "_ContainerWithConversions"]], "ivy.data_classes.container.conversions._ContainerWithConversions": [[27, 4, 1, "", "_abc_impl"], [27, 0, 1, "", "_static_to_ivy"], [27, 0, 1, "", "_static_to_native"], [27, 0, 1, "", "to_ivy"], [27, 0, 1, "", "to_native"]], "ivy.data_classes.container.creation": [[28, 1, 1, "", "_ContainerWithCreation"]], "ivy.data_classes.container.creation._ContainerWithCreation": [[28, 4, 1, "", "_abc_impl"], [28, 0, 1, "", "_static_arange"], [28, 0, 1, "", "_static_asarray"], [28, 0, 1, "", "_static_copy_array"], [28, 0, 1, "", "_static_empty"], [28, 0, 1, "", "_static_empty_like"], [28, 0, 1, "", "_static_eye"], [28, 0, 1, "", "_static_from_dlpack"], [28, 0, 1, "", "_static_full"], [28, 0, 1, "", "_static_full_like"], [28, 0, 1, "", "_static_linspace"], [28, 0, 1, "", "_static_logspace"], [28, 0, 1, "", "_static_meshgrid"], [28, 0, 1, "", "_static_native_array"], [28, 0, 1, "", "_static_one_hot"], [28, 0, 1, "", "_static_ones"], [28, 0, 1, "", "_static_ones_like"], [28, 0, 1, "", "_static_tril"], [28, 0, 1, "", "_static_triu"], [28, 0, 1, "", "_static_zeros"], [28, 0, 1, "", "_static_zeros_like"], [28, 0, 1, "", "asarray"], [28, 0, 1, "", "copy_array"], [28, 0, 1, "", "empty_like"], [28, 0, 1, "", "from_dlpack"], [28, 0, 1, "", "frombuffer"], [28, 0, 1, "", "full_like"], [28, 0, 1, "", "linspace"], [28, 0, 1, "", "logspace"], [28, 0, 1, "", "meshgrid"], [28, 0, 1, "", "native_array"], [28, 0, 1, "", "one_hot"], [28, 0, 1, "", "ones_like"], [28, 0, 1, "", "static_frombuffer"], [28, 0, 1, "", "static_triu_indices"], [28, 0, 1, "", "tril"], [28, 0, 1, "", "triu"], [28, 0, 1, "", "triu_indices"], [28, 0, 1, "", "zeros_like"]], "ivy.data_classes.container.data_type": [[29, 1, 1, "", "_ContainerWithDataTypes"]], "ivy.data_classes.container.data_type._ContainerWithDataTypes": [[29, 4, 1, "", "_abc_impl"], [29, 0, 1, "", "_static_astype"], [29, 0, 1, "", "_static_broadcast_arrays"], [29, 0, 1, "", "_static_broadcast_to"], [29, 0, 1, "", "_static_can_cast"], [29, 0, 1, "", "_static_default_complex_dtype"], [29, 0, 1, "", "_static_default_float_dtype"], [29, 0, 1, "", "_static_dtype"], [29, 0, 1, "", "_static_finfo"], [29, 0, 1, "", "_static_function_supported_dtypes"], [29, 0, 1, "", "_static_function_unsupported_dtypes"], [29, 0, 1, "", "_static_iinfo"], [29, 0, 1, "", "_static_is_bool_dtype"], [29, 0, 1, "", "_static_is_complex_dtype"], [29, 0, 1, "", "_static_is_float_dtype"], [29, 0, 1, "", "_static_is_int_dtype"], [29, 0, 1, "", "_static_is_uint_dtype"], [29, 0, 1, "", "_static_result_type"], [29, 0, 1, "", "astype"], [29, 0, 1, "", "broadcast_arrays"], [29, 0, 1, "", "broadcast_to"], [29, 0, 1, "", "can_cast"], [29, 0, 1, "", "dtype"], [29, 0, 1, "", "finfo"], [29, 0, 1, "", "iinfo"], [29, 0, 1, "", "is_bool_dtype"], [29, 0, 1, "", "is_complex_dtype"], [29, 0, 1, "", "is_float_dtype"], [29, 0, 1, "", "is_int_dtype"], [29, 0, 1, "", "is_uint_dtype"], [29, 0, 1, "", "result_type"]], "ivy.data_classes.container.device": [[30, 1, 1, "", "_ContainerWithDevice"]], "ivy.data_classes.container.device._ContainerWithDevice": [[30, 4, 1, "", "_abc_impl"], [30, 0, 1, "", "_static_dev"], [30, 0, 1, "", "_static_to_device"], [30, 0, 1, "", "dev"], [30, 0, 1, "", "to_device"]], "ivy.data_classes.container.elementwise": [[31, 1, 1, "", "_ContainerWithElementwise"]], "ivy.data_classes.container.elementwise._ContainerWithElementwise": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "_static_abs"], [31, 0, 1, "", "_static_acos"], [31, 0, 1, "", "_static_acosh"], [31, 0, 1, "", "_static_add"], [31, 0, 1, "", "_static_asin"], [31, 0, 1, "", "_static_asinh"], [31, 0, 1, "", "_static_atan"], [31, 0, 1, "", "_static_atan2"], [31, 0, 1, "", "_static_atanh"], [31, 0, 1, "", "_static_bitwise_and"], [31, 0, 1, "", "_static_bitwise_invert"], [31, 0, 1, "", "_static_bitwise_left_shift"], [31, 0, 1, "", "_static_bitwise_or"], [31, 0, 1, "", "_static_bitwise_right_shift"], [31, 0, 1, "", "_static_bitwise_xor"], [31, 0, 1, "", "_static_ceil"], [31, 0, 1, "", "_static_cos"], [31, 0, 1, "", "_static_cosh"], [31, 0, 1, "", "_static_deg2rad"], [31, 0, 1, "", "_static_divide"], [31, 0, 1, "", "_static_equal"], [31, 0, 1, "", "_static_erf"], [31, 0, 1, "", "_static_exp"], [31, 0, 1, "", "_static_expm1"], [31, 0, 1, "", "_static_floor"], [31, 0, 1, "", "_static_floor_divide"], [31, 0, 1, "", "_static_greater"], [31, 0, 1, "", "_static_greater_equal"], [31, 0, 1, "", "_static_isfinite"], [31, 0, 1, "", "_static_isinf"], [31, 0, 1, "", "_static_isnan"], [31, 0, 1, "", "_static_isreal"], [31, 0, 1, "", "_static_lcm"], [31, 0, 1, "", "_static_less"], [31, 0, 1, "", "_static_less_equal"], [31, 0, 1, "", "_static_log"], [31, 0, 1, "", "_static_log10"], [31, 0, 1, "", "_static_log1p"], [31, 0, 1, "", "_static_log2"], [31, 0, 1, "", "_static_logaddexp"], [31, 0, 1, "", "_static_logical_and"], [31, 0, 1, "", "_static_logical_not"], [31, 0, 1, "", "_static_logical_or"], [31, 0, 1, "", "_static_logical_xor"], [31, 0, 1, "", "_static_maximum"], [31, 0, 1, "", "_static_minimum"], [31, 0, 1, "", "_static_multiply"], [31, 0, 1, "", "_static_negative"], [31, 0, 1, "", "_static_not_equal"], [31, 0, 1, "", "_static_positive"], [31, 0, 1, "", "_static_pow"], [31, 0, 1, "", "_static_rad2deg"], [31, 0, 1, "", "_static_reciprocal"], [31, 0, 1, "", "_static_remainder"], [31, 0, 1, "", "_static_round"], [31, 0, 1, "", "_static_sign"], [31, 0, 1, "", "_static_sin"], [31, 0, 1, "", "_static_sinh"], [31, 0, 1, "", "_static_sqrt"], [31, 0, 1, "", "_static_square"], [31, 0, 1, "", "_static_subtract"], [31, 0, 1, "", "_static_tan"], [31, 0, 1, "", "_static_tanh"], [31, 0, 1, "", "_static_trapz"], [31, 0, 1, "", "_static_trunc"], [31, 0, 1, "", "_static_trunc_divide"], [31, 0, 1, "", "abs"], [31, 0, 1, "", "acos"], [31, 0, 1, "", "acosh"], [31, 0, 1, "", "add"], [31, 0, 1, "", "angle"], [31, 0, 1, "", "asin"], [31, 0, 1, "", "asinh"], [31, 0, 1, "", "atan"], [31, 0, 1, "", "atan2"], [31, 0, 1, "", "atanh"], [31, 0, 1, "", "bitwise_and"], [31, 0, 1, "", "bitwise_invert"], [31, 0, 1, "", "bitwise_left_shift"], [31, 0, 1, "", "bitwise_or"], [31, 0, 1, "", "bitwise_right_shift"], [31, 0, 1, "", "bitwise_xor"], [31, 0, 1, "", "ceil"], [31, 0, 1, "", "cos"], [31, 0, 1, "", "cosh"], [31, 0, 1, "", "deg2rad"], [31, 0, 1, "", "divide"], [31, 0, 1, "", "equal"], [31, 0, 1, "", "erf"], [31, 0, 1, "", "exp"], [31, 0, 1, "", "exp2"], [31, 0, 1, "", "expm1"], [31, 0, 1, "", "floor"], [31, 0, 1, "", "floor_divide"], [31, 0, 1, "", "fmin"], [31, 0, 1, "", "gcd"], [31, 0, 1, "", "greater"], [31, 0, 1, "", "greater_equal"], [31, 0, 1, "", "imag"], [31, 0, 1, "", "isfinite"], [31, 0, 1, "", "isinf"], [31, 0, 1, "", "isnan"], [31, 0, 1, "", "isreal"], [31, 0, 1, "", "lcm"], [31, 0, 1, "", "less"], [31, 0, 1, "", "less_equal"], [31, 0, 1, "", "log"], [31, 0, 1, "", "log10"], [31, 0, 1, "", "log1p"], [31, 0, 1, "", "log2"], [31, 0, 1, "", "logaddexp"], [31, 0, 1, "", "logaddexp2"], [31, 0, 1, "", "logical_and"], [31, 0, 1, "", "logical_not"], [31, 0, 1, "", "logical_or"], [31, 0, 1, "", "logical_xor"], [31, 0, 1, "", "maximum"], [31, 0, 1, "", "minimum"], [31, 0, 1, "", "multiply"], [31, 0, 1, "", "nan_to_num"], [31, 0, 1, "", "negative"], [31, 0, 1, "", "not_equal"], [31, 0, 1, "", "positive"], [31, 0, 1, "", "pow"], [31, 0, 1, "", "rad2deg"], [31, 0, 1, "", "real"], [31, 0, 1, "", "reciprocal"], [31, 0, 1, "", "remainder"], [31, 0, 1, "", "round"], [31, 0, 1, "", "sign"], [31, 0, 1, "", "sin"], [31, 0, 1, "", "sinh"], [31, 0, 1, "", "sqrt"], [31, 0, 1, "", "square"], [31, 0, 1, "", "static_angle"], [31, 0, 1, "", "static_exp2"], [31, 0, 1, "", "static_fmin"], [31, 0, 1, "", "static_gcd"], [31, 0, 1, "", "static_imag"], [31, 0, 1, "", "static_logaddexp2"], [31, 0, 1, "", "static_nan_to_num"], [31, 0, 1, "", "static_real"], [31, 0, 1, "", "subtract"], [31, 0, 1, "", "tan"], [31, 0, 1, "", "tanh"], [31, 0, 1, "", "trapz"], [31, 0, 1, "", "trunc"], [31, 0, 1, "", "trunc_divide"]], "ivy.data_classes.container.experimental": [[32, 3, 0, "-", "activations"], [32, 3, 0, "-", "conversions"], [32, 3, 0, "-", "creation"], [32, 3, 0, "-", "data_type"], [32, 3, 0, "-", "device"], [32, 3, 0, "-", "elementwise"], [32, 3, 0, "-", "general"], [32, 3, 0, "-", "gradients"], [32, 3, 0, "-", "image"], [32, 3, 0, "-", "layers"], [32, 3, 0, "-", "linear_algebra"], [32, 3, 0, "-", "losses"], [32, 3, 0, "-", "manipulation"], [32, 3, 0, "-", "norms"], [32, 3, 0, "-", "random"], [32, 3, 0, "-", "searching"], [32, 3, 0, "-", "set"], [32, 3, 0, "-", "sorting"], [32, 3, 0, "-", "statistical"], [32, 3, 0, "-", "utility"]], "ivy.data_classes.container.experimental.activations": [[32, 1, 1, "", "_ContainerWithActivationExperimental"]], "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "_static_elu"], [32, 0, 1, "", "_static_silu"], [32, 0, 1, "", "elu"], [32, 0, 1, "", "logit"], [32, 0, 1, "", "logsigmoid"], [32, 0, 1, "", "prelu"], [32, 0, 1, "", "relu6"], [32, 0, 1, "", "selu"], [32, 0, 1, "", "silu"], [32, 0, 1, "", "static_logit"], [32, 0, 1, "", "static_logsigmoid"], [32, 0, 1, "", "static_prelu"], [32, 0, 1, "", "static_relu6"], [32, 0, 1, "", "static_selu"], [32, 0, 1, "", "static_thresholded_relu"], [32, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.container.experimental.conversions": [[32, 1, 1, "", "_ContainerWithConversionExperimental"]], "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental": [[32, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.creation": [[32, 1, 1, "", "_ContainerWithCreationExperimental"]], "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "_static_trilu"], [32, 0, 1, "", "blackman_window"], [32, 0, 1, "", "eye_like"], [32, 0, 1, "", "hamming_window"], [32, 0, 1, "", "hann_window"], [32, 0, 1, "", "kaiser_bessel_derived_window"], [32, 0, 1, "", "kaiser_window"], [32, 0, 1, "", "static_blackman_window"], [32, 0, 1, "", "static_eye_like"], [32, 0, 1, "", "static_hamming_window"], [32, 0, 1, "", "static_hann_window"], [32, 0, 1, "", "static_kaiser_bessel_derived_window"], [32, 0, 1, "", "static_kaiser_window"], [32, 0, 1, "", "static_tril_indices"], [32, 0, 1, "", "static_unsorted_segment_min"], [32, 0, 1, "", "static_unsorted_segment_sum"], [32, 0, 1, "", "static_vorbis_window"], [32, 0, 1, "", "tril_indices"], [32, 0, 1, "", "trilu"], [32, 0, 1, "", "unsorted_segment_min"], [32, 0, 1, "", "unsorted_segment_sum"], [32, 0, 1, "", "vorbis_window"]], "ivy.data_classes.container.experimental.data_type": [[32, 1, 1, "", "_ContainerWithData_typeExperimental"]], "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental": [[32, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.device": [[32, 1, 1, "", "_ContainerWithDeviceExperimental"]], "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental": [[32, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.elementwise": [[32, 1, 1, "", "_ContainerWithElementWiseExperimental"]], "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "allclose"], [32, 0, 1, "", "binarizer"], [32, 0, 1, "", "conj"], [32, 0, 1, "", "copysign"], [32, 0, 1, "", "count_nonzero"], [32, 0, 1, "", "diff"], [32, 0, 1, "", "digamma"], [32, 0, 1, "", "fix"], [32, 0, 1, "", "float_power"], [32, 0, 1, "", "fmax"], [32, 0, 1, "", "fmod"], [32, 0, 1, "", "frexp"], [32, 0, 1, "", "gradient"], [32, 0, 1, "", "hypot"], [32, 0, 1, "", "isclose"], [32, 0, 1, "", "ldexp"], [32, 0, 1, "", "lerp"], [32, 0, 1, "", "modf"], [32, 0, 1, "", "nansum"], [32, 0, 1, "", "nextafter"], [32, 0, 1, "", "signbit"], [32, 0, 1, "", "sinc"], [32, 0, 1, "", "sparsify_tensor"], [32, 0, 1, "", "static_allclose"], [32, 0, 1, "", "static_binarizer"], [32, 0, 1, "", "static_conj"], [32, 0, 1, "", "static_copysign"], [32, 0, 1, "", "static_count_nonzero"], [32, 0, 1, "", "static_diff"], [32, 0, 1, "", "static_digamma"], [32, 0, 1, "", "static_fix"], [32, 0, 1, "", "static_float_power"], [32, 0, 1, "", "static_fmax"], [32, 0, 1, "", "static_fmod"], [32, 0, 1, "", "static_frexp"], [32, 0, 1, "", "static_gradient"], [32, 0, 1, "", "static_hypot"], [32, 0, 1, "", "static_isclose"], [32, 0, 1, "", "static_ldexp"], [32, 0, 1, "", "static_lerp"], [32, 0, 1, "", "static_modf"], [32, 0, 1, "", "static_nansum"], [32, 0, 1, "", "static_nextafter"], [32, 0, 1, "", "static_signbit"], [32, 0, 1, "", "static_sinc"], [32, 0, 1, "", "static_sparsify_tensor"], [32, 0, 1, "", "static_xlogy"], [32, 0, 1, "", "static_zeta"], [32, 0, 1, "", "xlogy"], [32, 0, 1, "", "zeta"]], "ivy.data_classes.container.experimental.general": [[32, 1, 1, "", "_ContainerWithGeneralExperimental"]], "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "_static_reduce"], [32, 0, 1, "", "reduce"]], "ivy.data_classes.container.experimental.gradients": [[32, 1, 1, "", "_ContainerWithGradientsExperimental"]], "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental": [[32, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.image": [[32, 1, 1, "", "_ContainerWithImageExperimental"]], "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental": [[32, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.layers": [[32, 1, 1, "", "_ContainerWithLayersExperimental"]], "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "_static_fft"], [32, 0, 1, "", "adaptive_avg_pool1d"], [32, 0, 1, "", "adaptive_avg_pool2d"], [32, 0, 1, "", "adaptive_max_pool2d"], [32, 0, 1, "", "avg_pool1d"], [32, 0, 1, "", "avg_pool2d"], [32, 0, 1, "", "avg_pool3d"], [32, 0, 1, "", "dct"], [32, 0, 1, "", "dft"], [32, 0, 1, "", "embedding"], [32, 0, 1, "", "fft"], [32, 0, 1, "", "idct"], [32, 0, 1, "", "ifft"], [32, 0, 1, "", "ifftn"], [32, 0, 1, "", "interpolate"], [32, 0, 1, "", "max_pool1d"], [32, 0, 1, "", "max_pool2d"], [32, 0, 1, "", "max_pool3d"], [32, 0, 1, "", "rfftn"], [32, 0, 1, "", "static_adaptive_avg_pool1d"], [32, 0, 1, "", "static_adaptive_avg_pool2d"], [32, 0, 1, "", "static_adaptive_max_pool2d"], [32, 0, 1, "", "static_avg_pool1d"], [32, 0, 1, "", "static_avg_pool2d"], [32, 0, 1, "", "static_avg_pool3d"], [32, 0, 1, "", "static_dct"], [32, 0, 1, "", "static_dft"], [32, 0, 1, "", "static_embedding"], [32, 0, 1, "", "static_idct"], [32, 0, 1, "", "static_ifft"], [32, 0, 1, "", "static_ifftn"], [32, 0, 1, "", "static_interpolate"], [32, 0, 1, "", "static_max_pool1d"], [32, 0, 1, "", "static_max_pool2d"], [32, 0, 1, "", "static_max_pool3d"], [32, 0, 1, "", "static_rfftn"]], "ivy.data_classes.container.experimental.linear_algebra": [[32, 1, 1, "", "_ContainerWithLinearAlgebraExperimental"]], "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "adjoint"], [32, 0, 1, "", "cond"], [32, 0, 1, "", "diagflat"], [32, 0, 1, "", "eig"], [32, 0, 1, "", "eigh_tridiagonal"], [32, 0, 1, "", "eigvals"], [32, 0, 1, "", "initialize_tucker"], [32, 0, 1, "", "kron"], [32, 0, 1, "", "make_svd_non_negative"], [32, 0, 1, "", "matrix_exp"], [32, 0, 1, "", "mode_dot"], [32, 0, 1, "", "multi_dot"], [32, 0, 1, "", "multi_mode_dot"], [32, 0, 1, "", "partial_tucker"], [32, 0, 1, "", "static_adjoint"], [32, 0, 1, "", "static_cond"], [32, 0, 1, "", "static_diagflat"], [32, 0, 1, "", "static_eig"], [32, 0, 1, "", "static_eigh_tridiagonal"], [32, 0, 1, "", "static_eigvals"], [32, 0, 1, "", "static_initialize_tucker"], [32, 0, 1, "", "static_kron"], [32, 0, 1, "", "static_make_svd_non_negative"], [32, 0, 1, "", "static_matrix_exp"], [32, 0, 1, "", "static_mode_dot"], [32, 0, 1, "", "static_multi_dot"], [32, 0, 1, "", "static_multi_mode_dot"], [32, 0, 1, "", "static_partial_tucker"], [32, 0, 1, "", "static_svd_flip"], [32, 0, 1, "", "static_truncated_svd"], [32, 0, 1, "", "static_tucker"], [32, 0, 1, "", "svd_flip"], [32, 0, 1, "", "truncated_svd"], [32, 0, 1, "", "tucker"]], "ivy.data_classes.container.experimental.losses": [[32, 1, 1, "", "_ContainerWithLossesExperimental"]], "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "_static_huber_loss"], [32, 0, 1, "", "_static_l1_loss"], [32, 0, 1, "", "_static_smooth_l1_loss"], [32, 0, 1, "", "_static_soft_margin_loss"], [32, 0, 1, "", "huber_loss"], [32, 0, 1, "", "l1_loss"], [32, 0, 1, "", "smooth_l1_loss"], [32, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.container.experimental.manipulation": [[32, 1, 1, "", "_ContainerWithManipulationExperimental"]], "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "_static_fill_diagonal"], [32, 0, 1, "", "_static_unique_consecutive"], [32, 0, 1, "", "as_strided"], [32, 0, 1, "", "associative_scan"], [32, 0, 1, "", "atleast_1d"], [32, 0, 1, "", "atleast_2d"], [32, 0, 1, "", "atleast_3d"], [32, 0, 1, "", "broadcast_shapes"], [32, 0, 1, "", "concat_from_sequence"], [32, 0, 1, "", "dsplit"], [32, 0, 1, "", "dstack"], [32, 0, 1, "", "expand"], [32, 0, 1, "", "fill_diagonal"], [32, 0, 1, "", "flatten"], [32, 0, 1, "", "fliplr"], [32, 0, 1, "", "flipud"], [32, 0, 1, "", "fold"], [32, 0, 1, "", "heaviside"], [32, 0, 1, "", "hsplit"], [32, 0, 1, "", "hstack"], [32, 0, 1, "", "i0"], [32, 0, 1, "", "matricize"], [32, 0, 1, "", "moveaxis"], [32, 0, 1, "", "pad"], [32, 0, 1, "", "partial_fold"], [32, 0, 1, "", "partial_tensor_to_vec"], [32, 0, 1, "", "partial_unfold"], [32, 0, 1, "", "partial_vec_to_tensor"], [32, 0, 1, "", "rot90"], [32, 0, 1, "", "soft_thresholding"], [32, 0, 1, "", "static_as_strided"], [32, 0, 1, "", "static_atleast_1d"], [32, 0, 1, "", "static_atleast_2d"], [32, 0, 1, "", "static_atleast_3d"], [32, 0, 1, "", "static_broadcast_shapes"], [32, 0, 1, "", "static_concat_from_sequence"], [32, 0, 1, "", "static_dsplit"], [32, 0, 1, "", "static_dstack"], [32, 0, 1, "", "static_expand"], [32, 0, 1, "", "static_flatten"], [32, 0, 1, "", "static_fliplr"], [32, 0, 1, "", "static_flipud"], [32, 0, 1, "", "static_fold"], [32, 0, 1, "", "static_heaviside"], [32, 0, 1, "", "static_hsplit"], [32, 0, 1, "", "static_hstack"], [32, 0, 1, "", "static_i0"], [32, 0, 1, "", "static_matricize"], [32, 0, 1, "", "static_moveaxis"], [32, 0, 1, "", "static_pad"], [32, 0, 1, "", "static_partial_fold"], [32, 0, 1, "", "static_partial_tensor_to_vec"], [32, 0, 1, "", "static_partial_unfold"], [32, 0, 1, "", "static_partial_vec_to_tensor"], [32, 0, 1, "", "static_rot90"], [32, 0, 1, "", "static_soft_thresholding"], [32, 0, 1, "", "static_take_along_axis"], [32, 0, 1, "", "static_top_k"], [32, 0, 1, "", "static_unfold"], [32, 0, 1, "", "static_vsplit"], [32, 0, 1, "", "static_vstack"], [32, 0, 1, "", "take_along_axis"], [32, 0, 1, "", "top_k"], [32, 0, 1, "", "unfold"], [32, 0, 1, "", "unique_consecutive"], [32, 0, 1, "", "vsplit"], [32, 0, 1, "", "vstack"]], "ivy.data_classes.container.experimental.norms": [[32, 1, 1, "", "_ContainerWithNormsExperimental"]], "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "batch_norm"], [32, 0, 1, "", "group_norm"], [32, 0, 1, "", "instance_norm"], [32, 0, 1, "", "l1_normalize"], [32, 0, 1, "", "l2_normalize"], [32, 0, 1, "", "lp_normalize"], [32, 0, 1, "", "static_batch_norm"], [32, 0, 1, "", "static_group_norm"], [32, 0, 1, "", "static_instance_norm"], [32, 0, 1, "", "static_l1_normalize"], [32, 0, 1, "", "static_l2_normalize"], [32, 0, 1, "", "static_lp_normalize"]], "ivy.data_classes.container.experimental.random": [[32, 1, 1, "", "_ContainerWithRandomExperimental"]], "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "bernoulli"], [32, 0, 1, "", "beta"], [32, 0, 1, "", "dirichlet"], [32, 0, 1, "", "gamma"], [32, 0, 1, "", "poisson"], [32, 0, 1, "", "static_bernoulli"], [32, 0, 1, "", "static_beta"], [32, 0, 1, "", "static_dirichlet"], [32, 0, 1, "", "static_gamma"], [32, 0, 1, "", "static_poisson"]], "ivy.data_classes.container.experimental.searching": [[32, 1, 1, "", "_ContainerWithSearchingExperimental"]], "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "static_unravel_index"], [32, 0, 1, "", "unravel_index"]], "ivy.data_classes.container.experimental.set": [[32, 1, 1, "", "_ContainerWithSetExperimental"]], "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental": [[32, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.sorting": [[32, 1, 1, "", "_ContainerWithSortingExperimental"]], "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "invert_permutation"], [32, 0, 1, "", "lexsort"], [32, 0, 1, "", "static_invert_permutation"], [32, 0, 1, "", "static_lexsort"]], "ivy.data_classes.container.experimental.statistical": [[32, 1, 1, "", "_ContainerWithStatisticalExperimental"]], "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "_static_cummax"], [32, 0, 1, "", "_static_cummin"], [32, 0, 1, "", "bincount"], [32, 0, 1, "", "corrcoef"], [32, 0, 1, "", "cov"], [32, 0, 1, "", "cummax"], [32, 0, 1, "", "cummin"], [32, 0, 1, "", "histogram"], [32, 0, 1, "", "igamma"], [32, 0, 1, "", "median"], [32, 0, 1, "", "nanmean"], [32, 0, 1, "", "nanmedian"], [32, 0, 1, "", "quantile"], [32, 0, 1, "", "static_bincount"], [32, 0, 1, "", "static_corrcoef"], [32, 0, 1, "", "static_cov"], [32, 0, 1, "", "static_histogram"], [32, 0, 1, "", "static_igamma"], [32, 0, 1, "", "static_median"], [32, 0, 1, "", "static_nanmean"], [32, 0, 1, "", "static_nanmedian"], [32, 0, 1, "", "static_quantile"]], "ivy.data_classes.container.experimental.utility": [[32, 1, 1, "", "_ContainerWithUtilityExperimental"]], "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental": [[32, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.general": [[33, 1, 1, "", "_ContainerWithGeneral"]], "ivy.data_classes.container.general._ContainerWithGeneral": [[33, 4, 1, "", "_abc_impl"], [33, 0, 1, "", "_static_all_equal"], [33, 0, 1, "", "_static_array_equal"], [33, 0, 1, "", "_static_assert_supports_inplace"], [33, 0, 1, "", "_static_clip_matrix_norm"], [33, 0, 1, "", "_static_clip_vector_norm"], [33, 0, 1, "", "_static_einops_rearrange"], [33, 0, 1, "", "_static_einops_reduce"], [33, 0, 1, "", "_static_einops_repeat"], [33, 0, 1, "", "_static_fourier_encode"], [33, 0, 1, "", "_static_gather"], [33, 0, 1, "", "_static_gather_nd"], [33, 0, 1, "", "_static_get_num_dims"], [33, 0, 1, "", "_static_has_nans"], [33, 0, 1, "", "_static_inplace_decrement"], [33, 0, 1, "", "_static_inplace_increment"], [33, 0, 1, "", "_static_inplace_update"], [33, 0, 1, "", "_static_is_array"], [33, 0, 1, "", "_static_is_ivy_array"], [33, 0, 1, "", "_static_is_native_array"], [33, 0, 1, "", "_static_scatter_flat"], [33, 0, 1, "", "_static_scatter_nd"], [33, 0, 1, "", "_static_stable_divide"], [33, 0, 1, "", "_static_stable_pow"], [33, 0, 1, "", "_static_supports_inplace_updates"], [33, 0, 1, "", "_static_to_list"], [33, 0, 1, "", "_static_to_numpy"], [33, 0, 1, "", "_static_to_scalar"], [33, 0, 1, "", "_static_value_is_nan"], [33, 0, 1, "", "all_equal"], [33, 0, 1, "", "array_equal"], [33, 0, 1, "", "assert_supports_inplace"], [33, 0, 1, "", "clip_matrix_norm"], [33, 0, 1, "", "clip_vector_norm"], [33, 0, 1, "", "einops_rearrange"], [33, 0, 1, "", "einops_reduce"], [33, 0, 1, "", "einops_repeat"], [33, 0, 1, "", "fourier_encode"], [33, 0, 1, "", "gather"], [33, 0, 1, "", "gather_nd"], [33, 0, 1, "", "get_num_dims"], [33, 0, 1, "", "has_nans"], [33, 0, 1, "", "inplace_decrement"], [33, 0, 1, "", "inplace_increment"], [33, 0, 1, "", "inplace_update"], [33, 0, 1, "", "is_array"], [33, 0, 1, "", "is_ivy_array"], [33, 0, 1, "", "is_native_array"], [33, 0, 1, "", "isin"], [33, 0, 1, "", "itemsize"], [33, 0, 1, "", "scatter_flat"], [33, 0, 1, "", "scatter_nd"], [33, 0, 1, "", "stable_divide"], [33, 0, 1, "", "stable_pow"], [33, 0, 1, "", "static_isin"], [33, 0, 1, "", "static_itemsize"], [33, 0, 1, "", "static_strides"], [33, 0, 1, "", "strides"], [33, 0, 1, "", "supports_inplace_updates"], [33, 0, 1, "", "to_list"], [33, 0, 1, "", "to_numpy"], [33, 0, 1, "", "to_scalar"], [33, 0, 1, "", "value_is_nan"]], "ivy.data_classes.container.gradients": [[34, 1, 1, "", "_ContainerWithGradients"]], "ivy.data_classes.container.gradients._ContainerWithGradients": [[34, 4, 1, "", "_abc_impl"], [34, 0, 1, "", "_static_stop_gradient"], [34, 0, 1, "", "adam_step"], [34, 0, 1, "", "adam_update"], [34, 0, 1, "", "gradient_descent_update"], [34, 0, 1, "", "lamb_update"], [34, 0, 1, "", "lars_update"], [34, 0, 1, "", "optimizer_update"], [34, 0, 1, "", "stop_gradient"]], "ivy.data_classes.container.image": [[35, 1, 1, "", "_ContainerWithImage"]], "ivy.data_classes.container.image._ContainerWithImage": [[35, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.layers": [[36, 1, 1, "", "_ContainerWithLayers"]], "ivy.data_classes.container.layers._ContainerWithLayers": [[36, 4, 1, "", "_abc_impl"], [36, 0, 1, "", "_static_conv1d"], [36, 0, 1, "", "_static_conv1d_transpose"], [36, 0, 1, "", "_static_conv2d"], [36, 0, 1, "", "_static_conv2d_transpose"], [36, 0, 1, "", "_static_conv3d"], [36, 0, 1, "", "_static_conv3d_transpose"], [36, 0, 1, "", "_static_depthwise_conv2d"], [36, 0, 1, "", "_static_dropout"], [36, 0, 1, "", "_static_dropout1d"], [36, 0, 1, "", "_static_dropout2d"], [36, 0, 1, "", "_static_dropout3d"], [36, 0, 1, "", "_static_linear"], [36, 0, 1, "", "_static_lstm_update"], [36, 0, 1, "", "_static_multi_head_attention"], [36, 0, 1, "", "_static_reduce_window"], [36, 0, 1, "", "_static_scaled_dot_product_attention"], [36, 0, 1, "", "conv1d"], [36, 0, 1, "", "conv1d_transpose"], [36, 0, 1, "", "conv2d"], [36, 0, 1, "", "conv2d_transpose"], [36, 0, 1, "", "conv3d"], [36, 0, 1, "", "conv3d_transpose"], [36, 0, 1, "", "depthwise_conv2d"], [36, 0, 1, "", "dropout"], [36, 0, 1, "", "dropout1d"], [36, 0, 1, "", "dropout2d"], [36, 0, 1, "", "dropout3d"], [36, 0, 1, "", "linear"], [36, 0, 1, "", "lstm_update"], [36, 0, 1, "", "multi_head_attention"], [36, 0, 1, "", "reduce_window"], [36, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.container.linear_algebra": [[37, 1, 1, "", "_ContainerWithLinearAlgebra"]], "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra": [[37, 4, 1, "", "_abc_impl"], [37, 0, 1, "", "_static_cholesky"], [37, 0, 1, "", "_static_cross"], [37, 0, 1, "", "_static_det"], [37, 0, 1, "", "_static_diag"], [37, 0, 1, "", "_static_diagonal"], [37, 0, 1, "", "_static_eigh"], [37, 0, 1, "", "_static_eigvalsh"], [37, 0, 1, "", "_static_inner"], [37, 0, 1, "", "_static_inv"], [37, 0, 1, "", "_static_matmul"], [37, 0, 1, "", "_static_matrix_norm"], [37, 0, 1, "", "_static_matrix_power"], [37, 0, 1, "", "_static_matrix_rank"], [37, 0, 1, "", "_static_matrix_transpose"], [37, 0, 1, "", "_static_outer"], [37, 0, 1, "", "_static_pinv"], [37, 0, 1, "", "_static_qr"], [37, 0, 1, "", "_static_slogdet"], [37, 0, 1, "", "_static_solve"], [37, 0, 1, "", "_static_svd"], [37, 0, 1, "", "_static_svdvals"], [37, 0, 1, "", "_static_tensordot"], [37, 0, 1, "", "_static_tensorsolve"], [37, 0, 1, "", "_static_trace"], [37, 0, 1, "", "_static_vander"], [37, 0, 1, "", "_static_vecdot"], [37, 0, 1, "", "_static_vector_norm"], [37, 0, 1, "", "_static_vector_to_skew_symmetric_matrix"], [37, 0, 1, "", "cholesky"], [37, 0, 1, "", "cross"], [37, 0, 1, "", "det"], [37, 0, 1, "", "diag"], [37, 0, 1, "", "diagonal"], [37, 0, 1, "", "eigh"], [37, 0, 1, "", "eigvalsh"], [37, 0, 1, "", "inner"], [37, 0, 1, "", "inv"], [37, 0, 1, "", "matmul"], [37, 0, 1, "", "matrix_norm"], [37, 0, 1, "", "matrix_power"], [37, 0, 1, "", "matrix_rank"], [37, 0, 1, "", "matrix_transpose"], [37, 0, 1, "", "outer"], [37, 0, 1, "", "pinv"], [37, 0, 1, "", "qr"], [37, 0, 1, "", "slogdet"], [37, 0, 1, "", "solve"], [37, 0, 1, "", "svd"], [37, 0, 1, "", "svdvals"], [37, 0, 1, "", "tensordot"], [37, 0, 1, "", "tensorsolve"], [37, 0, 1, "", "trace"], [37, 0, 1, "", "vander"], [37, 0, 1, "", "vecdot"], [37, 0, 1, "", "vector_norm"], [37, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.container.losses": [[38, 1, 1, "", "_ContainerWithLosses"]], "ivy.data_classes.container.losses._ContainerWithLosses": [[38, 4, 1, "", "_abc_impl"], [38, 0, 1, "", "_static_binary_cross_entropy"], [38, 0, 1, "", "_static_cross_entropy"], [38, 0, 1, "", "_static_sparse_cross_entropy"], [38, 0, 1, "", "binary_cross_entropy"], [38, 0, 1, "", "cross_entropy"], [38, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.container.manipulation": [[39, 1, 1, "", "_ContainerWithManipulation"]], "ivy.data_classes.container.manipulation._ContainerWithManipulation": [[39, 4, 1, "", "_abc_impl"], [39, 0, 1, "", "_static_clip"], [39, 0, 1, "", "_static_concat"], [39, 0, 1, "", "_static_constant_pad"], [39, 0, 1, "", "_static_expand_dims"], [39, 0, 1, "", "_static_flip"], [39, 0, 1, "", "_static_permute_dims"], [39, 0, 1, "", "_static_repeat"], [39, 0, 1, "", "_static_reshape"], [39, 0, 1, "", "_static_roll"], [39, 0, 1, "", "_static_split"], [39, 0, 1, "", "_static_squeeze"], [39, 0, 1, "", "_static_stack"], [39, 0, 1, "", "_static_swapaxes"], [39, 0, 1, "", "_static_tile"], [39, 0, 1, "", "_static_unstack"], [39, 0, 1, "", "_static_zero_pad"], [39, 0, 1, "", "clip"], [39, 0, 1, "", "concat"], [39, 0, 1, "", "constant_pad"], [39, 0, 1, "", "expand_dims"], [39, 0, 1, "", "flip"], [39, 0, 1, "", "permute_dims"], [39, 0, 1, "", "repeat"], [39, 0, 1, "", "reshape"], [39, 0, 1, "", "roll"], [39, 0, 1, "", "split"], [39, 0, 1, "", "squeeze"], [39, 0, 1, "", "stack"], [39, 0, 1, "", "swapaxes"], [39, 0, 1, "", "tile"], [39, 0, 1, "", "unstack"], [39, 0, 1, "", "zero_pad"]], "ivy.data_classes.container.norms": [[40, 1, 1, "", "_ContainerWithNorms"]], "ivy.data_classes.container.norms._ContainerWithNorms": [[40, 4, 1, "", "_abc_impl"], [40, 0, 1, "", "layer_norm"]], "ivy.data_classes.container.random": [[41, 1, 1, "", "_ContainerWithRandom"]], "ivy.data_classes.container.random._ContainerWithRandom": [[41, 4, 1, "", "_abc_impl"], [41, 0, 1, "", "_static_multinomial"], [41, 0, 1, "", "_static_randint"], [41, 0, 1, "", "_static_random_normal"], [41, 0, 1, "", "_static_random_uniform"], [41, 0, 1, "", "_static_shuffle"], [41, 0, 1, "", "multinomial"], [41, 0, 1, "", "randint"], [41, 0, 1, "", "random_normal"], [41, 0, 1, "", "random_uniform"], [41, 0, 1, "", "shuffle"]], "ivy.data_classes.container.searching": [[42, 1, 1, "", "_ContainerWithSearching"]], "ivy.data_classes.container.searching._ContainerWithSearching": [[42, 4, 1, "", "_abc_impl"], [42, 0, 1, "", "_static_argmax"], [42, 0, 1, "", "_static_argmin"], [42, 0, 1, "", "_static_argwhere"], [42, 0, 1, "", "_static_nonzero"], [42, 0, 1, "", "_static_where"], [42, 0, 1, "", "argmax"], [42, 0, 1, "", "argmin"], [42, 0, 1, "", "argwhere"], [42, 0, 1, "", "nonzero"], [42, 0, 1, "", "where"]], "ivy.data_classes.container.set": [[43, 1, 1, "", "_ContainerWithSet"]], "ivy.data_classes.container.set._ContainerWithSet": [[43, 4, 1, "", "_abc_impl"], [43, 0, 1, "", "_static_unique_all"], [43, 0, 1, "", "_static_unique_counts"], [43, 0, 1, "", "_static_unique_inverse"], [43, 0, 1, "", "_static_unique_values"], [43, 0, 1, "", "unique_all"], [43, 0, 1, "", "unique_counts"], [43, 0, 1, "", "unique_inverse"], [43, 0, 1, "", "unique_values"]], "ivy.data_classes.container.sorting": [[44, 1, 1, "", "_ContainerWithSorting"]], "ivy.data_classes.container.sorting._ContainerWithSorting": [[44, 4, 1, "", "_abc_impl"], [44, 0, 1, "", "_static_argsort"], [44, 0, 1, "", "_static_searchsorted"], [44, 0, 1, "", "_static_sort"], [44, 0, 1, "", "argsort"], [44, 0, 1, "", "msort"], [44, 0, 1, "", "searchsorted"], [44, 0, 1, "", "sort"], [44, 0, 1, "", "static_msort"]], "ivy.data_classes.container.statistical": [[45, 1, 1, "", "_ContainerWithStatistical"]], "ivy.data_classes.container.statistical._ContainerWithStatistical": [[45, 4, 1, "", "_abc_impl"], [45, 0, 1, "", "_static_cumprod"], [45, 0, 1, "", "_static_cumsum"], [45, 0, 1, "", "_static_prod"], [45, 0, 1, "", "_static_sum"], [45, 0, 1, "", "_static_var"], [45, 0, 1, "", "cumprod"], [45, 0, 1, "", "cumsum"], [45, 0, 1, "", "einsum"], [45, 0, 1, "", "max"], [45, 0, 1, "", "mean"], [45, 0, 1, "", "min"], [45, 0, 1, "", "prod"], [45, 0, 1, "", "std"], [45, 0, 1, "", "sum"], [45, 0, 1, "", "var"]], "ivy.data_classes.container.utility": [[46, 1, 1, "", "_ContainerWithUtility"]], "ivy.data_classes.container.utility._ContainerWithUtility": [[46, 4, 1, "", "_abc_impl"], [46, 0, 1, "", "_static_all"], [46, 0, 1, "", "_static_any"], [46, 0, 1, "", "all"], [46, 0, 1, "", "any"]], "ivy.data_classes.container.wrapping": [[47, 2, 1, "", "_wrap_function"], [47, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.data_classes.factorized_tensor": [[48, 3, 0, "-", "base"], [49, 3, 0, "-", "cp_tensor"], [50, 3, 0, "-", "tucker_tensor"]], "ivy.data_classes.factorized_tensor.base": [[48, 1, 1, "", "FactorizedTensor"]], "ivy.data_classes.factorized_tensor.base.FactorizedTensor": [[48, 0, 1, "", "__init__"], [48, 4, 1, "", "_abc_impl"], [48, 0, 1, "", "mode_dot"], [48, 0, 1, "", "norm"], [48, 0, 1, "", "to_tensor"], [48, 0, 1, "", "to_unfolded"], [48, 0, 1, "", "to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[49, 1, 1, "", "CPTensor"]], "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor": [[49, 0, 1, "", "__init__"], [49, 4, 1, "", "_abc_impl"], [49, 0, 1, "", "cp_copy"], [49, 0, 1, "", "cp_flip_sign"], [49, 0, 1, "", "cp_lstsq_grad"], [49, 0, 1, "", "cp_mode_dot"], [49, 0, 1, "", "cp_n_param"], [49, 0, 1, "", "cp_norm"], [49, 0, 1, "", "cp_normalize"], [49, 0, 1, "", "cp_to_tensor"], [49, 0, 1, "", "cp_to_unfolded"], [49, 0, 1, "", "cp_to_vec"], [49, 0, 1, "", "mode_dot"], [49, 5, 1, "", "n_param"], [49, 0, 1, "", "norm"], [49, 0, 1, "", "normalize"], [49, 0, 1, "", "to_tensor"], [49, 0, 1, "", "to_unfolded"], [49, 0, 1, "", "to_vec"], [49, 0, 1, "", "unfolding_dot_khatri_rao"], [49, 0, 1, "", "validate_cp_rank"], [49, 0, 1, "", "validate_cp_tensor"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[50, 1, 1, "", "TuckerTensor"], [50, 2, 1, "", "_bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor": [[50, 0, 1, "", "__init__"], [50, 4, 1, "", "_abc_impl"], [50, 0, 1, "", "mode_dot"], [50, 5, 1, "", "n_param"], [50, 0, 1, "", "to_tensor"], [50, 0, 1, "", "to_unfolded"], [50, 0, 1, "", "to_vec"], [50, 0, 1, "", "tucker_copy"], [50, 0, 1, "", "tucker_mode_dot"], [50, 0, 1, "", "tucker_n_param"], [50, 0, 1, "", "tucker_normalize"], [50, 0, 1, "", "tucker_to_tensor"], [50, 0, 1, "", "tucker_to_unfolded"], [50, 0, 1, "", "tucker_to_vec"], [50, 0, 1, "", "validate_tucker_rank"], [50, 0, 1, "", "validate_tucker_tensor"]], "ivy.data_classes.nested_array": [[55, 3, 0, "-", "base"], [56, 3, 0, "-", "elementwise"], [54, 3, 0, "-", "nested_array"]], "ivy.data_classes.nested_array.base": [[55, 1, 1, "", "NestedArrayBase"]], "ivy.data_classes.nested_array.base.NestedArrayBase": [[55, 0, 1, "", "__init__"], [55, 4, 1, "", "_abc_impl"], [55, 0, 1, "", "broadcast_shapes"], [55, 5, 1, "", "data"], [55, 5, 1, "", "device"], [55, 5, 1, "", "dtype"], [55, 5, 1, "", "inner_shape"], [55, 5, 1, "", "ndim"], [55, 0, 1, "", "nested_array"], [55, 5, 1, "", "nested_rank"], [55, 0, 1, "", "ragged_map"], [55, 0, 1, "", "ragged_multi_map"], [55, 0, 1, "", "ragged_multi_map_in_function"], [55, 0, 1, "", "replace_ivy_arrays"], [55, 5, 1, "", "shape"], [55, 0, 1, "", "unbind"]], "ivy.data_classes.nested_array.elementwise": [[56, 1, 1, "", "NestedArrayElementwise"]], "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise": [[56, 4, 1, "", "_abc_impl"], [56, 0, 1, "", "static_add"]], "ivy.data_classes.nested_array.nested_array": [[54, 1, 1, "", "NestedArray"]], "ivy.data_classes.nested_array.nested_array.NestedArray": [[54, 0, 1, "", "__init__"], [54, 0, 1, "", "from_row_lengths"], [54, 0, 1, "", "from_row_splits"]], "ivy.functional.ivy": [[534, 3, 0, "-", "activations"], [535, 3, 0, "-", "constants"], [536, 3, 0, "-", "control_flow_ops"], [537, 3, 0, "-", "creation"], [538, 3, 0, "-", "data_type"], [539, 3, 0, "-", "device"], [540, 3, 0, "-", "elementwise"], [541, 3, 0, "-", "experimental"], [542, 3, 0, "-", "general"], [543, 3, 0, "-", "gradients"], [544, 3, 0, "-", "layers"], [545, 3, 0, "-", "linear_algebra"], [546, 3, 0, "-", "losses"], [547, 3, 0, "-", "manipulation"], [548, 3, 0, "-", "meta"], [549, 3, 0, "-", "nest"], [550, 3, 0, "-", "norms"], [551, 3, 0, "-", "random"], [552, 3, 0, "-", "searching"], [553, 3, 0, "-", "set"], [554, 3, 0, "-", "sorting"], [555, 3, 0, "-", "statistical"], [556, 3, 0, "-", "utility"]], "ivy.functional.ivy.experimental": [[301, 3, 0, "-", "activations"], [302, 3, 0, "-", "constants"], [303, 3, 0, "-", "creation"], [304, 3, 0, "-", "data_type"], [305, 3, 0, "-", "device"], [306, 3, 0, "-", "elementwise"], [307, 3, 0, "-", "general"], [308, 3, 0, "-", "gradients"], [309, 3, 0, "-", "layers"], [310, 3, 0, "-", "linear_algebra"], [311, 3, 0, "-", "losses"], [312, 3, 0, "-", "manipulation"], [313, 3, 0, "-", "meta"], [314, 3, 0, "-", "nest"], [315, 3, 0, "-", "norms"], [316, 3, 0, "-", "random"], [317, 3, 0, "-", "searching"], [318, 3, 0, "-", "set"], [319, 3, 0, "-", "sorting"], [320, 3, 0, "-", "sparse_array"], [321, 3, 0, "-", "statistical"], [322, 3, 0, "-", "utility"]], "ivy.stateful": [[678, 3, 0, "-", "activations"], [679, 3, 0, "-", "converters"], [680, 3, 0, "-", "helpers"], [681, 3, 0, "-", "initializers"], [682, 3, 0, "-", "layers"], [683, 3, 0, "-", "losses"], [684, 3, 0, "-", "module"], [685, 3, 0, "-", "norms"], [686, 3, 0, "-", "optimizers"], [687, 3, 0, "-", "sequential"]], "ivy.stateful.activations": [[678, 1, 1, "", "ELU"], [678, 1, 1, "", "GEGLU"], [678, 1, 1, "", "GELU"], [678, 1, 1, "", "Hardswish"], [678, 1, 1, "", "LeakyReLU"], [678, 1, 1, "", "LogSigmoid"], [678, 1, 1, "", "LogSoftmax"], [678, 1, 1, "", "Logit"], [678, 1, 1, "", "Mish"], [678, 1, 1, "", "PReLU"], [678, 1, 1, "", "ReLU"], [678, 1, 1, "", "ReLU6"], [678, 1, 1, "", "SeLU"], [678, 1, 1, "", "SiLU"], [678, 1, 1, "", "Sigmoid"], [678, 1, 1, "", "Softmax"], [678, 1, 1, "", "Softplus"], [678, 1, 1, "", "Tanh"]], "ivy.stateful.activations.ELU": [[678, 0, 1, "", "__init__"]], "ivy.stateful.activations.GEGLU": [[678, 0, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[678, 0, 1, "", "__init__"]], "ivy.stateful.activations.Hardswish": [[678, 0, 1, "", "__init__"]], "ivy.stateful.activations.LeakyReLU": [[678, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSigmoid": [[678, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSoftmax": [[678, 0, 1, "", "__init__"]], "ivy.stateful.activations.Logit": [[678, 0, 1, "", "__init__"]], "ivy.stateful.activations.Mish": [[678, 0, 1, "", "__init__"]], "ivy.stateful.activations.PReLU": [[678, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU": [[678, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU6": [[678, 0, 1, "", "__init__"]], "ivy.stateful.activations.SeLU": [[678, 0, 1, "", "__init__"]], "ivy.stateful.activations.SiLU": [[678, 0, 1, "", "__init__"]], "ivy.stateful.activations.Sigmoid": [[678, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softmax": [[678, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softplus": [[678, 0, 1, "", "__init__"]], "ivy.stateful.activations.Tanh": [[678, 0, 1, "", "__init__"]], "ivy.stateful.converters": [[679, 1, 1, "", "ModuleConverters"], [679, 2, 1, "", "to_ivy_module"]], "ivy.stateful.converters.ModuleConverters": [[679, 0, 1, "", "from_flax_module"], [679, 0, 1, "", "from_haiku_module"], [679, 0, 1, "", "from_keras_module"], [679, 0, 1, "", "from_paddle_module"], [679, 0, 1, "", "from_torch_module"]], "ivy.stateful.helpers": [[680, 1, 1, "", "ModuleHelpers"]], "ivy.stateful.helpers.ModuleHelpers": [[680, 0, 1, "", "check_submod_rets"], [680, 0, 1, "", "get_mod_key"], [680, 0, 1, "", "mod_depth"], [680, 0, 1, "", "mod_height"], [680, 0, 1, "", "mod_with_top_mod_key_chain"], [680, 0, 1, "", "show_mod_in_top_mod"], [680, 0, 1, "", "show_structure"], [680, 0, 1, "", "show_v_in_top_v"], [680, 0, 1, "", "sub_mods"], [680, 0, 1, "", "track_submod_call_order"], [680, 0, 1, "", "track_submod_rets"], [680, 0, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.initializers": [[681, 1, 1, "", "Constant"], [681, 1, 1, "", "FirstLayerSiren"], [681, 1, 1, "", "GlorotUniform"], [681, 1, 1, "", "Initializer"], [681, 1, 1, "", "KaimingNormal"], [681, 1, 1, "", "Ones"], [681, 1, 1, "", "RandomNormal"], [681, 1, 1, "", "Siren"], [681, 1, 1, "", "Uniform"], [681, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[681, 0, 1, "", "__init__"], [681, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[681, 0, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[681, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Initializer": [[681, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.KaimingNormal": [[681, 0, 1, "", "__init__"], [681, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[681, 0, 1, "", "__init__"]], "ivy.stateful.initializers.RandomNormal": [[681, 0, 1, "", "__init__"], [681, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Siren": [[681, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[681, 0, 1, "", "__init__"], [681, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[681, 0, 1, "", "__init__"]], "ivy.stateful.layers": [[682, 1, 1, "", "AdaptiveAvgPool1d"], [682, 1, 1, "", "AdaptiveAvgPool2d"], [682, 1, 1, "", "AvgPool1D"], [682, 1, 1, "", "AvgPool2D"], [682, 1, 1, "", "AvgPool3D"], [682, 1, 1, "", "Conv1D"], [682, 1, 1, "", "Conv1DTranspose"], [682, 1, 1, "", "Conv2D"], [682, 1, 1, "", "Conv2DTranspose"], [682, 1, 1, "", "Conv3D"], [682, 1, 1, "", "Conv3DTranspose"], [682, 1, 1, "", "Dct"], [682, 1, 1, "", "DepthwiseConv2D"], [682, 1, 1, "", "Dropout"], [682, 1, 1, "", "Embedding"], [682, 1, 1, "", "FFT"], [682, 1, 1, "", "Identity"], [682, 1, 1, "", "LSTM"], [682, 1, 1, "", "Linear"], [682, 1, 1, "", "MaxPool1D"], [682, 1, 1, "", "MaxPool2D"], [682, 1, 1, "", "MaxPool3D"], [682, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.AdaptiveAvgPool1d": [[682, 0, 1, "", "__init__"]], "ivy.stateful.layers.AdaptiveAvgPool2d": [[682, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool1D": [[682, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool2D": [[682, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool3D": [[682, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1D": [[682, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[682, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[682, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[682, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[682, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[682, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dct": [[682, 0, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[682, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[682, 0, 1, "", "__init__"]], "ivy.stateful.layers.Embedding": [[682, 0, 1, "", "__init__"]], "ivy.stateful.layers.FFT": [[682, 0, 1, "", "__init__"]], "ivy.stateful.layers.Identity": [[682, 0, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[682, 0, 1, "", "__init__"], [682, 0, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[682, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool1D": [[682, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool2D": [[682, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool3D": [[682, 0, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[682, 0, 1, "", "__init__"]], "ivy.stateful.losses": [[683, 1, 1, "", "BinaryCrossEntropyLoss"], [683, 1, 1, "", "CrossEntropyLoss"], [683, 1, 1, "", "LogPoissonLoss"]], "ivy.stateful.losses.BinaryCrossEntropyLoss": [[683, 0, 1, "", "__init__"]], "ivy.stateful.losses.CrossEntropyLoss": [[683, 0, 1, "", "__init__"]], "ivy.stateful.losses.LogPoissonLoss": [[683, 0, 1, "", "__init__"]], "ivy.stateful.module": [[684, 1, 1, "", "Module"], [684, 1, 1, "", "ModuleMeta"]], "ivy.stateful.module.Module": [[684, 0, 1, "", "__call__"], [684, 0, 1, "", "__init__"], [684, 0, 1, "", "build"], [684, 5, 1, "", "build_mode"], [684, 5, 1, "", "built_"], [684, 0, 1, "", "compile"], [684, 0, 1, "", "eval"], [684, 0, 1, "", "load"], [684, 0, 1, "", "register_buffer"], [684, 0, 1, "", "save"], [684, 0, 1, "", "save_weights"], [684, 0, 1, "", "show_graph"], [684, 0, 1, "", "train"]], "ivy.stateful.norms": [[685, 1, 1, "", "BatchNorm2D"], [685, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.BatchNorm2D": [[685, 0, 1, "", "__init__"]], "ivy.stateful.norms.LayerNorm": [[685, 0, 1, "", "__init__"]], "ivy.stateful.optimizers": [[686, 1, 1, "", "Adam"], [686, 1, 1, "", "LAMB"], [686, 1, 1, "", "LARS"], [686, 1, 1, "", "Optimizer"], [686, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[686, 0, 1, "", "__init__"], [686, 0, 1, "", "set_state"], [686, 5, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[686, 0, 1, "", "__init__"], [686, 0, 1, "", "set_state"], [686, 5, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[686, 0, 1, "", "__init__"], [686, 0, 1, "", "set_state"], [686, 5, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[686, 0, 1, "", "__init__"], [686, 0, 1, "", "set_state"], [686, 0, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[686, 0, 1, "", "__init__"], [686, 0, 1, "", "set_state"], [686, 5, 1, "", "state"]], "ivy.stateful.sequential": [[687, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[687, 0, 1, "", "__init__"]], "ivy.utils": [[688, 3, 0, "-", "assertions"], [689, 3, 0, "-", "backend"], [693, 3, 0, "-", "dynamic_import"], [694, 3, 0, "-", "einsum_parser"], [695, 3, 0, "-", "exceptions"], [696, 3, 0, "-", "inspection"], [697, 3, 0, "-", "logging"], [698, 3, 0, "-", "profiler"], [699, 3, 0, "-", "verbosity"]], "ivy.utils.assertions": [[688, 2, 1, "", "check_all"], [688, 2, 1, "", "check_all_or_any_fn"], [688, 2, 1, "", "check_any"], [688, 2, 1, "", "check_dev_correct_formatting"], [688, 2, 1, "", "check_dimensions"], [688, 2, 1, "", "check_elem_in_list"], [688, 2, 1, "", "check_equal"], [688, 2, 1, "", "check_exists"], [688, 2, 1, "", "check_false"], [688, 2, 1, "", "check_fill_value_and_dtype_are_compatible"], [688, 2, 1, "", "check_gather_input_valid"], [688, 2, 1, "", "check_gather_nd_input_valid"], [688, 2, 1, "", "check_greater"], [688, 2, 1, "", "check_inplace_sizes_valid"], [688, 2, 1, "", "check_isinstance"], [688, 2, 1, "", "check_kernel_padding_size"], [688, 2, 1, "", "check_less"], [688, 2, 1, "", "check_one_way_broadcastable"], [688, 2, 1, "", "check_same_dtype"], [688, 2, 1, "", "check_shape"], [688, 2, 1, "", "check_shapes_broadcastable"], [688, 2, 1, "", "check_true"], [688, 2, 1, "", "check_unsorted_segment_min_valid_params"]], "ivy.utils.backend": [[690, 3, 0, "-", "ast_helpers"], [691, 3, 0, "-", "handler"], [692, 3, 0, "-", "sub_backend_handler"]], "ivy.utils.backend.ast_helpers": [[690, 1, 1, "", "ImportTransformer"], [690, 1, 1, "", "IvyLoader"], [690, 1, 1, "", "IvyPathFinder"]], "ivy.utils.backend.ast_helpers.ImportTransformer": [[690, 0, 1, "", "__init__"], [690, 0, 1, "", "impersonate_import"], [690, 0, 1, "", "visit_Import"], [690, 0, 1, "", "visit_ImportFrom"]], "ivy.utils.backend.ast_helpers.IvyLoader": [[690, 0, 1, "", "__init__"], [690, 0, 1, "", "exec_module"]], "ivy.utils.backend.ast_helpers.IvyPathFinder": [[690, 0, 1, "", "find_spec"]], "ivy.utils.backend.handler": [[691, 1, 1, "", "ContextManager"], [691, 2, 1, "", "choose_random_backend"], [691, 2, 1, "", "convert_from_numpy_to_target_backend"], [691, 2, 1, "", "convert_from_source_backend_to_numpy"], [691, 2, 1, "", "current_backend"], [691, 2, 1, "", "fn_name_from_version_specific_fn_name"], [691, 2, 1, "", "prevent_access_locally"], [691, 2, 1, "", "previous_backend"], [691, 2, 1, "", "set_backend"], [691, 2, 1, "", "set_backend_to_specific_version"], [691, 2, 1, "", "set_jax_backend"], [691, 2, 1, "", "set_mxnet_backend"], [691, 2, 1, "", "set_numpy_backend"], [691, 2, 1, "", "set_paddle_backend"], [691, 2, 1, "", "set_tensorflow_backend"], [691, 2, 1, "", "set_torch_backend"], [691, 2, 1, "", "unset_backend"], [691, 2, 1, "", "with_backend"]], "ivy.utils.backend.handler.ContextManager": [[691, 0, 1, "", "__init__"]], "ivy.utils.backend.sub_backend_handler": [[692, 2, 1, "", "available_sub_backends"], [692, 2, 1, "", "clear_sub_backends"], [692, 2, 1, "", "find_available_sub_backends"], [692, 2, 1, "", "set_sub_backend"], [692, 2, 1, "", "unset_sub_backend"]], "ivy.utils.dynamic_import": [[693, 2, 1, "", "import_module"]], "ivy.utils.einsum_parser": [[694, 2, 1, "", "convert_interleaved_input"], [694, 2, 1, "", "convert_subscripts"], [694, 2, 1, "", "find_output_shape"], [694, 2, 1, "", "find_output_str"], [694, 2, 1, "", "gen_unused_symbols"], [694, 2, 1, "", "get_symbol"], [694, 2, 1, "", "has_valid_einsum_chars_only"], [694, 2, 1, "", "is_valid_einsum_char"], [694, 2, 1, "", "legalise_einsum_expr"], [694, 2, 1, "", "possibly_convert_to_numpy"]], "ivy.utils.exceptions": [[695, 7, 1, "", "InplaceUpdateException"], [695, 7, 1, "", "InvalidBackendException"], [695, 7, 1, "", "IvyAttributeError"], [695, 7, 1, "", "IvyBackendException"], [695, 7, 1, "", "IvyBroadcastShapeError"], [695, 7, 1, "", "IvyDeviceError"], [695, 7, 1, "", "IvyDtypePromotionError"], [695, 7, 1, "", "IvyError"], [695, 7, 1, "", "IvyException"], [695, 7, 1, "", "IvyIndexError"], [695, 7, 1, "", "IvyNotImplementedException"], [695, 7, 1, "", "IvyValueError"], [695, 2, 1, "", "handle_exceptions"]], "ivy.utils.exceptions.InplaceUpdateException": [[695, 0, 1, "", "__init__"]], "ivy.utils.exceptions.InvalidBackendException": [[695, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyAttributeError": [[695, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBackendException": [[695, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBroadcastShapeError": [[695, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDeviceError": [[695, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDtypePromotionError": [[695, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyError": [[695, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyException": [[695, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyIndexError": [[695, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyNotImplementedException": [[695, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyValueError": [[695, 0, 1, "", "__init__"]], "ivy.utils.inspection": [[696, 2, 1, "", "add_array_specs"], [696, 2, 1, "", "fn_array_spec"]], "ivy.utils.logging": [[697, 2, 1, "", "set_logging_mode"], [697, 2, 1, "", "unset_logging_mode"]], "ivy.utils.profiler": [[698, 1, 1, "", "Profiler"]], "ivy.utils.profiler.Profiler": [[698, 0, 1, "", "__init__"], [698, 4, 1, "", "print_stats"], [698, 4, 1, "", "viz"]], "ivy.utils.verbosity": [[699, 2, 1, "", "cprint"]]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:function", "3": "py:module", "4": "py:attribute", "5": "py:property", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "module", "Python module"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"graph": [0, 738, 743, 754, 759], "compil": [0, 738, 743, 751, 756, 758, 759], "api": [0, 1, 2, 700, 703, 710, 714, 718, 719, 729, 734, 738, 740, 742, 743, 750, 757, 759], "us": [0, 2, 700, 707, 710, 711, 714, 729, 732, 741, 747], "eager": 0, "v": [0, 703, 725, 746], "lazi": 0, "arrai": [0, 51, 54, 77, 320, 703, 714, 715, 719, 726, 740, 750], "cach": 0, "gener": [0, 10, 33, 307, 542, 729, 733, 736], "state": [0, 742, 746], "sharp": [0, 2], "bit": [0, 2], "exampl": [0, 2, 545, 594, 700, 706, 722, 726, 729, 732, 736], "set": [1, 20, 43, 318, 553, 700, 711, 716, 735], "up": [1, 700, 711], "ivi": [1, 2, 700, 706, 710, 712, 715, 717, 719, 722, 724, 729, 731, 732, 733, 734, 735, 738, 739, 740, 741, 742, 743, 745, 759], "folder": 1, "kei": 1, "issu": [1, 710, 712, 725], "question": 1, "transpil": [2, 700, 743], "function": [2, 58, 710, 718, 720, 721, 724, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 738, 743, 746], "librari": [2, 706, 745], "modul": [2, 684, 720, 721, 742], "unifi": [2, 700, 704, 740, 755, 759], "activ": [3, 25, 301, 534, 678], "convers": [4, 27, 728], "creation": [5, 28, 303, 537], "data": [6, 29, 57, 304, 538, 553, 655, 656, 657, 658, 720, 731, 733, 741, 746], "type": [6, 29, 304, 538, 720, 727, 731, 746], "devic": [7, 30, 305, 539, 721, 726, 731], "elementwis": [8, 31, 56, 306, 540], "experiment": [9, 32, 541, 710], "gradient": [11, 34, 285, 308, 543, 729], "imag": [12, 35, 207, 707, 717], "layer": [13, 36, 309, 544, 682], "linear": [14, 37, 310, 545, 568], "algebra": [14, 37, 310, 545], "loss": [15, 38, 311, 546, 683], "manipul": [16, 39, 312, 547], "norm": [17, 40, 315, 550, 685], "random": [18, 41, 316, 551], "search": [19, 42, 317, 552], "sort": [21, 44, 319, 554, 662], "statist": [22, 45, 321, 555], "util": [23, 46, 322, 556, 677], "wrap": [24, 47, 728], "base": [26, 48, 55], "cp": 49, "tensor": [49, 50, 53], "tucker": [50, 372], "contain": [52, 712, 718, 741], "factor": 53, "nest": [54, 314, 549], "class": [57, 676, 715, 724, 731, 740], "gelu": 59, "hardswish": 60, "leaky_relu": 61, "log_softmax": 62, "mish": 63, "relu": 64, "sigmoid": 65, "softmax": 66, "softplu": 67, "softsign": 68, "cast_bool": 69, "cmp_i": 70, "cmp_isnot": 71, "for_loop": 72, "if_els": 73, "try_except": 74, "while_loop": 75, "arang": 76, "asarrai": 78, "asarray_handle_nest": 79, "asarray_infer_devic": 80, "asarray_infer_dtyp": 81, "asarray_inputs_to_native_shap": 82, "asarray_to_native_arrays_and_back": 83, "copy_arrai": 84, "empti": 85, "empty_lik": 86, "ey": 87, "from_dlpack": 88, "note": [88, 537], "frombuff": 89, "full": [90, 732], "full_lik": 91, "linspac": 92, "logspac": 93, "meshgrid": 94, "native_arrai": 95, "one_hot": 96, "ones": 97, "ones_lik": 98, "tril": 99, "triu": 100, "triu_indic": 101, "zero": 102, "zeros_lik": 103, "as_ivy_dtyp": 104, "as_native_dtyp": 105, "astyp": 106, "broadcast_arrai": 107, "broadcast_to": 108, "can_cast": 109, "check_float": 110, "closest_valid_dtyp": 111, "default_complex_dtyp": 112, "default_dtyp": 113, "default_float_dtyp": 114, "default_int_dtyp": 115, "default_uint_dtyp": 116, "dtype": [117, 726], "dtype_bit": 118, "finfo": 119, "function_supported_dtyp": 120, "function_unsupported_dtyp": 121, "iinfo": 122, "infer_default_dtyp": 123, "invalid_dtyp": 124, "is_bool_dtyp": 125, "is_complex_dtyp": 126, "is_float_dtyp": 127, "is_hashable_dtyp": 128, "is_int_dtyp": 129, "is_native_dtyp": 130, "is_uint_dtyp": 131, "promote_typ": 132, "promote_types_of_input": 133, "result_typ": 134, "set_default_complex_dtyp": 135, "set_default_dtyp": 136, "set_default_float_dtyp": 137, "set_default_int_dtyp": 138, "set_default_uint_dtyp": 139, "type_promote_arrai": 140, "unset_default_complex_dtyp": 141, "unset_default_dtyp": 142, "unset_default_float_dtyp": 143, "unset_default_int_dtyp": 144, "unset_default_uint_dtyp": 145, "valid_dtyp": 146, "as_ivy_dev": 147, "as_native_dev": 148, "clear_cached_mem_on_dev": 149, "default_devic": 150, "dev": 151, "dev_util": 152, "function_supported_devic": 153, "function_unsupported_devic": 154, "get_all_ivy_arrays_on_dev": 155, "gpu_is_avail": 156, "handle_soft_device_vari": 157, "num_cpu_cor": 158, "num_gpu": 159, "num_ivy_arrays_on_dev": 160, "percent_used_mem_on_dev": 161, "print_all_ivy_arrays_on_dev": 162, "set_default_devic": 163, "set_soft_device_mod": 164, "paramet": [164, 487, 488, 493, 494, 496, 497, 539, 542, 735], "set_split_factor": 165, "split_factor": 166, "split_func_cal": 167, "to_devic": 168, "total_mem_on_dev": 169, "tpu_is_avail": 170, "unset_default_devic": 171, "unset_soft_device_mod": 172, "used_mem_on_dev": 173, "ab": 174, "aco": 175, "acosh": 176, "add": [177, 722, 732, 759], "angl": 178, "asin": 179, "asinh": 180, "atan": 181, "atan2": 182, "atanh": 183, "bitwise_and": 184, "bitwise_invert": 185, "bitwise_left_shift": 186, "bitwise_or": 187, "bitwise_right_shift": 188, "bitwise_xor": 189, "ceil": 190, "co": 191, "cosh": 192, "deg2rad": 193, "divid": 194, "equal": 195, "erf": 196, "exp": 197, "exp2": 198, "expm1": 199, "floor": 200, "floor_divid": 201, "fmin": 202, "fmod": 203, "gcd": 204, "greater": 205, "greater_equ": 206, "isfinit": 208, "isinf": 209, "isnan": 210, "isreal": 211, "lcm": 212, "less": 213, "less_equ": 214, "log": [215, 697, 711], "log10": 216, "log1p": 217, "log2": 218, "logaddexp": 219, "logaddexp2": 220, "logical_and": 221, "logical_not": 222, "logical_or": 223, "logical_xor": 224, "maximum": 225, "minimum": 226, "multipli": 227, "nan_to_num": 228, "neg": 229, "not_equ": 230, "posit": [231, 726], "pow": 232, "rad2deg": 233, "real": 234, "reciproc": 235, "remaind": 236, "round": 237, "sign": 238, "sin": 239, "sinh": 240, "sqrt": 241, "squar": 242, "subtract": 243, "tan": [244, 722, 732], "tanh": 245, "trapz": 246, "trunc": 247, "trunc_divid": 248, "elu": 249, "logit": 250, "logsigmoid": 251, "prelu": 252, "relu6": 253, "selu": 254, "sequence_length": 255, "silu": 256, "thresholded_relu": 257, "blackman_window": 258, "eye_lik": 259, "hamming_window": 260, "hann_window": 261, "indic": 262, "kaiser_bessel_derived_window": 263, "kaiser_window": 264, "ndenumer": 265, "ndindex": 266, "random_cp": 267, "random_tuck": 268, "tril_indic": 269, "trilu": 270, "unsorted_segment_min": 271, "unsorted_segment_sum": 272, "vorbis_window": 273, "allclos": 274, "binar": 275, "conj": 276, "copysign": 277, "count_nonzero": 278, "diff": 279, "digamma": 280, "fix": 281, "float_pow": 282, "fmax": 283, "frexp": 284, "hypot": 286, "isclos": 287, "ldexp": 288, "lerp": 289, "lgamma": 290, "modf": 291, "nansum": 292, "nextaft": 293, "signbit": 294, "sinc": 295, "sparsify_tensor": 296, "xlogi": 297, "zeta": 298, "reduc": 299, "bind_custom_gradient_funct": 300, "constant": [302, 535], "meta": [313, 548], "spars": 320, "adaptive_avg_pool1d": 323, "adaptive_avg_pool2d": 324, "adaptive_max_pool2d": 325, "area_interpol": 326, "avg_pool1d": 327, "avg_pool2d": 328, "avg_pool3d": 329, "dct": 330, "dft": 331, "dropout1d": 332, "dropout2d": 333, "dropout3d": 334, "embed": 335, "fft": 336, "fft2": 337, "generate_einsum_equ": 338, "get_interpolate_kernel": 339, "idct": 340, "ifft": 341, "ifftn": 342, "interp": 343, "interpol": 344, "max_pool1d": 345, "max_pool2d": 346, "max_pool3d": 347, "max_unpool1d": 348, "nearest_interpol": 349, "pool": 350, "reduce_window": 351, "rfftn": 352, "adjoint": 353, "cond": 354, "diagflat": 355, "dot": 356, "eig": [357, 577], "eigh_tridiagon": 358, "eigval": 359, "initialize_tuck": 360, "khatri_rao": 361, "kron": 362, "kroneck": 363, "make_svd_non_neg": 364, "matrix_exp": 365, "mode_dot": 366, "multi_dot": 367, "multi_mode_dot": 368, "partial_tuck": 369, "svd_flip": 370, "truncated_svd": 371, "huber_loss": 373, "l1_loss": 374, "log_poisson_loss": 375, "smooth_l1_loss": 376, "soft_margin_loss": 377, "as_strid": 378, "associative_scan": 379, "atleast_1d": 380, "atleast_2d": 381, "atleast_3d": 382, "broadcast_shap": 383, "choos": 384, "concat_from_sequ": 385, "dsplit": 386, "dstack": 387, "expand": 388, "fill_diagon": 389, "flatten": 390, "fliplr": 391, "flipud": 392, "fold": 393, "heavisid": 394, "hsplit": 395, "hstack": 396, "i0": 397, "matric": 398, "moveaxi": 399, "pad": 400, "partial_fold": 401, "partial_tensor_to_vec": 402, "partial_unfold": 403, "partial_vec_to_tensor": 404, "put_along_axi": 405, "rot90": 406, "soft_threshold": 407, "take_along_axi": 408, "top_k": 409, "unfold": 410, "unique_consecut": 411, "vsplit": 412, "vstack": 413, "batch_norm": 414, "group_norm": 415, "instance_norm": 416, "l1_normal": 417, "l2_normal": 418, "lp_normal": 419, "bernoulli": 420, "beta": 421, "dirichlet": 422, "gamma": 423, "poisson": 424, "unravel_index": 425, "invert_permut": 426, "lexsort": 427, "is_ivy_sparse_arrai": 428, "is_native_sparse_arrai": 429, "native_sparse_arrai": 430, "native_sparse_array_to_indices_values_and_shap": 431, "bincount": 432, "corrcoef": 433, "cov": 434, "cummax": 435, "cummin": 436, "histogram": 437, "igamma": 438, "median": 439, "nanmean": 440, "nanmedian": 441, "quantil": 442, "all_equ": 443, "arg_info": 444, "arg_nam": 445, "array_equ": 446, "assert_supports_inplac": 447, "cache_fn": 448, "clip_matrix_norm": 449, "clip_vector_norm": 450, "container_typ": 451, "current_backend_str": 452, "default": 453, "einops_rearrang": 454, "einops_reduc": 455, "einops_repeat": 456, "exist": [457, 707], "fourier_encod": 458, "function_supported_devices_and_dtyp": 459, "function_unsupported_devices_and_dtyp": 460, "gather": 461, "gather_nd": 462, "get_all_arrays_in_memori": 463, "get_item": 464, "get_num_dim": 465, "get_referrers_recurs": 466, "has_nan": 467, "inplace_arrays_support": 468, "inplace_decr": 469, "inplace_incr": 470, "inplace_upd": 471, "inplace_variables_support": 472, "is_arrai": 473, "is_ivy_arrai": 474, "is_ivy_contain": 475, "is_ivy_nested_arrai": 476, "is_native_arrai": 477, "isin": 478, "isscalar": 479, "items": 480, "match_kwarg": 481, "multiprocess": 482, "num_arrays_in_memori": 483, "print_all_arrays_in_memori": 484, "scatter_flat": 485, "scatter_nd": 486, "set_array_mod": 487, "set_exception_trace_mod": 488, "set_inplace_mod": 489, "set_item": 490, "set_min_bas": 491, "set_min_denomin": 492, "set_nestable_mod": 493, "set_precise_mod": 494, "set_queue_timeout": 495, "set_shape_array_mod": 496, "set_show_func_wrapper_trace_mod": 497, "set_tmp_dir": 498, "shape": [499, 553, 655, 656, 657, 658, 728, 746], "stable_divid": 500, "stable_pow": 501, "stride": 502, "supports_inplace_upd": 503, "to_ivy_shap": 504, "to_list": 505, "to_native_shap": 506, "to_numpi": 507, "to_scalar": 508, "try_else_non": 509, "unset_array_mod": 510, "unset_exception_trace_mod": 511, "unset_inplace_mod": 512, "unset_min_bas": 513, "unset_min_denomin": 514, "unset_nestable_mod": 515, "unset_precise_mod": 516, "unset_queue_timeout": 517, "unset_shape_array_mod": 518, "unset_show_func_wrapper_trace_mod": 519, "unset_tmp_dir": 520, "value_is_nan": 521, "vmap": 522, "adam_step": 523, "adam_upd": 524, "execute_with_gradi": [525, 729], "grad": 526, "gradient_descent_upd": 527, "jac": 528, "lamb_upd": 529, "lars_upd": 530, "optimizer_upd": 531, "stop_gradi": 532, "value_and_grad": 533, "control": [536, 746], "flow": [536, 746], "op": 536, "instanc": [545, 594, 718, 731, 732, 740], "method": [545, 594, 718, 731, 732, 740, 741], "depend": [553, 655, 656, 657, 658], "output": [553, 655, 656, 657, 658], "conv": 557, "conv1d": 558, "conv1d_transpos": 559, "conv2d": 560, "conv2d_transpos": 561, "conv3d": 562, "conv3d_transpos": 563, "conv_general_dil": 564, "conv_general_transpos": 565, "depthwise_conv2d": 566, "dropout": 567, "lstm_updat": 569, "multi_head_attent": 570, "scaled_dot_product_attent": 571, "choleski": 572, "cross": 573, "det": 574, "diag": 575, "diagon": 576, "eigh": 578, "eigvalsh": 579, "inner": 580, "inv": 581, "lu_factor": 582, "matmul": 583, "matrix_norm": 584, "matrix_pow": 585, "matrix_rank": 586, "matrix_transpos": 587, "outer": 588, "pinv": 589, "qr": 590, "slogdet": 591, "solv": 592, "svd": 593, "svdval": 594, "tensordot": 595, "tensorsolv": 596, "trace": [597, 724], "vander": 598, "vecdot": 599, "vector_norm": 600, "vector_to_skew_symmetric_matrix": 601, "binary_cross_entropi": 602, "cross_entropi": 603, "sparse_cross_entropi": 604, "clip": 605, "concat": 606, "constant_pad": 607, "expand_dim": 608, "flip": 609, "permute_dim": 610, "repeat": 611, "reshap": 612, "roll": [613, 722], "split": 614, "squeez": 615, "stack": [616, 724], "swapax": 617, "tile": 618, "unstack": 619, "zero_pad": 620, "fomaml_step": 621, "maml_step": 622, "reptile_step": 623, "all_nested_indic": 624, "copy_nest": 625, "duplicate_array_index_chain": 626, "index_nest": 627, "insert_into_nest_at_index": 628, "insert_into_nest_at_indic": 629, "map": [630, 719], "map_nest_at_index": 631, "map_nest_at_indic": 632, "multi_index_nest": 633, "nested_ani": 634, "nested_argwher": 635, "nested_map": 636, "nested_multi_map": 637, "prune_empti": 638, "prune_nest_at_index": 639, "prune_nest_at_indic": 640, "set_nest_at_index": 641, "set_nest_at_indic": 642, "layer_norm": 643, "multinomi": 644, "randint": 645, "random_norm": 646, "random_uniform": 647, "seed": 648, "shuffl": 649, "argmax": 650, "argmin": 651, "argwher": 652, "nonzero": 653, "where": [654, 710], "unique_al": 655, "unique_count": 656, "unique_invers": 657, "unique_valu": 658, "argsort": 659, "msort": 660, "searchsort": 661, "cumprod": 663, "cumsum": 664, "einsum": [665, 694], "max": 666, "mean": 667, "min": 668, "prod": 669, "std": 670, "sum": 671, "var": 672, "all": 673, "ani": 674, "save": [675, 741], "framework": [676, 700, 729, 732, 739, 753, 756, 759, 760], "convert": [679, 743], "helper": [680, 690, 732, 733, 734], "initi": [681, 742], "optim": [686, 742], "sequenti": 687, "assert": [688, 724], "backend": [689, 692, 700, 710, 716, 720, 729, 734, 738, 746], "ast": 690, "handler": [691, 692, 738], "sub": 692, "dynam": [693, 716, 746], "import": 693, "parser": 694, "except": [695, 724, 728], "inspect": 696, "profil": 698, "verbos": 699, "statu": 700, "ai": 700, "when": 700, "should": 700, "i": [700, 717, 736], "instal": [700, 747], "pip": [700, 747], "docker": [700, 707, 711, 712, 717, 747], "from": [700, 747], "sourc": [700, 747], "multi": [700, 756, 759], "support": [700, 716, 720, 728, 731, 746], "document": 700, "contribut": [700, 705], "commun": 700, "citat": 700, "background": 701, "ml": [702, 755, 759], "explos": 702, "standard": [703, 736, 750, 759], "skeptic": 703, "complimentari": 703, "competit": 703, "do": [703, 733], "work": [703, 749], "The": [703, 712, 717, 729, 731, 740, 746], "why": [704, 733], "No": [704, 711], "more": [704, 711, 736], "re": [704, 733], "implement": [704, 719, 729, 731], "infinit": 704, "shelf": 704, "life": 704, "appli": [706, 745], "introduct": [706, 731, 732], "robot": [706, 745], "build": [707, 717, 738], "doc": [707, 717], "conveni": [707, 717, 727], "script": [707, 717], "hub": 707, "local": [707, 712, 725], "without": [707, 732], "error": [708, 724], "handl": [708, 715, 721, 724, 728, 746], "help": [709, 712], "resourc": 709, "open": 710, "task": 710, "format": [710, 725, 752, 759], "checklist": 710, "frontend": [710, 716, 731, 732, 743], "place": 710, "extend": [710, 733, 736], "creat": 710, "an": [710, 729], "": [710, 717], "github": [710, 711], "templat": 710, "fork": [711, 712], "clone": [711, 719], "repo": 711, "pre": [711, 725], "commit": [711, 712, 719, 725], "pycharm": [711, 712, 725], "virtual": 711, "environ": 711, "miniconda": 711, "venv": 711, "interpret": 711, "window": 711, "maco": 711, "ubuntu": 711, "test": [711, 712, 714, 719, 732, 733], "detail": 711, "hypothesi": [711, 732, 733], "free": 711, "wsl": 711, "codespac": 711, "basic": [712, 731], "get": [712, 747], "todo": 712, "list": 712, "manag": 712, "your": [712, 733], "who": 712, "To": 712, "ask": 712, "With": 712, "command": 712, "line": 712, "browser": 712, "pull": [712, 719], "request": [712, 719], "small": 712, "often": 712, "interact": 712, "run": [712, 714, 717, 733], "most": 712, "out": [712, 726, 728, 730], "id": [712, 714], "deep": 713, "dive": 713, "termin": 714, "regener": 714, "failur": 714, "skip": 714, "nativ": [715, 736], "integr": [715, 719, 725, 733], "custom": [715, 717, 729, 741, 746], "version": [716, 734, 746], "pipelin": [717, 719, 733, 746], "how": [717, 733], "builder": 717, "being": 717, "option": 717, "structur": [717, 729, 746], "index": 717, "rst": 717, "partial_conf": 717, "py": 717, "prebuild": 717, "sh": 717, "extens": [717, 744], "custom_autosummari": 717, "hide": 717, "tabl": 717, "discussion_link": 717, "skippable_funct": 717, "ivy_data": 717, "special": [718, 731], "nestabl": [718, 726, 727, 728], "continu": [719, 725], "push": 719, "pr": 719, "trigger": 719, "A": [719, 736], "top": 719, "down": 719, "view": [719, 728, 730], "store": 719, "retriev": 719, "repositori": 719, "nitti": 719, "gritti": 719, "storag": 719, "space": 719, "unifyai": 719, "determin": 719, "coverag": 719, "workflow": 719, "multipl": 719, "runner": 719, "race": 719, "condit": 719, "period": 719, "manual": 719, "dispatch": 719, "ci": 719, "dashboard": 719, "promot": [720, 731], "argument": [720, 721, 726, 728, 730, 731], "other": [720, 721], "unsupport": 720, "bug": 720, "cast": [720, 731], "mode": [720, 724, 735], "superset": [720, 736], "docstr": [722, 723], "configur": [724, 732, 741], "func_wrapp": 724, "prune": 724, "handle_except": 724, "decor": [724, 728, 733], "consist": [724, 733], "lint": 725, "check": [725, 746], "setup": 725, "code": [725, 734], "common": 725, "keyword": 726, "input": 726, "number": 726, "oper": [726, 735, 740, 746], "integ": 726, "sequenc": 726, "primari": 727, "composit": 727, "mix": [727, 728, 733], "partial": [727, 728, 733], "standalon": 727, "order": 728, "wrapper": [728, 759, 760], "infer": 728, "miscellan": 728, "overview": 729, "usag": [729, 736], "signatur": 729, "design": [729, 734, 737], "our": 729, "polici": [729, 731], "specif": [729, 757, 758, 759], "consider": 729, "inplac": 730, "updat": 730, "copi": 730, "write": [731, 733], "short": 731, "unus": 731, "rule": 731, "numpi": [731, 753], "duplic": [731, 736], "valu": 732, "alia": 732, "own": 733, "strategi": 733, "we": 733, "need": 733, "effect": 733, "bonu": 733, "featur": 733, "self": 733, "explicit": 733, "test_array_funct": 733, "fail": 733, "navig": 734, "categor": 734, "submodul": 734, "unpin": 734, "global": 735, "properti": 735, "getter": 735, "attribut": 735, "setter": 735, "set_": 735, "unset_": 735, "behaviour": 736, "what": [736, 759], "non": 736, "balanc": 736, "effici": 736, "maxim": 736, "block": 738, "monkei": 740, "patch": 740, "construct": 741, "represent": 741, "recurs": 741, "built": 741, "ins": 741, "access": 741, "load": 741, "comparison": 741, "case": 741, "compartment": 741, "network": [741, 743], "weight": 741, "role": 743, "model": [743, 746], "mechan": 745, "vision": 745, "gym": 745, "memori": 745, "faq": 746, "maintain": 746, "size": 746, "gpu": 746, "deploy": 746, "auto": 746, "differenti": 746, "replica": 746, "parallel": 746, "altern": 746, "start": 747, "glossari": 748, "relat": 749, "infrastructur": [751, 759], "llvm": 751, "mlir": 751, "oneapi": 751, "exchang": [752, 759], "onnx": 752, "nnef": 752, "coreml": 752, "matlab": 753, "scipi": 753, "torch": [753, 754], "scikit": 753, "learn": 753, "theano": 753, "panda": 753, "julia": 753, "apach": [753, 756], "spark": 753, "mllib": 753, "caff": 753, "chainer": 753, "tensorflow": 753, "1": 753, "mxnet": 753, "cntk": 753, "pytorch": 753, "flux": 753, "jax": 753, "2": 753, "dex": 753, "languag": 753, "tracer": [754, 759], "tf": 754, "jaxpr": 754, "jit": 754, "fx": 754, "compani": [755, 759], "quansight": 755, "modular": 755, "octoml": 755, "vendor": [756, 757, 758, 759], "tvm": 756, "xla": 756, "gcc": 756, "tensorrt": 757, "cuda": 757, "icc": 758, "icx": 758, "nvcc": 758, "doe": 759, "eagerpi": 760, "kera": 760, "thinc": 760, "tensorli": 760, "neuropod": 760}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 57}, "alltitles": {"asarray_to_native_arrays_and_back": [[83, "asarray-to-native-arrays-and-back"]], "function_supported_dtypes": [[120, "function-supported-dtypes"]], "empty": [[85, "empty"]], "meshgrid": [[94, "meshgrid"]], "default_complex_dtype": [[112, "default-complex-dtype"]], "one_hot": [[96, "one-hot"]], "default_uint_dtype": [[116, "default-uint-dtype"]], "cmp_isnot": [[71, "cmp-isnot"]], "copy_array": [[84, "copy-array"]], "eye": [[87, "eye"]], "broadcast_arrays": [[107, "broadcast-arrays"]], "astype": [[106, "astype"]], "full": [[90, "full"]], "asarray_inputs_to_native_shapes": [[82, "asarray-inputs-to-native-shapes"]], "zeros": [[102, "zeros"]], "broadcast_to": [[108, "broadcast-to"]], "triu": [[100, "triu"]], "asarray_infer_device": [[80, "asarray-infer-device"]], "full_like": [[91, "full-like"]], "sigmoid": [[65, "sigmoid"]], "native_array": [[95, "native-array"]], "cast_bool": [[69, "cast-bool"]], "log_softmax": [[62, "log-softmax"]], "as_ivy_dtype": [[104, "as-ivy-dtype"]], "relu": [[64, "relu"]], "as_native_dtype": [[105, "as-native-dtype"]], "closest_valid_dtype": [[111, "closest-valid-dtype"]], "asarray_handle_nestable": [[79, "asarray-handle-nestable"]], "ones_like": [[98, "ones-like"]], "empty_like": [[86, "empty-like"]], "check_float": [[110, "check-float"]], "array": [[77, "array"]], "softplus": [[67, "softplus"]], "linspace": [[92, "linspace"]], "dtype": [[117, "dtype"]], "logspace": [[93, "logspace"]], "zeros_like": [[103, "zeros-like"]], "arange": [[76, "arange"]], "can_cast": [[109, "can-cast"]], "for_loop": [[72, "for-loop"]], "while_loop": [[75, "while-loop"]], "ones": [[97, "ones"]], "triu_indices": [[101, "triu-indices"]], "dtype_bits": [[118, "dtype-bits"]], "leaky_relu": [[61, "leaky-relu"]], "default_int_dtype": [[115, "default-int-dtype"]], "finfo": [[119, "finfo"]], "cmp_is": [[70, "cmp-is"]], "from_dlpack": [[88, "from-dlpack"]], "Note": [[88, null], [537, null]], "default_dtype": [[113, "default-dtype"]], "function_unsupported_dtypes": [[121, "function-unsupported-dtypes"]], "softsign": [[68, "softsign"]], "try_except": [[74, "try-except"]], "frombuffer": [[89, "frombuffer"]], "mish": [[63, "mish"]], "default_float_dtype": [[114, "default-float-dtype"]], "if_else": [[73, "if-else"]], "asarray": [[78, "asarray"]], "softmax": [[66, "softmax"]], "asarray_infer_dtype": [[81, "asarray-infer-dtype"]], "tril": [[99, "tril"]], "Ivy Frontend Tests": [[732, "ivy-frontend-tests"]], "Introduction": [[732, "introduction"], [706, "introduction"], [731, "introduction"]], "Frontend Test Examples": [[732, "frontend-test-examples"]], "ivy.tan()": [[732, "ivy-tan"]], "ivy.full()": [[732, "ivy-full"]], "Testing Without Using Tests Values": [[732, "testing-without-using-tests-values"]], "Alias functions": [[732, "alias-functions"]], "Frontend Instance Method Tests": [[732, "frontend-instance-method-tests"]], "Frontend Instance Method Test Examples": [[732, "frontend-instance-method-test-examples"]], "ivy.add()": [[732, "ivy-add"]], "Hypothesis Helpers": [[732, "hypothesis-helpers"]], "Frontend Framework Testing Configuration": [[732, "frontend-framework-testing-configuration"]], "Get Started": [[747, "get-started"]], "Installing using pip": [[747, "installing-using-pip"], [700, "installing-using-pip"]], "Docker": [[747, "docker"], [700, "docker"]], "Installing from source": [[747, "installing-from-source"], [700, "installing-from-source"]], "Ivy Array": [[740, "ivy-array"], [715, "ivy-array"]], "The Array Class": [[740, "the-array-class"]], "Unifying Operators": [[740, "unifying-operators"]], "API Monkey Patching": [[740, "api-monkey-patching"]], "Instance Methods": [[740, "instance-methods"]], "What does Ivy Add?": [[759, "what-does-ivy-add"]], "API Standards": [[759, "api-standards"], [750, "api-standards"]], "Wrapper Frameworks": [[759, "wrapper-frameworks"], [760, "wrapper-frameworks"]], "Frameworks": [[759, "frameworks"], [753, "frameworks"]], "Graph Tracers": [[759, "graph-tracers"], [754, "graph-tracers"]], "Exchange Formats": [[759, "exchange-formats"], [752, "exchange-formats"]], "Compiler Infrastructure": [[759, "compiler-infrastructure"], [751, "compiler-infrastructure"]], "Multi-Vendor Compiler Frameworks": [[759, "multi-vendor-compiler-frameworks"], [756, "multi-vendor-compiler-frameworks"]], "Vendor-Specific APIs": [[759, "vendor-specific-apis"], [757, "vendor-specific-apis"]], "Vendor-Specific Compilers": [[759, "vendor-specific-compilers"], [758, "vendor-specific-compilers"]], "ML-Unifying Companies": [[759, "ml-unifying-companies"], [755, "ml-unifying-companies"]], "Apache TVM": [[756, "apache-tvm"]], "XLA": [[756, "xla"]], "GCC": [[756, "gcc"]], "Ivy Stateful API": [[742, "ivy-stateful-api"]], "Modules": [[742, "modules"]], "Initializers": [[742, "initializers"], [681, "module-ivy.stateful.initializers"]], "Optimizers": [[742, "optimizers"], [686, "module-ivy.stateful.optimizers"]], "ICC": [[758, "id1"]], "ICX": [[758, "icx"]], "NVCC": [[758, "nvcc"]], "Related Work": [[749, "related-work"]], "EagerPy eagerpy": [[760, "eagerpy-eagerpy"]], "Keras keras": [[760, "keras-keras"]], "Thinc thinc": [[760, "thinc-thinc"]], "TensorLy tensorly": [[760, "tensorly-tensorly"]], "NeuroPod": [[760, "id1"]], "Superset Behaviour": [[736, "superset-behaviour"]], "Extending the Standard": [[736, "extending-the-standard"]], "What is the Superset?": [[736, "what-is-the-superset"]], "A Non-Duplicate Superset": [[736, "a-non-duplicate-superset"]], "What is not the Superset?": [[736, "what-is-not-the-superset"]], "Balancing Generalization with Efficiency": [[736, "balancing-generalization-with-efficiency"]], "More Examples": [[736, "more-examples"]], "Maximizing Usage of Native Functionality": [[736, "maximizing-usage-of-native-functionality"]], "MATLAB matlab": [[753, "matlab-matlab"]], "SciPy scipy": [[753, "scipy-scipy"]], "Torch torch": [[753, "torch-torch"]], "NumPy numpy": [[753, "numpy-numpy"]], "SciKit Learn scikit-learn": [[753, "scikit-learn-scikit-learn"]], "Theano theano": [[753, "theano-theano"]], "Pandas pandas": [[753, "pandas-pandas"]], "Julia julia": [[753, "julia-julia"]], "Apache Spark MLlib apache-spark-mllib": [[753, "apache-spark-mllib-apache-spark-mllib"]], "Caffe caffe": [[753, "caffe-caffe"]], "Chainer chainer": [[753, "chainer-chainer"]], "TensorFlow 1 tensorflow-1": [[753, "tensorflow-1-tensorflow-1"]], "MXNet mxnet": [[753, "mxnet-mxnet"]], "CNTK cntk": [[753, "cntk-cntk"]], "PyTorch pytorch": [[753, "pytorch-pytorch"]], "Flux flux": [[753, "flux-flux"]], "JAX jax": [[753, "jax-jax"]], "TensorFlow 2 tensorflow-2": [[753, "tensorflow-2-tensorflow-2"]], "DEX Language dex-language": [[753, "dex-language-dex-language"]], "TensorRT tensorrt": [[757, "tensorrt-tensorrt"]], "CUDA cuda": [[757, "cuda-cuda"]], "Ivy Container": [[741, "ivy-container"]], "Construction": [[741, "construction"]], "Representation": [[741, "representation"]], "Recursive Methods": [[741, "recursive-methods"]], "Built-ins": [[741, "built-ins"]], "Access": [[741, "access"]], "Saving and Loading": [[741, "saving-and-loading"]], "Comparisons": [[741, "comparisons"]], "Customized Representations": [[741, "customized-representations"]], "Use Cases": [[741, "use-cases"]], "Compartmentalization": [[741, "compartmentalization"]], "Configuration": [[741, "configuration"]], "Data loading": [[741, "data-loading"]], "Network weights": [[741, "network-weights"]], "tf.Graph": [[754, "tf-graph"]], "Jaxpr": [[754, "jaxpr"]], "torch.jit": [[754, "torch-jit"]], "torch.fx": [[754, "torch-fx"]], "Building Blocks": [[738, "building-blocks"]], "Backend Functional APIs \u2705": [[738, "backend-functional-apis"]], "Ivy Functional API \u2705": [[738, "ivy-functional-api"]], "Backend Handler \u2705": [[738, "backend-handler"]], "Graph Compiler \ud83d\udea7": [[738, "graph-compiler"]], "Navigating the Code": [[734, "navigating-the-code"]], "Categorization": [[734, "categorization"]], "Submodule Design": [[734, "submodule-design"]], "Ivy API": [[734, "ivy-api"]], "Backend API": [[734, "backend-api"]], "Submodule Helper Functions": [[734, "submodule-helper-functions"]], "Version Unpinning": [[734, "version-unpinning"]], "Extensions": [[744, "extensions"]], "LLVM": [[751, "id1"]], "MLIR": [[751, "id2"]], "OneAPI": [[751, "id3"]], "Quansight": [[755, "id1"]], "Modular": [[755, "id2"]], "OctoML": [[755, "id3"]], "Design": [[737, "design"]], "Ivy as a Framework": [[739, "ivy-as-a-framework"]], "Applied Libraries": [[745, "applied-libraries"], [706, "applied-libraries"]], "Ivy Mechanics": [[745, "ivy-mechanics"]], "Ivy Vision": [[745, "ivy-vision"]], "Ivy Robot": [[745, "ivy-robot"]], "Ivy Gym": [[745, "ivy-gym"]], "Ivy Memory": [[745, "ivy-memory"]], "ONNX onnx": [[752, "onnx-onnx"]], "NNEF nnef": [[752, "nnef-nnef"]], "CoreML coreml": [[752, "coreml-coreml"]], "Glossary": [[748, "glossary"]], "FAQ": [[746, "faq"]], "Maintaining Backend Versions": [[746, "maintaining-backend-versions"]], "Dynamic Sizes": [[746, "dynamic-sizes"]], "Type and Shape Checking": [[746, "type-and-shape-checking"]], "GPU handling": [[746, "gpu-handling"]], "Model Deployment": [[746, "model-deployment"]], "Dynamic Control Flow": [[746, "dynamic-control-flow"]], "Auto-Differentiation": [[746, "auto-differentiation"]], "Replicas, and Data vs Model Parallelism": [[746, "replicas-and-data-vs-model-parallelism"]], "Support for Functions": [[746, "support-for-functions"]], "Alternative Data Structures": [[746, "alternative-data-structures"]], "Custom Operations": [[746, "custom-operations"]], "The Pipeline": [[746, "the-pipeline"]], "State": [[746, "state"]], "Ivy Tests": [[733, "ivy-tests"], [719, "ivy-tests"]], "Testing Pipeline": [[733, "testing-pipeline"]], "Hypothesis": [[733, "id1"]], "Data Generation": [[733, "id2"]], "Writing your own strategy": [[733, "writing-your-own-strategy"]], "Writing Hypothesis Tests": [[733, "writing-hypothesis-tests"]], "Ivy Test Decorators": [[733, "ivy-test-decorators"]], "Writing Ivy Tests": [[733, "writing-ivy-tests"]], "Integration of Strategies into Ivy Tests": [[733, "integration-of-strategies-into-ivy-tests"]], "Why do we need helper functions": [[733, "why-do-we-need-helper-functions"]], "How to write Hypothesis Tests effectively": [[733, "how-to-write-hypothesis-tests-effectively"]], "Testing Partial Mixed Functions": [[733, "testing-partial-mixed-functions"]], "Bonus: Hypothesis\u2019 Extended Features": [[733, "bonus-hypothesis-extended-features"]], "Self-Consistent and Explicit Testing": [[733, "self-consistent-and-explicit-testing"]], "test_array_function": [[733, "id5"]], "Running Ivy Tests": [[733, "running-ivy-tests"]], "Re-Running Failed Ivy Tests": [[733, "re-running-failed-ivy-tests"]], "Ivy as a Transpiler": [[743, "ivy-as-a-transpiler"]], "Frontend Functional APIs \ud83d\udea7": [[743, "frontend-functional-apis"]], "Role of the Graph Compiler \ud83d\udea7": [[743, "role-of-the-graph-compiler"]], "Converting Network Models \ud83d\udea7": [[743, "converting-network-models"]], "Array API Standard": [[750, "id1"]], "Operating Modes": [[735, "operating-modes"]], "Global Parameter Properties": [[735, "global-parameter-properties"]], "Getter: ivy.<setting> attribute": [[735, "getter-ivy-setting-attribute"]], "Setter: ivy.set_<setting> and ivy.unset_<setting> functions": [[735, "setter-ivy-set-setting-and-ivy-unset-setting-functions"]], "var": [[672, "var"]], "sum": [[671, "sum"]], "Helpers": [[680, "module-ivy.stateful.helpers"]], "Contributing": [[705, "contributing"], [700, "contributing"]], "Exceptions": [[695, "module-ivy.utils.exceptions"]], "Function Wrapping": [[728, "function-wrapping"]], "Decorator order": [[728, "decorator-order"]], "Conversion Wrappers": [[728, "conversion-wrappers"]], "Inference Wrappers": [[728, "inference-wrappers"]], "Out Argument Support": [[728, "out-argument-support"]], "Nestable Support": [[728, "nestable-support"]], "Partial Mixed Function Support": [[728, "partial-mixed-function-support"]], "Shape Conversion": [[728, "shape-conversion"]], "View Handling": [[728, "view-handling"]], "Exception Handling": [[728, "exception-handling"], [724, "exception-handling"]], "Miscellaneous Wrappers": [[728, "miscellaneous-wrappers"]], "Why Unify?": [[704, "why-unify"]], "No More Re-implementations \ud83d\udea7": [[704, "no-more-re-implementations"]], "\u201cInfinite\u201d Shelf-Life \u2705": [[704, "infinite-shelf-life"]], "Arrays": [[715, "arrays"]], "Native Array": [[715, "native-array"]], "Array Handling": [[715, "array-handling"]], "Integrating custom classes with Ivy": [[715, "integrating-custom-classes-with-ivy"]], "Continuous Integration": [[719, "continuous-integration"], [725, "continuous-integration"]], "Commit (Push/PR) Triggered Testing": [[719, "commit-push-pr-triggered-testing"]], "Implementation": [[719, "implementation"]], "A Top-Down View": [[719, "a-top-down-view"]], "Storing (and retrieving) the Mapping": [[719, "storing-and-retrieving-the-mapping"]], "Cloning and Pushing to the Repository": [[719, "cloning-and-pushing-to-the-repository"]], "Implementational Nitty Gritties": [[719, "implementational-nitty-gritties"]], "Storage Space (unifyai/Mapping)": [[719, "storage-space-unifyai-mapping"]], "Determine Test Coverage Workflow": [[719, "determine-test-coverage-workflow"]], "Multiple Runners": [[719, "multiple-runners"]], "Race Condition": [[719, "race-condition"]], "Array API Tests": [[719, "array-api-tests"], [714, "array-api-tests"]], "Periodic Testing": [[719, "periodic-testing"]], "Manually Dispatched Workflows": [[719, "manually-dispatched-workflows"]], "CI Pipeline \u27a1\ufe0f": [[719, "ci-pipeline"]], "Push": [[719, "push"]], "Pull Request": [[719, "pull-request"]], "Dashboard": [[719, "dashboard"]], "Function Types": [[727, "function-types"]], "Primary Functions": [[727, "primary-functions"]], "Compositional Functions": [[727, "compositional-functions"]], "Mixed Functions": [[727, "mixed-functions"]], "Partial Mixed Functions": [[727, "partial-mixed-functions"]], "Standalone Functions": [[727, "standalone-functions"]], "Nestable Functions": [[727, "nestable-functions"], [718, "nestable-functions"], [726, "nestable-functions"]], "Convenience Functions": [[727, "convenience-functions"]], "Framework classes": [[676, "framework-classes"]], "Setting Up": [[711, "setting-up"], [1, "setting-up"]], "Forking and cloning the repo": [[711, "forking-and-cloning-the-repo"]], "Pre-Commit": [[711, "pre-commit"]], "PyCharm": [[711, "pycharm"], [725, "pycharm"]], "Virtual environments - No Docker": [[711, "virtual-environments-no-docker"]], "Using miniconda": [[711, "using-miniconda"]], "Using venv": [[711, "using-venv"]], "Docker Interpreter with PyCharm": [[711, "docker-interpreter-with-pycharm"]], "Windows": [[711, "windows"], [711, "id6"]], "MacOS": [[711, "macos"]], "Ubuntu": [[711, "ubuntu"], [711, "id8"]], "Setting Up Testing in PyCharm": [[711, "setting-up-testing-in-pycharm"]], "More Detailed Hypothesis Logs in PyCharm": [[711, "more-detailed-hypothesis-logs-in-pycharm"]], "Setting up for Free": [[711, "setting-up-for-free"]], "WSL": [[711, "wsl"]], "GitHub Codespaces": [[711, "github-codespaces"]], "all": [[673, "all"]], "Losses": [[683, "module-ivy.stateful.losses"], [546, "losses"], [38, "module-ivy.data_classes.container.losses"], [15, "module-ivy.data_classes.array.losses"], [311, "losses"]], "Status": [[700, "status"]], "Unified AI": [[700, "unified-ai"]], "Ivy as a transpiler": [[700, "ivy-as-a-transpiler"]], "When should I use Ivy as a transpiler?": [[700, "when-should-i-use-ivy-as-a-transpiler"]], "Ivy as a framework": [[700, "ivy-as-a-framework"]], "When should I use Ivy as a framework?": [[700, "when-should-i-use-ivy-as-a-framework"]], "Setting up Ivy": [[700, "setting-up-ivy"]], "Using Ivy": [[700, "using-ivy"]], "Multi-backend Support": [[700, "multi-backend-support"]], "Transpilation API": [[700, "transpilation-api"]], "Documentation": [[700, "documentation"]], "Examples": [[700, "examples"], [726, "examples"], [0, "examples"], [2, "examples"]], "Community": [[700, "community"]], "Citation": [[700, "citation"]], "Converters": [[679, "module-ivy.stateful.converters"]], "Formatting": [[725, "formatting"]], "Lint Checks": [[725, "lint-checks"], [725, "id2"]], "Setup Formatting Locally": [[725, "setup-formatting-locally"]], "Pre-commit": [[725, "pre-commit"]], "VS Code": [[725, "vs-code"]], "Common Issues with Pre-Commit": [[725, "common-issues-with-pre-commit"]], "Lint Formatting": [[725, "lint-formatting"]], "save": [[675, "save"]], "Docstrings": [[723, "docstrings"]], "Open Tasks": [[710, "open-tasks"]], "Function Formatting": [[710, "function-formatting"]], "Formatting checklist": [[710, "formatting-checklist"]], "Frontend APIs": [[710, "frontend-apis"]], "Where to place a frontend function": [[710, "where-to-place-a-frontend-function"]], "Frontend checklist": [[710, "frontend-checklist"]], "Ivy Experimental API": [[710, "ivy-experimental-api"]], "Extending the Ivy API": [[710, "extending-the-ivy-api"]], "Where to place a backend function": [[710, "where-to-place-a-backend-function"]], "Creating an Issue on Ivy\u2019s GitHub using a Template": [[710, "creating-an-issue-on-ivy-s-github-using-a-template"]], "Example - Ivy Robot": [[706, "example-ivy-robot"]], "Inplace Updates": [[730, "inplace-updates"]], "out argument": [[730, "out-argument"]], "copy argument": [[730, "copy-argument"]], "Views": [[730, "views"]], "Sequential": [[687, "module-ivy.stateful.sequential"]], "Docstring Examples": [[722, "docstring-examples"]], "ivy.tan": [[722, "ivy-tan"]], "ivy.roll": [[722, "ivy-roll"]], "ivy.add": [[722, "ivy-add"]], "Containers": [[718, "containers"]], "Container Instance Methods": [[718, "container-instance-methods"]], "API Instance Methods": [[718, "api-instance-methods"]], "API Special Methods": [[718, "api-special-methods"]], "Building the Docs Pipeline": [[717, "building-the-docs-pipeline"]], "How the doc-builder is being run": [[717, "how-the-doc-builder-is-being-run"]], "The convenience script": [[717, "the-convenience-script"]], "Options": [[717, "options"]], "The Docker image": [[717, "the-docker-image"]], "How Ivy\u2019s docs is structured": [[717, "how-ivy-s-docs-is-structured"]], "index.rst": [[717, "index-rst"]], "partial_conf.py": [[717, "partial-conf-py"]], "prebuild.sh": [[717, "prebuild-sh"]], "Custom Extensions": [[717, "custom-extensions"]], "custom_autosummary": [[717, "custom-autosummary"]], ":hide-table:": [[717, "hide-table"]], "discussion_linker": [[717, "discussion-linker"]], "skippable_function": [[717, "skippable-function"]], "ivy_data": [[717, "ivy-data"]], "Deep Dive": [[713, "deep-dive"]], "Dynamic import": [[693, "module-ivy.utils.dynamic_import"]], "Inspection": [[696, "module-ivy.utils.inspection"]], "Einsum parser": [[694, "module-ivy.utils.einsum_parser"]], "Backend": [[689, "backend"]], "The Basics": [[712, "the-basics"]], "Getting Help": [[712, "getting-help"]], "ToDo List Issues": [[712, "todo-list-issues"]], "Managing Your Fork": [[712, "managing-your-fork"]], "Who To Ask": [[712, "who-to-ask"]], "With Command Line:": [[712, "with-command-line"]], "With Browser:": [[712, "with-browser"]], "Pull Requests": [[712, "pull-requests"]], "Small Commits Often": [[712, "small-commits-often"]], "Interactive Ivy Docker Container": [[712, "interactive-ivy-docker-container"]], "Running Tests Locally": [[712, "running-tests-locally"]], "With Docker": [[712, "with-docker"]], "Getting the most out of IDE": [[712, "getting-the-most-out-of-ide"]], "with PyCharm": [[712, "with-pycharm"]], "Background": [[701, "background"]], "Sub backend handler": [[692, "module-ivy.utils.backend.sub_backend_handler"]], "any": [[674, "any"]], "Ast helpers": [[690, "module-ivy.utils.backend.ast_helpers"]], "Activations": [[678, "module-ivy.stateful.activations"], [534, "activations"], [25, "module-ivy.data_classes.container.activations"], [3, "module-ivy.data_classes.array.activations"], [301, "activations"]], "Verbosity": [[699, "module-ivy.utils.verbosity"]], "ML Explosion": [[702, "ml-explosion"]], "Profiler": [[698, "module-ivy.utils.profiler"]], "Ivy Frontends": [[731, "ivy-frontends"]], "The Frontend Basics": [[731, "the-frontend-basics"]], "Writing Frontend Functions": [[731, "writing-frontend-functions"]], "Short Frontend Implementations": [[731, "short-frontend-implementations"]], "Unused Arguments": [[731, "unused-arguments"]], "Supported Data Types and Devices": [[731, "supported-data-types-and-devices"]], "Classes and Instance Methods": [[731, "id6"]], "Frontend Data Type Promotion Rules": [[731, "frontend-data-type-promotion-rules"]], "NumPy Special Argument - Casting": [[731, "numpy-special-argument-casting"]], "Frontends Duplicate Policy": [[731, "frontends-duplicate-policy"]], "Ivy Exception Class": [[724, "ivy-exception-class"]], "Configurable Mode for Stack Trace": [[724, "configurable-mode-for-stack-trace"]], "Ivy func_wrapper Pruning": [[724, "ivy-func-wrapper-pruning"]], "@handle_exceptions Decorator": [[724, "handle-exceptions-decorator"]], "Consistency in Errors": [[724, "consistency-in-errors"]], "Assertion Function": [[724, "assertion-function"]], "Error Handling": [[708, "error-handling"]], "Devices": [[721, "devices"]], "Device Module": [[721, "device-module"]], "Arguments in other Functions": [[721, "arguments-in-other-functions"], [720, "arguments-in-other-functions"]], "Device handling": [[721, "device-handling"]], "Function Arguments": [[726, "function-arguments"]], "Positional and Keyword Arguments": [[726, "positional-and-keyword-arguments"]], "Input Arrays": [[726, "input-arrays"]], "out Argument": [[726, "out-argument"]], "dtype and device arguments": [[726, "dtype-and-device-arguments"]], "Numbers in Operator Functions": [[726, "numbers-in-operator-functions"]], "Integer Sequences": [[726, "integer-sequences"]], "Backend Setting": [[716, "backend-setting"]], "Dynamic Backend Setting": [[716, "dynamic-backend-setting"]], "Backend and Frontend Version Support": [[716, "backend-and-frontend-version-support"]], "Helpful Resources": [[709, "helpful-resources"]], "Assertions": [[688, "module-ivy.utils.assertions"]], "Building the Docs": [[707, "building-the-docs"]], "Building the Docs using Docker": [[707, "building-the-docs-using-docker"]], "Using convenience script": [[707, "using-convenience-script"]], "Using existing image on Docker Hub": [[707, "using-existing-image-on-docker-hub"]], "Building the image locally": [[707, "building-the-image-locally"]], "Building the Docs without Docker": [[707, "building-the-docs-without-docker"]], "Handler": [[691, "module-ivy.utils.backend.handler"]], "Logging": [[697, "module-ivy.utils.logging"]], "Data Types": [[720, "data-types"]], "Data Type Module": [[720, "data-type-module"]], "Data Type Promotion": [[720, "data-type-promotion"]], "Supported and Unsupported Data Types": [[720, "supported-and-unsupported-data-types"]], "Backend Data Type Bugs": [[720, "backend-data-type-bugs"]], "Data Type Casting Modes": [[720, "data-type-casting-modes"]], "Superset Data Type Support": [[720, "superset-data-type-support"]], "Layers": [[682, "module-ivy.stateful.layers"], [544, "layers"], [36, "module-ivy.data_classes.container.layers"], [13, "module-ivy.data_classes.array.layers"], [309, "layers"]], "Standardization": [[703, "standardization"]], "Skepticism": [[703, "skepticism"]], "Complimentary vs Competitive": [[703, "complimentary-vs-competitive"]], "Do Standards Work?": [[703, "do-standards-work"]], "The Array API Standard": [[703, "the-array-api-standard"]], "Running the Tests": [[714, "running-the-tests"]], "Using Terminal": [[714, "using-terminal"]], "Using the IDE": [[714, "using-the-ide"]], "Regenerating Test Failures": [[714, "regenerating-test-failures"]], "Test Skipping": [[714, "test-skipping"]], "Module": [[684, "module-ivy.stateful.module"]], "Gradients": [[729, "gradients"], [543, "gradients"], [34, "module-ivy.data_classes.container.gradients"], [11, "module-ivy.data_classes.array.gradients"], [308, "gradients"]], "Overview": [[729, "overview"]], "Example Usage of the Gradient API": [[729, "example-usage-of-the-gradient-api"]], "The ivy.execute_with_gradients() function signature": [[729, "the-ivy-execute-with-gradients-function-signature"]], "An example using ivy.execute_with_gradients()": [[729, "an-example-using-ivy-execute-with-gradients"]], "Custom Gradient Functions": [[729, "custom-gradient-functions"]], "Design of the Gradient API": [[729, "design-of-the-gradient-api"]], "Our policy on gradients": [[729, "our-policy-on-gradients"]], "Gradient APIs of frameworks": [[729, "gradient-apis-of-frameworks"]], "General Structure of Backend-specific implementations": [[729, "general-structure-of-backend-specific-implementations"]], "Framework-specific Considerations": [[729, "framework-specific-considerations"]], "Norms": [[685, "module-ivy.stateful.norms"], [550, "norms"], [40, "module-ivy.data_classes.container.norms"], [17, "module-ivy.data_classes.array.norms"], [315, "norms"]], "Utils": [[677, "utils"]], "set_nest_at_index": [[641, "set-nest-at-index"]], "duplicate_array_index_chains": [[626, "duplicate-array-index-chains"]], "nested_any": [[634, "nested-any"]], "unique_all": [[655, "unique-all"]], "Data-dependent output shape": [[655, null], [656, null], [658, null], [657, null], [553, null], [553, null], [553, null], [553, null]], "min": [[668, "min"]], "repeat": [[611, "repeat"]], "roll": [[613, "roll"]], "map_nest_at_index": [[631, "map-nest-at-index"]], "prune_nest_at_index": [[639, "prune-nest-at-index"]], "cumsum": [[664, "cumsum"]], "swapaxes": [[617, "swapaxes"]], "mean": [[667, "mean"]], "max": [[666, "max"]], "nested_argwhere": [[635, "nested-argwhere"]], "split": [[614, "split"]], "argwhere": [[652, "argwhere"]], "index_nest": [[627, "index-nest"]], "insert_into_nest_at_indices": [[629, "insert-into-nest-at-indices"]], "all_nested_indices": [[624, "all-nested-indices"]], "random_uniform": [[647, "random-uniform"]], "argmin": [[651, "argmin"]], "zero_pad": [[620, "zero-pad"]], "map": [[630, "map"]], "layer_norm": [[643, "layer-norm"]], "copy_nest": [[625, "copy-nest"]], "where": [[654, "where"]], "tile": [[618, "tile"]], "fomaml_step": [[621, "fomaml-step"]], "cumprod": [[663, "cumprod"]], "squeeze": [[615, "squeeze"]], "prune_empty": [[638, "prune-empty"]], "multinomial": [[644, "multinomial"]], "argsort": [[659, "argsort"]], "reptile_step": [[623, "reptile-step"]], "reshape": [[612, "reshape"]], "msort": [[660, "msort"]], "nested_multi_map": [[637, "nested-multi-map"]], "prod": [[669, "prod"]], "multi_index_nest": [[633, "multi-index-nest"]], "unique_counts": [[656, "unique-counts"]], "seed": [[648, "seed"]], "permute_dims": [[610, "permute-dims"]], "random_normal": [[646, "random-normal"]], "std": [[670, "std"]], "nested_map": [[636, "nested-map"]], "shuffle": [[649, "shuffle"]], "argmax": [[650, "argmax"]], "searchsorted": [[661, "searchsorted"]], "maml_step": [[622, "maml-step"]], "unique_values": [[658, "unique-values"]], "sort": [[662, "sort"]], "prune_nest_at_indices": [[640, "prune-nest-at-indices"]], "einsum": [[665, "einsum"]], "nonzero": [[653, "nonzero"]], "set_nest_at_indices": [[642, "set-nest-at-indices"]], "randint": [[645, "randint"]], "unique_inverse": [[657, "unique-inverse"]], "stack": [[616, "stack"]], "unstack": [[619, "unstack"]], "insert_into_nest_at_index": [[628, "insert-into-nest-at-index"]], "map_nest_at_indices": [[632, "map-nest-at-indices"]], "lu_factor": [[582, "lu-factor"]], "tensorsolve": [[596, "tensorsolve"]], "Random": [[551, "random"], [41, "module-ivy.data_classes.container.random"], [18, "module-ivy.data_classes.array.random"], [316, "random"]], "Sorting": [[554, "sorting"], [44, "module-ivy.data_classes.container.sorting"], [21, "module-ivy.data_classes.array.sorting"], [319, "sorting"]], "constant_pad": [[607, "constant-pad"]], "diag": [[575, "diag"]], "conv3d_transpose": [[563, "conv3d-transpose"]], "trace": [[597, "trace"]], "svd": [[593, "svd"]], "outer": [[588, "outer"]], "vector_to_skew_symmetric_matrix": [[601, "vector-to-skew-symmetric-matrix"]], "qr": [[590, "qr"]], "expand_dims": [[608, "expand-dims"]], "scaled_dot_product_attention": [[571, "scaled-dot-product-attention"]], "inner": [[580, "inner"]], "inv": [[581, "inv"]], "eig": [[577, "eig"], [357, "eig"]], "eigh": [[578, "eigh"]], "conv1d": [[558, "conv1d"]], "vander": [[598, "vander"]], "conv": [[557, "conv"]], "Nest": [[549, "nest"], [314, "module-ivy.functional.ivy.experimental.nest"]], "Searching": [[552, "searching"], [42, "module-ivy.data_classes.container.searching"], [19, "module-ivy.data_classes.array.searching"], [317, "searching"]], "matrix_power": [[585, "matrix-power"]], "Statistical": [[555, "statistical"], [22, "module-ivy.data_classes.array.statistical"], [45, "module-ivy.data_classes.container.statistical"], [321, "statistical"]], "depthwise_conv2d": [[566, "depthwise-conv2d"]], "matrix_rank": [[586, "matrix-rank"]], "tensordot": [[595, "tensordot"]], "vecdot": [[599, "vecdot"]], "cross_entropy": [[603, "cross-entropy"]], "vector_norm": [[600, "vector-norm"]], "cross": [[573, "cross"]], "Utility": [[556, "utility"], [23, "module-ivy.data_classes.array.utility"], [46, "module-ivy.data_classes.container.utility"], [322, "module-ivy.functional.ivy.experimental.utility"]], "multi_head_attention": [[570, "multi-head-attention"]], "matrix_norm": [[584, "matrix-norm"]], "dropout": [[567, "dropout"]], "linear": [[568, "linear"]], "binary_cross_entropy": [[602, "binary-cross-entropy"]], "clip": [[605, "clip"]], "lstm_update": [[569, "lstm-update"]], "matrix_transpose": [[587, "matrix-transpose"]], "concat": [[606, "concat"]], "Set": [[553, "set"], [20, "module-ivy.data_classes.array.set"], [43, "module-ivy.data_classes.container.set"], [318, "module-ivy.functional.ivy.experimental.set"]], "matmul": [[583, "matmul"]], "conv_general_dilated": [[564, "conv-general-dilated"]], "solve": [[592, "solve"]], "conv2d_transpose": [[561, "conv2d-transpose"]], "conv1d_transpose": [[559, "conv1d-transpose"]], "flip": [[609, "flip"]], "conv2d": [[560, "conv2d"]], "svdvals": [[594, "svdvals"]], "# Instance Method Examples": [[594, "instance-method-examples"], [545, "instance-method-examples"]], "eigvalsh": [[579, "eigvalsh"]], "diagonal": [[576, "diagonal"]], "pinv": [[589, "pinv"]], "cholesky": [[572, "cholesky"]], "conv3d": [[562, "conv3d"]], "det": [[574, "det"]], "slogdet": [[591, "slogdet"]], "sparse_cross_entropy": [[604, "sparse-cross-entropy"]], "conv_general_transpose": [[565, "conv-general-transpose"]], "to_ivy_shape": [[504, "to-ivy-shape"]], "grad": [[526, "grad"]], "set_min_base": [[491, "set-min-base"]], "set_shape_array_mode": [[496, "set-shape-array-mode"]], "Parameter": [[496, "parameter"], [539, "parameter"], [497, "parameter"], [493, "parameter"], [488, "parameter"], [542, "parameter"], [542, "id1"], [542, "id2"], [542, "id3"], [542, "id4"], [542, "id5"], [494, "parameter"], [487, "parameter"], [164, "parameter"]], "unset_tmp_dir": [[520, "unset-tmp-dir"]], "Linear algebra": [[545, "linear-algebra"], [37, "module-ivy.data_classes.container.linear_algebra"], [14, "module-ivy.data_classes.array.linear_algebra"], [310, "linear-algebra"]], "vmap": [[522, "vmap"]], "try_else_none": [[509, "try-else-none"]], "unset_min_denominator": [[514, "unset-min-denominator"]], "supports_inplace_updates": [[503, "supports-inplace-updates"]], "strides": [[502, "strides"]], "Device": [[539, "device"], [7, "module-ivy.data_classes.array.device"], [30, "module-ivy.data_classes.container.device"], [305, "module-ivy.functional.ivy.experimental.device"]], "lamb_update": [[529, "lamb-update"]], "to_list": [[505, "to-list"]], "set_show_func_wrapper_trace_mode": [[497, "set-show-func-wrapper-trace-mode"]], "unset_precise_mode": [[516, "unset-precise-mode"]], "adam_step": [[523, "adam-step"]], "unset_exception_trace_mode": [[511, "unset-exception-trace-mode"]], "Meta": [[548, "meta"], [313, "module-ivy.functional.ivy.experimental.meta"]], "Elementwise": [[540, "elementwise"], [56, "module-ivy.data_classes.nested_array.elementwise"], [8, "module-ivy.data_classes.array.elementwise"], [31, "module-ivy.data_classes.container.elementwise"], [306, "elementwise"]], "optimizer_update": [[531, "optimizer-update"]], "stop_gradient": [[532, "stop-gradient"]], "value_and_grad": [[533, "value-and-grad"]], "set_nestable_mode": [[493, "set-nestable-mode"]], "set_exception_trace_mode": [[488, "set-exception-trace-mode"]], "General": [[542, "general"], [10, "module-ivy.data_classes.array.general"], [33, "module-ivy.data_classes.container.general"], [307, "general"]], "to_native_shape": [[506, "to-native-shape"]], "Creation": [[537, "creation"], [28, "module-ivy.data_classes.container.creation"], [5, "module-ivy.data_classes.array.creation"], [303, "creation"]], "adam_update": [[524, "adam-update"]], "shape": [[499, "shape"]], "lars_update": [[530, "lars-update"]], "Constants": [[535, "module-ivy.functional.ivy.constants"], [302, "module-ivy.functional.ivy.experimental.constants"]], "Control flow ops": [[536, "control-flow-ops"]], "to_numpy": [[507, "to-numpy"]], "to_scalar": [[508, "to-scalar"]], "Experimental": [[541, "experimental"], [9, "module-ivy.data_classes.array.experimental"], [32, "module-ivy.data_classes.container.experimental"]], "unset_nestable_mode": [[515, "unset-nestable-mode"]], "set_tmp_dir": [[498, "set-tmp-dir"]], "value_is_nan": [[521, "value-is-nan"]], "unset_queue_timeout": [[517, "unset-queue-timeout"]], "unset_shape_array_mode": [[518, "unset-shape-array-mode"]], "stable_divide": [[500, "stable-divide"]], "jac": [[528, "jac"]], "set_min_denominator": [[492, "set-min-denominator"]], "Data type": [[538, "data-type"], [29, "module-ivy.data_classes.container.data_type"], [6, "module-ivy.data_classes.array.data_type"], [304, "module-ivy.functional.ivy.experimental.data_type"]], "Manipulation": [[547, "manipulation"], [39, "module-ivy.data_classes.container.manipulation"], [16, "module-ivy.data_classes.array.manipulation"], [312, "manipulation"]], "set_inplace_mode": [[489, "set-inplace-mode"]], "stable_pow": [[501, "stable-pow"]], "unset_array_mode": [[510, "unset-array-mode"]], "set_item": [[490, "set-item"]], "set_precise_mode": [[494, "set-precise-mode"]], "gradient_descent_update": [[527, "gradient-descent-update"]], "unset_inplace_mode": [[512, "unset-inplace-mode"]], "set_queue_timeout": [[495, "set-queue-timeout"]], "execute_with_gradients": [[525, "execute-with-gradients"]], "unset_min_base": [[513, "unset-min-base"]], "unset_show_func_wrapper_trace_mode": [[519, "unset-show-func-wrapper-trace-mode"]], "get_num_dims": [[465, "get-num-dims"]], "is_ivy_nested_array": [[476, "is-ivy-nested-array"]], "get_referrers_recursive": [[466, "get-referrers-recursive"]], "get_item": [[464, "get-item"]], "scatter_nd": [[486, "scatter-nd"]], "set_array_mode": [[487, "set-array-mode"]], "default": [[453, "default"]], "array_equal": [[446, "array-equal"]], "get_all_arrays_in_memory": [[463, "get-all-arrays-in-memory"]], "gather_nd": [[462, "gather-nd"]], "is_native_sparse_array": [[429, "is-native-sparse-array"]], "lexsort": [[427, "lexsort"]], "igamma": [[438, "igamma"]], "corrcoef": [[433, "corrcoef"]], "cummax": [[435, "cummax"]], "einops_rearrange": [[454, "einops-rearrange"]], "is_array": [[473, "is-array"]], "native_sparse_array_to_indices_values_and_shape": [[431, "native-sparse-array-to-indices-values-and-shape"]], "gather": [[461, "gather"]], "native_sparse_array": [[430, "native-sparse-array"]], "function_supported_devices_and_dtypes": [[459, "function-supported-devices-and-dtypes"]], "exists": [[457, "exists"]], "function_unsupported_devices_and_dtypes": [[460, "function-unsupported-devices-and-dtypes"]], "has_nans": [[467, "has-nans"]], "is_ivy_container": [[475, "is-ivy-container"]], "einops_reduce": [[455, "einops-reduce"]], "current_backend_str": [[452, "current-backend-str"]], "inplace_decrement": [[469, "inplace-decrement"]], "inplace_arrays_supported": [[468, "inplace-arrays-supported"]], "cummin": [[436, "cummin"]], "nanmean": [[440, "nanmean"]], "itemsize": [[480, "itemsize"]], "cache_fn": [[448, "cache-fn"]], "inplace_increment": [[470, "inplace-increment"]], "is_native_array": [[477, "is-native-array"]], "inplace_update": [[471, "inplace-update"]], "inplace_variables_supported": [[472, "inplace-variables-supported"]], "arg_info": [[444, "arg-info"]], "nanmedian": [[441, "nanmedian"]], "assert_supports_inplace": [[447, "assert-supports-inplace"]], "clip_vector_norm": [[450, "clip-vector-norm"]], "isscalar": [[479, "isscalar"]], "num_arrays_in_memory": [[483, "num-arrays-in-memory"]], "bincount": [[432, "bincount"]], "match_kwargs": [[481, "match-kwargs"]], "print_all_arrays_in_memory": [[484, "print-all-arrays-in-memory"]], "container_types": [[451, "container-types"]], "is_ivy_sparse_array": [[428, "is-ivy-sparse-array"]], "fourier_encode": [[458, "fourier-encode"]], "is_ivy_array": [[474, "is-ivy-array"]], "scatter_flat": [[485, "scatter-flat"]], "multiprocessing": [[482, "multiprocessing"]], "all_equal": [[443, "all-equal"]], "einops_repeat": [[456, "einops-repeat"]], "cov": [[434, "cov"]], "clip_matrix_norm": [[449, "clip-matrix-norm"]], "histogram": [[437, "histogram"]], "arg_names": [[445, "arg-names"]], "median": [[439, "median"]], "isin": [[478, "isin"]], "quantile": [[442, "quantile"]], "Conversions": [[27, "module-ivy.data_classes.container.conversions"], [4, "module-ivy.data_classes.array.conversions"]], "Data classes": [[57, "data-classes"]], "Image": [[35, "module-ivy.data_classes.container.image"], [12, "module-ivy.data_classes.array.image"]], "Base": [[26, "module-ivy.data_classes.container.base"], [55, "module-ivy.data_classes.nested_array.base"], [48, "module-ivy.data_classes.factorized_tensor.base"]], "Cp tensor": [[49, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "hardswish": [[60, "hardswish"]], "Tucker tensor": [[50, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "Array": [[51, "array"]], "Wrapping": [[47, "module-ivy.data_classes.container.wrapping"], [24, "module-ivy.data_classes.array.wrapping"]], "Container": [[52, "container"]], "Functions": [[58, "functions"]], "Factorized tensor": [[53, "factorized-tensor"]], "Graph Compiler": [[0, "graph-compiler"]], "Compiler API": [[0, "compiler-api"]], "Using the compiler": [[0, "using-the-compiler"]], "Eager vs lazy Compilation": [[0, "eager-vs-lazy-compilation"]], "Array caching": [[0, "array-caching"]], "Generators": [[0, "generators"]], "Stateful": [[0, "stateful"]], "Sharp bits": [[0, "sharp-bits"], [2, "sharp-bits"]], "Transpiler": [[2, "transpiler"]], "Transpiler API": [[2, "transpiler-api"]], "Using the transpiler": [[2, "using-the-transpiler"]], "Transpiling functions": [[2, "transpiling-functions"]], "Transpiling Libraries": [[2, "transpiling-libraries"]], "Transpiling Modules": [[2, "transpiling-modules"]], "Ivy.unify": [[2, "ivy-unify"]], "Ivy Folder": [[1, "ivy-folder"]], "Setting Up the API key": [[1, "setting-up-the-api-key"]], "Issues and Questions": [[1, "issues-and-questions"]], "gelu": [[59, "gelu"]], "Nested array": [[54, "nested-array"]], "smooth_l1_loss": [[376, "smooth-l1-loss"]], "unravel_index": [[425, "unravel-index"]], "soft_thresholding": [[407, "soft-thresholding"]], "multi_dot": [[367, "multi-dot"]], "dsplit": [[386, "dsplit"]], "batch_norm": [[414, "batch-norm"]], "partial_tensor_to_vec": [[402, "partial-tensor-to-vec"]], "take_along_axis": [[408, "take-along-axis"]], "mode_dot": [[366, "mode-dot"]], "fold": [[393, "fold"]], "truncated_svd": [[371, "truncated-svd"]], "huber_loss": [[373, "huber-loss"]], "multi_mode_dot": [[368, "multi-mode-dot"]], "rot90": [[406, "rot90"]], "broadcast_shapes": [[383, "broadcast-shapes"]], "matricize": [[398, "matricize"]], "dstack": [[387, "dstack"]], "partial_vec_to_tensor": [[404, "partial-vec-to-tensor"]], "instance_norm": [[416, "instance-norm"]], "l1_normalize": [[417, "l1-normalize"]], "partial_unfold": [[403, "partial-unfold"]], "l2_normalize": [[418, "l2-normalize"]], "beta": [[421, "beta"]], "partial_tucker": [[369, "partial-tucker"]], "pad": [[400, "pad"]], "associative_scan": [[379, "associative-scan"]], "bernoulli": [[420, "bernoulli"]], "soft_margin_loss": [[377, "soft-margin-loss"]], "atleast_2d": [[381, "atleast-2d"]], "l1_loss": [[374, "l1-loss"]], "lp_normalize": [[419, "lp-normalize"]], "as_strided": [[378, "as-strided"]], "unique_consecutive": [[411, "unique-consecutive"]], "hsplit": [[395, "hsplit"]], "tucker": [[372, "tucker"]], "atleast_1d": [[380, "atleast-1d"]], "hstack": [[396, "hstack"]], "i0": [[397, "i0"]], "partial_fold": [[401, "partial-fold"]], "unfold": [[410, "unfold"]], "dirichlet": [[422, "dirichlet"]], "svd_flip": [[370, "svd-flip"]], "flipud": [[392, "flipud"]], "gamma": [[423, "gamma"]], "concat_from_sequence": [[385, "concat-from-sequence"]], "expand": [[388, "expand"]], "put_along_axis": [[405, "put-along-axis"]], "choose": [[384, "choose"]], "vstack": [[413, "vstack"]], "poisson": [[424, "poisson"]], "invert_permutation": [[426, "invert-permutation"]], "group_norm": [[415, "group-norm"]], "flatten": [[390, "flatten"]], "vsplit": [[412, "vsplit"]], "moveaxis": [[399, "moveaxis"]], "fliplr": [[391, "fliplr"]], "heaviside": [[394, "heaviside"]], "fill_diagonal": [[389, "fill-diagonal"]], "top_k": [[409, "top-k"]], "atleast_3d": [[382, "atleast-3d"]], "log_poisson_loss": [[375, "log-poisson-loss"]], "Sparse array": [[320, "sparse-array"]], "area_interpolate": [[326, "area-interpolate"]], "max_pool2d": [[346, "max-pool2d"]], "make_svd_non_negative": [[364, "make-svd-non-negative"]], "dct": [[330, "dct"]], "fft": [[336, "fft"]], "rfftn": [[352, "rfftn"]], "embedding": [[335, "embedding"]], "generate_einsum_equation": [[338, "generate-einsum-equation"]], "adaptive_max_pool2d": [[325, "adaptive-max-pool2d"]], "get_interpolate_kernel": [[339, "get-interpolate-kernel"]], "max_pool1d": [[345, "max-pool1d"]], "kronecker": [[363, "kronecker"]], "eigvals": [[359, "eigvals"]], "nearest_interpolate": [[349, "nearest-interpolate"]], "adjoint": [[353, "adjoint"]], "dropout1d": [[332, "dropout1d"]], "fft2": [[337, "fft2"]], "dropout2d": [[333, "dropout2d"]], "max_pool3d": [[347, "max-pool3d"]], "adaptive_avg_pool1d": [[323, "adaptive-avg-pool1d"]], "avg_pool2d": [[328, "avg-pool2d"]], "idct": [[340, "idct"]], "ifft": [[341, "ifft"]], "matrix_exp": [[365, "matrix-exp"]], "cond": [[354, "cond"]], "dot": [[356, "dot"]], "eigh_tridiagonal": [[358, "eigh-tridiagonal"]], "initialize_tucker": [[360, "initialize-tucker"]], "kron": [[362, "kron"]], "avg_pool1d": [[327, "avg-pool1d"]], "dropout3d": [[334, "dropout3d"]], "adaptive_avg_pool2d": [[324, "adaptive-avg-pool2d"]], "ifftn": [[342, "ifftn"]], "pool": [[350, "pool"]], "max_unpool1d": [[348, "max-unpool1d"]], "avg_pool3d": [[329, "avg-pool3d"]], "interp": [[343, "interp"]], "interpolate": [[344, "interpolate"]], "dft": [[331, "dft"]], "reduce_window": [[351, "reduce-window"]], "diagflat": [[355, "diagflat"]], "khatri_rao": [[361, "khatri-rao"]], "diff": [[279, "diff"]], "logit": [[250, "logit"]], "kaiser_bessel_derived_window": [[263, "kaiser-bessel-derived-window"]], "digamma": [[280, "digamma"]], "binarizer": [[275, "binarizer"]], "hamming_window": [[260, "hamming-window"]], "trunc_divide": [[248, "trunc-divide"]], "prelu": [[252, "prelu"]], "kaiser_window": [[264, "kaiser-window"]], "count_nonzero": [[278, "count-nonzero"]], "relu6": [[253, "relu6"]], "unsorted_segment_min": [[271, "unsorted-segment-min"]], "unsorted_segment_sum": [[272, "unsorted-segment-sum"]], "conj": [[276, "conj"]], "gradient": [[285, "gradient"]], "thresholded_relu": [[257, "thresholded-relu"]], "vorbis_window": [[273, "vorbis-window"]], "ndindex": [[266, "ndindex"]], "bind_custom_gradient_function": [[300, "bind-custom-gradient-function"]], "float_power": [[282, "float-power"]], "fmax": [[283, "fmax"]], "hypot": [[286, "hypot"]], "selu": [[254, "selu"]], "frexp": [[284, "frexp"]], "lgamma": [[290, "lgamma"]], "tril_indices": [[269, "tril-indices"]], "random_tucker": [[268, "random-tucker"]], "copysign": [[277, "copysign"]], "lerp": [[289, "lerp"]], "fix": [[281, "fix"]], "modf": [[291, "modf"]], "reduce": [[299, "reduce"]], "eye_like": [[259, "eye-like"]], "xlogy": [[297, "xlogy"]], "random_cp": [[267, "random-cp"]], "trilu": [[270, "trilu"]], "nextafter": [[293, "nextafter"]], "tan": [[244, "tan"]], "silu": [[256, "silu"]], "zeta": [[298, "zeta"]], "indices": [[262, "indices"]], "sequence_length": [[255, "sequence-length"]], "elu": [[249, "elu"]], "sparsify_tensor": [[296, "sparsify-tensor"]], "ldexp": [[288, "ldexp"]], "logsigmoid": [[251, "logsigmoid"]], "hann_window": [[261, "hann-window"]], "ndenumerate": [[265, "ndenumerate"]], "trunc": [[247, "trunc"]], "signbit": [[294, "signbit"]], "blackman_window": [[258, "blackman-window"]], "sinc": [[295, "sinc"]], "allclose": [[274, "allclose"]], "trapz": [[246, "trapz"]], "tanh": [[245, "tanh"]], "nansum": [[292, "nansum"]], "isclose": [[287, "isclose"]], "num_gpus": [[159, "num-gpus"]], "acos": [[175, "acos"]], "is_complex_dtype": [[126, "is-complex-dtype"]], "add": [[177, "add"]], "valid_dtype": [[146, "valid-dtype"]], "infer_default_dtype": [[123, "infer-default-dtype"]], "type_promote_arrays": [[140, "type-promote-arrays"]], "unset_default_int_dtype": [[144, "unset-default-int-dtype"]], "set_default_uint_dtype": [[139, "set-default-uint-dtype"]], "unset_default_float_dtype": [[143, "unset-default-float-dtype"]], "split_factor": [[166, "split-factor"]], "dev": [[151, "dev"]], "function_unsupported_devices": [[154, "function-unsupported-devices"]], "set_soft_device_mode": [[164, "set-soft-device-mode"]], "num_cpu_cores": [[158, "num-cpu-cores"]], "clear_cached_mem_on_dev": [[149, "clear-cached-mem-on-dev"]], "asin": [[179, "asin"]], "is_bool_dtype": [[125, "is-bool-dtype"]], "atan": [[181, "atan"]], "get_all_ivy_arrays_on_dev": [[155, "get-all-ivy-arrays-on-dev"]], "print_all_ivy_arrays_on_dev": [[162, "print-all-ivy-arrays-on-dev"]], "promote_types_of_inputs": [[133, "promote-types-of-inputs"]], "to_device": [[168, "to-device"]], "default_device": [[150, "default-device"]], "handle_soft_device_variable": [[157, "handle-soft-device-variable"]], "num_ivy_arrays_on_dev": [[160, "num-ivy-arrays-on-dev"]], "gpu_is_available": [[156, "gpu-is-available"]], "as_ivy_dev": [[147, "as-ivy-dev"]], "angle": [[178, "angle"]], "set_default_complex_dtype": [[135, "set-default-complex-dtype"]], "is_hashable_dtype": [[128, "is-hashable-dtype"]], "acosh": [[176, "acosh"]], "unset_soft_device_mode": [[172, "unset-soft-device-mode"]], "function_supported_devices": [[153, "function-supported-devices"]], "dev_util": [[152, "dev-util"]], "set_default_float_dtype": [[137, "set-default-float-dtype"]], "promote_types": [[132, "promote-types"]], "used_mem_on_dev": [[173, "used-mem-on-dev"]], "invalid_dtype": [[124, "invalid-dtype"]], "result_type": [[134, "result-type"]], "unset_default_complex_dtype": [[141, "unset-default-complex-dtype"]], "total_mem_on_dev": [[169, "total-mem-on-dev"]], "asinh": [[180, "asinh"]], "is_float_dtype": [[127, "is-float-dtype"]], "set_default_device": [[163, "set-default-device"]], "unset_default_dtype": [[142, "unset-default-dtype"]], "set_split_factor": [[165, "set-split-factor"]], "set_default_int_dtype": [[138, "set-default-int-dtype"]], "split_func_call": [[167, "split-func-call"]], "set_default_dtype": [[136, "set-default-dtype"]], "is_int_dtype": [[129, "is-int-dtype"]], "abs": [[174, "abs"]], "tpu_is_available": [[170, "tpu-is-available"]], "iinfo": [[122, "iinfo"]], "unset_default_device": [[171, "unset-default-device"]], "atan2": [[182, "atan2"]], "as_native_dev": [[148, "as-native-dev"]], "is_native_dtype": [[130, "is-native-dtype"]], "percent_used_mem_on_dev": [[161, "percent-used-mem-on-dev"]], "unset_default_uint_dtype": [[145, "unset-default-uint-dtype"]], "is_uint_dtype": [[131, "is-uint-dtype"]], "lcm": [[212, "lcm"]], "real": [[234, "real"]], "imag": [[207, "imag"]], "subtract": [[243, "subtract"]], "minimum": [[226, "minimum"]], "atanh": [[183, "atanh"]], "sign": [[238, "sign"]], "isinf": [[209, "isinf"]], "sqrt": [[241, "sqrt"]], "expm1": [[199, "expm1"]], "cosh": [[192, "cosh"]], "log1p": [[217, "log1p"]], "equal": [[195, "equal"]], "multiply": [[227, "multiply"]], "log2": [[218, "log2"]], "bitwise_invert": [[185, "bitwise-invert"]], "ceil": [[190, "ceil"]], "not_equal": [[230, "not-equal"]], "reciprocal": [[235, "reciprocal"]], "round": [[237, "round"]], "positive": [[231, "positive"]], "logaddexp2": [[220, "logaddexp2"]], "sinh": [[240, "sinh"]], "bitwise_and": [[184, "bitwise-and"]], "floor": [[200, "floor"]], "deg2rad": [[193, "deg2rad"]], "floor_divide": [[201, "floor-divide"]], "isnan": [[210, "isnan"]], "logical_or": [[223, "logical-or"]], "fmin": [[202, "fmin"]], "sin": [[239, "sin"]], "fmod": [[203, "fmod"]], "pow": [[232, "pow"]], "greater": [[205, "greater"]], "logical_and": [[221, "logical-and"]], "exp": [[197, "exp"]], "greater_equal": [[206, "greater-equal"]], "bitwise_right_shift": [[188, "bitwise-right-shift"]], "isfinite": [[208, "isfinite"]], "square": [[242, "square"]], "maximum": [[225, "maximum"]], "cos": [[191, "cos"]], "isreal": [[211, "isreal"]], "log10": [[216, "log10"]], "less_equal": [[214, "less-equal"]], "exp2": [[198, "exp2"]], "negative": [[229, "negative"]], "bitwise_left_shift": [[186, "bitwise-left-shift"]], "bitwise_xor": [[189, "bitwise-xor"]], "gcd": [[204, "gcd"]], "less": [[213, "less"]], "logical_not": [[222, "logical-not"]], "erf": [[196, "erf"]], "logaddexp": [[219, "logaddexp"]], "logical_xor": [[224, "logical-xor"]], "rad2deg": [[233, "rad2deg"]], "log": [[215, "log"]], "nan_to_num": [[228, "nan-to-num"]], "divide": [[194, "divide"]], "remainder": [[236, "remainder"]], "bitwise_or": [[187, "bitwise-or"]]}, "indexentries": {"built-in function": [[0, "ivy.compile"], [2, "ivy.transpile"], [2, "ivy.unify"]], "ivy.compile()": [[0, "ivy.compile"]], "ivy.transpile()": [[2, "ivy.transpile"]], "ivy.unify()": [[2, "ivy.unify"]], "_arraywithactivations (class in ivy.data_classes.array.activations)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations"]], "_abc_impl (ivy.data_classes.array.activations._arraywithactivations attribute)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations._abc_impl"]], "gelu() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.gelu"]], "hardswish() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.hardswish"]], "ivy.data_classes.array.activations": [[3, "module-ivy.data_classes.array.activations"]], "leaky_relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.log_softmax"]], "mish() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.mish"]], "module": [[3, "module-ivy.data_classes.array.activations"], [4, "module-ivy.data_classes.array.conversions"], [5, "module-ivy.data_classes.array.creation"], [6, "module-ivy.data_classes.array.data_type"], [7, "module-ivy.data_classes.array.device"], [8, "module-ivy.data_classes.array.elementwise"], [9, "module-ivy.data_classes.array.experimental"], [9, "module-ivy.data_classes.array.experimental.activations"], [9, "module-ivy.data_classes.array.experimental.conversions"], [9, "module-ivy.data_classes.array.experimental.creation"], [9, "module-ivy.data_classes.array.experimental.data_type"], [9, "module-ivy.data_classes.array.experimental.device"], [9, "module-ivy.data_classes.array.experimental.elementwise"], [9, "module-ivy.data_classes.array.experimental.general"], [9, "module-ivy.data_classes.array.experimental.gradients"], [9, "module-ivy.data_classes.array.experimental.image"], [9, "module-ivy.data_classes.array.experimental.layers"], [9, "module-ivy.data_classes.array.experimental.linear_algebra"], [9, "module-ivy.data_classes.array.experimental.losses"], [9, "module-ivy.data_classes.array.experimental.manipulation"], [9, "module-ivy.data_classes.array.experimental.norms"], [9, "module-ivy.data_classes.array.experimental.random"], [9, "module-ivy.data_classes.array.experimental.searching"], [9, "module-ivy.data_classes.array.experimental.set"], [9, "module-ivy.data_classes.array.experimental.sorting"], [9, "module-ivy.data_classes.array.experimental.statistical"], [9, "module-ivy.data_classes.array.experimental.utility"], [10, "module-ivy.data_classes.array.general"], [11, "module-ivy.data_classes.array.gradients"], [12, "module-ivy.data_classes.array.image"], [13, "module-ivy.data_classes.array.layers"], [14, "module-ivy.data_classes.array.linear_algebra"], [15, "module-ivy.data_classes.array.losses"], [16, "module-ivy.data_classes.array.manipulation"], [17, "module-ivy.data_classes.array.norms"], [18, "module-ivy.data_classes.array.random"], [19, "module-ivy.data_classes.array.searching"], [20, "module-ivy.data_classes.array.set"], [21, "module-ivy.data_classes.array.sorting"], [22, "module-ivy.data_classes.array.statistical"], [23, "module-ivy.data_classes.array.utility"], [24, "module-ivy.data_classes.array.wrapping"], [25, "module-ivy.data_classes.container.activations"], [26, "module-ivy.data_classes.container.base"], [27, "module-ivy.data_classes.container.conversions"], [28, "module-ivy.data_classes.container.creation"], [29, "module-ivy.data_classes.container.data_type"], [30, "module-ivy.data_classes.container.device"], [31, "module-ivy.data_classes.container.elementwise"], [32, "module-ivy.data_classes.container.experimental"], [32, "module-ivy.data_classes.container.experimental.activations"], [32, "module-ivy.data_classes.container.experimental.conversions"], [32, "module-ivy.data_classes.container.experimental.creation"], [32, "module-ivy.data_classes.container.experimental.data_type"], [32, "module-ivy.data_classes.container.experimental.device"], [32, "module-ivy.data_classes.container.experimental.elementwise"], [32, "module-ivy.data_classes.container.experimental.general"], [32, "module-ivy.data_classes.container.experimental.gradients"], [32, "module-ivy.data_classes.container.experimental.image"], [32, "module-ivy.data_classes.container.experimental.layers"], [32, "module-ivy.data_classes.container.experimental.linear_algebra"], [32, "module-ivy.data_classes.container.experimental.losses"], [32, "module-ivy.data_classes.container.experimental.manipulation"], [32, "module-ivy.data_classes.container.experimental.norms"], [32, "module-ivy.data_classes.container.experimental.random"], [32, "module-ivy.data_classes.container.experimental.searching"], [32, "module-ivy.data_classes.container.experimental.set"], [32, "module-ivy.data_classes.container.experimental.sorting"], [32, "module-ivy.data_classes.container.experimental.statistical"], [32, "module-ivy.data_classes.container.experimental.utility"], [33, "module-ivy.data_classes.container.general"], [34, "module-ivy.data_classes.container.gradients"], [35, "module-ivy.data_classes.container.image"], [36, "module-ivy.data_classes.container.layers"], [37, "module-ivy.data_classes.container.linear_algebra"], [38, "module-ivy.data_classes.container.losses"], [39, "module-ivy.data_classes.container.manipulation"], [40, "module-ivy.data_classes.container.norms"], [41, "module-ivy.data_classes.container.random"], [42, "module-ivy.data_classes.container.searching"], [43, "module-ivy.data_classes.container.set"], [44, "module-ivy.data_classes.container.sorting"], [45, "module-ivy.data_classes.container.statistical"], [46, "module-ivy.data_classes.container.utility"], [47, "module-ivy.data_classes.container.wrapping"], [48, "module-ivy.data_classes.factorized_tensor.base"], [49, "module-ivy.data_classes.factorized_tensor.cp_tensor"], [50, "module-ivy.data_classes.factorized_tensor.tucker_tensor"], [51, "module-ivy.data_classes.array.array"], [52, "module-ivy.data_classes.container.container"], [54, "module-ivy.data_classes.nested_array.nested_array"], [55, "module-ivy.data_classes.nested_array.base"], [56, "module-ivy.data_classes.nested_array.elementwise"], [301, "module-ivy.functional.ivy.experimental.activations"], [302, "module-ivy.functional.ivy.experimental.constants"], [303, "module-ivy.functional.ivy.experimental.creation"], [304, "module-ivy.functional.ivy.experimental.data_type"], [305, "module-ivy.functional.ivy.experimental.device"], [306, "module-ivy.functional.ivy.experimental.elementwise"], [307, "module-ivy.functional.ivy.experimental.general"], [308, "module-ivy.functional.ivy.experimental.gradients"], [309, "module-ivy.functional.ivy.experimental.layers"], [310, "module-ivy.functional.ivy.experimental.linear_algebra"], [311, "module-ivy.functional.ivy.experimental.losses"], [312, "module-ivy.functional.ivy.experimental.manipulation"], [313, "module-ivy.functional.ivy.experimental.meta"], [314, "module-ivy.functional.ivy.experimental.nest"], [315, "module-ivy.functional.ivy.experimental.norms"], [316, "module-ivy.functional.ivy.experimental.random"], [317, "module-ivy.functional.ivy.experimental.searching"], [318, "module-ivy.functional.ivy.experimental.set"], [319, "module-ivy.functional.ivy.experimental.sorting"], [320, "module-ivy.functional.ivy.experimental.sparse_array"], [321, "module-ivy.functional.ivy.experimental.statistical"], [322, "module-ivy.functional.ivy.experimental.utility"], [534, "module-ivy.functional.ivy.activations"], [535, "module-ivy.functional.ivy.constants"], [536, "module-ivy.functional.ivy.control_flow_ops"], [537, "module-ivy.functional.ivy.creation"], [538, "module-ivy.functional.ivy.data_type"], [539, "module-ivy.functional.ivy.device"], [540, "module-ivy.functional.ivy.elementwise"], [541, "module-ivy.functional.ivy.experimental"], [542, "module-ivy.functional.ivy.general"], [543, "module-ivy.functional.ivy.gradients"], [544, "module-ivy.functional.ivy.layers"], [545, "module-ivy.functional.ivy.linear_algebra"], [546, "module-ivy.functional.ivy.losses"], [547, "module-ivy.functional.ivy.manipulation"], [548, "module-ivy.functional.ivy.meta"], [549, "module-ivy.functional.ivy.nest"], [550, "module-ivy.functional.ivy.norms"], [551, "module-ivy.functional.ivy.random"], [552, "module-ivy.functional.ivy.searching"], [553, "module-ivy.functional.ivy.set"], [554, "module-ivy.functional.ivy.sorting"], [555, "module-ivy.functional.ivy.statistical"], [556, "module-ivy.functional.ivy.utility"], [678, "module-ivy.stateful.activations"], [679, "module-ivy.stateful.converters"], [680, "module-ivy.stateful.helpers"], [681, "module-ivy.stateful.initializers"], [682, "module-ivy.stateful.layers"], [683, "module-ivy.stateful.losses"], [684, "module-ivy.stateful.module"], [685, "module-ivy.stateful.norms"], [686, "module-ivy.stateful.optimizers"], [687, "module-ivy.stateful.sequential"], [688, "module-ivy.utils.assertions"], [689, "module-ivy.utils.backend"], [690, "module-ivy.utils.backend.ast_helpers"], [691, "module-ivy.utils.backend.handler"], [692, "module-ivy.utils.backend.sub_backend_handler"], [693, "module-ivy.utils.dynamic_import"], [694, "module-ivy.utils.einsum_parser"], [695, "module-ivy.utils.exceptions"], [696, "module-ivy.utils.inspection"], [697, "module-ivy.utils.logging"], [698, "module-ivy.utils.profiler"], [699, "module-ivy.utils.verbosity"]], "relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.relu"]], "sigmoid() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.sigmoid"]], "softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.softmax"]], "softplus() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.softplus"]], "_to_ivy() (in module ivy.data_classes.array.conversions)": [[4, "ivy.data_classes.array.conversions._to_ivy"]], "_to_native() (in module ivy.data_classes.array.conversions)": [[4, "ivy.data_classes.array.conversions._to_native"]], "args_to_ivy() (in module ivy.data_classes.array.conversions)": [[4, "ivy.data_classes.array.conversions.args_to_ivy"]], "args_to_native() (in module ivy.data_classes.array.conversions)": [[4, "ivy.data_classes.array.conversions.args_to_native"]], "ivy.data_classes.array.conversions": [[4, "module-ivy.data_classes.array.conversions"]], "to_ivy() (in module ivy.data_classes.array.conversions)": [[4, "ivy.data_classes.array.conversions.to_ivy"]], "to_native() (in module ivy.data_classes.array.conversions)": [[4, "ivy.data_classes.array.conversions.to_native"]], "_arraywithcreation (class in ivy.data_classes.array.creation)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation"]], "_abc_impl (ivy.data_classes.array.creation._arraywithcreation attribute)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation._abc_impl"]], "asarray() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.asarray"]], "copy_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.copy_array"]], "empty_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.from_dlpack"]], "full_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.full_like"]], "ivy.data_classes.array.creation": [[5, "module-ivy.data_classes.array.creation"]], "linspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.linspace"]], "logspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.logspace"]], "meshgrid() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.meshgrid"]], "native_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.native_array"]], "one_hot() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.one_hot"]], "ones_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.ones_like"]], "tril() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.tril"]], "triu() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.triu"]], "zeros_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.zeros_like"]], "_arraywithdatatypes (class in ivy.data_classes.array.data_type)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes"]], "_abc_impl (ivy.data_classes.array.data_type._arraywithdatatypes attribute)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes._abc_impl"]], "astype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.dtype"]], "finfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_bool_dtype"]], "is_float_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_uint_dtype"]], "ivy.data_classes.array.data_type": [[6, "module-ivy.data_classes.array.data_type"]], "result_type() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.result_type"]], "_arraywithdevice (class in ivy.data_classes.array.device)": [[7, "ivy.data_classes.array.device._ArrayWithDevice"]], "_abc_impl (ivy.data_classes.array.device._arraywithdevice attribute)": [[7, "ivy.data_classes.array.device._ArrayWithDevice._abc_impl"]], "dev() (ivy.data_classes.array.device._arraywithdevice method)": [[7, "ivy.data_classes.array.device._ArrayWithDevice.dev"]], "ivy.data_classes.array.device": [[7, "module-ivy.data_classes.array.device"]], "to_device() (ivy.data_classes.array.device._arraywithdevice method)": [[7, "ivy.data_classes.array.device._ArrayWithDevice.to_device"]], "_arraywithelementwise (class in ivy.data_classes.array.elementwise)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise"]], "_abc_impl (ivy.data_classes.array.elementwise._arraywithelementwise attribute)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise._abc_impl"]], "abs() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.abs"]], "acos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acos"]], "acosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acosh"]], "add() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.add"]], "angle() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.angle"]], "asin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asin"]], "asinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asinh"]], "atan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan"]], "atan2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan2"]], "atanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.ceil"]], "cos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cos"]], "cosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.deg2rad"]], "divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.divide"]], "equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.equal"]], "erf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.erf"]], "exp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp"]], "exp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp2"]], "expm1() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.expm1"]], "floor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor"]], "floor_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.fmin"]], "gcd() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.gcd"]], "greater() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater"]], "greater_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater_equal"]], "imag() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.imag"]], "isfinite() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isfinite"]], "isinf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isinf"]], "isnan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isnan"]], "isreal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isreal"]], "ivy.data_classes.array.elementwise": [[8, "module-ivy.data_classes.array.elementwise"]], "lcm() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.lcm"]], "less() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less"]], "less_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less_equal"]], "log() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log"]], "log10() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log10"]], "log1p() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log1p"]], "log2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log2"]], "logaddexp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.maximum"]], "minimum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.minimum"]], "multiply() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.negative"]], "not_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.not_equal"]], "positive() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.positive"]], "pow() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.pow"]], "rad2deg() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.rad2deg"]], "real() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.real"]], "reciprocal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.remainder"]], "round() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.round"]], "sign() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sign"]], "sin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sin"]], "sinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sinh"]], "sqrt() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sqrt"]], "square() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.square"]], "subtract() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.subtract"]], "tan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tan"]], "tanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tanh"]], "trapz() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trapz"]], "trunc() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc_divide"]], "_arraywithactivationsexperimental (class in ivy.data_classes.array.experimental.activations)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental"]], "_arraywithconversionsexperimental (class in ivy.data_classes.array.experimental.conversions)": [[9, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental"]], "_arraywithcreationexperimental (class in ivy.data_classes.array.experimental.creation)": [[9, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental"]], "_arraywithdata_typeexperimental (class in ivy.data_classes.array.experimental.data_type)": [[9, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental"]], "_arraywithdeviceexperimental (class in ivy.data_classes.array.experimental.device)": [[9, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental"]], "_arraywithelementwiseexperimental (class in ivy.data_classes.array.experimental.elementwise)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental"]], "_arraywithgeneralexperimental (class in ivy.data_classes.array.experimental.general)": [[9, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental"]], "_arraywithgradientsexperimental (class in ivy.data_classes.array.experimental.gradients)": [[9, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental"]], "_arraywithimageexperimental (class in ivy.data_classes.array.experimental.image)": [[9, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental"]], "_arraywithlayersexperimental (class in ivy.data_classes.array.experimental.layers)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental"]], "_arraywithlinearalgebraexperimental (class in ivy.data_classes.array.experimental.linear_algebra)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental"]], "_arraywithlossesexperimental (class in ivy.data_classes.array.experimental.losses)": [[9, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental"]], "_arraywithmanipulationexperimental (class in ivy.data_classes.array.experimental.manipulation)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental"]], "_arraywithnormsexperimental (class in ivy.data_classes.array.experimental.norms)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental"]], "_arraywithrandomexperimental (class in ivy.data_classes.array.experimental.random)": [[9, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental"]], "_arraywithsearchingexperimental (class in ivy.data_classes.array.experimental.searching)": [[9, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental"]], "_arraywithsetexperimental (class in ivy.data_classes.array.experimental.set)": [[9, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental"]], "_arraywithsortingexperimental (class in ivy.data_classes.array.experimental.sorting)": [[9, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental"]], "_arraywithstatisticalexperimental (class in ivy.data_classes.array.experimental.statistical)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental"]], "_arraywithutilityexperimental (class in ivy.data_classes.array.experimental.utility)": [[9, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental attribute)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.conversions._arraywithconversionsexperimental attribute)": [[9, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental attribute)": [[9, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.data_type._arraywithdata_typeexperimental attribute)": [[9, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.device._arraywithdeviceexperimental attribute)": [[9, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental attribute)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental attribute)": [[9, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.gradients._arraywithgradientsexperimental attribute)": [[9, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.image._arraywithimageexperimental attribute)": [[9, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental attribute)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental attribute)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental attribute)": [[9, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental attribute)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental attribute)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.random._arraywithrandomexperimental attribute)": [[9, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental attribute)": [[9, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.set._arraywithsetexperimental attribute)": [[9, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental attribute)": [[9, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental attribute)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental attribute)": [[9, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental._abc_impl"]], "adaptive_avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_max_pool2d"]], "adjoint() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.allclose"]], "as_strided() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.batch_norm"]], "bernoulli() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[9, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[9, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[9, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.blackman_window"]], "concat_from_sequence() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dct"]], "dft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[9, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.dirichlet"]], "dsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.elu"]], "embedding() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.embedding"]], "expand() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[9, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft"]], "fft2() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft2"]], "fill_diagonal() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[9, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.gamma"]], "gradient() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.group_norm"]], "heaviside() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.heaviside"]], "histogram() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[9, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.interpolate"]], "isclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.isclose"]], "ivy.data_classes.array.experimental": [[9, "module-ivy.data_classes.array.experimental"]], "ivy.data_classes.array.experimental.activations": [[9, "module-ivy.data_classes.array.experimental.activations"]], "ivy.data_classes.array.experimental.conversions": [[9, "module-ivy.data_classes.array.experimental.conversions"]], "ivy.data_classes.array.experimental.creation": [[9, "module-ivy.data_classes.array.experimental.creation"]], "ivy.data_classes.array.experimental.data_type": [[9, "module-ivy.data_classes.array.experimental.data_type"]], "ivy.data_classes.array.experimental.device": [[9, "module-ivy.data_classes.array.experimental.device"]], "ivy.data_classes.array.experimental.elementwise": [[9, "module-ivy.data_classes.array.experimental.elementwise"]], "ivy.data_classes.array.experimental.general": [[9, "module-ivy.data_classes.array.experimental.general"]], "ivy.data_classes.array.experimental.gradients": [[9, "module-ivy.data_classes.array.experimental.gradients"]], "ivy.data_classes.array.experimental.image": [[9, "module-ivy.data_classes.array.experimental.image"]], "ivy.data_classes.array.experimental.layers": [[9, "module-ivy.data_classes.array.experimental.layers"]], "ivy.data_classes.array.experimental.linear_algebra": [[9, "module-ivy.data_classes.array.experimental.linear_algebra"]], "ivy.data_classes.array.experimental.losses": [[9, "module-ivy.data_classes.array.experimental.losses"]], "ivy.data_classes.array.experimental.manipulation": [[9, "module-ivy.data_classes.array.experimental.manipulation"]], "ivy.data_classes.array.experimental.norms": [[9, "module-ivy.data_classes.array.experimental.norms"]], "ivy.data_classes.array.experimental.random": [[9, "module-ivy.data_classes.array.experimental.random"]], "ivy.data_classes.array.experimental.searching": [[9, "module-ivy.data_classes.array.experimental.searching"]], "ivy.data_classes.array.experimental.set": [[9, "module-ivy.data_classes.array.experimental.set"]], "ivy.data_classes.array.experimental.sorting": [[9, "module-ivy.data_classes.array.experimental.sorting"]], "ivy.data_classes.array.experimental.statistical": [[9, "module-ivy.data_classes.array.experimental.statistical"]], "ivy.data_classes.array.experimental.utility": [[9, "module-ivy.data_classes.array.experimental.utility"]], "kron() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[9, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental method)": [[9, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lgamma"]], "logit() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logit"]], "logsigmoid() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool3d"]], "median() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.median"]], "mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmedian"]], "nansum() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nextafter"]], "pad() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[9, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.poisson"]], "prelu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.prelu"]], "quantile() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental method)": [[9, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental.reduce"]], "reduce_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.reduce_window"]], "relu6() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.relu6"]], "rfftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.rot90"]], "selu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.selu"]], "signbit() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.silu"]], "sinc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sinc"]], "smooth_l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[9, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[9, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.soft_thresholding"]], "sparsify_tensor() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sparsify_tensor"]], "svd_flip() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.svd_flip"]], "take_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take_along_axis"]], "thresholded_relu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.top_k"]], "trilu() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[9, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.trilu"]], "truncated_svd() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.truncated_svd"]], "tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tucker"]], "unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental method)": [[9, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental.unravel_index"]], "unsorted_segment_min() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[9, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[9, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_sum"]], "vsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.zeta"]], "_arraywithgeneral (class in ivy.data_classes.array.general)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral"]], "_abc_impl (ivy.data_classes.array.general._arraywithgeneral attribute)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral._abc_impl"]], "all_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.clip_vector_norm"]], "default() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.default"]], "einops_rearrange() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.gather"]], "gather_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_array"]], "is_ivy_container() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_container"]], "is_native_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.is_native_array"]], "isin() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.isin"]], "ivy.data_classes.array.general": [[10, "module-ivy.data_classes.array.general"]], "scatter_flat() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.stable_pow"]], "supports_inplace_updates() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.supports_inplace_updates"]], "to_file() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.to_file"]], "to_list() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.value_is_nan"]], "_arraywithgradients (class in ivy.data_classes.array.gradients)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients"]], "_abc_impl (ivy.data_classes.array.gradients._arraywithgradients attribute)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients._abc_impl"]], "adam_step() (ivy.data_classes.array.gradients._arraywithgradients method)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_step"]], "adam_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients.gradient_descent_update"]], "ivy.data_classes.array.gradients": [[11, "module-ivy.data_classes.array.gradients"]], "lamb_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.array.gradients._arraywithgradients method)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients.stop_gradient"]], "_arraywithimage (class in ivy.data_classes.array.image)": [[12, "ivy.data_classes.array.image._ArrayWithImage"]], "_abc_impl (ivy.data_classes.array.image._arraywithimage attribute)": [[12, "ivy.data_classes.array.image._ArrayWithImage._abc_impl"]], "ivy.data_classes.array.image": [[12, "module-ivy.data_classes.array.image"]], "_arraywithlayers (class in ivy.data_classes.array.layers)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers"]], "_abc_impl (ivy.data_classes.array.layers._arraywithlayers attribute)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers._abc_impl"]], "conv1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.dropout"]], "dropout1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.dropout3d"]], "ivy.data_classes.array.layers": [[13, "module-ivy.data_classes.array.layers"]], "linear() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.linear"]], "lstm_update() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.multi_head_attention"]], "scaled_dot_product_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.scaled_dot_product_attention"]], "_arraywithlinearalgebra (class in ivy.data_classes.array.linear_algebra)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra attribute)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra._abc_impl"]], "cholesky() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cross"]], "det() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.det"]], "diag() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diagonal"]], "eig() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eig"]], "eigh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inv"]], "ivy.data_classes.array.linear_algebra": [[14, "module-ivy.data_classes.array.linear_algebra"]], "matmul() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_arraywithlosses (class in ivy.data_classes.array.losses)": [[15, "ivy.data_classes.array.losses._ArrayWithLosses"]], "_abc_impl (ivy.data_classes.array.losses._arraywithlosses attribute)": [[15, "ivy.data_classes.array.losses._ArrayWithLosses._abc_impl"]], "binary_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[15, "ivy.data_classes.array.losses._ArrayWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[15, "ivy.data_classes.array.losses._ArrayWithLosses.cross_entropy"]], "ivy.data_classes.array.losses": [[15, "module-ivy.data_classes.array.losses"]], "sparse_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[15, "ivy.data_classes.array.losses._ArrayWithLosses.sparse_cross_entropy"]], "_arraywithmanipulation (class in ivy.data_classes.array.manipulation)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation"]], "_abc_impl (ivy.data_classes.array.manipulation._arraywithmanipulation attribute)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation._abc_impl"]], "clip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.clip"]], "concat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.concat"]], "constant_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.expand_dims"]], "flip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.flip"]], "ivy.data_classes.array.manipulation": [[16, "module-ivy.data_classes.array.manipulation"]], "permute_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.repeat"]], "reshape() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.reshape"]], "roll() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.roll"]], "split() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.split"]], "squeeze() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.squeeze"]], "stack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.stack"]], "swapaxes() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.swapaxes"]], "tile() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.tile"]], "unstack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.unstack"]], "view() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.view"]], "zero_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.zero_pad"]], "_arraywithnorms (class in ivy.data_classes.array.norms)": [[17, "ivy.data_classes.array.norms._ArrayWithNorms"]], "_abc_impl (ivy.data_classes.array.norms._arraywithnorms attribute)": [[17, "ivy.data_classes.array.norms._ArrayWithNorms._abc_impl"]], "ivy.data_classes.array.norms": [[17, "module-ivy.data_classes.array.norms"]], "layer_norm() (ivy.data_classes.array.norms._arraywithnorms method)": [[17, "ivy.data_classes.array.norms._ArrayWithNorms.layer_norm"]], "_arraywithrandom (class in ivy.data_classes.array.random)": [[18, "ivy.data_classes.array.random._ArrayWithRandom"]], "_abc_impl (ivy.data_classes.array.random._arraywithrandom attribute)": [[18, "ivy.data_classes.array.random._ArrayWithRandom._abc_impl"]], "ivy.data_classes.array.random": [[18, "module-ivy.data_classes.array.random"]], "multinomial() (ivy.data_classes.array.random._arraywithrandom method)": [[18, "ivy.data_classes.array.random._ArrayWithRandom.multinomial"]], "randint() (ivy.data_classes.array.random._arraywithrandom method)": [[18, "ivy.data_classes.array.random._ArrayWithRandom.randint"]], "random_normal() (ivy.data_classes.array.random._arraywithrandom method)": [[18, "ivy.data_classes.array.random._ArrayWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.array.random._arraywithrandom method)": [[18, "ivy.data_classes.array.random._ArrayWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.array.random._arraywithrandom method)": [[18, "ivy.data_classes.array.random._ArrayWithRandom.shuffle"]], "_arraywithsearching (class in ivy.data_classes.array.searching)": [[19, "ivy.data_classes.array.searching._ArrayWithSearching"]], "_abc_impl (ivy.data_classes.array.searching._arraywithsearching attribute)": [[19, "ivy.data_classes.array.searching._ArrayWithSearching._abc_impl"]], "argmax() (ivy.data_classes.array.searching._arraywithsearching method)": [[19, "ivy.data_classes.array.searching._ArrayWithSearching.argmax"]], "argmin() (ivy.data_classes.array.searching._arraywithsearching method)": [[19, "ivy.data_classes.array.searching._ArrayWithSearching.argmin"]], "argwhere() (ivy.data_classes.array.searching._arraywithsearching method)": [[19, "ivy.data_classes.array.searching._ArrayWithSearching.argwhere"]], "ivy.data_classes.array.searching": [[19, "module-ivy.data_classes.array.searching"]], "nonzero() (ivy.data_classes.array.searching._arraywithsearching method)": [[19, "ivy.data_classes.array.searching._ArrayWithSearching.nonzero"]], "where() (ivy.data_classes.array.searching._arraywithsearching method)": [[19, "ivy.data_classes.array.searching._ArrayWithSearching.where"]], "_arraywithset (class in ivy.data_classes.array.set)": [[20, "ivy.data_classes.array.set._ArrayWithSet"]], "_abc_impl (ivy.data_classes.array.set._arraywithset attribute)": [[20, "ivy.data_classes.array.set._ArrayWithSet._abc_impl"]], "ivy.data_classes.array.set": [[20, "module-ivy.data_classes.array.set"]], "unique_all() (ivy.data_classes.array.set._arraywithset method)": [[20, "ivy.data_classes.array.set._ArrayWithSet.unique_all"]], "unique_counts() (ivy.data_classes.array.set._arraywithset method)": [[20, "ivy.data_classes.array.set._ArrayWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.array.set._arraywithset method)": [[20, "ivy.data_classes.array.set._ArrayWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.array.set._arraywithset method)": [[20, "ivy.data_classes.array.set._ArrayWithSet.unique_values"]], "_arraywithsorting (class in ivy.data_classes.array.sorting)": [[21, "ivy.data_classes.array.sorting._ArrayWithSorting"]], "_abc_impl (ivy.data_classes.array.sorting._arraywithsorting attribute)": [[21, "ivy.data_classes.array.sorting._ArrayWithSorting._abc_impl"]], "argsort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[21, "ivy.data_classes.array.sorting._ArrayWithSorting.argsort"]], "ivy.data_classes.array.sorting": [[21, "module-ivy.data_classes.array.sorting"]], "msort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[21, "ivy.data_classes.array.sorting._ArrayWithSorting.msort"]], "searchsorted() (ivy.data_classes.array.sorting._arraywithsorting method)": [[21, "ivy.data_classes.array.sorting._ArrayWithSorting.searchsorted"]], "sort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[21, "ivy.data_classes.array.sorting._ArrayWithSorting.sort"]], "_arraywithstatistical (class in ivy.data_classes.array.statistical)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical"]], "_abc_impl (ivy.data_classes.array.statistical._arraywithstatistical attribute)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical._abc_impl"]], "cumprod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumsum"]], "einsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.einsum"]], "ivy.data_classes.array.statistical": [[22, "module-ivy.data_classes.array.statistical"]], "max() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.max"]], "mean() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.mean"]], "min() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.min"]], "prod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.prod"]], "std() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.std"]], "sum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.sum"]], "var() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.var"]], "_arraywithutility (class in ivy.data_classes.array.utility)": [[23, "ivy.data_classes.array.utility._ArrayWithUtility"]], "_abc_impl (ivy.data_classes.array.utility._arraywithutility attribute)": [[23, "ivy.data_classes.array.utility._ArrayWithUtility._abc_impl"]], "all() (ivy.data_classes.array.utility._arraywithutility method)": [[23, "ivy.data_classes.array.utility._ArrayWithUtility.all"]], "any() (ivy.data_classes.array.utility._arraywithutility method)": [[23, "ivy.data_classes.array.utility._ArrayWithUtility.any"]], "ivy.data_classes.array.utility": [[23, "module-ivy.data_classes.array.utility"]], "_wrap_function() (in module ivy.data_classes.array.wrapping)": [[24, "ivy.data_classes.array.wrapping._wrap_function"]], "add_ivy_array_instance_methods() (in module ivy.data_classes.array.wrapping)": [[24, "ivy.data_classes.array.wrapping.add_ivy_array_instance_methods"]], "ivy.data_classes.array.wrapping": [[24, "module-ivy.data_classes.array.wrapping"]], "_containerwithactivations (class in ivy.data_classes.container.activations)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations"]], "_abc_impl (ivy.data_classes.container.activations._containerwithactivations attribute)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._abc_impl"]], "_static_gelu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_gelu"]], "_static_hardswish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_hardswish"]], "_static_leaky_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_leaky_relu"]], "_static_log_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_log_softmax"]], "_static_mish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_mish"]], "_static_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_relu"]], "_static_sigmoid() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_sigmoid"]], "_static_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_softmax"]], "_static_softplus() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_softplus"]], "gelu() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.gelu"]], "hardswish() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.hardswish"]], "ivy.data_classes.container.activations": [[25, "module-ivy.data_classes.container.activations"]], "leaky_relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.log_softmax"]], "mish() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.mish"]], "relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.relu"]], "sigmoid() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.sigmoid"]], "softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.softmax"]], "softplus() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.softplus"]], "containerbase (class in ivy.data_classes.container.base)": [[26, "ivy.data_classes.container.base.ContainerBase"]], "__getitem__() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.__getitem__"]], "__init__() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.__init__"]], "__setitem__() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.__setitem__"]], "_abc_impl (ivy.data_classes.container.base.containerbase attribute)": [[26, "ivy.data_classes.container.base.ContainerBase._abc_impl"]], "_cont_at_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_dict"]], "_cont_at_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_seq"]], "_cont_call_static_method_with_flexible_args() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_call_static_method_with_flexible_args"]], "_cont_concat_unify() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_concat_unify"]], "_cont_get_dev() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_get_dev"]], "_cont_get_shape() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_get_shape"]], "_cont_get_shapes() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_get_shapes"]], "_cont_ivy (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_ivy"]], "_cont_mean_unify() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_mean_unify"]], "_cont_prune_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_dict"]], "_cont_prune_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_seq"]], "_cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_slice_keys"]], "_cont_sum_unify() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_sum_unify"]], "_get_queue_item() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._get_queue_item"]], "_is_jsonable() (in module ivy.data_classes.container.base)": [[26, "ivy.data_classes.container.base._is_jsonable"]], "_repr() (in module ivy.data_classes.container.base)": [[26, "ivy.data_classes.container.base._repr"]], "cont_all_false() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_all_false"]], "cont_all_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_all_key_chains"]], "cont_all_true() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_all_true"]], "cont_as_bools() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_as_bools"]], "cont_assert_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_container"]], "cont_assert_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_structure"]], "cont_assert_identical() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical"]], "cont_assert_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical_structure"]], "cont_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chain"]], "cont_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chains"]], "cont_at_keys() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_at_keys"]], "cont_combine() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_combine"]], "cont_common_key_chains() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_common_key_chains"]], "cont_config (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_config"]], "cont_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_container"]], "cont_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_structure"]], "cont_copy() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_copy"]], "cont_create_if_absent() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_create_if_absent"]], "cont_cutoff_at_depth() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_depth"]], "cont_cutoff_at_height() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_height"]], "cont_deep_copy() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_deep_copy"]], "cont_dev (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_dev"]], "cont_dev_str (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_dev_str"]], "cont_diff() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_diff"]], "cont_duplicate_array_keychains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_duplicate_array_keychains"]], "cont_find_sub_container() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_container"]], "cont_find_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_structure"]], "cont_flatten_key_chain() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chain"]], "cont_flatten_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chains"]], "cont_format_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_format_key_chains"]], "cont_from_disk_as_hdf5() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_hdf5"]], "cont_from_disk_as_json() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_json"]], "cont_from_disk_as_pickled() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_pickled"]], "cont_from_flat_list() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_from_flat_list"]], "cont_handle_inplace() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_handle_inplace"]], "cont_has_key() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_has_key"]], "cont_has_key_chain() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_has_key_chain"]], "cont_identical() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_identical"]], "cont_identical_array_shapes() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_identical_array_shapes"]], "cont_identical_configs() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_identical_configs"]], "cont_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_identical_structure"]], "cont_if_exists() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_if_exists"]], "cont_inplace_update() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_inplace_update"]], "cont_ivy (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_ivy"]], "cont_key_chains_containing() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_key_chains_containing"]], "cont_list_join() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_list_join"]], "cont_list_stack() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_list_stack"]], "cont_load() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_load"]], "cont_map() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_map"]], "cont_map_sub_conts() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_map_sub_conts"]], "cont_max_depth (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_max_depth"]], "cont_multi_map() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_multi_map"]], "cont_multi_map_in_function() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_multi_map_in_function"]], "cont_num_arrays() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_num_arrays"]], "cont_overwrite_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chain"]], "cont_overwrite_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chains"]], "cont_prune_empty() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_prune_empty"]], "cont_prune_key_chain() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chain"]], "cont_prune_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chains"]], "cont_prune_key_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_from_key_chains"]], "cont_prune_keys() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys"]], "cont_prune_keys_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys_from_key_chains"]], "cont_reduce() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_reduce"]], "cont_remove_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_remove_key_length_limit"]], "cont_remove_print_limit() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_remove_print_limit"]], "cont_reshape_like() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_reshape_like"]], "cont_restructure() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_restructure"]], "cont_restructure_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_restructure_key_chains"]], "cont_save() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_save"]], "cont_set_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chain"]], "cont_set_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chains"]], "cont_set_at_keys() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_set_at_keys"]], "cont_shape (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_shape"]], "cont_shapes (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_shapes"]], "cont_show() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_show"]], "cont_show_sub_container() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_show_sub_container"]], "cont_size_ordered_arrays() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_size_ordered_arrays"]], "cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_slice_keys"]], "cont_slice_via_key() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_slice_via_key"]], "cont_sort_by_key() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_sort_by_key"]], "cont_structural_diff() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_structural_diff"]], "cont_to_dict() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_dict"]], "cont_to_disk_as_hdf5() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_hdf5"]], "cont_to_disk_as_json() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_json"]], "cont_to_disk_as_pickled() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_pickled"]], "cont_to_flat_list() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_flat_list"]], "cont_to_iterator() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator"]], "cont_to_iterator_keys() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_keys"]], "cont_to_iterator_values() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_values"]], "cont_to_jsonable() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_jsonable"]], "cont_to_nested_list() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_nested_list"]], "cont_to_raw() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_raw"]], "cont_trim_key() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_trim_key"]], "cont_try_kc() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_try_kc"]], "cont_unify() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_unify"]], "cont_unstack_conts() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_unstack_conts"]], "cont_update_config() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_update_config"]], "cont_with_default_key_color() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_with_default_key_color"]], "cont_with_entries_as_lists() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_with_entries_as_lists"]], "cont_with_ivy_backend() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_with_ivy_backend"]], "cont_with_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_with_key_length_limit"]], "cont_with_print_indent() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_with_print_indent"]], "cont_with_print_limit() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_with_print_limit"]], "cont_with_print_line_spacing() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_with_print_line_spacing"]], "dynamic_backend (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.dynamic_backend"]], "h5_file_size() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.h5_file_size"]], "ivy.data_classes.container.base": [[26, "module-ivy.data_classes.container.base"]], "shuffle_h5_file() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.shuffle_h5_file"]], "split_conts() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.split_conts"]], "_containerwithconversions (class in ivy.data_classes.container.conversions)": [[27, "ivy.data_classes.container.conversions._ContainerWithConversions"]], "_abc_impl (ivy.data_classes.container.conversions._containerwithconversions attribute)": [[27, "ivy.data_classes.container.conversions._ContainerWithConversions._abc_impl"]], "_static_to_ivy() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[27, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_ivy"]], "_static_to_native() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[27, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_native"]], "ivy.data_classes.container.conversions": [[27, "module-ivy.data_classes.container.conversions"]], "to_ivy() (ivy.data_classes.container.conversions._containerwithconversions method)": [[27, "ivy.data_classes.container.conversions._ContainerWithConversions.to_ivy"]], "to_native() (ivy.data_classes.container.conversions._containerwithconversions method)": [[27, "ivy.data_classes.container.conversions._ContainerWithConversions.to_native"]], "_containerwithcreation (class in ivy.data_classes.container.creation)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation"]], "_abc_impl (ivy.data_classes.container.creation._containerwithcreation attribute)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._abc_impl"]], "_static_arange() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_arange"]], "_static_asarray() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_asarray"]], "_static_copy_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_copy_array"]], "_static_empty() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty"]], "_static_empty_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty_like"]], "_static_eye() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_eye"]], "_static_from_dlpack() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_from_dlpack"]], "_static_full() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_full"]], "_static_full_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_full_like"]], "_static_linspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_linspace"]], "_static_logspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_logspace"]], "_static_meshgrid() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_meshgrid"]], "_static_native_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_native_array"]], "_static_one_hot() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_one_hot"]], "_static_ones() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones"]], "_static_ones_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones_like"]], "_static_tril() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_tril"]], "_static_triu() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_triu"]], "_static_zeros() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros"]], "_static_zeros_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros_like"]], "asarray() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.asarray"]], "copy_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.copy_array"]], "empty_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.from_dlpack"]], "frombuffer() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.frombuffer"]], "full_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.full_like"]], "ivy.data_classes.container.creation": [[28, "module-ivy.data_classes.container.creation"]], "linspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.linspace"]], "logspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.logspace"]], "meshgrid() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.meshgrid"]], "native_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.native_array"]], "one_hot() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.one_hot"]], "ones_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.ones_like"]], "static_frombuffer() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.static_frombuffer"]], "static_triu_indices() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.static_triu_indices"]], "tril() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.tril"]], "triu() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.triu"]], "triu_indices() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.triu_indices"]], "zeros_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.zeros_like"]], "_containerwithdatatypes (class in ivy.data_classes.container.data_type)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes"]], "_abc_impl (ivy.data_classes.container.data_type._containerwithdatatypes attribute)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._abc_impl"]], "_static_astype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_astype"]], "_static_broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_arrays"]], "_static_broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_to"]], "_static_can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_can_cast"]], "_static_default_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_complex_dtype"]], "_static_default_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_float_dtype"]], "_static_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_dtype"]], "_static_finfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_finfo"]], "_static_function_supported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_supported_dtypes"]], "_static_function_unsupported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_unsupported_dtypes"]], "_static_iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_iinfo"]], "_static_is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_bool_dtype"]], "_static_is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_complex_dtype"]], "_static_is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_float_dtype"]], "_static_is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_int_dtype"]], "_static_is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_uint_dtype"]], "_static_result_type() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_result_type"]], "astype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.dtype"]], "finfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_bool_dtype"]], "is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_complex_dtype"]], "is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_uint_dtype"]], "ivy.data_classes.container.data_type": [[29, "module-ivy.data_classes.container.data_type"]], "result_type() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.result_type"]], "_containerwithdevice (class in ivy.data_classes.container.device)": [[30, "ivy.data_classes.container.device._ContainerWithDevice"]], "_abc_impl (ivy.data_classes.container.device._containerwithdevice attribute)": [[30, "ivy.data_classes.container.device._ContainerWithDevice._abc_impl"]], "_static_dev() (ivy.data_classes.container.device._containerwithdevice static method)": [[30, "ivy.data_classes.container.device._ContainerWithDevice._static_dev"]], "_static_to_device() (ivy.data_classes.container.device._containerwithdevice static method)": [[30, "ivy.data_classes.container.device._ContainerWithDevice._static_to_device"]], "dev() (ivy.data_classes.container.device._containerwithdevice method)": [[30, "ivy.data_classes.container.device._ContainerWithDevice.dev"]], "ivy.data_classes.container.device": [[30, "module-ivy.data_classes.container.device"]], "to_device() (ivy.data_classes.container.device._containerwithdevice method)": [[30, "ivy.data_classes.container.device._ContainerWithDevice.to_device"]], "_containerwithelementwise (class in ivy.data_classes.container.elementwise)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise"]], "_abc_impl (ivy.data_classes.container.elementwise._containerwithelementwise attribute)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._abc_impl"]], "_static_abs() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_abs"]], "_static_acos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acos"]], "_static_acosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acosh"]], "_static_add() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_add"]], "_static_asin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asin"]], "_static_asinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asinh"]], "_static_atan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan"]], "_static_atan2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan2"]], "_static_atanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atanh"]], "_static_bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_and"]], "_static_bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_invert"]], "_static_bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_left_shift"]], "_static_bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_or"]], "_static_bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_right_shift"]], "_static_bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_xor"]], "_static_ceil() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_ceil"]], "_static_cos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cos"]], "_static_cosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cosh"]], "_static_deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_deg2rad"]], "_static_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_divide"]], "_static_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_equal"]], "_static_erf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_erf"]], "_static_exp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_exp"]], "_static_expm1() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_expm1"]], "_static_floor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor"]], "_static_floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor_divide"]], "_static_greater() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater"]], "_static_greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater_equal"]], "_static_isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isfinite"]], "_static_isinf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isinf"]], "_static_isnan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isnan"]], "_static_isreal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isreal"]], "_static_lcm() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_lcm"]], "_static_less() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less"]], "_static_less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less_equal"]], "_static_log() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log"]], "_static_log10() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log10"]], "_static_log1p() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log1p"]], "_static_log2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log2"]], "_static_logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logaddexp"]], "_static_logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_and"]], "_static_logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_not"]], "_static_logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_or"]], "_static_logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_xor"]], "_static_maximum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_maximum"]], "_static_minimum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_minimum"]], "_static_multiply() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_multiply"]], "_static_negative() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_negative"]], "_static_not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_not_equal"]], "_static_positive() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_positive"]], "_static_pow() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_pow"]], "_static_rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_rad2deg"]], "_static_reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_reciprocal"]], "_static_remainder() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_remainder"]], "_static_round() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_round"]], "_static_sign() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sign"]], "_static_sin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sin"]], "_static_sinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sinh"]], "_static_sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sqrt"]], "_static_square() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_square"]], "_static_subtract() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_subtract"]], "_static_tan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tan"]], "_static_tanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tanh"]], "_static_trapz() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trapz"]], "_static_trunc() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc"]], "_static_trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc_divide"]], "abs() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.abs"]], "acos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acos"]], "acosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acosh"]], "add() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.add"]], "angle() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.angle"]], "asin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asin"]], "asinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asinh"]], "atan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan"]], "atan2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan2"]], "atanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.ceil"]], "cos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cos"]], "cosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.deg2rad"]], "divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.divide"]], "equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.equal"]], "erf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.erf"]], "exp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp"]], "exp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp2"]], "expm1() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.expm1"]], "floor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor"]], "floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.fmin"]], "gcd() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.gcd"]], "greater() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater"]], "greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater_equal"]], "imag() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.imag"]], "isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isfinite"]], "isinf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isinf"]], "isnan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isnan"]], "isreal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isreal"]], "ivy.data_classes.container.elementwise": [[31, "module-ivy.data_classes.container.elementwise"]], "lcm() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.lcm"]], "less() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less"]], "less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less_equal"]], "log() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log"]], "log10() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log10"]], "log1p() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log1p"]], "log2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log2"]], "logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.maximum"]], "minimum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.minimum"]], "multiply() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.negative"]], "not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.not_equal"]], "positive() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.positive"]], "pow() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.pow"]], "rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.rad2deg"]], "real() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.real"]], "reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.remainder"]], "round() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.round"]], "sign() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sign"]], "sin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sin"]], "sinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sinh"]], "sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sqrt"]], "square() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.square"]], "static_angle() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_angle"]], "static_exp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_exp2"]], "static_fmin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_fmin"]], "static_gcd() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_gcd"]], "static_imag() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_imag"]], "static_logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_logaddexp2"]], "static_nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_nan_to_num"]], "static_real() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_real"]], "subtract() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.subtract"]], "tan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tan"]], "tanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tanh"]], "trapz() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trapz"]], "trunc() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc_divide"]], "_containerwithactivationexperimental (class in ivy.data_classes.container.experimental.activations)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental"]], "_containerwithconversionexperimental (class in ivy.data_classes.container.experimental.conversions)": [[32, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental"]], "_containerwithcreationexperimental (class in ivy.data_classes.container.experimental.creation)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental"]], "_containerwithdata_typeexperimental (class in ivy.data_classes.container.experimental.data_type)": [[32, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental"]], "_containerwithdeviceexperimental (class in ivy.data_classes.container.experimental.device)": [[32, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental"]], "_containerwithelementwiseexperimental (class in ivy.data_classes.container.experimental.elementwise)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental"]], "_containerwithgeneralexperimental (class in ivy.data_classes.container.experimental.general)": [[32, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental"]], "_containerwithgradientsexperimental (class in ivy.data_classes.container.experimental.gradients)": [[32, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental"]], "_containerwithimageexperimental (class in ivy.data_classes.container.experimental.image)": [[32, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental"]], "_containerwithlayersexperimental (class in ivy.data_classes.container.experimental.layers)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental"]], "_containerwithlinearalgebraexperimental (class in ivy.data_classes.container.experimental.linear_algebra)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental"]], "_containerwithlossesexperimental (class in ivy.data_classes.container.experimental.losses)": [[32, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental"]], "_containerwithmanipulationexperimental (class in ivy.data_classes.container.experimental.manipulation)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental"]], "_containerwithnormsexperimental (class in ivy.data_classes.container.experimental.norms)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental"]], "_containerwithrandomexperimental (class in ivy.data_classes.container.experimental.random)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental"]], "_containerwithsearchingexperimental (class in ivy.data_classes.container.experimental.searching)": [[32, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental"]], "_containerwithsetexperimental (class in ivy.data_classes.container.experimental.set)": [[32, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental"]], "_containerwithsortingexperimental (class in ivy.data_classes.container.experimental.sorting)": [[32, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental"]], "_containerwithstatisticalexperimental (class in ivy.data_classes.container.experimental.statistical)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental"]], "_containerwithutilityexperimental (class in ivy.data_classes.container.experimental.utility)": [[32, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental attribute)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.conversions._containerwithconversionexperimental attribute)": [[32, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental attribute)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.data_type._containerwithdata_typeexperimental attribute)": [[32, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.device._containerwithdeviceexperimental attribute)": [[32, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental attribute)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental attribute)": [[32, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.gradients._containerwithgradientsexperimental attribute)": [[32, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.image._containerwithimageexperimental attribute)": [[32, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental attribute)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental attribute)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental attribute)": [[32, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental attribute)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental attribute)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.random._containerwithrandomexperimental attribute)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental attribute)": [[32, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.set._containerwithsetexperimental attribute)": [[32, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental attribute)": [[32, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental attribute)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental attribute)": [[32, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental._abc_impl"]], "_static_cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummax"]], "_static_cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummin"]], "_static_elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_elu"]], "_static_fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_fft"]], "_static_fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_fill_diagonal"]], "_static_huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[32, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_huber_loss"]], "_static_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[32, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_l1_loss"]], "_static_reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental static method)": [[32, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._static_reduce"]], "_static_silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_silu"]], "_static_smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[32, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_smooth_l1_loss"]], "_static_soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[32, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_soft_margin_loss"]], "_static_trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._static_trilu"]], "_static_unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_unique_consecutive"]], "adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_max_pool2d"]], "adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.allclose"]], "as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.batch_norm"]], "bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.blackman_window"]], "broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.broadcast_shapes"]], "concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dct"]], "dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.dirichlet"]], "dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.elu"]], "embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.embedding"]], "expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.fft"]], "fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.gamma"]], "gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.group_norm"]], "hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hamming_window"]], "hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hann_window"]], "heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.heaviside"]], "histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[32, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.interpolate"]], "invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[32, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.invert_permutation"]], "isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.isclose"]], "ivy.data_classes.container.experimental": [[32, "module-ivy.data_classes.container.experimental"]], "ivy.data_classes.container.experimental.activations": [[32, "module-ivy.data_classes.container.experimental.activations"]], "ivy.data_classes.container.experimental.conversions": [[32, "module-ivy.data_classes.container.experimental.conversions"]], "ivy.data_classes.container.experimental.creation": [[32, "module-ivy.data_classes.container.experimental.creation"]], "ivy.data_classes.container.experimental.data_type": [[32, "module-ivy.data_classes.container.experimental.data_type"]], "ivy.data_classes.container.experimental.device": [[32, "module-ivy.data_classes.container.experimental.device"]], "ivy.data_classes.container.experimental.elementwise": [[32, "module-ivy.data_classes.container.experimental.elementwise"]], "ivy.data_classes.container.experimental.general": [[32, "module-ivy.data_classes.container.experimental.general"]], "ivy.data_classes.container.experimental.gradients": [[32, "module-ivy.data_classes.container.experimental.gradients"]], "ivy.data_classes.container.experimental.image": [[32, "module-ivy.data_classes.container.experimental.image"]], "ivy.data_classes.container.experimental.layers": [[32, "module-ivy.data_classes.container.experimental.layers"]], "ivy.data_classes.container.experimental.linear_algebra": [[32, "module-ivy.data_classes.container.experimental.linear_algebra"]], "ivy.data_classes.container.experimental.losses": [[32, "module-ivy.data_classes.container.experimental.losses"]], "ivy.data_classes.container.experimental.manipulation": [[32, "module-ivy.data_classes.container.experimental.manipulation"]], "ivy.data_classes.container.experimental.norms": [[32, "module-ivy.data_classes.container.experimental.norms"]], "ivy.data_classes.container.experimental.random": [[32, "module-ivy.data_classes.container.experimental.random"]], "ivy.data_classes.container.experimental.searching": [[32, "module-ivy.data_classes.container.experimental.searching"]], "ivy.data_classes.container.experimental.set": [[32, "module-ivy.data_classes.container.experimental.set"]], "ivy.data_classes.container.experimental.sorting": [[32, "module-ivy.data_classes.container.experimental.sorting"]], "ivy.data_classes.container.experimental.statistical": [[32, "module-ivy.data_classes.container.experimental.statistical"]], "ivy.data_classes.container.experimental.utility": [[32, "module-ivy.data_classes.container.experimental.utility"]], "kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_bessel_derived_window"]], "kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_window"]], "kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[32, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[32, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.lexsort"]], "logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logit"]], "logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool3d"]], "median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.median"]], "mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmedian"]], "nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nextafter"]], "pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.poisson"]], "prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.prelu"]], "quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental method)": [[32, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental.reduce"]], "relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.relu6"]], "rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.rot90"]], "selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.selu"]], "signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.silu"]], "sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sinc"]], "smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[32, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[32, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.soft_thresholding"]], "sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sparsify_tensor"]], "static_adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool1d"]], "static_adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool2d"]], "static_adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_max_pool2d"]], "static_adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_adjoint"]], "static_allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_allclose"]], "static_as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_as_strided"]], "static_atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_1d"]], "static_atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_2d"]], "static_atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_3d"]], "static_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool1d"]], "static_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool2d"]], "static_avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool3d"]], "static_batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_batch_norm"]], "static_bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_bernoulli"]], "static_beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_beta"]], "static_binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_binarizer"]], "static_bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_bincount"]], "static_blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_blackman_window"]], "static_broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_broadcast_shapes"]], "static_concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_concat_from_sequence"]], "static_cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_cond"]], "static_conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_conj"]], "static_copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_copysign"]], "static_corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_corrcoef"]], "static_count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_count_nonzero"]], "static_cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_cov"]], "static_dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dct"]], "static_dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dft"]], "static_diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_diagflat"]], "static_diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_diff"]], "static_digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_digamma"]], "static_dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_dirichlet"]], "static_dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dsplit"]], "static_dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dstack"]], "static_eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eig"]], "static_eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigh_tridiagonal"]], "static_eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigvals"]], "static_embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_embedding"]], "static_expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_expand"]], "static_eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_eye_like"]], "static_fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fix"]], "static_flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flatten"]], "static_fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fliplr"]], "static_flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flipud"]], "static_float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_float_power"]], "static_fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmax"]], "static_fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmod"]], "static_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fold"]], "static_frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_frexp"]], "static_gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_gamma"]], "static_gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_gradient"]], "static_group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_group_norm"]], "static_hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hamming_window"]], "static_hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hann_window"]], "static_heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_heaviside"]], "static_histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_histogram"]], "static_hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hsplit"]], "static_hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hstack"]], "static_hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_hypot"]], "static_i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_i0"]], "static_idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_idct"]], "static_ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifft"]], "static_ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifftn"]], "static_igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_igamma"]], "static_initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_initialize_tucker"]], "static_instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_instance_norm"]], "static_interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_interpolate"]], "static_invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[32, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_invert_permutation"]], "static_isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_isclose"]], "static_kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_bessel_derived_window"]], "static_kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_window"]], "static_kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_kron"]], "static_l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l1_normalize"]], "static_l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l2_normalize"]], "static_ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_ldexp"]], "static_lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_lerp"]], "static_lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[32, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_lexsort"]], "static_logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logit"]], "static_logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logsigmoid"]], "static_lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_lp_normalize"]], "static_make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_make_svd_non_negative"]], "static_matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_matricize"]], "static_matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_matrix_exp"]], "static_max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool1d"]], "static_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool2d"]], "static_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool3d"]], "static_median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_median"]], "static_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_mode_dot"]], "static_modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_modf"]], "static_moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_moveaxis"]], "static_multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_dot"]], "static_multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_mode_dot"]], "static_nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmean"]], "static_nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmedian"]], "static_nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nansum"]], "static_nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nextafter"]], "static_pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_pad"]], "static_partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_fold"]], "static_partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_tensor_to_vec"]], "static_partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_partial_tucker"]], "static_partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_unfold"]], "static_partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_vec_to_tensor"]], "static_poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_poisson"]], "static_prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_prelu"]], "static_quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_quantile"]], "static_relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_relu6"]], "static_rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfftn"]], "static_rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_rot90"]], "static_selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_selu"]], "static_signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_signbit"]], "static_sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sinc"]], "static_soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_soft_thresholding"]], "static_sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sparsify_tensor"]], "static_svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_svd_flip"]], "static_take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_take_along_axis"]], "static_thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_thresholded_relu"]], "static_top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_top_k"]], "static_tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_tril_indices"]], "static_truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_truncated_svd"]], "static_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tucker"]], "static_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_unfold"]], "static_unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental static method)": [[32, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.static_unravel_index"]], "static_unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_min"]], "static_unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_sum"]], "static_vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_vorbis_window"]], "static_vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vsplit"]], "static_vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vstack"]], "static_xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_xlogy"]], "static_zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_zeta"]], "svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.svd_flip"]], "take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take_along_axis"]], "thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.top_k"]], "tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.tril_indices"]], "trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.trilu"]], "truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.truncated_svd"]], "tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tucker"]], "unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental method)": [[32, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.unravel_index"]], "unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_sum"]], "vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.vorbis_window"]], "vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.zeta"]], "_containerwithgeneral (class in ivy.data_classes.container.general)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral"]], "_abc_impl (ivy.data_classes.container.general._containerwithgeneral attribute)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._abc_impl"]], "_static_all_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_all_equal"]], "_static_array_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_array_equal"]], "_static_assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_assert_supports_inplace"]], "_static_clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_matrix_norm"]], "_static_clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_vector_norm"]], "_static_einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_rearrange"]], "_static_einops_reduce() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_reduce"]], "_static_einops_repeat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_repeat"]], "_static_fourier_encode() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_fourier_encode"]], "_static_gather() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather"]], "_static_gather_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather_nd"]], "_static_get_num_dims() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_get_num_dims"]], "_static_has_nans() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_has_nans"]], "_static_inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_decrement"]], "_static_inplace_increment() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_increment"]], "_static_inplace_update() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_update"]], "_static_is_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_array"]], "_static_is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_ivy_array"]], "_static_is_native_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_native_array"]], "_static_scatter_flat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_flat"]], "_static_scatter_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_nd"]], "_static_stable_divide() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_divide"]], "_static_stable_pow() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_pow"]], "_static_supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_supports_inplace_updates"]], "_static_to_list() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_list"]], "_static_to_numpy() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_numpy"]], "_static_to_scalar() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_scalar"]], "_static_value_is_nan() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_value_is_nan"]], "all_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.clip_vector_norm"]], "einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.einops_repeat"]], "fourier_encode() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.gather"]], "gather_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.is_ivy_array"]], "is_native_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.is_native_array"]], "isin() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.isin"]], "itemsize() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.itemsize"]], "ivy.data_classes.container.general": [[33, "module-ivy.data_classes.container.general"]], "scatter_flat() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.stable_pow"]], "static_isin() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.static_isin"]], "static_itemsize() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.static_itemsize"]], "static_strides() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.static_strides"]], "strides() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.strides"]], "supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.supports_inplace_updates"]], "to_list() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.value_is_nan"]], "_containerwithgradients (class in ivy.data_classes.container.gradients)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients"]], "_abc_impl (ivy.data_classes.container.gradients._containerwithgradients attribute)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients._abc_impl"]], "_static_stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients static method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients._static_stop_gradient"]], "adam_step() (ivy.data_classes.container.gradients._containerwithgradients method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_step"]], "adam_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients.gradient_descent_update"]], "ivy.data_classes.container.gradients": [[34, "module-ivy.data_classes.container.gradients"]], "lamb_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients.stop_gradient"]], "_containerwithimage (class in ivy.data_classes.container.image)": [[35, "ivy.data_classes.container.image._ContainerWithImage"]], "_abc_impl (ivy.data_classes.container.image._containerwithimage attribute)": [[35, "ivy.data_classes.container.image._ContainerWithImage._abc_impl"]], "ivy.data_classes.container.image": [[35, "module-ivy.data_classes.container.image"]], "_containerwithlayers (class in ivy.data_classes.container.layers)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers"]], "_abc_impl (ivy.data_classes.container.layers._containerwithlayers attribute)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._abc_impl"]], "_static_conv1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d"]], "_static_conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d_transpose"]], "_static_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d"]], "_static_conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d_transpose"]], "_static_conv3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d"]], "_static_conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d_transpose"]], "_static_depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_depthwise_conv2d"]], "_static_dropout() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout"]], "_static_dropout1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout1d"]], "_static_dropout2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout2d"]], "_static_dropout3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout3d"]], "_static_linear() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_linear"]], "_static_lstm_update() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_lstm_update"]], "_static_multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_multi_head_attention"]], "_static_reduce_window() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_reduce_window"]], "_static_scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_scaled_dot_product_attention"]], "conv1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.dropout"]], "dropout1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.dropout3d"]], "ivy.data_classes.container.layers": [[36, "module-ivy.data_classes.container.layers"]], "linear() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.linear"]], "lstm_update() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.multi_head_attention"]], "reduce_window() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.reduce_window"]], "scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.scaled_dot_product_attention"]], "_containerwithlinearalgebra (class in ivy.data_classes.container.linear_algebra)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra attribute)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._abc_impl"]], "_static_cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cholesky"]], "_static_cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cross"]], "_static_det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_det"]], "_static_diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diag"]], "_static_diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diagonal"]], "_static_eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigh"]], "_static_eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigvalsh"]], "_static_inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inner"]], "_static_inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inv"]], "_static_matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matmul"]], "_static_matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_norm"]], "_static_matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_power"]], "_static_matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_rank"]], "_static_matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_transpose"]], "_static_outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_outer"]], "_static_pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_pinv"]], "_static_qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_qr"]], "_static_slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_slogdet"]], "_static_solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_solve"]], "_static_svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svd"]], "_static_svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svdvals"]], "_static_tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensordot"]], "_static_tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensorsolve"]], "_static_trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_trace"]], "_static_vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vander"]], "_static_vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vecdot"]], "_static_vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_norm"]], "_static_vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_to_skew_symmetric_matrix"]], "cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cross"]], "det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.det"]], "diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diagonal"]], "eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inv"]], "ivy.data_classes.container.linear_algebra": [[37, "module-ivy.data_classes.container.linear_algebra"]], "matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_containerwithlosses (class in ivy.data_classes.container.losses)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses"]], "_abc_impl (ivy.data_classes.container.losses._containerwithlosses attribute)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses._abc_impl"]], "_static_binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses._static_binary_cross_entropy"]], "_static_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses._static_cross_entropy"]], "_static_sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses._static_sparse_cross_entropy"]], "binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses.cross_entropy"]], "ivy.data_classes.container.losses": [[38, "module-ivy.data_classes.container.losses"]], "sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses.sparse_cross_entropy"]], "_containerwithmanipulation (class in ivy.data_classes.container.manipulation)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation"]], "_abc_impl (ivy.data_classes.container.manipulation._containerwithmanipulation attribute)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._abc_impl"]], "_static_clip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_clip"]], "_static_concat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_concat"]], "_static_constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_constant_pad"]], "_static_expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_expand_dims"]], "_static_flip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_flip"]], "_static_permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_permute_dims"]], "_static_repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_repeat"]], "_static_reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_reshape"]], "_static_roll() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_roll"]], "_static_split() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_split"]], "_static_squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_squeeze"]], "_static_stack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_stack"]], "_static_swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_swapaxes"]], "_static_tile() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_tile"]], "_static_unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_unstack"]], "_static_zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_zero_pad"]], "clip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.clip"]], "concat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.concat"]], "constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.expand_dims"]], "flip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.flip"]], "ivy.data_classes.container.manipulation": [[39, "module-ivy.data_classes.container.manipulation"]], "permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.repeat"]], "reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.reshape"]], "roll() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.roll"]], "split() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.split"]], "squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.squeeze"]], "stack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.stack"]], "swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.swapaxes"]], "tile() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.tile"]], "unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.unstack"]], "zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.zero_pad"]], "_containerwithnorms (class in ivy.data_classes.container.norms)": [[40, "ivy.data_classes.container.norms._ContainerWithNorms"]], "_abc_impl (ivy.data_classes.container.norms._containerwithnorms attribute)": [[40, "ivy.data_classes.container.norms._ContainerWithNorms._abc_impl"]], "ivy.data_classes.container.norms": [[40, "module-ivy.data_classes.container.norms"]], "layer_norm() (ivy.data_classes.container.norms._containerwithnorms method)": [[40, "ivy.data_classes.container.norms._ContainerWithNorms.layer_norm"]], "_containerwithrandom (class in ivy.data_classes.container.random)": [[41, "ivy.data_classes.container.random._ContainerWithRandom"]], "_abc_impl (ivy.data_classes.container.random._containerwithrandom attribute)": [[41, "ivy.data_classes.container.random._ContainerWithRandom._abc_impl"]], "_static_multinomial() (ivy.data_classes.container.random._containerwithrandom static method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom._static_multinomial"]], "_static_randint() (ivy.data_classes.container.random._containerwithrandom static method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom._static_randint"]], "_static_random_normal() (ivy.data_classes.container.random._containerwithrandom static method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom._static_random_normal"]], "_static_random_uniform() (ivy.data_classes.container.random._containerwithrandom static method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom._static_random_uniform"]], "_static_shuffle() (ivy.data_classes.container.random._containerwithrandom static method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom._static_shuffle"]], "ivy.data_classes.container.random": [[41, "module-ivy.data_classes.container.random"]], "multinomial() (ivy.data_classes.container.random._containerwithrandom method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom.multinomial"]], "randint() (ivy.data_classes.container.random._containerwithrandom method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom.randint"]], "random_normal() (ivy.data_classes.container.random._containerwithrandom method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.container.random._containerwithrandom method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.container.random._containerwithrandom method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom.shuffle"]], "_containerwithsearching (class in ivy.data_classes.container.searching)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching"]], "_abc_impl (ivy.data_classes.container.searching._containerwithsearching attribute)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching._abc_impl"]], "_static_argmax() (ivy.data_classes.container.searching._containerwithsearching static method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmax"]], "_static_argmin() (ivy.data_classes.container.searching._containerwithsearching static method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmin"]], "_static_argwhere() (ivy.data_classes.container.searching._containerwithsearching static method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching._static_argwhere"]], "_static_nonzero() (ivy.data_classes.container.searching._containerwithsearching static method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching._static_nonzero"]], "_static_where() (ivy.data_classes.container.searching._containerwithsearching static method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching._static_where"]], "argmax() (ivy.data_classes.container.searching._containerwithsearching method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching.argmax"]], "argmin() (ivy.data_classes.container.searching._containerwithsearching method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching.argmin"]], "argwhere() (ivy.data_classes.container.searching._containerwithsearching method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching.argwhere"]], "ivy.data_classes.container.searching": [[42, "module-ivy.data_classes.container.searching"]], "nonzero() (ivy.data_classes.container.searching._containerwithsearching method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching.nonzero"]], "where() (ivy.data_classes.container.searching._containerwithsearching method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching.where"]], "_containerwithset (class in ivy.data_classes.container.set)": [[43, "ivy.data_classes.container.set._ContainerWithSet"]], "_abc_impl (ivy.data_classes.container.set._containerwithset attribute)": [[43, "ivy.data_classes.container.set._ContainerWithSet._abc_impl"]], "_static_unique_all() (ivy.data_classes.container.set._containerwithset static method)": [[43, "ivy.data_classes.container.set._ContainerWithSet._static_unique_all"]], "_static_unique_counts() (ivy.data_classes.container.set._containerwithset static method)": [[43, "ivy.data_classes.container.set._ContainerWithSet._static_unique_counts"]], "_static_unique_inverse() (ivy.data_classes.container.set._containerwithset static method)": [[43, "ivy.data_classes.container.set._ContainerWithSet._static_unique_inverse"]], "_static_unique_values() (ivy.data_classes.container.set._containerwithset static method)": [[43, "ivy.data_classes.container.set._ContainerWithSet._static_unique_values"]], "ivy.data_classes.container.set": [[43, "module-ivy.data_classes.container.set"]], "unique_all() (ivy.data_classes.container.set._containerwithset method)": [[43, "ivy.data_classes.container.set._ContainerWithSet.unique_all"]], "unique_counts() (ivy.data_classes.container.set._containerwithset method)": [[43, "ivy.data_classes.container.set._ContainerWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.container.set._containerwithset method)": [[43, "ivy.data_classes.container.set._ContainerWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.container.set._containerwithset method)": [[43, "ivy.data_classes.container.set._ContainerWithSet.unique_values"]], "_containerwithsorting (class in ivy.data_classes.container.sorting)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting"]], "_abc_impl (ivy.data_classes.container.sorting._containerwithsorting attribute)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting._abc_impl"]], "_static_argsort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting._static_argsort"]], "_static_searchsorted() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting._static_searchsorted"]], "_static_sort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting._static_sort"]], "argsort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting.argsort"]], "ivy.data_classes.container.sorting": [[44, "module-ivy.data_classes.container.sorting"]], "msort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting.msort"]], "searchsorted() (ivy.data_classes.container.sorting._containerwithsorting method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting.searchsorted"]], "sort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting.sort"]], "static_msort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting.static_msort"]], "_containerwithstatistical (class in ivy.data_classes.container.statistical)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical"]], "_abc_impl (ivy.data_classes.container.statistical._containerwithstatistical attribute)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical._abc_impl"]], "_static_cumprod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumprod"]], "_static_cumsum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumsum"]], "_static_prod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_prod"]], "_static_sum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_sum"]], "_static_var() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_var"]], "cumprod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumsum"]], "einsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.einsum"]], "ivy.data_classes.container.statistical": [[45, "module-ivy.data_classes.container.statistical"]], "max() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.max"]], "mean() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.mean"]], "min() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.min"]], "prod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.prod"]], "std() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.std"]], "sum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.sum"]], "var() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.var"]], "_containerwithutility (class in ivy.data_classes.container.utility)": [[46, "ivy.data_classes.container.utility._ContainerWithUtility"]], "_abc_impl (ivy.data_classes.container.utility._containerwithutility attribute)": [[46, "ivy.data_classes.container.utility._ContainerWithUtility._abc_impl"]], "_static_all() (ivy.data_classes.container.utility._containerwithutility static method)": [[46, "ivy.data_classes.container.utility._ContainerWithUtility._static_all"]], "_static_any() (ivy.data_classes.container.utility._containerwithutility static method)": [[46, "ivy.data_classes.container.utility._ContainerWithUtility._static_any"]], "all() (ivy.data_classes.container.utility._containerwithutility method)": [[46, "ivy.data_classes.container.utility._ContainerWithUtility.all"]], "any() (ivy.data_classes.container.utility._containerwithutility method)": [[46, "ivy.data_classes.container.utility._ContainerWithUtility.any"]], "ivy.data_classes.container.utility": [[46, "module-ivy.data_classes.container.utility"]], "_wrap_function() (in module ivy.data_classes.container.wrapping)": [[47, "ivy.data_classes.container.wrapping._wrap_function"]], "add_ivy_container_instance_methods() (in module ivy.data_classes.container.wrapping)": [[47, "ivy.data_classes.container.wrapping.add_ivy_container_instance_methods"]], "ivy.data_classes.container.wrapping": [[47, "module-ivy.data_classes.container.wrapping"]], "factorizedtensor (class in ivy.data_classes.factorized_tensor.base)": [[48, "ivy.data_classes.factorized_tensor.base.FactorizedTensor"]], "__init__() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[48, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.base.factorizedtensor attribute)": [[48, "ivy.data_classes.factorized_tensor.base.FactorizedTensor._abc_impl"]], "ivy.data_classes.factorized_tensor.base": [[48, "module-ivy.data_classes.factorized_tensor.base"]], "mode_dot() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[48, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.mode_dot"]], "norm() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[48, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.norm"]], "to_tensor() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[48, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[48, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[48, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_vec"]], "cptensor (class in ivy.data_classes.factorized_tensor.cp_tensor)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor"]], "__init__() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.cp_tensor.cptensor attribute)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor._abc_impl"]], "cp_copy() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_copy"]], "cp_flip_sign() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_flip_sign"]], "cp_lstsq_grad() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_lstsq_grad"]], "cp_mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_mode_dot"]], "cp_n_param() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_n_param"]], "cp_norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_norm"]], "cp_normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_normalize"]], "cp_to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_tensor"]], "cp_to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_unfolded"]], "cp_to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[49, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.cp_tensor.cptensor property)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.n_param"]], "norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.norm"]], "normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.normalize"]], "to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_vec"]], "unfolding_dot_khatri_rao() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.unfolding_dot_khatri_rao"]], "validate_cp_rank() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_rank"]], "validate_cp_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_tensor"]], "tuckertensor (class in ivy.data_classes.factorized_tensor.tucker_tensor)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor attribute)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor._abc_impl"]], "_bisection_root_finder() (in module ivy.data_classes.factorized_tensor.tucker_tensor)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor._bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[50, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor property)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.n_param"]], "to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_vec"]], "tucker_copy() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_copy"]], "tucker_mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_mode_dot"]], "tucker_n_param() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_n_param"]], "tucker_normalize() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_normalize"]], "tucker_to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_tensor"]], "tucker_to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_unfolded"]], "tucker_to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_vec"]], "validate_tucker_rank() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_rank"]], "validate_tucker_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_tensor"]], "array (class in ivy.data_classes.array.array)": [[51, "ivy.data_classes.array.array.Array"]], "t (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.T"]], "__abs__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__abs__"]], "__add__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__add__"]], "__eq__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__eq__"]], "__ge__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__ge__"]], "__gt__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__gt__"]], "__init__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__init__"]], "__le__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__le__"]], "__lt__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__lt__"]], "__ne__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__ne__"]], "__pow__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__pow__"]], "__radd__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__radd__"]], "__rrshift__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__rrshift__"]], "__rshift__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__rshift__"]], "__rsub__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__rsub__"]], "__sub__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__sub__"]], "__truediv__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__truediv__"]], "__xor__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__xor__"]], "backend (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.backend"]], "base (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.base"]], "data (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.data"]], "device (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.device"]], "dtype (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.dtype"]], "dynamic_backend (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.dynamic_backend"]], "imag (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.imag"]], "itemsize (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.itemsize"]], "ivy.data_classes.array.array": [[51, "module-ivy.data_classes.array.array"]], "mt (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.mT"]], "ndim (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.ndim"]], "real (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.real"]], "shape (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.shape"]], "size (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.size"]], "strides (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.strides"]], "container (class in ivy.data_classes.container.container)": [[52, "ivy.data_classes.container.container.Container"]], "__abs__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__abs__"]], "__add__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__add__"]], "__eq__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__eq__"]], "__ge__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__ge__"]], "__gt__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__gt__"]], "__init__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__init__"]], "__le__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__le__"]], "__lt__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__lt__"]], "__ne__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__ne__"]], "__pow__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__pow__"]], "__radd__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__radd__"]], "__rrshift__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__rrshift__"]], "__rshift__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__rshift__"]], "__rsub__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__rsub__"]], "__sub__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__sub__"]], "__truediv__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__truediv__"]], "__xor__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__xor__"]], "ivy.data_classes.container.container": [[52, "module-ivy.data_classes.container.container"]], "nestedarray (class in ivy.data_classes.nested_array.nested_array)": [[54, "ivy.data_classes.nested_array.nested_array.NestedArray"]], "__init__() (ivy.data_classes.nested_array.nested_array.nestedarray method)": [[54, "ivy.data_classes.nested_array.nested_array.NestedArray.__init__"]], "from_row_lengths() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[54, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_lengths"]], "from_row_splits() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[54, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_splits"]], "ivy.data_classes.nested_array.nested_array": [[54, "module-ivy.data_classes.nested_array.nested_array"]], "nestedarraybase (class in ivy.data_classes.nested_array.base)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase"]], "__init__() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.__init__"]], "_abc_impl (ivy.data_classes.nested_array.base.nestedarraybase attribute)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase._abc_impl"]], "broadcast_shapes() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.broadcast_shapes"]], "data (ivy.data_classes.nested_array.base.nestedarraybase property)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.data"]], "device (ivy.data_classes.nested_array.base.nestedarraybase property)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.device"]], "dtype (ivy.data_classes.nested_array.base.nestedarraybase property)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.dtype"]], "inner_shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.inner_shape"]], "ivy.data_classes.nested_array.base": [[55, "module-ivy.data_classes.nested_array.base"]], "ndim (ivy.data_classes.nested_array.base.nestedarraybase property)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.ndim"]], "nested_array() (ivy.data_classes.nested_array.base.nestedarraybase class method)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_array"]], "nested_rank (ivy.data_classes.nested_array.base.nestedarraybase property)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_rank"]], "ragged_map() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_map"]], "ragged_multi_map() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map"]], "ragged_multi_map_in_function() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map_in_function"]], "replace_ivy_arrays() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.replace_ivy_arrays"]], "shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.shape"]], "unbind() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.unbind"]], "nestedarrayelementwise (class in ivy.data_classes.nested_array.elementwise)": [[56, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise"]], "_abc_impl (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise attribute)": [[56, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise._abc_impl"]], "ivy.data_classes.nested_array.elementwise": [[56, "module-ivy.data_classes.nested_array.elementwise"]], "static_add() (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise static method)": [[56, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise.static_add"]], "gelu() (in module ivy)": [[59, "ivy.gelu"], [534, "ivy.gelu"]], "gelu() (ivy.array method)": [[59, "ivy.Array.gelu"]], "gelu() (ivy.container method)": [[59, "ivy.Container.gelu"]], "hardswish() (in module ivy)": [[60, "ivy.hardswish"], [534, "ivy.hardswish"]], "hardswish() (ivy.array method)": [[60, "ivy.Array.hardswish"]], "hardswish() (ivy.container method)": [[60, "ivy.Container.hardswish"]], "leaky_relu() (in module ivy)": [[61, "ivy.leaky_relu"], [534, "ivy.leaky_relu"]], "leaky_relu() (ivy.array method)": [[61, "ivy.Array.leaky_relu"]], "leaky_relu() (ivy.container method)": [[61, "ivy.Container.leaky_relu"]], "log_softmax() (in module ivy)": [[62, "ivy.log_softmax"], [534, "ivy.log_softmax"]], "log_softmax() (ivy.array method)": [[62, "ivy.Array.log_softmax"]], "log_softmax() (ivy.container method)": [[62, "ivy.Container.log_softmax"]], "mish() (in module ivy)": [[63, "ivy.mish"], [534, "ivy.mish"]], "mish() (ivy.array method)": [[63, "ivy.Array.mish"]], "mish() (ivy.container method)": [[63, "ivy.Container.mish"]], "relu() (in module ivy)": [[64, "ivy.relu"], [534, "ivy.relu"]], "relu() (ivy.array method)": [[64, "ivy.Array.relu"]], "relu() (ivy.container method)": [[64, "ivy.Container.relu"]], "sigmoid() (in module ivy)": [[65, "ivy.sigmoid"], [534, "ivy.sigmoid"]], "sigmoid() (ivy.array method)": [[65, "ivy.Array.sigmoid"]], "sigmoid() (ivy.container method)": [[65, "ivy.Container.sigmoid"]], "softmax() (in module ivy)": [[66, "ivy.softmax"], [534, "ivy.softmax"]], "softmax() (ivy.array method)": [[66, "ivy.Array.softmax"]], "softmax() (ivy.container method)": [[66, "ivy.Container.softmax"]], "softplus() (in module ivy)": [[67, "ivy.softplus"], [534, "ivy.softplus"]], "softplus() (ivy.array method)": [[67, "ivy.Array.softplus"]], "softplus() (ivy.container method)": [[67, "ivy.Container.softplus"]], "softsign() (in module ivy)": [[68, "ivy.softsign"], [534, "ivy.softsign"]], "cast_bool() (in module ivy)": [[69, "ivy.cast_bool"], [536, "ivy.cast_bool"]], "cmp_is() (in module ivy)": [[70, "ivy.cmp_is"], [536, "ivy.cmp_is"]], "cmp_isnot() (in module ivy)": [[71, "ivy.cmp_isnot"], [536, "ivy.cmp_isnot"]], "for_loop() (in module ivy)": [[72, "ivy.for_loop"], [536, "ivy.for_loop"]], "if_else() (in module ivy)": [[73, "ivy.if_else"], [536, "ivy.if_else"]], "try_except() (in module ivy)": [[74, "ivy.try_except"], [536, "ivy.try_except"]], "while_loop() (in module ivy)": [[75, "ivy.while_loop"], [536, "ivy.while_loop"]], "arange() (in module ivy)": [[76, "ivy.arange"], [537, "ivy.arange"]], "array() (in module ivy)": [[77, "ivy.array"], [537, "ivy.array"]], "asarray() (in module ivy)": [[78, "ivy.asarray"], [537, "ivy.asarray"]], "asarray() (ivy.array method)": [[78, "ivy.Array.asarray"]], "asarray() (ivy.container method)": [[78, "ivy.Container.asarray"]], "asarray_handle_nestable() (in module ivy)": [[79, "ivy.asarray_handle_nestable"], [537, "ivy.asarray_handle_nestable"]], "asarray_infer_device() (in module ivy)": [[80, "ivy.asarray_infer_device"], [537, "ivy.asarray_infer_device"]], "asarray_infer_dtype() (in module ivy)": [[81, "ivy.asarray_infer_dtype"], [537, "ivy.asarray_infer_dtype"]], "asarray_inputs_to_native_shapes() (in module ivy)": [[82, "ivy.asarray_inputs_to_native_shapes"], [537, "ivy.asarray_inputs_to_native_shapes"]], "asarray_to_native_arrays_and_back() (in module ivy)": [[83, "ivy.asarray_to_native_arrays_and_back"], [537, "ivy.asarray_to_native_arrays_and_back"]], "copy_array() (in module ivy)": [[84, "ivy.copy_array"], [537, "ivy.copy_array"]], "copy_array() (ivy.array method)": [[84, "ivy.Array.copy_array"]], "copy_array() (ivy.container method)": [[84, "ivy.Container.copy_array"]], "empty() (in module ivy)": [[85, "ivy.empty"], [537, "ivy.empty"]], "empty_like() (in module ivy)": [[86, "ivy.empty_like"], [537, "ivy.empty_like"]], "empty_like() (ivy.array method)": [[86, "ivy.Array.empty_like"]], "empty_like() (ivy.container method)": [[86, "ivy.Container.empty_like"]], "eye() (in module ivy)": [[87, "ivy.eye"], [537, "ivy.eye"]], "from_dlpack() (in module ivy)": [[88, "ivy.from_dlpack"], [537, "ivy.from_dlpack"]], "from_dlpack() (ivy.array method)": [[88, "ivy.Array.from_dlpack"]], "from_dlpack() (ivy.container method)": [[88, "ivy.Container.from_dlpack"]], "frombuffer() (in module ivy)": [[89, "ivy.frombuffer"], [537, "ivy.frombuffer"]], "frombuffer() (ivy.container method)": [[89, "ivy.Container.frombuffer"]], "full() (in module ivy)": [[90, "ivy.full"], [537, "ivy.full"]], "full_like() (in module ivy)": [[91, "ivy.full_like"], [537, "ivy.full_like"]], "full_like() (ivy.array method)": [[91, "ivy.Array.full_like"]], "full_like() (ivy.container method)": [[91, "ivy.Container.full_like"]], "linspace() (in module ivy)": [[92, "ivy.linspace"], [537, "ivy.linspace"]], "linspace() (ivy.array method)": [[92, "ivy.Array.linspace"]], "linspace() (ivy.container method)": [[92, "ivy.Container.linspace"]], "logspace() (in module ivy)": [[93, "ivy.logspace"], [537, "ivy.logspace"]], "logspace() (ivy.array method)": [[93, "ivy.Array.logspace"]], "logspace() (ivy.container method)": [[93, "ivy.Container.logspace"]], "meshgrid() (in module ivy)": [[94, "ivy.meshgrid"], [537, "ivy.meshgrid"]], "meshgrid() (ivy.array method)": [[94, "ivy.Array.meshgrid"]], "meshgrid() (ivy.container method)": [[94, "ivy.Container.meshgrid"]], "native_array() (in module ivy)": [[95, "ivy.native_array"], [537, "ivy.native_array"]], "native_array() (ivy.array method)": [[95, "ivy.Array.native_array"]], "native_array() (ivy.container method)": [[95, "ivy.Container.native_array"]], "one_hot() (in module ivy)": [[96, "ivy.one_hot"], [537, "ivy.one_hot"]], "one_hot() (ivy.array method)": [[96, "ivy.Array.one_hot"]], "one_hot() (ivy.container method)": [[96, "ivy.Container.one_hot"]], "ones() (in module ivy)": [[97, "ivy.ones"], [537, "ivy.ones"]], "ones_like() (in module ivy)": [[98, "ivy.ones_like"], [537, "ivy.ones_like"]], "ones_like() (ivy.array method)": [[98, "ivy.Array.ones_like"]], "ones_like() (ivy.container method)": [[98, "ivy.Container.ones_like"]], "tril() (in module ivy)": [[99, "ivy.tril"], [537, "ivy.tril"]], "tril() (ivy.array method)": [[99, "ivy.Array.tril"]], "tril() (ivy.container method)": [[99, "ivy.Container.tril"]], "triu() (in module ivy)": [[100, "ivy.triu"], [537, "ivy.triu"]], "triu() (ivy.array method)": [[100, "ivy.Array.triu"]], "triu() (ivy.container method)": [[100, "ivy.Container.triu"]], "triu_indices() (in module ivy)": [[101, "ivy.triu_indices"], [537, "ivy.triu_indices"]], "triu_indices() (ivy.container method)": [[101, "ivy.Container.triu_indices"]], "zeros() (in module ivy)": [[102, "ivy.zeros"], [537, "ivy.zeros"]], "zeros_like() (in module ivy)": [[103, "ivy.zeros_like"], [537, "ivy.zeros_like"]], "zeros_like() (ivy.array method)": [[103, "ivy.Array.zeros_like"]], "zeros_like() (ivy.container method)": [[103, "ivy.Container.zeros_like"]], "as_ivy_dtype() (in module ivy)": [[104, "ivy.as_ivy_dtype"], [538, "ivy.as_ivy_dtype"]], "as_native_dtype() (in module ivy)": [[105, "ivy.as_native_dtype"], [538, "ivy.as_native_dtype"]], "astype() (in module ivy)": [[106, "ivy.astype"], [538, "ivy.astype"]], "astype() (ivy.array method)": [[106, "ivy.Array.astype"]], "astype() (ivy.container method)": [[106, "ivy.Container.astype"]], "broadcast_arrays() (in module ivy)": [[107, "ivy.broadcast_arrays"], [538, "ivy.broadcast_arrays"]], "broadcast_arrays() (ivy.array method)": [[107, "ivy.Array.broadcast_arrays"]], "broadcast_arrays() (ivy.container method)": [[107, "ivy.Container.broadcast_arrays"]], "broadcast_to() (in module ivy)": [[108, "ivy.broadcast_to"], [538, "ivy.broadcast_to"]], "broadcast_to() (ivy.array method)": [[108, "ivy.Array.broadcast_to"]], "broadcast_to() (ivy.container method)": [[108, "ivy.Container.broadcast_to"]], "can_cast() (in module ivy)": [[109, "ivy.can_cast"], [538, "ivy.can_cast"]], "can_cast() (ivy.array method)": [[109, "ivy.Array.can_cast"]], "can_cast() (ivy.container method)": [[109, "ivy.Container.can_cast"]], "check_float() (in module ivy)": [[110, "ivy.check_float"], [538, "ivy.check_float"]], "closest_valid_dtype() (in module ivy)": [[111, "ivy.closest_valid_dtype"], [538, "ivy.closest_valid_dtype"]], "default_complex_dtype() (in module ivy)": [[112, "ivy.default_complex_dtype"], [538, "ivy.default_complex_dtype"]], "default_dtype() (in module ivy)": [[113, "ivy.default_dtype"], [538, "ivy.default_dtype"]], "default_float_dtype() (in module ivy)": [[114, "ivy.default_float_dtype"], [538, "ivy.default_float_dtype"]], "default_int_dtype() (in module ivy)": [[115, "ivy.default_int_dtype"], [538, "ivy.default_int_dtype"]], "default_uint_dtype() (in module ivy)": [[116, "ivy.default_uint_dtype"], [538, "ivy.default_uint_dtype"]], "dtype() (in module ivy)": [[117, "ivy.dtype"], [538, "ivy.dtype"]], "dtype() (ivy.array method)": [[117, "ivy.Array.dtype"]], "dtype() (ivy.container method)": [[117, "ivy.Container.dtype"]], "dtype_bits() (in module ivy)": [[118, "ivy.dtype_bits"], [538, "ivy.dtype_bits"]], "finfo() (in module ivy)": [[119, "ivy.finfo"], [538, "ivy.finfo"]], "finfo() (ivy.array method)": [[119, "ivy.Array.finfo"]], "finfo() (ivy.container method)": [[119, "ivy.Container.finfo"]], "function_supported_dtypes() (in module ivy)": [[120, "ivy.function_supported_dtypes"], [538, "ivy.function_supported_dtypes"]], "function_unsupported_dtypes() (in module ivy)": [[121, "ivy.function_unsupported_dtypes"], [538, "ivy.function_unsupported_dtypes"]], "iinfo() (in module ivy)": [[122, "ivy.iinfo"], [538, "ivy.iinfo"]], "iinfo() (ivy.array method)": [[122, "ivy.Array.iinfo"]], "iinfo() (ivy.container method)": [[122, "ivy.Container.iinfo"]], "infer_default_dtype() (in module ivy)": [[123, "ivy.infer_default_dtype"], [538, "ivy.infer_default_dtype"]], "invalid_dtype() (in module ivy)": [[124, "ivy.invalid_dtype"], [538, "ivy.invalid_dtype"]], "is_bool_dtype() (in module ivy)": [[125, "ivy.is_bool_dtype"], [538, "ivy.is_bool_dtype"]], "is_bool_dtype() (ivy.array method)": [[125, "ivy.Array.is_bool_dtype"]], "is_bool_dtype() (ivy.container method)": [[125, "ivy.Container.is_bool_dtype"]], "is_complex_dtype() (in module ivy)": [[126, "ivy.is_complex_dtype"], [538, "ivy.is_complex_dtype"]], "is_complex_dtype() (ivy.container method)": [[126, "ivy.Container.is_complex_dtype"]], "is_float_dtype() (in module ivy)": [[127, "ivy.is_float_dtype"], [538, "ivy.is_float_dtype"]], "is_float_dtype() (ivy.array method)": [[127, "ivy.Array.is_float_dtype"]], "is_float_dtype() (ivy.container method)": [[127, "ivy.Container.is_float_dtype"]], "is_hashable_dtype() (in module ivy)": [[128, "ivy.is_hashable_dtype"], [538, "ivy.is_hashable_dtype"]], "is_int_dtype() (in module ivy)": [[129, "ivy.is_int_dtype"], [538, "ivy.is_int_dtype"]], "is_int_dtype() (ivy.array method)": [[129, "ivy.Array.is_int_dtype"]], "is_int_dtype() (ivy.container method)": [[129, "ivy.Container.is_int_dtype"]], "is_native_dtype() (in module ivy)": [[130, "ivy.is_native_dtype"], [538, "ivy.is_native_dtype"]], "is_uint_dtype() (in module ivy)": [[131, "ivy.is_uint_dtype"], [538, "ivy.is_uint_dtype"]], "is_uint_dtype() (ivy.array method)": [[131, "ivy.Array.is_uint_dtype"]], "is_uint_dtype() (ivy.container method)": [[131, "ivy.Container.is_uint_dtype"]], "promote_types() (in module ivy)": [[132, "ivy.promote_types"], [538, "ivy.promote_types"]], "promote_types_of_inputs() (in module ivy)": [[133, "ivy.promote_types_of_inputs"], [538, "ivy.promote_types_of_inputs"]], "result_type() (in module ivy)": [[134, "ivy.result_type"], [538, "ivy.result_type"]], "result_type() (ivy.array method)": [[134, "ivy.Array.result_type"]], "result_type() (ivy.container method)": [[134, "ivy.Container.result_type"]], "set_default_complex_dtype() (in module ivy)": [[135, "ivy.set_default_complex_dtype"], [538, "ivy.set_default_complex_dtype"]], "set_default_dtype() (in module ivy)": [[136, "ivy.set_default_dtype"], [538, "ivy.set_default_dtype"]], "set_default_float_dtype() (in module ivy)": [[137, "ivy.set_default_float_dtype"], [538, "ivy.set_default_float_dtype"]], "set_default_int_dtype() (in module ivy)": [[138, "ivy.set_default_int_dtype"], [538, "ivy.set_default_int_dtype"]], "set_default_uint_dtype() (in module ivy)": [[139, "ivy.set_default_uint_dtype"], [538, "ivy.set_default_uint_dtype"]], "type_promote_arrays() (in module ivy)": [[140, "ivy.type_promote_arrays"], [538, "ivy.type_promote_arrays"]], "unset_default_complex_dtype() (in module ivy)": [[141, "ivy.unset_default_complex_dtype"], [538, "ivy.unset_default_complex_dtype"]], "unset_default_dtype() (in module ivy)": [[142, "ivy.unset_default_dtype"], [538, "ivy.unset_default_dtype"]], "unset_default_float_dtype() (in module ivy)": [[143, "ivy.unset_default_float_dtype"], [538, "ivy.unset_default_float_dtype"]], "unset_default_int_dtype() (in module ivy)": [[144, "ivy.unset_default_int_dtype"], [538, "ivy.unset_default_int_dtype"]], "unset_default_uint_dtype() (in module ivy)": [[145, "ivy.unset_default_uint_dtype"], [538, "ivy.unset_default_uint_dtype"]], "valid_dtype() (in module ivy)": [[146, "ivy.valid_dtype"], [538, "ivy.valid_dtype"]], "as_ivy_dev() (in module ivy)": [[147, "ivy.as_ivy_dev"], [539, "ivy.as_ivy_dev"]], "as_native_dev() (in module ivy)": [[148, "ivy.as_native_dev"], [539, "ivy.as_native_dev"]], "clear_cached_mem_on_dev() (in module ivy)": [[149, "ivy.clear_cached_mem_on_dev"], [539, "ivy.clear_cached_mem_on_dev"]], "default_device() (in module ivy)": [[150, "ivy.default_device"], [539, "ivy.default_device"]], "dev() (in module ivy)": [[151, "ivy.dev"], [539, "ivy.dev"]], "dev() (ivy.array method)": [[151, "ivy.Array.dev"]], "dev() (ivy.container method)": [[151, "ivy.Container.dev"]], "dev_util() (in module ivy)": [[152, "ivy.dev_util"], [539, "ivy.dev_util"]], "function_supported_devices() (in module ivy)": [[153, "ivy.function_supported_devices"], [539, "ivy.function_supported_devices"]], "function_unsupported_devices() (in module ivy)": [[154, "ivy.function_unsupported_devices"], [539, "ivy.function_unsupported_devices"]], "get_all_ivy_arrays_on_dev() (in module ivy)": [[155, "ivy.get_all_ivy_arrays_on_dev"], [539, "ivy.get_all_ivy_arrays_on_dev"]], "gpu_is_available() (in module ivy)": [[156, "ivy.gpu_is_available"], [539, "ivy.gpu_is_available"]], "handle_soft_device_variable() (in module ivy)": [[157, "ivy.handle_soft_device_variable"], [539, "ivy.handle_soft_device_variable"]], "num_cpu_cores() (in module ivy)": [[158, "ivy.num_cpu_cores"], [539, "ivy.num_cpu_cores"]], "num_gpus() (in module ivy)": [[159, "ivy.num_gpus"], [539, "ivy.num_gpus"]], "num_ivy_arrays_on_dev() (in module ivy)": [[160, "ivy.num_ivy_arrays_on_dev"], [539, "ivy.num_ivy_arrays_on_dev"]], "percent_used_mem_on_dev() (in module ivy)": [[161, "ivy.percent_used_mem_on_dev"], [539, "ivy.percent_used_mem_on_dev"]], "print_all_ivy_arrays_on_dev() (in module ivy)": [[162, "ivy.print_all_ivy_arrays_on_dev"], [539, "ivy.print_all_ivy_arrays_on_dev"]], "set_default_device() (in module ivy)": [[163, "ivy.set_default_device"], [539, "ivy.set_default_device"]], "set_soft_device_mode() (in module ivy)": [[164, "ivy.set_soft_device_mode"], [539, "ivy.set_soft_device_mode"]], "set_split_factor() (in module ivy)": [[165, "ivy.set_split_factor"], [539, "ivy.set_split_factor"]], "split_factor() (in module ivy)": [[166, "ivy.split_factor"], [539, "ivy.split_factor"]], "split_func_call() (in module ivy)": [[167, "ivy.split_func_call"], [539, "ivy.split_func_call"]], "to_device() (in module ivy)": [[168, "ivy.to_device"], [539, "ivy.to_device"]], "to_device() (ivy.array method)": [[168, "ivy.Array.to_device"]], "to_device() (ivy.container method)": [[168, "ivy.Container.to_device"]], "total_mem_on_dev() (in module ivy)": [[169, "ivy.total_mem_on_dev"], [539, "ivy.total_mem_on_dev"]], "tpu_is_available() (in module ivy)": [[170, "ivy.tpu_is_available"], [539, "ivy.tpu_is_available"]], "unset_default_device() (in module ivy)": [[171, "ivy.unset_default_device"], [539, "ivy.unset_default_device"]], "unset_soft_device_mode() (in module ivy)": [[172, "ivy.unset_soft_device_mode"], [539, "ivy.unset_soft_device_mode"]], "used_mem_on_dev() (in module ivy)": [[173, "ivy.used_mem_on_dev"], [539, "ivy.used_mem_on_dev"]], "abs() (in module ivy)": [[174, "ivy.abs"], [540, "ivy.abs"]], "abs() (ivy.array method)": [[174, "ivy.Array.abs"]], "abs() (ivy.container method)": [[174, "ivy.Container.abs"]], "acos() (in module ivy)": [[175, "ivy.acos"], [540, "ivy.acos"]], "acos() (ivy.array method)": [[175, "ivy.Array.acos"]], "acos() (ivy.container method)": [[175, "ivy.Container.acos"]], "acosh() (in module ivy)": [[176, "ivy.acosh"], [540, "ivy.acosh"]], "acosh() (ivy.array method)": [[176, "ivy.Array.acosh"]], "acosh() (ivy.container method)": [[176, "ivy.Container.acosh"]], "add() (in module ivy)": [[177, "ivy.add"], [540, "ivy.add"]], "add() (ivy.array method)": [[177, "ivy.Array.add"]], "add() (ivy.container method)": [[177, "ivy.Container.add"]], "angle() (in module ivy)": [[178, "ivy.angle"], [540, "ivy.angle"]], "angle() (ivy.array method)": [[178, "ivy.Array.angle"]], "angle() (ivy.container method)": [[178, "ivy.Container.angle"]], "asin() (in module ivy)": [[179, "ivy.asin"], [540, "ivy.asin"]], "asin() (ivy.array method)": [[179, "ivy.Array.asin"]], "asin() (ivy.container method)": [[179, "ivy.Container.asin"]], "asinh() (in module ivy)": [[180, "ivy.asinh"], [540, "ivy.asinh"]], "asinh() (ivy.array method)": [[180, "ivy.Array.asinh"]], "asinh() (ivy.container method)": [[180, "ivy.Container.asinh"]], "atan() (in module ivy)": [[181, "ivy.atan"], [540, "ivy.atan"]], "atan() (ivy.array method)": [[181, "ivy.Array.atan"]], "atan() (ivy.container method)": [[181, "ivy.Container.atan"]], "atan2() (in module ivy)": [[182, "ivy.atan2"], [540, "ivy.atan2"]], "atan2() (ivy.array method)": [[182, "ivy.Array.atan2"]], "atan2() (ivy.container method)": [[182, "ivy.Container.atan2"]], "atanh() (in module ivy)": [[183, "ivy.atanh"], [540, "ivy.atanh"]], "atanh() (ivy.array method)": [[183, "ivy.Array.atanh"]], "atanh() (ivy.container method)": [[183, "ivy.Container.atanh"]], "bitwise_and() (in module ivy)": [[184, "ivy.bitwise_and"], [540, "ivy.bitwise_and"]], "bitwise_and() (ivy.array method)": [[184, "ivy.Array.bitwise_and"]], "bitwise_and() (ivy.container method)": [[184, "ivy.Container.bitwise_and"]], "bitwise_invert() (in module ivy)": [[185, "ivy.bitwise_invert"], [540, "ivy.bitwise_invert"]], "bitwise_invert() (ivy.array method)": [[185, "ivy.Array.bitwise_invert"]], "bitwise_invert() (ivy.container method)": [[185, "ivy.Container.bitwise_invert"]], "bitwise_left_shift() (in module ivy)": [[186, "ivy.bitwise_left_shift"], [540, "ivy.bitwise_left_shift"]], "bitwise_left_shift() (ivy.array method)": [[186, "ivy.Array.bitwise_left_shift"]], "bitwise_left_shift() (ivy.container method)": [[186, "ivy.Container.bitwise_left_shift"]], "bitwise_or() (in module ivy)": [[187, "ivy.bitwise_or"], [540, "ivy.bitwise_or"]], "bitwise_or() (ivy.array method)": [[187, "ivy.Array.bitwise_or"]], "bitwise_or() (ivy.container method)": [[187, "ivy.Container.bitwise_or"]], "bitwise_right_shift() (in module ivy)": [[188, "ivy.bitwise_right_shift"], [540, "ivy.bitwise_right_shift"]], "bitwise_right_shift() (ivy.array method)": [[188, "ivy.Array.bitwise_right_shift"]], "bitwise_right_shift() (ivy.container method)": [[188, "ivy.Container.bitwise_right_shift"]], "bitwise_xor() (in module ivy)": [[189, "ivy.bitwise_xor"], [540, "ivy.bitwise_xor"]], "bitwise_xor() (ivy.array method)": [[189, "ivy.Array.bitwise_xor"]], "bitwise_xor() (ivy.container method)": [[189, "ivy.Container.bitwise_xor"]], "ceil() (in module ivy)": [[190, "ivy.ceil"], [540, "ivy.ceil"]], "ceil() (ivy.array method)": [[190, "ivy.Array.ceil"]], "ceil() (ivy.container method)": [[190, "ivy.Container.ceil"]], "cos() (in module ivy)": [[191, "ivy.cos"], [540, "ivy.cos"]], "cos() (ivy.array method)": [[191, "ivy.Array.cos"]], "cos() (ivy.container method)": [[191, "ivy.Container.cos"]], "cosh() (in module ivy)": [[192, "ivy.cosh"], [540, "ivy.cosh"]], "cosh() (ivy.array method)": [[192, "ivy.Array.cosh"]], "cosh() (ivy.container method)": [[192, "ivy.Container.cosh"]], "deg2rad() (in module ivy)": [[193, "ivy.deg2rad"], [540, "ivy.deg2rad"]], "deg2rad() (ivy.array method)": [[193, "ivy.Array.deg2rad"]], "deg2rad() (ivy.container method)": [[193, "ivy.Container.deg2rad"]], "divide() (in module ivy)": [[194, "ivy.divide"], [540, "ivy.divide"]], "divide() (ivy.array method)": [[194, "ivy.Array.divide"]], "divide() (ivy.container method)": [[194, "ivy.Container.divide"]], "equal() (in module ivy)": [[195, "ivy.equal"], [540, "ivy.equal"]], "equal() (ivy.array method)": [[195, "ivy.Array.equal"]], "equal() (ivy.container method)": [[195, "ivy.Container.equal"]], "erf() (in module ivy)": [[196, "ivy.erf"], [540, "ivy.erf"]], "erf() (ivy.array method)": [[196, "ivy.Array.erf"]], "erf() (ivy.container method)": [[196, "ivy.Container.erf"]], "exp() (in module ivy)": [[197, "ivy.exp"], [540, "ivy.exp"]], "exp() (ivy.array method)": [[197, "ivy.Array.exp"]], "exp() (ivy.container method)": [[197, "ivy.Container.exp"]], "exp2() (in module ivy)": [[198, "ivy.exp2"], [540, "ivy.exp2"]], "exp2() (ivy.array method)": [[198, "ivy.Array.exp2"]], "exp2() (ivy.container method)": [[198, "ivy.Container.exp2"]], "expm1() (in module ivy)": [[199, "ivy.expm1"], [540, "ivy.expm1"]], "expm1() (ivy.array method)": [[199, "ivy.Array.expm1"]], "expm1() (ivy.container method)": [[199, "ivy.Container.expm1"]], "floor() (in module ivy)": [[200, "ivy.floor"], [540, "ivy.floor"]], "floor() (ivy.array method)": [[200, "ivy.Array.floor"]], "floor() (ivy.container method)": [[200, "ivy.Container.floor"]], "floor_divide() (in module ivy)": [[201, "ivy.floor_divide"], [540, "ivy.floor_divide"]], "floor_divide() (ivy.array method)": [[201, "ivy.Array.floor_divide"]], "floor_divide() (ivy.container method)": [[201, "ivy.Container.floor_divide"]], "fmin() (in module ivy)": [[202, "ivy.fmin"], [540, "ivy.fmin"]], "fmin() (ivy.array method)": [[202, "ivy.Array.fmin"]], "fmin() (ivy.container method)": [[202, "ivy.Container.fmin"]], "fmod() (in module ivy)": [[203, "ivy.fmod"], [540, "ivy.fmod"]], "fmod() (ivy.array method)": [[203, "ivy.Array.fmod"]], "fmod() (ivy.container method)": [[203, "ivy.Container.fmod"]], "gcd() (in module ivy)": [[204, "ivy.gcd"], [540, "ivy.gcd"]], "gcd() (ivy.array method)": [[204, "ivy.Array.gcd"]], "gcd() (ivy.container method)": [[204, "ivy.Container.gcd"]], "greater() (in module ivy)": [[205, "ivy.greater"], [540, "ivy.greater"]], "greater() (ivy.array method)": [[205, "ivy.Array.greater"]], "greater() (ivy.container method)": [[205, "ivy.Container.greater"]], "greater_equal() (in module ivy)": [[206, "ivy.greater_equal"], [540, "ivy.greater_equal"]], "greater_equal() (ivy.array method)": [[206, "ivy.Array.greater_equal"]], "greater_equal() (ivy.container method)": [[206, "ivy.Container.greater_equal"]], "imag() (in module ivy)": [[207, "ivy.imag"], [540, "ivy.imag"]], "imag() (ivy.array method)": [[207, "ivy.Array.imag"]], "imag() (ivy.container method)": [[207, "ivy.Container.imag"]], "isfinite() (in module ivy)": [[208, "ivy.isfinite"], [540, "ivy.isfinite"]], "isfinite() (ivy.array method)": [[208, "ivy.Array.isfinite"]], "isfinite() (ivy.container method)": [[208, "ivy.Container.isfinite"]], "isinf() (in module ivy)": [[209, "ivy.isinf"], [540, "ivy.isinf"]], "isinf() (ivy.array method)": [[209, "ivy.Array.isinf"]], "isinf() (ivy.container method)": [[209, "ivy.Container.isinf"]], "isnan() (in module ivy)": [[210, "ivy.isnan"], [540, "ivy.isnan"]], "isnan() (ivy.array method)": [[210, "ivy.Array.isnan"]], "isnan() (ivy.container method)": [[210, "ivy.Container.isnan"]], "isreal() (in module ivy)": [[211, "ivy.isreal"], [540, "ivy.isreal"]], "isreal() (ivy.array method)": [[211, "ivy.Array.isreal"]], "isreal() (ivy.container method)": [[211, "ivy.Container.isreal"]], "lcm() (in module ivy)": [[212, "ivy.lcm"], [540, "ivy.lcm"]], "lcm() (ivy.array method)": [[212, "ivy.Array.lcm"]], "lcm() (ivy.container method)": [[212, "ivy.Container.lcm"]], "less() (in module ivy)": [[213, "ivy.less"], [540, "ivy.less"]], "less() (ivy.array method)": [[213, "ivy.Array.less"]], "less() (ivy.container method)": [[213, "ivy.Container.less"]], "less_equal() (in module ivy)": [[214, "ivy.less_equal"], [540, "ivy.less_equal"]], "less_equal() (ivy.array method)": [[214, "ivy.Array.less_equal"]], "less_equal() (ivy.container method)": [[214, "ivy.Container.less_equal"]], "log() (in module ivy)": [[215, "ivy.log"], [540, "ivy.log"]], "log() (ivy.array method)": [[215, "ivy.Array.log"]], "log() (ivy.container method)": [[215, "ivy.Container.log"]], "log10() (in module ivy)": [[216, "ivy.log10"], [540, "ivy.log10"]], "log10() (ivy.array method)": [[216, "ivy.Array.log10"]], "log10() (ivy.container method)": [[216, "ivy.Container.log10"]], "log1p() (in module ivy)": [[217, "ivy.log1p"], [540, "ivy.log1p"]], "log1p() (ivy.array method)": [[217, "ivy.Array.log1p"]], "log1p() (ivy.container method)": [[217, "ivy.Container.log1p"]], "log2() (in module ivy)": [[218, "ivy.log2"], [540, "ivy.log2"]], "log2() (ivy.array method)": [[218, "ivy.Array.log2"]], "log2() (ivy.container method)": [[218, "ivy.Container.log2"]], "logaddexp() (in module ivy)": [[219, "ivy.logaddexp"], [540, "ivy.logaddexp"]], "logaddexp() (ivy.array method)": [[219, "ivy.Array.logaddexp"]], "logaddexp() (ivy.container method)": [[219, "ivy.Container.logaddexp"]], "logaddexp2() (in module ivy)": [[220, "ivy.logaddexp2"], [540, "ivy.logaddexp2"]], "logaddexp2() (ivy.array method)": [[220, "ivy.Array.logaddexp2"]], "logaddexp2() (ivy.container method)": [[220, "ivy.Container.logaddexp2"]], "logical_and() (in module ivy)": [[221, "ivy.logical_and"], [540, "ivy.logical_and"]], "logical_and() (ivy.array method)": [[221, "ivy.Array.logical_and"]], "logical_and() (ivy.container method)": [[221, "ivy.Container.logical_and"]], "logical_not() (in module ivy)": [[222, "ivy.logical_not"], [540, "ivy.logical_not"]], "logical_not() (ivy.array method)": [[222, "ivy.Array.logical_not"]], "logical_not() (ivy.container method)": [[222, "ivy.Container.logical_not"]], "logical_or() (in module ivy)": [[223, "ivy.logical_or"], [540, "ivy.logical_or"]], "logical_or() (ivy.array method)": [[223, "ivy.Array.logical_or"]], "logical_or() (ivy.container method)": [[223, "ivy.Container.logical_or"]], "logical_xor() (in module ivy)": [[224, "ivy.logical_xor"], [540, "ivy.logical_xor"]], "logical_xor() (ivy.array method)": [[224, "ivy.Array.logical_xor"]], "logical_xor() (ivy.container method)": [[224, "ivy.Container.logical_xor"]], "maximum() (in module ivy)": [[225, "ivy.maximum"], [540, "ivy.maximum"]], "maximum() (ivy.array method)": [[225, "ivy.Array.maximum"]], "maximum() (ivy.container method)": [[225, "ivy.Container.maximum"]], "minimum() (in module ivy)": [[226, "ivy.minimum"], [540, "ivy.minimum"]], "minimum() (ivy.array method)": [[226, "ivy.Array.minimum"]], "minimum() (ivy.container method)": [[226, "ivy.Container.minimum"]], "multiply() (in module ivy)": [[227, "ivy.multiply"], [540, "ivy.multiply"]], "multiply() (ivy.array method)": [[227, "ivy.Array.multiply"]], "multiply() (ivy.container method)": [[227, "ivy.Container.multiply"]], "nan_to_num() (in module ivy)": [[228, "ivy.nan_to_num"], [540, "ivy.nan_to_num"]], "nan_to_num() (ivy.array method)": [[228, "ivy.Array.nan_to_num"]], "nan_to_num() (ivy.container method)": [[228, "ivy.Container.nan_to_num"]], "negative() (in module ivy)": [[229, "ivy.negative"], [540, "ivy.negative"]], "negative() (ivy.array method)": [[229, "ivy.Array.negative"]], "negative() (ivy.container method)": [[229, "ivy.Container.negative"]], "not_equal() (in module ivy)": [[230, "ivy.not_equal"], [540, "ivy.not_equal"]], "not_equal() (ivy.array method)": [[230, "ivy.Array.not_equal"]], "not_equal() (ivy.container method)": [[230, "ivy.Container.not_equal"]], "positive() (in module ivy)": [[231, "ivy.positive"], [540, "ivy.positive"]], "positive() (ivy.array method)": [[231, "ivy.Array.positive"]], "positive() (ivy.container method)": [[231, "ivy.Container.positive"]], "pow() (in module ivy)": [[232, "ivy.pow"], [540, "ivy.pow"]], "pow() (ivy.array method)": [[232, "ivy.Array.pow"]], "pow() (ivy.container method)": [[232, "ivy.Container.pow"]], "rad2deg() (in module ivy)": [[233, "ivy.rad2deg"], [540, "ivy.rad2deg"]], "rad2deg() (ivy.array method)": [[233, "ivy.Array.rad2deg"]], "rad2deg() (ivy.container method)": [[233, "ivy.Container.rad2deg"]], "real() (in module ivy)": [[234, "ivy.real"], [540, "ivy.real"]], "real() (ivy.array method)": [[234, "ivy.Array.real"]], "real() (ivy.container method)": [[234, "ivy.Container.real"]], "reciprocal() (in module ivy)": [[235, "ivy.reciprocal"], [540, "ivy.reciprocal"]], "reciprocal() (ivy.array method)": [[235, "ivy.Array.reciprocal"]], "reciprocal() (ivy.container method)": [[235, "ivy.Container.reciprocal"]], "remainder() (in module ivy)": [[236, "ivy.remainder"], [540, "ivy.remainder"]], "remainder() (ivy.array method)": [[236, "ivy.Array.remainder"]], "remainder() (ivy.container method)": [[236, "ivy.Container.remainder"]], "round() (in module ivy)": [[237, "ivy.round"], [540, "ivy.round"]], "round() (ivy.array method)": [[237, "ivy.Array.round"]], "round() (ivy.container method)": [[237, "ivy.Container.round"]], "sign() (in module ivy)": [[238, "ivy.sign"], [540, "ivy.sign"]], "sign() (ivy.array method)": [[238, "ivy.Array.sign"]], "sign() (ivy.container method)": [[238, "ivy.Container.sign"]], "sin() (in module ivy)": [[239, "ivy.sin"], [540, "ivy.sin"]], "sin() (ivy.array method)": [[239, "ivy.Array.sin"]], "sin() (ivy.container method)": [[239, "ivy.Container.sin"]], "sinh() (in module ivy)": [[240, "ivy.sinh"], [540, "ivy.sinh"]], "sinh() (ivy.array method)": [[240, "ivy.Array.sinh"]], "sinh() (ivy.container method)": [[240, "ivy.Container.sinh"]], "sqrt() (in module ivy)": [[241, "ivy.sqrt"], [540, "ivy.sqrt"]], "sqrt() (ivy.array method)": [[241, "ivy.Array.sqrt"]], "sqrt() (ivy.container method)": [[241, "ivy.Container.sqrt"]], "square() (in module ivy)": [[242, "ivy.square"], [540, "ivy.square"]], "square() (ivy.array method)": [[242, "ivy.Array.square"]], "square() (ivy.container method)": [[242, "ivy.Container.square"]], "subtract() (in module ivy)": [[243, "ivy.subtract"], [540, "ivy.subtract"]], "subtract() (ivy.array method)": [[243, "ivy.Array.subtract"]], "subtract() (ivy.container method)": [[243, "ivy.Container.subtract"]], "tan() (in module ivy)": [[244, "ivy.tan"], [540, "ivy.tan"]], "tan() (ivy.array method)": [[244, "ivy.Array.tan"]], "tan() (ivy.container method)": [[244, "ivy.Container.tan"]], "tanh() (in module ivy)": [[245, "ivy.tanh"], [540, "ivy.tanh"]], "tanh() (ivy.array method)": [[245, "ivy.Array.tanh"]], "tanh() (ivy.container method)": [[245, "ivy.Container.tanh"]], "trapz() (in module ivy)": [[246, "ivy.trapz"], [540, "ivy.trapz"]], "trapz() (ivy.array method)": [[246, "ivy.Array.trapz"]], "trapz() (ivy.container method)": [[246, "ivy.Container.trapz"]], "trunc() (in module ivy)": [[247, "ivy.trunc"], [540, "ivy.trunc"]], "trunc() (ivy.array method)": [[247, "ivy.Array.trunc"]], "trunc() (ivy.container method)": [[247, "ivy.Container.trunc"]], "trunc_divide() (in module ivy)": [[248, "ivy.trunc_divide"], [540, "ivy.trunc_divide"]], "trunc_divide() (ivy.array method)": [[248, "ivy.Array.trunc_divide"]], "trunc_divide() (ivy.container method)": [[248, "ivy.Container.trunc_divide"]], "elu() (in module ivy)": [[249, "ivy.elu"], [301, "ivy.elu"]], "elu() (ivy.array method)": [[249, "ivy.Array.elu"]], "elu() (ivy.container method)": [[249, "ivy.Container.elu"]], "logit() (in module ivy)": [[250, "ivy.logit"], [301, "ivy.logit"]], "logit() (ivy.array method)": [[250, "ivy.Array.logit"]], "logit() (ivy.container method)": [[250, "ivy.Container.logit"]], "logsigmoid() (in module ivy)": [[251, "ivy.logsigmoid"], [301, "ivy.logsigmoid"]], "logsigmoid() (ivy.array method)": [[251, "ivy.Array.logsigmoid"]], "logsigmoid() (ivy.container method)": [[251, "ivy.Container.logsigmoid"]], "prelu() (in module ivy)": [[252, "ivy.prelu"], [301, "ivy.prelu"]], "prelu() (ivy.array method)": [[252, "ivy.Array.prelu"]], "prelu() (ivy.container method)": [[252, "ivy.Container.prelu"]], "relu6() (in module ivy)": [[253, "ivy.relu6"], [301, "ivy.relu6"]], "relu6() (ivy.array method)": [[253, "ivy.Array.relu6"]], "relu6() (ivy.container method)": [[253, "ivy.Container.relu6"]], "selu() (in module ivy)": [[254, "ivy.selu"], [301, "ivy.selu"]], "selu() (ivy.array method)": [[254, "ivy.Array.selu"]], "selu() (ivy.container method)": [[254, "ivy.Container.selu"]], "sequence_length() (in module ivy)": [[255, "ivy.sequence_length"], [301, "ivy.sequence_length"]], "silu() (in module ivy)": [[256, "ivy.silu"], [301, "ivy.silu"]], "silu() (ivy.array method)": [[256, "ivy.Array.silu"]], "silu() (ivy.container method)": [[256, "ivy.Container.silu"]], "thresholded_relu() (in module ivy)": [[257, "ivy.thresholded_relu"], [301, "ivy.thresholded_relu"]], "thresholded_relu() (ivy.array method)": [[257, "ivy.Array.thresholded_relu"]], "thresholded_relu() (ivy.container method)": [[257, "ivy.Container.thresholded_relu"]], "blackman_window() (in module ivy)": [[258, "ivy.blackman_window"], [303, "ivy.blackman_window"]], "blackman_window() (ivy.array method)": [[258, "ivy.Array.blackman_window"]], "blackman_window() (ivy.container method)": [[258, "ivy.Container.blackman_window"]], "eye_like() (in module ivy)": [[259, "ivy.eye_like"], [303, "ivy.eye_like"]], "eye_like() (ivy.array method)": [[259, "ivy.Array.eye_like"]], "eye_like() (ivy.container method)": [[259, "ivy.Container.eye_like"]], "hamming_window() (in module ivy)": [[260, "ivy.hamming_window"], [303, "ivy.hamming_window"]], "hamming_window() (ivy.container method)": [[260, "ivy.Container.hamming_window"]], "hann_window() (in module ivy)": [[261, "ivy.hann_window"], [303, "ivy.hann_window"]], "hann_window() (ivy.container method)": [[261, "ivy.Container.hann_window"]], "indices() (in module ivy)": [[262, "ivy.indices"], [303, "ivy.indices"]], "kaiser_bessel_derived_window() (in module ivy)": [[263, "ivy.kaiser_bessel_derived_window"], [303, "ivy.kaiser_bessel_derived_window"]], "kaiser_bessel_derived_window() (ivy.container method)": [[263, "ivy.Container.kaiser_bessel_derived_window"]], "kaiser_window() (in module ivy)": [[264, "ivy.kaiser_window"], [303, "ivy.kaiser_window"]], "kaiser_window() (ivy.container method)": [[264, "ivy.Container.kaiser_window"]], "ndenumerate() (in module ivy)": [[265, "ivy.ndenumerate"], [303, "ivy.ndenumerate"]], "ndindex() (in module ivy)": [[266, "ivy.ndindex"], [303, "ivy.ndindex"]], "random_cp() (in module ivy)": [[267, "ivy.random_cp"], [303, "ivy.random_cp"]], "random_tucker() (in module ivy)": [[268, "ivy.random_tucker"], [303, "ivy.random_tucker"]], "tril_indices() (in module ivy)": [[269, "ivy.tril_indices"], [303, "ivy.tril_indices"]], "tril_indices() (ivy.container method)": [[269, "ivy.Container.tril_indices"]], "trilu() (in module ivy)": [[270, "ivy.trilu"], [303, "ivy.trilu"]], "trilu() (ivy.array method)": [[270, "ivy.Array.trilu"]], "trilu() (ivy.container method)": [[270, "ivy.Container.trilu"]], "unsorted_segment_min() (in module ivy)": [[271, "ivy.unsorted_segment_min"], [303, "ivy.unsorted_segment_min"]], "unsorted_segment_min() (ivy.array method)": [[271, "ivy.Array.unsorted_segment_min"]], "unsorted_segment_min() (ivy.container method)": [[271, "ivy.Container.unsorted_segment_min"]], "unsorted_segment_sum() (in module ivy)": [[272, "ivy.unsorted_segment_sum"], [303, "ivy.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.array method)": [[272, "ivy.Array.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.container method)": [[272, "ivy.Container.unsorted_segment_sum"]], "vorbis_window() (in module ivy)": [[273, "ivy.vorbis_window"], [303, "ivy.vorbis_window"]], "vorbis_window() (ivy.container method)": [[273, "ivy.Container.vorbis_window"]], "allclose() (in module ivy)": [[274, "ivy.allclose"], [306, "ivy.allclose"]], "allclose() (ivy.array method)": [[274, "ivy.Array.allclose"]], "allclose() (ivy.container method)": [[274, "ivy.Container.allclose"]], "binarizer() (in module ivy)": [[275, "ivy.binarizer"], [306, "ivy.binarizer"]], "binarizer() (ivy.array method)": [[275, "ivy.Array.binarizer"]], "binarizer() (ivy.container method)": [[275, "ivy.Container.binarizer"]], "conj() (in module ivy)": [[276, "ivy.conj"], [306, "ivy.conj"]], "conj() (ivy.array method)": [[276, "ivy.Array.conj"]], "conj() (ivy.container method)": [[276, "ivy.Container.conj"]], "copysign() (in module ivy)": [[277, "ivy.copysign"], [306, "ivy.copysign"]], "copysign() (ivy.array method)": [[277, "ivy.Array.copysign"]], "copysign() (ivy.container method)": [[277, "ivy.Container.copysign"]], "count_nonzero() (in module ivy)": [[278, "ivy.count_nonzero"], [306, "ivy.count_nonzero"]], "count_nonzero() (ivy.array method)": [[278, "ivy.Array.count_nonzero"]], "count_nonzero() (ivy.container method)": [[278, "ivy.Container.count_nonzero"]], "diff() (in module ivy)": [[279, "ivy.diff"], [306, "ivy.diff"]], "diff() (ivy.array method)": [[279, "ivy.Array.diff"]], "diff() (ivy.container method)": [[279, "ivy.Container.diff"]], "digamma() (in module ivy)": [[280, "ivy.digamma"], [306, "ivy.digamma"]], "digamma() (ivy.array method)": [[280, "ivy.Array.digamma"]], "digamma() (ivy.container method)": [[280, "ivy.Container.digamma"]], "fix() (in module ivy)": [[281, "ivy.fix"], [306, "ivy.fix"]], "fix() (ivy.array method)": [[281, "ivy.Array.fix"]], "fix() (ivy.container method)": [[281, "ivy.Container.fix"]], "float_power() (in module ivy)": [[282, "ivy.float_power"], [306, "ivy.float_power"]], "float_power() (ivy.array method)": [[282, "ivy.Array.float_power"]], "float_power() (ivy.container method)": [[282, "ivy.Container.float_power"]], "fmax() (in module ivy)": [[283, "ivy.fmax"], [306, "ivy.fmax"]], "fmax() (ivy.array method)": [[283, "ivy.Array.fmax"]], "fmax() (ivy.container method)": [[283, "ivy.Container.fmax"]], "frexp() (in module ivy)": [[284, "ivy.frexp"], [306, "ivy.frexp"]], "frexp() (ivy.array method)": [[284, "ivy.Array.frexp"]], "frexp() (ivy.container method)": [[284, "ivy.Container.frexp"]], "gradient() (in module ivy)": [[285, "ivy.gradient"], [306, "ivy.gradient"]], "gradient() (ivy.array method)": [[285, "ivy.Array.gradient"]], "gradient() (ivy.container method)": [[285, "ivy.Container.gradient"]], "hypot() (in module ivy)": [[286, "ivy.hypot"], [306, "ivy.hypot"]], "hypot() (ivy.array method)": [[286, "ivy.Array.hypot"]], "hypot() (ivy.container method)": [[286, "ivy.Container.hypot"]], "isclose() (in module ivy)": [[287, "ivy.isclose"], [306, "ivy.isclose"]], "isclose() (ivy.array method)": [[287, "ivy.Array.isclose"]], "isclose() (ivy.container method)": [[287, "ivy.Container.isclose"]], "ldexp() (in module ivy)": [[288, "ivy.ldexp"], [306, "ivy.ldexp"]], "ldexp() (ivy.array method)": [[288, "ivy.Array.ldexp"]], "ldexp() (ivy.container method)": [[288, "ivy.Container.ldexp"]], "lerp() (in module ivy)": [[289, "ivy.lerp"], [306, "ivy.lerp"]], "lerp() (ivy.array method)": [[289, "ivy.Array.lerp"]], "lerp() (ivy.container method)": [[289, "ivy.Container.lerp"]], "lgamma() (in module ivy)": [[290, "ivy.lgamma"], [306, "ivy.lgamma"]], "lgamma() (ivy.array method)": [[290, "ivy.Array.lgamma"]], "modf() (in module ivy)": [[291, "ivy.modf"], [306, "ivy.modf"]], "modf() (ivy.array method)": [[291, "ivy.Array.modf"]], "modf() (ivy.container method)": [[291, "ivy.Container.modf"]], "nansum() (in module ivy)": [[292, "ivy.nansum"], [306, "ivy.nansum"]], "nansum() (ivy.array method)": [[292, "ivy.Array.nansum"]], "nansum() (ivy.container method)": [[292, "ivy.Container.nansum"]], "nextafter() (in module ivy)": [[293, "ivy.nextafter"], [306, "ivy.nextafter"]], "nextafter() (ivy.array method)": [[293, "ivy.Array.nextafter"]], "nextafter() (ivy.container method)": [[293, "ivy.Container.nextafter"]], "signbit() (in module ivy)": [[294, "ivy.signbit"], [306, "ivy.signbit"]], "signbit() (ivy.array method)": [[294, "ivy.Array.signbit"]], "signbit() (ivy.container method)": [[294, "ivy.Container.signbit"]], "sinc() (in module ivy)": [[295, "ivy.sinc"], [306, "ivy.sinc"]], "sinc() (ivy.array method)": [[295, "ivy.Array.sinc"]], "sinc() (ivy.container method)": [[295, "ivy.Container.sinc"]], "sparsify_tensor() (in module ivy)": [[296, "ivy.sparsify_tensor"], [306, "ivy.sparsify_tensor"]], "sparsify_tensor() (ivy.array method)": [[296, "ivy.Array.sparsify_tensor"]], "sparsify_tensor() (ivy.container method)": [[296, "ivy.Container.sparsify_tensor"]], "xlogy() (in module ivy)": [[297, "ivy.xlogy"], [306, "ivy.xlogy"]], "xlogy() (ivy.array method)": [[297, "ivy.Array.xlogy"]], "xlogy() (ivy.container method)": [[297, "ivy.Container.xlogy"]], "zeta() (in module ivy)": [[298, "ivy.zeta"], [306, "ivy.zeta"]], "zeta() (ivy.array method)": [[298, "ivy.Array.zeta"]], "zeta() (ivy.container method)": [[298, "ivy.Container.zeta"]], "reduce() (in module ivy)": [[299, "ivy.reduce"], [307, "ivy.reduce"]], "reduce() (ivy.array method)": [[299, "ivy.Array.reduce"]], "reduce() (ivy.container method)": [[299, "ivy.Container.reduce"]], "bind_custom_gradient_function() (in module ivy)": [[300, "ivy.bind_custom_gradient_function"], [308, "ivy.bind_custom_gradient_function"]], "ivy.functional.ivy.experimental.activations": [[301, "module-ivy.functional.ivy.experimental.activations"]], "ivy.functional.ivy.experimental.constants": [[302, "module-ivy.functional.ivy.experimental.constants"]], "ivy.functional.ivy.experimental.creation": [[303, "module-ivy.functional.ivy.experimental.creation"]], "ivy.functional.ivy.experimental.data_type": [[304, "module-ivy.functional.ivy.experimental.data_type"]], "ivy.functional.ivy.experimental.device": [[305, "module-ivy.functional.ivy.experimental.device"]], "ivy.functional.ivy.experimental.elementwise": [[306, "module-ivy.functional.ivy.experimental.elementwise"]], "ivy.functional.ivy.experimental.general": [[307, "module-ivy.functional.ivy.experimental.general"]], "ivy.functional.ivy.experimental.gradients": [[308, "module-ivy.functional.ivy.experimental.gradients"]], "adaptive_avg_pool1d() (in module ivy)": [[309, "ivy.adaptive_avg_pool1d"], [323, "ivy.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (in module ivy)": [[309, "ivy.adaptive_avg_pool2d"], [324, "ivy.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (in module ivy)": [[309, "ivy.adaptive_max_pool2d"], [325, "ivy.adaptive_max_pool2d"]], "area_interpolate() (in module ivy)": [[309, "ivy.area_interpolate"], [326, "ivy.area_interpolate"]], "avg_pool1d() (in module ivy)": [[309, "ivy.avg_pool1d"], [327, "ivy.avg_pool1d"]], "avg_pool2d() (in module ivy)": [[309, "ivy.avg_pool2d"], [328, "ivy.avg_pool2d"]], "avg_pool3d() (in module ivy)": [[309, "ivy.avg_pool3d"], [329, "ivy.avg_pool3d"]], "dct() (in module ivy)": [[309, "ivy.dct"], [330, "ivy.dct"]], "dft() (in module ivy)": [[309, "ivy.dft"], [331, "ivy.dft"]], "dropout1d() (in module ivy)": [[309, "ivy.dropout1d"], [332, "ivy.dropout1d"]], "dropout2d() (in module ivy)": [[309, "ivy.dropout2d"], [333, "ivy.dropout2d"]], "dropout3d() (in module ivy)": [[309, "ivy.dropout3d"], [334, "ivy.dropout3d"]], "embedding() (in module ivy)": [[309, "ivy.embedding"], [335, "ivy.embedding"]], "fft() (in module ivy)": [[309, "ivy.fft"], [336, "ivy.fft"]], "fft2() (in module ivy)": [[309, "ivy.fft2"], [337, "ivy.fft2"]], "generate_einsum_equation() (in module ivy)": [[309, "ivy.generate_einsum_equation"], [338, "ivy.generate_einsum_equation"]], "get_interpolate_kernel() (in module ivy)": [[309, "ivy.get_interpolate_kernel"], [339, "ivy.get_interpolate_kernel"]], "idct() (in module ivy)": [[309, "ivy.idct"], [340, "ivy.idct"]], "ifft() (in module ivy)": [[309, "ivy.ifft"], [341, "ivy.ifft"]], "ifftn() (in module ivy)": [[309, "ivy.ifftn"], [342, "ivy.ifftn"]], "interp() (in module ivy)": [[309, "ivy.interp"], [343, "ivy.interp"]], "interpolate() (in module ivy)": [[309, "ivy.interpolate"], [344, "ivy.interpolate"]], "ivy.functional.ivy.experimental.layers": [[309, "module-ivy.functional.ivy.experimental.layers"]], "max_pool1d() (in module ivy)": [[309, "ivy.max_pool1d"], [345, "ivy.max_pool1d"]], "max_pool2d() (in module ivy)": [[309, "ivy.max_pool2d"], [346, "ivy.max_pool2d"]], "max_pool3d() (in module ivy)": [[309, "ivy.max_pool3d"], [347, "ivy.max_pool3d"]], "max_unpool1d() (in module ivy)": [[309, "ivy.max_unpool1d"], [348, "ivy.max_unpool1d"]], "nearest_interpolate() (in module ivy)": [[309, "ivy.nearest_interpolate"], [349, "ivy.nearest_interpolate"]], "pool() (in module ivy)": [[309, "ivy.pool"], [350, "ivy.pool"]], "reduce_window() (in module ivy)": [[309, "ivy.reduce_window"], [351, "ivy.reduce_window"]], "rfftn() (in module ivy)": [[309, "ivy.rfftn"], [352, "ivy.rfftn"]], "adjoint() (in module ivy)": [[310, "ivy.adjoint"], [353, "ivy.adjoint"]], "cond() (in module ivy)": [[310, "ivy.cond"], [354, "ivy.cond"]], "diagflat() (in module ivy)": [[310, "ivy.diagflat"], [355, "ivy.diagflat"]], "dot() (in module ivy)": [[310, "ivy.dot"], [356, "ivy.dot"]], "eig() (in module ivy)": [[310, "ivy.eig"], [357, "ivy.eig"], [545, "ivy.eig"], [577, "ivy.eig"]], "eigh_tridiagonal() (in module ivy)": [[310, "ivy.eigh_tridiagonal"], [358, "ivy.eigh_tridiagonal"]], "eigvals() (in module ivy)": [[310, "ivy.eigvals"], [359, "ivy.eigvals"]], "initialize_tucker() (in module ivy)": [[310, "ivy.initialize_tucker"], [360, "ivy.initialize_tucker"]], "ivy.functional.ivy.experimental.linear_algebra": [[310, "module-ivy.functional.ivy.experimental.linear_algebra"]], "khatri_rao() (in module ivy)": [[310, "ivy.khatri_rao"], [361, "ivy.khatri_rao"]], "kron() (in module ivy)": [[310, "ivy.kron"], [362, "ivy.kron"]], "kronecker() (in module ivy)": [[310, "ivy.kronecker"], [363, "ivy.kronecker"]], "make_svd_non_negative() (in module ivy)": [[310, "ivy.make_svd_non_negative"], [364, "ivy.make_svd_non_negative"]], "matrix_exp() (in module ivy)": [[310, "ivy.matrix_exp"], [365, "ivy.matrix_exp"]], "mode_dot() (in module ivy)": [[310, "ivy.mode_dot"], [366, "ivy.mode_dot"]], "multi_dot() (in module ivy)": [[310, "ivy.multi_dot"], [367, "ivy.multi_dot"]], "multi_mode_dot() (in module ivy)": [[310, "ivy.multi_mode_dot"], [368, "ivy.multi_mode_dot"]], "partial_tucker() (in module ivy)": [[310, "ivy.partial_tucker"], [369, "ivy.partial_tucker"]], "svd_flip() (in module ivy)": [[310, "ivy.svd_flip"], [370, "ivy.svd_flip"]], "truncated_svd() (in module ivy)": [[310, "ivy.truncated_svd"], [371, "ivy.truncated_svd"]], "tucker() (in module ivy)": [[310, "ivy.tucker"], [372, "ivy.tucker"]], "huber_loss() (in module ivy)": [[311, "ivy.huber_loss"], [373, "ivy.huber_loss"]], "ivy.functional.ivy.experimental.losses": [[311, "module-ivy.functional.ivy.experimental.losses"]], "l1_loss() (in module ivy)": [[311, "ivy.l1_loss"], [374, "ivy.l1_loss"]], "log_poisson_loss() (in module ivy)": [[311, "ivy.log_poisson_loss"], [375, "ivy.log_poisson_loss"]], "smooth_l1_loss() (in module ivy)": [[311, "ivy.smooth_l1_loss"], [376, "ivy.smooth_l1_loss"]], "soft_margin_loss() (in module ivy)": [[311, "ivy.soft_margin_loss"], [377, "ivy.soft_margin_loss"]], "as_strided() (in module ivy)": [[312, "ivy.as_strided"], [378, "ivy.as_strided"]], "associative_scan() (in module ivy)": [[312, "ivy.associative_scan"], [379, "ivy.associative_scan"]], "atleast_1d() (in module ivy)": [[312, "ivy.atleast_1d"], [380, "ivy.atleast_1d"]], "atleast_2d() (in module ivy)": [[312, "ivy.atleast_2d"], [381, "ivy.atleast_2d"]], "atleast_3d() (in module ivy)": [[312, "ivy.atleast_3d"], [382, "ivy.atleast_3d"]], "broadcast_shapes() (in module ivy)": [[312, "ivy.broadcast_shapes"], [383, "ivy.broadcast_shapes"]], "choose() (in module ivy)": [[312, "ivy.choose"], [384, "ivy.choose"]], "concat_from_sequence() (in module ivy)": [[312, "ivy.concat_from_sequence"], [385, "ivy.concat_from_sequence"]], "dsplit() (in module ivy)": [[312, "ivy.dsplit"], [386, "ivy.dsplit"]], "dstack() (in module ivy)": [[312, "ivy.dstack"], [387, "ivy.dstack"]], "expand() (in module ivy)": [[312, "ivy.expand"], [388, "ivy.expand"]], "fill_diagonal() (in module ivy)": [[312, "ivy.fill_diagonal"], [389, "ivy.fill_diagonal"]], "flatten() (in module ivy)": [[312, "ivy.flatten"], [390, "ivy.flatten"]], "fliplr() (in module ivy)": [[312, "ivy.fliplr"], [391, "ivy.fliplr"]], "flipud() (in module ivy)": [[312, "ivy.flipud"], [392, "ivy.flipud"]], "fold() (in module ivy)": [[312, "ivy.fold"], [393, "ivy.fold"]], "heaviside() (in module ivy)": [[312, "ivy.heaviside"], [394, "ivy.heaviside"]], "hsplit() (in module ivy)": [[312, "ivy.hsplit"], [395, "ivy.hsplit"]], "hstack() (in module ivy)": [[312, "ivy.hstack"], [396, "ivy.hstack"]], "i0() (in module ivy)": [[312, "ivy.i0"], [397, "ivy.i0"]], "ivy.functional.ivy.experimental.manipulation": [[312, "module-ivy.functional.ivy.experimental.manipulation"]], "matricize() (in module ivy)": [[312, "ivy.matricize"], [398, "ivy.matricize"]], "moveaxis() (in module ivy)": [[312, "ivy.moveaxis"], [399, "ivy.moveaxis"]], "pad() (in module ivy)": [[312, "ivy.pad"], [400, "ivy.pad"]], "partial_fold() (in module ivy)": [[312, "ivy.partial_fold"], [401, "ivy.partial_fold"]], "partial_tensor_to_vec() (in module ivy)": [[312, "ivy.partial_tensor_to_vec"], [402, "ivy.partial_tensor_to_vec"]], "partial_unfold() (in module ivy)": [[312, "ivy.partial_unfold"], [403, "ivy.partial_unfold"]], "partial_vec_to_tensor() (in module ivy)": [[312, "ivy.partial_vec_to_tensor"], [404, "ivy.partial_vec_to_tensor"]], "put_along_axis() (in module ivy)": [[312, "ivy.put_along_axis"], [405, "ivy.put_along_axis"]], "rot90() (in module ivy)": [[312, "ivy.rot90"], [406, "ivy.rot90"]], "soft_thresholding() (in module ivy)": [[312, "ivy.soft_thresholding"], [407, "ivy.soft_thresholding"]], "take_along_axis() (in module ivy)": [[312, "ivy.take_along_axis"], [408, "ivy.take_along_axis"]], "top_k() (in module ivy)": [[312, "ivy.top_k"], [409, "ivy.top_k"]], "unfold() (in module ivy)": [[312, "ivy.unfold"], [410, "ivy.unfold"]], "unique_consecutive() (in module ivy)": [[312, "ivy.unique_consecutive"], [411, "ivy.unique_consecutive"]], "vsplit() (in module ivy)": [[312, "ivy.vsplit"], [412, "ivy.vsplit"]], "vstack() (in module ivy)": [[312, "ivy.vstack"], [413, "ivy.vstack"]], "ivy.functional.ivy.experimental.meta": [[313, "module-ivy.functional.ivy.experimental.meta"]], "ivy.functional.ivy.experimental.nest": [[314, "module-ivy.functional.ivy.experimental.nest"]], "batch_norm() (in module ivy)": [[315, "ivy.batch_norm"], [414, "ivy.batch_norm"]], "group_norm() (in module ivy)": [[315, "ivy.group_norm"], [415, "ivy.group_norm"]], "instance_norm() (in module ivy)": [[315, "ivy.instance_norm"], [416, "ivy.instance_norm"]], "ivy.functional.ivy.experimental.norms": [[315, "module-ivy.functional.ivy.experimental.norms"]], "l1_normalize() (in module ivy)": [[315, "ivy.l1_normalize"], [417, "ivy.l1_normalize"]], "l2_normalize() (in module ivy)": [[315, "ivy.l2_normalize"], [418, "ivy.l2_normalize"]], "lp_normalize() (in module ivy)": [[315, "ivy.lp_normalize"], [419, "ivy.lp_normalize"]], "bernoulli() (in module ivy)": [[316, "ivy.bernoulli"], [420, "ivy.bernoulli"]], "beta() (in module ivy)": [[316, "ivy.beta"], [421, "ivy.beta"]], "dirichlet() (in module ivy)": [[316, "ivy.dirichlet"], [422, "ivy.dirichlet"]], "gamma() (in module ivy)": [[316, "ivy.gamma"], [423, "ivy.gamma"]], "ivy.functional.ivy.experimental.random": [[316, "module-ivy.functional.ivy.experimental.random"]], "poisson() (in module ivy)": [[316, "ivy.poisson"], [424, "ivy.poisson"]], "ivy.functional.ivy.experimental.searching": [[317, "module-ivy.functional.ivy.experimental.searching"]], "unravel_index() (in module ivy)": [[317, "ivy.unravel_index"], [425, "ivy.unravel_index"]], "ivy.functional.ivy.experimental.set": [[318, "module-ivy.functional.ivy.experimental.set"]], "invert_permutation() (in module ivy)": [[319, "ivy.invert_permutation"], [426, "ivy.invert_permutation"]], "ivy.functional.ivy.experimental.sorting": [[319, "module-ivy.functional.ivy.experimental.sorting"]], "lexsort() (in module ivy)": [[319, "ivy.lexsort"], [427, "ivy.lexsort"]], "nativesparsearray (class in ivy)": [[320, "ivy.NativeSparseArray"]], "sparsearray (class in ivy)": [[320, "ivy.SparseArray"]], "is_ivy_sparse_array() (in module ivy)": [[320, "ivy.is_ivy_sparse_array"], [428, "ivy.is_ivy_sparse_array"]], "is_native_sparse_array() (in module ivy)": [[320, "ivy.is_native_sparse_array"], [429, "ivy.is_native_sparse_array"]], "ivy.functional.ivy.experimental.sparse_array": [[320, "module-ivy.functional.ivy.experimental.sparse_array"]], "native_sparse_array() (in module ivy)": [[320, "ivy.native_sparse_array"], [430, "ivy.native_sparse_array"]], "native_sparse_array_to_indices_values_and_shape() (in module ivy)": [[320, "ivy.native_sparse_array_to_indices_values_and_shape"], [431, "ivy.native_sparse_array_to_indices_values_and_shape"]], "bincount() (in module ivy)": [[321, "ivy.bincount"], [432, "ivy.bincount"]], "corrcoef() (in module ivy)": [[321, "ivy.corrcoef"], [433, "ivy.corrcoef"]], "cov() (in module ivy)": [[321, "ivy.cov"], [434, "ivy.cov"]], "cummax() (in module ivy)": [[321, "ivy.cummax"], [435, "ivy.cummax"]], "cummin() (in module ivy)": [[321, "ivy.cummin"], [436, "ivy.cummin"]], "histogram() (in module ivy)": [[321, "ivy.histogram"], [437, "ivy.histogram"]], "igamma() (in module ivy)": [[321, "ivy.igamma"], [438, "ivy.igamma"]], "ivy.functional.ivy.experimental.statistical": [[321, "module-ivy.functional.ivy.experimental.statistical"]], "median() (in module ivy)": [[321, "ivy.median"], [439, "ivy.median"]], "nanmean() (in module ivy)": [[321, "ivy.nanmean"], [440, "ivy.nanmean"]], "nanmedian() (in module ivy)": [[321, "ivy.nanmedian"], [441, "ivy.nanmedian"]], "quantile() (in module ivy)": [[321, "ivy.quantile"], [442, "ivy.quantile"]], "ivy.functional.ivy.experimental.utility": [[322, "module-ivy.functional.ivy.experimental.utility"]], "adaptive_avg_pool1d() (ivy.array method)": [[323, "ivy.Array.adaptive_avg_pool1d"]], "adaptive_avg_pool1d() (ivy.container method)": [[323, "ivy.Container.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.array method)": [[324, "ivy.Array.adaptive_avg_pool2d"]], "adaptive_avg_pool2d() (ivy.container method)": [[324, "ivy.Container.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.array method)": [[325, "ivy.Array.adaptive_max_pool2d"]], "adaptive_max_pool2d() (ivy.container method)": [[325, "ivy.Container.adaptive_max_pool2d"]], "avg_pool1d() (ivy.array method)": [[327, "ivy.Array.avg_pool1d"]], "avg_pool1d() (ivy.container method)": [[327, "ivy.Container.avg_pool1d"]], "avg_pool2d() (ivy.array method)": [[328, "ivy.Array.avg_pool2d"]], "avg_pool2d() (ivy.container method)": [[328, "ivy.Container.avg_pool2d"]], "avg_pool3d() (ivy.array method)": [[329, "ivy.Array.avg_pool3d"]], "avg_pool3d() (ivy.container method)": [[329, "ivy.Container.avg_pool3d"]], "dct() (ivy.array method)": [[330, "ivy.Array.dct"]], "dct() (ivy.container method)": [[330, "ivy.Container.dct"]], "dft() (ivy.array method)": [[331, "ivy.Array.dft"]], "dft() (ivy.container method)": [[331, "ivy.Container.dft"]], "dropout1d() (ivy.array method)": [[332, "ivy.Array.dropout1d"]], "dropout1d() (ivy.container method)": [[332, "ivy.Container.dropout1d"]], "dropout2d() (ivy.array method)": [[333, "ivy.Array.dropout2d"]], "dropout2d() (ivy.container method)": [[333, "ivy.Container.dropout2d"]], "dropout3d() (ivy.array method)": [[334, "ivy.Array.dropout3d"]], "dropout3d() (ivy.container method)": [[334, "ivy.Container.dropout3d"]], "embedding() (ivy.array method)": [[335, "ivy.Array.embedding"]], "embedding() (ivy.container method)": [[335, "ivy.Container.embedding"]], "fft() (ivy.array method)": [[336, "ivy.Array.fft"]], "fft() (ivy.container method)": [[336, "ivy.Container.fft"]], "fft2() (ivy.array method)": [[337, "ivy.Array.fft2"]], "idct() (ivy.array method)": [[340, "ivy.Array.idct"]], "idct() (ivy.container method)": [[340, "ivy.Container.idct"]], "ifft() (ivy.array method)": [[341, "ivy.Array.ifft"]], "ifft() (ivy.container method)": [[341, "ivy.Container.ifft"]], "ifftn() (ivy.array method)": [[342, "ivy.Array.ifftn"]], "ifftn() (ivy.container method)": [[342, "ivy.Container.ifftn"]], "interpolate() (ivy.array method)": [[344, "ivy.Array.interpolate"]], "interpolate() (ivy.container method)": [[344, "ivy.Container.interpolate"]], "max_pool1d() (ivy.array method)": [[345, "ivy.Array.max_pool1d"]], "max_pool1d() (ivy.container method)": [[345, "ivy.Container.max_pool1d"]], "max_pool2d() (ivy.array method)": [[346, "ivy.Array.max_pool2d"]], "max_pool2d() (ivy.container method)": [[346, "ivy.Container.max_pool2d"]], "max_pool3d() (ivy.array method)": [[347, "ivy.Array.max_pool3d"]], "max_pool3d() (ivy.container method)": [[347, "ivy.Container.max_pool3d"]], "reduce_window() (ivy.array method)": [[351, "ivy.Array.reduce_window"]], "reduce_window() (ivy.container method)": [[351, "ivy.Container.reduce_window"]], "rfftn() (ivy.array method)": [[352, "ivy.Array.rfftn"]], "rfftn() (ivy.container method)": [[352, "ivy.Container.rfftn"]], "adjoint() (ivy.array method)": [[353, "ivy.Array.adjoint"]], "adjoint() (ivy.container method)": [[353, "ivy.Container.adjoint"]], "cond() (ivy.array method)": [[354, "ivy.Array.cond"]], "cond() (ivy.container method)": [[354, "ivy.Container.cond"]], "diagflat() (ivy.array method)": [[355, "ivy.Array.diagflat"]], "diagflat() (ivy.container method)": [[355, "ivy.Container.diagflat"]], "eig() (ivy.array method)": [[357, "ivy.Array.eig"], [577, "ivy.Array.eig"]], "eig() (ivy.container method)": [[357, "ivy.Container.eig"], [577, "ivy.Container.eig"]], "eigh_tridiagonal() (ivy.array method)": [[358, "ivy.Array.eigh_tridiagonal"]], "eigh_tridiagonal() (ivy.container method)": [[358, "ivy.Container.eigh_tridiagonal"]], "eigvals() (ivy.array method)": [[359, "ivy.Array.eigvals"]], "eigvals() (ivy.container method)": [[359, "ivy.Container.eigvals"]], "initialize_tucker() (ivy.array method)": [[360, "ivy.Array.initialize_tucker"]], "initialize_tucker() (ivy.container method)": [[360, "ivy.Container.initialize_tucker"]], "kron() (ivy.array method)": [[362, "ivy.Array.kron"]], "kron() (ivy.container method)": [[362, "ivy.Container.kron"]], "make_svd_non_negative() (ivy.array method)": [[364, "ivy.Array.make_svd_non_negative"]], "make_svd_non_negative() (ivy.container method)": [[364, "ivy.Container.make_svd_non_negative"]], "matrix_exp() (ivy.array method)": [[365, "ivy.Array.matrix_exp"]], "matrix_exp() (ivy.container method)": [[365, "ivy.Container.matrix_exp"]], "mode_dot() (ivy.array method)": [[366, "ivy.Array.mode_dot"]], "mode_dot() (ivy.container method)": [[366, "ivy.Container.mode_dot"]], "multi_dot() (ivy.array method)": [[367, "ivy.Array.multi_dot"]], "multi_dot() (ivy.container method)": [[367, "ivy.Container.multi_dot"]], "multi_mode_dot() (ivy.array method)": [[368, "ivy.Array.multi_mode_dot"]], "multi_mode_dot() (ivy.container method)": [[368, "ivy.Container.multi_mode_dot"]], "partial_tucker() (ivy.array method)": [[369, "ivy.Array.partial_tucker"]], "partial_tucker() (ivy.container method)": [[369, "ivy.Container.partial_tucker"]], "svd_flip() (ivy.array method)": [[370, "ivy.Array.svd_flip"]], "svd_flip() (ivy.container method)": [[370, "ivy.Container.svd_flip"]], "truncated_svd() (ivy.array method)": [[371, "ivy.Array.truncated_svd"]], "truncated_svd() (ivy.container method)": [[371, "ivy.Container.truncated_svd"]], "tucker() (ivy.array method)": [[372, "ivy.Array.tucker"]], "tucker() (ivy.container method)": [[372, "ivy.Container.tucker"]], "huber_loss() (ivy.array method)": [[373, "ivy.Array.huber_loss"]], "huber_loss() (ivy.container method)": [[373, "ivy.Container.huber_loss"]], "l1_loss() (ivy.array method)": [[374, "ivy.Array.l1_loss"]], "l1_loss() (ivy.container method)": [[374, "ivy.Container.l1_loss"]], "smooth_l1_loss() (ivy.array method)": [[376, "ivy.Array.smooth_l1_loss"]], "smooth_l1_loss() (ivy.container method)": [[376, "ivy.Container.smooth_l1_loss"]], "soft_margin_loss() (ivy.array method)": [[377, "ivy.Array.soft_margin_loss"]], "soft_margin_loss() (ivy.container method)": [[377, "ivy.Container.soft_margin_loss"]], "as_strided() (ivy.array method)": [[378, "ivy.Array.as_strided"]], "as_strided() (ivy.container method)": [[378, "ivy.Container.as_strided"]], "associative_scan() (ivy.array method)": [[379, "ivy.Array.associative_scan"]], "associative_scan() (ivy.container method)": [[379, "ivy.Container.associative_scan"]], "atleast_1d() (ivy.array method)": [[380, "ivy.Array.atleast_1d"]], "atleast_1d() (ivy.container method)": [[380, "ivy.Container.atleast_1d"]], "atleast_2d() (ivy.array method)": [[381, "ivy.Array.atleast_2d"]], "atleast_2d() (ivy.container method)": [[381, "ivy.Container.atleast_2d"]], "atleast_3d() (ivy.array method)": [[382, "ivy.Array.atleast_3d"]], "atleast_3d() (ivy.container method)": [[382, "ivy.Container.atleast_3d"]], "broadcast_shapes() (ivy.container method)": [[383, "ivy.Container.broadcast_shapes"]], "concat_from_sequence() (ivy.array method)": [[385, "ivy.Array.concat_from_sequence"]], "concat_from_sequence() (ivy.container method)": [[385, "ivy.Container.concat_from_sequence"]], "dsplit() (ivy.array method)": [[386, "ivy.Array.dsplit"]], "dsplit() (ivy.container method)": [[386, "ivy.Container.dsplit"]], "dstack() (ivy.array method)": [[387, "ivy.Array.dstack"]], "dstack() (ivy.container method)": [[387, "ivy.Container.dstack"]], "expand() (ivy.array method)": [[388, "ivy.Array.expand"]], "expand() (ivy.container method)": [[388, "ivy.Container.expand"]], "fill_diagonal() (ivy.array method)": [[389, "ivy.Array.fill_diagonal"]], "fill_diagonal() (ivy.container method)": [[389, "ivy.Container.fill_diagonal"]], "flatten() (ivy.array method)": [[390, "ivy.Array.flatten"]], "flatten() (ivy.container method)": [[390, "ivy.Container.flatten"]], "fliplr() (ivy.array method)": [[391, "ivy.Array.fliplr"]], "fliplr() (ivy.container method)": [[391, "ivy.Container.fliplr"]], "flipud() (ivy.array method)": [[392, "ivy.Array.flipud"]], "flipud() (ivy.container method)": [[392, "ivy.Container.flipud"]], "fold() (ivy.array method)": [[393, "ivy.Array.fold"]], "fold() (ivy.container method)": [[393, "ivy.Container.fold"]], "heaviside() (ivy.array method)": [[394, "ivy.Array.heaviside"]], "heaviside() (ivy.container method)": [[394, "ivy.Container.heaviside"]], "hsplit() (ivy.array method)": [[395, "ivy.Array.hsplit"]], "hsplit() (ivy.container method)": [[395, "ivy.Container.hsplit"]], "hstack() (ivy.array method)": [[396, "ivy.Array.hstack"]], "hstack() (ivy.container method)": [[396, "ivy.Container.hstack"]], "i0() (ivy.array method)": [[397, "ivy.Array.i0"]], "i0() (ivy.container method)": [[397, "ivy.Container.i0"]], "matricize() (ivy.array method)": [[398, "ivy.Array.matricize"]], "matricize() (ivy.container method)": [[398, "ivy.Container.matricize"]], "moveaxis() (ivy.array method)": [[399, "ivy.Array.moveaxis"]], "moveaxis() (ivy.container method)": [[399, "ivy.Container.moveaxis"]], "pad() (ivy.array method)": [[400, "ivy.Array.pad"]], "pad() (ivy.container method)": [[400, "ivy.Container.pad"]], "partial_fold() (ivy.array method)": [[401, "ivy.Array.partial_fold"]], "partial_fold() (ivy.container method)": [[401, "ivy.Container.partial_fold"]], "partial_tensor_to_vec() (ivy.array method)": [[402, "ivy.Array.partial_tensor_to_vec"]], "partial_tensor_to_vec() (ivy.container method)": [[402, "ivy.Container.partial_tensor_to_vec"]], "partial_unfold() (ivy.array method)": [[403, "ivy.Array.partial_unfold"]], "partial_unfold() (ivy.container method)": [[403, "ivy.Container.partial_unfold"]], "partial_vec_to_tensor() (ivy.array method)": [[404, "ivy.Array.partial_vec_to_tensor"]], "partial_vec_to_tensor() (ivy.container method)": [[404, "ivy.Container.partial_vec_to_tensor"]], "rot90() (ivy.array method)": [[406, "ivy.Array.rot90"]], "rot90() (ivy.container method)": [[406, "ivy.Container.rot90"]], "soft_thresholding() (ivy.array method)": [[407, "ivy.Array.soft_thresholding"]], "soft_thresholding() (ivy.container method)": [[407, "ivy.Container.soft_thresholding"]], "take_along_axis() (ivy.array method)": [[408, "ivy.Array.take_along_axis"]], "take_along_axis() (ivy.container method)": [[408, "ivy.Container.take_along_axis"]], "top_k() (ivy.array method)": [[409, "ivy.Array.top_k"]], "top_k() (ivy.container method)": [[409, "ivy.Container.top_k"]], "unfold() (ivy.array method)": [[410, "ivy.Array.unfold"]], "unfold() (ivy.container method)": [[410, "ivy.Container.unfold"]], "unique_consecutive() (ivy.array method)": [[411, "ivy.Array.unique_consecutive"]], "unique_consecutive() (ivy.container method)": [[411, "ivy.Container.unique_consecutive"]], "vsplit() (ivy.array method)": [[412, "ivy.Array.vsplit"]], "vsplit() (ivy.container method)": [[412, "ivy.Container.vsplit"]], "vstack() (ivy.array method)": [[413, "ivy.Array.vstack"]], "vstack() (ivy.container method)": [[413, "ivy.Container.vstack"]], "batch_norm() (ivy.array method)": [[414, "ivy.Array.batch_norm"]], "batch_norm() (ivy.container method)": [[414, "ivy.Container.batch_norm"]], "group_norm() (ivy.array method)": [[415, "ivy.Array.group_norm"]], "group_norm() (ivy.container method)": [[415, "ivy.Container.group_norm"]], "instance_norm() (ivy.array method)": [[416, "ivy.Array.instance_norm"]], "instance_norm() (ivy.container method)": [[416, "ivy.Container.instance_norm"]], "l1_normalize() (ivy.array method)": [[417, "ivy.Array.l1_normalize"]], "l1_normalize() (ivy.container method)": [[417, "ivy.Container.l1_normalize"]], "l2_normalize() (ivy.array method)": [[418, "ivy.Array.l2_normalize"]], "l2_normalize() (ivy.container method)": [[418, "ivy.Container.l2_normalize"]], "lp_normalize() (ivy.array method)": [[419, "ivy.Array.lp_normalize"]], "lp_normalize() (ivy.container method)": [[419, "ivy.Container.lp_normalize"]], "bernoulli() (ivy.array method)": [[420, "ivy.Array.bernoulli"]], "bernoulli() (ivy.container method)": [[420, "ivy.Container.bernoulli"]], "beta() (ivy.array method)": [[421, "ivy.Array.beta"]], "beta() (ivy.container method)": [[421, "ivy.Container.beta"]], "dirichlet() (ivy.array method)": [[422, "ivy.Array.dirichlet"]], "dirichlet() (ivy.container method)": [[422, "ivy.Container.dirichlet"]], "gamma() (ivy.array method)": [[423, "ivy.Array.gamma"]], "gamma() (ivy.container method)": [[423, "ivy.Container.gamma"]], "poisson() (ivy.array method)": [[424, "ivy.Array.poisson"]], "poisson() (ivy.container method)": [[424, "ivy.Container.poisson"]], "unravel_index() (ivy.array method)": [[425, "ivy.Array.unravel_index"]], "unravel_index() (ivy.container method)": [[425, "ivy.Container.unravel_index"]], "invert_permutation() (ivy.container method)": [[426, "ivy.Container.invert_permutation"]], "lexsort() (ivy.array method)": [[427, "ivy.Array.lexsort"]], "lexsort() (ivy.container method)": [[427, "ivy.Container.lexsort"]], "bincount() (ivy.array method)": [[432, "ivy.Array.bincount"]], "bincount() (ivy.container method)": [[432, "ivy.Container.bincount"]], "corrcoef() (ivy.array method)": [[433, "ivy.Array.corrcoef"]], "corrcoef() (ivy.container method)": [[433, "ivy.Container.corrcoef"]], "cov() (ivy.array method)": [[434, "ivy.Array.cov"]], "cov() (ivy.container method)": [[434, "ivy.Container.cov"]], "cummax() (ivy.array method)": [[435, "ivy.Array.cummax"]], "cummax() (ivy.container method)": [[435, "ivy.Container.cummax"]], "cummin() (ivy.array method)": [[436, "ivy.Array.cummin"]], "cummin() (ivy.container method)": [[436, "ivy.Container.cummin"]], "histogram() (ivy.array method)": [[437, "ivy.Array.histogram"]], "histogram() (ivy.container method)": [[437, "ivy.Container.histogram"]], "igamma() (ivy.array method)": [[438, "ivy.Array.igamma"]], "igamma() (ivy.container method)": [[438, "ivy.Container.igamma"]], "median() (ivy.array method)": [[439, "ivy.Array.median"]], "median() (ivy.container method)": [[439, "ivy.Container.median"]], "nanmean() (ivy.array method)": [[440, "ivy.Array.nanmean"]], "nanmean() (ivy.container method)": [[440, "ivy.Container.nanmean"]], "nanmedian() (ivy.array method)": [[441, "ivy.Array.nanmedian"]], "nanmedian() (ivy.container method)": [[441, "ivy.Container.nanmedian"]], "quantile() (ivy.array method)": [[442, "ivy.Array.quantile"]], "quantile() (ivy.container method)": [[442, "ivy.Container.quantile"]], "all_equal() (in module ivy)": [[443, "ivy.all_equal"], [542, "ivy.all_equal"]], "all_equal() (ivy.array method)": [[443, "ivy.Array.all_equal"]], "all_equal() (ivy.container method)": [[443, "ivy.Container.all_equal"]], "arg_info() (in module ivy)": [[444, "ivy.arg_info"], [542, "ivy.arg_info"]], "arg_names() (in module ivy)": [[445, "ivy.arg_names"], [542, "ivy.arg_names"]], "array_equal() (in module ivy)": [[446, "ivy.array_equal"], [542, "ivy.array_equal"]], "array_equal() (ivy.array method)": [[446, "ivy.Array.array_equal"]], "array_equal() (ivy.container method)": [[446, "ivy.Container.array_equal"]], "assert_supports_inplace() (in module ivy)": [[447, "ivy.assert_supports_inplace"], [542, "ivy.assert_supports_inplace"]], "assert_supports_inplace() (ivy.array method)": [[447, "ivy.Array.assert_supports_inplace"]], "assert_supports_inplace() (ivy.container method)": [[447, "ivy.Container.assert_supports_inplace"]], "cache_fn() (in module ivy)": [[448, "ivy.cache_fn"], [542, "ivy.cache_fn"]], "clip_matrix_norm() (in module ivy)": [[449, "ivy.clip_matrix_norm"], [542, "ivy.clip_matrix_norm"]], "clip_matrix_norm() (ivy.array method)": [[449, "ivy.Array.clip_matrix_norm"]], "clip_matrix_norm() (ivy.container method)": [[449, "ivy.Container.clip_matrix_norm"]], "clip_vector_norm() (in module ivy)": [[450, "ivy.clip_vector_norm"], [542, "ivy.clip_vector_norm"]], "clip_vector_norm() (ivy.array method)": [[450, "ivy.Array.clip_vector_norm"]], "clip_vector_norm() (ivy.container method)": [[450, "ivy.Container.clip_vector_norm"]], "container_types() (in module ivy)": [[451, "ivy.container_types"], [542, "ivy.container_types"]], "current_backend_str() (in module ivy)": [[452, "ivy.current_backend_str"], [542, "ivy.current_backend_str"]], "default() (in module ivy)": [[453, "ivy.default"], [542, "ivy.default"]], "default() (ivy.array method)": [[453, "ivy.Array.default"]], "einops_rearrange() (in module ivy)": [[454, "ivy.einops_rearrange"], [542, "ivy.einops_rearrange"]], "einops_rearrange() (ivy.array method)": [[454, "ivy.Array.einops_rearrange"]], "einops_rearrange() (ivy.container method)": [[454, "ivy.Container.einops_rearrange"]], "einops_reduce() (in module ivy)": [[455, "ivy.einops_reduce"], [542, "ivy.einops_reduce"]], "einops_reduce() (ivy.array method)": [[455, "ivy.Array.einops_reduce"]], "einops_reduce() (ivy.container method)": [[455, "ivy.Container.einops_reduce"]], "einops_repeat() (in module ivy)": [[456, "ivy.einops_repeat"], [542, "ivy.einops_repeat"]], "einops_repeat() (ivy.array method)": [[456, "ivy.Array.einops_repeat"]], "einops_repeat() (ivy.container method)": [[456, "ivy.Container.einops_repeat"]], "exists() (in module ivy)": [[457, "ivy.exists"], [542, "ivy.exists"]], "exists() (ivy.array method)": [[457, "ivy.Array.exists"]], "fourier_encode() (in module ivy)": [[458, "ivy.fourier_encode"], [542, "ivy.fourier_encode"]], "fourier_encode() (ivy.array method)": [[458, "ivy.Array.fourier_encode"]], "fourier_encode() (ivy.container method)": [[458, "ivy.Container.fourier_encode"]], "function_supported_devices_and_dtypes() (in module ivy)": [[459, "ivy.function_supported_devices_and_dtypes"], [542, "ivy.function_supported_devices_and_dtypes"]], "function_unsupported_devices_and_dtypes() (in module ivy)": [[460, "ivy.function_unsupported_devices_and_dtypes"], [542, "ivy.function_unsupported_devices_and_dtypes"]], "gather() (in module ivy)": [[461, "ivy.gather"], [542, "ivy.gather"]], "gather() (ivy.array method)": [[461, "ivy.Array.gather"]], "gather() (ivy.container method)": [[461, "ivy.Container.gather"]], "gather_nd() (in module ivy)": [[462, "ivy.gather_nd"], [542, "ivy.gather_nd"]], "gather_nd() (ivy.array method)": [[462, "ivy.Array.gather_nd"]], "gather_nd() (ivy.container method)": [[462, "ivy.Container.gather_nd"]], "get_all_arrays_in_memory() (in module ivy)": [[463, "ivy.get_all_arrays_in_memory"], [542, "ivy.get_all_arrays_in_memory"]], "get_item() (in module ivy)": [[464, "ivy.get_item"], [542, "ivy.get_item"]], "get_num_dims() (in module ivy)": [[465, "ivy.get_num_dims"], [542, "ivy.get_num_dims"]], "get_num_dims() (ivy.array method)": [[465, "ivy.Array.get_num_dims"]], "get_num_dims() (ivy.container method)": [[465, "ivy.Container.get_num_dims"]], "get_referrers_recursive() (in module ivy)": [[466, "ivy.get_referrers_recursive"], [542, "ivy.get_referrers_recursive"]], "has_nans() (in module ivy)": [[467, "ivy.has_nans"], [542, "ivy.has_nans"]], "has_nans() (ivy.array method)": [[467, "ivy.Array.has_nans"]], "has_nans() (ivy.container method)": [[467, "ivy.Container.has_nans"]], "inplace_arrays_supported() (in module ivy)": [[468, "ivy.inplace_arrays_supported"], [542, "ivy.inplace_arrays_supported"]], "inplace_decrement() (in module ivy)": [[469, "ivy.inplace_decrement"], [542, "ivy.inplace_decrement"]], "inplace_decrement() (ivy.array method)": [[469, "ivy.Array.inplace_decrement"]], "inplace_decrement() (ivy.container method)": [[469, "ivy.Container.inplace_decrement"]], "inplace_increment() (in module ivy)": [[470, "ivy.inplace_increment"], [542, "ivy.inplace_increment"]], "inplace_increment() (ivy.array method)": [[470, "ivy.Array.inplace_increment"]], "inplace_increment() (ivy.container method)": [[470, "ivy.Container.inplace_increment"]], "inplace_update() (in module ivy)": [[471, "ivy.inplace_update"], [542, "ivy.inplace_update"]], "inplace_update() (ivy.array method)": [[471, "ivy.Array.inplace_update"]], "inplace_update() (ivy.container method)": [[471, "ivy.Container.inplace_update"]], "inplace_variables_supported() (in module ivy)": [[472, "ivy.inplace_variables_supported"], [542, "ivy.inplace_variables_supported"]], "is_array() (in module ivy)": [[473, "ivy.is_array"], [542, "ivy.is_array"]], "is_array() (ivy.array method)": [[473, "ivy.Array.is_array"]], "is_array() (ivy.container method)": [[473, "ivy.Container.is_array"]], "is_ivy_array() (in module ivy)": [[474, "ivy.is_ivy_array"], [542, "ivy.is_ivy_array"]], "is_ivy_array() (ivy.array method)": [[474, "ivy.Array.is_ivy_array"]], "is_ivy_array() (ivy.container method)": [[474, "ivy.Container.is_ivy_array"]], "is_ivy_container() (in module ivy)": [[475, "ivy.is_ivy_container"], [542, "ivy.is_ivy_container"]], "is_ivy_container() (ivy.array method)": [[475, "ivy.Array.is_ivy_container"]], "is_ivy_nested_array() (in module ivy)": [[476, "ivy.is_ivy_nested_array"], [542, "ivy.is_ivy_nested_array"]], "is_native_array() (in module ivy)": [[477, "ivy.is_native_array"], [542, "ivy.is_native_array"]], "is_native_array() (ivy.array method)": [[477, "ivy.Array.is_native_array"]], "is_native_array() (ivy.container method)": [[477, "ivy.Container.is_native_array"]], "isin() (in module ivy)": [[478, "ivy.isin"], [542, "ivy.isin"]], "isin() (ivy.array method)": [[478, "ivy.Array.isin"]], "isin() (ivy.container method)": [[478, "ivy.Container.isin"]], "isscalar() (in module ivy)": [[479, "ivy.isscalar"], [542, "ivy.isscalar"]], "itemsize() (in module ivy)": [[480, "ivy.itemsize"], [542, "ivy.itemsize"]], "itemsize() (ivy.array method)": [[480, "ivy.Array.itemsize"]], "itemsize() (ivy.container method)": [[480, "ivy.Container.itemsize"]], "match_kwargs() (in module ivy)": [[481, "ivy.match_kwargs"], [542, "ivy.match_kwargs"]], "multiprocessing() (in module ivy)": [[482, "ivy.multiprocessing"], [542, "ivy.multiprocessing"]], "num_arrays_in_memory() (in module ivy)": [[483, "ivy.num_arrays_in_memory"], [542, "ivy.num_arrays_in_memory"]], "print_all_arrays_in_memory() (in module ivy)": [[484, "ivy.print_all_arrays_in_memory"], [542, "ivy.print_all_arrays_in_memory"]], "scatter_flat() (in module ivy)": [[485, "ivy.scatter_flat"], [542, "ivy.scatter_flat"]], "scatter_flat() (ivy.array method)": [[485, "ivy.Array.scatter_flat"]], "scatter_flat() (ivy.container method)": [[485, "ivy.Container.scatter_flat"]], "scatter_nd() (in module ivy)": [[486, "ivy.scatter_nd"], [542, "ivy.scatter_nd"]], "scatter_nd() (ivy.array method)": [[486, "ivy.Array.scatter_nd"]], "scatter_nd() (ivy.container method)": [[486, "ivy.Container.scatter_nd"]], "set_array_mode() (in module ivy)": [[487, "ivy.set_array_mode"], [542, "ivy.set_array_mode"]], "set_exception_trace_mode() (in module ivy)": [[488, "ivy.set_exception_trace_mode"], [542, "ivy.set_exception_trace_mode"]], "set_inplace_mode() (in module ivy)": [[489, "ivy.set_inplace_mode"], [542, "ivy.set_inplace_mode"]], "set_item() (in module ivy)": [[490, "ivy.set_item"], [542, "ivy.set_item"]], "set_min_base() (in module ivy)": [[491, "ivy.set_min_base"], [542, "ivy.set_min_base"]], "set_min_denominator() (in module ivy)": [[492, "ivy.set_min_denominator"], [542, "ivy.set_min_denominator"]], "set_nestable_mode() (in module ivy)": [[493, "ivy.set_nestable_mode"], [542, "ivy.set_nestable_mode"]], "set_precise_mode() (in module ivy)": [[494, "ivy.set_precise_mode"], [542, "ivy.set_precise_mode"]], "set_queue_timeout() (in module ivy)": [[495, "ivy.set_queue_timeout"], [542, "ivy.set_queue_timeout"]], "set_shape_array_mode() (in module ivy)": [[496, "ivy.set_shape_array_mode"], [542, "ivy.set_shape_array_mode"]], "set_show_func_wrapper_trace_mode() (in module ivy)": [[497, "ivy.set_show_func_wrapper_trace_mode"], [542, "ivy.set_show_func_wrapper_trace_mode"]], "set_tmp_dir() (in module ivy)": [[498, "ivy.set_tmp_dir"], [542, "ivy.set_tmp_dir"]], "shape() (in module ivy)": [[499, "ivy.shape"], [542, "ivy.shape"]], "shape() (ivy.array method)": [[499, "ivy.Array.shape"]], "stable_divide() (in module ivy)": [[500, "ivy.stable_divide"], [542, "ivy.stable_divide"]], "stable_divide() (ivy.array method)": [[500, "ivy.Array.stable_divide"]], "stable_divide() (ivy.container method)": [[500, "ivy.Container.stable_divide"]], "stable_pow() (in module ivy)": [[501, "ivy.stable_pow"], [542, "ivy.stable_pow"]], "stable_pow() (ivy.array method)": [[501, "ivy.Array.stable_pow"]], "stable_pow() (ivy.container method)": [[501, "ivy.Container.stable_pow"]], "strides() (in module ivy)": [[502, "ivy.strides"], [542, "ivy.strides"]], "strides() (ivy.array method)": [[502, "ivy.Array.strides"]], "strides() (ivy.container method)": [[502, "ivy.Container.strides"]], "supports_inplace_updates() (in module ivy)": [[503, "ivy.supports_inplace_updates"], [542, "ivy.supports_inplace_updates"]], "supports_inplace_updates() (ivy.array method)": [[503, "ivy.Array.supports_inplace_updates"]], "supports_inplace_updates() (ivy.container method)": [[503, "ivy.Container.supports_inplace_updates"]], "to_ivy_shape() (in module ivy)": [[504, "ivy.to_ivy_shape"], [542, "ivy.to_ivy_shape"]], "to_list() (in module ivy)": [[505, "ivy.to_list"], [542, "ivy.to_list"]], "to_list() (ivy.array method)": [[505, "ivy.Array.to_list"]], "to_list() (ivy.container method)": [[505, "ivy.Container.to_list"]], "to_native_shape() (in module ivy)": [[506, "ivy.to_native_shape"], [542, "ivy.to_native_shape"]], "to_numpy() (in module ivy)": [[507, "ivy.to_numpy"], [542, "ivy.to_numpy"]], "to_numpy() (ivy.array method)": [[507, "ivy.Array.to_numpy"]], "to_numpy() (ivy.container method)": [[507, "ivy.Container.to_numpy"]], "to_scalar() (in module ivy)": [[508, "ivy.to_scalar"], [542, "ivy.to_scalar"]], "to_scalar() (ivy.array method)": [[508, "ivy.Array.to_scalar"]], "to_scalar() (ivy.container method)": [[508, "ivy.Container.to_scalar"]], "try_else_none() (in module ivy)": [[509, "ivy.try_else_none"], [542, "ivy.try_else_none"]], "unset_array_mode() (in module ivy)": [[510, "ivy.unset_array_mode"], [542, "ivy.unset_array_mode"]], "unset_exception_trace_mode() (in module ivy)": [[511, "ivy.unset_exception_trace_mode"], [542, "ivy.unset_exception_trace_mode"]], "unset_inplace_mode() (in module ivy)": [[512, "ivy.unset_inplace_mode"], [542, "ivy.unset_inplace_mode"]], "unset_min_base() (in module ivy)": [[513, "ivy.unset_min_base"], [542, "ivy.unset_min_base"]], "unset_min_denominator() (in module ivy)": [[514, "ivy.unset_min_denominator"], [542, "ivy.unset_min_denominator"]], "unset_nestable_mode() (in module ivy)": [[515, "ivy.unset_nestable_mode"], [542, "ivy.unset_nestable_mode"]], "unset_precise_mode() (in module ivy)": [[516, "ivy.unset_precise_mode"], [542, "ivy.unset_precise_mode"]], "unset_queue_timeout() (in module ivy)": [[517, "ivy.unset_queue_timeout"], [542, "ivy.unset_queue_timeout"]], "unset_shape_array_mode() (in module ivy)": [[518, "ivy.unset_shape_array_mode"], [542, "ivy.unset_shape_array_mode"]], "unset_show_func_wrapper_trace_mode() (in module ivy)": [[519, "ivy.unset_show_func_wrapper_trace_mode"], [542, "ivy.unset_show_func_wrapper_trace_mode"]], "unset_tmp_dir() (in module ivy)": [[520, "ivy.unset_tmp_dir"], [542, "ivy.unset_tmp_dir"]], "value_is_nan() (in module ivy)": [[521, "ivy.value_is_nan"], [542, "ivy.value_is_nan"]], "value_is_nan() (ivy.array method)": [[521, "ivy.Array.value_is_nan"]], "value_is_nan() (ivy.container method)": [[521, "ivy.Container.value_is_nan"]], "vmap() (in module ivy)": [[522, "ivy.vmap"], [542, "ivy.vmap"]], "adam_step() (in module ivy)": [[523, "ivy.adam_step"], [543, "ivy.adam_step"]], "adam_step() (ivy.array method)": [[523, "ivy.Array.adam_step"]], "adam_step() (ivy.container method)": [[523, "ivy.Container.adam_step"]], "adam_update() (in module ivy)": [[524, "ivy.adam_update"], [543, "ivy.adam_update"]], "adam_update() (ivy.array method)": [[524, "ivy.Array.adam_update"]], "adam_update() (ivy.container method)": [[524, "ivy.Container.adam_update"]], "execute_with_gradients() (in module ivy)": [[525, "ivy.execute_with_gradients"], [543, "ivy.execute_with_gradients"]], "grad() (in module ivy)": [[526, "ivy.grad"], [543, "ivy.grad"]], "gradient_descent_update() (in module ivy)": [[527, "ivy.gradient_descent_update"], [543, "ivy.gradient_descent_update"]], "gradient_descent_update() (ivy.array method)": [[527, "ivy.Array.gradient_descent_update"]], "gradient_descent_update() (ivy.container method)": [[527, "ivy.Container.gradient_descent_update"]], "jac() (in module ivy)": [[528, "ivy.jac"], [543, "ivy.jac"]], "lamb_update() (in module ivy)": [[529, "ivy.lamb_update"], [543, "ivy.lamb_update"]], "lamb_update() (ivy.array method)": [[529, "ivy.Array.lamb_update"]], "lamb_update() (ivy.container method)": [[529, "ivy.Container.lamb_update"]], "lars_update() (in module ivy)": [[530, "ivy.lars_update"], [543, "ivy.lars_update"]], "lars_update() (ivy.array method)": [[530, "ivy.Array.lars_update"]], "lars_update() (ivy.container method)": [[530, "ivy.Container.lars_update"]], "optimizer_update() (in module ivy)": [[531, "ivy.optimizer_update"], [543, "ivy.optimizer_update"]], "optimizer_update() (ivy.array method)": [[531, "ivy.Array.optimizer_update"]], "optimizer_update() (ivy.container method)": [[531, "ivy.Container.optimizer_update"]], "stop_gradient() (in module ivy)": [[532, "ivy.stop_gradient"], [543, "ivy.stop_gradient"]], "stop_gradient() (ivy.array method)": [[532, "ivy.Array.stop_gradient"]], "stop_gradient() (ivy.container method)": [[532, "ivy.Container.stop_gradient"]], "value_and_grad() (in module ivy)": [[533, "ivy.value_and_grad"], [543, "ivy.value_and_grad"]], "ivy.functional.ivy.activations": [[534, "module-ivy.functional.ivy.activations"]], "e (in module ivy)": [[535, "ivy.e"]], "inf (in module ivy)": [[535, "ivy.inf"]], "ivy.functional.ivy.constants": [[535, "module-ivy.functional.ivy.constants"]], "nan (in module ivy)": [[535, "ivy.nan"]], "newaxis (in module ivy)": [[535, "ivy.newaxis"]], "pi (in module ivy)": [[535, "ivy.pi"]], "ivy.functional.ivy.control_flow_ops": [[536, "module-ivy.functional.ivy.control_flow_ops"]], "nestedsequence (class in ivy)": [[537, "ivy.NestedSequence"]], "ivy.functional.ivy.creation": [[537, "module-ivy.functional.ivy.creation"]], "defaultcomplexdtype (class in ivy)": [[538, "ivy.DefaultComplexDtype"]], "defaultdtype (class in ivy)": [[538, "ivy.DefaultDtype"]], "defaultfloatdtype (class in ivy)": [[538, "ivy.DefaultFloatDtype"]], "defaultintdtype (class in ivy)": [[538, "ivy.DefaultIntDtype"]], "defaultuintdtype (class in ivy)": [[538, "ivy.DefaultUintDtype"]], "ivy.functional.ivy.data_type": [[538, "module-ivy.functional.ivy.data_type"]], "defaultdevice (class in ivy)": [[539, "ivy.DefaultDevice"]], "profiler (class in ivy)": [[539, "ivy.Profiler"]], "ivy.functional.ivy.device": [[539, "module-ivy.functional.ivy.device"]], "ivy.functional.ivy.elementwise": [[540, "module-ivy.functional.ivy.elementwise"]], "ivy.functional.ivy.experimental": [[541, "module-ivy.functional.ivy.experimental"]], "arraymode (class in ivy)": [[542, "ivy.ArrayMode"]], "precisemode (class in ivy)": [[542, "ivy.PreciseMode"]], "ivy.functional.ivy.general": [[542, "module-ivy.functional.ivy.general"]], "ivy.functional.ivy.gradients": [[543, "module-ivy.functional.ivy.gradients"]], "conv() (in module ivy)": [[544, "ivy.conv"], [557, "ivy.conv"]], "conv1d() (in module ivy)": [[544, "ivy.conv1d"], [558, "ivy.conv1d"]], "conv1d_transpose() (in module ivy)": [[544, "ivy.conv1d_transpose"], [559, "ivy.conv1d_transpose"]], "conv2d() (in module ivy)": [[544, "ivy.conv2d"], [560, "ivy.conv2d"]], "conv2d_transpose() (in module ivy)": [[544, "ivy.conv2d_transpose"], [561, "ivy.conv2d_transpose"]], "conv3d() (in module ivy)": [[544, "ivy.conv3d"], [562, "ivy.conv3d"]], "conv3d_transpose() (in module ivy)": [[544, "ivy.conv3d_transpose"], [563, "ivy.conv3d_transpose"]], "conv_general_dilated() (in module ivy)": [[544, "ivy.conv_general_dilated"], [564, "ivy.conv_general_dilated"]], "conv_general_transpose() (in module ivy)": [[544, "ivy.conv_general_transpose"], [565, "ivy.conv_general_transpose"]], "depthwise_conv2d() (in module ivy)": [[544, "ivy.depthwise_conv2d"], [566, "ivy.depthwise_conv2d"]], "dropout() (in module ivy)": [[544, "ivy.dropout"], [567, "ivy.dropout"]], "ivy.functional.ivy.layers": [[544, "module-ivy.functional.ivy.layers"]], "linear() (in module ivy)": [[544, "ivy.linear"], [568, "ivy.linear"]], "lstm_update() (in module ivy)": [[544, "ivy.lstm_update"], [569, "ivy.lstm_update"]], "multi_head_attention() (in module ivy)": [[544, "ivy.multi_head_attention"], [570, "ivy.multi_head_attention"]], "scaled_dot_product_attention() (in module ivy)": [[544, "ivy.scaled_dot_product_attention"], [571, "ivy.scaled_dot_product_attention"]], "cholesky() (in module ivy)": [[545, "ivy.cholesky"], [572, "ivy.cholesky"]], "cross() (in module ivy)": [[545, "ivy.cross"], [573, "ivy.cross"]], "det() (in module ivy)": [[545, "ivy.det"], [574, "ivy.det"]], "diag() (in module ivy)": [[545, "ivy.diag"], [575, "ivy.diag"]], "diagonal() (in module ivy)": [[545, "ivy.diagonal"], [576, "ivy.diagonal"]], "eigh() (in module ivy)": [[545, "ivy.eigh"], [578, "ivy.eigh"]], "eigvalsh() (in module ivy)": [[545, "ivy.eigvalsh"], [579, "ivy.eigvalsh"]], "inner() (in module ivy)": [[545, "ivy.inner"], [580, "ivy.inner"]], "inv() (in module ivy)": [[545, "ivy.inv"], [581, "ivy.inv"]], "ivy.functional.ivy.linear_algebra": [[545, "module-ivy.functional.ivy.linear_algebra"]], "lu_factor() (in module ivy)": [[545, "ivy.lu_factor"], [582, "ivy.lu_factor"]], "matmul() (in module ivy)": [[545, "ivy.matmul"], [583, "ivy.matmul"]], "matrix_norm() (in module ivy)": [[545, "ivy.matrix_norm"], [584, "ivy.matrix_norm"]], "matrix_power() (in module ivy)": [[545, "ivy.matrix_power"], [585, "ivy.matrix_power"]], "matrix_rank() (in module ivy)": [[545, "ivy.matrix_rank"], [586, "ivy.matrix_rank"]], "matrix_transpose() (in module ivy)": [[545, "ivy.matrix_transpose"], [587, "ivy.matrix_transpose"]], "outer() (in module ivy)": [[545, "ivy.outer"], [588, "ivy.outer"]], "pinv() (in module ivy)": [[545, "ivy.pinv"], [589, "ivy.pinv"]], "qr() (in module ivy)": [[545, "ivy.qr"], [590, "ivy.qr"]], "slogdet() (in module ivy)": [[545, "ivy.slogdet"], [591, "ivy.slogdet"]], "solve() (in module ivy)": [[545, "ivy.solve"], [592, "ivy.solve"]], "svd() (in module ivy)": [[545, "ivy.svd"], [593, "ivy.svd"]], "svdvals() (in module ivy)": [[545, "ivy.svdvals"], [594, "ivy.svdvals"]], "tensordot() (in module ivy)": [[545, "ivy.tensordot"], [595, "ivy.tensordot"]], "tensorsolve() (in module ivy)": [[545, "ivy.tensorsolve"], [596, "ivy.tensorsolve"]], "trace() (in module ivy)": [[545, "ivy.trace"], [597, "ivy.trace"]], "vander() (in module ivy)": [[545, "ivy.vander"], [598, "ivy.vander"]], "vecdot() (in module ivy)": [[545, "ivy.vecdot"], [599, "ivy.vecdot"]], "vector_norm() (in module ivy)": [[545, "ivy.vector_norm"], [600, "ivy.vector_norm"]], "vector_to_skew_symmetric_matrix() (in module ivy)": [[545, "ivy.vector_to_skew_symmetric_matrix"], [601, "ivy.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (in module ivy)": [[546, "ivy.binary_cross_entropy"], [602, "ivy.binary_cross_entropy"]], "cross_entropy() (in module ivy)": [[546, "ivy.cross_entropy"], [603, "ivy.cross_entropy"]], "ivy.functional.ivy.losses": [[546, "module-ivy.functional.ivy.losses"]], "sparse_cross_entropy() (in module ivy)": [[546, "ivy.sparse_cross_entropy"], [604, "ivy.sparse_cross_entropy"]], "clip() (in module ivy)": [[547, "ivy.clip"], [605, "ivy.clip"]], "concat() (in module ivy)": [[547, "ivy.concat"], [606, "ivy.concat"]], "constant_pad() (in module ivy)": [[547, "ivy.constant_pad"], [607, "ivy.constant_pad"]], "expand_dims() (in module ivy)": [[547, "ivy.expand_dims"], [608, "ivy.expand_dims"]], "flip() (in module ivy)": [[547, "ivy.flip"], [609, "ivy.flip"]], "ivy.functional.ivy.manipulation": [[547, "module-ivy.functional.ivy.manipulation"]], "permute_dims() (in module ivy)": [[547, "ivy.permute_dims"], [610, "ivy.permute_dims"]], "repeat() (in module ivy)": [[547, "ivy.repeat"], [611, "ivy.repeat"]], "reshape() (in module ivy)": [[547, "ivy.reshape"], [612, "ivy.reshape"]], "roll() (in module ivy)": [[547, "ivy.roll"], [613, "ivy.roll"]], "split() (in module ivy)": [[547, "ivy.split"], [614, "ivy.split"]], "squeeze() (in module ivy)": [[547, "ivy.squeeze"], [615, "ivy.squeeze"]], "stack() (in module ivy)": [[547, "ivy.stack"], [616, "ivy.stack"]], "swapaxes() (in module ivy)": [[547, "ivy.swapaxes"], [617, "ivy.swapaxes"]], "tile() (in module ivy)": [[547, "ivy.tile"], [618, "ivy.tile"]], "unstack() (in module ivy)": [[547, "ivy.unstack"], [619, "ivy.unstack"]], "zero_pad() (in module ivy)": [[547, "ivy.zero_pad"], [620, "ivy.zero_pad"]], "fomaml_step() (in module ivy)": [[548, "ivy.fomaml_step"], [621, "ivy.fomaml_step"]], "ivy.functional.ivy.meta": [[548, "module-ivy.functional.ivy.meta"]], "maml_step() (in module ivy)": [[548, "ivy.maml_step"], [622, "ivy.maml_step"]], "reptile_step() (in module ivy)": [[548, "ivy.reptile_step"], [623, "ivy.reptile_step"]], "all_nested_indices() (in module ivy)": [[549, "ivy.all_nested_indices"], [624, "ivy.all_nested_indices"]], "copy_nest() (in module ivy)": [[549, "ivy.copy_nest"], [625, "ivy.copy_nest"]], "duplicate_array_index_chains() (in module ivy)": [[549, "ivy.duplicate_array_index_chains"], [626, "ivy.duplicate_array_index_chains"]], "index_nest() (in module ivy)": [[549, "ivy.index_nest"], [627, "ivy.index_nest"]], "insert_into_nest_at_index() (in module ivy)": [[549, "ivy.insert_into_nest_at_index"], [628, "ivy.insert_into_nest_at_index"]], "insert_into_nest_at_indices() (in module ivy)": [[549, "ivy.insert_into_nest_at_indices"], [629, "ivy.insert_into_nest_at_indices"]], "ivy.functional.ivy.nest": [[549, "module-ivy.functional.ivy.nest"]], "map() (in module ivy)": [[549, "ivy.map"], [630, "ivy.map"]], "map_nest_at_index() (in module ivy)": [[549, "ivy.map_nest_at_index"], [631, "ivy.map_nest_at_index"]], "map_nest_at_indices() (in module ivy)": [[549, "ivy.map_nest_at_indices"], [632, "ivy.map_nest_at_indices"]], "multi_index_nest() (in module ivy)": [[549, "ivy.multi_index_nest"], [633, "ivy.multi_index_nest"]], "nested_any() (in module ivy)": [[549, "ivy.nested_any"], [634, "ivy.nested_any"]], "nested_argwhere() (in module ivy)": [[549, "ivy.nested_argwhere"], [635, "ivy.nested_argwhere"]], "nested_map() (in module ivy)": [[549, "ivy.nested_map"], [636, "ivy.nested_map"]], "nested_multi_map() (in module ivy)": [[549, "ivy.nested_multi_map"], [637, "ivy.nested_multi_map"]], "prune_empty() (in module ivy)": [[549, "ivy.prune_empty"], [638, "ivy.prune_empty"]], "prune_nest_at_index() (in module ivy)": [[549, "ivy.prune_nest_at_index"], [639, "ivy.prune_nest_at_index"]], "prune_nest_at_indices() (in module ivy)": [[549, "ivy.prune_nest_at_indices"], [640, "ivy.prune_nest_at_indices"]], "set_nest_at_index() (in module ivy)": [[549, "ivy.set_nest_at_index"], [641, "ivy.set_nest_at_index"]], "set_nest_at_indices() (in module ivy)": [[549, "ivy.set_nest_at_indices"], [642, "ivy.set_nest_at_indices"]], "ivy.functional.ivy.norms": [[550, "module-ivy.functional.ivy.norms"]], "layer_norm() (in module ivy)": [[550, "ivy.layer_norm"], [643, "ivy.layer_norm"]], "ivy.functional.ivy.random": [[551, "module-ivy.functional.ivy.random"]], "multinomial() (in module ivy)": [[551, "ivy.multinomial"], [644, "ivy.multinomial"]], "randint() (in module ivy)": [[551, "ivy.randint"], [645, "ivy.randint"]], "random_normal() (in module ivy)": [[551, "ivy.random_normal"], [646, "ivy.random_normal"]], "random_uniform() (in module ivy)": [[551, "ivy.random_uniform"], [647, "ivy.random_uniform"]], "seed() (in module ivy)": [[551, "ivy.seed"], [648, "ivy.seed"]], "shuffle() (in module ivy)": [[551, "ivy.shuffle"], [649, "ivy.shuffle"]], "argmax() (in module ivy)": [[552, "ivy.argmax"], [650, "ivy.argmax"]], "argmin() (in module ivy)": [[552, "ivy.argmin"], [651, "ivy.argmin"]], "argwhere() (in module ivy)": [[552, "ivy.argwhere"], [652, "ivy.argwhere"]], "ivy.functional.ivy.searching": [[552, "module-ivy.functional.ivy.searching"]], "nonzero() (in module ivy)": [[552, "ivy.nonzero"], [653, "ivy.nonzero"]], "where() (in module ivy)": [[552, "ivy.where"], [654, "ivy.where"]], "ivy.functional.ivy.set": [[553, "module-ivy.functional.ivy.set"]], "unique_all() (in module ivy)": [[553, "ivy.unique_all"], [655, "ivy.unique_all"]], "unique_counts() (in module ivy)": [[553, "ivy.unique_counts"], [656, "ivy.unique_counts"]], "unique_inverse() (in module ivy)": [[553, "ivy.unique_inverse"], [657, "ivy.unique_inverse"]], "unique_values() (in module ivy)": [[553, "ivy.unique_values"], [658, "ivy.unique_values"]], "argsort() (in module ivy)": [[554, "ivy.argsort"], [659, "ivy.argsort"]], "ivy.functional.ivy.sorting": [[554, "module-ivy.functional.ivy.sorting"]], "msort() (in module ivy)": [[554, "ivy.msort"], [660, "ivy.msort"]], "searchsorted() (in module ivy)": [[554, "ivy.searchsorted"], [661, "ivy.searchsorted"]], "sort() (in module ivy)": [[554, "ivy.sort"], [662, "ivy.sort"]], "cumprod() (in module ivy)": [[555, "ivy.cumprod"], [663, "ivy.cumprod"]], "cumsum() (in module ivy)": [[555, "ivy.cumsum"], [664, "ivy.cumsum"]], "einsum() (in module ivy)": [[555, "ivy.einsum"], [665, "ivy.einsum"]], "ivy.functional.ivy.statistical": [[555, "module-ivy.functional.ivy.statistical"]], "max() (in module ivy)": [[555, "ivy.max"], [666, "ivy.max"]], "mean() (in module ivy)": [[555, "ivy.mean"], [667, "ivy.mean"]], "min() (in module ivy)": [[555, "ivy.min"], [668, "ivy.min"]], "prod() (in module ivy)": [[555, "ivy.prod"], [669, "ivy.prod"]], "std() (in module ivy)": [[555, "ivy.std"], [670, "ivy.std"]], "sum() (in module ivy)": [[555, "ivy.sum"], [671, "ivy.sum"]], "var() (in module ivy)": [[555, "ivy.var"], [672, "ivy.var"]], "all() (in module ivy)": [[556, "ivy.all"], [673, "ivy.all"]], "any() (in module ivy)": [[556, "ivy.any"], [674, "ivy.any"]], "ivy.functional.ivy.utility": [[556, "module-ivy.functional.ivy.utility"]], "save() (in module ivy)": [[556, "ivy.save"], [675, "ivy.save"]], "conv1d() (ivy.array method)": [[558, "ivy.Array.conv1d"]], "conv1d() (ivy.container method)": [[558, "ivy.Container.conv1d"]], "conv1d_transpose() (ivy.array method)": [[559, "ivy.Array.conv1d_transpose"]], "conv1d_transpose() (ivy.container method)": [[559, "ivy.Container.conv1d_transpose"]], "conv2d() (ivy.array method)": [[560, "ivy.Array.conv2d"]], "conv2d() (ivy.container method)": [[560, "ivy.Container.conv2d"]], "conv2d_transpose() (ivy.array method)": [[561, "ivy.Array.conv2d_transpose"]], "conv2d_transpose() (ivy.container method)": [[561, "ivy.Container.conv2d_transpose"]], "conv3d() (ivy.array method)": [[562, "ivy.Array.conv3d"]], "conv3d() (ivy.container method)": [[562, "ivy.Container.conv3d"]], "conv3d_transpose() (ivy.array method)": [[563, "ivy.Array.conv3d_transpose"]], "conv3d_transpose() (ivy.container method)": [[563, "ivy.Container.conv3d_transpose"]], "depthwise_conv2d() (ivy.array method)": [[566, "ivy.Array.depthwise_conv2d"]], "depthwise_conv2d() (ivy.container method)": [[566, "ivy.Container.depthwise_conv2d"]], "dropout() (ivy.array method)": [[567, "ivy.Array.dropout"]], "dropout() (ivy.container method)": [[567, "ivy.Container.dropout"]], "linear() (ivy.array method)": [[568, "ivy.Array.linear"]], "linear() (ivy.container method)": [[568, "ivy.Container.linear"]], "lstm_update() (ivy.array method)": [[569, "ivy.Array.lstm_update"]], "lstm_update() (ivy.container method)": [[569, "ivy.Container.lstm_update"]], "multi_head_attention() (ivy.array method)": [[570, "ivy.Array.multi_head_attention"]], "multi_head_attention() (ivy.container method)": [[570, "ivy.Container.multi_head_attention"]], "scaled_dot_product_attention() (ivy.array method)": [[571, "ivy.Array.scaled_dot_product_attention"]], "scaled_dot_product_attention() (ivy.container method)": [[571, "ivy.Container.scaled_dot_product_attention"]], "cholesky() (ivy.array method)": [[572, "ivy.Array.cholesky"]], "cholesky() (ivy.container method)": [[572, "ivy.Container.cholesky"]], "cross() (ivy.array method)": [[573, "ivy.Array.cross"]], "cross() (ivy.container method)": [[573, "ivy.Container.cross"]], "det() (ivy.array method)": [[574, "ivy.Array.det"]], "det() (ivy.container method)": [[574, "ivy.Container.det"]], "diag() (ivy.array method)": [[575, "ivy.Array.diag"]], "diag() (ivy.container method)": [[575, "ivy.Container.diag"]], "diagonal() (ivy.array method)": [[576, "ivy.Array.diagonal"]], "diagonal() (ivy.container method)": [[576, "ivy.Container.diagonal"]], "eigh() (ivy.array method)": [[578, "ivy.Array.eigh"]], "eigh() (ivy.container method)": [[578, "ivy.Container.eigh"]], "eigvalsh() (ivy.array method)": [[579, "ivy.Array.eigvalsh"]], "eigvalsh() (ivy.container method)": [[579, "ivy.Container.eigvalsh"]], "inner() (ivy.array method)": [[580, "ivy.Array.inner"]], "inner() (ivy.container method)": [[580, "ivy.Container.inner"]], "inv() (ivy.array method)": [[581, "ivy.Array.inv"]], "inv() (ivy.container method)": [[581, "ivy.Container.inv"]], "matmul() (ivy.array method)": [[583, "ivy.Array.matmul"]], "matmul() (ivy.container method)": [[583, "ivy.Container.matmul"]], "matrix_norm() (ivy.array method)": [[584, "ivy.Array.matrix_norm"]], "matrix_norm() (ivy.container method)": [[584, "ivy.Container.matrix_norm"]], "matrix_power() (ivy.array method)": [[585, "ivy.Array.matrix_power"]], "matrix_power() (ivy.container method)": [[585, "ivy.Container.matrix_power"]], "matrix_rank() (ivy.array method)": [[586, "ivy.Array.matrix_rank"]], "matrix_rank() (ivy.container method)": [[586, "ivy.Container.matrix_rank"]], "matrix_transpose() (ivy.array method)": [[587, "ivy.Array.matrix_transpose"]], "matrix_transpose() (ivy.container method)": [[587, "ivy.Container.matrix_transpose"]], "outer() (ivy.array method)": [[588, "ivy.Array.outer"]], "outer() (ivy.container method)": [[588, "ivy.Container.outer"]], "pinv() (ivy.array method)": [[589, "ivy.Array.pinv"]], "pinv() (ivy.container method)": [[589, "ivy.Container.pinv"]], "qr() (ivy.array method)": [[590, "ivy.Array.qr"]], "qr() (ivy.container method)": [[590, "ivy.Container.qr"]], "slogdet() (ivy.array method)": [[591, "ivy.Array.slogdet"]], "slogdet() (ivy.container method)": [[591, "ivy.Container.slogdet"]], "solve() (ivy.array method)": [[592, "ivy.Array.solve"]], "solve() (ivy.container method)": [[592, "ivy.Container.solve"]], "svd() (ivy.array method)": [[593, "ivy.Array.svd"]], "svd() (ivy.container method)": [[593, "ivy.Container.svd"]], "svdvals() (ivy.array method)": [[594, "ivy.Array.svdvals"]], "svdvals() (ivy.container method)": [[594, "ivy.Container.svdvals"]], "tensordot() (ivy.array method)": [[595, "ivy.Array.tensordot"]], "tensordot() (ivy.container method)": [[595, "ivy.Container.tensordot"]], "tensorsolve() (ivy.array method)": [[596, "ivy.Array.tensorsolve"]], "tensorsolve() (ivy.container method)": [[596, "ivy.Container.tensorsolve"]], "trace() (ivy.array method)": [[597, "ivy.Array.trace"]], "trace() (ivy.container method)": [[597, "ivy.Container.trace"]], "vander() (ivy.array method)": [[598, "ivy.Array.vander"]], "vander() (ivy.container method)": [[598, "ivy.Container.vander"]], "vecdot() (ivy.array method)": [[599, "ivy.Array.vecdot"]], "vecdot() (ivy.container method)": [[599, "ivy.Container.vecdot"]], "vector_norm() (ivy.array method)": [[600, "ivy.Array.vector_norm"]], "vector_norm() (ivy.container method)": [[600, "ivy.Container.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.array method)": [[601, "ivy.Array.vector_to_skew_symmetric_matrix"]], "vector_to_skew_symmetric_matrix() (ivy.container method)": [[601, "ivy.Container.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (ivy.array method)": [[602, "ivy.Array.binary_cross_entropy"]], "binary_cross_entropy() (ivy.container method)": [[602, "ivy.Container.binary_cross_entropy"]], "cross_entropy() (ivy.array method)": [[603, "ivy.Array.cross_entropy"]], "cross_entropy() (ivy.container method)": [[603, "ivy.Container.cross_entropy"]], "sparse_cross_entropy() (ivy.array method)": [[604, "ivy.Array.sparse_cross_entropy"]], "sparse_cross_entropy() (ivy.container method)": [[604, "ivy.Container.sparse_cross_entropy"]], "clip() (ivy.array method)": [[605, "ivy.Array.clip"]], "clip() (ivy.container method)": [[605, "ivy.Container.clip"]], "concat() (ivy.array method)": [[606, "ivy.Array.concat"]], "concat() (ivy.container method)": [[606, "ivy.Container.concat"]], "constant_pad() (ivy.array method)": [[607, "ivy.Array.constant_pad"]], "constant_pad() (ivy.container method)": [[607, "ivy.Container.constant_pad"]], "expand_dims() (ivy.array method)": [[608, "ivy.Array.expand_dims"]], "expand_dims() (ivy.container method)": [[608, "ivy.Container.expand_dims"]], "flip() (ivy.array method)": [[609, "ivy.Array.flip"]], "flip() (ivy.container method)": [[609, "ivy.Container.flip"]], "permute_dims() (ivy.array method)": [[610, "ivy.Array.permute_dims"]], "permute_dims() (ivy.container method)": [[610, "ivy.Container.permute_dims"]], "repeat() (ivy.array method)": [[611, "ivy.Array.repeat"]], "repeat() (ivy.container method)": [[611, "ivy.Container.repeat"]], "reshape() (ivy.array method)": [[612, "ivy.Array.reshape"]], "reshape() (ivy.container method)": [[612, "ivy.Container.reshape"]], "roll() (ivy.array method)": [[613, "ivy.Array.roll"]], "roll() (ivy.container method)": [[613, "ivy.Container.roll"]], "split() (ivy.array method)": [[614, "ivy.Array.split"]], "split() (ivy.container method)": [[614, "ivy.Container.split"]], "squeeze() (ivy.array method)": [[615, "ivy.Array.squeeze"]], "squeeze() (ivy.container method)": [[615, "ivy.Container.squeeze"]], "stack() (ivy.array method)": [[616, "ivy.Array.stack"]], "stack() (ivy.container method)": [[616, "ivy.Container.stack"]], "swapaxes() (ivy.array method)": [[617, "ivy.Array.swapaxes"]], "swapaxes() (ivy.container method)": [[617, "ivy.Container.swapaxes"]], "tile() (ivy.array method)": [[618, "ivy.Array.tile"]], "tile() (ivy.container method)": [[618, "ivy.Container.tile"]], "unstack() (ivy.array method)": [[619, "ivy.Array.unstack"]], "unstack() (ivy.container method)": [[619, "ivy.Container.unstack"]], "zero_pad() (ivy.array method)": [[620, "ivy.Array.zero_pad"]], "zero_pad() (ivy.container method)": [[620, "ivy.Container.zero_pad"]], "layer_norm() (ivy.array method)": [[643, "ivy.Array.layer_norm"]], "layer_norm() (ivy.container method)": [[643, "ivy.Container.layer_norm"]], "multinomial() (ivy.array method)": [[644, "ivy.Array.multinomial"]], "multinomial() (ivy.container method)": [[644, "ivy.Container.multinomial"]], "randint() (ivy.array method)": [[645, "ivy.Array.randint"]], "randint() (ivy.container method)": [[645, "ivy.Container.randint"]], "random_normal() (ivy.array method)": [[646, "ivy.Array.random_normal"]], "random_normal() (ivy.container method)": [[646, "ivy.Container.random_normal"]], "random_uniform() (ivy.array method)": [[647, "ivy.Array.random_uniform"]], "random_uniform() (ivy.container method)": [[647, "ivy.Container.random_uniform"]], "shuffle() (ivy.array method)": [[649, "ivy.Array.shuffle"]], "shuffle() (ivy.container method)": [[649, "ivy.Container.shuffle"]], "argmax() (ivy.array method)": [[650, "ivy.Array.argmax"]], "argmax() (ivy.container method)": [[650, "ivy.Container.argmax"]], "argmin() (ivy.array method)": [[651, "ivy.Array.argmin"]], "argmin() (ivy.container method)": [[651, "ivy.Container.argmin"]], "argwhere() (ivy.array method)": [[652, "ivy.Array.argwhere"]], "argwhere() (ivy.container method)": [[652, "ivy.Container.argwhere"]], "nonzero() (ivy.array method)": [[653, "ivy.Array.nonzero"]], "nonzero() (ivy.container method)": [[653, "ivy.Container.nonzero"]], "where() (ivy.array method)": [[654, "ivy.Array.where"]], "where() (ivy.container method)": [[654, "ivy.Container.where"]], "unique_all() (ivy.array method)": [[655, "ivy.Array.unique_all"]], "unique_all() (ivy.container method)": [[655, "ivy.Container.unique_all"]], "unique_counts() (ivy.array method)": [[656, "ivy.Array.unique_counts"]], "unique_counts() (ivy.container method)": [[656, "ivy.Container.unique_counts"]], "unique_inverse() (ivy.array method)": [[657, "ivy.Array.unique_inverse"]], "unique_inverse() (ivy.container method)": [[657, "ivy.Container.unique_inverse"]], "unique_values() (ivy.array method)": [[658, "ivy.Array.unique_values"]], "unique_values() (ivy.container method)": [[658, "ivy.Container.unique_values"]], "argsort() (ivy.array method)": [[659, "ivy.Array.argsort"]], "argsort() (ivy.container method)": [[659, "ivy.Container.argsort"]], "msort() (ivy.array method)": [[660, "ivy.Array.msort"]], "msort() (ivy.container method)": [[660, "ivy.Container.msort"]], "searchsorted() (ivy.array method)": [[661, "ivy.Array.searchsorted"]], "searchsorted() (ivy.container method)": [[661, "ivy.Container.searchsorted"]], "sort() (ivy.array method)": [[662, "ivy.Array.sort"]], "sort() (ivy.container method)": [[662, "ivy.Container.sort"]], "cumprod() (ivy.array method)": [[663, "ivy.Array.cumprod"]], "cumprod() (ivy.container method)": [[663, "ivy.Container.cumprod"]], "cumsum() (ivy.array method)": [[664, "ivy.Array.cumsum"]], "cumsum() (ivy.container method)": [[664, "ivy.Container.cumsum"]], "einsum() (ivy.array method)": [[665, "ivy.Array.einsum"]], "einsum() (ivy.container method)": [[665, "ivy.Container.einsum"]], "max() (ivy.array method)": [[666, "ivy.Array.max"]], "max() (ivy.container method)": [[666, "ivy.Container.max"]], "mean() (ivy.array method)": [[667, "ivy.Array.mean"]], "mean() (ivy.container method)": [[667, "ivy.Container.mean"]], "min() (ivy.array method)": [[668, "ivy.Array.min"]], "min() (ivy.container method)": [[668, "ivy.Container.min"]], "prod() (ivy.array method)": [[669, "ivy.Array.prod"]], "prod() (ivy.container method)": [[669, "ivy.Container.prod"]], "std() (ivy.array method)": [[670, "ivy.Array.std"]], "std() (ivy.container method)": [[670, "ivy.Container.std"]], "sum() (ivy.array method)": [[671, "ivy.Array.sum"]], "sum() (ivy.container method)": [[671, "ivy.Container.sum"]], "var() (ivy.array method)": [[672, "ivy.Array.var"]], "var() (ivy.container method)": [[672, "ivy.Container.var"]], "all() (ivy.array method)": [[673, "ivy.Array.all"]], "all() (ivy.container method)": [[673, "ivy.Container.all"]], "any() (ivy.array method)": [[674, "ivy.Array.any"]], "any() (ivy.container method)": [[674, "ivy.Container.any"]], "elu (class in ivy.stateful.activations)": [[678, "ivy.stateful.activations.ELU"]], "geglu (class in ivy.stateful.activations)": [[678, "ivy.stateful.activations.GEGLU"]], "gelu (class in ivy.stateful.activations)": [[678, "ivy.stateful.activations.GELU"]], "hardswish (class in ivy.stateful.activations)": [[678, "ivy.stateful.activations.Hardswish"]], "leakyrelu (class in ivy.stateful.activations)": [[678, "ivy.stateful.activations.LeakyReLU"]], "logsigmoid (class in ivy.stateful.activations)": [[678, "ivy.stateful.activations.LogSigmoid"]], "logsoftmax (class in ivy.stateful.activations)": [[678, "ivy.stateful.activations.LogSoftmax"]], "logit (class in ivy.stateful.activations)": [[678, "ivy.stateful.activations.Logit"]], "mish (class in ivy.stateful.activations)": [[678, "ivy.stateful.activations.Mish"]], "prelu (class in ivy.stateful.activations)": [[678, "ivy.stateful.activations.PReLU"]], "relu (class in ivy.stateful.activations)": [[678, "ivy.stateful.activations.ReLU"]], "relu6 (class in ivy.stateful.activations)": [[678, "ivy.stateful.activations.ReLU6"]], "selu (class in ivy.stateful.activations)": [[678, "ivy.stateful.activations.SeLU"]], "silu (class in ivy.stateful.activations)": [[678, "ivy.stateful.activations.SiLU"]], "sigmoid (class in ivy.stateful.activations)": [[678, "ivy.stateful.activations.Sigmoid"]], "softmax (class in ivy.stateful.activations)": [[678, "ivy.stateful.activations.Softmax"]], "softplus (class in ivy.stateful.activations)": [[678, "ivy.stateful.activations.Softplus"]], "tanh (class in ivy.stateful.activations)": [[678, "ivy.stateful.activations.Tanh"]], "__init__() (ivy.stateful.activations.elu method)": [[678, "ivy.stateful.activations.ELU.__init__"]], "__init__() (ivy.stateful.activations.geglu method)": [[678, "ivy.stateful.activations.GEGLU.__init__"]], "__init__() (ivy.stateful.activations.gelu method)": [[678, "ivy.stateful.activations.GELU.__init__"]], "__init__() (ivy.stateful.activations.hardswish method)": [[678, "ivy.stateful.activations.Hardswish.__init__"]], "__init__() (ivy.stateful.activations.leakyrelu method)": [[678, "ivy.stateful.activations.LeakyReLU.__init__"]], "__init__() (ivy.stateful.activations.logsigmoid method)": [[678, "ivy.stateful.activations.LogSigmoid.__init__"]], "__init__() (ivy.stateful.activations.logsoftmax method)": [[678, "ivy.stateful.activations.LogSoftmax.__init__"]], "__init__() (ivy.stateful.activations.logit method)": [[678, "ivy.stateful.activations.Logit.__init__"]], "__init__() (ivy.stateful.activations.mish method)": [[678, "ivy.stateful.activations.Mish.__init__"]], "__init__() (ivy.stateful.activations.prelu method)": [[678, "ivy.stateful.activations.PReLU.__init__"]], "__init__() (ivy.stateful.activations.relu method)": [[678, "ivy.stateful.activations.ReLU.__init__"]], "__init__() (ivy.stateful.activations.relu6 method)": [[678, "ivy.stateful.activations.ReLU6.__init__"]], "__init__() (ivy.stateful.activations.selu method)": [[678, "ivy.stateful.activations.SeLU.__init__"]], "__init__() (ivy.stateful.activations.silu method)": [[678, "ivy.stateful.activations.SiLU.__init__"]], "__init__() (ivy.stateful.activations.sigmoid method)": [[678, "ivy.stateful.activations.Sigmoid.__init__"]], "__init__() (ivy.stateful.activations.softmax method)": [[678, "ivy.stateful.activations.Softmax.__init__"]], "__init__() (ivy.stateful.activations.softplus method)": [[678, "ivy.stateful.activations.Softplus.__init__"]], "__init__() (ivy.stateful.activations.tanh method)": [[678, "ivy.stateful.activations.Tanh.__init__"]], "ivy.stateful.activations": [[678, "module-ivy.stateful.activations"]], "moduleconverters (class in ivy.stateful.converters)": [[679, "ivy.stateful.converters.ModuleConverters"]], "from_flax_module() (ivy.stateful.converters.moduleconverters static method)": [[679, "ivy.stateful.converters.ModuleConverters.from_flax_module"]], "from_haiku_module() (ivy.stateful.converters.moduleconverters static method)": [[679, "ivy.stateful.converters.ModuleConverters.from_haiku_module"]], "from_keras_module() (ivy.stateful.converters.moduleconverters static method)": [[679, "ivy.stateful.converters.ModuleConverters.from_keras_module"]], "from_paddle_module() (ivy.stateful.converters.moduleconverters static method)": [[679, "ivy.stateful.converters.ModuleConverters.from_paddle_module"]], "from_torch_module() (ivy.stateful.converters.moduleconverters static method)": [[679, "ivy.stateful.converters.ModuleConverters.from_torch_module"]], "ivy.stateful.converters": [[679, "module-ivy.stateful.converters"]], "to_ivy_module() (in module ivy.stateful.converters)": [[679, "ivy.stateful.converters.to_ivy_module"]], "modulehelpers (class in ivy.stateful.helpers)": [[680, "ivy.stateful.helpers.ModuleHelpers"]], "check_submod_rets() (ivy.stateful.helpers.modulehelpers method)": [[680, "ivy.stateful.helpers.ModuleHelpers.check_submod_rets"]], "get_mod_key() (ivy.stateful.helpers.modulehelpers method)": [[680, "ivy.stateful.helpers.ModuleHelpers.get_mod_key"]], "ivy.stateful.helpers": [[680, "module-ivy.stateful.helpers"]], "mod_depth() (ivy.stateful.helpers.modulehelpers method)": [[680, "ivy.stateful.helpers.ModuleHelpers.mod_depth"]], "mod_height() (ivy.stateful.helpers.modulehelpers method)": [[680, "ivy.stateful.helpers.ModuleHelpers.mod_height"]], "mod_with_top_mod_key_chain() (ivy.stateful.helpers.modulehelpers method)": [[680, "ivy.stateful.helpers.ModuleHelpers.mod_with_top_mod_key_chain"]], "show_mod_in_top_mod() (ivy.stateful.helpers.modulehelpers method)": [[680, "ivy.stateful.helpers.ModuleHelpers.show_mod_in_top_mod"]], "show_structure() (ivy.stateful.helpers.modulehelpers method)": [[680, "ivy.stateful.helpers.ModuleHelpers.show_structure"]], "show_v_in_top_v() (ivy.stateful.helpers.modulehelpers method)": [[680, "ivy.stateful.helpers.ModuleHelpers.show_v_in_top_v"]], "sub_mods() (ivy.stateful.helpers.modulehelpers method)": [[680, "ivy.stateful.helpers.ModuleHelpers.sub_mods"]], "track_submod_call_order() (ivy.stateful.helpers.modulehelpers method)": [[680, "ivy.stateful.helpers.ModuleHelpers.track_submod_call_order"]], "track_submod_rets() (ivy.stateful.helpers.modulehelpers method)": [[680, "ivy.stateful.helpers.ModuleHelpers.track_submod_rets"]], "v_with_top_v_key_chains() (ivy.stateful.helpers.modulehelpers method)": [[680, "ivy.stateful.helpers.ModuleHelpers.v_with_top_v_key_chains"]], "constant (class in ivy.stateful.initializers)": [[681, "ivy.stateful.initializers.Constant"]], "firstlayersiren (class in ivy.stateful.initializers)": [[681, "ivy.stateful.initializers.FirstLayerSiren"]], "glorotuniform (class in ivy.stateful.initializers)": [[681, "ivy.stateful.initializers.GlorotUniform"]], "initializer (class in ivy.stateful.initializers)": [[681, "ivy.stateful.initializers.Initializer"]], "kaimingnormal (class in ivy.stateful.initializers)": [[681, "ivy.stateful.initializers.KaimingNormal"]], "ones (class in ivy.stateful.initializers)": [[681, "ivy.stateful.initializers.Ones"]], "randomnormal (class in ivy.stateful.initializers)": [[681, "ivy.stateful.initializers.RandomNormal"]], "siren (class in ivy.stateful.initializers)": [[681, "ivy.stateful.initializers.Siren"]], "uniform (class in ivy.stateful.initializers)": [[681, "ivy.stateful.initializers.Uniform"]], "zeros (class in ivy.stateful.initializers)": [[681, "ivy.stateful.initializers.Zeros"]], "__init__() (ivy.stateful.initializers.constant method)": [[681, "ivy.stateful.initializers.Constant.__init__"]], "__init__() (ivy.stateful.initializers.firstlayersiren method)": [[681, "ivy.stateful.initializers.FirstLayerSiren.__init__"]], "__init__() (ivy.stateful.initializers.glorotuniform method)": [[681, "ivy.stateful.initializers.GlorotUniform.__init__"]], "__init__() (ivy.stateful.initializers.kaimingnormal method)": [[681, "ivy.stateful.initializers.KaimingNormal.__init__"]], "__init__() (ivy.stateful.initializers.ones method)": [[681, "ivy.stateful.initializers.Ones.__init__"]], "__init__() (ivy.stateful.initializers.randomnormal method)": [[681, "ivy.stateful.initializers.RandomNormal.__init__"]], "__init__() (ivy.stateful.initializers.siren method)": [[681, "ivy.stateful.initializers.Siren.__init__"]], "__init__() (ivy.stateful.initializers.uniform method)": [[681, "ivy.stateful.initializers.Uniform.__init__"]], "__init__() (ivy.stateful.initializers.zeros method)": [[681, "ivy.stateful.initializers.Zeros.__init__"]], "create_variables() (ivy.stateful.initializers.constant method)": [[681, "ivy.stateful.initializers.Constant.create_variables"]], "create_variables() (ivy.stateful.initializers.initializer method)": [[681, "ivy.stateful.initializers.Initializer.create_variables"]], "create_variables() (ivy.stateful.initializers.kaimingnormal method)": [[681, "ivy.stateful.initializers.KaimingNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.randomnormal method)": [[681, "ivy.stateful.initializers.RandomNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.uniform method)": [[681, "ivy.stateful.initializers.Uniform.create_variables"]], "ivy.stateful.initializers": [[681, "module-ivy.stateful.initializers"]], "adaptiveavgpool1d (class in ivy.stateful.layers)": [[682, "ivy.stateful.layers.AdaptiveAvgPool1d"]], "adaptiveavgpool2d (class in ivy.stateful.layers)": [[682, "ivy.stateful.layers.AdaptiveAvgPool2d"]], "avgpool1d (class in ivy.stateful.layers)": [[682, "ivy.stateful.layers.AvgPool1D"]], "avgpool2d (class in ivy.stateful.layers)": [[682, "ivy.stateful.layers.AvgPool2D"]], "avgpool3d (class in ivy.stateful.layers)": [[682, "ivy.stateful.layers.AvgPool3D"]], "conv1d (class in ivy.stateful.layers)": [[682, "ivy.stateful.layers.Conv1D"]], "conv1dtranspose (class in ivy.stateful.layers)": [[682, "ivy.stateful.layers.Conv1DTranspose"]], "conv2d (class in ivy.stateful.layers)": [[682, "ivy.stateful.layers.Conv2D"]], "conv2dtranspose (class in ivy.stateful.layers)": [[682, "ivy.stateful.layers.Conv2DTranspose"]], "conv3d (class in ivy.stateful.layers)": [[682, "ivy.stateful.layers.Conv3D"]], "conv3dtranspose (class in ivy.stateful.layers)": [[682, "ivy.stateful.layers.Conv3DTranspose"]], "dct (class in ivy.stateful.layers)": [[682, "ivy.stateful.layers.Dct"]], "depthwiseconv2d (class in ivy.stateful.layers)": [[682, "ivy.stateful.layers.DepthwiseConv2D"]], "dropout (class in ivy.stateful.layers)": [[682, "ivy.stateful.layers.Dropout"]], "embedding (class in ivy.stateful.layers)": [[682, "ivy.stateful.layers.Embedding"]], "fft (class in ivy.stateful.layers)": [[682, "ivy.stateful.layers.FFT"]], "identity (class in ivy.stateful.layers)": [[682, "ivy.stateful.layers.Identity"]], "lstm (class in ivy.stateful.layers)": [[682, "ivy.stateful.layers.LSTM"]], "linear (class in ivy.stateful.layers)": [[682, "ivy.stateful.layers.Linear"]], "maxpool1d (class in ivy.stateful.layers)": [[682, "ivy.stateful.layers.MaxPool1D"]], "maxpool2d (class in ivy.stateful.layers)": [[682, "ivy.stateful.layers.MaxPool2D"]], "maxpool3d (class in ivy.stateful.layers)": [[682, "ivy.stateful.layers.MaxPool3D"]], "multiheadattention (class in ivy.stateful.layers)": [[682, "ivy.stateful.layers.MultiHeadAttention"]], "__init__() (ivy.stateful.layers.adaptiveavgpool1d method)": [[682, "ivy.stateful.layers.AdaptiveAvgPool1d.__init__"]], "__init__() (ivy.stateful.layers.adaptiveavgpool2d method)": [[682, "ivy.stateful.layers.AdaptiveAvgPool2d.__init__"]], "__init__() (ivy.stateful.layers.avgpool1d method)": [[682, "ivy.stateful.layers.AvgPool1D.__init__"]], "__init__() (ivy.stateful.layers.avgpool2d method)": [[682, "ivy.stateful.layers.AvgPool2D.__init__"]], "__init__() (ivy.stateful.layers.avgpool3d method)": [[682, "ivy.stateful.layers.AvgPool3D.__init__"]], "__init__() (ivy.stateful.layers.conv1d method)": [[682, "ivy.stateful.layers.Conv1D.__init__"]], "__init__() (ivy.stateful.layers.conv1dtranspose method)": [[682, "ivy.stateful.layers.Conv1DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv2d method)": [[682, "ivy.stateful.layers.Conv2D.__init__"]], "__init__() (ivy.stateful.layers.conv2dtranspose method)": [[682, "ivy.stateful.layers.Conv2DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv3d method)": [[682, "ivy.stateful.layers.Conv3D.__init__"]], "__init__() (ivy.stateful.layers.conv3dtranspose method)": [[682, "ivy.stateful.layers.Conv3DTranspose.__init__"]], "__init__() (ivy.stateful.layers.dct method)": [[682, "ivy.stateful.layers.Dct.__init__"]], "__init__() (ivy.stateful.layers.depthwiseconv2d method)": [[682, "ivy.stateful.layers.DepthwiseConv2D.__init__"]], "__init__() (ivy.stateful.layers.dropout method)": [[682, "ivy.stateful.layers.Dropout.__init__"]], "__init__() (ivy.stateful.layers.embedding method)": [[682, "ivy.stateful.layers.Embedding.__init__"]], "__init__() (ivy.stateful.layers.fft method)": [[682, "ivy.stateful.layers.FFT.__init__"]], "__init__() (ivy.stateful.layers.identity method)": [[682, "ivy.stateful.layers.Identity.__init__"]], "__init__() (ivy.stateful.layers.lstm method)": [[682, "ivy.stateful.layers.LSTM.__init__"]], "__init__() (ivy.stateful.layers.linear method)": [[682, "ivy.stateful.layers.Linear.__init__"]], "__init__() (ivy.stateful.layers.maxpool1d method)": [[682, "ivy.stateful.layers.MaxPool1D.__init__"]], "__init__() (ivy.stateful.layers.maxpool2d method)": [[682, "ivy.stateful.layers.MaxPool2D.__init__"]], "__init__() (ivy.stateful.layers.maxpool3d method)": [[682, "ivy.stateful.layers.MaxPool3D.__init__"]], "__init__() (ivy.stateful.layers.multiheadattention method)": [[682, "ivy.stateful.layers.MultiHeadAttention.__init__"]], "get_initial_state() (ivy.stateful.layers.lstm method)": [[682, "ivy.stateful.layers.LSTM.get_initial_state"]], "ivy.stateful.layers": [[682, "module-ivy.stateful.layers"]], "binarycrossentropyloss (class in ivy.stateful.losses)": [[683, "ivy.stateful.losses.BinaryCrossEntropyLoss"]], "crossentropyloss (class in ivy.stateful.losses)": [[683, "ivy.stateful.losses.CrossEntropyLoss"]], "logpoissonloss (class in ivy.stateful.losses)": [[683, "ivy.stateful.losses.LogPoissonLoss"]], "__init__() (ivy.stateful.losses.binarycrossentropyloss method)": [[683, "ivy.stateful.losses.BinaryCrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.crossentropyloss method)": [[683, "ivy.stateful.losses.CrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.logpoissonloss method)": [[683, "ivy.stateful.losses.LogPoissonLoss.__init__"]], "ivy.stateful.losses": [[683, "module-ivy.stateful.losses"]], "module (class in ivy.stateful.module)": [[684, "ivy.stateful.module.Module"]], "modulemeta (class in ivy.stateful.module)": [[684, "ivy.stateful.module.ModuleMeta"]], "__call__() (ivy.stateful.module.module method)": [[684, "ivy.stateful.module.Module.__call__"]], "__init__() (ivy.stateful.module.module method)": [[684, "ivy.stateful.module.Module.__init__"]], "build() (ivy.stateful.module.module method)": [[684, "ivy.stateful.module.Module.build"]], "build_mode (ivy.stateful.module.module property)": [[684, "ivy.stateful.module.Module.build_mode"]], "built_ (ivy.stateful.module.module property)": [[684, "ivy.stateful.module.Module.built_"]], "compile() (ivy.stateful.module.module method)": [[684, "ivy.stateful.module.Module.compile"]], "eval() (ivy.stateful.module.module method)": [[684, "ivy.stateful.module.Module.eval"]], "ivy.stateful.module": [[684, "module-ivy.stateful.module"]], "load() (ivy.stateful.module.module static method)": [[684, "ivy.stateful.module.Module.load"]], "register_buffer() (ivy.stateful.module.module method)": [[684, "ivy.stateful.module.Module.register_buffer"]], "save() (ivy.stateful.module.module method)": [[684, "ivy.stateful.module.Module.save"]], "save_weights() (ivy.stateful.module.module method)": [[684, "ivy.stateful.module.Module.save_weights"]], "show_graph() (ivy.stateful.module.module method)": [[684, "ivy.stateful.module.Module.show_graph"]], "train() (ivy.stateful.module.module method)": [[684, "ivy.stateful.module.Module.train"]], "batchnorm2d (class in ivy.stateful.norms)": [[685, "ivy.stateful.norms.BatchNorm2D"]], "layernorm (class in ivy.stateful.norms)": [[685, "ivy.stateful.norms.LayerNorm"]], "__init__() (ivy.stateful.norms.batchnorm2d method)": [[685, "ivy.stateful.norms.BatchNorm2D.__init__"]], "__init__() (ivy.stateful.norms.layernorm method)": [[685, "ivy.stateful.norms.LayerNorm.__init__"]], "ivy.stateful.norms": [[685, "module-ivy.stateful.norms"]], "adam (class in ivy.stateful.optimizers)": [[686, "ivy.stateful.optimizers.Adam"]], "lamb (class in ivy.stateful.optimizers)": [[686, "ivy.stateful.optimizers.LAMB"]], "lars (class in ivy.stateful.optimizers)": [[686, "ivy.stateful.optimizers.LARS"]], "optimizer (class in ivy.stateful.optimizers)": [[686, "ivy.stateful.optimizers.Optimizer"]], "sgd (class in ivy.stateful.optimizers)": [[686, "ivy.stateful.optimizers.SGD"]], "__init__() (ivy.stateful.optimizers.adam method)": [[686, "ivy.stateful.optimizers.Adam.__init__"]], "__init__() (ivy.stateful.optimizers.lamb method)": [[686, "ivy.stateful.optimizers.LAMB.__init__"]], "__init__() (ivy.stateful.optimizers.lars method)": [[686, "ivy.stateful.optimizers.LARS.__init__"]], "__init__() (ivy.stateful.optimizers.optimizer method)": [[686, "ivy.stateful.optimizers.Optimizer.__init__"]], "__init__() (ivy.stateful.optimizers.sgd method)": [[686, "ivy.stateful.optimizers.SGD.__init__"]], "ivy.stateful.optimizers": [[686, "module-ivy.stateful.optimizers"]], "set_state() (ivy.stateful.optimizers.adam method)": [[686, "ivy.stateful.optimizers.Adam.set_state"]], "set_state() (ivy.stateful.optimizers.lamb method)": [[686, "ivy.stateful.optimizers.LAMB.set_state"]], "set_state() (ivy.stateful.optimizers.lars method)": [[686, "ivy.stateful.optimizers.LARS.set_state"]], "set_state() (ivy.stateful.optimizers.optimizer method)": [[686, "ivy.stateful.optimizers.Optimizer.set_state"]], "set_state() (ivy.stateful.optimizers.sgd method)": [[686, "ivy.stateful.optimizers.SGD.set_state"]], "state (ivy.stateful.optimizers.adam property)": [[686, "ivy.stateful.optimizers.Adam.state"]], "state (ivy.stateful.optimizers.lamb property)": [[686, "ivy.stateful.optimizers.LAMB.state"]], "state (ivy.stateful.optimizers.lars property)": [[686, "ivy.stateful.optimizers.LARS.state"]], "state (ivy.stateful.optimizers.sgd property)": [[686, "ivy.stateful.optimizers.SGD.state"]], "step() (ivy.stateful.optimizers.optimizer method)": [[686, "ivy.stateful.optimizers.Optimizer.step"]], "sequential (class in ivy.stateful.sequential)": [[687, "ivy.stateful.sequential.Sequential"]], "__init__() (ivy.stateful.sequential.sequential method)": [[687, "ivy.stateful.sequential.Sequential.__init__"]], "ivy.stateful.sequential": [[687, "module-ivy.stateful.sequential"]], "check_all() (in module ivy.utils.assertions)": [[688, "ivy.utils.assertions.check_all"]], "check_all_or_any_fn() (in module ivy.utils.assertions)": [[688, "ivy.utils.assertions.check_all_or_any_fn"]], "check_any() (in module ivy.utils.assertions)": [[688, "ivy.utils.assertions.check_any"]], "check_dev_correct_formatting() (in module ivy.utils.assertions)": [[688, "ivy.utils.assertions.check_dev_correct_formatting"]], "check_dimensions() (in module ivy.utils.assertions)": [[688, "ivy.utils.assertions.check_dimensions"]], "check_elem_in_list() (in module ivy.utils.assertions)": [[688, "ivy.utils.assertions.check_elem_in_list"]], "check_equal() (in module ivy.utils.assertions)": [[688, "ivy.utils.assertions.check_equal"]], "check_exists() (in module ivy.utils.assertions)": [[688, "ivy.utils.assertions.check_exists"]], "check_false() (in module ivy.utils.assertions)": [[688, "ivy.utils.assertions.check_false"]], "check_fill_value_and_dtype_are_compatible() (in module ivy.utils.assertions)": [[688, "ivy.utils.assertions.check_fill_value_and_dtype_are_compatible"]], "check_gather_input_valid() (in module ivy.utils.assertions)": [[688, "ivy.utils.assertions.check_gather_input_valid"]], "check_gather_nd_input_valid() (in module ivy.utils.assertions)": [[688, "ivy.utils.assertions.check_gather_nd_input_valid"]], "check_greater() (in module ivy.utils.assertions)": [[688, "ivy.utils.assertions.check_greater"]], "check_inplace_sizes_valid() (in module ivy.utils.assertions)": [[688, "ivy.utils.assertions.check_inplace_sizes_valid"]], "check_isinstance() (in module ivy.utils.assertions)": [[688, "ivy.utils.assertions.check_isinstance"]], "check_kernel_padding_size() (in module ivy.utils.assertions)": [[688, "ivy.utils.assertions.check_kernel_padding_size"]], "check_less() (in module ivy.utils.assertions)": [[688, "ivy.utils.assertions.check_less"]], "check_one_way_broadcastable() (in module ivy.utils.assertions)": [[688, "ivy.utils.assertions.check_one_way_broadcastable"]], "check_same_dtype() (in module ivy.utils.assertions)": [[688, "ivy.utils.assertions.check_same_dtype"]], "check_shape() (in module ivy.utils.assertions)": [[688, "ivy.utils.assertions.check_shape"]], "check_shapes_broadcastable() (in module ivy.utils.assertions)": [[688, "ivy.utils.assertions.check_shapes_broadcastable"]], "check_true() (in module ivy.utils.assertions)": [[688, "ivy.utils.assertions.check_true"]], "check_unsorted_segment_min_valid_params() (in module ivy.utils.assertions)": [[688, "ivy.utils.assertions.check_unsorted_segment_min_valid_params"]], "ivy.utils.assertions": [[688, "module-ivy.utils.assertions"]], "ivy.utils.backend": [[689, "module-ivy.utils.backend"]], "importtransformer (class in ivy.utils.backend.ast_helpers)": [[690, "ivy.utils.backend.ast_helpers.ImportTransformer"]], "ivyloader (class in ivy.utils.backend.ast_helpers)": [[690, "ivy.utils.backend.ast_helpers.IvyLoader"]], "ivypathfinder (class in ivy.utils.backend.ast_helpers)": [[690, "ivy.utils.backend.ast_helpers.IvyPathFinder"]], "__init__() (ivy.utils.backend.ast_helpers.importtransformer method)": [[690, "ivy.utils.backend.ast_helpers.ImportTransformer.__init__"]], "__init__() (ivy.utils.backend.ast_helpers.ivyloader method)": [[690, "ivy.utils.backend.ast_helpers.IvyLoader.__init__"]], "exec_module() (ivy.utils.backend.ast_helpers.ivyloader method)": [[690, "ivy.utils.backend.ast_helpers.IvyLoader.exec_module"]], "find_spec() (ivy.utils.backend.ast_helpers.ivypathfinder method)": [[690, "ivy.utils.backend.ast_helpers.IvyPathFinder.find_spec"]], "impersonate_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[690, "ivy.utils.backend.ast_helpers.ImportTransformer.impersonate_import"]], "ivy.utils.backend.ast_helpers": [[690, "module-ivy.utils.backend.ast_helpers"]], "visit_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[690, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_Import"]], "visit_importfrom() (ivy.utils.backend.ast_helpers.importtransformer method)": [[690, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_ImportFrom"]], "contextmanager (class in ivy.utils.backend.handler)": [[691, "ivy.utils.backend.handler.ContextManager"]], "__init__() (ivy.utils.backend.handler.contextmanager method)": [[691, "ivy.utils.backend.handler.ContextManager.__init__"]], "choose_random_backend() (in module ivy.utils.backend.handler)": [[691, "ivy.utils.backend.handler.choose_random_backend"]], "convert_from_numpy_to_target_backend() (in module ivy.utils.backend.handler)": [[691, "ivy.utils.backend.handler.convert_from_numpy_to_target_backend"]], "convert_from_source_backend_to_numpy() (in module ivy.utils.backend.handler)": [[691, "ivy.utils.backend.handler.convert_from_source_backend_to_numpy"]], "current_backend() (in module ivy.utils.backend.handler)": [[691, "ivy.utils.backend.handler.current_backend"]], "fn_name_from_version_specific_fn_name() (in module ivy.utils.backend.handler)": [[691, "ivy.utils.backend.handler.fn_name_from_version_specific_fn_name"]], "ivy.utils.backend.handler": [[691, "module-ivy.utils.backend.handler"]], "prevent_access_locally() (in module ivy.utils.backend.handler)": [[691, "ivy.utils.backend.handler.prevent_access_locally"]], "previous_backend() (in module ivy.utils.backend.handler)": [[691, "ivy.utils.backend.handler.previous_backend"]], "set_backend() (in module ivy.utils.backend.handler)": [[691, "ivy.utils.backend.handler.set_backend"]], "set_backend_to_specific_version() (in module ivy.utils.backend.handler)": [[691, "ivy.utils.backend.handler.set_backend_to_specific_version"]], "set_jax_backend() (in module ivy.utils.backend.handler)": [[691, "ivy.utils.backend.handler.set_jax_backend"]], "set_mxnet_backend() (in module ivy.utils.backend.handler)": [[691, "ivy.utils.backend.handler.set_mxnet_backend"]], "set_numpy_backend() (in module ivy.utils.backend.handler)": [[691, "ivy.utils.backend.handler.set_numpy_backend"]], "set_paddle_backend() (in module ivy.utils.backend.handler)": [[691, "ivy.utils.backend.handler.set_paddle_backend"]], "set_tensorflow_backend() (in module ivy.utils.backend.handler)": [[691, "ivy.utils.backend.handler.set_tensorflow_backend"]], "set_torch_backend() (in module ivy.utils.backend.handler)": [[691, "ivy.utils.backend.handler.set_torch_backend"]], "unset_backend() (in module ivy.utils.backend.handler)": [[691, "ivy.utils.backend.handler.unset_backend"]], "with_backend() (in module ivy.utils.backend.handler)": [[691, "ivy.utils.backend.handler.with_backend"]], "available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[692, "ivy.utils.backend.sub_backend_handler.available_sub_backends"]], "clear_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[692, "ivy.utils.backend.sub_backend_handler.clear_sub_backends"]], "find_available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[692, "ivy.utils.backend.sub_backend_handler.find_available_sub_backends"]], "ivy.utils.backend.sub_backend_handler": [[692, "module-ivy.utils.backend.sub_backend_handler"]], "set_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[692, "ivy.utils.backend.sub_backend_handler.set_sub_backend"]], "unset_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[692, "ivy.utils.backend.sub_backend_handler.unset_sub_backend"]], "import_module() (in module ivy.utils.dynamic_import)": [[693, "ivy.utils.dynamic_import.import_module"]], "ivy.utils.dynamic_import": [[693, "module-ivy.utils.dynamic_import"]], "convert_interleaved_input() (in module ivy.utils.einsum_parser)": [[694, "ivy.utils.einsum_parser.convert_interleaved_input"]], "convert_subscripts() (in module ivy.utils.einsum_parser)": [[694, "ivy.utils.einsum_parser.convert_subscripts"]], "find_output_shape() (in module ivy.utils.einsum_parser)": [[694, "ivy.utils.einsum_parser.find_output_shape"]], "find_output_str() (in module ivy.utils.einsum_parser)": [[694, "ivy.utils.einsum_parser.find_output_str"]], "gen_unused_symbols() (in module ivy.utils.einsum_parser)": [[694, "ivy.utils.einsum_parser.gen_unused_symbols"]], "get_symbol() (in module ivy.utils.einsum_parser)": [[694, "ivy.utils.einsum_parser.get_symbol"]], "has_valid_einsum_chars_only() (in module ivy.utils.einsum_parser)": [[694, "ivy.utils.einsum_parser.has_valid_einsum_chars_only"]], "is_valid_einsum_char() (in module ivy.utils.einsum_parser)": [[694, "ivy.utils.einsum_parser.is_valid_einsum_char"]], "ivy.utils.einsum_parser": [[694, "module-ivy.utils.einsum_parser"]], "legalise_einsum_expr() (in module ivy.utils.einsum_parser)": [[694, "ivy.utils.einsum_parser.legalise_einsum_expr"]], "possibly_convert_to_numpy() (in module ivy.utils.einsum_parser)": [[694, "ivy.utils.einsum_parser.possibly_convert_to_numpy"]], "inplaceupdateexception": [[695, "ivy.utils.exceptions.InplaceUpdateException"]], "invalidbackendexception": [[695, "ivy.utils.exceptions.InvalidBackendException"]], "ivyattributeerror": [[695, "ivy.utils.exceptions.IvyAttributeError"]], "ivybackendexception": [[695, "ivy.utils.exceptions.IvyBackendException"]], "ivybroadcastshapeerror": [[695, "ivy.utils.exceptions.IvyBroadcastShapeError"]], "ivydeviceerror": [[695, "ivy.utils.exceptions.IvyDeviceError"]], "ivydtypepromotionerror": [[695, "ivy.utils.exceptions.IvyDtypePromotionError"]], "ivyerror": [[695, "ivy.utils.exceptions.IvyError"]], "ivyexception": [[695, "ivy.utils.exceptions.IvyException"]], "ivyindexerror": [[695, "ivy.utils.exceptions.IvyIndexError"]], "ivynotimplementedexception": [[695, "ivy.utils.exceptions.IvyNotImplementedException"]], "ivyvalueerror": [[695, "ivy.utils.exceptions.IvyValueError"]], "__init__() (ivy.utils.exceptions.inplaceupdateexception method)": [[695, "ivy.utils.exceptions.InplaceUpdateException.__init__"]], "__init__() (ivy.utils.exceptions.invalidbackendexception method)": [[695, "ivy.utils.exceptions.InvalidBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivyattributeerror method)": [[695, "ivy.utils.exceptions.IvyAttributeError.__init__"]], "__init__() (ivy.utils.exceptions.ivybackendexception method)": [[695, "ivy.utils.exceptions.IvyBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivybroadcastshapeerror method)": [[695, "ivy.utils.exceptions.IvyBroadcastShapeError.__init__"]], "__init__() (ivy.utils.exceptions.ivydeviceerror method)": [[695, "ivy.utils.exceptions.IvyDeviceError.__init__"]], "__init__() (ivy.utils.exceptions.ivydtypepromotionerror method)": [[695, "ivy.utils.exceptions.IvyDtypePromotionError.__init__"]], "__init__() (ivy.utils.exceptions.ivyerror method)": [[695, "ivy.utils.exceptions.IvyError.__init__"]], "__init__() (ivy.utils.exceptions.ivyexception method)": [[695, "ivy.utils.exceptions.IvyException.__init__"]], "__init__() (ivy.utils.exceptions.ivyindexerror method)": [[695, "ivy.utils.exceptions.IvyIndexError.__init__"]], "__init__() (ivy.utils.exceptions.ivynotimplementedexception method)": [[695, "ivy.utils.exceptions.IvyNotImplementedException.__init__"]], "__init__() (ivy.utils.exceptions.ivyvalueerror method)": [[695, "ivy.utils.exceptions.IvyValueError.__init__"]], "handle_exceptions() (in module ivy.utils.exceptions)": [[695, "ivy.utils.exceptions.handle_exceptions"]], "ivy.utils.exceptions": [[695, "module-ivy.utils.exceptions"]], "add_array_specs() (in module ivy.utils.inspection)": [[696, "ivy.utils.inspection.add_array_specs"]], "fn_array_spec() (in module ivy.utils.inspection)": [[696, "ivy.utils.inspection.fn_array_spec"]], "ivy.utils.inspection": [[696, "module-ivy.utils.inspection"]], "ivy.utils.logging": [[697, "module-ivy.utils.logging"]], "set_logging_mode() (in module ivy.utils.logging)": [[697, "ivy.utils.logging.set_logging_mode"]], "unset_logging_mode() (in module ivy.utils.logging)": [[697, "ivy.utils.logging.unset_logging_mode"]], "profiler (class in ivy.utils.profiler)": [[698, "ivy.utils.profiler.Profiler"]], "__init__() (ivy.utils.profiler.profiler method)": [[698, "ivy.utils.profiler.Profiler.__init__"]], "ivy.utils.profiler": [[698, "module-ivy.utils.profiler"]], "print_stats (ivy.utils.profiler.profiler attribute)": [[698, "ivy.utils.profiler.Profiler.print_stats"]], "viz (ivy.utils.profiler.profiler attribute)": [[698, "ivy.utils.profiler.Profiler.viz"]], "cprint() (in module ivy.utils.verbosity)": [[699, "ivy.utils.verbosity.cprint"]], "ivy.utils.verbosity": [[699, "module-ivy.utils.verbosity"]], "applied libraries": [[748, "term-Applied-Libraries"]], "automatic code conversions": [[748, "term-Automatic-Code-Conversions"]], "backend handler": [[748, "term-Backend-Handler"]], "compositional functions": [[748, "term-Compositional-Functions"]], "convenience functions": [[748, "term-Convenience-Functions"]], "framework": [[748, "term-Framework"]], "framework handler": [[748, "term-Framework-Handler"]], "graph compiler": [[748, "term-Graph-Compiler"]], "ivy array": [[748, "term-Ivy-Array"]], "ivy backends": [[748, "term-Ivy-Backends"]], "ivy builder": [[748, "term-Ivy-Builder"]], "ivy compiler": [[748, "term-Ivy-Compiler"]], "ivy container": [[748, "term-Ivy-Container"]], "ivy frontends": [[748, "term-Ivy-Frontends"]], "ivy functional api": [[748, "term-Ivy-Functional-API"]], "ivy graph compiler": [[748, "term-Ivy-Graph-Compiler"]], "ivy transpiler": [[748, "term-Ivy-Transpiler"]], "mixed functions": [[748, "term-Mixed-Functions"]], "native array": [[748, "term-Native-Array"]], "nestable functions": [[748, "term-Nestable-Functions"]], "pipeline": [[748, "term-Pipeline"]], "primary functions": [[748, "term-Primary-Functions"]], "standalone functions": [[748, "term-Standalone-Functions"]], "submodule helper functions": [[748, "term-Submodule-Helper-Functions"]]}})